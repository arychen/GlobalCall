cscope 15 $HOME/Project/siproxy-dev               0002253567
	@main.c

1 #i‡!
deföed
(
_POSIX_SOURCE
)

2 
	#_POSIX_SOURCE


	)

4 #i‡!
deföed
(
_BSD_SOURCE
)

5 
	#_BSD_SOURCE


	)

8 
	~<sys/ty≥s.h
>

9 
	~<sys/sockë.h
>

10 
	~<√töë/ö.h
>

11 
	~<¨∑/öë.h
>

12 
	~<√tdb.h
>

13 
	~<pﬁl.h
>

14 
	~<î∫o.h
>

15 
	~<°dio.h
>

16 
	~<°rög.h
>

17 
	~<°dlib.h
>

18 
	~<˘y≥.h
>

19 
	~<ãrmios.h
>

20 
	~<uni°d.h
>

21 
	~<î∫o.h
>

22 
	~<±hªad.h
>

24 
	~"ã ë.h
"

25 
	~"rs232.h
"

26 
	~"m©ch.h
"

27 
	~"queue.h
"

28 
	~"MQTTAsync.h
"

32 
	#ADDRESS
 "t˝://121.42.52.171:532"

	)

34 
	#CLIENTID
 "100001Ali˚"

	)

35 
	#PEERID
 "200002Bob"

	)

38 
	#TOPIC_STATUS
 "/"
CLIENTID
"/Sètus"

	)

39 
	#PEERID_STATUS
 "/"
PEERID
"/Sètus"

	)

41 
	#ONLINE
 "O∆öe"

	)

42 
	#OFFLINE
 "OfÊöe"

	)

46 
	#TOPIC_BOB_CALLING
 "/"
PEERID
"/CÆlög/Ph⁄eOthî"

	)

47 
	#TOPIC_BOB_ACK
 "/"
CLIENTID
"/Gë/Ph⁄eOthî"

	)

51 
	#TOPIC_ALICE_CALLED
 "/"
CLIENTID
"/CÆÀd/Ph⁄eOthî"

	)

52 
	#TOPIC_ALICE_ACK
 "/"
PEERID
"Gë/Ph⁄eOthî"

	)

55 
	#TOPIC_SMS
 "/"
CLIENTID
"/SMS"

	)

56 
	#PEERID_SMS
 "/"
PEERID
"/SMS"

	)

60 
	#TOPIC_ALICE_MODEM
 "/"
CLIENTID
"/Modem/Sètus"

	)

62 
	#MODEM_CALL_OK
 "Ok"

	)

64 
	#QOS
 2

	)

65 
	#TIMEOUT
 10000L

	)

67 
	#NELEMS
(
¨øy
Ë(◊ºayË/ ◊ºay[0]))

	)

69 
	~<°d¨g.h
>

70 
	~<sys/time.h
>

72 
	$LOG
(c⁄° *
fmt
, ...) {

73 
d©e
[20];

74 
timevÆ
 
tv
;

75 
va_li°
 
¨gs
;

78 
	`gëtimeofday
(&
tv
, 
NULL
);

79 
	`°r·ime
(
d©e
, 
	`NELEMS
(d©e), "%Y-%m-%dT%H:%M:%S", 
	`loˇ…ime
(&
tv
.
tv_£c
));

80 
	`¥ötf
("[%s.%03dZ] ", 
d©e
, ()
tv
.
tv_u£c
/1000);

83 
	`va_°¨t
(
¨gs
, 
fmt
);

84 
	`v¥ötf
(
fmt
, 
¨gs
);

85 
	`va_íd
(
¨gs
);

86 
	}
}

88 
queue
 
	gevíts_queue
;

90 
	sevt
 {

91 
	mevít
;

92 
	mvÆ
[1024];

100 
	eEVENT
 {

101 
	mEVT_NONE
 = 1,

106 
	mEVT_MODEM_COLP
,

107 
	mEVT_MODEM_CLIP
,

108 
	mEVT_MODEM_NO_CARRIER
,

109 
	mEVT_MODEM_BUSY
,

110 
	mEVT_MODEM_OK
,

111 
	mEVT_MODEM_ERROR
,

112 
	mEVT_MODEM_SMS
,

114 
	mEVT_MODEM_MAX
,

120 
	mEVT_SIP_CALLING
 = 
EVT_MODEM_MAX
 + 1,

121 
	mEVT_SIP_INCOMING
,

122 
	mEVT_SIP_EARLY
,

123 
	mEVT_SIP_CONNECTING
,

124 
	mEVT_SIP_CONFIRMED
,

125 
	mEVT_SIP_DISCONNCTD
,

127 
	mEVT_SIP_MAX
,

132 
	mEVT_MQTT_CALLING
 = 
EVT_SIP_MAX
 + 1,

133 
	mEVT_MQTT_CALLED
,

134 
	mEVT_MQTT_STATUS
,

135 
	mEVT_MQTT_SMS
,

137 
	mEVT_MQTT_MAX
,

139 
	mEVT_UNKNOW
,

142 
	sevít_m≠
 {

143 
EVENT
 
	mevít
;

144 
	mªgex
[128];

147 
evít_m≠
 
	gmodem_evíts
[] = {

149 .
evít
 = 
EVT_NONE
,

150 .
	gªgex
 = "NONE",

154 .
	gevít
 = 
EVT_MODEM_COLP
,

155 .
	gªgex
 = "+COLP",

159 .
	gevít
 = 
EVT_MODEM_CLIP
,

160 .
	gªgex
 = "+CLIP",

164 .
	gevít
 = 
EVT_MODEM_NO_CARRIER
,

165 .
	gªgex
 = "NO CARRIER",

169 .
	gevít
 = 
EVT_MODEM_BUSY
,

170 .
	gªgex
 = "BUSY",

174 .
	gevít
 = 
EVT_MODEM_OK
,

175 .
	gªgex
 = "OK",

179 .
	gevít
 = 
EVT_MODEM_ERROR
,

180 .
	gªgex
 = "ERROR",

184 .
	gevít
 = 
EVT_MODEM_SMS
,

185 .
	gªgex
 = "+CMTI: \"SM\"",

189 
evít_m≠
 
	gsù_evíts
[] = {

191 .
evít
 = 
EVT_SIP_CALLING
,

192 .
	gªgex
 = "state changedÅo CALLING",

196 .
	gevít
 = 
EVT_SIP_INCOMING
,

197 .
	gªgex
 = "Press caáÅoánswer",

201 .
	gevít
 = 
EVT_SIP_EARLY
,

202 .
	gªgex
 = "NONE",

206 .
	gevít
 = 
EVT_SIP_CONNECTING
,

207 .
	gªgex
 = "state changedÅo CONNECTING",

211 .
	gevít
 = 
EVT_SIP_CONFIRMED
,

212 .
	gªgex
 = "state changedÅo CONFIRMED",

216 .
	gevít
 = 
EVT_SIP_DISCONNCTD
,

217 .
	gªgex
 = "is DISCONNECTED",

221 
evít_m≠
 
	gmqâ_evíts
[] = {

223 .
evít
 = 
EVT_MQTT_CALLING
,

224 .
	gªgex
 = 
TOPIC_BOB_CALLING
,

228 .
	gevít
 = 
EVT_MQTT_STATUS
,

229 .
	gªgex
 = 
PEERID_STATUS
,

233 .
	gevít
 = 
EVT_MQTT_SMS
,

234 .
	gªgex
 = 
PEERID_SMS
,

238 
EVENT
 
	$föd_evít
(*
buf
, 
size
, 
evít_m≠
 *
evíts
, 
num
)

240 
i
;

242 
i
 = 0; i < 
num
; i++) {

243 i‡(
	`m©ch
(
evíts
[
i
].
ªgex
, 
buf
)) {

244  
evíts
[
i
].
evít
;

248  
EVT_NONE
;

249 
	}
}

260 
ssize_t
 
	$ªad_löe
(
fd
, *
buf„r
, 
size_t
 
n
)

262 
ssize_t
 
num_ªad
;

263 
size_t
 
tŸ_ªad
;

264 *
buf
;

265 
ch
;

267 i‡(
n
 <0 || 
buf„r
 =
NULL
) {

268 
î∫o
 = 
EINVAL
;

272 
buf
 = 
buf„r
;

274 
tŸ_ªad
 = 0;

276 
num_ªad
 = 
	`ªad
(
fd
, &
ch
, 1);

278 i‡(
num_ªad
 == -1) {

279 i‡(
î∫o
 =
EINTR
)

284 } i‡(
num_ªad
 == 0) {

285 i‡(
tŸ_ªad
 == 0)

291 i‡(
tŸ_ªad
 < 
n
 - 1) {

292 
tŸ_ªad
++;

293 *
buf
++ = 
ch
;

296 i‡(
ch
 == '\n')

301 *
buf
 = '\0';

302  
tŸ_ªad
;

303 
	}
}

306 
	$modem_cmd_waô
(
u¨t
, *
cmd
, *
ª•⁄d
)

308 
buf
[4096] = {0};

309 
n
, 
i
 = 0;

311 
	`rs232_˝uts
(
u¨t
, 
cmd
);

312 
	`LOG
("T:>>£¡ : %s", 
cmd
);

313 
	`u¶ìp
(300000);

316 
n
 = 
	`ªad_löe
(
u¨t
, 
buf
, 4095);

318 i‡(
n
 > 0) {

319 
buf
[
n
] = 0;

321 
i
 = 0; i < 
n
; i++) {

322 i‡(
buf
[
i
] < 32) {

323 
buf
[
i
] = '.';

326 
	`LOG
("T:<<ªcv : %s\n", (*)
buf
);

330 i‡(
n
 > 0 && 
	`m©ch
(
ª•⁄d
, (*)
buf
))

335 
	}
}

338 
	$modem_cmd
(
u¨t
, *
cmd
)

340 
	`LOG
("T:>>£¡ : %s", 
cmd
);

341 
	`rs232_˝uts
(
u¨t
, 
cmd
);

344 
	}
}

350 
	$modem_make_ˇŒ
(
u¨t
, *
num
)

352 
cmd
[128] = {0};

353 
	`¢¥ötf
(
cmd
, (cmd), "ATD%s;\r\n", 
num
);

354  
	`modem_cmd
(
u¨t
, 
cmd
);

355 
	}
}

357 
	$modem_™swî_ˇŒ
(
u¨t
)

359  
	`modem_cmd
(
u¨t
, "ATA\r\n");

360 
	}
}

362 
	$modem_h™gup_ˇŒ
(
u¨t
)

364  
	`modem_cmd
(
u¨t
, "ATH\r\n");

365 
	}
}

367 
	$modem_gë_sms
(
u¨t
, *
ödex
)

369 
cmd
[128] = {0};

370 
	`¢¥ötf
(
cmd
, (cmd), "AT+CMGR=%s\r\n", 
ödex
);

371  
	`modem_cmd
(
u¨t
, 
cmd
);

372 
	}
}

374 
	$modem_dñëe_sms
(
u¨t
, *
ödex
)

376 
cmd
[128] = {0};

377 
	`¢¥ötf
(
cmd
, (cmd), "AT+CMGD=%s\r\n", 
ödex
);

378  
	`modem_cmd
(
u¨t
, 
cmd
);

379 
	}
}

381 
	$modem_£nd_sms
(
u¨t
, *
pdu
, 
çdu_Àn
)

383 
cmd
[128] = {0};

384 
d©a
[4096] = {0};

385 
	`¢¥ötf
(
cmd
, (cmd), "AT+CMGS=%d\r", 
çdu_Àn
);

386 
	`modem_cmd
(
u¨t
, 
cmd
);

387 
	`u¶ìp
(300000);

388 
	`¢¥ötf
(
d©a
, (d©a), "%s", 
pdu
);

389 
d©a
[
	`°æí
(data)] = 0x1a;

390  
	`modem_cmd
(
u¨t
, 
d©a
);

391 
	}
}

393 
ã ë_t
 *
	gã ë
;

394 
	gdo_echo
;

396 
modem_evít_sms_queue
(*
buf
, 
size
);

397 
	$modem_evít_queue
(*
buf
, 
size
)

399 
EVENT
 
evít
 = 
EVT_NONE
;

401 
evít
 = 
	`föd_evít
(
buf
, 
size
, 
modem_evíts
, 
	`NELEMS
(modem_events));

402 i‡(
evít
 !
EVT_NONE
) {

403 i‡(
evít
 =
EVT_MODEM_SMS
) {

404 
	`modem_evít_sms_queue
(
buf
, 
size
);

408 
evt
 *evà
	`mÆloc
((*evt));

409 i‡(!
evt
) {

410 
	`Ârötf
(
°dîr
, "mÆlo¯Áûed: %s\n", 
	`°ªº‹
(
î∫o
));

413 
evt
->
evít
 =Évent;

414 
	`¢¥ötf
(
evt
->
vÆ
, ”vt->vÆ), "%s", 
buf
);

416 
	`queue_add
(&
evíts_queue
, 
evt
,Évt->
evít
);

420 
	}
}

422 
	$sù_evít_queue
(*
buf
, 
size
)

424 
EVENT
 
evít
 = 
EVT_NONE
;

426 
evít
 = 
	`föd_evít
(
buf
, 
size
, 
sù_evíts
, 
	`NELEMS
(sip_events));

427 i‡(
evít
 !
EVT_NONE
) {

428 
evt
 *evà
	`mÆloc
((*evt));

429 i‡(!
evt
) {

430 
	`Ârötf
(
°dîr
, "mÆlo¯Áûed: %s\n", 
	`°ªº‹
(
î∫o
));

433 
evt
->
evít
 =Évent;

434 
	`¢¥ötf
(
evt
->
vÆ
, ”vt->vÆ), "%s", 
buf
);

436 
	`queue_add
(&
evíts_queue
, 
evt
,Évt->
evít
);

438 
	}
}

440 
	$mqâ_evít_queue
(*
t›ic
, *
∂aylﬂd
, 
∑lylﬂdÀn
)

442 
EVENT
 
evít
 = 
EVT_NONE
;

444 
evít
 = 
	`föd_evít
(
t›ic
, 
	`°æí
—›ic), 
mqâ_evíts
, 
	`NELEMS
(mqtt_events));

445 i‡(
evít
 !
EVT_NONE
) {

446 
evt
 *evà
	`mÆloc
((*evt));

447 i‡(!
evt
) {

448 
	`Ârötf
(
°dîr
, "mÆlo¯Áûed: %s\n", 
	`°ªº‹
(
î∫o
));

451 
evt
->
evít
 =Évent;

452 
	`¢¥ötf
(
evt
->
vÆ
, 
∑lylﬂdÀn
+1, "%s", 
∂aylﬂd
);

454 
	`queue_add
(&
evíts_queue
, 
evt
,Évt->
evít
);

456 
	}
}

459 
	eCALL_INIT
 {

460 
	mINIT_NONE
,

461 
	mINIT_FROM_MODEM
,

462 
	mINIT_FROM_SIP
,

466 
	ePEER_STATUS
 {

467 
	mPEER_OFFLINE
,

468 
	mPEER_ONLINE
,

472 
	$ã ë_öput
(*
buf„r
, 
size
)

474 
¸lf
[] = { '\r', '\n' };

475 
i
;

477 
	`LOG
("\n\nS:>>sent : ");

478 
i
 = 0; i !
size
; ++i) {

483 i‡(
buf„r
[
i
] == '\r' || buffer[i] == '\n') {

484 i‡(
do_echo
)

485 
	`LOG
("\r\n");

486 
	`ã ë_£nd
(
ã ë
, 
¸lf
, 2);

488 i‡(
do_echo
)

489 
	`putch¨
(
buf„r
[
i
]);

490 
	`ã ë_£nd
(
ã ë
, 
buf„r
 + 
i
, 1);

493 
	`fÊush
(
°dout
);

494 
	}
}

500 
	$sù_make_ˇŒ
(*
≥î
)

502 
cmd
[256] = {0};

503 
	`¢¥ötf
(
cmd
, (cmd), "ˇŒÇew %s\r\n", 
≥î
);

504 
	`ã ë_öput
(
cmd
, 
	`°æí
(cmd));

505 
	}
}

507 
	$sù_™swî_ˇŒ
()

509 
cmd
[256] = {0};

510 
	`¢¥ötf
(
cmd
, (cmd), "callánswer 200\r\n");

511 
	`ã ë_öput
(
cmd
, 
	`°æí
(cmd));

512 
	}
}

514 
	$sù_h™gup_ˇŒ
()

516 
cmd
[256] = {0};

517 
	`¢¥ötf
(
cmd
, (cmd), "hA\r\n");

518 
	`ã ë_öput
(
cmd
, 
	`°æí
(cmd));

519 
	}
}

521 c⁄° 
ã ë_ãl›t_t
 
	gãl›ts
[] = {

523 .
ãl›t
 = 
TELNET_TELOPT_ECHO
,

524 .
	gus
 = 
TELNET_WONT
,

525 .
	ghim
 = 
TELNET_DO


529 .
	gãl›t
 = 
TELNET_TELOPT_TTYPE
,

530 .
	gus
 = 
TELNET_WILL
,

531 .
	ghim
 = 
TELNET_DONT


535 .
	gãl›t
 = 
TELNET_TELOPT_COMPRESS2
,

536 .
	gus
 = 
TELNET_WONT
,

537 .
	ghim
 = 
TELNET_DO


541 .
	gãl›t
 = 
TELNET_TELOPT_MSSP
,

542 .
	gus
 = 
TELNET_WONT
,

543 .
	ghim
 = 
TELNET_DO


547 .
	gãl›t
 = -1,

548 .
	gus
 = 0,

549 .
	ghim
 = 0

553 
	$˛ónup
()

556 
	}
}

558 
	$modem_evít
(*
buf
, 
n
)

560 
i
;

563 i‡(
n
 > 0) {

564 
buf
[
n
] = 0;

566 
i
 = 0; i < 
n
; i++) {

567 i‡(
buf
[
i
] < 32) {

568 
buf
[
i
] = '.';

571 
	`LOG
("T:<<ªcv : %s\n", (*)
buf
);

574 
	`fÊush
(
°dout
);

577 i‡(
n
 > 0)

578 
	`modem_evít_queue
((*)
buf
, 
n
);

579 
	}
}

581 
	$_£nd
(
sock
, c⁄° *
buf„r
, 
size_t
 
size
)

583 
rs
;

586 
size
 > 0) {

587 i‡((
rs
 = 
	`£nd
(
sock
, 
buf„r
, 
size
, 0)) == -1) {

588 
	`Ârötf
(
°dîr
, "£nd(ËÁûed: %s\n", 
	`°ªº‹
(
î∫o
));

589 
	`exô
(-1);

590 } i‡(
rs
 == 0) {

591 
	`Ârötf
(
°dîr
, "send() unexpectedlyÑeturned 0\n");

592 
	`exô
(-1);

596 
buf„r
 +
rs
;

597 
size
 -
rs
;

599 
	}
}

601 
	$sù_evít
(
ã ë_t
 *
ã ë
, 
ã ë_evít_t
 *
ev
,

602 *
u£r_d©a
)

604 
sock
 = *(*)
u£r_d©a
;

606 
ev
->
ty≥
) {

608 
TELNET_EV_DATA
:

609 
	`LOG
("S:%.*s\n", ()
ev
->
d©a
.
size
,Év->d©a.
buf„r
);

611 
	`fÊush
(
°dout
);

612 
dñim
[] = "\n";

613 *
tokí
 = 
NULL
;

614 *
°r
 = (*)
ev
->
d©a
.
buf„r
;

617 
tokí
 = 
	`°πok
(
°r
, 
dñim
);Åokí;Åokí = såtok(
NULL
, delim)) {

618 
	`sù_evít_queue
(
tokí
, 
	`°æí
(token));

623 
TELNET_EV_SEND
:

624 
	`_£nd
(
sock
, 
ev
->
d©a
.
buf„r
,Év->d©a.
size
);

628 
TELNET_EV_WILL
:

631 i‡(
ev
->
√g
.
ãl›t
 =
TELNET_TELOPT_ECHO
)

632 
do_echo
 = 0;

636 
TELNET_EV_WONT
:

637 i‡(
ev
->
√g
.
ãl›t
 =
TELNET_TELOPT_ECHO
)

638 
do_echo
 = 1;

642 
TELNET_EV_DO
:

646 
TELNET_EV_DONT
:

650 
TELNET_EV_TTYPE
:

652 i‡(
ev
->
ây≥
.
cmd
 =
TELNET_TTYPE_SEND
) {

653 
	`ã ë_ây≥_is
(
ã ë
, 
	`gëív
("TERM"));

658 
TELNET_EV_SUBNEGOTIATION
:

662 
TELNET_EV_ERROR
:

663 
	`Ârötf
(
°dîr
, "ERROR: %s\n", 
ev
->
îr‹
.
msg
);

664 
	`exô
(-1);

670 
	}
}

673 
MQTTAsync
 
	g˛õ¡
;

674 vﬁ©ûê
MQTTAsync_tokí
 
	gdñivîedtokí
;

675 
MQTTAsync_wûlO±i⁄s
 
	gwûlO±i⁄s
 = 
MQTTAsync_wûlO±i⁄s_öôülizî
;

677 
	$addWûlO±i⁄s
(
MQTTAsync_c⁄√˘O±i⁄s
 *
c⁄√˘O±i⁄s
)

679 
wûlO±i⁄s
.
t›icName
 = 
TOPIC_STATUS
;

680 
wûlO±i⁄s
.
mesßge
 = 
OFFLINE
;

681 
wûlO±i⁄s
.
ªèöed
 = 1;

682 
wûlO±i⁄s
.
qos
 = 2;

684 
c⁄√˘O±i⁄s
->
wûl
 = &
wûlO±i⁄s
;

685 
	}
}

687 
⁄C⁄√˘
(*
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
 *
ª•⁄£
);

688 
⁄C⁄√˘Faûuª
(*
c⁄ãxt
, 
MQTTAsync_ÁûuªD©a
 *
ª•⁄£
);

689 
	$c⁄∆o°
(*
c⁄ãxt
, *
ˇu£
)

691 
MQTTAsync_c⁄√˘O±i⁄s
 
c⁄n_›ts
 = 
MQTTAsync_c⁄√˘O±i⁄s_öôülizî
;

692 
rc
;

694 
	`LOG
("M:connectionÜost\n");

695 
	`LOG
(" cau£: %s\n", 
ˇu£
);

697 
	`LOG
("M:reconnecting\n");

698 
c⁄n_›ts
.
kìpAliveI¡îvÆ
 = 30;

699 
c⁄n_›ts
.
˛ón£ssi⁄
 = 1;

700 
c⁄n_›ts
.
⁄Suc˚ss
 = 
⁄C⁄√˘
;

701 
c⁄n_›ts
.
⁄Faûuª
 = 
⁄C⁄√˘Faûuª
;

702 
c⁄n_›ts
.
c⁄ãxt
 = 
˛õ¡
;

703 
	`addWûlO±i⁄s
(&
c⁄n_›ts
);

705 i‡((
rc
 = 
	`MQTTAsync_c⁄√˘
(
˛õ¡
, &
c⁄n_›ts
)Ë!
MQTTASYNC_SUCCESS
) {

706 
	`LOG
("M:ÁûedÅÿ°¨àc⁄√˘,Ñëu∫ codê%d\n", 
rc
);

708 
	}
}

710 
	$msg¨rvd
(*
c⁄ãxt
, *
t›icName
, 
t›icLí
, 
MQTTAsync_mesßge
 *
mesßge
)

712 
i
;

713 * 
∑ylﬂd±r
;

715 
	`LOG
("M:messageárrived\n");

716 
	`LOG
("Å›ic: %s\n", 
t›icName
);

717 
	`LOG
(" message: ");

719 
∑ylﬂd±r
 = 
mesßge
->
∑ylﬂd
;

720 
i
 = 0; i < 
mesßge
->
∑ylﬂdÀn
; i++) {

721 
	`putch¨
(*
∑ylﬂd±r
++);

723 
	`putch¨
('\n');

726 
	`mqâ_evít_queue
(
t›icName
, 
mesßge
->
∑ylﬂd
, mesßge->
∑ylﬂdÀn
);

728 
	`MQTTAsync_‰ìMesßge
(&
mesßge
);

729 
	`MQTTAsync_‰ì
(
t›icName
);

731 
	}
}

733 
	$⁄Disc⁄√˘
(*
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
 *
ª•⁄£
)

735 
	`LOG
("M:successful disconnection\n");

736 
	}
}

738 
	$⁄Síd
(*
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
 *
ª•⁄£
)

740 
	`LOG
("M:pub mesßgêwôhÅokí vÆuê%d dñivîy c⁄fúmed\n", 
ª•⁄£
->
tokí
);

741 
	}
}

743 
	$⁄C⁄√˘Faûuª
(*
c⁄ãxt
, 
MQTTAsync_ÁûuªD©a
 *
ª•⁄£
)

745 
	`LOG
("M:c⁄√˘ faûed,Ñ¯%d\n", 
ª•⁄£
 ?Ñe•⁄£->
code
 : 0);

746 
	}
}

748 
	$⁄Subs¸ibe
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

750 
	`LOG
("M:sub succeeded\n");

751 
	}
}

753 
	$⁄Subs¸ibeFaûuª
(* 
c⁄ãxt
, 
MQTTAsync_ÁûuªD©a
* 
ª•⁄£
)

755 
	`LOG
("M:sub faûed,Ñ¯%d\n", 
ª•⁄£
 ?Ñe•⁄£->
code
 : 0);

756 
	}
}

758 
	$⁄C⁄√˘
(*
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
 *
ª•⁄£
)

760 
MQTTAsync
 
˛õ¡
 = (MQTTAsync)
c⁄ãxt
;

761 
MQTTAsync_ª•⁄£O±i⁄s
 
›ts
 = 
MQTTAsync_ª•⁄£O±i⁄s_öôülizî
;

762 
MQTTAsync_mesßge
 
pubmsg
 = 
MQTTAsync_mesßge_öôülizî
;

763 
rc
;

765 
	`LOG
("M:successful connection\n");

768 
›ts
.
⁄Suc˚ss
 = 
⁄Síd
;

769 
›ts
.
c⁄ãxt
 = 
˛õ¡
;

771 
pubmsg
.
∑ylﬂd
 = 
ONLINE
;

772 
pubmsg
.
∑ylﬂdÀn
 = 
	`°æí
(
ONLINE
);

773 
pubmsg
.
qos
 = 2;

774 
pubmsg
.
ªèöed
 = 1;

775 
dñivîedtokí
 = 0;

777 i‡((
rc
 = 
	`MQTTAsync_£ndMesßge
(
˛õ¡
, 
TOPIC_STATUS
,

778 &
pubmsg
, &
›ts
)Ë!
MQTTASYNC_SUCCESS
) {

779 
	`LOG
("M:ÁûedÅÿ°¨à£ndMesßge,Ñëu∫ codê%d\n", 
rc
);

780 
	`exô
(-1);

784 
MQTTAsync_ª•⁄£O±i⁄s
 
sub°©_›ts
 = 
MQTTAsync_ª•⁄£O±i⁄s_öôülizî
;

785 
	`LOG
("M:subÅÿt›i¯%†f‹ clõ¡ %†usög QoS %d\n", 
PEERID_STATUS
, 
CLIENTID
, 
QOS
);

786 
sub°©_›ts
.
⁄Suc˚ss
 = 
⁄Subs¸ibe
;

787 
sub°©_›ts
.
⁄Faûuª
 = 
⁄Subs¸ibeFaûuª
;

788 
sub°©_›ts
.
c⁄ãxt
 = 
˛õ¡
;

790 i‡((
rc
 = 
	`MQTTAsync_subs¸ibe
(
˛õ¡
, 
PEERID_STATUS
, 
QOS
,

791 &
sub°©_›ts
)Ë!
MQTTASYNC_SUCCESS
) {

792 
	`LOG
("M:ÁûedÅÿ°¨àsubs¸ibe,Ñëu∫ codê%d\n", 
rc
);

793 
	`exô
(-1);

797 
MQTTAsync_ª•⁄£O±i⁄s
 
subph⁄e_›ts
 = 
MQTTAsync_ª•⁄£O±i⁄s_öôülizî
;

798 
	`LOG
("M:subÅÿt›i¯%†f‹ clõ¡ %†usög QoS %d\n", 
TOPIC_BOB_CALLING
, 
CLIENTID
, 
QOS
);

799 
subph⁄e_›ts
.
⁄Suc˚ss
 = 
⁄Subs¸ibe
;

800 
subph⁄e_›ts
.
⁄Faûuª
 = 
⁄Subs¸ibeFaûuª
;

801 
subph⁄e_›ts
.
c⁄ãxt
 = 
˛õ¡
;

803 i‡((
rc
 = 
	`MQTTAsync_subs¸ibe
(
˛õ¡
, 
TOPIC_BOB_CALLING
,

804 
QOS
, &
subph⁄e_›ts
)Ë!
MQTTASYNC_SUCCESS
) {

805 
	`LOG
("M:ÁûedÅÿ°¨àsubs¸ibe,Ñëu∫ codê%d\n", 
rc
);

806 
	`exô
(-1);

810 
MQTTAsync_ª•⁄£O±i⁄s
 
subsms_›ts
 = 
MQTTAsync_ª•⁄£O±i⁄s_öôülizî
;

811 
	`LOG
("M:subÅÿt›i¯%†f‹ clõ¡ %†usög QoS %d\n", 
PEERID_SMS
, 
CLIENTID
, 
QOS
);

812 
subsms_›ts
.
⁄Suc˚ss
 = 
⁄Subs¸ibe
;

813 
subsms_›ts
.
⁄Faûuª
 = 
⁄Subs¸ibeFaûuª
;

814 
subsms_›ts
.
c⁄ãxt
 = 
˛õ¡
;

816 i‡((
rc
 = 
	`MQTTAsync_subs¸ibe
(
˛õ¡
, 
PEERID_SMS
,

817 
QOS
, &
subsms_›ts
)Ë!
MQTTASYNC_SUCCESS
) {

818 
	`LOG
("M:ÁûedÅÿ°¨àsubs¸ibe,Ñëu∫ codê%d\n", 
rc
);

819 
	`exô
(-1);

821 
	}
}

823 
	$mqâ_pub
(*
t›icName
, *
∑ylﬂd
, 
∑ylﬂdÀn
, 
ªèöed
)

825 
MQTTAsync_ª•⁄£O±i⁄s
 
›ts
 = 
MQTTAsync_ª•⁄£O±i⁄s_öôülizî
;

826 
MQTTAsync_mesßge
 
pubmsg
 = 
MQTTAsync_mesßge_öôülizî
;

827 
rc
;

828 
i
;

830 
	`LOG
("M:pubÅ›i¯: %s\n", 
t›icName
);

831 
	`LOG
(" message: ");

832 *
°¨t
 = 
∑ylﬂd
;

833 
i
 = 0; i < 
∑ylﬂdÀn
; i++) {

834 
	`putch¨
(*
°¨t
++);

836 
	`putch¨
('\n');

839 
›ts
.
⁄Suc˚ss
 = 
⁄Síd
;

840 
›ts
.
c⁄ãxt
 = 
˛õ¡
;

842 
pubmsg
.
∑ylﬂd
 =Öayload;

843 
pubmsg
.
∑ylﬂdÀn
 =Öayloadlen;

844 
pubmsg
.
qos
 = 2;

845 
pubmsg
.
ªèöed
 =Ñetained;

846 
dñivîedtokí
 = 0;

848 i‡((
rc
 = 
	`MQTTAsync_£ndMesßge
(
˛õ¡
, 
t›icName
, &
pubmsg
,

849 &
›ts
)Ë!
MQTTASYNC_SUCCESS
) {

850 
	`LOG
("M:ÁûedÅÿ°¨à£ndMesßge,Ñëu∫ codê%d\n", 
rc
);

851 
	`exô
(-1);

854  
rc
;

855 
	}
}

857 
	$mqâ_sub
(*
t›icName
, 
qos
)

859 
MQTTAsync_ª•⁄£O±i⁄s
 
›ts
 = 
MQTTAsync_ª•⁄£O±i⁄s_öôülizî
;

860 
rc
;

862 
	`LOG
("M:subscribingÅoÅopic %s for client %s using QoS%d\n\n",

863 
t›icName
, 
CLIENTID
, 
qos
);

864 
›ts
.
⁄Suc˚ss
 = 
⁄Subs¸ibe
;

865 
›ts
.
⁄Faûuª
 = 
⁄Subs¸ibeFaûuª
;

866 
›ts
.
c⁄ãxt
 = 
˛õ¡
;

868 i‡((
rc
 = 
	`MQTTAsync_subs¸ibe
(
˛õ¡
, 
t›icName
, 
qos
,

869 &
›ts
)Ë!
MQTTASYNC_SUCCESS
) {

870 
	`LOG
("M:ÁûedÅÿ°¨àsubs¸ibe,Ñëu∫ codê%d\n", 
rc
);

871 
	`exô
(-1);

874  
rc
;

875 
	}
}

877 
	$mqâ_öô
()

879 
MQTTAsync_c⁄√˘O±i⁄s
 
c⁄n_›ts
 = 
MQTTAsync_c⁄√˘O±i⁄s_öôülizî
;

880 
rc
;

882 
	`MQTTAsync_¸óã
(&
˛õ¡
, 
ADDRESS
, 
CLIENTID
, 
MQTTCLIENT_PERSISTENCE_NONE
, 
NULL
);

884 
	`MQTTAsync_£tCÆlbacks
(
˛õ¡
, 
NULL
, 
c⁄∆o°
, 
msg¨rvd
, NULL);

886 
c⁄n_›ts
.
kìpAliveI¡îvÆ
 = 30;

887 
c⁄n_›ts
.
˛ón£ssi⁄
 = 1;

888 
c⁄n_›ts
.
⁄Suc˚ss
 = 
⁄C⁄√˘
;

889 
c⁄n_›ts
.
⁄Faûuª
 = 
⁄C⁄√˘Faûuª
;

890 
c⁄n_›ts
.
c⁄ãxt
 = 
˛õ¡
;

891 
	`addWûlO±i⁄s
(&
c⁄n_›ts
);

892 i‡((
rc
 = 
	`MQTTAsync_c⁄√˘
(
˛õ¡
, &
c⁄n_›ts
)Ë!
MQTTASYNC_SUCCESS
) {

893 
	`LOG
("M:ÁûedÅÿ°¨àc⁄√˘,Ñëu∫ codê%d\n", 
rc
);

894 
	`exô
(-1);

897  
rc
;

898 
	}
}

903 
	eSTATE
 {

904 
	mSTATE_INIT
 = 0,

905 
	mSTATE_INCOMING
,

906 
	mSTATE_CALLING
,

907 
	mSTATE_EARLY
,

908 
	mSTATE_CONNECTING
,

909 
	mSTATE_CONFIRMED
,

910 
	mSTATE_DISCONNCTD
,

911 
	mSTATE_TERMINATED
,

912 
	mSTATE_UNKNOW
,

915 (*
	tˇŒback
)(
	tevt
 *evt);

918 
	ssùroxy_˘æ
 {

919 
sù_°©e
;

920 
modem_°©e
;

921 
mqâ_°©e
;

923 
°©e
;

925 
öô_dú
;

927 
u¨t
[255];

928 
sù_≥î
[255];

929 
sù_≥î_°©us
;

930 
sim_num
[255];

933 
u¨t_fd
;

934 
sock_fd
;

936 
±hªad_t
 
thªad
;

938 
dbg_Àvñ
;

939 } 
sùroxy
 = {

940 .
sù_°©e
 = 
STATE_INIT
,

941 .
modem_°©e
 = 
STATE_INIT
,

942 .
mqâ_°©e
 = 
STATE_INIT
,

944 .
°©e
 = 
STATE_INIT
,

946 .
sù_≥î_°©us
 = 
PEER_OFFLINE
,

948 .
öô_dú
 = 
INIT_NONE
,

950 .
u¨t_fd
 = -1,

951 .
sock_fd
 = -1,

953 .
thªad
 = -1,

955 .
dbg_Àvñ
 = 0,

956 
	}
};

958 
	$sùroxy_ª£t
()

960 
sùroxy
.
sù_°©e
 = 
STATE_INIT
;

961 
sùroxy
.
modem_°©e
 = 
STATE_INIT
;

962 
sùroxy
.
mqâ_°©e
 = 
STATE_INIT
;

964 
sùroxy
.
°©e
 = 
STATE_INIT
;

966 
sùroxy
.
öô_dú
 = 
INIT_NONE
;

967 
	}
}

969 
	$modem_evít_sms_queue
(*
buf
, 
size
)

971 
ödex
[8] = {0};

972 *
°¨t
 = 
NULL
;

973 *
íd
 = 
NULL
;

974 
buf„r
[4096] = {0};

975 
buf_Àn
;

976 
n
,
i
;

977 
size_t
 
Àn
;

980 i‡(
	`m©ch
("MMS PUSH", 
buf
))

983 
evt
 *evà
	`mÆloc
((*evt));

984 i‡(!
evt
) {

985 
	`Ârötf
(
°dîr
, "mÆlo¯Áûed: %s\n", 
	`°ªº‹
(
î∫o
));

990 
°¨t
 = 
	`°r°r
(
buf
, ",");

991 i‡((
íd
 = 
	`°r°r
(
buf
, ".")Ë!
NULL
) {

992 
	`mem˝y
(
ödex
, 
°¨t
+1, 
íd
 - (start+1));

994 i‡(
°¨t
) {

995 
	`modem_gë_sms
(
sùroxy
.
u¨t_fd
, 
ödex
);

996 
	`u¶ìp
(300000);

1000 
n
 = 
	`ªad_löe
(
sùroxy
.
u¨t_fd
, 
buf„r
, 4095);

1001 i‡(
n
 > 0) {

1002 
buf„r
[
n
] = 0;

1004 
i
 = 0; i < 
n
; i++) {

1005 i‡(
buf„r
[
i
] < 32) {

1006 
buf„r
[
i
] = '.';

1009 
	`LOG
("T:<<ªcv : %s\n", (*)
buf„r
);

1014 i‡(
n
 > 0 && 
	`m©ch
("AT+CMGR", (*)
buf„r
))

1018 i‡(
n
 > 0 && 
	`m©ch
("+CMGR:", (*)
buf„r
))

1022 i‡(
n
 > 0 && 
buf„r
[0] == '.')

1026 i‡(
n
 > 0 && 
	`m©ch
("OK", (*)
buf„r
))

1029 
evt
->
evít
 = 
EVT_MODEM_SMS
;

1033 
buf_Àn
 = 
	`°æí
(
buf„r
);

1034 
Àn
 = 
buf_Àn
;

1035 i‡(
buf_Àn
 > 2 && 
buf„r
[buf_len - 2] == '.')

1036 
Àn
 = 
buf_Àn
 - 1;

1037 
	`¢¥ötf
(
evt
->
vÆ
, 
Àn
, "%s", 
buf„r
);

1038 
	`LOG
("E:<<ªcv : %s\n", 
evt
->
vÆ
);

1042 
	`modem_dñëe_sms
(
sùroxy
.
u¨t_fd
, 
ödex
);

1044 
	`queue_add
(&
evíts_queue
, 
evt
,Évt->
evít
);

1047 
	}
}

1050 
°©e_öô
(
evt
 *evt);

1051 
°©e_öcomög
(
evt
 *evt);

1052 
°©e_ˇŒög
(
evt
 *evt);

1053 
°©e_óæy
(
evt
 *evt);

1054 
°©e_c⁄√˘ög
(
evt
 *evt);

1055 
°©e_c⁄fúmed
(
evt
 *evt);

1056 
°©e_disc⁄n˘d
(
evt
 *evt);

1057 
°©e_ãrmö©ed
(
evt
 *evt);

1058 
°©e_unknow
(
evt
 *evt);

1060 
	s°©e_tbl
 {

1061 
	m°©e
;

1062 *
	m°r
;

1063 
ˇŒback
 
	mfunc
;

1064 } 
	g°©e_tbl
[] = {

1066 .
°©e
 = 
STATE_INIT
,

1067 .
	g°r
 = "IN INIT",

1068 .
	gfunc
 = 
°©e_öô
,

1072 .
	g°©e
 = 
STATE_INCOMING
,

1073 .
	g°r
 = "CALL INCOMING",

1074 .
	gfunc
 = 
°©e_öcomög
,

1078 .
	g°©e
 = 
STATE_CALLING
,

1079 .
	g°r
 = "IN CALLING",

1080 .
	gfunc
 = 
°©e_ˇŒög
,

1084 .
	g°©e
 = 
STATE_EARLY
,

1085 .
	g°r
 = "EARLY",

1086 .
	gfunc
 = 
°©e_óæy
,

1090 .
	g°©e
 = 
STATE_CONNECTING
,

1091 .
	g°r
 = "IN CONNECTING",

1092 .
	gfunc
 = 
°©e_c⁄√˘ög
,

1096 .
	g°©e
 = 
STATE_CONFIRMED
,

1097 .
	g°r
 = "CALL CONFIRMED",

1098 .
	gfunc
 = 
°©e_c⁄fúmed
,

1102 .
	g°©e
 = 
STATE_DISCONNCTD
,

1103 .
	g°r
 = "DISCONNCTD",

1104 .
	gfunc
 = 
°©e_disc⁄n˘d
,

1108 .
	g°©e
 = 
STATE_TERMINATED
,

1109 .
	g°r
 = "TERMINATED",

1110 .
	gfunc
 = 
°©e_ãrmö©ed
,

1114 .
	g°©e
 = 
STATE_UNKNOW
,

1115 .
	g°r
 = "UNKNOW",

1116 .
	gfunc
 = 
°©e_unknow
,

1120 
	$°©e_öô
(
evt
 *evt)

1122 
evt
->
evít
) {

1126 
EVT_MQTT_CALLING
:

1127 
	`°∫˝y
(
sùroxy
.
sim_num
, 
evt
->
vÆ
, 
	`°æí
(evt->val));

1128 
sùroxy
.
mqâ_°©e
 = 
STATE_INCOMING
;

1131 
EVT_MQTT_STATUS
:

1137 
EVT_MODEM_CLIP
:

1138 i‡(
sùroxy
.
öô_dú
 =
INIT_NONE
) {

1139 
sùroxy
.
öô_dú
 = 
INIT_FROM_MODEM
;

1141 
sùroxy
.
modem_°©e
 = 
STATE_INCOMING
;

1143 
ph⁄e
[256] = {0};

1144 *
°¨t
 = 
NULL
;

1145 *
íd
 = 
NULL
;

1146 
°¨t
 = 
	`°r°r
(
evt
->
vÆ
, "\"");

1147 i‡(
°¨t
) {

1148 
íd
 = 
	`°r°r
(
°¨t
+1, "\"");

1150 
	`mem˝y
(
ph⁄e
, 
°¨t
+1, 
íd
 - (start+1));

1151 
	`mqâ_pub
(
TOPIC_ALICE_CALLED
, 
ph⁄e
, 
	`°æí
(phone), 0);

1152 
	`sù_make_ˇŒ
(
sùroxy
.
sù_≥î
);

1153 
sùroxy
.
sù_°©e
 = 
STATE_CALLING
;

1155 
sùroxy
.
°©e
 = 
STATE_INCOMING
;

1159 
EVT_MODEM_COLP
:

1163 
EVT_MODEM_NO_CARRIER
:

1164 
EVT_MODEM_BUSY
:

1168 
EVT_MODEM_OK
:

1172 
EVT_MODEM_ERROR
:

1179 
EVT_SIP_CALLING
:

1183 
EVT_SIP_INCOMING
:

1184 i‡(
sùroxy
.
öô_dú
 =
INIT_NONE
 && sùroxy.
mqâ_°©e
 =
STATE_INCOMING
) {

1185 
sùroxy
.
öô_dú
 = 
INIT_FROM_SIP
;

1187 
sùroxy
.
sù_°©e
 = 
STATE_INCOMING
;

1189 
	`modem_make_ˇŒ
(
sùroxy
.
u¨t_fd
, sùroxy.
sim_num
);

1190 
sùroxy
.
modem_°©e
 = 
STATE_CALLING
;

1196 
	`sù_™swî_ˇŒ
();

1197 
sùroxy
.
sù_°©e
 = 
STATE_CONFIRMED
;

1199 
sùroxy
.
°©e
 = 
STATE_INCOMING
;

1203 
EVT_SIP_CONNECTING
:

1207 
EVT_SIP_CONFIRMED
:

1211 
EVT_SIP_DISCONNCTD
:

1216 
	`Ârötf
(
°dîr
, "UNKNOWÉvent\n");

1219 
	}
}

1221 
	$°©e_öcomög
(
evt
 *evt)

1223 
evt
->
evít
) {

1227 
EVT_MQTT_CALLING
:

1230 
EVT_MQTT_STATUS
:

1236 
EVT_MODEM_CLIP
:

1239 
EVT_MODEM_COLP
:

1240 i‡(
sùroxy
.
öô_dú
 =
INIT_FROM_SIP
) {

1241 
sùroxy
.
modem_°©e
 = 
STATE_CONFIRMED
;

1244 
	`mqâ_pub
(
TOPIC_ALICE_MODEM
, 
MODEM_CALL_OK
,

1245 
	`°æí
(
MODEM_CALL_OK
), 0);

1247 
sùroxy
.
°©e
 = 
STATE_CONFIRMED
;

1251 
EVT_MODEM_NO_CARRIER
:

1252 
EVT_MODEM_BUSY
:

1253 i‡(
sùroxy
.
öô_dú
 =
INIT_FROM_SIP
) {

1254 
	`sù_h™gup_ˇŒ
();

1257 i‡(
sùroxy
.
öô_dú
 =
INIT_FROM_MODEM
) {

1258 
	`sù_h™gup_ˇŒ
();

1260 
	`sùroxy_ª£t
();

1263 
EVT_MODEM_OK
:

1266 
EVT_MODEM_ERROR
:

1272 
EVT_SIP_CALLING
:

1275 
EVT_SIP_INCOMING
:

1278 
EVT_SIP_CONNECTING
:

1281 
EVT_SIP_CONFIRMED
:

1282 i‡(
sùroxy
.
öô_dú
 =
INIT_FROM_MODEM
) {

1283 
sùroxy
.
sù_°©e
 = 
STATE_CONFIRMED
;

1285 
	`modem_™swî_ˇŒ
(
sùroxy
.
u¨t_fd
);

1286 
sùroxy
.
modem_°©e
 = 
STATE_CONFIRMED
;

1288 
sùroxy
.
°©e
 = 
STATE_CONFIRMED
;

1292 
EVT_SIP_DISCONNCTD
:

1293 i‡(
sùroxy
.
öô_dú
 =
INIT_FROM_MODEM
) {

1294 
	`modem_h™gup_ˇŒ
(
sùroxy
.
u¨t_fd
);

1297 i‡(
sùroxy
.
öô_dú
 =
INIT_FROM_SIP
) {

1298 
	`modem_h™gup_ˇŒ
(
sùroxy
.
u¨t_fd
);

1300 
	`sùroxy_ª£t
();

1304 
	`Ârötf
(
°dîr
, "UNKNOWÉvent\n");

1307 
	}
}

1309 
	$°©e_ˇŒög
(
evt
 *evt)

1311 
evt
->
evít
) {

1315 
EVT_MQTT_CALLING
:

1318 
EVT_MQTT_STATUS
:

1324 
EVT_MODEM_CLIP
:

1327 
EVT_MODEM_COLP
:

1330 
EVT_MODEM_NO_CARRIER
:

1331 
EVT_MODEM_BUSY
:

1334 
EVT_MODEM_OK
:

1337 
EVT_MODEM_ERROR
:

1343 
EVT_SIP_CALLING
:

1346 
EVT_SIP_INCOMING
:

1349 
EVT_SIP_CONNECTING
:

1352 
EVT_SIP_CONFIRMED
:

1355 
EVT_SIP_DISCONNCTD
:

1359 
	`Ârötf
(
°dîr
, "UNKNOWÉvent\n");

1362 
	}
}

1364 
	$°©e_óæy
(
evt
 *evt)

1366 
evt
->
evít
) {

1370 
EVT_MQTT_CALLING
:

1373 
EVT_MQTT_STATUS
:

1379 
EVT_MODEM_CLIP
:

1382 
EVT_MODEM_COLP
:

1385 
EVT_MODEM_NO_CARRIER
:

1386 
EVT_MODEM_BUSY
:

1389 
EVT_MODEM_OK
:

1392 
EVT_MODEM_ERROR
:

1398 
EVT_SIP_CALLING
:

1401 
EVT_SIP_INCOMING
:

1404 
EVT_SIP_CONNECTING
:

1407 
EVT_SIP_CONFIRMED
:

1410 
EVT_SIP_DISCONNCTD
:

1414 
	`Ârötf
(
°dîr
, "UNKNOWÉvent\n");

1417 
	}
}

1419 
	$°©e_c⁄√˘ög
(
evt
 *evt)

1421 
evt
->
evít
) {

1425 
EVT_MQTT_CALLING
:

1428 
EVT_MQTT_STATUS
:

1434 
EVT_MODEM_CLIP
:

1437 
EVT_MODEM_COLP
:

1440 
EVT_MODEM_NO_CARRIER
:

1441 
EVT_MODEM_BUSY
:

1444 
EVT_MODEM_OK
:

1447 
EVT_MODEM_ERROR
:

1453 
EVT_SIP_CALLING
:

1456 
EVT_SIP_INCOMING
:

1459 
EVT_SIP_CONNECTING
:

1462 
EVT_SIP_CONFIRMED
:

1465 
EVT_SIP_DISCONNCTD
:

1469 
	`Ârötf
(
°dîr
, "UNKNOWÉvent\n");

1472 
	}
}

1474 
	$°©e_c⁄fúmed
(
evt
 *evt)

1476 
evt
->
evít
) {

1480 
EVT_MQTT_CALLING
:

1483 
EVT_MQTT_STATUS
:

1489 
EVT_MODEM_CLIP
:

1492 
EVT_MODEM_COLP
:

1495 
EVT_MODEM_NO_CARRIER
:

1496 
EVT_MODEM_BUSY
:

1497 i‡(
sùroxy
.
öô_dú
 =
INIT_FROM_SIP
) {

1498 
	`sù_h™gup_ˇŒ
();

1501 i‡(
sùroxy
.
öô_dú
 =
INIT_FROM_MODEM
) {

1502 
	`sù_h™gup_ˇŒ
();

1504 
	`sùroxy_ª£t
();

1507 
EVT_MODEM_OK
:

1510 
EVT_MODEM_ERROR
:

1516 
EVT_SIP_CALLING
:

1519 
EVT_SIP_INCOMING
:

1522 
EVT_SIP_CONNECTING
:

1525 
EVT_SIP_CONFIRMED
:

1528 
EVT_SIP_DISCONNCTD
:

1529 i‡(
sùroxy
.
öô_dú
 =
INIT_FROM_MODEM
) {

1530 
	`modem_h™gup_ˇŒ
(
sùroxy
.
u¨t_fd
);

1533 i‡(
sùroxy
.
öô_dú
 =
INIT_FROM_SIP
) {

1534 
	`modem_h™gup_ˇŒ
(
sùroxy
.
u¨t_fd
);

1536 
	`sùroxy_ª£t
();

1540 
	`Ârötf
(
°dîr
, "UNKNOWÉvent\n");

1543 
	}
}

1545 
	$°©e_disc⁄n˘d
(
evt
 *evt)

1547 
evt
->
evít
) {

1551 
EVT_MQTT_CALLING
:

1554 
EVT_MQTT_STATUS
:

1560 
EVT_MODEM_CLIP
:

1563 
EVT_MODEM_COLP
:

1566 
EVT_MODEM_NO_CARRIER
:

1567 
EVT_MODEM_BUSY
:

1570 
EVT_MODEM_OK
:

1573 
EVT_MODEM_ERROR
:

1579 
EVT_SIP_CALLING
:

1582 
EVT_SIP_INCOMING
:

1585 
EVT_SIP_CONNECTING
:

1588 
EVT_SIP_CONFIRMED
:

1591 
EVT_SIP_DISCONNCTD
:

1595 
	`Ârötf
(
°dîr
, "UNKNOWÉvent\n");

1598 
	}
}

1600 
	$°©e_ãrmö©ed
(
evt
 *evt)

1602 
evt
->
evít
) {

1606 
EVT_MQTT_CALLING
:

1609 
EVT_MQTT_STATUS
:

1615 
EVT_MODEM_CLIP
:

1618 
EVT_MODEM_COLP
:

1621 
EVT_MODEM_NO_CARRIER
:

1622 
EVT_MODEM_BUSY
:

1625 
EVT_MODEM_OK
:

1628 
EVT_MODEM_ERROR
:

1634 
EVT_SIP_CALLING
:

1637 
EVT_SIP_INCOMING
:

1640 
EVT_SIP_CONNECTING
:

1643 
EVT_SIP_CONFIRMED
:

1646 
EVT_SIP_DISCONNCTD
:

1650 
	`Ârötf
(
°dîr
, "UNKNOWÉvent\n");

1653 
	}
}

1655 
	$°©e_unknow
(
evt
 *evt)

1657 
evt
->
evít
) {

1661 
EVT_MQTT_CALLING
:

1664 
EVT_MQTT_STATUS
:

1670 
EVT_MODEM_CLIP
:

1673 
EVT_MODEM_COLP
:

1676 
EVT_MODEM_NO_CARRIER
:

1677 
EVT_MODEM_BUSY
:

1680 
EVT_MODEM_OK
:

1683 
EVT_MODEM_ERROR
:

1689 
EVT_SIP_CALLING
:

1692 
EVT_SIP_INCOMING
:

1695 
EVT_SIP_CONNECTING
:

1698 
EVT_SIP_CONFIRMED
:

1701 
EVT_SIP_DISCONNCTD
:

1705 
	`Ârötf
(
°dîr
, "UNKNOWÉvent\n");

1708 
	}
}

1710 
	$°©e
(
evt
 *evt)

1712 
i
;

1713 
uuid
[20];

1714 
sms_t›ic
[64];

1715 
timevÆ
 
tv
;

1717 
i
 = 0; i < 
	`NELEMS
(
°©e_tbl
); i++) {

1720 
evt
->
evít
) {

1721 
EVT_MODEM_SMS
:

1728 
	`gëtimeofday
(&
tv
, 
NULL
);

1729 
	`°r·ime
(
uuid
, 
	`NELEMS
(uuid), "%Y-%m-%dT%H:%M:%S",

1730 
	`loˇ…ime
(&
tv
.
tv_£c
));

1731 
	`¢¥ötf
(
sms_t›ic
, 
	`NELEMS
(sms_t›ic), 
TOPIC_SMS
"/%s", 
uuid
);

1732 
	`mqâ_pub
(
sms_t›ic
, 
evt
->
vÆ
, 
	`°æí
(evt->val), 1);

1736 
EVT_MQTT_SMS
:

1738 
	`modem_£nd_sms
(
sùroxy
.
u¨t_fd
, 
evt
->
vÆ
, (
	`°æí
(evt->val) - 2)/2);

1744 i‡(
sùroxy
.
°©e
 =
°©e_tbl
[
i
].state) {

1745 
	`LOG
("STATE: -> %s\n", 
°©e_tbl
[
i
].
°r
);

1746 
°©e_tbl
[
i
].
	`func
(
evt
);

1749 
	}
}

1751 *
	$evt_h™dÀr
(*
thªadid
)

1753 
ªt
 = -1;

1754 
msg
 msg;

1755 
evt
 *evt;

1758 i‡(
	`queue_Àngth
(&
evíts_queue
) > 0 &&

1759 (
ªt
 = 
	`queue_gë
(&
evíts_queue
, 
NULL
, &
msg
)) == 0) {

1760 
evt
 = 
msg
.
d©a
;

1761 
	`°©e
(
evt
);

1764 
	`‰ì
(
evt
);

1765 
evt
 = 
NULL
;

1768 
	`u¶ìp
(200000);

1771 
	}
}

1773 
	$maö
(
¨gc
, **
¨gv
)

1775 
buf„r
[4096] = {0};

1776 
rs
;

1777 
sock
;

1778 
u¨t
;

1779 
rc
;

1780 
sockaddr_ö
 
addr
;

1781 
pﬁlfd
 
pfd
[2];

1782 
addröfo
 *
ai
;

1783 
addröfo
 
höts
;

1784 
buf
[4096] = {0};

1787 i‡(
¨gc
 != 5) {

1788 
	`Ârötf
(
°dîr
, "Usage:\n ./siproxy <host> <port> <sip_peer> <uart>\n");

1793 
	`mem£t
(&
höts
, 0, (hints));

1794 
höts
.
ai_Ámûy
 = 
AF_UNSPEC
;

1795 
höts
.
ai_sockty≥
 = 
SOCK_STREAM
;

1796 i‡((
rs
 = 
	`gëaddröfo
(
¨gv
[1],árgv[2], &
höts
, &
ai
)) != 0) {

1797 
	`Ârötf
(
°dîr
, "gëaddröfo(ËÁûed f‹ %s: %s\n", 
¨gv
[1],

1798 
	`gai_°ªº‹
(
rs
));

1803 i‡((
sock
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 0)) == -1) {

1804 
	`Ârötf
(
°dîr
, "sockë(ËÁûed: %s\n", 
	`°ªº‹
(
î∫o
));

1809 
	`mem£t
(&
addr
, 0, (addr));

1810 
addr
.
sö_Ámûy
 = 
AF_INET
;

1811 i‡(
	`böd
(
sock
, (
sockaddr
 *)&
addr
, (addr)) == -1) {

1812 
	`Ârötf
(
°dîr
, "böd(ËÁûed: %s\n", 
	`°ªº‹
(
î∫o
));

1817 i‡(
	`c⁄√˘
(
sock
, 
ai
->
ai_addr
,ái->
ai_addæí
) == -1) {

1818 
	`Ârötf
(
°dîr
, "c⁄√˘(ËÁûed: %s\n", 
	`°ªº‹
(
î∫o
));

1823 
	`‰ìaddröfo
(
ai
);

1825 
	`©exô
(
˛ónup
);

1828 
do_echo
 = 1;

1830 i‡(
	`queue_öô
(&
evíts_queue
) == -1) {

1831 
	`Ârötf
(
°dîr
, "evíàqueuêöô faûed: %s\n", 
	`°ªº‹
(
î∫o
));

1836 
bdøã
 = 115200;

1837 i‡((
u¨t
 = 
	`rs232_›í
(
¨gv
[4], 
bdøã
, 0, 8, 1, 'N')) == -1) {

1838 
	`Ârötf
(
°dîr
, "rs232 o≥¿Áûed: %s\n", 
	`°ªº‹
(
î∫o
));

1843 
	`modem_cmd_waô
(
u¨t
, "AT\r\n", "OK");

1844 
	`modem_cmd_waô
(
u¨t
, "AT\r\n", "OK");

1845 
	`modem_cmd_waô
(
u¨t
, "AT\r\n", "OK");

1847 
	`modem_cmd_waô
(
u¨t
, "ATE1\r\n", "OK");

1848 
	`modem_cmd_waô
(
u¨t
, "AT+COLP=1\r\n", "OK");

1849 
	`modem_cmd_waô
(
u¨t
, "AT+CLIP=1\r\n", "OK");

1852 
	`modem_cmd_waô
(
u¨t
, "AT+CMGF=0\r\n", "OK");

1853 
	`modem_cmd_waô
(
u¨t
, "AT+CSCS=\"UCS2\"\r\n", "OK");

1856 
ã ë
 = 
	`ã ë_öô
(
ãl›ts
, 
sù_evít
, 0, &
sock
);

1858 
sùroxy
.
u¨t_fd
 = 
u¨t
;

1859 
sùroxy
.
sock_fd
 = 
sock
;

1860 
	`¢¥ötf
(
sùroxy
.
sù_≥î
, (sùroxy.sù_≥î), "%s", 
¨gv
[3]);

1861 
	`¢¥ötf
(
sùroxy
.
u¨t
, (sùroxy.u¨t), "%s", 
¨gv
[4]);

1864 
	`mqâ_öô
();

1867 
rc
 = 
	`±hªad_¸óã
(&
sùroxy
.
thªad
, 
NULL
, 
evt_h™dÀr
, NULL);

1868 i‡(
rc
) {

1869 
	`Ârötf
(
°dîr
, "ERROR;Ñeturn code fromÖthread_create() is %s\n",

1870 
	`°ªº‹
(
î∫o
));

1871 
	`exô
(-1);

1875 
	`mem£t
(
pfd
, 0, (pfd));

1876 
pfd
[0].
fd
 = 
u¨t
;

1877 
pfd
[0].
evíts
 = 
POLLIN
;

1878 
pfd
[1].
fd
 = 
sock
;

1879 
pfd
[1].
evíts
 = 
POLLIN
;

1882 
	`pﬁl
(
pfd
, 2, -1) != -1) {

1884 i‡(
pfd
[0].
ªvíts
 & 
POLLIN
) {

1885 i‡((
rs
 = 
	`ªad_löe
(
u¨t
, 
buf
, (buf))) > 0) {

1886 
	`modem_evít
(
buf
, 
rs
);

1887 } i‡(
rs
 == 0) {

1888 
	`Ârötf
(
°dîr
, "recv(modem) failed: %s,Ñs is zero\n",

1889 
	`°ªº‹
(
î∫o
));

1892 
	`Ârötf
(
°dîr
, "recv(modem) failed: %s\n",

1893 
	`°ªº‹
(
î∫o
));

1894 
	`exô
(-1);

1899 i‡(
pfd
[1].
ªvíts
 & 
POLLIN
) {

1900 i‡((
rs
 = 
	`ªcv
(
sock
, 
buf„r
, (buffer), 0)) > 0) {

1901 
	`ã ë_ªcv
(
ã ë
, 
buf„r
, 
rs
);

1902 } i‡(
rs
 == 0) {

1903 
	`Ârötf
(
°dîr
, "recv(client) failed: %s,Ñs is zero\n",

1904 
	`°ªº‹
(
î∫o
));

1907 
	`Ârötf
(
°dîr
, "recv(client) failed: %s\n",

1908 
	`°ªº‹
(
î∫o
));

1909 
	`exô
(-1);

1916 
	`ã ë_‰ì
(
ã ë
);

1917 
	`˛o£
(
sock
);

1918 
	`rs232_˛o£
(
u¨t
);

1921 
	}
}

	@match.c

1 
	~"m©ch.h
"

3 
m©ch
(*, *);

4 
m©chhîe
(*, *);

5 
m©ch°¨
(, *, *);

8 
	$m©chhîe
(*
ªgexp
, *
ãxt
)

10 i‡(
ªgexp
[0] == '\0')

12 i‡(
ªgexp
[1] == '*')

13  
	`m©ch°¨
(
ªgexp
[0],Ñegexp+2, 
ãxt
);

14 i‡(
ªgexp
[0] == '$' &&Ñegexp[1] == '\0')

15  *
ãxt
 == '\0';

16 i‡(*
ãxt
!='\0' && (
ªgexp
[0]=='.' ||Ñegexp[0]==*text))

17  
	`m©chhîe
(
ªgexp
+1, 
ãxt
+1);

19 
	}
}

22 
	$m©ch
(*
ªgexp
, *
ãxt
)

24 i‡(
ªgexp
[0] == '^')

25  
	`m©chhîe
(
ªgexp
+1, 
ãxt
);

27 i‡(
	`m©chhîe
(
ªgexp
, 
ãxt
))

29 } *
ãxt
++ != '\0');

31 
	}
}

34 
	$m©ch°¨
(
c
, *
ªgexp
, *
ãxt
)

37 i‡(
	`m©chhîe
(
ªgexp
, 
ãxt
))

39 } *
ãxt
 !'\0' && (*ãxt++ =
c
 || c == '.'));

41 
	}
}

	@match.h

1 #i‚de‡
MATCH_H


2 
	#MATCH_H


	)

4 #ifde‡
__˝lu•lus


8 
	~<°dio.h
>

9 
	~<°rög.h
>

10 
	~<°dlib.h
>

12 
m©ch
(*, *);

13 
m©chhîe
(*, *);

14 
m©ch°¨
(, *, *);

16 #ifde‡
__˝lu•lus


	@paho-c/src/Clients.c

24 
	~"Clõ¡s.h
"

26 
	~<°rög.h
>

27 
	~<°dio.h
>

36 
	$˛õ¡IDCom∑ª
(* 
a
, * 
b
)

38 
Clõ¡s
* 
˛õ¡
 = (Clõ¡s*)
a
;

40  
	`°rcmp
(
˛õ¡
->
˛õ¡ID
, (*)
b
) == 0;

41 
	}
}

50 
	$˛õ¡SockëCom∑ª
(* 
a
, * 
b
)

52 
Clõ¡s
* 
˛õ¡
 = (Clõ¡s*)
a
;

54  
˛õ¡
->
√t
.
sockë
 =*(*)
b
;

55 
	}
}

	@paho-c/src/Clients.h

19 #i‡!
deföed
(
CLIENTS_H
)

20 
	#CLIENTS_H


	)

22 
	~<time.h
>

23 #i‡
deföed
(
OPENSSL
)

24 #i‡
deföed
(
WIN32
Ë|| deföed(
WIN64
)

25 
	~"wösock2.h
"

27 
	~<›ís¶/s¶.h
>

29 
	~"MQTTClõ¡.h
"

30 
	~"LökedLi°.h
"

31 
	~"MQTTClõ¡Pîsi°í˚.h
"

50 *
	mt›ic
;

51 
	mt›i˛í
;

52 * 
	m∑ylﬂd
;

53 
	m∑ylﬂdÀn
;

54 
	mªfcou¡
;

55 } 
	tPubliˇti⁄s
;

84 
	mqos
;

85 
	mªèö
;

86 
	mmsgid
;

87 
Publiˇti⁄s
 *
	mpublish
;

88 
time_t
 
	mœ°Touch
;

89 
	m√xtMesßgeTy≥
;

90 
	mÀn
;

91 } 
	tMesßges
;

109 *
	mt›ic
;

110 *
	mmsg
;

111 
	mªèöed
;

112 
	mqos
;

113 } 
	twûlMesßges
;

151 
	msockë
;

152 
time_t
 
	mœ°Sít
;

153 
time_t
 
	mœ°Re˚ived
;

154 #i‡
deföed
(
OPENSSL
)

155 
SSL
* 
	ms¶
;

156 
SSL_CTX
* 
	m˘x
;

158 } 
	t√tw‹kH™dÀs
;

165 * 
	m˛õ¡ID
;

166 c⁄° * 
	mu£∫ame
;

167 c⁄° * 
	m∑ssw‹d
;

168 
	m˛ón£ssi⁄
 : 1;

169 
	mc⁄√˘ed
 : 1;

170 
	mgood
 : 1;

171 
	mpög_out°™dög
 : 1;

172 
	mc⁄√˘_°©e
 : 4;

173 
√tw‹kH™dÀs
 
	m√t
;

174 
	mmsgID
;

175 
	mkìpAliveI¡îvÆ
;

176 
	mªåyI¡îvÆ
;

177 
	mmaxInÊightMesßges
;

178 
wûlMesßges
* 
	mwûl
;

179 
Li°
* 
	möboundMsgs
;

180 
Li°
* 
	moutboundMsgs
;

181 
Li°
* 
	mmesßgeQueue
;

182 
	mqíåy_£qno
;

183 * 
	mph™dÀ
;

184 
MQTTClõ¡_≥rsi°í˚
* 
	m≥rsi°í˚
;

185 * 
	mc⁄ãxt
;

186 
	mMQTTVîsi⁄
;

187 #i‡
deföed
(
OPENSSL
)

188 
MQTTClõ¡_SSLO±i⁄s
 *
	ms¶›ts
;

189 
SSL_SESSION
* 
	m£ssi⁄
;

191 } 
	tClõ¡s
;

193 
˛õ¡IDCom∑ª
(* 
a
, * 
b
);

194 
˛õ¡SockëCom∑ª
(* 
a
, * 
b
);

201 c⁄° * 
	mvîsi⁄
;

202 
Li°
* 
	m˛õ¡s
;

203 } 
	tClõ¡Sèãs
;

	@paho-c/src/Heap.c

29 
	~"Tªe.h
"

30 
	~"Log.h
"

31 
	~"SèckTø˚.h
"

32 
	~"Thªad.h
"

33 * 
Brokî_ªc‹dFFDC
(* 
sym±oms
);

35 
	~<mem‹y.h
>

36 
	~<°dlib.h
>

37 
	~<°rög.h
>

38 
	~<°dio.h
>

39 
	~<°ddef.h
>

41 
	~"Hóp.h
"

43 #unde‡
mÆloc


44 #unde‡
ªÆloc


45 #unde‡
‰ì


47 #i‡
deföed
(
WIN32
Ë|| deföed(
WIN64
)

48 
muãx_ty≥
 
	ghóp_muãx
;

50 
±hªad_muãx_t
 
	ghóp_muãx_°‹e
 = 
PTHREAD_MUTEX_INITIALIZER
;

51 
muãx_ty≥
 
	ghóp_muãx
 = &
hóp_muãx_°‹e
;

54 
hóp_öfo
 
	g°©e
 = {0, 0};

55 
	geyeˇtchî
 = 0x88888888;

62 * 
	mfûe
;

63 
	mlöe
;

64 * 
	m±r
;

65 
	msize
;

66 } 
	t°‹ageEÀmít
;

68 
Tªe
 
	ghóp
;

69 * 
	gîrmsg
 = "MemoryállocationÉrror";

78 
	$Hóp_roundup
(
size
)

80 
mu…size
 = 4*();

82 i‡(
size
 % 
mu…size
 != 0)

83 
size
 +
mu…size
 - (size % multsize);

84  
size
;

85 
	}
}

94 
	$±rCom∑ª
(* 
a
, * 
b
, 
vÆue
)

96 
a
 = ((
°‹ageEÀmít
*Ô)->
±r
;

97 i‡(
vÆue
)

98 
b
 = ((
°‹ageEÀmít
*)b)->
±r
;

100  (
a
 > 
b
) ? -1 : (a == b) ? 0 : 1;

101 
	}
}

104 
	$Hóp_check
(* 
°rög
, * 
±r
)

127 
	}
}

139 * 
	$mymÆloc
(* 
fûe
, 
löe
, 
size_t
 
size
)

141 
°‹ageEÀmít
* 
s
 = 
NULL
;

142 
•a˚
 = (
°‹ageEÀmít
);

143 
fûíamñí
 = 
	`°æí
(
fûe
)+1;

145 
	`Thªad_lock_muãx
(
hóp_muãx
);

146 
size
 = 
	`Hóp_roundup
(size);

147 i‡((
s
 = 
	`mÆloc
((
°‹ageEÀmít
))Ë=
NULL
)

149 
	`Log
(
LOG_ERROR
, 13, 
îrmsg
);

150  
NULL
;

152 
s
->
size
 = size;

153 i‡((
s
->
fûe
 = 
	`mÆloc
(
fûíamñí
)Ë=
NULL
)

155 
	`Log
(
LOG_ERROR
, 13, 
îrmsg
);

156 
	`‰ì
(
s
);

157  
NULL
;

159 
•a˚
 +
fûíamñí
;

160 
	`°r˝y
(
s
->
fûe
, file);

161 
s
->
löe
 =Üine;

163 i‡((
s
->
±r
 = 
	`mÆloc
(
size
 + 2*())Ë=
NULL
)

165 
	`Log
(
LOG_ERROR
, 13, 
îrmsg
);

166 
	`‰ì
(
s
->
fûe
);

167 
	`‰ì
(
s
);

168  
NULL
;

170 
•a˚
 +
size
 + 2*();

171 *(*)(
s
->
±r
Ë
eyeˇtchî
;

172 *(*)(((*)(
s
->
±r
)Ë+ ((Ë+ 
size
)Ë
eyeˇtchî
;

173 
	`Log
(
TRACE_MAX
, -1, "AŒoˇtög %d byã†ö hó∞© fûê%†löê%dÖå %p\n", 
size
, 
fûe
, 
löe
, 
s
->
±r
);

174 
	`TªeAdd
(&
hóp
, 
s
, 
•a˚
);

175 
°©e
.
cuºít_size
 +
size
;

176 i‡(
°©e
.
cuºít_size
 > sèã.
max_size
)

177 
°©e
.
max_size
 = sèã.
cuºít_size
;

178 
	`Thªad_u∆ock_muãx
(
hóp_muãx
);

179  ((*)(
s
->
±r
)) + 1;

180 
	}
}

183 
	$checkEyeˇtchîs
(* 
fûe
, 
löe
, * 
p
, 
size
)

185 *
•
 = (*)
p
;

186 *
˝
 = (*)
p
;

187 
us
;

188 * 
msg
 = "Invalid %sÉyecatcher %d in heap itemát file %sÜine %d";

190 i‡((
us
 = *--
•
Ë!
eyeˇtchî
)

191 
	`Log
(
LOG_ERROR
, 13, 
msg
, "°¨t", 
us
, 
fûe
, 
löe
);

193 
˝
 +
size
;

194 i‡((
us
 = *(*)
˝
Ë!
eyeˇtchî
)

195 
	`Log
(
LOG_ERROR
, 13, 
msg
, "íd", 
us
, 
fûe
, 
löe
);

196 
	}
}

206 
	$I¡î«l_hóp_u∆ök
(* 
fûe
, 
löe
, * 
p
)

208 
Node
* 
e
 = 
NULL
;

209 
rc
 = 0;

211 
e
 = 
	`TªeFöd
(&
hóp
, ((*)
p
)-1);

212 i‡(
e
 =
NULL
)

213 
	`Log
(
LOG_ERROR
, 13, "FaûedÅÿªmovêhó∞ôemáàfûê%†löê%d", 
fûe
, 
löe
);

216 
°‹ageEÀmít
* 
s
 = (°‹ageEÀmít*)(
e
->
c⁄ã¡
);

217 
	`Log
(
TRACE_MAX
, -1, "Freeing %d bytes in heapát file %sÜine %d, heap useÇow %d bytes\n",

218 
s
->
size
, 
fûe
, 
löe
, 
°©e
.
cuºít_size
);

219 
	`checkEyeˇtchîs
(
fûe
, 
löe
, 
p
, 
s
->
size
);

221 
	`‰ì
(
s
->
fûe
);

222 
°©e
.
cuºít_size
 -
s
->
size
;

223 
	`TªeRemoveNodeIndex
(&
hóp
, 
e
, 0);

224 
	`‰ì
(
s
);

225 
rc
 = 1;

227  
rc
;

228 
	}
}

238 
	$my‰ì
(* 
fûe
, 
löe
, * 
p
)

240 
	`Thªad_lock_muãx
(
hóp_muãx
);

241 i‡(
	`I¡î«l_hóp_u∆ök
(
fûe
, 
löe
, 
p
))

242 
	`‰ì
(((*)
p
)-1);

243 
	`Thªad_u∆ock_muãx
(
hóp_muãx
);

244 
	}
}

254 
	$Hóp_u∆ök
(* 
fûe
, 
löe
, * 
p
)

256 
	`Thªad_lock_muãx
(
hóp_muãx
);

257 
	`I¡î«l_hóp_u∆ök
(
fûe
, 
löe
, 
p
);

258 
	`Thªad_u∆ock_muãx
(
hóp_muãx
);

259 
	}
}

274 *
	$myªÆloc
(* 
fûe
, 
löe
, * 
p
, 
size_t
 
size
)

276 * 
rc
 = 
NULL
;

277 
°‹ageEÀmít
* 
s
 = 
NULL
;

279 
	`Thªad_lock_muãx
(
hóp_muãx
);

280 
s
 = 
	`TªeRemoveKey
(&
hóp
, ((*)
p
)-1);

281 i‡(
s
 =
NULL
)

282 
	`Log
(
LOG_ERROR
, 13, "FaûedÅÿªÆloˇã hó∞ôemáàfûê%†löê%d", 
fûe
, 
löe
);

285 
•a˚
 = (
°‹ageEÀmít
);

286 
fûíamñí
 = 
	`°æí
(
fûe
)+1;

288 
	`checkEyeˇtchîs
(
fûe
, 
löe
, 
p
, 
s
->
size
);

289 
size
 = 
	`Hóp_roundup
(size);

290 
°©e
.
cuºít_size
 +
size
 - 
s
->size;

291 i‡(
°©e
.
cuºít_size
 > sèã.
max_size
)

292 
°©e
.
max_size
 = sèã.
cuºít_size
;

293 i‡((
s
->
±r
 = 
	`ªÆloc
(s->±r, 
size
 + 2*())Ë=
NULL
)

295 
	`Log
(
LOG_ERROR
, 13, 
îrmsg
);

296  
NULL
;

298 
•a˚
 +
size
 + 2*(Ë- 
s
->size;

299 *(*)(
s
->
±r
Ë
eyeˇtchî
;

300 *(*)(((*)(
s
->
±r
)Ë+ ((Ë+ 
size
)Ë
eyeˇtchî
;

301 
s
->
size
 = size;

302 
•a˚
 -
	`°æí
(
s
->
fûe
);

303 
s
->
fûe
 = 
	`ªÆloc
(s->fûe, 
fûíamñí
);

304 
•a˚
 +
fûíamñí
;

305 
	`°r˝y
(
s
->
fûe
, file);

306 
s
->
löe
 =Üine;

307 
rc
 = 
s
->
±r
;

308 
	`TªeAdd
(&
hóp
, 
s
, 
•a˚
);

310 
	`Thªad_u∆ock_muãx
(
hóp_muãx
);

311  (
rc
 =
NULL
) ? NULL : ((*)(rc)) + 1;

312 
	}
}

321 * 
	$Hóp_födIãm
(* 
p
)

323 
Node
* 
e
 = 
NULL
;

325 
	`Thªad_lock_muãx
(
hóp_muãx
);

326 
e
 = 
	`TªeFöd
(&
hóp
, ((*)
p
)-1);

327 
	`Thªad_u∆ock_muãx
(
hóp_muãx
);

328  (
e
 =
NULL
Ë? NULL :É->
c⁄ã¡
;

329 
	}
}

336 
	$HópSˇn
(
log_Àvñ
)

338 
Node
* 
cuºít
 = 
NULL
;

340 
	`Thªad_lock_muãx
(
hóp_muãx
);

341 
	`Log
(
log_Àvñ
, -1, "Hó∞sˇ¿°¨t,ÅŸÆ %d byãs", 
°©e
.
cuºít_size
);

342 (
cuºít
 = 
	`TªeNextEÀmít
(&
hóp
, cuºít)Ë!
NULL
)

344 
°‹ageEÀmít
* 
s
 = (°‹ageEÀmít*)(
cuºít
->
c⁄ã¡
);

345 
	`Log
(
log_Àvñ
, -1, "Hó∞ñemíàsizê%d,Üöê%d, fûê%s,Öå %p", 
s
->
size
, s->
löe
, s->
fûe
, s->
±r
);

346 
	`Log
(
log_Àvñ
, -1, " C⁄ã¡ %*.s", (10 > 
cuºít
->
size
Ë? 
s
->sizê: 10, (*)(((*)s->
±r
) + 1));

348 
	`Log
(
log_Àvñ
, -1, "Heap scanÉnd");

349 
	`Thªad_u∆ock_muãx
(
hóp_muãx
);

350 
	}
}

356 
	$Hóp_öôülize
()

358 
	`TªeInôülizeNoMÆloc
(&
hóp
, 
±rCom∑ª
);

359 
hóp
.
hóp_åackög
 = 0;

361 
	}
}

367 
	$Hóp_ãrmö©e
()

369 
	`Log
(
TRACE_MIN
, -1, "Maximum hó∞u£ wa†%d byãs", 
°©e
.
max_size
);

370 i‡(
°©e
.
cuºít_size
 > 20)

372 
	`Log
(
LOG_ERROR
, -1, "Some memoryÇot freedát shutdown,Öossible memoryÜeak");

373 
	`HópSˇn
(
LOG_ERROR
);

375 
	}
}

382 
hóp_öfo
* 
	$Hóp_gë_öfo
()

384  &
°©e
;

385 
	}
}

393 
	$HópDumpSåög
(
FILE
* 
fûe
, * 
°r
)

395 
rc
 = 0;

396 
Àn
 = 
°r
 ? 
	`°æí
(str) + 1 : 0;

398 i‡(
	`fwrôe
(&(
°r
), (*), 1, 
fûe
) != 1)

399 
rc
 = -1;

400 i‡(
	`fwrôe
(&(
Àn
), (), 1 ,
fûe
) != 1)

401 
rc
 = -1;

402 i‡(
Àn
 > 0 && 
	`fwrôe
(
°r
,Üí, 1, 
fûe
) != 1)

403 
rc
 = -1;

404  
rc
;

405 
	}
}

412 
	$HópDump
(
FILE
* 
fûe
)

414 
rc
 = 0;

415 
Node
* 
cuºít
 = 
NULL
;

417 
rc
 =0 && (
cuºít
 = 
	`TªeNextEÀmít
(&
hóp
, current)))

419 
°‹ageEÀmít
* 
s
 = (°‹ageEÀmít*)(
cuºít
->
c⁄ã¡
);

421 i‡(
	`fwrôe
(&(
s
->
±r
), (s->±r), 1, 
fûe
) != 1)

422 
rc
 = -1;

423 i‡(
	`fwrôe
(&(
cuºít
->
size
), (cuºít->size), 1, 
fûe
) != 1)

424 
rc
 = -1;

425 i‡(
	`fwrôe
(
s
->
±r
, 
cuºít
->
size
, 1, 
fûe
) != 1)

426 
rc
 = -1;

428  
rc
;

429 
	}
}

432 #i‡
deföed
(
HEAP_UNIT_TESTS
)

434 
	$Log
(
log_Àvñ
, 
msgno
, * 
f‹m©
, ...)

436 
	`¥ötf
("Log %s", 
f‹m©
);

437 
	}
}

439 * 
	$Brokî_ªc‹dFFDC
(* 
sym±oms
)

441 
	`¥ötf
("recordFFDC");

443 
	}
}

445 
	#mÆloc
(
x
Ë
	`mymÆloc
(
__FILE__
, 
__LINE__
, x)

	)

446 
	#ªÆloc
(
a
, 
b
Ë
	`myªÆloc
(
__FILE__
, 
__LINE__
,á, b)

	)

447 
	#‰ì
(
x
Ë
	`my‰ì
(
__FILE__
, 
__LINE__
, x)

	)

449 
	$maö
(
¨gc
, *
¨gv
[])

451 * 
h
 = 
NULL
;

452 
	`Hóp_öôülize
();

454 
h
 = 
	`mÆloc
(12);

455 
	`‰ì
(
h
);

456 
	`¥ötf
("freed h\n");

458 
h
 = 
	`mÆloc
(12);

459 
h
 = 
	`ªÆloc
(h, 14);

460 
h
 = 
	`ªÆloc
(h, 25);

461 
h
 = 
	`ªÆloc
(h, 255);

462 
h
 = 
	`ªÆloc
(h, 2225);

463 
h
 = 
	`ªÆloc
(h, 22225);

464 
	`¥ötf
("freeing h\n");

465 
	`‰ì
(
h
);

466 
	`Hóp_ãrmö©e
();

467 
	`¥ötf
("Finishing\n");

469 
	}
}

	@paho-c/src/Heap.h

19 #i‡!
deföed
(
HEAP_H
)

20 
	#HEAP_H


	)

22 #i‡
deföed
(
HIGH_PERFORMANCE
)

23 
	#NO_HEAP_TRACKING
 1

	)

26 
	~<°dio.h
>

27 
	~<mem‹y.h
>

28 
	~<°dlib.h
>

30 #i‡!
deföed
(
NO_HEAP_TRACKING
)

36 
	#mÆloc
(
x
Ë
	`mymÆloc
(
__FILE__
, 
__LINE__
, x)

	)

44 
	#ªÆloc
(
a
, 
b
Ë
	`myªÆloc
(
__FILE__
, 
__LINE__
,á, b)

	)

50 
	#‰ì
(
x
Ë
	`my‰ì
(
__FILE__
, 
__LINE__
, x)

	)

59 
	mcuºít_size
;

60 
	mmax_size
;

61 } 
	thóp_öfo
;

64 * 
mymÆloc
(*, , 
size_t
 
size
);

65 * 
myªÆloc
(*, , * 
p
, 
size_t
 
size
);

66 
my‰ì
(*, , * 
p
);

68 
Hóp_sˇn
(
FILE
* 
fûe
);

69 
Hóp_öôülize
();

70 
Hóp_ãrmö©e
();

71 
hóp_öfo
* 
Hóp_gë_öfo
();

72 
HópDump
(
FILE
* 
fûe
);

73 
HópDumpSåög
(
FILE
* 
fûe
, * 
°r
);

74 * 
Hóp_födIãm
(* 
p
);

75 
Hóp_u∆ök
(* 
fûe
, 
löe
, * 
p
);

	@paho-c/src/LinkedList.c

27 
	~"LökedLi°.h
"

29 
	~<°dlib.h
>

30 
	~<°rög.h
>

31 
	~<mem‹y.h
>

33 
	~"Hóp.h
"

40 
	$Li°Zîo
(
Li°
* 
√wl
)

42 
	`mem£t
(
√wl
, '\0', (
Li°
));

47 
	}
}

54 
Li°
* 
	$Li°Inôülize
()

56 
Li°
* 
√wl
 = 
	`mÆloc
((List));

57 
	`Li°Zîo
(
√wl
);

58  
√wl
;

59 
	}
}

70 
	$Li°AµídNoMÆloc
(
Li°
* 
aLi°
, * 
c⁄ã¡
, 
Li°EÀmít
* 
√wñ
, 
size
)

72 
√wñ
->
c⁄ã¡
 = content;

73 
√wñ
->
√xt
 = 
NULL
;

74 
√wñ
->
¥ev
 = 
aLi°
->
œ°
;

75 i‡(
aLi°
->
fú°
 =
NULL
)

76 
aLi°
->
fú°
 = 
√wñ
;

78 
aLi°
->
œ°
->
√xt
 = 
√wñ
;

79 
aLi°
->
œ°
 = 
√wñ
;

80 ++(
aLi°
->
cou¡
);

81 
aLi°
->
size
 += size;

82 
	}
}

91 
	$Li°Aµíd
(
Li°
* 
aLi°
, * 
c⁄ã¡
, 
size
)

93 
Li°EÀmít
* 
√wñ
 = 
	`mÆloc
((ListElement));

94 
	`Li°AµídNoMÆloc
(
aLi°
, 
c⁄ã¡
, 
√wñ
, 
size
);

95 
	}
}

106 
	$Li°In£π
(
Li°
* 
aLi°
, * 
c⁄ã¡
, 
size
, 
Li°EÀmít
* 
ödex
)

108 
Li°EÀmít
* 
√wñ
 = 
	`mÆloc
((ListElement));

110 i‡–
ödex
 =
NULL
 )

111 
	`Li°AµídNoMÆloc
(
aLi°
, 
c⁄ã¡
, 
√wñ
, 
size
);

114 
√wñ
->
c⁄ã¡
 = content;

115 
√wñ
->
√xt
 = 
ödex
;

116 
√wñ
->
¥ev
 = 
ödex
->prev;

118 
ödex
->
¥ev
 = 
√wñ
;

119 i‡–
√wñ
->
¥ev
 !
NULL
 )

120 
√wñ
->
¥ev
->
√xt
 =Çewel;

122 
aLi°
->
fú°
 = 
√wñ
;

124 ++(
aLi°
->
cou¡
);

125 
aLi°
->
size
 += size;

127 
	}
}

136 
Li°EÀmít
* 
	$Li°Föd
(
Li°
* 
aLi°
, * 
c⁄ã¡
)

138  
	`Li°FödIãm
(
aLi°
, 
c⁄ã¡
, 
NULL
);

139 
	}
}

150 
Li°EÀmít
* 
Li°FödIãm
(
Li°
* 
aLi°
, * 
c⁄ã¡
, (*
ˇŒback
)(*, *))

152 
Li°EÀmít
* 
rc
 = 
NULL
;

154 i‡(
aLi°
->
cuºít
 !
NULL
 && ((
ˇŒback
 =NULL &&áLi°->cuºít->
c⁄ã¡
 == content) ||

155 (
ˇŒback
 !
NULL
 && 
	`ˇŒback
(
aLi°
->
cuºít
->
c⁄ã¡
, content))))

156 
rc
 = 
aLi°
->
cuºít
;

159 
Li°EÀmít
* 
cuºít
 = 
NULL
;

162 
	`Li°NextEÀmít
(
aLi°
, &
cuºít
Ë!
NULL
)

164 i‡(
ˇŒback
 =
NULL
)

166 i‡(
cuºít
->
c⁄ã¡
 == content)

168 
rc
 = 
cuºít
;

174 i‡(
	`ˇŒback
(
cuºít
->
c⁄ã¡
, content))

176 
rc
 = 
cuºít
;

181 i‡(
rc
 !
NULL
)

182 
aLi°
->
cuºít
 = 
rc
;

184  
rc
;

185 
	}
}

197 
Li°U∆ök
(
Li°
* 
aLi°
, * 
c⁄ã¡
, (*
ˇŒback
)(*, *), 
‰ìC⁄ã¡
)

199 
Li°EÀmít
* 
√xt
 = 
NULL
;

200 
Li°EÀmít
* 
ßved
 = 
aLi°
->
cuºít
;

201 
ßveddñëed
 = 0;

203 i‡(!
	`Li°FödIãm
(
aLi°
, 
c⁄ã¡
, 
ˇŒback
))

206 i‡(
aLi°
->
cuºít
->
¥ev
 =
NULL
)

208 
aLi°
->
fú°
 =áLi°->
cuºít
->
√xt
;

210 
aLi°
->
cuºít
->
¥ev
->
√xt
 =áList->current->next;

212 i‡(
aLi°
->
cuºít
->
√xt
 =
NULL
)

213 
aLi°
->
œ°
 =áLi°->
cuºít
->
¥ev
;

215 
aLi°
->
cuºít
->
√xt
->
¥ev
 =áList->current->prev;

217 
√xt
 = 
aLi°
->
cuºít
->next;

218 i‡(
‰ìC⁄ã¡
)

219 
	`‰ì
(
aLi°
->
cuºít
->
c⁄ã¡
);

220 i‡(
ßved
 =
aLi°
->
cuºít
)

221 
ßveddñëed
 = 1;

222 
	`‰ì
(
aLi°
->
cuºít
);

223 i‡(
ßveddñëed
)

224 
aLi°
->
cuºít
 = 
√xt
;

226 
aLi°
->
cuºít
 = 
ßved
;

227 --(
aLi°
->
cou¡
);

229 
	}
}

238 
	$Li°Dëach
(
Li°
* 
aLi°
, * 
c⁄ã¡
)

240  
	`Li°U∆ök
(
aLi°
, 
c⁄ã¡
, 
NULL
, 0);

241 
	}
}

250 
	$Li°Remove
(
Li°
* 
aLi°
, * 
c⁄ã¡
)

252  
	`Li°U∆ök
(
aLi°
, 
c⁄ã¡
, 
NULL
, 1);

253 
	}
}

261 * 
	$Li°DëachHód
(
Li°
* 
aLi°
)

263 *
c⁄ã¡
 = 
NULL
;

264 i‡(
aLi°
->
cou¡
 > 0)

266 
Li°EÀmít
* 
fú°
 = 
aLi°
->first;

267 i‡(
aLi°
->
cuºít
 =
fú°
)

268 
aLi°
->
cuºít
 = 
fú°
->
√xt
;

269 i‡(
aLi°
->
œ°
 =
fú°
)

270 
aLi°
->
œ°
 = 
NULL
;

271 
c⁄ã¡
 = 
fú°
->content;

272 
aLi°
->
fú°
 =áLi°->fú°->
√xt
;

273 i‡(
aLi°
->
fú°
)

274 
aLi°
->
fú°
->
¥ev
 = 
NULL
;

275 
	`‰ì
(
fú°
);

276 --(
aLi°
->
cou¡
);

278  
c⁄ã¡
;

279 
	}
}

287 
	$Li°RemoveHód
(
Li°
* 
aLi°
)

289 
	`‰ì
(
	`Li°DëachHód
(
aLi°
));

291 
	}
}

299 * 
	$Li°P›Taû
(
Li°
* 
aLi°
)

301 * 
c⁄ã¡
 = 
NULL
;

302 i‡(
aLi°
->
cou¡
 > 0)

304 
Li°EÀmít
* 
œ°
 = 
aLi°
->last;

305 i‡(
aLi°
->
cuºít
 =
œ°
)

306 
aLi°
->
cuºít
 = 
œ°
->
¥ev
;

307 i‡(
aLi°
->
fú°
 =
œ°
)

308 
aLi°
->
fú°
 = 
NULL
;

309 
c⁄ã¡
 = 
œ°
->content;

310 
aLi°
->
œ°
 =áLi°->œ°->
¥ev
;

311 i‡(
aLi°
->
œ°
)

312 
aLi°
->
œ°
->
√xt
 = 
NULL
;

313 
	`‰ì
(
œ°
);

314 --(
aLi°
->
cou¡
);

316  
c⁄ã¡
;

317 
	}
}

328 
Li°DëachIãm
(
Li°
* 
aLi°
, * 
c⁄ã¡
, (*
ˇŒback
)(*, *))

330  
	`Li°U∆ök
(
aLi°
, 
c⁄ã¡
, 
ˇŒback
, 0);

331 
	}
}

342 
Li°RemoveIãm
(
Li°
* 
aLi°
, * 
c⁄ã¡
, (*
ˇŒback
)(*, *))

344  
	`Li°U∆ök
(
aLi°
, 
c⁄ã¡
, 
ˇŒback
, 1);

345 
	}
}

352 
	$Li°Em±y
(
Li°
* 
aLi°
)

354 
aLi°
->
fú°
 !
NULL
)

356 
Li°EÀmít
* 
fú°
 = 
aLi°
->first;

357 i‡(
fú°
->
c⁄ã¡
 !
NULL
)

358 
	`‰ì
(
fú°
->
c⁄ã¡
);

359 
aLi°
->
fú°
 = fú°->
√xt
;

360 
	`‰ì
(
fú°
);

362 
aLi°
->
cou¡
 =áLi°->
size
 = 0;

363 
aLi°
->
cuºít
 =áLi°->
fú°
 =áLi°->
œ°
 = 
NULL
;

364 
	}
}

370 
	$Li°Fªe
(
Li°
* 
aLi°
)

372 
	`Li°Em±y
(
aLi°
);

373 
	`‰ì
(
aLi°
);

374 
	}
}

381 
	$Li°FªeNoC⁄ã¡
(
Li°
* 
aLi°
)

383 
aLi°
->
fú°
 !
NULL
)

385 
Li°EÀmít
* 
fú°
 = 
aLi°
->first;

386 
aLi°
->
fú°
 = fú°->
√xt
;

387 
	`‰ì
(
fú°
);

389 
	`‰ì
(
aLi°
);

390 
	}
}

400 
Li°EÀmít
* 
	$Li°NextEÀmít
(
Li°
* 
aLi°
, 
Li°EÀmít
** 
pos
)

402  *
pos
 = (*po†=
NULL
Ë? 
aLi°
->
fú°
 : (*pos)->
√xt
;

403 
	}
}

413 
Li°EÀmít
* 
	$Li°PªvEÀmít
(
Li°
* 
aLi°
, 
Li°EÀmít
** 
pos
)

415  *
pos
 = (*po†=
NULL
Ë? 
aLi°
->
œ°
 : (*pos)->
¥ev
;

416 
	}
}

425 
	$ötcom∑ª
(* 
a
, * 
b
)

427  *((*)
a
Ë=*((*)
b
);

428 
	}
}

437 
	$°rögcom∑ª
(* 
a
, * 
b
)

439  
	`°rcmp
((*)
a
, (*)
b
) == 0;

440 
	}
}

443 #i‡
deföed
(
UNIT_TESTS
)

446 
	$maö
(
¨gc
, *
¨gv
[])

448 
i
, *
ù
, *
todñëe
;

449 
Li°EÀmít
* 
cuºít
 = 
NULL
;

450 
Li°
* 
l
 = 
	`Li°Inôülize
();

451 
	`¥ötf
("List initialized\n");

453 
i
 = 0; i < 10; i++)

455 
ù
 = 
	`mÆloc
(());

456 *
ù
 = 
i
;

457 
	`Li°Aµíd
(
l
, (*)
ù
, ());

458 i‡(
i
==5)

459 
todñëe
 = 
ù
;

460 
	`¥ötf
("Li°ÉÀmíà≠≥nded %d\n", *((*)(
l
->
œ°
->
c⁄ã¡
)));

463 
	`¥ötf
("List contents:\n");

464 
cuºít
 = 
NULL
;

465 
	`Li°NextEÀmít
(
l
, &
cuºít
Ë!
NULL
)

466 
	`¥ötf
("Li°ÉÀmít: %d\n", *((*)(
cuºít
->
c⁄ã¡
)));

468 
	`¥ötf
("List contents inÑeverse order:\n");

469 
cuºít
 = 
NULL
;

470 
	`Li°PªvEÀmít
(
l
, &
cuºít
Ë!
NULL
)

471 
	`¥ötf
("Li°ÉÀmít: %d\n", *((*)(
cuºít
->
c⁄ã¡
)));

475 
	`¥ötf
("Li° c⁄ã¡†havög dñëedÉÀmíà%d:\n", *
todñëe
);

476 
	`Li°Remove
(
l
, 
todñëe
);

477 
cuºít
 = 
NULL
;

478 
	`Li°NextEÀmít
(
l
, &
cuºít
Ë!
NULL
)

479 
	`¥ötf
("Li°ÉÀmít: %d\n", *((*)(
cuºít
->
c⁄ã¡
)));

481 
i
 = 9;

482 
	`Li°RemoveIãm
(
l
, &
i
, 
ötcom∑ª
);

483 
	`¥ötf
("Li° c⁄ã¡†havög dñëedánŸhîÉÀmít, %d, sizênow %d:\n", 
i
, 
l
->
size
);

484 
cuºít
 = 
NULL
;

485 
	`Li°NextEÀmít
(
l
, &
cuºít
Ë!
NULL
)

486 
	`¥ötf
("Li°ÉÀmít: %d\n", *((*)(
cuºít
->
c⁄ã¡
)));

488 
	`Li°Fªe
(
l
);

489 
	`¥ötf
("List freed\n");

490 
	}
}

	@paho-c/src/LinkedList.h

18 #i‡!
deföed
(
LINKEDLIST_H
)

19 
	#LINKEDLIST_H


	)

53 
	sLi°EÀmítSåu˘


55 
Li°EÀmítSåu˘
 *
	m¥ev
,

56 *
	m√xt
;

57 * 
	mc⁄ã¡
;

58 } 
	tLi°EÀmít
;

66 
Li°EÀmít
 *
	mfú°
,

67 *
	mœ°
,

68 *
	mcuºít
;

69 
	mcou¡
,

70 
	msize
;

71 } 
	tLi°
;

73 
Li°Zîo
(
Li°
*);

74 
Li°
* 
Li°Inôülize
();

76 
Li°Aµíd
(
Li°
* 
aLi°
, * 
c⁄ã¡
, 
size
);

77 
Li°AµídNoMÆloc
(
Li°
* 
aLi°
, * 
c⁄ã¡
, 
Li°EÀmít
* 
√wñ
, 
size
);

78 
Li°In£π
(
Li°
* 
aLi°
, * 
c⁄ã¡
, 
size
, 
Li°EÀmít
* 
ödex
);

80 
Li°Remove
(
Li°
* 
aLi°
, * 
c⁄ã¡
);

81 
Li°RemoveIãm
(
Li°
* 
aLi°
, * 
c⁄ã¡
, (*
ˇŒback
)(*, *));

82 * 
	`Li°DëachHód
(
Li°
* 
aLi°
);

83 
	`Li°RemoveHód
(
Li°
* 
aLi°
);

84 * 
	`Li°P›Taû
(
Li°
* 
aLi°
);

86 
	`Li°Dëach
(
Li°
* 
aLi°
, * 
c⁄ã¡
);

87 
	`Li°DëachIãm
(
Li°
* 
aLi°
, * 
c⁄ã¡
, (*
ˇŒback
)(*, *));

89 
	`Li°Fªe
(
Li°
* 
aLi°
);

90 
	`Li°Em±y
(
Li°
* 
aLi°
);

91 
	`Li°FªeNoC⁄ã¡
(
Li°
* 
aLi°
);

93 
Li°EÀmít
* 
	`Li°NextEÀmít
(
Li°
* 
aLi°
, Li°EÀmít** 
pos
);

94 
Li°EÀmít
* 
	`Li°PªvEÀmít
(
Li°
* 
aLi°
, Li°EÀmít** 
pos
);

96 
Li°EÀmít
* 
	`Li°Föd
(
Li°
* 
aLi°
, * 
c⁄ã¡
);

97 
Li°EÀmít
* 
	`Li°FödIãm
(
Li°
* 
aLi°
, * 
c⁄ã¡
, (*
ˇŒback
)(*, *));

99 
	`ötcom∑ª
(* 
a
, * 
b
);

100 
	`°rögcom∑ª
(* 
a
, * 
b
);

	@paho-c/src/Log.c

26 
	~"Log.h
"

27 
	~"MQTTPackë.h
"

28 
	~"MQTTPrŸocﬁ.h
"

29 
	~"MQTTPrŸocﬁClõ¡.h
"

30 
	~"Mesßges.h
"

31 
	~"LökedLi°.h
"

32 
	~"SèckTø˚.h
"

33 
	~"Thªad.h
"

35 
	~<°dio.h
>

36 
	~<°dlib.h
>

37 
	~<°d¨g.h
>

38 
	~<time.h
>

39 
	~<°rög.h
>

41 #i‡!
deföed
(
WIN32
Ë&& !deföed(
WIN64
)

42 
	~<sy¶og.h
>

43 
	~<sys/°©.h
>

44 
	#GETTIMEOFDAY
 1

	)

46 
	#¢¥ötf
 
_¢¥ötf


	)

49 #i‡
deföed
(
GETTIMEOFDAY
)

50 
	~<sys/time.h
>

52 
	~<sys/timeb.h
>

55 #i‡!
deföed
(
WIN32
Ë&& !deföed(
WIN64
)

59 
	#_u∆ök
 
u∆ök


	)

63 #i‡!
deföed
(
mö
)

64 
	#mö
(
A
,
B
Ë–(AË< (BË? (A):(B))

	)

67 
åa˚_£âögs_ty≥
 
	gåa˚_£âögs
 =

69 
TRACE_MINIMUM
,

74 
	#MAX_FUNCTION_NAME_LENGTH
 256

	)

78 #i‡
deföed
(
GETTIMEOFDAY
)

79 
timevÆ
 
	mts
;

81 
timeb
 
	mts
;

83 
	mßmëime_cou¡
;

84 
	mnumbî
;

85 
	mthªad_id
;

86 
	mdïth
;

87 
	m«me
[
MAX_FUNCTION_NAME_LENGTH
 + 1];

88 
	mlöe
;

89 
	mhas_rc
;

90 
	mrc
;

91 
	mÀvñ
;

92 } 
	tåa˚E¡ry
;

94 
	g°¨t_ödex
 = -1,

95 
	g√xt_ödex
 = 0;

96 
åa˚E¡ry
* 
	gåa˚_queue
 = 
NULL
;

97 
	gåa˚_queue_size
 = 0;

99 
FILE
* 
	gåa˚_de°ö©i⁄
 = 
NULL
;

100 * 
	gåa˚_de°ö©i⁄_«me
 = 
NULL
;

101 * 
	gåa˚_de°ö©i⁄_backup_«me
 = 
NULL
;

102 
	glöes_wrôãn
 = 0;

103 
	gmax_löes_≥r_fûe
 = 1000;

104 
	gåa˚_ouçut_Àvñ
 = -1;

105 
Log_åa˚CÆlback
* 
	gåa˚_ˇŒback
 = 
NULL
;

106 
Log_ouçut
(
log_Àvñ
, * 
msg
);

108 
	gßmëime_cou¡
 = 0;

109 #i‡
deföed
(
GETTIMEOFDAY
)

110 
timevÆ
 
	gts
, 
	gœ°_ts
;

112 
timeb
 
	gts
, 
	gœ°_ts
;

114 
	gmsg_buf
[512];

116 #i‡
deföed
(
WIN32
Ë|| deföed(
WIN64
)

117 
muãx_ty≥
 
	glog_muãx
;

119 
±hªad_muãx_t
 
	glog_muãx_°‹e
 = 
PTHREAD_MUTEX_INITIALIZER
;

120 
muãx_ty≥
 
	glog_muãx
 = &
log_muãx_°‹e
;

124 
	$Log_öôülize
(
Log_«meVÆue
* 
öfo
)

126 
rc
 = -1;

127 * 
ívvÆ
 = 
NULL
;

129 i‡((
åa˚_queue
 = 
	`mÆloc
((
åa˚E¡ry
Ë* 
åa˚_£âögs
.
max_åa˚_íåõs
)Ë=
NULL
)

130  
rc
;

131 
åa˚_queue_size
 = 
åa˚_£âögs
.
max_åa˚_íåõs
;

133 i‡((
ívvÆ
 = 
	`gëív
("MQTT_C_CLIENT_TRACE")Ë!
NULL
 && 
	`°æí
(envval) > 0)

135 i‡(
	`°rcmp
(
ívvÆ
, "ON"Ë=0 || (
åa˚_de°ö©i⁄
 = 
	`f›í
”nvvÆ, "w")Ë=
NULL
)

136 
åa˚_de°ö©i⁄
 = 
°dout
;

139 
åa˚_de°ö©i⁄_«me
 = 
	`mÆloc
(
	`°æí
(
ívvÆ
) + 1);

140 
	`°r˝y
(
åa˚_de°ö©i⁄_«me
, 
ívvÆ
);

141 
åa˚_de°ö©i⁄_backup_«me
 = 
	`mÆloc
(
	`°æí
(
ívvÆ
) + 3);

142 
	`•rötf
(
åa˚_de°ö©i⁄_backup_«me
, "%s.0", 
åa˚_de°ö©i⁄_«me
);

145 i‡((
ívvÆ
 = 
	`gëív
("MQTT_C_CLIENT_TRACE_MAX_LINES")Ë!
NULL
 && 
	`°æí
(envval) > 0)

147 
max_löes_≥r_fûe
 = 
	`©oi
(
ívvÆ
);

148 i‡(
max_löes_≥r_fûe
 <= 0)

149 
max_löes_≥r_fûe
 = 1000;

151 i‡((
ívvÆ
 = 
	`gëív
("MQTT_C_CLIENT_TRACE_LEVEL")Ë!
NULL
 && 
	`°æí
(envval) > 0)

153 i‡(
	`°rcmp
(
ívvÆ
, "MAXIMUM") == 0 || strcmp(envval, "TRACE_MAXIMUM") == 0)

154 
åa˚_£âögs
.
åa˚_Àvñ
 = 
TRACE_MAXIMUM
;

155 i‡(
	`°rcmp
(
ívvÆ
, "MEDIUM") == 0 || strcmp(envval, "TRACE_MEDIUM") == 0)

156 
åa˚_£âögs
.
åa˚_Àvñ
 = 
TRACE_MEDIUM
;

157 i‡(
	`°rcmp
(
ívvÆ
, "MINIMUM") == 0 || strcmp(envval, "TRACE_MEDIUM") == 0)

158 
åa˚_£âögs
.
åa˚_Àvñ
 = 
TRACE_MINIMUM
;

159 i‡(
	`°rcmp
(
ívvÆ
, "PROTOCOL") == 0 || strcmp(envval, "TRACE_PROTOCOL") == 0)

160 
åa˚_ouçut_Àvñ
 = 
TRACE_PROTOCOL
;

161 i‡(
	`°rcmp
(
ívvÆ
, "ERROR") == 0 || strcmp(envval, "TRACE_ERROR") == 0)

162 
åa˚_ouçut_Àvñ
 = 
LOG_ERROR
;

164 
	`Log_ouçut
(
TRACE_MINIMUM
, "=========================================================");

165 
	`Log_ouçut
(
TRACE_MINIMUM
, " Trace Output");

166 i‡(
öfo
)

168 
öfo
->
«me
)

170 
	`¢¥ötf
(
msg_buf
, (msg_buf), "%s: %s", 
öfo
->
«me
, info->
vÆue
);

171 
	`Log_ouçut
(
TRACE_MINIMUM
, 
msg_buf
);

172 
öfo
++;

175 #i‡!
	`deföed
(
WIN32
Ë&& !deföed(
WIN64
)

176 
°©
 
buf
;

177 i‡(
	`°©
("/¥oc/vîsi⁄", &
buf
) != -1)

179 
FILE
* 
vfûe
;

181 i‡((
vfûe
 = 
	`f›í
("/¥oc/vîsi⁄", "r")Ë!
NULL
)

183 
Àn
;

185 
	`°r˝y
(
msg_buf
, "/proc/version: ");

186 
Àn
 = 
	`°æí
(
msg_buf
);

187 i‡(
	`fgës
(&
msg_buf
[
Àn
], (msg_bufË-Üí, 
vfûe
))

188 
	`Log_ouçut
(
TRACE_MINIMUM
, 
msg_buf
);

189 
	`f˛o£
(
vfûe
);

193 
	`Log_ouçut
(
TRACE_MINIMUM
, "=========================================================");

195  
rc
;

196 
	}
}

199 
	$Log_£tTø˚CÆlback
(
Log_åa˚CÆlback
* 
ˇŒback
)

201 
åa˚_ˇŒback
 = 
ˇŒback
;

202 
	}
}

205 
	$Log_£tTø˚Levñ
(
LOG_LEVELS
 
Àvñ
)

207 i‡(
Àvñ
 < 
TRACE_MINIMUM
)

208 
åa˚_£âögs
.
åa˚_Àvñ
 = 
Àvñ
;

209 
åa˚_ouçut_Àvñ
 = 
Àvñ
;

210 
	}
}

213 
	$Log_ãrmö©e
()

215 
	`‰ì
(
åa˚_queue
);

216 
åa˚_queue
 = 
NULL
;

217 
åa˚_queue_size
 = 0;

218 i‡(
åa˚_de°ö©i⁄
)

220 i‡(
åa˚_de°ö©i⁄
 !
°dout
)

221 
	`f˛o£
(
åa˚_de°ö©i⁄
);

222 
åa˚_de°ö©i⁄
 = 
NULL
;

224 i‡(
åa˚_de°ö©i⁄_«me
)

225 
	`‰ì
(
åa˚_de°ö©i⁄_«me
);

226 i‡(
åa˚_de°ö©i⁄_backup_«me
)

227 
	`‰ì
(
åa˚_de°ö©i⁄_backup_«me
);

228 
°¨t_ödex
 = -1;

229 
√xt_ödex
 = 0;

230 
åa˚_ouçut_Àvñ
 = -1;

231 
ßmëime_cou¡
 = 0;

232 
	}
}

235 
åa˚E¡ry
* 
	$Log_¥ëø˚
()

237 
åa˚E¡ry
 *
cur_íåy
 = 
NULL
;

240 i‡(++
ßmëime_cou¡
 % 20 == 0)

242 #i‡
	`deföed
(
GETTIMEOFDAY
)

243 
	`gëtimeofday
(&
ts
, 
NULL
);

244 i‡(
ts
.
tv_£c
 !
œ°_ts
.tv_£¯||Ås.
tv_u£c
 !=Üast_ts.tv_usec)

246 
	`·ime
(&
ts
);

247 i‡(
ts
.
time
 !
œ°_ts
.timê||Ås.
mûlôm
 !=Üast_ts.millitm)

250 
ßmëime_cou¡
 = 0;

251 
œ°_ts
 = 
ts
;

255 i‡(
åa˚_queue_size
 !
åa˚_£âögs
.
max_åa˚_íåõs
)

257 
åa˚E¡ry
* 
√w_åa˚_queue
 = 
	`mÆloc
(—ø˚E¡ryË* 
åa˚_£âögs
.
max_åa˚_íåõs
);

259 
	`mem˝y
(
√w_åa˚_queue
, 
åa˚_queue
, 
	`mö
(
åa˚_queue_size
, 
åa˚_£âögs
.
max_åa˚_íåõs
Ë* (
åa˚E¡ry
));

260 
	`‰ì
(
åa˚_queue
);

261 
åa˚_queue
 = 
√w_åa˚_queue
;

262 
åa˚_queue_size
 = 
åa˚_£âögs
.
max_åa˚_íåõs
;

264 i‡(
°¨t_ödex
 > 
åa˚_£âögs
.
max_åa˚_íåõs
 + 1 ||

265 
√xt_ödex
 > 
åa˚_£âögs
.
max_åa˚_íåõs
 + 1)

267 
°¨t_ödex
 = -1;

268 
√xt_ödex
 = 0;

273 
cur_íåy
 = &
åa˚_queue
[
√xt_ödex
];

274 i‡(
√xt_ödex
 =
°¨t_ödex
)

276 i‡(++
°¨t_ödex
 =
åa˚_£âögs
.
max_åa˚_íåõs
)

277 
°¨t_ödex
 = 0;

278 } i‡(
°¨t_ödex
 == -1)

279 
°¨t_ödex
 = 0;

280 i‡(++
√xt_ödex
 =
åa˚_£âögs
.
max_åa˚_íåõs
)

281 
√xt_ödex
 = 0;

283  
cur_íåy
;

284 
	}
}

287 * 
	$Log_f‹m©Tø˚E¡ry
(
åa˚E¡ry
* 
cur_íåy
)

289 
tm
 *
timeöfo
;

290 
buf_pos
 = 31;

292 #i‡
	`deföed
(
GETTIMEOFDAY
)

293 
timeöfo
 = 
	`loˇ…ime
(&
cur_íåy
->
ts
.
tv_£c
);

295 
timeöfo
 = 
	`loˇ…ime
(&
cur_íåy
->
ts
.
time
);

297 
	`°r·ime
(&
msg_buf
[7], 80, "%Y%m%d %H%M%S ", 
timeöfo
);

298 #i‡
	`deföed
(
GETTIMEOFDAY
)

299 
	`•rötf
(&
msg_buf
[22], ".%.3lu ", 
cur_íåy
->
ts
.
tv_u£c
 / 1000L);

301 
	`•rötf
(&
msg_buf
[22], ".%.3hu ", 
cur_íåy
->
ts
.
mûlôm
);

303 
buf_pos
 = 27;

305 
	`•rötf
(
msg_buf
, "(%.4d)", 
cur_íåy
->
ßmëime_cou¡
);

306 
msg_buf
[6] = ' ';

308 i‡(
cur_íåy
->
has_rc
 == 2)

309 
	`°∫˝y
(&
msg_buf
[
buf_pos
], 
cur_íåy
->
«me
, (msg_buf)-buf_pos);

312 * 
f‹m©
 = 
	`Mesßges_gë
(
cur_íåy
->
numbî
, cur_íåy->
Àvñ
);

313 i‡(
cur_íåy
->
has_rc
 == 1)

314 
	`¢¥ötf
(&
msg_buf
[
buf_pos
], (msg_buf)-buf_pos, 
f‹m©
, 
cur_íåy
->
thªad_id
,

315 
cur_íåy
->
dïth
, "", cur_íåy->dïth, cur_íåy->
«me
, cur_íåy->
löe
, cur_íåy->
rc
);

317 
	`¢¥ötf
(&
msg_buf
[
buf_pos
], (msg_buf)-buf_pos, 
f‹m©
, 
cur_íåy
->
thªad_id
,

318 
cur_íåy
->
dïth
, "", cur_íåy->dïth, cur_íåy->
«me
, cur_íåy->
löe
);

320  
msg_buf
;

321 
	}
}

324 
	$Log_ouçut
(
log_Àvñ
, * 
msg
)

326 i‡(
åa˚_de°ö©i⁄
)

328 
	`Ârötf
(
åa˚_de°ö©i⁄
, "%s\n", 
msg
);

330 i‡(
åa˚_de°ö©i⁄
 !
°dout
 && ++
löes_wrôãn
 >
max_löes_≥r_fûe
)

333 
	`f˛o£
(
åa˚_de°ö©i⁄
);

334 
	`_u∆ök
(
åa˚_de°ö©i⁄_backup_«me
);

335 
	`ª«me
(
åa˚_de°ö©i⁄_«me
, 
åa˚_de°ö©i⁄_backup_«me
);

336 
åa˚_de°ö©i⁄
 = 
	`f›í
(
åa˚_de°ö©i⁄_«me
, "w");

337 i‡(
åa˚_de°ö©i⁄
 =
NULL
)

338 
åa˚_de°ö©i⁄
 = 
°dout
;

339 
löes_wrôãn
 = 0;

342 
	`fÊush
(
åa˚_de°ö©i⁄
);

345 i‡(
åa˚_ˇŒback
)

346 (*
åa˚_ˇŒback
)(
log_Àvñ
, 
msg
);

347 
	}
}

350 
	$Log_po°åa˚
(
log_Àvñ
, 
åa˚E¡ry
* 
cur_íåy
)

352 i‡(((
åa˚_ouçut_Àvñ
 =-1Ë? 
log_Àvñ
 >
åa˚_£âögs
.
åa˚_Àvñ
 :Üog_level >=Årace_output_level))

354 * 
msg
 = 
NULL
;

356 i‡(
åa˚_de°ö©i⁄
 || 
åa˚_ˇŒback
)

357 
msg
 = &
	`Log_f‹m©Tø˚E¡ry
(
cur_íåy
)[7];

359 
	`Log_ouçut
(
log_Àvñ
, 
msg
);

361 
	}
}

364 
	$Log_åa˚
(
log_Àvñ
, * 
buf
)

366 
åa˚E¡ry
 *
cur_íåy
 = 
NULL
;

368 i‡(
åa˚_queue
 =
NULL
)

371 
cur_íåy
 = 
	`Log_¥ëø˚
();

373 
	`mem˝y
(&(
cur_íåy
->
ts
), &ts, (ts));

374 
cur_íåy
->
ßmëime_cou¡
 = sametime_count;

376 
cur_íåy
->
has_rc
 = 2;

377 
	`°∫˝y
(
cur_íåy
->
«me
, 
buf
, (cur_entry->name));

378 
cur_íåy
->
«me
[
MAX_FUNCTION_NAME_LENGTH
] = '\0';

380 
	`Log_po°åa˚
(
log_Àvñ
, 
cur_íåy
);

381 
	}
}

393 
	$Log
(
log_Àvñ
, 
msgno
, * 
f‹m©
, ...)

395 i‡(
log_Àvñ
 >
åa˚_£âögs
.
åa˚_Àvñ
)

397 * 
ãmp
 = 
NULL
;

398 
msg_buf
[512];

399 
va_li°
 
¨gs
;

402 
	`Thªad_lock_muãx
(
log_muãx
);

403 i‡(
f‹m©
 =
NULL
 && (
ãmp
 = 
	`Mesßges_gë
(
msgno
, 
log_Àvñ
)) != NULL)

404 
f‹m©
 = 
ãmp
;

406 
	`va_°¨t
(
¨gs
, 
f‹m©
);

407 
	`v¢¥ötf
(
msg_buf
, (msg_buf), 
f‹m©
, 
¨gs
);

409 
	`Log_åa˚
(
log_Àvñ
, 
msg_buf
);

410 
	`va_íd
(
¨gs
);

411 
	`Thªad_u∆ock_muãx
(
log_muãx
);

420 
	}
}

432 
	$Log_°ackTø˚
(
log_Àvñ
, 
msgno
, 
thªad_id
, 
cuºít_dïth
, c⁄° * 
«me
, 
löe
, * 
rc
)

434 
åa˚E¡ry
 *
cur_íåy
 = 
NULL
;

436 i‡(
åa˚_queue
 =
NULL
)

439 i‡(
log_Àvñ
 < 
åa˚_£âögs
.
åa˚_Àvñ
)

442 
	`Thªad_lock_muãx
(
log_muãx
);

443 
cur_íåy
 = 
	`Log_¥ëø˚
();

445 
	`mem˝y
(&(
cur_íåy
->
ts
), &ts, (ts));

446 
cur_íåy
->
ßmëime_cou¡
 = sametime_count;

447 
cur_íåy
->
numbî
 = 
msgno
;

448 
cur_íåy
->
thªad_id
 =Åhread_id;

449 
cur_íåy
->
dïth
 = 
cuºít_dïth
;

450 
	`°r˝y
(
cur_íåy
->
«me
,Çame);

451 
cur_íåy
->
Àvñ
 = 
log_Àvñ
;

452 
cur_íåy
->
löe
 =Üine;

453 i‡(
rc
 =
NULL
)

454 
cur_íåy
->
has_rc
 = 0;

457 
cur_íåy
->
has_rc
 = 1;

458 
cur_íåy
->
rc
 = *rc;

461 
	`Log_po°åa˚
(
log_Àvñ
, 
cur_íåy
);

462 
	`Thªad_u∆ock_muãx
(
log_muãx
);

463 
	}
}

466 
FILE
* 
	$Log_de°ToFûe
(* 
de°
)

468 
FILE
* 
fûe
 = 
NULL
;

470 i‡(
	`°rcmp
(
de°
, "stdout") == 0)

471 
fûe
 = 
°dout
;

472 i‡(
	`°rcmp
(
de°
, "stderr") == 0)

473 
fûe
 = 
°dîr
;

476 i‡(
	`°r°r
(
de°
, "FFDC"))

477 
fûe
 = 
	`f›í
(
de°
, "ab");

479 
fûe
 = 
	`f›í
(
de°
, "wb");

481  
fûe
;

482 
	}
}

485 
	$Log_com∑ªE¡rõs
(* 
íåy1
, * 
íåy2
)

487 
comp
 = 
	`°∫cmp
(&
íåy1
[7], &
íåy2
[7], 19);

490 i‡(
comp
 == 0)

491 
comp
 = 
	`°∫cmp
(&
íåy1
[1], &
íåy2
[1], 4);

493  
comp
;

494 
	}
}

502 
	$Log_dumpTø˚
(* 
de°
)

504 
FILE
* 
fûe
 = 
NULL
;

505 
Li°EÀmít
* 
cur_åa˚_íåy
 = 
NULL
;

506 c⁄° 
msg°¨t
 = 7;

507 
rc
 = -1;

508 
åa˚_queue_ödex
 = 0;

510 i‡((
fûe
 = 
	`Log_de°ToFûe
(
de°
)Ë=
NULL
)

512 
	`Log
(
LOG_ERROR
, 9, 
NULL
, "åa˚", 
de°
, "traceÉntries");

513 
exô
;

516 
	`Ârötf
(
fûe
, "=========== Start ofÅrace dump ==========\n");

518 
	`Li°NextEÀmít
(
åa˚_buf„r
, &
cur_åa˚_íåy
);

519 
åa˚_queue_ödex
 = 
°¨t_ödex
;

520 i‡(
åa˚_queue_ödex
 == -1)

521 
åa˚_queue_ödex
 = 
√xt_ödex
;

524 
	`Log_f‹m©Tø˚E¡ry
(&
åa˚_queue
[
åa˚_queue_ödex
++]);

525 i‡(
åa˚_queue_ödex
 =
åa˚_£âögs
.
max_åa˚_íåõs
)

526 
åa˚_queue_ödex
 = 0;

528 
cur_åa˚_íåy
 || 
åa˚_queue_ödex
 !
√xt_ödex
)

530 i‡(
cur_åa˚_íåy
 && 
åa˚_queue_ödex
 != -1)

532 i‡(
	`Log_com∑ªE¡rõs
((*)
cur_åa˚_íåy
->
c⁄ã¡
, 
msg_buf
) > 0)

533 
cur_åa˚_íåy
 = 
NULL
;

536 i‡(
cur_åa˚_íåy
)

538 
	`Ârötf
(
fûe
, "%s\n", &((*)(
cur_åa˚_íåy
->
c⁄ã¡
))[
msg°¨t
]);

539 
	`Li°NextEÀmít
(
åa˚_buf„r
, &
cur_åa˚_íåy
);

543 
	`Ârötf
(
fûe
, "%s\n", &
msg_buf
[7]);

544 i‡(
åa˚_queue_ödex
 !
√xt_ödex
)

546 
	`Log_f‹m©Tø˚E¡ry
(&
åa˚_queue
[
åa˚_queue_ödex
++]);

547 i‡(
åa˚_queue_ödex
 =
åa˚_£âögs
.
max_åa˚_íåõs
)

548 
åa˚_queue_ödex
 = 0;

552 
	`Ârötf
(
fûe
, "========== End ofÅrace dump ==========\n\n");

553 i‡(
fûe
 !
°dout
 && fûê!
°dîr
 && fûê!
NULL
)

554 
	`f˛o£
(
fûe
);

555 
rc
 = 0;

556 
exô
:

557  
rc
;

558 
	}
}

	@paho-c/src/Log.h

18 #i‡!
deföed
(
LOG_H
)

19 
	#LOG_H


	)

35 
	eLOG_LEVELS
 {

36 
	mTRACE_MAXIMUM
 = 1,

37 
	mTRACE_MEDIUM
,

38 
	mTRACE_MINIMUM
,

39 
	mTRACE_PROTOCOL
,

40 
	mLOG_ERROR
,

41 
	mLOG_SEVERE
,

42 
	mLOG_FATAL
,

43 } 
	gLog_Àvñs
;

56 
	måa˚_Àvñ
;

57 
	mmax_åa˚_íåõs
;

58 
	måa˚_ouçut_Àvñ
;

59 } 
	tåa˚_£âögs_ty≥
;

61 
åa˚_£âögs_ty≥
 
åa˚_£âögs
;

63 
	#LOG_PROTOCOL
 
TRACE_PROTOCOL


	)

64 
	#TRACE_MAX
 
TRACE_MAXIMUM


	)

65 
	#TRACE_MIN
 
TRACE_MINIMUM


	)

66 
	#TRACE_MED
 
TRACE_MEDIUM


	)

70 c⁄° * 
	m«me
;

71 c⁄° * 
	mvÆue
;

72 } 
	tLog_«meVÆue
;

74 
Log_öôülize
(
Log_«meVÆue
*);

75 
Log_ãrmö©e
();

77 
Log
(, , *, ...);

78 
Log_°ackTø˚
(, , , , const *, , *);

80 
	tLog_åa˚CÆlback
(
	tLOG_LEVELS
 
	tÀvñ
, * 
	tmesßge
);

81 
Log_£tTø˚CÆlback
(
Log_åa˚CÆlback
* 
ˇŒback
);

82 
Log_£tTø˚Levñ
(
LOG_LEVELS
 
Àvñ
);

	@paho-c/src/MQTTAsync.c

35 
	#_GNU_SOURCE


	)

36 
	~<°dlib.h
>

37 #i‡!
deföed
(
WIN32
Ë&& !deföed(
WIN64
)

38 
	~<sys/time.h
>

41 #i‡!
deföed
(
NO_PERSISTENCE
)

42 
	~"MQTTPîsi°í˚.h
"

44 
	~"MQTTAsync.h
"

45 
	~"utf-8.h
"

46 
	~"MQTTPrŸocﬁ.h
"

47 
	~"MQTTPrŸocﬁOut.h
"

48 
	~"Thªad.h
"

49 
	~"SockëBuf„r.h
"

50 
	~"SèckTø˚.h
"

51 
	~"Hóp.h
"

53 
	#URI_TCP
 "t˝://"

	)

55 
	#BUILD_TIMESTAMP
 "Su¿Ju»12 19:04:02 CST 2015"

	)

56 
	#CLIENT_VERSION
 "1.0.3"

	)

58 * 
	g˛õ¡_time°amp_eye
 = "MQTTAsyncV3_Time°am∞" 
BUILD_TIMESTAMP
;

59 * 
	g˛õ¡_vîsi⁄_eye
 = "MQTTAsyncV3_Vîsi⁄ " 
CLIENT_VERSION
;

61 
Sockës
 
s
;

63 
Clõ¡Sèãs
 
	gClõ¡Sèã
 =

65 
CLIENT_VERSION
,

66 
NULL


69 
Clõ¡Sèãs
* 
	gb°©e
 = &
Clõ¡Sèã
;

71 
MQTTPrŸocﬁ
 
	g°©e
;

73 
	eMQTTAsync_thªadSèãs


75 
	mSTOPPED
, 
	mSTARTING
, 
	mRUNNING
, 
	mSTOPPING


78 
MQTTAsync_thªadSèãs
 
	g£ndThªad_°©e
 = 
STOPPED
;

79 
MQTTAsync_thªadSèãs
 
	gª˚iveThªad_°©e
 = 
STOPPED
;

80 
thªad_id_ty≥
 
	g£ndThªad_id
 = 0,

81 
	gª˚iveThªad_id
 = 0;

83 #i‡
deföed
(
WIN32
Ë|| deföed(
WIN64
)

84 
muãx_ty≥
 
	gmqâasync_muãx
 = 
NULL
;

85 
muãx_ty≥
 
	gmqâcomm™d_muãx
 = 
NULL
;

86 
£m_ty≥
 
	g£nd_£m
 = 
NULL
;

87 
muãx_ty≥
 
°ack_muãx
;

88 
muãx_ty≥
 
hóp_muãx
;

89 
muãx_ty≥
 
log_muãx
;

90 
BOOL
 
APIENTRY
 
	$DŒMaö
(
HANDLE
 
hModuÀ
,

91 
DWORD
 
ul_ªas⁄_f‹_ˇŒ
,

92 
LPVOID
 
ÕRe£rved
)

94 
ul_ªas⁄_f‹_ˇŒ
)

96 
DLL_PROCESS_ATTACH
:

97 
	`Log
(
TRACE_MAX
, -1, "DLLÖrocessáttach");

98 i‡(
mqâasync_muãx
 =
NULL
)

100 
mqâasync_muãx
 = 
	`Cª©eMuãx
(
NULL
, 0, NULL);

101 
mqâcomm™d_muãx
 = 
	`Cª©eMuãx
(
NULL
, 0, NULL);

102 
£nd_£m
 = 
	`Cª©eEvít
(

103 
NULL
,

104 
FALSE
,

105 
FALSE
,

106 
NULL


108 
°ack_muãx
 = 
	`Cª©eMuãx
(
NULL
, 0, NULL);

109 
hóp_muãx
 = 
	`Cª©eMuãx
(
NULL
, 0, NULL);

110 
log_muãx
 = 
	`Cª©eMuãx
(
NULL
, 0, NULL);

112 
DLL_THREAD_ATTACH
:

113 
	`Log
(
TRACE_MAX
, -1, "DLLÅhreadáttach");

114 
DLL_THREAD_DETACH
:

115 
	`Log
(
TRACE_MAX
, -1, "DLLÅhread detach");

116 
DLL_PROCESS_DETACH
:

117 
	`Log
(
TRACE_MAX
, -1, "DLLÖrocess detach");

119  
TRUE
;

120 
	}
}

122 
±hªad_muãx_t
 
	gmqâasync_muãx_°‹e
 = 
PTHREAD_MUTEX_INITIALIZER
;

123 
muãx_ty≥
 
	gmqâasync_muãx
 = &
mqâasync_muãx_°‹e
;

124 
±hªad_muãx_t
 
	gmqâcomm™d_muãx_°‹e
 = 
PTHREAD_MUTEX_INITIALIZER
;

125 
muãx_ty≥
 
	gmqâcomm™d_muãx
 = &
mqâcomm™d_muãx_°‹e
;

126 
c⁄d_ty≥_°ru˘
 
	g£nd_c⁄d_°‹e
 = { 
PTHREAD_COND_INITIALIZER
, 
PTHREAD_MUTEX_INITIALIZER
 };

127 
c⁄d_ty≥
 
	g£nd_c⁄d
 = &
£nd_c⁄d_°‹e
;

129 
	$MQTTAsync_öô
()

131 
±hªad_muãx©å_t
 
©å
;

132 
rc
;

134 
	`±hªad_muãx©å_öô
(&
©å
);

135 
	`±hªad_muãx©å_£ây≥
(&
©å
, 
PTHREAD_MUTEX_ERRORCHECK
);

136 i‡((
rc
 = 
	`±hªad_muãx_öô
(
mqâasync_muãx
, &
©å
)) != 0)

137 
	`¥ötf
("MQTTAsync:Éº‹ %d inôülizögásync_muãx\n", 
rc
);

138 i‡((
rc
 = 
	`±hªad_muãx_öô
(
mqâcomm™d_muãx
, &
©å
)) != 0)

139 
	`¥ötf
("MQTTAsync:Éº‹ %d inôülizög comm™d_muãx\n", 
rc
);

140 
	}
}

142 
	#WINAPI


	)

145 vﬁ©ûê
	göôülized
 = 0;

146 
Li°
* 
	gh™dÀs
 = 
NULL
;

147 
	gto°›
 = 0;

148 
Li°
* 
	gcomm™ds
 = 
NULL
;

150 
MQTTPackë
* 
MQTTAsync_cy˛e
(* 
sock
, 
timeout
, * 
rc
);

151 
MQTTAsync_˛ónSessi⁄
(
Clõ¡s
* 
˛õ¡
);

152 
MQTTAsync_°›
();

153 
MQTTAsync_disc⁄√˘_öã∫Æ
(
MQTTAsync
 
h™dÀ
, 
timeout
);

154 
MQTTAsync_˛o£O∆y
(
Clõ¡s
* 
˛õ¡
);

155 
MQTTAsync_˛o£Sessi⁄
(
Clõ¡s
* 
˛õ¡
);

156 
MQTTPrŸocﬁ_˛o£Sessi⁄
(
Clõ¡s
* 
˛õ¡
, 
£ndwûl
);

157 
MQTTAsync_wrôeCom∂ëe
(
sockë
);

159 #i‡
deföed
(
WIN32
Ë|| deföed(
WIN64
)

160 
	#START_TIME_TYPE
 
DWORD


	)

161 
START_TIME_TYPE
 
	$MQTTAsync_°¨t_˛ock
()

163  
	`GëTickCou¡
();

164 
	}
}

165 #ñi‡
deföed
(
AIX
)

166 
	#START_TIME_TYPE
 
time•ec


	)

167 
START_TIME_TYPE
 
	$MQTTAsync_°¨t_˛ock
()

169 
time•ec
 
°¨t
;

170 
	`˛ock_gëtime
(
CLOCK_REALTIME
, &
°¨t
);

171  
°¨t
;

172 
	}
}

174 
	#START_TIME_TYPE
 
timevÆ


	)

175 
START_TIME_TYPE
 
	$MQTTAsync_°¨t_˛ock
()

177 
timevÆ
 
°¨t
;

178 
	`gëtimeofday
(&
°¨t
, 
NULL
);

179  
°¨t
;

180 
	}
}

184 #i‡
deföed
(
WIN32
Ë|| deföed(
WIN64
)

185 
	$MQTTAsync_ñ≠£d
(
DWORD
 
mûli£c⁄ds
)

187  
	`GëTickCou¡
(Ë- 
mûli£c⁄ds
;

188 
	}
}

189 #ñi‡
deföed
(
AIX
)

190 
	#as£π
(
a
)

	)

191 
	$MQTTAsync_ñ≠£d
(
time•ec
 
°¨t
)

193 
time•ec
 
now
, 
ªs
;

195 
	`˛ock_gëtime
(
CLOCK_REALTIME
, &
now
);

196 
	`¡imîsub
(
now
, 
°¨t
, 
ªs
);

197  (
ªs
.
tv_£c
)*1000L + (ªs.
tv_n£c
)/1000000L;

198 
	}
}

200 
	$MQTTAsync_ñ≠£d
(
timevÆ
 
°¨t
)

202 
timevÆ
 
now
, 
ªs
;

204 
	`gëtimeofday
(&
now
, 
NULL
);

205 
	`timîsub
(&
now
, &
°¨t
, &
ªs
);

206  (
ªs
.
tv_£c
)*1000 + (ªs.
tv_u£c
)/1000;

207 
	}
}

213 
MQTTAsync_mesßge
* 
	mmsg
;

214 * 
	mt›icName
;

215 
	mt›icLí
;

216 
	m£qno
;

217 } 
	tqE¡ry
;

221 
	mty≥
;

222 
MQTTAsync_⁄Suc˚ss
* 
	m⁄Suc˚ss
;

223 
MQTTAsync_⁄Faûuª
* 
	m⁄Faûuª
;

224 
MQTTAsync_tokí
 
	mtokí
;

225 * 
	mc⁄ãxt
;

226 
START_TIME_TYPE
 
	m°¨t_time
;

231 
	mcou¡
;

232 ** 
	mt›ics
;

233 * 
	mqoss
;

234 } 
	msub
;

237 
	mcou¡
;

238 ** 
	mt›ics
;

239 } 
	munsub
;

242 * 
	mde°ö©i⁄Name
;

243 
	m∑ylﬂdÀn
;

244 * 
	m∑ylﬂd
;

245 
	mqos
;

246 
	mªèöed
;

247 } 
	mpub
;

250 
	möã∫Æ
;

251 
	mtimeout
;

252 } 
	mdis
;

255 
	mtimeout
;

256 
	m£rvîURIcou¡
;

257 ** 
	m£rvîURIs
;

258 
	mcuºítURI
;

259 
	mMQTTVîsi⁄
;

260 } 
	mc⁄n
;

261 } 
	mdëaûs
;

262 } 
	tMQTTAsync_comm™d
;

265 
	sMQTTAsync_°ru˘


267 * 
	m£rvîURI
;

268 
	ms¶
;

269 
Clõ¡s
* 
	mc
;

272 
MQTTAsync_c⁄√˘i⁄Lo°
* 
	m˛
;

273 
MQTTAsync_mesßgeAºived
* 
	mma
;

274 
MQTTAsync_dñivîyCom∂ëe
* 
	mdc
;

275 * 
	mc⁄ãxt
;

277 
MQTTAsync_comm™d
 
	mc⁄√˘
;

278 
MQTTAsync_comm™d
 
	mdisc⁄√˘
;

279 
MQTTAsync_comm™d
* 
	m≥ndög_wrôe
;

281 
Li°
* 
	mª•⁄£s
;

282 
	mcomm™d_£qno
;

284 
MQTTPackë
* 
	m∑ck
;

286 } 
	tMQTTAsyncs
;

291 
MQTTAsync_comm™d
 
	mcomm™d
;

292 
MQTTAsyncs
* 
	m˛õ¡
;

293 
	m£qno
;

294 } 
	tMQTTAsync_queuedComm™d
;

296 
MQTTAsync_‰ìComm™d
(
MQTTAsync_queuedComm™d
 *
comm™d
);

297 
MQTTAsync_‰ìComm™d1
(
MQTTAsync_queuedComm™d
 *
comm™d
);

298 
MQTTAsync_dñivîMesßge
(
MQTTAsyncs
* 
m
, * 
t›icName
, 
size_t
 
t›icLí
, 
MQTTAsync_mesßge
* 
mm
);

299 #i‡!
deföed
(
NO_PERSISTENCE
)

300 
MQTTAsync_ª°‹eComm™ds
(
MQTTAsyncs
* 
˛õ¡
);

303 
	$MQTTAsync_¶ìp
(
mûli£c⁄ds
)

305 
FUNC_ENTRY
;

306 #i‡
	`deföed
(
WIN32
Ë|| deföed(
WIN64
)

307 
	`SÀï
(
mûli£c⁄ds
);

309 
	`u¶ìp
(
mûli£c⁄ds
*1000);

311 
FUNC_EXIT
;

312 
	}
}

321 
	$˛õ¡SockCom∑ª
(* 
a
, * 
b
)

323 
MQTTAsyncs
* 
m
 = (MQTTAsyncs*)
a
;

324  
m
->
c
->
√t
.
sockë
 =*(*)
b
;

325 
	}
}

328 
	$MQTTAsync_lock_muãx
(
muãx_ty≥
 
amuãx
)

330 
rc
 = 
	`Thªad_lock_muãx
(
amuãx
);

331 i‡(
rc
 != 0)

332 
	`Log
(
LOG_ERROR
, 0, "Eº‹ %†lockög muãx", 
	`°ªº‹
(
rc
));

333 
	}
}

336 
	$MQTTAsync_u∆ock_muãx
(
muãx_ty≥
 
amuãx
)

338 
rc
 = 
	`Thªad_u∆ock_muãx
(
amuãx
);

339 i‡(
rc
 != 0)

340 
	`Log
(
LOG_ERROR
, 0, "Eº‹ %†u∆ockög muãx", 
	`°ªº‹
(
rc
));

341 
	}
}

344 
	$MQTTAsync_checkC⁄n
(
MQTTAsync_comm™d
* 
comm™d
, 
MQTTAsyncs
* 
˛õ¡
)

346 
rc
;

348 
FUNC_ENTRY
;

349 
rc
 = 
comm™d
->
dëaûs
.
c⁄n
.
cuºítURI
 < comm™d->dëaûs.c⁄n.
£rvîURIcou¡
 ||

350 (
comm™d
->
dëaûs
.
c⁄n
.
MQTTVîsi⁄
 =4 && 
˛õ¡
->
c
->MQTTVîsi⁄ =
MQTTVERSION_DEFAULT
);

351 
	`FUNC_EXIT_RC
(
rc
);

352  
rc
;

353 
	}
}

356 
	$MQTTAsync_¸óã
(
MQTTAsync
* 
h™dÀ
, c⁄° * 
£rvîURI
, c⁄° * 
˛õ¡Id
,

357 
≥rsi°í˚_ty≥
, * 
≥rsi°í˚_c⁄ãxt
)

359 
rc
 = 0;

360 
MQTTAsyncs
 *
m
 = 
NULL
;

362 
FUNC_ENTRY
;

363 
	`MQTTAsync_lock_muãx
(
mqâasync_muãx
);

365 i‡(
£rvîURI
 =
NULL
 || 
˛õ¡Id
 == NULL)

367 
rc
 = 
MQTTASYNC_NULL_PARAMETER
;

368 
exô
;

371 i‡(!
	`UTF8_vÆid©eSåög
(
˛õ¡Id
))

373 
rc
 = 
MQTTASYNC_BAD_UTF8_STRING
;

374 
exô
;

377 i‡(!
öôülized
)

379 #i‡
	`deföed
(
HEAP_H
)

380 
	`Hóp_öôülize
();

382 
	`Log_öôülize
((
Log_«meVÆue
*)
	`MQTTAsync_gëVîsi⁄Info
());

383 
b°©e
->
˛õ¡s
 = 
	`Li°Inôülize
();

384 
	`Sockë_outInôülize
();

385 
	`Sockë_£tWrôeCom∂ëeCÆlback
(
MQTTAsync_wrôeCom∂ëe
);

386 
h™dÀs
 = 
	`Li°Inôülize
();

387 
comm™ds
 = 
	`Li°Inôülize
();

388 #i‡
	`deföed
(
OPENSSL
)

389 
	`SSLSockë_öôülize
();

391 
öôülized
 = 1;

393 
m
 = 
	`mÆloc
((
MQTTAsyncs
));

394 *
h™dÀ
 = 
m
;

395 
	`mem£t
(
m
, '\0', (
MQTTAsyncs
));

396 i‡(
	`°∫cmp
(
URI_TCP
, 
£rvîURI
, 
	`°æí
(URI_TCP)) == 0)

397 
£rvîURI
 +
	`°æí
(
URI_TCP
);

398 #i‡
	`deföed
(
OPENSSL
)

399 i‡(
	`°∫cmp
(
URI_SSL
, 
£rvîURI
, 
	`°æí
(URI_SSL)) == 0)

401 
£rvîURI
 +
	`°æí
(
URI_SSL
);

402 
m
->
s¶
 = 1;

405 
m
->
£rvîURI
 = 
	`MQTTSådup
(serverURI);

406 
m
->
ª•⁄£s
 = 
	`Li°Inôülize
();

407 
	`Li°Aµíd
(
h™dÀs
, 
m
, (
MQTTAsyncs
));

409 
m
->
c
 = 
	`mÆloc
((
Clõ¡s
));

410 
	`mem£t
(
m
->
c
, '\0', (
Clõ¡s
));

411 
m
->
c
->
c⁄ãxt
 = m;

412 
m
->
c
->
outboundMsgs
 = 
	`Li°Inôülize
();

413 
m
->
c
->
öboundMsgs
 = 
	`Li°Inôülize
();

414 
m
->
c
->
mesßgeQueue
 = 
	`Li°Inôülize
();

415 
m
->
c
->
˛õ¡ID
 = 
	`MQTTSådup
(
˛õ¡Id
);

417 #i‡!
	`deföed
(
NO_PERSISTENCE
)

418 
rc
 = 
	`MQTTPîsi°í˚_¸óã
(&(
m
->
c
->
≥rsi°í˚
), 
≥rsi°í˚_ty≥
, 
≥rsi°í˚_c⁄ãxt
);

419 i‡(
rc
 == 0)

421 
rc
 = 
	`MQTTPîsi°í˚_öôülize
(
m
->
c
, m->
£rvîURI
);

422 i‡(
rc
 == 0)

424 
	`MQTTAsync_ª°‹eComm™ds
(
m
);

425 
	`MQTTPîsi°í˚_ª°‹eMesßgeQueue
(
m
->
c
);

429 
	`Li°Aµíd
(
b°©e
->
˛õ¡s
, 
m
->
c
, (
Clõ¡s
Ë+ 3*(
Li°
));

431 
exô
:

432 
	`MQTTAsync_u∆ock_muãx
(
mqâasync_muãx
);

433 
	`FUNC_EXIT_RC
(
rc
);

434  
rc
;

435 
	}
}

438 
	$MQTTAsync_ãrmö©e
()

440 
FUNC_ENTRY
;

441 
	`MQTTAsync_°›
();

442 i‡(
öôülized
)

444 
Li°EÀmít
* 
ñem
 = 
NULL
;

445 
	`Li°Fªe
(
b°©e
->
˛õ¡s
);

446 
	`Li°Fªe
(
h™dÀs
);

447 
	`Li°NextEÀmít
(
comm™ds
, &
ñem
))

448 
	`MQTTAsync_‰ìComm™d1
((
MQTTAsync_queuedComm™d
*)(
ñem
->
c⁄ã¡
));

449 
	`Li°Fªe
(
comm™ds
);

450 
h™dÀs
 = 
NULL
;

451 
	`Sockë_outTîmö©e
();

452 #i‡
	`deföed
(
OPENSSL
)

453 
	`SSLSockë_ãrmö©e
();

455 #i‡
	`deföed
(
HEAP_H
)

456 
	`Hóp_ãrmö©e
();

458 
	`Log_ãrmö©e
();

459 
öôülized
 = 0;

461 
FUNC_EXIT
;

462 
	}
}

465 #i‡!
deföed
(
NO_PERSISTENCE
)

466 
	$MQTTAsync_u≈îsi°Comm™d
(
MQTTAsync_queuedComm™d
* 
qcmd
)

468 
rc
 = 0;

469 
key
[
PERSISTENCE_MAX_KEY_LENGTH
 + 1];

471 
FUNC_ENTRY
;

472 
	`•rötf
(
key
, "%s%d", 
PERSISTENCE_COMMAND_KEY
, 
qcmd
->
£qno
);

473 i‡((
rc
 = 
qcmd
->
˛õ¡
->
c
->
≥rsi°í˚
->
	`¥emove
(qcmd->˛õ¡->c->
ph™dÀ
, 
key
)) != 0)

474 
	`Log
(
LOG_ERROR
, 0, "Eº‹ %dÑemovög comm™d fromÖîsi°í˚", 
rc
);

475 
	`FUNC_EXIT_RC
(
rc
);

476  
rc
;

477 
	}
}

480 
	$MQTTAsync_≥rsi°Comm™d
(
MQTTAsync_queuedComm™d
* 
qcmd
)

482 
rc
 = 0;

483 
MQTTAsyncs
* 
a˛õ¡
 = 
qcmd
->
˛õ¡
;

484 
MQTTAsync_comm™d
* 
comm™d
 = &
qcmd
->command;

485 * 
Àns
 = 
NULL
;

486 ** 
bufs
 = 
NULL
;

487 
bufödex
 = 0, 
i
, 
nbufs
 = 0;

488 
key
[
PERSISTENCE_MAX_KEY_LENGTH
 + 1];

490 
FUNC_ENTRY
;

491 
comm™d
->
ty≥
)

493 
SUBSCRIBE
:

494 
nbufs
 = 3 + (
comm™d
->
dëaûs
.
sub
.
cou¡
 * 2);

496 
Àns
 = (*)
	`mÆloc
(
nbufs
 * ());

497 
bufs
 = 
	`mÆloc
(
nbufs
 * (*));

499 
bufs
[
bufödex
] = &
comm™d
->
ty≥
;

500 
Àns
[
bufödex
++] = (
comm™d
->
ty≥
);

502 
bufs
[
bufödex
] = &
comm™d
->
tokí
;

503 
Àns
[
bufödex
++] = (
comm™d
->
tokí
);

505 
bufs
[
bufödex
] = &
comm™d
->
dëaûs
.
sub
.
cou¡
;

506 
Àns
[
bufödex
++] = (
comm™d
->
dëaûs
.
sub
.
cou¡
);

508 
i
 = 0; i < 
comm™d
->
dëaûs
.
sub
.
cou¡
; ++i)

510 
bufs
[
bufödex
] = 
comm™d
->
dëaûs
.
sub
.
t›ics
[
i
];

511 
Àns
[
bufödex
++] = 
	`°æí
(
comm™d
->
dëaûs
.
sub
.
t›ics
[
i
]) + 1;

512 
bufs
[
bufödex
] = &
comm™d
->
dëaûs
.
sub
.
qoss
[
i
];

513 
Àns
[
bufödex
++] = (
comm™d
->
dëaûs
.
sub
.
qoss
[
i
]);

515 
	`•rötf
(
key
, "%s%d", 
PERSISTENCE_COMMAND_KEY
, ++
a˛õ¡
->
comm™d_£qno
);

518 
UNSUBSCRIBE
:

519 
nbufs
 = 3 + 
comm™d
->
dëaûs
.
unsub
.
cou¡
;

521 
Àns
 = (*)
	`mÆloc
(
nbufs
 * ());

522 
bufs
 = 
	`mÆloc
(
nbufs
 * (*));

524 
bufs
[
bufödex
] = &
comm™d
->
ty≥
;

525 
Àns
[
bufödex
++] = (
comm™d
->
ty≥
);

527 
bufs
[
bufödex
] = &
comm™d
->
tokí
;

528 
Àns
[
bufödex
++] = (
comm™d
->
tokí
);

530 
bufs
[
bufödex
] = &
comm™d
->
dëaûs
.
unsub
.
cou¡
;

531 
Àns
[
bufödex
++] = (
comm™d
->
dëaûs
.
unsub
.
cou¡
);

533 
i
 = 0; i < 
comm™d
->
dëaûs
.
unsub
.
cou¡
; ++i)

535 
bufs
[
bufödex
] = 
comm™d
->
dëaûs
.
unsub
.
t›ics
[
i
];

536 
Àns
[
bufödex
++] = 
	`°æí
(
comm™d
->
dëaûs
.
unsub
.
t›ics
[
i
]) + 1;

538 
	`•rötf
(
key
, "%s%d", 
PERSISTENCE_COMMAND_KEY
, ++
a˛õ¡
->
comm™d_£qno
);

541 
PUBLISH
:

542 
nbufs
 = 7;

544 
Àns
 = (*)
	`mÆloc
(
nbufs
 * ());

545 
bufs
 = 
	`mÆloc
(
nbufs
 * (*));

547 
bufs
[
bufödex
] = &
comm™d
->
ty≥
;

548 
Àns
[
bufödex
++] = (
comm™d
->
ty≥
);

550 
bufs
[
bufödex
] = &
comm™d
->
tokí
;

551 
Àns
[
bufödex
++] = (
comm™d
->
tokí
);

553 
bufs
[
bufödex
] = 
comm™d
->
dëaûs
.
pub
.
de°ö©i⁄Name
;

554 
Àns
[
bufödex
++] = 
	`°æí
(
comm™d
->
dëaûs
.
pub
.
de°ö©i⁄Name
) + 1;

556 
bufs
[
bufödex
] = &
comm™d
->
dëaûs
.
pub
.
∑ylﬂdÀn
;

557 
Àns
[
bufödex
++] = (
comm™d
->
dëaûs
.
pub
.
∑ylﬂdÀn
);

559 
bufs
[
bufödex
] = 
comm™d
->
dëaûs
.
pub
.
∑ylﬂd
;

560 
Àns
[
bufödex
++] = 
comm™d
->
dëaûs
.
pub
.
∑ylﬂdÀn
;

562 
bufs
[
bufödex
] = &
comm™d
->
dëaûs
.
pub
.
qos
;

563 
Àns
[
bufödex
++] = (
comm™d
->
dëaûs
.
pub
.
qos
);

565 
bufs
[
bufödex
] = &
comm™d
->
dëaûs
.
pub
.
ªèöed
;

566 
Àns
[
bufödex
++] = (
comm™d
->
dëaûs
.
pub
.
ªèöed
);

568 
	`•rötf
(
key
, "%s%d", 
PERSISTENCE_COMMAND_KEY
, ++
a˛õ¡
->
comm™d_£qno
);

571 i‡(
nbufs
 > 0)

573 i‡((
rc
 = 
a˛õ¡
->
c
->
≥rsi°í˚
->
	`µut
◊˛õ¡->c->
ph™dÀ
, 
key
, 
nbufs
, (**)
bufs
, 
Àns
)) != 0)

574 
	`Log
(
LOG_ERROR
, 0, "Eº‹Öîsi°ög comm™d,Ñ¯%d", 
rc
);

575 
qcmd
->
£qno
 = 
a˛õ¡
->
comm™d_£qno
;

577 i‡(
Àns
)

578 
	`‰ì
(
Àns
);

579 i‡(
bufs
)

580 
	`‰ì
(
bufs
);

581 
	`FUNC_EXIT_RC
(
rc
);

582  
rc
;

583 
	}
}

586 
MQTTAsync_queuedComm™d
* 
	$MQTTAsync_ª°‹eComm™d
(* 
buf„r
, 
buÊí
)

588 
MQTTAsync_comm™d
* 
comm™d
 = 
NULL
;

589 
MQTTAsync_queuedComm™d
* 
qcomm™d
 = 
NULL
;

590 * 
±r
 = 
buf„r
;

591 
i
, 
d©a_size
;

593 
FUNC_ENTRY
;

594 
qcomm™d
 = 
	`mÆloc
((
MQTTAsync_queuedComm™d
));

595 
	`mem£t
(
qcomm™d
, '\0', (
MQTTAsync_queuedComm™d
));

596 
comm™d
 = &
qcomm™d
->command;

598 
comm™d
->
ty≥
 = *(*)
±r
;

599 
±r
 += ();

601 
comm™d
->
tokí
 = *(
MQTTAsync_tokí
*)
±r
;

602 
±r
 +(
MQTTAsync_tokí
);

604 
comm™d
->
ty≥
)

606 
SUBSCRIBE
:

607 
comm™d
->
dëaûs
.
sub
.
cou¡
 = *(*)
±r
;

608 
±r
 += ();

610 
i
 = 0; i < 
comm™d
->
dëaûs
.
sub
.
cou¡
; ++i)

612 
d©a_size
 = 
	`°æí
(
±r
) + 1;

614 
comm™d
->
dëaûs
.
sub
.
t›ics
[
i
] = 
	`mÆloc
(
d©a_size
);

615 
	`°r˝y
(
comm™d
->
dëaûs
.
sub
.
t›ics
[
i
], 
±r
);

616 
±r
 +
d©a_size
;

618 
comm™d
->
dëaûs
.
sub
.
qoss
[
i
] = *(*)
±r
;

619 
±r
 += ();

623 
UNSUBSCRIBE
:

624 
comm™d
->
dëaûs
.
sub
.
cou¡
 = *(*)
±r
;

625 
±r
 += ();

627 
i
 = 0; i < 
comm™d
->
dëaûs
.
unsub
.
cou¡
; ++i)

629 
d©a_size
 = 
	`°æí
(
±r
) + 1;

631 
comm™d
->
dëaûs
.
unsub
.
t›ics
[
i
] = 
	`mÆloc
(
d©a_size
);

632 
	`°r˝y
(
comm™d
->
dëaûs
.
unsub
.
t›ics
[
i
], 
±r
);

633 
±r
 +
d©a_size
;

637 
PUBLISH
:

638 
d©a_size
 = 
	`°æí
(
±r
) + 1;

639 
comm™d
->
dëaûs
.
pub
.
de°ö©i⁄Name
 = 
	`mÆloc
(
d©a_size
);

640 
	`°r˝y
(
comm™d
->
dëaûs
.
pub
.
de°ö©i⁄Name
, 
±r
);

641 
±r
 +
d©a_size
;

643 
comm™d
->
dëaûs
.
pub
.
∑ylﬂdÀn
 = *(*)
±r
;

644 
±r
 += ();

646 
d©a_size
 = 
comm™d
->
dëaûs
.
pub
.
∑ylﬂdÀn
;

647 
comm™d
->
dëaûs
.
pub
.
∑ylﬂd
 = 
	`mÆloc
(
d©a_size
);

648 
	`mem˝y
(
comm™d
->
dëaûs
.
pub
.
∑ylﬂd
, 
±r
, 
d©a_size
);

649 
±r
 +
d©a_size
;

651 
comm™d
->
dëaûs
.
pub
.
qos
 = *(*)
±r
;

652 
±r
 += ();

654 
comm™d
->
dëaûs
.
pub
.
ªèöed
 = *(*)
±r
;

655 
±r
 += ();

659 
	`‰ì
(
qcomm™d
);

660 
qcomm™d
 = 
NULL
;

664 
FUNC_EXIT
;

665  
qcomm™d
;

666 
	}
}

669 
	$MQTTAsync_ö£πInOrdî
(
Li°
* 
li°
, * 
c⁄ã¡
, 
size
)

671 
Li°EÀmít
* 
ödex
 = 
NULL
;

672 
Li°EÀmít
* 
cuºít
 = 
NULL
;

674 
FUNC_ENTRY
;

675 
	`Li°NextEÀmít
(
li°
, &
cuºít
Ë!
NULL
 && 
ödex
 == NULL)

677 i‡(((
MQTTAsync_queuedComm™d
*)
c⁄ã¡
)->
£qno
 < ((MQTTAsync_queuedComm™d*)
cuºít
->content)->seqno)

678 
ödex
 = 
cuºít
;

681 
	`Li°In£π
(
li°
, 
c⁄ã¡
, 
size
, 
ödex
);

682 
FUNC_EXIT
;

683 
	}
}

686 
	$MQTTAsync_ª°‹eComm™ds
(
MQTTAsyncs
* 
˛õ¡
)

688 
rc
 = 0;

689 **
msgkeys
;

690 
nkeys
;

691 
i
 = 0;

692 
Clõ¡s
* 
c
 = 
˛õ¡
->c;

693 
comm™ds_ª°‹ed
 = 0;

695 
FUNC_ENTRY
;

696 i‡(
c
->
≥rsi°í˚
 && (
rc
 = c->≥rsi°í˚->
	`pkeys
(c->
ph™dÀ
, &
msgkeys
, &
nkeys
)) == 0)

698 
rc
 =0 && 
i
 < 
nkeys
)

700 *
buf„r
 = 
NULL
;

701 
buÊí
;

703 i‡(
	`°∫cmp
(
msgkeys
[
i
], 
PERSISTENCE_COMMAND_KEY
, 
	`°æí
(PERSISTENCE_COMMAND_KEY)) != 0)

705 i‡((
rc
 = 
c
->
≥rsi°í˚
->
	`pgë
(c->
ph™dÀ
, 
msgkeys
[
i
], &
buf„r
, &
buÊí
)) == 0)

707 
MQTTAsync_queuedComm™d
* 
cmd
 = 
	`MQTTAsync_ª°‹eComm™d
(
buf„r
, 
buÊí
);

709 i‡(
cmd
)

711 
cmd
->
˛õ¡
 = client;

712 
cmd
->
£qno
 = 
	`©oi
(
msgkeys
[
i
]+2);

713 
	`MQTTPîsi°í˚_ö£πInOrdî
(
comm™ds
, 
cmd
, (
MQTTAsync_queuedComm™d
));

714 
	`‰ì
(
buf„r
);

715 
˛õ¡
->
comm™d_£qno
 = 
	`max
(˛õ¡->comm™d_£qno, 
cmd
->
£qno
);

716 
comm™ds_ª°‹ed
++;

719 i‡(
msgkeys
[
i
])

720 
	`‰ì
(
msgkeys
[
i
]);

721 
i
++;

723 i‡(
msgkeys
 !
NULL
)

724 
	`‰ì
(
msgkeys
);

726 
	`Log
(
TRACE_MINIMUM
, -1, "%d comm™d†ª°‹ed f‹ clõ¡ %s", 
comm™ds_ª°‹ed
, 
c
->
˛õ¡ID
);

727 
	`FUNC_EXIT_RC
(
rc
);

728  
rc
;

729 
	}
}

733 
	$MQTTAsync_addComm™d
(
MQTTAsync_queuedComm™d
* 
comm™d
, 
comm™d_size
)

735 
rc
 = 0;

737 
FUNC_ENTRY
;

738 
	`MQTTAsync_lock_muãx
(
mqâcomm™d_muãx
);

739 
comm™d
->comm™d.
°¨t_time
 = 
	`MQTTAsync_°¨t_˛ock
();

740 i‡(
comm™d
->comm™d.
ty≥
 =
CONNECT
 ||

741 (
comm™d
->comm™d.
ty≥
 =
DISCONNECT
 && comm™d->comm™d.
dëaûs
.
dis
.
öã∫Æ
))

743 
MQTTAsync_queuedComm™d
* 
hód
 = 
NULL
;

745 i‡(
comm™ds
->
fú°
)

746 
hód
 = (
MQTTAsync_queuedComm™d
*)(
comm™ds
->
fú°
->
c⁄ã¡
);

748 i‡(
hód
 !
NULL
 && hód->
˛õ¡
 =
comm™d
->˛õ¡ && hód->comm™d.
ty≥
 == command->command.type)

749 
	`MQTTAsync_‰ìComm™d
(
comm™d
);

751 
	`Li°In£π
(
comm™ds
, 
comm™d
, 
comm™d_size
, comm™ds->
fú°
);

755 
	`Li°Aµíd
(
comm™ds
, 
comm™d
, 
comm™d_size
);

756 #i‡!
	`deföed
(
NO_PERSISTENCE
)

757 i‡(
comm™d
->
˛õ¡
->
c
->
≥rsi°í˚
)

758 
	`MQTTAsync_≥rsi°Comm™d
(
comm™d
);

761 
	`MQTTAsync_u∆ock_muãx
(
mqâcomm™d_muãx
);

762 #i‡!
	`deföed
(
WIN32
Ë&& !deföed(
WIN64
)

763 
	`Thªad_sig«l_c⁄d
(
£nd_c⁄d
);

765 i‡(!
	`Thªad_check_£m
(
£nd_£m
))

766 
	`Thªad_po°_£m
(
£nd_£m
);

768 
	`FUNC_EXIT_RC
(
rc
);

769  
rc
;

770 
	}
}

773 
	$MQTTAsync_checkDisc⁄√˘
(
MQTTAsync
 
h™dÀ
, 
MQTTAsync_comm™d
* 
comm™d
)

775 
MQTTAsyncs
* 
m
 = 
h™dÀ
;

777 
FUNC_ENTRY
;

779 i‡(
m
->
c
->
outboundMsgs
->
cou¡
 =0 || 
	`MQTTAsync_ñ≠£d
(
comm™d
->
°¨t_time
Ë>comm™d->
dëaûs
.
dis
.
timeout
)

781 
was_c⁄√˘ed
 = 
m
->
c
->
c⁄√˘ed
;

782 
	`MQTTAsync_˛o£Sessi⁄
(
m
->
c
);

783 i‡(
comm™d
->
dëaûs
.
dis
.
öã∫Æ
 && 
m
->
˛
 && 
was_c⁄√˘ed
)

785 
	`Log
(
TRACE_MIN
, -1, "CÆlög c⁄√˘i⁄Lo° f‹ clõ¡ %s", 
m
->
c
->
˛õ¡ID
);

786 (*(
m
->
˛
))(m->
c⁄ãxt
, 
NULL
);

788 i‡(!
comm™d
->
dëaûs
.
dis
.
öã∫Æ
 && comm™d->
⁄Suc˚ss
)

790 
	`Log
(
TRACE_MIN
, -1, "CÆlög disc⁄√˘ com∂ëêf‹ clõ¡ %s", 
m
->
c
->
˛õ¡ID
);

791 (*(
comm™d
->
⁄Suc˚ss
))(comm™d->
c⁄ãxt
, 
NULL
);

794 
FUNC_EXIT
;

795 
	}
}

803 
	$MQTTPrŸocﬁ_checkPídögWrôes
()

805 
FUNC_ENTRY
;

806 i‡(
°©e
.
≥ndög_wrôes
.
cou¡
 > 0)

808 
Li°EÀmít
* 
À
 = 
°©e
.
≥ndög_wrôes
.
fú°
;

809 
À
)

811 i‡(
	`Sockë_noPídögWrôes
(((
≥ndög_wrôe
*)(
À
->
c⁄ã¡
))->
sockë
))

813 
	`MQTTPrŸocﬁ_ªmovePubliˇti⁄
(((
≥ndög_wrôe
*)(
À
->
c⁄ã¡
))->
p
);

814 
°©e
.
≥ndög_wrôes
.
cuºít
 = 
À
;

815 
	`Li°Remove
(&(
°©e
.
≥ndög_wrôes
), 
À
->
c⁄ã¡
);

816 
À
 = 
°©e
.
≥ndög_wrôes
.
cuºít
;

819 
	`Li°NextEÀmít
(&(
°©e
.
≥ndög_wrôes
), &
À
);

822 
FUNC_EXIT
;

823 
	}
}

826 
	$MQTTAsync_‰ìC⁄√˘
(
MQTTAsync_comm™d
 
comm™d
)

828 i‡(
comm™d
.
ty≥
 =
CONNECT
)

830 
i
;

832 
i
 = 0; i < 
comm™d
.
dëaûs
.
c⁄n
.
£rvîURIcou¡
; ++i)

833 
	`‰ì
(
comm™d
.
dëaûs
.
c⁄n
.
£rvîURIs
[
i
]);

834 i‡(
comm™d
.
dëaûs
.
c⁄n
.
£rvîURIs
)

835 
	`‰ì
(
comm™d
.
dëaûs
.
c⁄n
.
£rvîURIs
);

837 
	}
}

840 
	$MQTTAsync_‰ìComm™d1
(
MQTTAsync_queuedComm™d
 *
comm™d
)

842 i‡(
comm™d
->comm™d.
ty≥
 =
SUBSCRIBE
)

844 
i
;

846 
i
 = 0; i < 
comm™d
->comm™d.
dëaûs
.
sub
.
cou¡
; i++)

847 
	`‰ì
(
comm™d
->comm™d.
dëaûs
.
sub
.
t›ics
[
i
]);

849 
	`‰ì
(
comm™d
->comm™d.
dëaûs
.
sub
.
t›ics
);

850 
	`‰ì
(
comm™d
->comm™d.
dëaûs
.
sub
.
qoss
);

852 i‡(
comm™d
->comm™d.
ty≥
 =
UNSUBSCRIBE
)

854 
i
;

856 
i
 = 0; i < 
comm™d
->comm™d.
dëaûs
.
unsub
.
cou¡
; i++)

857 
	`‰ì
(
comm™d
->comm™d.
dëaûs
.
unsub
.
t›ics
[
i
]);

859 
	`‰ì
(
comm™d
->comm™d.
dëaûs
.
unsub
.
t›ics
);

861 i‡(
comm™d
->comm™d.
ty≥
 =
PUBLISH
)

864 i‡(
comm™d
->comm™d.
dëaûs
.
pub
.
de°ö©i⁄Name
)

865 
	`‰ì
(
comm™d
->comm™d.
dëaûs
.
pub
.
de°ö©i⁄Name
);

866 
	`‰ì
(
comm™d
->comm™d.
dëaûs
.
pub
.
∑ylﬂd
);

868 
	}
}

870 
	$MQTTAsync_‰ìComm™d
(
MQTTAsync_queuedComm™d
 *
comm™d
)

872 
	`MQTTAsync_‰ìComm™d1
(
comm™d
);

873 
	`‰ì
(
comm™d
);

874 
	}
}

877 
	$MQTTAsync_wrôeCom∂ëe
(
sockë
)

879 
Li°EÀmít
* 
found
 = 
NULL
;

881 
FUNC_ENTRY
;

884 
	`MQTTPrŸocﬁ_checkPídögWrôes
();

887 i‡((
found
 = 
	`Li°FödIãm
(
h™dÀs
, &
sockë
, 
˛õ¡SockCom∑ª
)Ë!
NULL
)

889 
MQTTAsyncs
* 
m
 = (MQTTAsyncs*)(
found
->
c⁄ã¡
);

891 
	`time
(&(
m
->
c
->
√t
.
œ°Sít
));

894 i‡(
m
->
≥ndög_wrôe
)

896 
Li°EÀmít
* 
cur_ª•⁄£
 = 
NULL
;

897 
MQTTAsync_comm™d
* 
comm™d
 = 
m
->
≥ndög_wrôe
;

898 
MQTTAsync_queuedComm™d
* 
com
 = 
NULL
;

900 
	`Li°NextEÀmít
(
m
->
ª•⁄£s
, &
cur_ª•⁄£
))

902 
com
 = (
MQTTAsync_queuedComm™d
*)(
cur_ª•⁄£
->
c⁄ã¡
);

903 i‡(
com
->
˛õ¡
->
≥ndög_wrôe
 =
m
->pending_write)

907 i‡(
cur_ª•⁄£
 && 
comm™d
->
⁄Suc˚ss
)

909 
MQTTAsync_suc˚ssD©a
 
d©a
;

911 
d©a
.
tokí
 = 
comm™d
->token;

912 
d©a
.
Æt
.
pub
.
de°ö©i⁄Name
 = 
comm™d
->
dëaûs
.pub.destinationName;

913 
d©a
.
Æt
.
pub
.
mesßge
.
∑ylﬂd
 = 
comm™d
->
dëaûs
.pub.payload;

914 
d©a
.
Æt
.
pub
.
mesßge
.
∑ylﬂdÀn
 = 
comm™d
->
dëaûs
.pub.payloadlen;

915 
d©a
.
Æt
.
pub
.
mesßge
.
qos
 = 
comm™d
->
dëaûs
.pub.qos;

916 
d©a
.
Æt
.
pub
.
mesßge
.
ªèöed
 = 
comm™d
->
dëaûs
.pub.retained;

917 
	`Log
(
TRACE_MIN
, -1, "CÆlögÖublish suc˚s†f‹ clõ¡ %s", 
m
->
c
->
˛õ¡ID
);

918 (*(
comm™d
->
⁄Suc˚ss
))(comm™d->
c⁄ãxt
, &
d©a
);

920 
m
->
≥ndög_wrôe
 = 
NULL
;

922 
	`Li°Dëach
(
m
->
ª•⁄£s
, 
com
);

923 
	`MQTTAsync_‰ìComm™d
(
com
);

926 
FUNC_EXIT
;

927 
	}
}

930 
	$MQTTAsync_¥o˚ssComm™d
()

932 
rc
 = 0;

933 
MQTTAsync_queuedComm™d
* 
comm™d
 = 
NULL
;

934 
Li°EÀmít
* 
cur_comm™d
 = 
NULL
;

935 
Li°
* 
ign‹ed_˛õ¡s
 = 
NULL
;

937 
FUNC_ENTRY
;

938 
	`MQTTAsync_lock_muãx
(
mqâasync_muãx
);

939 
	`MQTTAsync_lock_muãx
(
mqâcomm™d_muãx
);

945 
ign‹ed_˛õ¡s
 = 
	`Li°Inôülize
();

948 
	`Li°NextEÀmít
(
comm™ds
, &
cur_comm™d
))

950 
MQTTAsync_queuedComm™d
* 
cmd
 = (MQTTAsync_queuedComm™d*)(
cur_comm™d
->
c⁄ã¡
);

952 i‡(
	`Li°Föd
(
ign‹ed_˛õ¡s
, 
cmd
->
˛õ¡
))

955 i‡(
cmd
->
comm™d
.
ty≥
 =
CONNECT
 || cmd->comm™d.ty≥ =
DISCONNECT
 || (cmd->
˛õ¡
->
c
->
c⁄√˘ed
 &&

956 
cmd
->
˛õ¡
->
c
->
c⁄√˘_°©e
 =0 && 
	`Sockë_noPídögWrôes
(cmd->˛õ¡->c->
√t
.
sockë
)))

958 i‡((
cmd
->
comm™d
.
ty≥
 =
PUBLISH
 || cmd->comm™d.ty≥ =
SUBSCRIBE
 || cmd->comm™d.ty≥ =
UNSUBSCRIBE
) &&

959 
cmd
->
˛õ¡
->
c
->
outboundMsgs
->
cou¡
 >
MAX_MSG_ID
 - 1)

963 
comm™d
 = 
cmd
;

967 
	`Li°Aµíd
(
ign‹ed_˛õ¡s
, 
cmd
->
˛õ¡
, (cmd->client));

969 
	`Li°FªeNoC⁄ã¡
(
ign‹ed_˛õ¡s
);

970 i‡(
comm™d
)

972 
	`Li°Dëach
(
comm™ds
, 
comm™d
);

973 #i‡!
	`deföed
(
NO_PERSISTENCE
)

974 i‡(
comm™d
->
˛õ¡
->
c
->
≥rsi°í˚
)

975 
	`MQTTAsync_u≈îsi°Comm™d
(
comm™d
);

978 
	`MQTTAsync_u∆ock_muãx
(
mqâcomm™d_muãx
);

980 i‡(!
comm™d
)

981 
exô
;

983 i‡(
comm™d
->comm™d.
ty≥
 =
CONNECT
)

985 i‡(
comm™d
->
˛õ¡
->
c
->
c⁄√˘_°©e
 !0 || comm™d->˛õ¡->c->
c⁄√˘ed
)

986 
rc
 = 0;

989 * 
£rvîURI
 = 
comm™d
->
˛õ¡
->serverURI;

991 i‡(
comm™d
->comm™d.
dëaûs
.
c⁄n
.
£rvîURIcou¡
 > 0)

993 i‡(
comm™d
->
˛õ¡
->
c
->
MQTTVîsi⁄
 =
MQTTVERSION_DEFAULT
)

995 i‡(
comm™d
->comm™d.
dëaûs
.
c⁄n
.
MQTTVîsi⁄
 == 3)

997 
comm™d
->comm™d.
dëaûs
.
c⁄n
.
cuºítURI
++;

998 
comm™d
->comm™d.
dëaûs
.
c⁄n
.
MQTTVîsi⁄
 = 4;

1002 
comm™d
->comm™d.
dëaûs
.
c⁄n
.
cuºítURI
++;

1003 
£rvîURI
 = 
comm™d
->comm™d.
dëaûs
.
c⁄n
.
£rvîURIs
[comm™d->comm™d.dëaûs.c⁄n.
cuºítURI
];

1005 i‡(
	`°∫cmp
(
URI_TCP
, 
£rvîURI
, 
	`°æí
(URI_TCP)) == 0)

1006 
£rvîURI
 +
	`°æí
(
URI_TCP
);

1007 #i‡
	`deföed
(
OPENSSL
)

1008 i‡(
	`°∫cmp
(
URI_SSL
, 
£rvîURI
, 
	`°æí
(URI_SSL)) == 0)

1010 
£rvîURI
 +
	`°æí
(
URI_SSL
);

1011 
comm™d
->
˛õ¡
->
s¶
 = 1;

1016 i‡(
comm™d
->
˛õ¡
->
c
->
MQTTVîsi⁄
 =
MQTTVERSION_DEFAULT
)

1018 i‡(
comm™d
->comm™d.
dëaûs
.
c⁄n
.
MQTTVîsi⁄
 == 0)

1019 
comm™d
->comm™d.
dëaûs
.
c⁄n
.
MQTTVîsi⁄
 = 
MQTTVERSION_3_1_1
;

1020 i‡(
comm™d
->comm™d.
dëaûs
.
c⁄n
.
MQTTVîsi⁄
 =
MQTTVERSION_3_1_1
)

1021 
comm™d
->comm™d.
dëaûs
.
c⁄n
.
MQTTVîsi⁄
 = 
MQTTVERSION_3_1
;

1024 
comm™d
->comm™d.
dëaûs
.
c⁄n
.
MQTTVîsi⁄
 = comm™d->
˛õ¡
->
c
->MQTTVersion;

1026 
	`Log
(
TRACE_MIN
, -1, "C⁄√˘ögÅÿ£rvîURI %†wôh MQTT vîsi⁄ %d", 
£rvîURI
, 
comm™d
->comm™d.
dëaûs
.
c⁄n
.
MQTTVîsi⁄
);

1027 #i‡
	`deföed
(
OPENSSL
)

1028 
rc
 = 
	`MQTTPrŸocﬁ_c⁄√˘
(
£rvîURI
, 
comm™d
->
˛õ¡
->
c
, comm™d->˛õ¡->
s¶
, comm™d->comm™d.
dëaûs
.
c⁄n
.
MQTTVîsi⁄
);

1030 
rc
 = 
	`MQTTPrŸocﬁ_c⁄√˘
(
£rvîURI
, 
comm™d
->
˛õ¡
->
c
, comm™d->comm™d.
dëaûs
.
c⁄n
.
MQTTVîsi⁄
);

1032 i‡(
comm™d
->
˛õ¡
->
c
->
c⁄√˘_°©e
 == 0)

1033 
rc
 = 
SOCKET_ERROR
;

1039 i‡(
rc
 =
EINPROGRESS
)

1040 
	`Sockë_addPídögWrôe
(
comm™d
->
˛õ¡
->
c
->
√t
.
sockë
);

1043 i‡(
comm™d
->comm™d.
ty≥
 =
SUBSCRIBE
)

1045 
Li°
* 
t›ics
 = 
	`Li°Inôülize
();

1046 
Li°
* 
qoss
 = 
	`Li°Inôülize
();

1047 
i
;

1049 
i
 = 0; i < 
comm™d
->comm™d.
dëaûs
.
sub
.
cou¡
; i++)

1051 
	`Li°Aµíd
(
t›ics
, 
comm™d
->comm™d.
dëaûs
.
sub
.t›ics[
i
], 
	`°æí
(command->command.details.sub.topics[i]));

1052 
	`Li°Aµíd
(
qoss
, &
comm™d
->comm™d.
dëaûs
.
sub
.qoss[
i
], ());

1054 
rc
 = 
	`MQTTPrŸocﬁ_subs¸ibe
(
comm™d
->
˛õ¡
->
c
, 
t›ics
, 
qoss
, comm™d->comm™d.
tokí
);

1055 
	`Li°FªeNoC⁄ã¡
(
t›ics
);

1056 
	`Li°FªeNoC⁄ã¡
(
qoss
);

1058 i‡(
comm™d
->comm™d.
ty≥
 =
UNSUBSCRIBE
)

1060 
Li°
* 
t›ics
 = 
	`Li°Inôülize
();

1061 
i
;

1063 
i
 = 0; i < 
comm™d
->comm™d.
dëaûs
.
unsub
.
cou¡
; i++)

1064 
	`Li°Aµíd
(
t›ics
, 
comm™d
->comm™d.
dëaûs
.
unsub
.t›ics[
i
], 
	`°æí
(command->command.details.unsub.topics[i]));

1066 
rc
 = 
	`MQTTPrŸocﬁ_unsubs¸ibe
(
comm™d
->
˛õ¡
->
c
, 
t›ics
, comm™d->comm™d.
tokí
);

1067 
	`Li°FªeNoC⁄ã¡
(
t›ics
);

1069 i‡(
comm™d
->comm™d.
ty≥
 =
PUBLISH
)

1071 
Mesßges
* 
msg
 = 
NULL
;

1072 
Publish
* 
p
 = 
NULL
;

1074 
p
 = 
	`mÆloc
((
Publish
));

1076 
p
->
∑ylﬂd
 = 
comm™d
->comm™d.
dëaûs
.
pub
.payload;

1077 
p
->
∑ylﬂdÀn
 = 
comm™d
->comm™d.
dëaûs
.
pub
.payloadlen;

1078 
p
->
t›ic
 = 
comm™d
->comm™d.
dëaûs
.
pub
.
de°ö©i⁄Name
;

1079 
p
->
msgId
 = 
comm™d
->comm™d.
tokí
;

1081 
rc
 = 
	`MQTTPrŸocﬁ_°¨tPublish
(
comm™d
->
˛õ¡
->
c
, 
p
, comm™d->comm™d.
dëaûs
.
pub
.
qos
, comm™d->comm™d.dëaûs.pub.
ªèöed
, &
msg
);

1083 i‡(
comm™d
->comm™d.
dëaûs
.
pub
.
qos
 == 0)

1085 i‡(
rc
 =
TCPSOCKET_COMPLETE
)

1087 i‡(
comm™d
->comm™d.
⁄Suc˚ss
)

1089 
MQTTAsync_suc˚ssD©a
 
d©a
;

1091 
d©a
.
tokí
 = 
comm™d
->command.token;

1092 
d©a
.
Æt
.
pub
.
de°ö©i⁄Name
 = 
comm™d
->comm™d.
dëaûs
.pub.destinationName;

1093 
d©a
.
Æt
.
pub
.
mesßge
.
∑ylﬂd
 = 
comm™d
->comm™d.
dëaûs
.pub.payload;

1094 
d©a
.
Æt
.
pub
.
mesßge
.
∑ylﬂdÀn
 = 
comm™d
->comm™d.
dëaûs
.pub.payloadlen;

1095 
d©a
.
Æt
.
pub
.
mesßge
.
qos
 = 
comm™d
->comm™d.
dëaûs
.pub.qos;

1096 
d©a
.
Æt
.
pub
.
mesßge
.
ªèöed
 = 
comm™d
->comm™d.
dëaûs
.pub.retained;

1097 
	`Log
(
TRACE_MIN
, -1, "CÆlögÖublish suc˚s†f‹ clõ¡ %s", 
comm™d
->
˛õ¡
->
c
->
˛õ¡ID
);

1098 (*(
comm™d
->comm™d.
⁄Suc˚ss
))(comm™d->comm™d.
c⁄ãxt
, &
d©a
);

1103 
comm™d
->comm™d.
dëaûs
.
pub
.
de°ö©i⁄Name
 = 
NULL
;

1104 
comm™d
->
˛õ¡
->
≥ndög_wrôe
 = &command->command;

1108 
comm™d
->comm™d.
dëaûs
.
pub
.
de°ö©i⁄Name
 = 
NULL
;

1109 
	`‰ì
(
p
);

1111 i‡(
comm™d
->comm™d.
ty≥
 =
DISCONNECT
)

1113 i‡(
comm™d
->
˛õ¡
->
c
->
c⁄√˘_°©e
 !0 || comm™d->˛õ¡->c->
c⁄√˘ed
 != 0)

1115 
comm™d
->
˛õ¡
->
c
->
c⁄√˘_°©e
 = -2;

1116 
	`MQTTAsync_checkDisc⁄√˘
(
comm™d
->
˛õ¡
, &command->command);

1120 i‡(
comm™d
->comm™d.
ty≥
 =
CONNECT
 && 
rc
 !
SOCKET_ERROR
 &&Ñ¯!
MQTTASYNC_PERSISTENCE_ERROR
)

1122 
comm™d
->
˛õ¡
->
c⁄√˘
 = command->command;

1123 
	`MQTTAsync_‰ìComm™d
(
comm™d
);

1125 i‡(
comm™d
->comm™d.
ty≥
 =
DISCONNECT
)

1127 
comm™d
->
˛õ¡
->
disc⁄√˘
 = command->command;

1128 
	`MQTTAsync_‰ìComm™d
(
comm™d
);

1130 i‡(
comm™d
->comm™d.
ty≥
 =
PUBLISH
 && comm™d->comm™d.
dëaûs
.
pub
.
qos
 == 0)

1132 i‡(
rc
 =
TCPSOCKET_INTERRUPTED
)

1133 
	`Li°Aµíd
(
comm™d
->
˛õ¡
->
ª•⁄£s
, command, (command));

1135 
	`MQTTAsync_‰ìComm™d
(
comm™d
);

1137 i‡(
rc
 =
SOCKET_ERROR
 ||Ñ¯=
MQTTASYNC_PERSISTENCE_ERROR
)

1139 i‡(
comm™d
->comm™d.
ty≥
 =
CONNECT
)

1141 
MQTTAsync_disc⁄√˘O±i⁄s
 
›ts
 = 
MQTTAsync_disc⁄√˘O±i⁄s_öôülizî
;

1142 
	`MQTTAsync_disc⁄√˘
(
comm™d
->
˛õ¡
, &
›ts
);

1145 
	`MQTTAsync_disc⁄√˘_öã∫Æ
(
comm™d
->
˛õ¡
, 0);

1147 i‡(
comm™d
->comm™d.
ty≥
 =
CONNECT
 && 
	`MQTTAsync_checkC⁄n
(&comm™d->comm™d, comm™d->
˛õ¡
))

1149 
	`Log
(
TRACE_MIN
, -1, "Connect failed, moreÅoÅry");

1151 
rc
 = 
	`MQTTAsync_addComm™d
(
comm™d
, (comm™d->comm™d.
dëaûs
.
c⁄n
));

1155 i‡(
comm™d
->comm™d.
⁄Faûuª
)

1157 
	`Log
(
TRACE_MIN
, -1, "CÆlög comm™d faûuª f‹ clõ¡ %s", 
comm™d
->
˛õ¡
->
c
->
˛õ¡ID
);

1158 (*(
comm™d
->comm™d.
⁄Faûuª
))(comm™d->comm™d.
c⁄ãxt
, 
NULL
);

1160 
	`MQTTAsync_‰ìC⁄√˘
(
comm™d
->command);

1161 
	`MQTTAsync_‰ìComm™d
(
comm™d
);

1165 
	`Li°Aµíd
(
comm™d
->
˛õ¡
->
ª•⁄£s
, command, (command));

1167 
exô
:

1168 
	`MQTTAsync_u∆ock_muãx
(
mqâasync_muãx
);

1169 
FUNC_EXIT
;

1170 
	}
}

1173 
	$MQTTAsync_checkTimeouts
()

1175 
Li°EÀmít
* 
cuºít
 = 
NULL
;

1176 
time_t
 
œ°
 = 0L;

1177 
time_t
 
now
;

1179 
FUNC_ENTRY
;

1180 
	`time
(&(
now
));

1181 i‡(
	`dif·ime
(
now
, 
œ°
) < 3)

1182 
exô
;

1184 
	`MQTTAsync_lock_muãx
(
mqâasync_muãx
);

1185 
œ°
 = 
now
;

1186 
	`Li°NextEÀmít
(
h™dÀs
, &
cuºít
))

1188 
Li°EÀmít
* 
cur_ª•⁄£
 = 
NULL
;

1189 
i
 = 0,

1190 
timed_out_cou¡
 = 0;

1192 
MQTTAsyncs
* 
m
 = (MQTTAsyncs*)(
cuºít
->
c⁄ã¡
);

1195 i‡(
m
->
c
->
c⁄√˘_°©e
 !0 && 
	`MQTTAsync_ñ≠£d
(m->
c⁄√˘
.
°¨t_time
Ë> (m->c⁄√˘.
dëaûs
.
c⁄n
.
timeout
 * 1000))

1197 i‡(
	`MQTTAsync_checkC⁄n
(&
m
->
c⁄√˘
, m))

1199 
MQTTAsync_queuedComm™d
* 
c⁄n
;

1201 
	`MQTTAsync_˛o£O∆y
(
m
->
c
);

1203 
c⁄n
 = 
	`mÆloc
((
MQTTAsync_queuedComm™d
));

1204 
	`mem£t
(
c⁄n
, '\0', (
MQTTAsync_queuedComm™d
));

1205 
c⁄n
->
˛õ¡
 = 
m
;

1206 
c⁄n
->
comm™d
 = 
m
->
c⁄√˘
;

1207 
	`Log
(
TRACE_MIN
, -1, "Connect failed withÅimeout, moreÅoÅry");

1208 
	`MQTTAsync_addComm™d
(
c⁄n
, (
m
->
c⁄√˘
));

1212 
	`MQTTAsync_˛o£Sessi⁄
(
m
->
c
);

1213 
	`MQTTAsync_‰ìC⁄√˘
(
m
->
c⁄√˘
);

1214 i‡(
m
->
c⁄√˘
.
⁄Faûuª
)

1216 
	`Log
(
TRACE_MIN
, -1, "CÆlög c⁄√˘ faûuª f‹ clõ¡ %s", 
m
->
c
->
˛õ¡ID
);

1217 (*(
m
->
c⁄√˘
.
⁄Faûuª
))(m->c⁄√˘.
c⁄ãxt
, 
NULL
);

1224 i‡(
m
->
c
->
c⁄√˘_°©e
 == -2)

1225 
	`MQTTAsync_checkDisc⁄√˘
(
m
, &m->
disc⁄√˘
);

1227 
timed_out_cou¡
 = 0;

1229 
	`Li°NextEÀmít
(
m
->
ª•⁄£s
, &
cur_ª•⁄£
))

1231 
MQTTAsync_queuedComm™d
* 
com
 = (MQTTAsync_queuedComm™d*)(
cur_ª•⁄£
->
c⁄ã¡
);

1237 i‡(
com
->
comm™d
.
⁄Faûuª
)

1239 
	`Log
(
TRACE_MIN
, -1, "Calling %s failure for client %s",

1240 
	`MQTTPackë_«me
(
com
->
comm™d
.
ty≥
), 
m
->
c
->
˛õ¡ID
);

1241 (*(
com
->
comm™d
.
⁄Faûuª
))(com->comm™d.
c⁄ãxt
, 
NULL
);

1243 
timed_out_cou¡
++;

1246 
i
 = 0; i < 
timed_out_cou¡
; ++i)

1247 
	`Li°RemoveHód
(
m
->
ª•⁄£s
);

1249 
	`MQTTAsync_u∆ock_muãx
(
mqâasync_muãx
);

1250 
exô
:

1251 
FUNC_EXIT
;

1252 
	}
}

1255 
thªad_ªtu∫_ty≥
 
WINAPI
 
	$MQTTAsync_£ndThªad
(* 
n
)

1257 
FUNC_ENTRY
;

1258 
	`MQTTAsync_lock_muãx
(
mqâasync_muãx
);

1259 
£ndThªad_°©e
 = 
RUNNING
;

1260 
£ndThªad_id
 = 
	`Thªad_gëid
();

1261 
	`MQTTAsync_u∆ock_muãx
(
mqâasync_muãx
);

1262 !
to°›
)

1264 
rc
;

1266 
comm™ds
->
cou¡
 > 0)

1268 
bef‹e
 = 
comm™ds
->
cou¡
;

1269 
	`MQTTAsync_¥o˚ssComm™d
();

1270 i‡(
bef‹e
 =
comm™ds
->
cou¡
)

1273 #i‡!
	`deföed
(
WIN32
Ë&& !deföed(
WIN64
)

1274 
rc
 = 
	`Thªad_waô_c⁄d
(
£nd_c⁄d
, 1);

1275 i‡((
rc
 = 
	`Thªad_waô_c⁄d
(
£nd_c⁄d
, 1)Ë!0 &&Ñ¯!
ETIMEDOUT
)

1276 
	`Log
(
LOG_ERROR
, -1, "Eº‹ %d waôög f‹ c⁄dôi⁄ v¨übÀ", 
rc
);

1278 i‡((
rc
 = 
	`Thªad_waô_£m
(
£nd_£m
, 1000)Ë!0 &&Ñ¯!
ETIMEDOUT
)

1279 
	`Log
(
LOG_ERROR
, -1, "Eº‹ %d waôög f‹ sem≠h‹e", 
rc
);

1282 
	`MQTTAsync_checkTimeouts
();

1284 
£ndThªad_°©e
 = 
STOPPING
;

1285 
	`MQTTAsync_lock_muãx
(
mqâasync_muãx
);

1286 
£ndThªad_°©e
 = 
STOPPED
;

1287 
£ndThªad_id
 = 0;

1288 
	`MQTTAsync_u∆ock_muãx
(
mqâasync_muãx
);

1289 
FUNC_EXIT
;

1291 
	}
}

1294 
	$MQTTAsync_em±yMesßgeQueue
(
Clõ¡s
* 
˛õ¡
)

1296 
FUNC_ENTRY
;

1298 i‡(
˛õ¡
->
mesßgeQueue
->
cou¡
 > 0)

1300 
Li°EÀmít
* 
cuºít
 = 
NULL
;

1301 
	`Li°NextEÀmít
(
˛õ¡
->
mesßgeQueue
, &
cuºít
))

1303 
qE¡ry
* 
qe
 = (qE¡ry*)(
cuºít
->
c⁄ã¡
);

1304 
	`‰ì
(
qe
->
t›icName
);

1305 
	`‰ì
(
qe
->
msg
->
∑ylﬂd
);

1306 
	`‰ì
(
qe
->
msg
);

1308 
	`Li°Em±y
(
˛õ¡
->
mesßgeQueue
);

1310 
FUNC_EXIT
;

1311 
	}
}

1314 
	$MQTTAsync_ªmoveRe•⁄£sAndComm™ds
(
MQTTAsyncs
* 
m
)

1316 
cou¡
 = 0;

1317 
Li°EÀmít
* 
cuºít
 = 
NULL
;

1318 
Li°EÀmít
 *
√xt
 = 
NULL
;

1320 
FUNC_ENTRY
;

1321 i‡(
m
->
ª•⁄£s
)

1323 
Li°EÀmít
* 
ñem
 = 
NULL
;

1325 
	`Li°NextEÀmít
(
m
->
ª•⁄£s
, &
ñem
))

1327 
	`MQTTAsync_‰ìComm™d1
((
MQTTAsync_queuedComm™d
*Ë(
ñem
->
c⁄ã¡
));

1328 
cou¡
++;

1331 
	`Li°Em±y
(
m
->
ª•⁄£s
);

1332 
	`Log
(
TRACE_MINIMUM
, -1, "%dÑe•⁄£†ªmoved f‹ clõ¡ %s", 
cou¡
, 
m
->
c
->
˛õ¡ID
);

1335 
cou¡
 = 0;

1336 
cuºít
 = 
	`Li°NextEÀmít
(
comm™ds
, &
√xt
);

1337 
	`Li°NextEÀmít
(
comm™ds
, &
√xt
);

1338 
cuºít
)

1340 
MQTTAsync_queuedComm™d
* 
cmd
 = (MQTTAsync_queuedComm™d*)(
cuºít
->
c⁄ã¡
);

1342 i‡(
cmd
->
˛õ¡
 =
m
)

1344 
	`Li°Dëach
(
comm™ds
, 
cmd
);

1345 
	`MQTTAsync_‰ìComm™d
(
cmd
);

1346 
cou¡
++;

1348 
cuºít
 = 
√xt
;

1349 
	`Li°NextEÀmít
(
comm™ds
, &
√xt
);

1351 
	`Log
(
TRACE_MINIMUM
, -1, "%d comm™d†ªmoved f‹ clõ¡ %s", 
cou¡
, 
m
->
c
->
˛õ¡ID
);

1352 
FUNC_EXIT
;

1353 
	}
}

1356 
	$MQTTAsync_de°roy
(
MQTTAsync
* 
h™dÀ
)

1358 
MQTTAsyncs
* 
m
 = *
h™dÀ
;

1360 
FUNC_ENTRY
;

1361 
	`MQTTAsync_lock_muãx
(
mqâasync_muãx
);

1363 i‡(
m
 =
NULL
)

1364 
exô
;

1366 
	`MQTTAsync_ªmoveRe•⁄£sAndComm™ds
(
m
);

1367 
	`Li°Fªe
(
m
->
ª•⁄£s
);

1369 i‡(
m
->
c
)

1371 
ßved_sockë
 = 
m
->
c
->
√t
.
sockë
;

1372 * 
ßved_˛õ¡id
 = 
	`MQTTSådup
(
m
->
c
->
˛õ¡ID
);

1373 #i‡!
	`deföed
(
NO_PERSISTENCE
)

1374 
	`MQTTPîsi°í˚_˛o£
(
m
->
c
);

1376 
	`MQTTAsync_em±yMesßgeQueue
(
m
->
c
);

1377 
	`MQTTPrŸocﬁ_‰ìClõ¡
(
m
->
c
);

1378 i‡(!
	`Li°Remove
(
b°©e
->
˛õ¡s
, 
m
->
c
))

1379 
	`Log
(
LOG_ERROR
, 0, 
NULL
);

1381 
	`Log
(
TRACE_MIN
, 1, 
NULL
, 
ßved_˛õ¡id
, 
ßved_sockë
);

1382 
	`‰ì
(
ßved_˛õ¡id
);

1385 i‡(
m
->
£rvîURI
)

1386 
	`‰ì
(
m
->
£rvîURI
);

1387 i‡(!
	`Li°Remove
(
h™dÀs
, 
m
))

1388 
	`Log
(
LOG_ERROR
, -1, "freeÉrror");

1389 *
h™dÀ
 = 
NULL
;

1390 i‡(
b°©e
->
˛õ¡s
->
cou¡
 == 0)

1391 
	`MQTTAsync_ãrmö©e
();

1393 
exô
:

1394 
	`MQTTAsync_u∆ock_muãx
(
mqâasync_muãx
);

1395 
FUNC_EXIT
;

1396 
	}
}

1399 
	$MQTTAsync_‰ìMesßge
(
MQTTAsync_mesßge
** 
mesßge
)

1401 
FUNC_ENTRY
;

1402 
	`‰ì
((*
mesßge
)->
∑ylﬂd
);

1403 
	`‰ì
(*
mesßge
);

1404 *
mesßge
 = 
NULL
;

1405 
FUNC_EXIT
;

1406 
	}
}

1409 
	$MQTTAsync_‰ì
(* 
mem‹y
)

1411 
FUNC_ENTRY
;

1412 
	`‰ì
(
mem‹y
);

1413 
FUNC_EXIT
;

1414 
	}
}

1417 
	$MQTTAsync_com∂ëeC⁄√˘i⁄
(
MQTTAsyncs
* 
m
, 
MQTTPackë
* 
∑ck
)

1419 
rc
 = 
MQTTASYNC_FAILURE
;

1421 
FUNC_ENTRY
;

1422 i‡(
m
->
c
->
c⁄√˘_°©e
 == 3)

1424 
C⁄«ck
* 
c⁄«ck
 = (C⁄«ck*)
∑ck
;

1425 
	`Log
(
LOG_PROTOCOL
, 1, 
NULL
, 
m
->
c
->
√t
.
sockë
, m->c->
˛õ¡ID
, 
c⁄«ck
->
rc
);

1426 i‡((
rc
 = 
c⁄«ck
->rcË=
MQTTASYNC_SUCCESS
)

1428 
m
->
c
->
c⁄√˘ed
 = 1;

1429 
m
->
c
->
good
 = 1;

1430 
m
->
c
->
c⁄√˘_°©e
 = 0;

1431 i‡(
m
->
c
->
˛ón£ssi⁄
)

1432 
rc
 = 
	`MQTTAsync_˛ónSessi⁄
(
m
->
c
);

1433 i‡(
m
->
c
->
outboundMsgs
->
cou¡
 > 0)

1435 
Li°EÀmít
* 
outcuºít
 = 
NULL
;

1437 
	`Li°NextEÀmít
(
m
->
c
->
outboundMsgs
, &
outcuºít
))

1439 
Mesßges
* 
m
 = (Mesßges*)(
outcuºít
->
c⁄ã¡
);

1440 
m
->
œ°Touch
 = 0;

1442 
	`MQTTPrŸocﬁ_ªåy
((
time_t
)0, 1, 1);

1443 i‡(
m
->
c
->
c⁄√˘ed
 != 1)

1444 
rc
 = 
MQTTASYNC_DISCONNECTED
;

1447 
	`‰ì
(
c⁄«ck
);

1448 
m
->
∑ck
 = 
NULL
;

1450 
	`FUNC_EXIT_RC
(
rc
);

1451  
rc
;

1452 
	}
}

1455 
thªad_ªtu∫_ty≥
 
WINAPI
 
	$MQTTAsync_ª˚iveThªad
(* 
n
)

1457 
timeout
 = 10L;

1459 
FUNC_ENTRY
;

1460 
	`MQTTAsync_lock_muãx
(
mqâasync_muãx
);

1461 
ª˚iveThªad_°©e
 = 
RUNNING
;

1462 
ª˚iveThªad_id
 = 
	`Thªad_gëid
();

1463 !
to°›
)

1465 
rc
 = 
SOCKET_ERROR
;

1466 
sock
 = -1;

1467 
MQTTAsyncs
* 
m
 = 
NULL
;

1468 
MQTTPackë
* 
∑ck
 = 
NULL
;

1470 
	`MQTTAsync_u∆ock_muãx
(
mqâasync_muãx
);

1471 
∑ck
 = 
	`MQTTAsync_cy˛e
(&
sock
, 
timeout
, &
rc
);

1472 
	`MQTTAsync_lock_muãx
(
mqâasync_muãx
);

1473 i‡(
to°›
)

1475 
timeout
 = 1000L;

1477 i‡(
sock
 == 0)

1480 i‡(
	`Li°FödIãm
(
h™dÀs
, &
sock
, 
˛õ¡SockCom∑ª
Ë=
NULL
)

1482 
	`Log
(
TRACE_MINIMUM
, -1, "CouldÇŸ föd clõ¡ c‹ª•⁄dögÅÿsockë %d", 
sock
);

1486 
m
 = (
MQTTAsyncs
*)(
h™dÀs
->
cuºít
->
c⁄ã¡
);

1487 i‡(
m
 =
NULL
)

1489 
	`Log
(
LOG_ERROR
, -1, "Clõ¡ såu˘uª wa†NULL f‹ sockë %d -Ñemovög sockë", 
sock
);

1490 
	`Sockë_˛o£
(
sock
);

1493 i‡(
rc
 =
SOCKET_ERROR
)

1495 
	`Log
(
TRACE_MINIMUM
, -1, "Eº‹ from MQTTAsync_cy˛e(Ë-Ñemovög sockë %d", 
sock
);

1496 i‡(
m
->
c
->
c⁄√˘ed
 == 1)

1498 
	`MQTTAsync_u∆ock_muãx
(
mqâasync_muãx
);

1499 
	`MQTTAsync_disc⁄√˘_öã∫Æ
(
m
, 0);

1500 
	`MQTTAsync_lock_muãx
(
mqâasync_muãx
);

1503 
	`MQTTAsync_˛o£O∆y
(
m
->
c
);

1507 i‡(
m
->
c
->
mesßgeQueue
->
cou¡
 > 0)

1509 
qE¡ry
* 
qe
 = (qE¡ry*)(
m
->
c
->
mesßgeQueue
->
fú°
->
c⁄ã¡
);

1510 
t›icLí
 = 
qe
->topicLen;

1512 i‡(
	`°æí
(
qe
->
t›icName
Ë=
t›icLí
)

1513 
t›icLí
 = 0;

1515 i‡(
m
->
ma
)

1516 
rc
 = 
	`MQTTAsync_dñivîMesßge
(
m
, 
qe
->
t›icName
, 
t›icLí
, qe->
msg
);

1518 
rc
 = 1;

1520 i‡(
rc
)

1522 
	`Li°Remove
(
m
->
c
->
mesßgeQueue
, 
qe
);

1523 #i‡!
	`deföed
(
NO_PERSISTENCE
)

1524 i‡(
m
->
c
->
≥rsi°í˚
)

1525 
	`MQTTPîsi°í˚_u≈îsi°QueueE¡ry
(
m
->
c
, (
MQTTPîsi°í˚_qE¡ry
*)
qe
);

1529 
	`Log
(
TRACE_MIN
, -1, "FalseÑeturned from messageArrived for client %s, messageÑemains on queue",

1530 
m
->
c
->
˛õ¡ID
);

1532 i‡(
∑ck
)

1534 i‡(
∑ck
->
hódî
.
bôs
.
ty≥
 =
CONNACK
)

1536 
£ssi⁄Pª£¡
 = ((
C⁄«ck
*)
∑ck
)->
Êags
.
bôs
.sessionPresent;

1537 
rc
 = 
	`MQTTAsync_com∂ëeC⁄√˘i⁄
(
m
, 
∑ck
);

1539 i‡(
rc
 =
MQTTASYNC_SUCCESS
)

1541 i‡(
m
->
c⁄√˘
.
dëaûs
.
c⁄n
.
£rvîURIcou¡
 > 0)

1542 
	`Log
(
TRACE_MIN
, -1, "Connect succeededÅo %s",

1543 
m
->
c⁄√˘
.
dëaûs
.
c⁄n
.
£rvîURIs
[m->c⁄√˘.dëaûs.c⁄n.
cuºítURI
]);

1544 
	`MQTTAsync_‰ìC⁄√˘
(
m
->
c⁄√˘
);

1545 i‡(
m
->
c⁄√˘
.
⁄Suc˚ss
)

1547 
MQTTAsync_suc˚ssD©a
 
d©a
;

1548 
	`mem£t
(&
d©a
, '\0', (data));

1549 
	`Log
(
TRACE_MIN
, -1, "CÆlög c⁄√˘ suc˚s†f‹ clõ¡ %s", 
m
->
c
->
˛õ¡ID
);

1550 i‡(
m
->
c⁄√˘
.
dëaûs
.
c⁄n
.
£rvîURIcou¡
 > 0)

1551 
d©a
.
Æt
.
c⁄√˘
.
£rvîURI
 = 
m
->c⁄√˘.
dëaûs
.
c⁄n
.
£rvîURIs
[m->c⁄√˘.dëaûs.c⁄n.
cuºítURI
];

1553 
d©a
.
Æt
.
c⁄√˘
.
£rvîURI
 = 
m
->serverURI;

1554 
d©a
.
Æt
.
c⁄√˘
.
MQTTVîsi⁄
 = 
m
->c⁄√˘.
dëaûs
.
c⁄n
.MQTTVersion;

1555 
d©a
.
Æt
.
c⁄√˘
.
£ssi⁄Pª£¡
 = sessionPresent;

1556 (*(
m
->
c⁄√˘
.
⁄Suc˚ss
))(m->c⁄√˘.
c⁄ãxt
, &
d©a
);

1561 i‡(
	`MQTTAsync_checkC⁄n
(&
m
->
c⁄√˘
, m))

1563 
MQTTAsync_queuedComm™d
* 
c⁄n
;

1565 
	`MQTTAsync_˛o£O∆y
(
m
->
c
);

1567 
c⁄n
 = 
	`mÆloc
((
MQTTAsync_queuedComm™d
));

1568 
	`mem£t
(
c⁄n
, '\0', (
MQTTAsync_queuedComm™d
));

1569 
c⁄n
->
˛õ¡
 = 
m
;

1570 
c⁄n
->
comm™d
 = 
m
->
c⁄√˘
;

1571 
	`Log
(
TRACE_MIN
, -1, "Connect failed, moreÅoÅry");

1572 
	`MQTTAsync_addComm™d
(
c⁄n
, (
m
->
c⁄√˘
));

1576 
	`MQTTAsync_˛o£Sessi⁄
(
m
->
c
);

1577 
	`MQTTAsync_‰ìC⁄√˘
(
m
->
c⁄√˘
);

1578 i‡(
m
->
c⁄√˘
.
⁄Faûuª
)

1580 
MQTTAsync_ÁûuªD©a
 
d©a
;

1582 
d©a
.
tokí
 = 0;

1583 
d©a
.
code
 = 
rc
;

1584 
d©a
.
mesßge
 = "CONNACKÑeturn code";

1585 
	`Log
(
TRACE_MIN
, -1, "CÆlög c⁄√˘ faûuª f‹ clõ¡ %s", 
m
->
c
->
˛õ¡ID
);

1586 (*(
m
->
c⁄√˘
.
⁄Faûuª
))(m->c⁄√˘.
c⁄ãxt
, &
d©a
);

1591 i‡(
∑ck
->
hódî
.
bôs
.
ty≥
 =
SUBACK
)

1593 
Li°EÀmít
* 
cuºít
 = 
NULL
;

1596 
	`Li°NextEÀmít
(
m
->
ª•⁄£s
, &
cuºít
))

1598 
MQTTAsync_queuedComm™d
* 
comm™d
 = (MQTTAsync_queuedComm™d*)(
cuºít
->
c⁄ã¡
);

1599 i‡(
comm™d
->comm™d.
tokí
 =((
Suback
*)
∑ck
)->
msgId
)

1601 
Suback
* 
sub
 = (Suback*)
∑ck
;

1602 i‡(!
	`Li°Dëach
(
m
->
ª•⁄£s
, 
comm™d
))

1603 
	`Log
(
LOG_ERROR
, -1, "Subscribe commandÇotÑemoved from commandÜist");

1610 i‡(
sub
->
qoss
->
cou¡
 =1 && *(*)(sub->qoss->
fú°
->
c⁄ã¡
Ë=
MQTT_BAD_SUBSCRIBE
)

1612 i‡(
comm™d
->comm™d.
⁄Faûuª
)

1614 
MQTTAsync_ÁûuªD©a
 
d©a
;

1616 
d©a
.
tokí
 = 
comm™d
->command.token;

1617 
d©a
.
code
 = *(*)(
sub
->
qoss
->
fú°
->
c⁄ã¡
);

1618 
	`Log
(
TRACE_MIN
, -1, "CÆlög subs¸ibêÁûuª f‹ clõ¡ %s", 
m
->
c
->
˛õ¡ID
);

1619 (*(
comm™d
->comm™d.
⁄Faûuª
))(comm™d->comm™d.
c⁄ãxt
, &
d©a
);

1622 i‡(
comm™d
->comm™d.
⁄Suc˚ss
)

1624 
MQTTAsync_suc˚ssD©a
 
d©a
;

1625 * 
¨øy
 = 
NULL
;

1627 i‡(
sub
->
qoss
->
cou¡
 == 1)

1628 
d©a
.
Æt
.
qos
 = *(*)(
sub
->
qoss
->
fú°
->
c⁄ã¡
);

1629 i‡(
sub
->
qoss
->
cou¡
 > 1)

1631 
Li°EÀmít
* 
cur_qos
 = 
NULL
;

1632 * 
ñemít
 = 
¨øy
 = 
d©a
.
Æt
.
qosLi°
 = 
	`mÆloc
(
sub
->
qoss
->
cou¡
 * ());

1633 
	`Li°NextEÀmít
(
sub
->
qoss
, &
cur_qos
))

1634 *
ñemít
++ = *(*)(
cur_qos
->
c⁄ã¡
);

1636 
d©a
.
tokí
 = 
comm™d
->command.token;

1637 
	`Log
(
TRACE_MIN
, -1, "CÆlög subs¸ibêsuc˚s†f‹ clõ¡ %s", 
m
->
c
->
˛õ¡ID
);

1638 (*(
comm™d
->comm™d.
⁄Suc˚ss
))(comm™d->comm™d.
c⁄ãxt
, &
d©a
);

1639 i‡(
¨øy
)

1640 
	`‰ì
(
¨øy
);

1642 
	`MQTTAsync_‰ìComm™d
(
comm™d
);

1646 
rc
 = 
	`MQTTPrŸocﬁ_h™dÀSubacks
(
∑ck
, 
m
->
c
->
√t
.
sockë
);

1648 i‡(
∑ck
->
hódî
.
bôs
.
ty≥
 =
UNSUBACK
)

1650 
Li°EÀmít
* 
cuºít
 = 
NULL
;

1651 
h™dÀCÆÀd
 = 0;

1654 
	`Li°NextEÀmít
(
m
->
ª•⁄£s
, &
cuºít
))

1656 
MQTTAsync_queuedComm™d
* 
comm™d
 = (MQTTAsync_queuedComm™d*)(
cuºít
->
c⁄ã¡
);

1657 i‡(
comm™d
->comm™d.
tokí
 =((
Unsuback
*)
∑ck
)->
msgId
)

1659 i‡(!
	`Li°Dëach
(
m
->
ª•⁄£s
, 
comm™d
))

1660 
	`Log
(
LOG_ERROR
, -1, "Unsubscribe commandÇotÑemoved from commandÜist");

1661 i‡(
comm™d
->comm™d.
⁄Suc˚ss
)

1663 
rc
 = 
	`MQTTPrŸocﬁ_h™dÀUnsubacks
(
∑ck
, 
m
->
c
->
√t
.
sockë
);

1664 
h™dÀCÆÀd
 = 1;

1665 
	`Log
(
TRACE_MIN
, -1, "CÆlög unsubs¸ibêsuc˚s†f‹ clõ¡ %s", 
m
->
c
->
˛õ¡ID
);

1666 (*(
comm™d
->comm™d.
⁄Suc˚ss
))(comm™d->comm™d.
c⁄ãxt
, 
NULL
);

1668 
	`MQTTAsync_‰ìComm™d
(
comm™d
);

1672 i‡(!
h™dÀCÆÀd
)

1673 
rc
 = 
	`MQTTPrŸocﬁ_h™dÀUnsubacks
(
∑ck
, 
m
->
c
->
√t
.
sockë
);

1678 
ª˚iveThªad_°©e
 = 
STOPPED
;

1679 
ª˚iveThªad_id
 = 0;

1680 
	`MQTTAsync_u∆ock_muãx
(
mqâasync_muãx
);

1681 #i‡!
	`deföed
(
WIN32
Ë&& !deföed(
WIN64
)

1682 i‡(
£ndThªad_°©e
 !
STOPPED
)

1683 
	`Thªad_sig«l_c⁄d
(
£nd_c⁄d
);

1685 i‡(
£ndThªad_°©e
 !
STOPPED
 && !
	`Thªad_check_£m
(
£nd_£m
))

1686 
	`Thªad_po°_£m
(
£nd_£m
);

1688 
FUNC_EXIT
;

1690 
	}
}

1693 
	$MQTTAsync_°›
()

1695 
rc
 = 0;

1697 
FUNC_ENTRY
;

1698 i‡(
£ndThªad_°©e
 !
STOPPED
 || 
ª˚iveThªad_°©e
 != STOPPED)

1700 
c⁄n_cou¡
 = 0;

1701 
Li°EÀmít
* 
cuºít
 = 
NULL
;

1703 i‡(
h™dÀs
 !
NULL
)

1706 
	`Li°NextEÀmít
(
h™dÀs
, &
cuºít
))

1708 i‡(((
MQTTAsyncs
*)(
cuºít
->
c⁄ã¡
))->
c
->
c⁄√˘_°©e
 > 0 ||

1709 ((
MQTTAsyncs
*)(
cuºít
->
c⁄ã¡
))->
c
->
c⁄√˘ed
)

1710 ++
c⁄n_cou¡
;

1713 
	`Log
(
TRACE_MIN
, -1, "C⁄n_cou¡ i†%d", 
c⁄n_cou¡
);

1715 i‡(
c⁄n_cou¡
 == 0)

1717 
cou¡
 = 0;

1718 
to°›
 = 1;

1719 (
£ndThªad_°©e
 !
STOPPED
 || 
ª˚iveThªad_°©e
 !STOPPEDË&& ++
cou¡
 < 100)

1721 
	`MQTTAsync_u∆ock_muãx
(
mqâasync_muãx
);

1722 
	`Log
(
TRACE_MIN
, -1, "sleeping");

1723 
	`MQTTAsync_¶ìp
(100L);

1724 
	`MQTTAsync_lock_muãx
(
mqâasync_muãx
);

1726 
rc
 = 1;

1727 
to°›
 = 0;

1730 
	`FUNC_EXIT_RC
(
rc
);

1731 
	}
}

1734 
	$MQTTAsync_£tCÆlbacks
(
MQTTAsync
 
h™dÀ
, * 
c⁄ãxt
,

1735 
MQTTAsync_c⁄√˘i⁄Lo°
* 
˛
,

1736 
MQTTAsync_mesßgeAºived
* 
ma
,

1737 
MQTTAsync_dñivîyCom∂ëe
* 
dc
)

1739 
rc
 = 
MQTTASYNC_SUCCESS
;

1740 
MQTTAsyncs
* 
m
 = 
h™dÀ
;

1742 
FUNC_ENTRY
;

1743 
	`MQTTAsync_lock_muãx
(
mqâasync_muãx
);

1745 i‡(
m
 =
NULL
 || 
ma
 =NULL || m->
c
->
c⁄√˘_°©e
 != 0)

1746 
rc
 = 
MQTTASYNC_FAILURE
;

1749 
m
->
c⁄ãxt
 = context;

1750 
m
->
˛
 = cl;

1751 
m
->
ma
 = ma;

1752 
m
->
dc
 = dc;

1755 
	`MQTTAsync_u∆ock_muãx
(
mqâasync_muãx
);

1756 
	`FUNC_EXIT_RC
(
rc
);

1757  
rc
;

1758 
	}
}

1761 
	$MQTTAsync_˛o£O∆y
(
Clõ¡s
* 
˛õ¡
)

1763 
FUNC_ENTRY
;

1764 
˛õ¡
->
good
 = 0;

1765 
˛õ¡
->
pög_out°™dög
 = 0;

1766 i‡(
˛õ¡
->
√t
.
sockë
 > 0)

1768 i‡(
˛õ¡
->
c⁄√˘ed
)

1769 
	`MQTTPackë_£nd_disc⁄√˘
(&
˛õ¡
->
√t
, clõ¡->
˛õ¡ID
);

1770 #i‡
	`deföed
(
OPENSSL
)

1771 
	`SSLSockë_˛o£
(&
˛õ¡
->
√t
);

1773 
	`Sockë_˛o£
(
˛õ¡
->
√t
.
sockë
);

1774 
˛õ¡
->
√t
.
sockë
 = 0;

1775 #i‡
	`deföed
(
OPENSSL
)

1776 
˛õ¡
->
√t
.
s¶
 = 
NULL
;

1779 
˛õ¡
->
c⁄√˘ed
 = 0;

1780 
˛õ¡
->
c⁄√˘_°©e
 = 0;

1781 
FUNC_EXIT
;

1782 
	}
}

1785 
	$MQTTAsync_˛o£Sessi⁄
(
Clõ¡s
* 
˛õ¡
)

1787 
FUNC_ENTRY
;

1788 
	`MQTTAsync_˛o£O∆y
(
˛õ¡
);

1790 i‡(
˛õ¡
->
˛ón£ssi⁄
)

1791 
	`MQTTAsync_˛ónSessi⁄
(
˛õ¡
);

1793 
FUNC_EXIT
;

1794 
	}
}

1803 
	$˛õ¡Såu˘Com∑ª
(* 
a
, * 
b
)

1805 
MQTTAsyncs
* 
m
 = (MQTTAsyncs*)
a
;

1806  
m
->
c
 =(
Clõ¡s
*)
b
;

1807 
	}
}

1810 
	$MQTTAsync_˛ónSessi⁄
(
Clõ¡s
* 
˛õ¡
)

1812 
rc
 = 0;

1813 
Li°EÀmít
* 
found
 = 
NULL
;

1815 
FUNC_ENTRY
;

1816 #i‡!
	`deföed
(
NO_PERSISTENCE
)

1817 
rc
 = 
	`MQTTPîsi°í˚_˛ór
(
˛õ¡
);

1819 
	`MQTTPrŸocﬁ_em±yMesßgeLi°
(
˛õ¡
->
öboundMsgs
);

1820 
	`MQTTPrŸocﬁ_em±yMesßgeLi°
(
˛õ¡
->
outboundMsgs
);

1821 
	`MQTTAsync_em±yMesßgeQueue
(
˛õ¡
);

1822 
˛õ¡
->
msgID
 = 0;

1824 i‡((
found
 = 
	`Li°FödIãm
(
h™dÀs
, 
˛õ¡
, 
˛õ¡Såu˘Com∑ª
)Ë!
NULL
)

1826 
MQTTAsyncs
* 
m
 = (MQTTAsyncs*)(
found
->
c⁄ã¡
);

1827 
	`MQTTAsync_ªmoveRe•⁄£sAndComm™ds
(
m
);

1830 
	`Log
(
LOG_ERROR
, -1, "cleanSession: didÇot find client structure in handlesÜist");

1831 
	`FUNC_EXIT_RC
(
rc
);

1832  
rc
;

1833 
	}
}

1839 
	$MQTTAsync_dñivîMesßge
(
MQTTAsyncs
* 
m
, * 
t›icName
, 
size_t
 
t›icLí
, 
MQTTAsync_mesßge
* 
mm
)

1841 
rc
;

1843 
	`Log
(
TRACE_MIN
, -1, "Calling messageArrived for client %s, queue depth %d",

1844 
m
->
c
->
˛õ¡ID
, m->c->
mesßgeQueue
->
cou¡
);

1845 
rc
 = (*(
m
->
ma
))(m->
c⁄ãxt
, 
t›icName
, 
t›icLí
, 
mm
);

1850  
rc
;

1851 
	}
}

1854 
	$PrŸocﬁ_¥o˚ssPubliˇti⁄
(
Publish
* 
publish
, 
Clõ¡s
* 
˛õ¡
)

1856 
MQTTAsync_mesßge
* 
mm
 = 
NULL
;

1857 
rc
 = 0;

1859 
FUNC_ENTRY
;

1860 
mm
 = 
	`mÆloc
((
MQTTAsync_mesßge
));

1865 i‡(
publish
->
hódî
.
bôs
.
qos
 == 2)

1866 
mm
->
∑ylﬂd
 = 
publish
->payload;

1869 
mm
->
∑ylﬂd
 = 
	`mÆloc
(
publish
->
∑ylﬂdÀn
);

1870 
	`mem˝y
(
mm
->
∑ylﬂd
, 
publish
->∑ylﬂd,Öublish->
∑ylﬂdÀn
);

1873 
mm
->
∑ylﬂdÀn
 = 
publish
->payloadlen;

1874 
mm
->
qos
 = 
publish
->
hódî
.
bôs
.qos;

1875 
mm
->
ªèöed
 = 
publish
->
hódî
.
bôs
.
ªèö
;

1876 i‡(
publish
->
hódî
.
bôs
.
qos
 == 2)

1877 
mm
->
dup
 = 0;

1879 
mm
->
dup
 = 
publish
->
hódî
.
bôs
.dup;

1880 
mm
->
msgid
 = 
publish
->
msgId
;

1882 i‡(
˛õ¡
->
mesßgeQueue
->
cou¡
 =0 && clõ¡->
c⁄√˘ed
)

1884 
Li°EÀmít
* 
found
 = 
NULL
;

1886 i‡((
found
 = 
	`Li°FödIãm
(
h™dÀs
, 
˛õ¡
, 
˛õ¡Såu˘Com∑ª
)Ë=
NULL
)

1887 
	`Log
(
LOG_ERROR
, -1, "processPublication: didÇot find client structure in handlesÜist");

1890 
MQTTAsyncs
* 
m
 = (MQTTAsyncs*)(
found
->
c⁄ã¡
);

1892 i‡(
m
->
ma
)

1893 
rc
 = 
	`MQTTAsync_dñivîMesßge
(
m
, 
publish
->
t›ic
,Öublish->
t›i˛í
, 
mm
);

1897 i‡(
rc
 == 0)

1899 
qE¡ry
* 
qe
 = 
	`mÆloc
((qEntry));

1900 
qe
->
msg
 = 
mm
;

1901 
qe
->
t›icName
 = 
publish
->
t›ic
;

1902 
qe
->
t›icLí
 = 
publish
->
t›i˛í
;

1903 
	`Li°Aµíd
(
˛õ¡
->
mesßgeQueue
, 
qe
, (qeË+ (
mm
Ë+ mm->
∑ylﬂdÀn
 + 
	`°æí
(qe->
t›icName
)+1);

1904 #i‡!
	`deföed
(
NO_PERSISTENCE
)

1905 i‡(
˛õ¡
->
≥rsi°í˚
)

1906 
	`MQTTPîsi°í˚_≥rsi°QueueE¡ry
(
˛õ¡
, (
MQTTPîsi°í˚_qE¡ry
*)
qe
);

1909 
publish
->
t›ic
 = 
NULL
;

1910 
FUNC_EXIT
;

1911 
	}
}

1914 
	$MQTTAsync_c⁄√˘
(
MQTTAsync
 
h™dÀ
, c⁄° 
MQTTAsync_c⁄√˘O±i⁄s
* 
›ti⁄s
)

1916 
MQTTAsyncs
* 
m
 = 
h™dÀ
;

1917 
rc
 = 
MQTTASYNC_SUCCESS
;

1918 
MQTTAsync_queuedComm™d
* 
c⁄n
;

1920 
FUNC_ENTRY
;

1921 i‡(
›ti⁄s
 =
NULL
)

1923 
rc
 = 
MQTTASYNC_NULL_PARAMETER
;

1924 
exô
;

1927 i‡(
	`°∫cmp
(
›ti⁄s
->
°ru˘_id
, "MQTC", 4) != 0 ||

1928 (
›ti⁄s
->
°ru˘_vîsi⁄
 != 0 && options->struct_version != 1 && options->struct_version != 2 &&

1929 
›ti⁄s
->
°ru˘_vîsi⁄
 != 3))

1931 
rc
 = 
MQTTASYNC_BAD_STRUCTURE
;

1932 
exô
;

1934 i‡(
›ti⁄s
->
wûl
)

1936 i‡(
	`°∫cmp
(
›ti⁄s
->
wûl
->
°ru˘_id
, "MQTW", 4Ë!0 || o±i⁄s->wûl->
°ru˘_vîsi⁄
 != 0)

1938 
rc
 = 
MQTTASYNC_BAD_STRUCTURE
;

1939 
exô
;

1941 i‡(
›ti⁄s
->
wûl
->
qos
 < 0 || options->will->qos > 2)

1943 
rc
 = 
MQTTASYNC_BAD_QOS
;

1944 
exô
;

1947 i‡(
›ti⁄s
->
°ru˘_vîsi⁄
 !0 && o±i⁄s->
s¶
)

1949 i‡(
	`°∫cmp
(
›ti⁄s
->
s¶
->
°ru˘_id
, "MQTS", 4Ë!0 || o±i⁄s->s¶->
°ru˘_vîsi⁄
 != 0)

1951 
rc
 = 
MQTTASYNC_BAD_STRUCTURE
;

1952 
exô
;

1955 i‡((
›ti⁄s
->
u£∫ame
 && !
	`UTF8_vÆid©eSåög
(options->username)) ||

1956 (
›ti⁄s
->
∑ssw‹d
 && !
	`UTF8_vÆid©eSåög
(options->password)))

1958 
rc
 = 
MQTTASYNC_BAD_UTF8_STRING
;

1959 
exô
;

1962 
m
->
c⁄√˘
.
⁄Suc˚ss
 = 
›ti⁄s
->onSuccess;

1963 
m
->
c⁄√˘
.
⁄Faûuª
 = 
›ti⁄s
->onFailure;

1964 
m
->
c⁄√˘
.
c⁄ãxt
 = 
›ti⁄s
->context;

1966 
to°›
 = 0;

1967 i‡(
£ndThªad_°©e
 !
STARTING
 && sídThªad_°©ê!
RUNNING
)

1969 
	`MQTTAsync_lock_muãx
(
mqâasync_muãx
);

1970 
£ndThªad_°©e
 = 
STARTING
;

1971 
	`Thªad_°¨t
(
MQTTAsync_£ndThªad
, 
NULL
);

1972 
	`MQTTAsync_u∆ock_muãx
(
mqâasync_muãx
);

1974 i‡(
ª˚iveThªad_°©e
 !
STARTING
 &&Ñe˚iveThªad_°©ê!
RUNNING
)

1976 
	`MQTTAsync_lock_muãx
(
mqâasync_muãx
);

1977 
ª˚iveThªad_°©e
 = 
STARTING
;

1978 
	`Thªad_°¨t
(
MQTTAsync_ª˚iveThªad
, 
h™dÀ
);

1979 
	`MQTTAsync_u∆ock_muãx
(
mqâasync_muãx
);

1982 
m
->
c
->
kìpAliveI¡îvÆ
 = 
›ti⁄s
->keepAliveInterval;

1983 
m
->
c
->
˛ón£ssi⁄
 = 
›ti⁄s
->cleansession;

1984 
m
->
c
->
maxInÊightMesßges
 = 
›ti⁄s
->
maxInÊight
;

1985 i‡(
›ti⁄s
->
°ru˘_vîsi⁄
 == 3)

1986 
m
->
c
->
MQTTVîsi⁄
 = 
›ti⁄s
->MQTTVersion;

1988 
m
->
c
->
MQTTVîsi⁄
 = 0;

1990 i‡(
m
->
c
->
wûl
)

1992 
	`‰ì
(
m
->
c
->
wûl
->
msg
);

1993 
	`‰ì
(
m
->
c
->
wûl
->
t›ic
);

1994 
	`‰ì
(
m
->
c
->
wûl
);

1995 
m
->
c
->
wûl
 = 
NULL
;

1998 i‡(
›ti⁄s
->
wûl
 && o±i⁄s->wûl->
°ru˘_vîsi⁄
 == 0)

2000 
m
->
c
->
wûl
 = 
	`mÆloc
((
wûlMesßges
));

2001 
m
->
c
->
wûl
->
msg
 = 
	`MQTTSådup
(
›ti⁄s
->wûl->
mesßge
);

2002 
m
->
c
->
wûl
->
qos
 = 
›ti⁄s
->will->qos;

2003 
m
->
c
->
wûl
->
ªèöed
 = 
›ti⁄s
->will->retained;

2004 
m
->
c
->
wûl
->
t›ic
 = 
	`MQTTSådup
(
›ti⁄s
->wûl->
t›icName
);

2007 #i‡
	`deföed
(
OPENSSL
)

2008 i‡(
m
->
c
->
s¶›ts
)

2010 i‡(
m
->
c
->
s¶›ts
->
åu°St‹e
)

2011 
	`‰ì
((*)
m
->
c
->
s¶›ts
->
åu°St‹e
);

2012 i‡(
m
->
c
->
s¶›ts
->
keySt‹e
)

2013 
	`‰ì
((*)
m
->
c
->
s¶›ts
->
keySt‹e
);

2014 i‡(
m
->
c
->
s¶›ts
->
¥iv©eKey
)

2015 
	`‰ì
((*)
m
->
c
->
s¶›ts
->
¥iv©eKey
);

2016 i‡(
m
->
c
->
s¶›ts
->
¥iv©eKeyPassw‹d
)

2017 
	`‰ì
((*)
m
->
c
->
s¶›ts
->
¥iv©eKeyPassw‹d
);

2018 i‡(
m
->
c
->
s¶›ts
->
íabÀdCùhîSuôes
)

2019 
	`‰ì
((*)
m
->
c
->
s¶›ts
->
íabÀdCùhîSuôes
);

2020 
	`‰ì
((*)
m
->
c
->
s¶›ts
);

2021 
m
->
c
->
s¶›ts
 = 
NULL
;

2024 i‡(
›ti⁄s
->
°ru˘_vîsi⁄
 !0 && o±i⁄s->
s¶
)

2026 
m
->
c
->
s¶›ts
 = 
	`mÆloc
((
MQTTClõ¡_SSLO±i⁄s
));

2027 
	`mem£t
(
m
->
c
->
s¶›ts
, '\0', (
MQTTClõ¡_SSLO±i⁄s
));

2028 i‡(
›ti⁄s
->
s¶
->
åu°St‹e
)

2029 
m
->
c
->
s¶›ts
->
åu°St‹e
 = 
	`MQTTSådup
(
›ti⁄s
->
s¶
->trustStore);

2030 i‡(
›ti⁄s
->
s¶
->
keySt‹e
)

2031 
m
->
c
->
s¶›ts
->
keySt‹e
 = 
	`MQTTSådup
(
›ti⁄s
->
s¶
->keyStore);

2032 i‡(
›ti⁄s
->
s¶
->
¥iv©eKey
)

2033 
m
->
c
->
s¶›ts
->
¥iv©eKey
 = 
	`MQTTSådup
(
›ti⁄s
->
s¶
->privateKey);

2034 i‡(
›ti⁄s
->
s¶
->
¥iv©eKeyPassw‹d
)

2035 
m
->
c
->
s¶›ts
->
¥iv©eKeyPassw‹d
 = 
	`MQTTSådup
(
›ti⁄s
->
s¶
->privateKeyPassword);

2036 i‡(
›ti⁄s
->
s¶
->
íabÀdCùhîSuôes
)

2037 
m
->
c
->
s¶›ts
->
íabÀdCùhîSuôes
 = 
	`MQTTSådup
(
›ti⁄s
->
s¶
->enabledCipherSuites);

2038 
m
->
c
->
s¶›ts
->
íabÀSîvîCîtAuth
 = 
›ti⁄s
->
s¶
->enableServerCertAuth;

2042 
m
->
c
->
u£∫ame
 = 
›ti⁄s
->username;

2043 
m
->
c
->
∑ssw‹d
 = 
›ti⁄s
->password;

2044 
m
->
c
->
ªåyI¡îvÆ
 = 
›ti⁄s
->retryInterval;

2047 
c⁄n
 = 
	`mÆloc
((
MQTTAsync_queuedComm™d
));

2048 
	`mem£t
(
c⁄n
, '\0', (
MQTTAsync_queuedComm™d
));

2049 
c⁄n
->
˛õ¡
 = 
m
;

2050 i‡(
›ti⁄s
)

2052 
c⁄n
->
comm™d
.
⁄Suc˚ss
 = 
›ti⁄s
->onSuccess;

2053 
c⁄n
->
comm™d
.
⁄Faûuª
 = 
›ti⁄s
->onFailure;

2054 
c⁄n
->
comm™d
.
c⁄ãxt
 = 
›ti⁄s
->context;

2055 
c⁄n
->
comm™d
.
dëaûs
.c⁄n.
timeout
 = 
›ti⁄s
->
c⁄√˘Timeout
;

2057 i‡(
›ti⁄s
->
°ru˘_vîsi⁄
 >2 && o±i⁄s->
£rvîURIcou¡
 > 0)

2059 
i
;

2061 
c⁄n
->
comm™d
.
dëaûs
.c⁄n.
£rvîURIcou¡
 = 
›ti⁄s
->serverURIcount;

2062 
c⁄n
->
comm™d
.
dëaûs
.c⁄n.
£rvîURIs
 = 
	`mÆloc
(
›ti⁄s
->
£rvîURIcou¡
 * (*));

2063 
i
 = 0; i < 
›ti⁄s
->
£rvîURIcou¡
; ++i)

2064 
c⁄n
->
comm™d
.
dëaûs
.c⁄n.
£rvîURIs
[
i
] = 
	`MQTTSådup
(
›ti⁄s
->serverURIs[i]);

2065 
c⁄n
->
comm™d
.
dëaûs
.c⁄n.
cuºítURI
 = 0;

2068 
c⁄n
->
comm™d
.
ty≥
 = 
CONNECT
;

2069 
rc
 = 
	`MQTTAsync_addComm™d
(
c⁄n
, (conn));

2071 
exô
:

2072 
	`FUNC_EXIT_RC
(
rc
);

2073  
rc
;

2074 
	}
}

2077 
	$MQTTAsync_disc⁄√˘1
(
MQTTAsync
 
h™dÀ
, c⁄° 
MQTTAsync_disc⁄√˘O±i⁄s
* 
›ti⁄s
, 
öã∫Æ
)

2079 
MQTTAsyncs
* 
m
 = 
h™dÀ
;

2080 
rc
 = 
MQTTASYNC_SUCCESS
;

2081 
MQTTAsync_queuedComm™d
* 
dis
;

2083 
FUNC_ENTRY
;

2084 i‡(
m
 =
NULL
 || m->
c
 == NULL)

2086 
rc
 = 
MQTTASYNC_FAILURE
;

2087 
exô
;

2089 i‡(
m
->
c
->
c⁄√˘ed
 == 0)

2091 
rc
 = 
MQTTASYNC_DISCONNECTED
;

2092 
exô
;

2096 
dis
 = 
	`mÆloc
((
MQTTAsync_queuedComm™d
));

2097 
	`mem£t
(
dis
, '\0', (
MQTTAsync_queuedComm™d
));

2098 
dis
->
˛õ¡
 = 
m
;

2099 i‡(
›ti⁄s
)

2101 
dis
->
comm™d
.
⁄Suc˚ss
 = 
›ti⁄s
->onSuccess;

2102 
dis
->
comm™d
.
⁄Faûuª
 = 
›ti⁄s
->onFailure;

2103 
dis
->
comm™d
.
c⁄ãxt
 = 
›ti⁄s
->context;

2104 
dis
->
comm™d
.
dëaûs
.dis.
timeout
 = 
›ti⁄s
->timeout;

2106 
dis
->
comm™d
.
ty≥
 = 
DISCONNECT
;

2107 
dis
->
comm™d
.
dëaûs
.dis.
öã∫Æ
 = internal;

2108 
rc
 = 
	`MQTTAsync_addComm™d
(
dis
, (dis));

2110 
exô
:

2111 
	`FUNC_EXIT_RC
(
rc
);

2112  
rc
;

2113 
	}
}

2116 
	$MQTTAsync_disc⁄√˘_öã∫Æ
(
MQTTAsync
 
h™dÀ
, 
timeout
)

2118 
MQTTAsync_disc⁄√˘O±i⁄s
 
›ti⁄s
 = 
MQTTAsync_disc⁄√˘O±i⁄s_öôülizî
;

2120 
›ti⁄s
.
timeout
 =Åimeout;

2121  
	`MQTTAsync_disc⁄√˘1
(
h™dÀ
, &
›ti⁄s
, 1);

2122 
	}
}

2125 
	$MQTTPrŸocﬁ_˛o£Sessi⁄
(
Clõ¡s
* 
c
, 
£ndwûl
)

2127 
	`MQTTAsync_disc⁄√˘_öã∫Æ
((
MQTTAsync
)
c
->
c⁄ãxt
, 0);

2128 
	}
}

2131 
	$MQTTAsync_disc⁄√˘
(
MQTTAsync
 
h™dÀ
, c⁄° 
MQTTAsync_disc⁄√˘O±i⁄s
* 
›ti⁄s
)

2133  
	`MQTTAsync_disc⁄√˘1
(
h™dÀ
, 
›ti⁄s
, 0);

2134 
	}
}

2137 
	$MQTTAsync_isC⁄√˘ed
(
MQTTAsync
 
h™dÀ
)

2139 
MQTTAsyncs
* 
m
 = 
h™dÀ
;

2140 
rc
 = 0;

2142 
FUNC_ENTRY
;

2143 
	`MQTTAsync_lock_muãx
(
mqâasync_muãx
);

2144 i‡(
m
 && m->
c
)

2145 
rc
 = 
m
->
c
->
c⁄√˘ed
;

2146 
	`MQTTAsync_u∆ock_muãx
(
mqâasync_muãx
);

2147 
	`FUNC_EXIT_RC
(
rc
);

2148  
rc
;

2149 
	}
}

2152 
	$cmdMesßgeIDCom∑ª
(* 
a
, * 
b
)

2154 
MQTTAsync_queuedComm™d
* 
cmd
 = (MQTTAsync_queuedComm™d*)
a
;

2155  
cmd
->
comm™d
.
tokí
 =*(*)
b
;

2156 
	}
}

2165 
	$MQTTAsync_assignMsgId
(
MQTTAsyncs
* 
m
)

2167 
°¨t_msgid
 = 
m
->
c
->
msgID
;

2168 
msgid
 = 
°¨t_msgid
;

2169 
thªad_id_ty≥
 
thªad_id
 = 0;

2170 
locked
 = 0;

2173 
FUNC_ENTRY
;

2175 
thªad_id
 = 
	`Thªad_gëid
();

2176 i‡(
thªad_id
 !
£ndThªad_id
 &&Åhªad_id !
ª˚iveThªad_id
)

2178 
	`MQTTAsync_lock_muãx
(
mqâasync_muãx
);

2179 
locked
 = 1;

2182 
msgid
 = (msgid =
MAX_MSG_ID
) ? 1 : msgid + 1;

2183 
	`Li°FödIãm
(
comm™ds
, &
msgid
, 
cmdMesßgeIDCom∑ª
) ||

2184 
	`Li°FödIãm
(
m
->
ª•⁄£s
, &
msgid
, 
cmdMesßgeIDCom∑ª
))

2186 
msgid
 = (msgid =
MAX_MSG_ID
) ? 1 : msgid + 1;

2187 i‡(
msgid
 =
°¨t_msgid
)

2189 
msgid
 = 0;

2193 i‡(
msgid
 != 0)

2194 
m
->
c
->
msgID
 = 
msgid
;

2195 i‡(
locked
)

2196 
	`MQTTAsync_u∆ock_muãx
(
mqâasync_muãx
);

2197 
	`FUNC_EXIT_RC
(
msgid
);

2198  
msgid
;

2199 
	}
}

2202 
	$MQTTAsync_subs¸ibeM™y
(
MQTTAsync
 
h™dÀ
, 
cou¡
, * c⁄°* 
t›ic
, * 
qos
, 
MQTTAsync_ª•⁄£O±i⁄s
* 
ª•⁄£
)

2204 
MQTTAsyncs
* 
m
 = 
h™dÀ
;

2205 
i
 = 0;

2206 
rc
 = 
MQTTASYNC_FAILURE
;

2207 
MQTTAsync_queuedComm™d
* 
sub
;

2208 
msgid
 = 0;

2210 
FUNC_ENTRY
;

2211 i‡(
m
 =
NULL
 || m->
c
 == NULL)

2213 
rc
 = 
MQTTASYNC_FAILURE
;

2214 
exô
;

2216 i‡(
m
->
c
->
c⁄√˘ed
 == 0)

2218 
rc
 = 
MQTTASYNC_DISCONNECTED
;

2219 
exô
;

2221 
i
 = 0; i < 
cou¡
; i++)

2223 i‡(!
	`UTF8_vÆid©eSåög
(
t›ic
[
i
]))

2225 
rc
 = 
MQTTASYNC_BAD_UTF8_STRING
;

2226 
exô
;

2228 i‡(
qos
[
i
] < 0 || qos[i] > 2)

2230 
rc
 = 
MQTTASYNC_BAD_QOS
;

2231 
exô
;

2234 i‡((
msgid
 = 
	`MQTTAsync_assignMsgId
(
m
)) == 0)

2236 
rc
 = 
MQTTASYNC_NO_MORE_MSGIDS
;

2237 
exô
;

2241 
sub
 = 
	`mÆloc
((
MQTTAsync_queuedComm™d
));

2242 
	`mem£t
(
sub
, '\0', (
MQTTAsync_queuedComm™d
));

2243 
sub
->
˛õ¡
 = 
m
;

2244 
sub
->
comm™d
.
tokí
 = 
msgid
;

2245 i‡(
ª•⁄£
)

2247 
sub
->
comm™d
.
⁄Suc˚ss
 = 
ª•⁄£
->onSuccess;

2248 
sub
->
comm™d
.
⁄Faûuª
 = 
ª•⁄£
->onFailure;

2249 
sub
->
comm™d
.
c⁄ãxt
 = 
ª•⁄£
->context;

2250 
ª•⁄£
->
tokí
 = 
sub
->
comm™d
.token;

2252 
sub
->
comm™d
.
ty≥
 = 
SUBSCRIBE
;

2253 
sub
->
comm™d
.
dëaûs
.sub.
cou¡
 = count;

2254 
sub
->
comm™d
.
dëaûs
.sub.
t›ics
 = 
	`mÆloc
((*Ë* 
cou¡
);

2255 
sub
->
comm™d
.
dëaûs
.sub.
qoss
 = 
	`mÆloc
((Ë* 
cou¡
);

2256 
i
 = 0; i < 
cou¡
; ++i)

2258 
sub
->
comm™d
.
dëaûs
.sub.
t›ics
[
i
] = 
	`MQTTSådup
(
t›ic
[i]);

2259 
sub
->
comm™d
.
dëaûs
.sub.
qoss
[
i
] = 
qos
[i];

2261 
rc
 = 
	`MQTTAsync_addComm™d
(
sub
, (sub));

2263 
exô
:

2264 
	`FUNC_EXIT_RC
(
rc
);

2265  
rc
;

2266 
	}
}

2269 
	$MQTTAsync_subs¸ibe
(
MQTTAsync
 
h™dÀ
, c⁄° * 
t›ic
, 
qos
, 
MQTTAsync_ª•⁄£O±i⁄s
* 
ª•⁄£
)

2271 
rc
 = 0;

2272 *c⁄° 
t›ics
[] = {(*)
t›ic
};

2273 
FUNC_ENTRY
;

2274 
rc
 = 
	`MQTTAsync_subs¸ibeM™y
(
h™dÀ
, 1, 
t›ics
, &
qos
, 
ª•⁄£
);

2275 
	`FUNC_EXIT_RC
(
rc
);

2276  
rc
;

2277 
	}
}

2280 
	$MQTTAsync_unsubs¸ibeM™y
(
MQTTAsync
 
h™dÀ
, 
cou¡
, * c⁄°* 
t›ic
, 
MQTTAsync_ª•⁄£O±i⁄s
* 
ª•⁄£
)

2282 
MQTTAsyncs
* 
m
 = 
h™dÀ
;

2283 
i
 = 0;

2284 
rc
 = 
SOCKET_ERROR
;

2285 
MQTTAsync_queuedComm™d
* 
unsub
;

2286 
msgid
 = 0;

2288 
FUNC_ENTRY
;

2289 i‡(
m
 =
NULL
 || m->
c
 == NULL)

2291 
rc
 = 
MQTTASYNC_FAILURE
;

2292 
exô
;

2294 i‡(
m
->
c
->
c⁄√˘ed
 == 0)

2296 
rc
 = 
MQTTASYNC_DISCONNECTED
;

2297 
exô
;

2299 
i
 = 0; i < 
cou¡
; i++)

2301 i‡(!
	`UTF8_vÆid©eSåög
(
t›ic
[
i
]))

2303 
rc
 = 
MQTTASYNC_BAD_UTF8_STRING
;

2304 
exô
;

2307 i‡((
msgid
 = 
	`MQTTAsync_assignMsgId
(
m
)) == 0)

2309 
rc
 = 
MQTTASYNC_NO_MORE_MSGIDS
;

2310 
exô
;

2314 
unsub
 = 
	`mÆloc
((
MQTTAsync_queuedComm™d
));

2315 
	`mem£t
(
unsub
, '\0', (
MQTTAsync_queuedComm™d
));

2316 
unsub
->
˛õ¡
 = 
m
;

2317 
unsub
->
comm™d
.
ty≥
 = 
UNSUBSCRIBE
;

2318 
unsub
->
comm™d
.
tokí
 = 
msgid
;

2319 i‡(
ª•⁄£
)

2321 
unsub
->
comm™d
.
⁄Suc˚ss
 = 
ª•⁄£
->onSuccess;

2322 
unsub
->
comm™d
.
⁄Faûuª
 = 
ª•⁄£
->onFailure;

2323 
unsub
->
comm™d
.
c⁄ãxt
 = 
ª•⁄£
->context;

2324 
ª•⁄£
->
tokí
 = 
unsub
->
comm™d
.token;

2326 
unsub
->
comm™d
.
dëaûs
.unsub.
cou¡
 = count;

2327 
unsub
->
comm™d
.
dëaûs
.unsub.
t›ics
 = 
	`mÆloc
((*Ë* 
cou¡
);

2328 
i
 = 0; i < 
cou¡
; ++i)

2329 
unsub
->
comm™d
.
dëaûs
.unsub.
t›ics
[
i
] = 
	`MQTTSådup
(
t›ic
[i]);

2330 
rc
 = 
	`MQTTAsync_addComm™d
(
unsub
, (unsub));

2332 
exô
:

2333 
	`FUNC_EXIT_RC
(
rc
);

2334  
rc
;

2335 
	}
}

2338 
	$MQTTAsync_unsubs¸ibe
(
MQTTAsync
 
h™dÀ
, c⁄° * 
t›ic
, 
MQTTAsync_ª•⁄£O±i⁄s
* 
ª•⁄£
)

2340 
rc
 = 0;

2341 *c⁄° 
t›ics
[] = {(*)
t›ic
};

2342 
FUNC_ENTRY
;

2343 
rc
 = 
	`MQTTAsync_unsubs¸ibeM™y
(
h™dÀ
, 1, 
t›ics
, 
ª•⁄£
);

2344 
	`FUNC_EXIT_RC
(
rc
);

2345  
rc
;

2346 
	}
}

2349 
	$MQTTAsync_£nd
(
MQTTAsync
 
h™dÀ
, c⁄° * 
de°ö©i⁄Name
, 
∑ylﬂdÀn
, * 
∑ylﬂd
,

2350 
qos
, 
ªèöed
, 
MQTTAsync_ª•⁄£O±i⁄s
* 
ª•⁄£
)

2352 
rc
 = 
MQTTASYNC_SUCCESS
;

2353 
MQTTAsyncs
* 
m
 = 
h™dÀ
;

2354 
MQTTAsync_queuedComm™d
* 
pub
;

2355 
msgid
 = 0;

2357 
FUNC_ENTRY
;

2358 i‡(
m
 =
NULL
 || m->
c
 == NULL)

2359 
rc
 = 
MQTTASYNC_FAILURE
;

2360 i‡(
m
->
c
->
c⁄√˘ed
 == 0)

2361 
rc
 = 
MQTTASYNC_DISCONNECTED
;

2362 i‡(!
	`UTF8_vÆid©eSåög
(
de°ö©i⁄Name
))

2363 
rc
 = 
MQTTASYNC_BAD_UTF8_STRING
;

2364 i‡(
qos
 < 0 || qos > 2)

2365 
rc
 = 
MQTTASYNC_BAD_QOS
;

2366 i‡(
qos
 > 0 && (
msgid
 = 
	`MQTTAsync_assignMsgId
(
m
)) == 0)

2367 
rc
 = 
MQTTASYNC_NO_MORE_MSGIDS
;

2369 i‡(
rc
 !
MQTTASYNC_SUCCESS
)

2370 
exô
;

2373 
pub
 = 
	`mÆloc
((
MQTTAsync_queuedComm™d
));

2374 
	`mem£t
(
pub
, '\0', (
MQTTAsync_queuedComm™d
));

2375 
pub
->
˛õ¡
 = 
m
;

2376 
pub
->
comm™d
.
ty≥
 = 
PUBLISH
;

2377 
pub
->
comm™d
.
tokí
 = 
msgid
;

2378 i‡(
ª•⁄£
)

2380 
pub
->
comm™d
.
⁄Suc˚ss
 = 
ª•⁄£
->onSuccess;

2381 
pub
->
comm™d
.
⁄Faûuª
 = 
ª•⁄£
->onFailure;

2382 
pub
->
comm™d
.
c⁄ãxt
 = 
ª•⁄£
->context;

2383 
ª•⁄£
->
tokí
 = 
pub
->
comm™d
.token;

2385 
pub
->
comm™d
.
dëaûs
.pub.
de°ö©i⁄Name
 = 
	`MQTTSådup
(destinationName);

2386 
pub
->
comm™d
.
dëaûs
.pub.
∑ylﬂdÀn
 =Öayloadlen;

2387 
pub
->
comm™d
.
dëaûs
.pub.
∑ylﬂd
 = 
	`mÆloc
(
∑ylﬂdÀn
);

2388 
	`mem˝y
(
pub
->
comm™d
.
dëaûs
.pub.
∑ylﬂd
,Öaylﬂd, 
∑ylﬂdÀn
);

2389 
pub
->
comm™d
.
dëaûs
.pub.
qos
 = qos;

2390 
pub
->
comm™d
.
dëaûs
.pub.
ªèöed
 =Ñetained;

2391 
rc
 = 
	`MQTTAsync_addComm™d
(
pub
, (pub));

2393 
exô
:

2394 
	`FUNC_EXIT_RC
(
rc
);

2395  
rc
;

2396 
	}
}

2400 
	$MQTTAsync_£ndMesßge
(
MQTTAsync
 
h™dÀ
, c⁄° * 
de°ö©i⁄Name
, c⁄° 
MQTTAsync_mesßge
* 
mesßge
,

2401 
MQTTAsync_ª•⁄£O±i⁄s
* 
ª•⁄£
)

2403 
rc
 = 
MQTTASYNC_SUCCESS
;

2405 
FUNC_ENTRY
;

2406 i‡(
mesßge
 =
NULL
)

2408 
rc
 = 
MQTTASYNC_NULL_PARAMETER
;

2409 
exô
;

2411 i‡(
	`°∫cmp
(
mesßge
->
°ru˘_id
, "MQTM", 4Ë!0 || mesßge->
°ru˘_vîsi⁄
 != 0)

2413 
rc
 = 
MQTTASYNC_BAD_STRUCTURE
;

2414 
exô
;

2417 
rc
 = 
	`MQTTAsync_£nd
(
h™dÀ
, 
de°ö©i⁄Name
, 
mesßge
->
∑ylﬂdÀn
, mesßge->
∑ylﬂd
,

2418 
mesßge
->
qos
, mesßge->
ªèöed
, 
ª•⁄£
);

2419 
exô
:

2420 
	`FUNC_EXIT_RC
(
rc
);

2421  
rc
;

2422 
	}
}

2425 
	$MQTTAsync_ªåy
()

2427 
time_t
 
œ°
 = 0L;

2428 
time_t
 
now
;

2430 
FUNC_ENTRY
;

2431 
	`time
(&(
now
));

2432 i‡(
	`dif·ime
(
now
, 
œ°
) > 5)

2434 
	`time
(&(
œ°
));

2435 
	`MQTTPrŸocﬁ_kì∑live
(
now
);

2436 
	`MQTTPrŸocﬁ_ªåy
(
now
, 1, 0);

2439 
	`MQTTPrŸocﬁ_ªåy
(
now
, 0, 0);

2440 
FUNC_EXIT
;

2441 
	}
}

2444 
	$MQTTAsync_c⁄√˘ög
(
MQTTAsyncs
* 
m
)

2446 
rc
 = -1;

2448 
FUNC_ENTRY
;

2449 i‡(
m
->
c
->
c⁄√˘_°©e
 == 1)

2451 
îr‹
;

2452 
sockÀn_t
 
Àn
 = (
îr‹
);

2454 i‡((
rc
 = 
	`gësock›t
(
m
->
c
->
√t
.
sockë
, 
SOL_SOCKET
, 
SO_ERROR
, (*)&
îr‹
, &
Àn
)) == 0)

2455 
rc
 = 
îr‹
;

2457 i‡(
rc
 != 0)

2458 
exô
;

2460 
	`Sockë_˛órPídögWrôe
(
m
->
c
->
√t
.
sockë
);

2462 #i‡
	`deföed
(
OPENSSL
)

2463 i‡(
m
->
s¶
)

2465 i‡(
	`SSLSockë_£tSockëF‹SSL
(&
m
->
c
->
√t
, m->c->
s¶›ts
Ë!
MQTTASYNC_SUCCESS
)

2467 i‡(
m
->
c
->
£ssi⁄
 !
NULL
)

2468 i‡((
rc
 = 
	`SSL_£t_£ssi⁄
(
m
->
c
->
√t
.
s¶
, m->c->
£ssi⁄
)) != 1)

2469 
	`Log
(
TRACE_MIN
, -1, "FailedÅo set SSL session with stored data,Çon critical");

2470 
rc
 = 
	`SSLSockë_c⁄√˘
(
m
->
c
->
√t
.
s¶
, m->c->√t.
sockë
);

2471 i‡(
rc
 =
TCPSOCKET_INTERRUPTED
)

2473 
rc
 = 
MQTTCLIENT_SUCCESS
;

2474 
m
->
c
->
c⁄√˘_°©e
 = 2;

2476 i‡(
rc
 =
SSL_FATAL
)

2478 
rc
 = 
SOCKET_ERROR
;

2479 
exô
;

2481 i‡(
rc
 == 1)

2483 
rc
 = 
MQTTCLIENT_SUCCESS
;

2484 
m
->
c
->
c⁄√˘_°©e
 = 3;

2485 i‡(
	`MQTTPackë_£nd_c⁄√˘
(
m
->
c
, m->
c⁄√˘
.
dëaûs
.
c⁄n
.
MQTTVîsi⁄
Ë=
SOCKET_ERROR
)

2487 
rc
 = 
SOCKET_ERROR
;

2488 
exô
;

2490 i‡(!
m
->
c
->
˛ón£ssi⁄
 && m->c->
£ssi⁄
 =
NULL
)

2491 
m
->
c
->
£ssi⁄
 = 
	`SSL_gë1_£ssi⁄
(m->c->
√t
.
s¶
);

2496 
rc
 = 
SOCKET_ERROR
;

2497 
exô
;

2503 
m
->
c
->
c⁄√˘_°©e
 = 3;

2504 i‡((
rc
 = 
	`MQTTPackë_£nd_c⁄√˘
(
m
->
c
, m->
c⁄√˘
.
dëaûs
.
c⁄n
.
MQTTVîsi⁄
)Ë=
SOCKET_ERROR
)

2505 
exô
;

2506 #i‡
	`deföed
(
OPENSSL
)

2510 #i‡
	`deföed
(
OPENSSL
)

2511 i‡(
m
->
c
->
c⁄√˘_°©e
 == 2)

2513 i‡((
rc
 = 
	`SSLSockë_c⁄√˘
(
m
->
c
->
√t
.
s¶
, m->c->√t.
sockë
)) != 1)

2514 
exô
;

2516 if(!
m
->
c
->
˛ón£ssi⁄
 && m->c->
£ssi⁄
 =
NULL
)

2517 
m
->
c
->
£ssi⁄
 = 
	`SSL_gë1_£ssi⁄
(m->c->
√t
.
s¶
);

2518 
m
->
c
->
c⁄√˘_°©e
 = 3;

2519 i‡((
rc
 = 
	`MQTTPackë_£nd_c⁄√˘
(
m
->
c
, m->
c⁄√˘
.
dëaûs
.
c⁄n
.
MQTTVîsi⁄
)Ë=
SOCKET_ERROR
)

2520 
exô
;

2524 
exô
:

2525 i‡((
rc
 !0 &&Ñ¯!
TCPSOCKET_INTERRUPTED
 && 
m
->
c
->
c⁄√˘_°©e
 !2Ë|| (r¯=
SSL_FATAL
))

2527 i‡(
	`MQTTAsync_checkC⁄n
(&
m
->
c⁄√˘
, m))

2529 
MQTTAsync_queuedComm™d
* 
c⁄n
;

2531 
	`MQTTAsync_˛o£O∆y
(
m
->
c
);

2533 
c⁄n
 = 
	`mÆloc
((
MQTTAsync_queuedComm™d
));

2534 
	`mem£t
(
c⁄n
, '\0', (
MQTTAsync_queuedComm™d
));

2535 
c⁄n
->
˛õ¡
 = 
m
;

2536 
c⁄n
->
comm™d
 = 
m
->
c⁄√˘
;

2537 
	`Log
(
TRACE_MIN
, -1, "Connect failed, moreÅoÅry");

2538 
	`MQTTAsync_addComm™d
(
c⁄n
, (
m
->
c⁄√˘
));

2542 
	`MQTTAsync_˛o£Sessi⁄
(
m
->
c
);

2543 
	`MQTTAsync_‰ìC⁄√˘
(
m
->
c⁄√˘
);

2544 i‡(
m
->
c⁄√˘
.
⁄Faûuª
)

2546 
	`Log
(
TRACE_MIN
, -1, "CÆlög c⁄√˘ faûuª f‹ clõ¡ %s", 
m
->
c
->
˛õ¡ID
);

2547 (*(
m
->
c⁄√˘
.
⁄Faûuª
))(m->c⁄√˘.
c⁄ãxt
, 
NULL
);

2551 
	`FUNC_EXIT_RC
(
rc
);

2552  
rc
;

2553 
	}
}

2556 
MQTTPackë
* 
	$MQTTAsync_cy˛e
(* 
sock
, 
timeout
, * 
rc
)

2558 
timevÆ
 
ç
 = {0L, 0L};

2559 
Ack
 
ack
;

2560 
MQTTPackë
* 
∑ck
 = 
NULL
;

2561 
nosockës_cou¡
 = 0;

2563 
FUNC_ENTRY
;

2564 i‡(
timeout
 > 0L)

2566 
ç
.
tv_£c
 = 
timeout
 / 1000;

2567 
ç
.
tv_u£c
 = (
timeout
 % 1000) * 1000;

2570 #i‡
	`deföed
(
OPENSSL
)

2571 i‡((*
sock
 = 
	`SSLSockë_gëPídögRód
()) == -1)

2575 *
sock
 = 
	`Sockë_gëRódySockë
(0, &
ç
);

2576 i‡(!
to°›
 && *
sock
 =0 && (
ç
.
tv_£c
 > 0L ||Åp.
tv_u£c
 > 0L))

2578 
	`MQTTAsync_¶ìp
(100L);

2580 i‡(
s
.
˛õ¡sds
->
cou¡
 == 0)

2582 i‡(++
nosockës_cou¡
 == 50)

2583 
to°›
 = 1;

2588 
nosockës_cou¡
 = 0;

2589 #i‡
	`deföed
(
OPENSSL
)

2592 
	`MQTTAsync_lock_muãx
(
mqâasync_muãx
);

2593 i‡(*
sock
 > 0)

2595 
MQTTAsyncs
* 
m
 = 
NULL
;

2596 i‡(
	`Li°FödIãm
(
h™dÀs
, 
sock
, 
˛õ¡SockCom∑ª
Ë!
NULL
)

2597 
m
 = (
MQTTAsync
)(
h™dÀs
->
cuºít
->
c⁄ã¡
);

2598 i‡(
m
 !
NULL
)

2600 i‡(
m
->
c
->
c⁄√˘_°©e
 == 1 || m->c->connect_state == 2)

2601 *
rc
 = 
	`MQTTAsync_c⁄√˘ög
(
m
);

2603 
∑ck
 = 
	`MQTTPackë_Fa˘‹y
(&
m
->
c
->
√t
, 
rc
);

2604 i‡(
m
->
c
->
c⁄√˘_°©e
 =3 && *
rc
 =
SOCKET_ERROR
)

2606 
	`Log
(
TRACE_MINIMUM
, -1, "CONNECT sent but MQTTPacket_Factory hasÑeturned SOCKET_ERROR");

2607 i‡(
	`MQTTAsync_checkC⁄n
(&
m
->
c⁄√˘
, m))

2609 
MQTTAsync_queuedComm™d
* 
c⁄n
;

2611 
	`MQTTAsync_˛o£O∆y
(
m
->
c
);

2613 
c⁄n
 = 
	`mÆloc
((
MQTTAsync_queuedComm™d
));

2614 
	`mem£t
(
c⁄n
, '\0', (
MQTTAsync_queuedComm™d
));

2615 
c⁄n
->
˛õ¡
 = 
m
;

2616 
c⁄n
->
comm™d
 = 
m
->
c⁄√˘
;

2617 
	`Log
(
TRACE_MIN
, -1, "Connect failed, moreÅoÅry");

2618 
	`MQTTAsync_addComm™d
(
c⁄n
, (
m
->
c⁄√˘
));

2622 
	`MQTTAsync_˛o£Sessi⁄
(
m
->
c
);

2623 
	`MQTTAsync_‰ìC⁄√˘
(
m
->
c⁄√˘
);

2624 i‡(
m
->
c⁄√˘
.
⁄Faûuª
)

2626 
	`Log
(
TRACE_MIN
, -1, "CÆlög c⁄√˘ faûuª f‹ clõ¡ %s", 
m
->
c
->
˛õ¡ID
);

2627 (*(
m
->
c⁄√˘
.
⁄Faûuª
))(m->c⁄√˘.
c⁄ãxt
, 
NULL
);

2632 i‡(
∑ck
)

2634 
‰ìd
 = 1;

2637 i‡(
∑ck
->
hódî
.
bôs
.
ty≥
 =
PUBLISH
)

2638 *
rc
 = 
	`MQTTPrŸocﬁ_h™dÀPublishes
(
∑ck
, *
sock
);

2639 i‡(
∑ck
->
hódî
.
bôs
.
ty≥
 =
PUBACK
 ||Öack->hódî.bôs.ty≥ =
PUBCOMP
)

2641 
msgid
;

2643 
ack
 = (
∑ck
->
hódî
.
bôs
.
ty≥
 =
PUBCOMP
Ë? *(
Pubcomp
*Ìack : *(
Puback
*)pack;

2644 
msgid
 = 
ack
.
msgId
;

2645 *
rc
 = (
∑ck
->
hódî
.
bôs
.
ty≥
 =
PUBCOMP
) ?

2646 
	`MQTTPrŸocﬁ_h™dÀPubcomps
(
∑ck
, *
sock
Ë: 
	`MQTTPrŸocﬁ_h™dÀPubacks
(pack, *sock);

2647 i‡(!
m
)

2648 
	`Log
(
LOG_ERROR
, -1, "PUBCOMP o∏PUBACKÑe˚ived f‹Çÿ˛õ¡, msgid %d", 
msgid
);

2649 i‡(
m
)

2651 
Li°EÀmít
* 
cuºít
 = 
NULL
;

2653 i‡(
m
->
dc
)

2655 
	`Log
(
TRACE_MIN
, -1, "CÆlög dñivîyCom∂ëêf‹ clõ¡ %s, msgid %d", 
m
->
c
->
˛õ¡ID
, 
msgid
);

2656 (*(
m
->
dc
))(m->
c⁄ãxt
, 
msgid
);

2659 
	`Li°NextEÀmít
(
m
->
ª•⁄£s
, &
cuºít
))

2661 
MQTTAsync_queuedComm™d
* 
comm™d
 = (MQTTAsync_queuedComm™d*)(
cuºít
->
c⁄ã¡
);

2662 i‡(
comm™d
->comm™d.
tokí
 =
msgid
)

2664 i‡(!
	`Li°Dëach
(
m
->
ª•⁄£s
, 
comm™d
))

2665 
	`Log
(
LOG_ERROR
, -1, "Publish commandÇotÑemoved from commandÜist");

2666 i‡(
comm™d
->comm™d.
⁄Suc˚ss
)

2668 
MQTTAsync_suc˚ssD©a
 
d©a
;

2670 
d©a
.
tokí
 = 
comm™d
->command.token;

2671 
d©a
.
Æt
.
pub
.
de°ö©i⁄Name
 = 
comm™d
->comm™d.
dëaûs
.pub.destinationName;

2672 
d©a
.
Æt
.
pub
.
mesßge
.
∑ylﬂd
 = 
comm™d
->comm™d.
dëaûs
.pub.payload;

2673 
d©a
.
Æt
.
pub
.
mesßge
.
∑ylﬂdÀn
 = 
comm™d
->comm™d.
dëaûs
.pub.payloadlen;

2674 
d©a
.
Æt
.
pub
.
mesßge
.
qos
 = 
comm™d
->comm™d.
dëaûs
.pub.qos;

2675 
d©a
.
Æt
.
pub
.
mesßge
.
ªèöed
 = 
comm™d
->comm™d.
dëaûs
.pub.retained;

2676 
	`Log
(
TRACE_MIN
, -1, "CÆlögÖublish suc˚s†f‹ clõ¡ %s", 
m
->
c
->
˛õ¡ID
);

2677 (*(
comm™d
->comm™d.
⁄Suc˚ss
))(comm™d->comm™d.
c⁄ãxt
, &
d©a
);

2679 
	`MQTTAsync_‰ìComm™d
(
comm™d
);

2685 i‡(
∑ck
->
hódî
.
bôs
.
ty≥
 =
PUBREC
)

2686 *
rc
 = 
	`MQTTPrŸocﬁ_h™dÀPubªcs
(
∑ck
, *
sock
);

2687 i‡(
∑ck
->
hódî
.
bôs
.
ty≥
 =
PUBREL
)

2688 *
rc
 = 
	`MQTTPrŸocﬁ_h™dÀPubªls
(
∑ck
, *
sock
);

2689 i‡(
∑ck
->
hódî
.
bôs
.
ty≥
 =
PINGRESP
)

2690 *
rc
 = 
	`MQTTPrŸocﬁ_h™dÀPögª•s
(
∑ck
, *
sock
);

2692 
‰ìd
 = 0;

2693 i‡(
‰ìd
)

2694 
∑ck
 = 
NULL
;

2697 
	`MQTTAsync_ªåy
();

2698 
	`MQTTAsync_u∆ock_muãx
(
mqâasync_muãx
);

2699 
	`FUNC_EXIT_RC
(*
rc
);

2700  
∑ck
;

2701 
	}
}

2704 
	$pubCom∑ª
(* 
a
, * 
b
)

2706 
Mesßges
* 
msg
 = (Mesßges*)
a
;

2707  
msg
->
publish
 =(
Publiˇti⁄s
*)
b
;

2708 
	}
}

2711 
	$MQTTAsync_gëPídögTokís
(
MQTTAsync
 
h™dÀ
, 
MQTTAsync_tokí
 **
tokís
)

2713 
rc
 = 
MQTTASYNC_SUCCESS
;

2714 
MQTTAsyncs
* 
m
 = 
h™dÀ
;

2715 
Li°EÀmít
* 
cuºít
 = 
NULL
;

2716 
cou¡
 = 0;

2718 
FUNC_ENTRY
;

2719 
	`MQTTAsync_lock_muãx
(
mqâasync_muãx
);

2720 *
tokís
 = 
NULL
;

2722 i‡(
m
 =
NULL
)

2724 
rc
 = 
MQTTASYNC_FAILURE
;

2725 
exô
;

2729 
	`Li°NextEÀmít
(
comm™ds
, &
cuºít
))

2731 
MQTTAsync_queuedComm™d
* 
cmd
 = (MQTTAsync_queuedComm™d*)(
cuºít
->
c⁄ã¡
);

2733 i‡(
cmd
->
˛õ¡
 =
m
)

2734 
cou¡
++;

2736 i‡(
m
->
c
)

2737 
cou¡
 +
m
->
c
->
outboundMsgs
->count;

2738 i‡(
cou¡
 == 0)

2739 
exô
;

2740 *
tokís
 = 
	`mÆloc
((
MQTTAsync_tokí
Ë* (
cou¡
 + 1));

2743 
cuºít
 = 
NULL
;

2744 
cou¡
 = 0;

2745 
	`Li°NextEÀmít
(
comm™ds
, &
cuºít
))

2747 
MQTTAsync_queuedComm™d
* 
cmd
 = (MQTTAsync_queuedComm™d*)(
cuºít
->
c⁄ã¡
);

2749 i‡(
cmd
->
˛õ¡
 =
m
)

2750 (*
tokís
)[
cou¡
++] = 
cmd
->
comm™d
.
tokí
;

2754 i‡(
m
->
c
 && m->c->
outboundMsgs
->
cou¡
 > 0)

2756 
cuºít
 = 
NULL
;

2757 
	`Li°NextEÀmít
(
m
->
c
->
outboundMsgs
, &
cuºít
))

2759 
Mesßges
* 
m
 = (Mesßges*)(
cuºít
->
c⁄ã¡
);

2760 (*
tokís
)[
cou¡
++] = 
m
->
msgid
;

2763 (*
tokís
)[
cou¡
] = -1;

2765 
exô
:

2766 
	`MQTTAsync_u∆ock_muãx
(
mqâasync_muãx
);

2767 
	`FUNC_EXIT_RC
(
rc
);

2768  
rc
;

2769 
	}
}

2772 
	$MQTTAsync_isCom∂ëe
(
MQTTAsync
 
h™dÀ
, 
MQTTAsync_tokí
 
dt
)

2774 
rc
 = 
MQTTASYNC_SUCCESS
;

2775 
MQTTAsyncs
* 
m
 = 
h™dÀ
;

2776 
Li°EÀmít
* 
cuºít
 = 
NULL
;

2778 
FUNC_ENTRY
;

2779 
	`MQTTAsync_lock_muãx
(
mqâasync_muãx
);

2781 i‡(
m
 =
NULL
)

2783 
rc
 = 
MQTTASYNC_FAILURE
;

2784 
exô
;

2788 
cuºít
 = 
NULL
;

2789 
	`Li°NextEÀmít
(
comm™ds
, &
cuºít
))

2791 
MQTTAsync_queuedComm™d
* 
cmd
 = (MQTTAsync_queuedComm™d*)(
cuºít
->
c⁄ã¡
);

2793 i‡(
cmd
->
˛õ¡
 =
m
 && cmd->
comm™d
.
tokí
 =
dt
)

2794 
exô
;

2798 i‡(
m
->
c
 && m->c->
outboundMsgs
->
cou¡
 > 0)

2800 
cuºít
 = 
NULL
;

2801 
	`Li°NextEÀmít
(
m
->
c
->
outboundMsgs
, &
cuºít
))

2803 
Mesßges
* 
m
 = (Mesßges*)(
cuºít
->
c⁄ã¡
);

2804 i‡(
m
->
msgid
 =
dt
)

2805 
exô
;

2808 
rc
 = 
MQTTASYNC_TRUE
;

2810 
exô
:

2811 
	`MQTTAsync_u∆ock_muãx
(
mqâasync_muãx
);

2812 
	`FUNC_EXIT_RC
(
rc
);

2813  
rc
;

2814 
	}
}

2817 
	$MQTTAsync_waôF‹Com∂ëi⁄
(
MQTTAsync
 
h™dÀ
, 
MQTTAsync_tokí
 
dt
, 
timeout
)

2819 
rc
 = 
MQTTASYNC_FAILURE
;

2820 
START_TIME_TYPE
 
°¨t
 = 
	`MQTTAsync_°¨t_˛ock
();

2821 
ñ≠£d
 = 0L;

2822 
MQTTAsyncs
* 
m
 = 
h™dÀ
;

2824 
FUNC_ENTRY
;

2825 
	`MQTTAsync_lock_muãx
(
mqâasync_muãx
);

2827 i‡(
m
 =
NULL
 || m->
c
 == NULL)

2829 
rc
 = 
MQTTASYNC_FAILURE
;

2830 
exô
;

2832 i‡(
m
->
c
->
c⁄√˘ed
 == 0)

2834 
rc
 = 
MQTTASYNC_DISCONNECTED
;

2835 
exô
;

2837 
	`MQTTAsync_u∆ock_muãx
(
mqâasync_muãx
);

2839 i‡(
	`MQTTAsync_isCom∂ëe
(
h™dÀ
, 
dt
) == 1)

2841 
rc
 = 
MQTTASYNC_SUCCESS
;

2842 
exô
;

2845 
ñ≠£d
 = 
	`MQTTAsync_ñ≠£d
(
°¨t
);

2846 
ñ≠£d
 < 
timeout
)

2848 
	`MQTTAsync_¶ìp
(100);

2849 i‡(
	`MQTTAsync_isCom∂ëe
(
h™dÀ
, 
dt
) == 1)

2851 
rc
 = 
MQTTASYNC_SUCCESS
;

2852 
exô
;

2854 
ñ≠£d
 = 
	`MQTTAsync_ñ≠£d
(
°¨t
);

2856 
exô
:

2857 
	`FUNC_EXIT_RC
(
rc
);

2858  
rc
;

2859 
	}
}

2863 
	$MQTTAsync_£tTø˚Levñ
(
MQTTASYNC_TRACE_LEVELS
 
Àvñ
)

2865 
	`Log_£tTø˚Levñ
((
LOG_LEVELS
)
Àvñ
);

2866 
	}
}

2869 
	$MQTTAsync_£tTø˚CÆlback
(
MQTTAsync_åa˚CÆlback
* 
ˇŒback
)

2871 
	`Log_£tTø˚CÆlback
((
Log_åa˚CÆlback
*)
ˇŒback
);

2872 
	}
}

2875 
MQTTAsync_«meVÆue
* 
	$MQTTAsync_gëVîsi⁄Info
()

2877 
	#MAX_INFO_STRINGS
 8

	)

2878 
MQTTAsync_«meVÆue
 
liböfo
[
MAX_INFO_STRINGS
 + 1];

2879 
i
 = 0;

2881 
liböfo
[
i
].
«me
 = "ProductÇame";

2882 
liböfo
[
i
++].
vÆue
 = "Paho Asynchronous MQTT C Client Library";

2884 
liböfo
[
i
].
«me
 = "Version";

2885 
liböfo
[
i
++].
vÆue
 = 
CLIENT_VERSION
;

2887 
liböfo
[
i
].
«me
 = "BuildÜevel";

2888 
liböfo
[
i
++].
vÆue
 = 
BUILD_TIMESTAMP
;

2889 #i‡
	`deföed
(
OPENSSL
)

2890 
liböfo
[
i
].
«me
 = "OpenSSL version";

2891 
liböfo
[
i
++].
vÆue
 = 
	`SSLóy_vîsi⁄
(
SSLEAY_VERSION
);

2893 
liböfo
[
i
].
«me
 = "OpenSSL flags";

2894 
liböfo
[
i
++].
vÆue
 = 
	`SSLóy_vîsi⁄
(
SSLEAY_CFLAGS
);

2896 
liböfo
[
i
].
«me
 = "OpenSSL buildÅimestamp";

2897 
liböfo
[
i
++].
vÆue
 = 
	`SSLóy_vîsi⁄
(
SSLEAY_BUILT_ON
);

2899 
liböfo
[
i
].
«me
 = "OpenSSLÖlatform";

2900 
liböfo
[
i
++].
vÆue
 = 
	`SSLóy_vîsi⁄
(
SSLEAY_PLATFORM
);

2902 
liböfo
[
i
].
«me
 = "OpenSSL directory";

2903 
liböfo
[
i
++].
vÆue
 = 
	`SSLóy_vîsi⁄
(
SSLEAY_DIR
);

2905 
liböfo
[
i
].
«me
 = 
NULL
;

2906 
liböfo
[
i
].
vÆue
 = 
NULL
;

2907  
liböfo
;

2908 
	}
}

	@paho-c/src/MQTTAsync.h

79 #i‡
deföed
(
__˝lu•lus
)

83 #i‡!
deföed
(
MQTTASYNC_H
)

84 
	#MQTTASYNC_H


	)

86 #i‡
deföed
(
WIN32
Ë|| deföed(
WIN64
)

87 
	#DLLImp‹t
 
	`__de˛•ec
(
dŒimp‹t
)

	)

88 
	#DLLExp‹t
 
	`__de˛•ec
(
dŒexp‹t
)

	)

90 
	#DLLImp‹t
 

	)

91 
	#DLLExp‹t
 
	`__©åibuã__
 ((
	`visibûôy
 ("deÁu…")))

	)

94 
	~<°dio.h
>

97 #i‡!
deföed
(
NO_PERSISTENCE
)

98 
	~"MQTTClõ¡Pîsi°í˚.h
"

105 
	#MQTTASYNC_SUCCESS
 0

	)

110 
	#MQTTASYNC_FAILURE
 -1

	)

114 
	#MQTTASYNC_PERSISTENCE_ERROR
 -2

	)

119 
	#MQTTASYNC_DISCONNECTED
 -3

	)

124 
	#MQTTASYNC_MAX_MESSAGES_INFLIGHT
 -4

	)

128 
	#MQTTASYNC_BAD_UTF8_STRING
 -5

	)

132 
	#MQTTASYNC_NULL_PARAMETER
 -6

	)

138 
	#MQTTASYNC_TOPICNAME_TRUNCATED
 -7

	)

143 
	#MQTTASYNC_BAD_STRUCTURE
 -8

	)

147 
	#MQTTASYNC_BAD_QOS
 -9

	)

151 
	#MQTTASYNC_NO_MORE_MSGIDS
 -10

	)

156 
	#MQTTVERSION_DEFAULT
 0

	)

160 
	#MQTTVERSION_3_1
 3

	)

164 
	#MQTTVERSION_3_1_1
 4

	)

168 
	#MQTT_BAD_SUBSCRIBE
 0x80

	)

174 * 
	tMQTTAsync
;

184 
	tMQTTAsync_tokí
;

195 
	m°ru˘_id
[4];

197 
	m°ru˘_vîsi⁄
;

199 
	m∑ylﬂdÀn
;

201 * 
	m∑ylﬂd
;

215 
	mqos
;

234 
	mªèöed
;

241 
	mdup
;

245 
	mmsgid
;

246 } 
	tMQTTAsync_mesßge
;

248 
	#MQTTAsync_mesßge_öôülizî
 { {'M', 'Q', 'T', 'M'}, 0, 0, 
NULL
, 0, 0, 0, 0 }

	)

276 
	tMQTTAsync_mesßgeAºived
(* 
	tc⁄ãxt
, * 
	tt›icName
, 
	tt›icLí
, 
	tMQTTAsync_mesßge
* 
	tmesßge
);

296 
	tMQTTAsync_dñivîyCom∂ëe
(* 
	tc⁄ãxt
, 
	tMQTTAsync_tokí
 
	ttokí
);

313 
	tMQTTAsync_c⁄√˘i⁄Lo°
(* 
	tc⁄ãxt
, * 
	tˇu£
);

319 
MQTTAsync_tokí
 
	mtokí
;

321 
	mcode
;

323 * 
	mmesßge
;

324 } 
	tMQTTAsync_ÁûuªD©a
;

330 
MQTTAsync_tokí
 
	mtokí
;

335 
	mqos
;

337 * 
	mqosLi°
;

341 
MQTTAsync_mesßge
 
	mmesßge
;

342 * 
	mde°ö©i⁄Name
;

343 } 
	mpub
;

347 * 
	m£rvîURI
;

348 
	mMQTTVîsi⁄
;

349 
	m£ssi⁄Pª£¡
;

350 } 
	mc⁄√˘
;

351 } 
	mÆt
;

352 } 
	tMQTTAsync_suc˚ssD©a
;

364 
	tMQTTAsync_⁄Suc˚ss
(* 
	tc⁄ãxt
, 
	tMQTTAsync_suc˚ssD©a
* 
	tª•⁄£
);

376 
	tMQTTAsync_⁄Faûuª
(* 
	tc⁄ãxt
, 
	tMQTTAsync_ÁûuªD©a
* 
	tª•⁄£
);

381 
	m°ru˘_id
[4];

383 
	m°ru˘_vîsi⁄
;

389 
MQTTAsync_⁄Suc˚ss
* 
	m⁄Suc˚ss
;

395 
MQTTAsync_⁄Faûuª
* 
	m⁄Faûuª
;

401 * 
	mc⁄ãxt
;

402 
MQTTAsync_tokí
 
	mtokí
;

403 } 
	tMQTTAsync_ª•⁄£O±i⁄s
;

405 
	#MQTTAsync_ª•⁄£O±i⁄s_öôülizî
 { {'M', 'Q', 'T', 'R'}, 0, 
NULL
, NULL, 0, 0 }

	)

436 
DLLExp‹t
 
MQTTAsync_£tCÆlbacks
(
MQTTAsync
 
h™dÀ
, * 
c⁄ãxt
, 
MQTTAsync_c⁄√˘i⁄Lo°
* 
˛
,

437 
MQTTAsync_mesßgeAºived
* 
ma
, 
MQTTAsync_dñivîyCom∂ëe
* 
dc
);

483 
DLLExp‹t
 
MQTTAsync_¸óã
(
MQTTAsync
* 
h™dÀ
, c⁄° * 
£rvîURI
, c⁄° * 
˛õ¡Id
,

484 
≥rsi°í˚_ty≥
, * 
≥rsi°í˚_c⁄ãxt
);

501 c⁄° 
	m°ru˘_id
[4];

503 
	m°ru˘_vîsi⁄
;

505 c⁄° * 
	mt›icName
;

507 c⁄° * 
	mmesßge
;

511 
	mªèöed
;

516 
	mqos
;

517 } 
	tMQTTAsync_wûlO±i⁄s
;

519 
	#MQTTAsync_wûlO±i⁄s_öôülizî
 { {'M', 'Q', 'T', 'W'}, 0, 
NULL
, NULL, 0, 0 }

	)

536 c⁄° 
	m°ru˘_id
[4];

538 
	m°ru˘_vîsi⁄
;

541 c⁄° * 
	måu°St‹e
;

546 c⁄° * 
	mkeySt‹e
;

551 c⁄° * 
	m¥iv©eKey
;

553 c⁄° * 
	m¥iv©eKeyPassw‹d
;

563 c⁄° * 
	míabÀdCùhîSuôes
;

566 
	míabÀSîvîCîtAuth
;

568 } 
	tMQTTAsync_SSLO±i⁄s
;

570 
	#MQTTAsync_SSLO±i⁄s_öôülizî
 { {'M', 'Q', 'T', 'S'}, 0, 
NULL
, NULL, NULL, NULL, NULL, 1 }

	)

580 c⁄° 
	m°ru˘_id
[4];

586 
	m°ru˘_vîsi⁄
;

597 
	mkìpAliveI¡îvÆ
;

619 
	m˛ón£ssi⁄
;

623 
	mmaxInÊight
;

629 
MQTTAsync_wûlO±i⁄s
* 
	mwûl
;

635 c⁄° * 
	mu£∫ame
;

641 c⁄° * 
	m∑ssw‹d
;

645 
	mc⁄√˘Timeout
;

649 
	mªåyI¡îvÆ
;

654 
MQTTAsync_SSLO±i⁄s
* 
	ms¶
;

660 
MQTTAsync_⁄Suc˚ss
* 
	m⁄Suc˚ss
;

666 
MQTTAsync_⁄Faûuª
* 
	m⁄Faûuª
;

672 * 
	mc⁄ãxt
;

676 
	m£rvîURIcou¡
;

685 * c⁄°* 
	m£rvîURIs
;

692 
	mMQTTVîsi⁄
;

693 } 
	tMQTTAsync_c⁄√˘O±i⁄s
;

696 
	#MQTTAsync_c⁄√˘O±i⁄s_öôülizî
 { {'M', 'Q', 'T', 'C'}, 3, 60, 1, 10, 
NULL
, NULL, NULL, 30, 0, NULL, NULL, NULL, NULL, 0, NULL, 0}

	)

718 
DLLExp‹t
 
MQTTAsync_c⁄√˘
(
MQTTAsync
 
h™dÀ
, c⁄° 
MQTTAsync_c⁄√˘O±i⁄s
* 
›ti⁄s
);

724 c⁄° 
	m°ru˘_id
[4];

726 
	m°ru˘_vîsi⁄
;

731 
	mtimeout
;

737 
MQTTAsync_⁄Suc˚ss
* 
	m⁄Suc˚ss
;

743 
MQTTAsync_⁄Faûuª
* 
	m⁄Faûuª
;

749 * 
	mc⁄ãxt
;

750 } 
	tMQTTAsync_disc⁄√˘O±i⁄s
;

752 
	#MQTTAsync_disc⁄√˘O±i⁄s_öôülizî
 { {'M', 'Q', 'T', 'D'}, 0, 0, 
NULL
, NULL, NULL }

	)

773 
DLLExp‹t
 
MQTTAsync_disc⁄√˘
(
MQTTAsync
 
h™dÀ
, c⁄° 
MQTTAsync_disc⁄√˘O±i⁄s
* 
›ti⁄s
);

783 
DLLExp‹t
 
MQTTAsync_isC⁄√˘ed
(
MQTTAsync
 
h™dÀ
);

800 
DLLExp‹t
 
MQTTAsync_subs¸ibe
(
MQTTAsync
 
h™dÀ
, c⁄° * 
t›ic
, 
qos
, 
MQTTAsync_ª•⁄£O±i⁄s
* 
ª•⁄£
);

820 
DLLExp‹t
 
MQTTAsync_subs¸ibeM™y
(
MQTTAsync
 
h™dÀ
, 
cou¡
, * c⁄°* 
t›ic
, * 
qos
, 
MQTTAsync_ª•⁄£O±i⁄s
* 
ª•⁄£
);

834 
DLLExp‹t
 
MQTTAsync_unsubs¸ibe
(
MQTTAsync
 
h™dÀ
, c⁄° * 
t›ic
, 
MQTTAsync_ª•⁄£O±i⁄s
* 
ª•⁄£
);

848 
DLLExp‹t
 
MQTTAsync_unsubs¸ibeM™y
(
MQTTAsync
 
h™dÀ
, 
cou¡
, * c⁄°* 
t›ic
, 
MQTTAsync_ª•⁄£O±i⁄s
* 
ª•⁄£
);

869 
DLLExp‹t
 
MQTTAsync_£nd
(
MQTTAsync
 
h™dÀ
, c⁄° * 
de°ö©i⁄Name
, 
∑ylﬂdÀn
, * 
∑ylﬂd
, 
qos
, 
ªèöed
,

870 
MQTTAsync_ª•⁄£O±i⁄s
* 
ª•⁄£
);

888 
DLLExp‹t
 
MQTTAsync_£ndMesßge
(
MQTTAsync
 
h™dÀ
, c⁄° * 
de°ö©i⁄Name
, c⁄° 
MQTTAsync_mesßge
* 
msg
, 
MQTTAsync_ª•⁄£O±i⁄s
* 
ª•⁄£
);

909 
DLLExp‹t
 
MQTTAsync_gëPídögTokís
(
MQTTAsync
 
h™dÀ
, 
MQTTAsync_tokí
 **
tokís
);

911 
	#MQTTASYNC_TRUE
 1

	)

912 
DLLExp‹t
 
MQTTAsync_isCom∂ëe
(
MQTTAsync
 
h™dÀ
, 
MQTTAsync_tokí
 
dt
);

914 
DLLExp‹t
 
MQTTAsync_waôF‹Com∂ëi⁄
(
MQTTAsync
 
h™dÀ
, 
MQTTAsync_tokí
 
dt
, 
timeout
);

927 
DLLExp‹t
 
MQTTAsync_‰ìMesßge
(
MQTTAsync_mesßge
** 
msg
);

937 
DLLExp‹t
 
MQTTAsync_‰ì
(* 
±r
);

946 
DLLExp‹t
 
MQTTAsync_de°roy
(
MQTTAsync
* 
h™dÀ
);

950 
	eMQTTASYNC_TRACE_LEVELS


952 
	mMQTTASYNC_TRACE_MAXIMUM
 = 1,

953 
	mMQTTASYNC_TRACE_MEDIUM
,

954 
	mMQTTASYNC_TRACE_MINIMUM
,

955 
	mMQTTASYNC_TRACE_PROTOCOL
,

956 
	mMQTTASYNC_TRACE_ERROR
,

957 
	mMQTTASYNC_TRACE_SEVERE
,

958 
	mMQTTASYNC_TRACE_FATAL
,

967 
DLLExp‹t
 
MQTTAsync_£tTø˚Levñ
(
MQTTASYNC_TRACE_LEVELS
 
Àvñ
);

978 
	tMQTTAsync_åa˚CÆlback
(
	tMQTTASYNC_TRACE_LEVELS
 
	tÀvñ
, * 
	tmesßge
);

986 
DLLExp‹t
 
MQTTAsync_£tTø˚CÆlback
(
MQTTAsync_åa˚CÆlback
* 
ˇŒback
);

991 c⁄° * 
	m«me
;

992 c⁄° * 
	mvÆue
;

993 } 
	tMQTTAsync_«meVÆue
;

1001 
DLLExp‹t
 
MQTTAsync_«meVÆue
* 
MQTTAsync_gëVîsi⁄Info
();

1519 #ifde‡
__˝lu•lus


	@paho-c/src/MQTTClient.c

37 
	#_GNU_SOURCE


	)

38 
	~<°dlib.h
>

39 #i‡!
deföed
(
WIN32
Ë&& !deföed(
WIN64
)

40 
	~<sys/time.h
>

43 
	~"MQTTClõ¡.h
"

44 #i‡!
deföed
(
NO_PERSISTENCE
)

45 
	~"MQTTPîsi°í˚.h
"

48 
	~"utf-8.h
"

49 
	~"MQTTPrŸocﬁ.h
"

50 
	~"MQTTPrŸocﬁOut.h
"

51 
	~"Thªad.h
"

52 
	~"SockëBuf„r.h
"

53 
	~"SèckTø˚.h
"

54 
	~"Hóp.h
"

56 #i‡
deföed
(
OPENSSL
)

57 
	~<›ís¶/s¶.h
>

60 
	#URI_TCP
 "t˝://"

	)

62 
	#BUILD_TIMESTAMP
 "Su¿Ju»12 19:03:55 CST 2015"

	)

63 
	#CLIENT_VERSION
 "1.0.3"

	)

65 * 
	g˛õ¡_time°amp_eye
 = "MQTTClõ¡V3_Time°am∞" 
BUILD_TIMESTAMP
;

66 * 
	g˛õ¡_vîsi⁄_eye
 = "MQTTClõ¡V3_Vîsi⁄ " 
CLIENT_VERSION
;

68 
Clõ¡Sèãs
 
	gClõ¡Sèã
 =

70 
CLIENT_VERSION
,

71 
NULL


74 
Clõ¡Sèãs
* 
	gb°©e
 = &
Clõ¡Sèã
;

76 
MQTTPrŸocﬁ
 
	g°©e
;

78 #i‡
deföed
(
WIN32
Ë|| deföed(
WIN64
)

79 
muãx_ty≥
 
	gmqâ˛õ¡_muãx
 = 
NULL
;

80 
muãx_ty≥
 
	gsockë_muãx
 = 
NULL
;

81 
muãx_ty≥
 
°ack_muãx
;

82 
muãx_ty≥
 
hóp_muãx
;

83 
muãx_ty≥
 
log_muãx
;

84 
BOOL
 
APIENTRY
 
	$DŒMaö
(
HANDLE
 
hModuÀ
,

85 
DWORD
 
ul_ªas⁄_f‹_ˇŒ
,

86 
LPVOID
 
ÕRe£rved
)

88 
ul_ªas⁄_f‹_ˇŒ
)

90 
DLL_PROCESS_ATTACH
:

91 
	`Log
(
TRACE_MAX
, -1, "DLLÖrocessáttach");

92 i‡(
mqâ˛õ¡_muãx
 =
NULL
)

94 
mqâ˛õ¡_muãx
 = 
	`Cª©eMuãx
(
NULL
, 0, NULL);

95 
°ack_muãx
 = 
	`Cª©eMuãx
(
NULL
, 0, NULL);

96 
hóp_muãx
 = 
	`Cª©eMuãx
(
NULL
, 0, NULL);

97 
log_muãx
 = 
	`Cª©eMuãx
(
NULL
, 0, NULL);

98 
sockë_muãx
 = 
	`Cª©eMuãx
(
NULL
, 0, NULL);

100 
DLL_THREAD_ATTACH
:

101 
	`Log
(
TRACE_MAX
, -1, "DLLÅhreadáttach");

102 
DLL_THREAD_DETACH
:

103 
	`Log
(
TRACE_MAX
, -1, "DLLÅhread detach");

104 
DLL_PROCESS_DETACH
:

105 
	`Log
(
TRACE_MAX
, -1, "DLLÖrocess detach");

107  
TRUE
;

108 
	}
}

110 
±hªad_muãx_t
 
	gmqâ˛õ¡_muãx_°‹e
 = 
PTHREAD_MUTEX_INITIALIZER
;

111 
muãx_ty≥
 
	gmqâ˛õ¡_muãx
 = &
mqâ˛õ¡_muãx_°‹e
;

112 
±hªad_muãx_t
 
	gsockë_muãx_°‹e
 = 
PTHREAD_MUTEX_INITIALIZER
;

113 
muãx_ty≥
 
	gsockë_muãx
 = &
sockë_muãx_°‹e
;

115 
	$MQTTClõ¡_öô
()

117 
±hªad_muãx©å_t
 
©å
;

118 
rc
;

120 
	`±hªad_muãx©å_öô
(&
©å
);

121 
	`±hªad_muãx©å_£ây≥
(&
©å
, 
PTHREAD_MUTEX_ERRORCHECK
);

122 i‡((
rc
 = 
	`±hªad_muãx_öô
(
mqâ˛õ¡_muãx
, &
©å
)) != 0)

123 
	`¥ötf
("MQTTClõ¡:Éº‹ %d inôülizög clõ¡_muãx\n", 
rc
);

124 i‡((
rc
 = 
	`±hªad_muãx_öô
(
sockë_muãx
, &
©å
)) != 0)

125 
	`¥ötf
("MQTTClõ¡:Éº‹ %d inôülizög sockë_muãx\n", 
rc
);

126 
	}
}

128 
	#WINAPI


	)

131 vﬁ©ûê
	göôülized
 = 0;

132 
Li°
* 
	gh™dÀs
 = 
NULL
;

133 
time_t
 
	gœ°
;

134 
	gru¬ög
 = 0;

135 
	gto°›
 = 0;

136 
thªad_id_ty≥
 
	grun_id
 = 0;

138 
MQTTPackë
* 
MQTTClõ¡_waôf‹
(
MQTTClõ¡
 
h™dÀ
, 
∑ckë_ty≥
, * 
rc
, 
timeout
);

139 
MQTTPackë
* 
MQTTClõ¡_cy˛e
(* 
sock
, 
timeout
, * 
rc
);

140 
MQTTClõ¡_˛ónSessi⁄
(
Clõ¡s
* 
˛õ¡
);

141 
MQTTClõ¡_°›
();

142 
MQTTClõ¡_disc⁄√˘_öã∫Æ
(
MQTTClõ¡
 
h™dÀ
, 
timeout
);

143 
MQTTClõ¡_disc⁄√˘1
(
MQTTClõ¡
 
h™dÀ
, 
timeout
, 
öã∫Æ
, 
°›
);

144 
MQTTClõ¡_wrôeCom∂ëe
(
sockë
);

148 
MQTTClõ¡_mesßge
* 
	mmsg
;

149 * 
	mt›icName
;

150 
	mt›icLí
;

151 
	m£qno
;

152 } 
	tqE¡ry
;

157 * 
	m£rvîURI
;

158 #i‡
deföed
(
OPENSSL
)

159 
	ms¶
;

161 
Clõ¡s
* 
	mc
;

162 
MQTTClõ¡_c⁄√˘i⁄Lo°
* 
	m˛
;

163 
MQTTClõ¡_mesßgeAºived
* 
	mma
;

164 
MQTTClõ¡_dñivîyCom∂ëe
* 
	mdc
;

165 * 
	mc⁄ãxt
;

167 
£m_ty≥
 
	mc⁄√˘_£m
;

168 
	mrc
;

169 
£m_ty≥
 
	mc⁄«ck_£m
;

170 
£m_ty≥
 
	msuback_£m
;

171 
£m_ty≥
 
	munsuback_£m
;

172 
MQTTPackë
* 
	m∑ck
;

174 } 
	tMQTTClõ¡s
;

176 
	$MQTTClõ¡_¶ìp
(
mûli£c⁄ds
)

178 
FUNC_ENTRY
;

179 #i‡
	`deföed
(
WIN32
Ë|| deföed(
WIN64
)

180 
	`SÀï
(
mûli£c⁄ds
);

182 
	`u¶ìp
(
mûli£c⁄ds
*1000);

184 
FUNC_EXIT
;

185 
	}
}

188 #i‡
deföed
(
WIN32
Ë|| deföed(
WIN64
)

189 
	#START_TIME_TYPE
 
DWORD


	)

190 
START_TIME_TYPE
 
	$MQTTClõ¡_°¨t_˛ock
()

192  
	`GëTickCou¡
();

193 
	}
}

194 #ñi‡
deföed
(
AIX
)

195 
	#START_TIME_TYPE
 
time•ec


	)

196 
START_TIME_TYPE
 
	$MQTTClõ¡_°¨t_˛ock
()

198 
time•ec
 
°¨t
;

199 
	`˛ock_gëtime
(
CLOCK_REALTIME
, &
°¨t
);

200  
°¨t
;

201 
	}
}

203 
	#START_TIME_TYPE
 
timevÆ


	)

204 
START_TIME_TYPE
 
	$MQTTClõ¡_°¨t_˛ock
()

206 
timevÆ
 
°¨t
;

207 
	`gëtimeofday
(&
°¨t
, 
NULL
);

208  
°¨t
;

209 
	}
}

213 #i‡
deföed
(
WIN32
Ë|| deföed(
WIN64
)

214 
	$MQTTClõ¡_ñ≠£d
(
DWORD
 
mûli£c⁄ds
)

216  
	`GëTickCou¡
(Ë- 
mûli£c⁄ds
;

217 
	}
}

218 #ñi‡
deföed
(
AIX
)

219 
	#as£π
(
a
)

	)

220 
	$MQTTClõ¡_ñ≠£d
(
time•ec
 
°¨t
)

222 
time•ec
 
now
, 
ªs
;

224 
	`˛ock_gëtime
(
CLOCK_REALTIME
, &
now
);

225 
	`¡imîsub
(
now
, 
°¨t
, 
ªs
);

226  (
ªs
.
tv_£c
)*1000L + (ªs.
tv_n£c
)/1000000L;

227 
	}
}

229 
	$MQTTClõ¡_ñ≠£d
(
timevÆ
 
°¨t
)

231 
timevÆ
 
now
, 
ªs
;

233 
	`gëtimeofday
(&
now
, 
NULL
);

234 
	`timîsub
(&
now
, &
°¨t
, &
ªs
);

235  (
ªs
.
tv_£c
)*1000 + (ªs.
tv_u£c
)/1000;

236 
	}
}

240 
	$MQTTClõ¡_¸óã
(
MQTTClõ¡
* 
h™dÀ
, c⁄° * 
£rvîURI
, c⁄° * 
˛õ¡Id
,

241 
≥rsi°í˚_ty≥
, * 
≥rsi°í˚_c⁄ãxt
)

243 
rc
 = 0;

244 
MQTTClõ¡s
 *
m
 = 
NULL
;

246 
FUNC_ENTRY
;

247 
rc
 = 
	`Thªad_lock_muãx
(
mqâ˛õ¡_muãx
);

249 i‡(
£rvîURI
 =
NULL
 || 
˛õ¡Id
 == NULL)

251 
rc
 = 
MQTTCLIENT_NULL_PARAMETER
;

252 
exô
;

255 i‡(!
	`UTF8_vÆid©eSåög
(
˛õ¡Id
))

257 
rc
 = 
MQTTCLIENT_BAD_UTF8_STRING
;

258 
exô
;

261 i‡(!
öôülized
)

263 #i‡
	`deföed
(
HEAP_H
)

264 
	`Hóp_öôülize
();

266 
	`Log_öôülize
((
Log_«meVÆue
*)
	`MQTTClõ¡_gëVîsi⁄Info
());

267 
b°©e
->
˛õ¡s
 = 
	`Li°Inôülize
();

268 
	`Sockë_outInôülize
();

269 
	`Sockë_£tWrôeCom∂ëeCÆlback
(
MQTTClõ¡_wrôeCom∂ëe
);

270 
h™dÀs
 = 
	`Li°Inôülize
();

271 #i‡
	`deföed
(
OPENSSL
)

272 
	`SSLSockë_öôülize
();

274 
öôülized
 = 1;

276 
m
 = 
	`mÆloc
((
MQTTClõ¡s
));

277 *
h™dÀ
 = 
m
;

278 
	`mem£t
(
m
, '\0', (
MQTTClõ¡s
));

279 i‡(
	`°∫cmp
(
URI_TCP
, 
£rvîURI
, 
	`°æí
(URI_TCP)) == 0)

280 
£rvîURI
 +
	`°æí
(
URI_TCP
);

281 #i‡
	`deföed
(
OPENSSL
)

282 i‡(
	`°∫cmp
(
URI_SSL
, 
£rvîURI
, 
	`°æí
(URI_SSL)) == 0)

284 
£rvîURI
 +
	`°æí
(
URI_SSL
);

285 
m
->
s¶
 = 1;

288 
m
->
£rvîURI
 = 
	`MQTTSådup
(serverURI);

289 
	`Li°Aµíd
(
h™dÀs
, 
m
, (
MQTTClõ¡s
));

291 
m
->
c
 = 
	`mÆloc
((
Clõ¡s
));

292 
	`mem£t
(
m
->
c
, '\0', (
Clõ¡s
));

293 
m
->
c
->
c⁄ãxt
 = m;

294 
m
->
c
->
outboundMsgs
 = 
	`Li°Inôülize
();

295 
m
->
c
->
öboundMsgs
 = 
	`Li°Inôülize
();

296 
m
->
c
->
mesßgeQueue
 = 
	`Li°Inôülize
();

297 
m
->
c
->
˛õ¡ID
 = 
	`MQTTSådup
(
˛õ¡Id
);

298 
m
->
c⁄√˘_£m
 = 
	`Thªad_¸óã_£m
();

299 
m
->
c⁄«ck_£m
 = 
	`Thªad_¸óã_£m
();

300 
m
->
suback_£m
 = 
	`Thªad_¸óã_£m
();

301 
m
->
unsuback_£m
 = 
	`Thªad_¸óã_£m
();

303 #i‡!
	`deföed
(
NO_PERSISTENCE
)

304 
rc
 = 
	`MQTTPîsi°í˚_¸óã
(&(
m
->
c
->
≥rsi°í˚
), 
≥rsi°í˚_ty≥
, 
≥rsi°í˚_c⁄ãxt
);

305 i‡(
rc
 == 0)

307 
rc
 = 
	`MQTTPîsi°í˚_öôülize
(
m
->
c
, m->
£rvîURI
);

308 i‡(
rc
 == 0)

309 
	`MQTTPîsi°í˚_ª°‹eMesßgeQueue
(
m
->
c
);

312 
	`Li°Aµíd
(
b°©e
->
˛õ¡s
, 
m
->
c
, (
Clõ¡s
Ë+ 3*(
Li°
));

314 
exô
:

315 
	`Thªad_u∆ock_muãx
(
mqâ˛õ¡_muãx
);

316 
	`FUNC_EXIT_RC
(
rc
);

317  
rc
;

318 
	}
}

321 
	$MQTTClõ¡_ãrmö©e
()

323 
FUNC_ENTRY
;

324 
	`MQTTClõ¡_°›
();

325 i‡(
öôülized
)

327 
	`Li°Fªe
(
b°©e
->
˛õ¡s
);

328 
	`Li°Fªe
(
h™dÀs
);

329 
h™dÀs
 = 
NULL
;

330 
	`Sockë_outTîmö©e
();

331 #i‡
	`deföed
(
OPENSSL
)

332 
	`SSLSockë_ãrmö©e
();

334 #i‡
	`deföed
(
HEAP_H
)

335 
	`Hóp_ãrmö©e
();

337 
	`Log_ãrmö©e
();

338 
öôülized
 = 0;

340 
FUNC_EXIT
;

341 
	}
}

344 
	$MQTTClõ¡_em±yMesßgeQueue
(
Clõ¡s
* 
˛õ¡
)

346 
FUNC_ENTRY
;

348 i‡(
˛õ¡
->
mesßgeQueue
->
cou¡
 > 0)

350 
Li°EÀmít
* 
cuºít
 = 
NULL
;

351 
	`Li°NextEÀmít
(
˛õ¡
->
mesßgeQueue
, &
cuºít
))

353 
qE¡ry
* 
qe
 = (qE¡ry*)(
cuºít
->
c⁄ã¡
);

354 
	`‰ì
(
qe
->
t›icName
);

355 
	`‰ì
(
qe
->
msg
->
∑ylﬂd
);

356 
	`‰ì
(
qe
->
msg
);

358 
	`Li°Em±y
(
˛õ¡
->
mesßgeQueue
);

360 
FUNC_EXIT
;

361 
	}
}

364 
	$MQTTClõ¡_de°roy
(
MQTTClõ¡
* 
h™dÀ
)

366 
MQTTClõ¡s
* 
m
 = *
h™dÀ
;

368 
FUNC_ENTRY
;

369 
	`Thªad_lock_muãx
(
mqâ˛õ¡_muãx
);

371 i‡(
m
 =
NULL
)

372 
exô
;

374 i‡(
m
->
c
)

376 
ßved_sockë
 = 
m
->
c
->
√t
.
sockë
;

377 * 
ßved_˛õ¡id
 = 
	`MQTTSådup
(
m
->
c
->
˛õ¡ID
);

378 #i‡!
	`deföed
(
NO_PERSISTENCE
)

379 
	`MQTTPîsi°í˚_˛o£
(
m
->
c
);

381 
	`MQTTClõ¡_em±yMesßgeQueue
(
m
->
c
);

382 
	`MQTTPrŸocﬁ_‰ìClõ¡
(
m
->
c
);

383 i‡(!
	`Li°Remove
(
b°©e
->
˛õ¡s
, 
m
->
c
))

384 
	`Log
(
LOG_ERROR
, 0, 
NULL
);

386 
	`Log
(
TRACE_MIN
, 1, 
NULL
, 
ßved_˛õ¡id
, 
ßved_sockë
);

387 
	`‰ì
(
ßved_˛õ¡id
);

389 i‡(
m
->
£rvîURI
)

390 
	`‰ì
(
m
->
£rvîURI
);

391 
	`Thªad_de°roy_£m
(
m
->
c⁄√˘_£m
);

392 
	`Thªad_de°roy_£m
(
m
->
c⁄«ck_£m
);

393 
	`Thªad_de°roy_£m
(
m
->
suback_£m
);

394 
	`Thªad_de°roy_£m
(
m
->
unsuback_£m
);

395 i‡(!
	`Li°Remove
(
h™dÀs
, 
m
))

396 
	`Log
(
LOG_ERROR
, -1, "freeÉrror");

397 *
h™dÀ
 = 
NULL
;

398 i‡(
b°©e
->
˛õ¡s
->
cou¡
 == 0)

399 
	`MQTTClõ¡_ãrmö©e
();

401 
exô
:

402 
	`Thªad_u∆ock_muãx
(
mqâ˛õ¡_muãx
);

403 
FUNC_EXIT
;

404 
	}
}

407 
	$MQTTClõ¡_‰ìMesßge
(
MQTTClõ¡_mesßge
** 
mesßge
)

409 
FUNC_ENTRY
;

410 
	`‰ì
((*
mesßge
)->
∑ylﬂd
);

411 
	`‰ì
(*
mesßge
);

412 *
mesßge
 = 
NULL
;

413 
FUNC_EXIT
;

414 
	}
}

417 
	$MQTTClõ¡_‰ì
(* 
mem‹y
)

419 
FUNC_ENTRY
;

420 
	`‰ì
(
mem‹y
);

421 
FUNC_EXIT
;

422 
	}
}

425 
	$MQTTClõ¡_dñivîMesßge
(
rc
, 
MQTTClõ¡s
* 
m
, ** 
t›icName
, * 
t›icLí
, 
MQTTClõ¡_mesßge
** 
mesßge
)

427 
qE¡ry
* 
qe
 = (qE¡ry*)(
m
->
c
->
mesßgeQueue
->
fú°
->
c⁄ã¡
);

429 
FUNC_ENTRY
;

430 *
mesßge
 = 
qe
->
msg
;

431 *
t›icName
 = 
qe
->topicName;

432 *
t›icLí
 = 
qe
->topicLen;

433 i‡(
	`°æí
(*
t›icName
Ë!*
t›icLí
)

434 
rc
 = 
MQTTCLIENT_TOPICNAME_TRUNCATED
;

435 #i‡!
	`deföed
(
NO_PERSISTENCE
)

436 i‡(
m
->
c
->
≥rsi°í˚
)

437 
	`MQTTPîsi°í˚_u≈îsi°QueueE¡ry
(
m
->
c
, (
MQTTPîsi°í˚_qE¡ry
*)
qe
);

439 
	`Li°Remove
(
m
->
c
->
mesßgeQueue
, m->c->mesßgeQueue->
fú°
->
c⁄ã¡
);

440 
	`FUNC_EXIT_RC
(
rc
);

441  
rc
;

442 
	}
}

451 
	$˛õ¡SockCom∑ª
(* 
a
, * 
b
)

453 
MQTTClõ¡s
* 
m
 = (MQTTClõ¡s*)
a
;

454  
m
->
c
->
√t
.
sockë
 =*(*)
b
;

455 
	}
}

464 
thªad_ªtu∫_ty≥
 
WINAPI
 
	$c⁄√˘i⁄Lo°_ˇŒ
(* 
c⁄ãxt
)

466 
MQTTClõ¡s
* 
m
 = (MQTTClõ¡s*)
c⁄ãxt
;

468 (*(
m
->
˛
))(m->
c⁄ãxt
, 
NULL
);

470 
	}
}

474 
thªad_ªtu∫_ty≥
 
WINAPI
 
	$MQTTClõ¡_run
(* 
n
)

476 
timeout
 = 10L;

478 
FUNC_ENTRY
;

479 
ru¬ög
 = 1;

480 
run_id
 = 
	`Thªad_gëid
();

482 
	`Thªad_lock_muãx
(
mqâ˛õ¡_muãx
);

483 !
to°›
)

485 
rc
 = 
SOCKET_ERROR
;

486 
sock
 = -1;

487 
MQTTClõ¡s
* 
m
 = 
NULL
;

488 
MQTTPackë
* 
∑ck
 = 
NULL
;

490 
	`Thªad_u∆ock_muãx
(
mqâ˛õ¡_muãx
);

491 
∑ck
 = 
	`MQTTClõ¡_cy˛e
(&
sock
, 
timeout
, &
rc
);

492 
	`Thªad_lock_muãx
(
mqâ˛õ¡_muãx
);

493 i‡(
to°›
)

495 
timeout
 = 1000L;

498 i‡(
	`Li°FödIãm
(
h™dÀs
, &
sock
, 
˛õ¡SockCom∑ª
Ë=
NULL
)

503 
m
 = (
MQTTClõ¡
)(
h™dÀs
->
cuºít
->
c⁄ã¡
);

504 i‡(
m
 =
NULL
)

509 i‡(
rc
 =
SOCKET_ERROR
)

511 i‡(
m
->
c
->
c⁄√˘ed
)

513 
	`Thªad_u∆ock_muãx
(
mqâ˛õ¡_muãx
);

514 
	`MQTTClõ¡_disc⁄√˘_öã∫Æ
(
m
, 0);

515 
	`Thªad_lock_muãx
(
mqâ˛õ¡_muãx
);

519 i‡(
m
->
c
->
c⁄√˘_°©e
 =2 && !
	`Thªad_check_£m
(m->
c⁄√˘_£m
))

521 
	`Log
(
TRACE_MIN
, -1, "Po°ög c⁄√˘ sem≠h‹êf‹ clõ¡ %s", 
m
->
c
->
˛õ¡ID
);

522 
	`Thªad_po°_£m
(
m
->
c⁄√˘_£m
);

524 i‡(
m
->
c
->
c⁄√˘_°©e
 =3 && !
	`Thªad_check_£m
(m->
c⁄«ck_£m
))

526 
	`Log
(
TRACE_MIN
, -1, "Po°ög c⁄«ck sem≠h‹êf‹ clõ¡ %s", 
m
->
c
->
˛õ¡ID
);

527 
	`Thªad_po°_£m
(
m
->
c⁄«ck_£m
);

533 i‡(
m
->
c
->
mesßgeQueue
->
cou¡
 > 0)

535 
qE¡ry
* 
qe
 = (qE¡ry*)(
m
->
c
->
mesßgeQueue
->
fú°
->
c⁄ã¡
);

536 
t›icLí
 = 
qe
->topicLen;

538 i‡(
	`°æí
(
qe
->
t›icName
Ë=
t›icLí
)

539 
t›icLí
 = 0;

541 
	`Log
(
TRACE_MIN
, -1, "Calling messageArrived for client %s, queue depth %d",

542 
m
->
c
->
˛õ¡ID
, m->c->
mesßgeQueue
->
cou¡
);

543 
	`Thªad_u∆ock_muãx
(
mqâ˛õ¡_muãx
);

544 
rc
 = (*(
m
->
ma
))(m->
c⁄ãxt
, 
qe
->
t›icName
, 
t›icLí
, qe->
msg
);

545 
	`Thªad_lock_muãx
(
mqâ˛õ¡_muãx
);

550 i‡(
rc
)

551 
	`Li°Remove
(
m
->
c
->
mesßgeQueue
, 
qe
);

553 
	`Log
(
TRACE_MIN
, -1, "FalseÑeturned from messageArrived for client %s, messageÑemains on queue",

554 
m
->
c
->
˛õ¡ID
);

556 i‡(
∑ck
)

558 i‡(
∑ck
->
hódî
.
bôs
.
ty≥
 =
CONNACK
 && !
	`Thªad_check_£m
(
m
->
c⁄«ck_£m
))

560 
	`Log
(
TRACE_MIN
, -1, "Po°ög c⁄«ck sem≠h‹êf‹ clõ¡ %s", 
m
->
c
->
˛õ¡ID
);

561 
m
->
∑ck
 =Öack;

562 
	`Thªad_po°_£m
(
m
->
c⁄«ck_£m
);

564 i‡(
∑ck
->
hódî
.
bôs
.
ty≥
 =
SUBACK
)

566 
	`Log
(
TRACE_MIN
, -1, "Po°ög suback sem≠h‹êf‹ clõ¡ %s", 
m
->
c
->
˛õ¡ID
);

567 
m
->
∑ck
 =Öack;

568 
	`Thªad_po°_£m
(
m
->
suback_£m
);

570 i‡(
∑ck
->
hódî
.
bôs
.
ty≥
 =
UNSUBACK
)

572 
	`Log
(
TRACE_MIN
, -1, "Po°ög unsuback sem≠h‹êf‹ clõ¡ %s", 
m
->
c
->
˛õ¡ID
);

573 
m
->
∑ck
 =Öack;

574 
	`Thªad_po°_£m
(
m
->
unsuback_£m
);

577 i‡(
m
->
c
->
c⁄√˘_°©e
 =1 && !
	`Thªad_check_£m
(m->
c⁄√˘_£m
))

579 
îr‹
;

580 
sockÀn_t
 
Àn
 = (
îr‹
);

582 i‡((
m
->
rc
 = 
	`gësock›t
(m->
c
->
√t
.
sockë
, 
SOL_SOCKET
, 
SO_ERROR
, (*)&
îr‹
, &
Àn
)) == 0)

583 
m
->
rc
 = 
îr‹
;

584 
	`Log
(
TRACE_MIN
, -1, "Po°ög c⁄√˘ sem≠h‹êf‹ clõ¡ %†r¯%d", 
m
->
c
->
˛õ¡ID
, m->
rc
);

585 
	`Thªad_po°_£m
(
m
->
c⁄√˘_£m
);

587 #i‡
	`deföed
(
OPENSSL
)

588 i‡(
m
->
c
->
c⁄√˘_°©e
 =2 && !
	`Thªad_check_£m
(m->
c⁄√˘_£m
))

590 
rc
 = 
	`SSLSockë_c⁄√˘
(
m
->
c
->
√t
.
s¶
, m->c->√t.
sockë
);

591 i‡(
rc
 =1 ||Ñ¯=
SSL_FATAL
)

593 i‡(
rc
 =1 && !
m
->
c
->
˛ón£ssi⁄
 && m->c->
£ssi⁄
 =
NULL
)

594 
m
->
c
->
£ssi⁄
 = 
	`SSL_gë1_£ssi⁄
(m->c->
√t
.
s¶
);

595 
m
->
rc
 =Ñc;

596 
	`Log
(
TRACE_MIN
, -1, "Po°ög c⁄√˘ sem≠h‹êf‹ SSL clõ¡ %†r¯%d", 
m
->
c
->
˛õ¡ID
, m->
rc
);

597 
	`Thªad_po°_£m
(
m
->
c⁄√˘_£m
);

603 
run_id
 = 0;

604 
ru¬ög
 = 
to°›
 = 0;

605 
	`Thªad_u∆ock_muãx
(
mqâ˛õ¡_muãx
);

606 
FUNC_EXIT
;

608 
	}
}

611 
	$MQTTClõ¡_°›
()

613 
rc
 = 0;

615 
FUNC_ENTRY
;

616 i‡(
ru¬ög
 =1 && 
to°›
 == 0)

618 
c⁄n_cou¡
 = 0;

619 
Li°EÀmít
* 
cuºít
 = 
NULL
;

621 i‡(
h™dÀs
 !
NULL
)

624 
	`Li°NextEÀmít
(
h™dÀs
, &
cuºít
))

626 i‡(((
MQTTClõ¡s
*)(
cuºít
->
c⁄ã¡
))->
c
->
c⁄√˘_°©e
 > 0 ||

627 ((
MQTTClõ¡s
*)(
cuºít
->
c⁄ã¡
))->
c
->
c⁄√˘ed
)

628 ++
c⁄n_cou¡
;

631 
	`Log
(
TRACE_MIN
, -1, "C⁄n_cou¡ i†%d", 
c⁄n_cou¡
);

633 i‡(
c⁄n_cou¡
 == 0)

635 
cou¡
 = 0;

636 
to°›
 = 1;

637 i‡(
	`Thªad_gëid
(Ë!
run_id
)

639 
ru¬ög
 && ++
cou¡
 < 100)

641 
	`Thªad_u∆ock_muãx
(
mqâ˛õ¡_muãx
);

642 
	`Log
(
TRACE_MIN
, -1, "sleeping");

643 
	`MQTTClõ¡_¶ìp
(100L);

644 
	`Thªad_lock_muãx
(
mqâ˛õ¡_muãx
);

647 
rc
 = 1;

650 
	`FUNC_EXIT_RC
(
rc
);

651 
	}
}

654 
	$MQTTClõ¡_£tCÆlbacks
(
MQTTClõ¡
 
h™dÀ
, * 
c⁄ãxt
, 
MQTTClõ¡_c⁄√˘i⁄Lo°
* 
˛
,

655 
MQTTClõ¡_mesßgeAºived
* 
ma
, 
MQTTClõ¡_dñivîyCom∂ëe
* 
dc
)

657 
rc
 = 
MQTTCLIENT_SUCCESS
;

658 
MQTTClõ¡s
* 
m
 = 
h™dÀ
;

660 
FUNC_ENTRY
;

661 
	`Thªad_lock_muãx
(
mqâ˛õ¡_muãx
);

663 i‡(
m
 =
NULL
 || 
ma
 =NULL || m->
c
->
c⁄√˘_°©e
 != 0)

664 
rc
 = 
MQTTCLIENT_FAILURE
;

667 
m
->
c⁄ãxt
 = context;

668 
m
->
˛
 = cl;

669 
m
->
ma
 = ma;

670 
m
->
dc
 = dc;

673 
	`Thªad_u∆ock_muãx
(
mqâ˛õ¡_muãx
);

674 
	`FUNC_EXIT_RC
(
rc
);

675  
rc
;

676 
	}
}

679 
	$MQTTClõ¡_˛o£Sessi⁄
(
Clõ¡s
* 
˛õ¡
)

681 
FUNC_ENTRY
;

682 
˛õ¡
->
good
 = 0;

683 
˛õ¡
->
pög_out°™dög
 = 0;

684 i‡(
˛õ¡
->
√t
.
sockë
 > 0)

686 i‡(
˛õ¡
->
c⁄√˘ed
)

687 
	`MQTTPackë_£nd_disc⁄√˘
(&
˛õ¡
->
√t
, clõ¡->
˛õ¡ID
);

688 
	`Thªad_lock_muãx
(
sockë_muãx
);

689 #i‡
	`deföed
(
OPENSSL
)

690 
	`SSLSockë_˛o£
(&
˛õ¡
->
√t
);

692 
	`Sockë_˛o£
(
˛õ¡
->
√t
.
sockë
);

693 
	`Thªad_u∆ock_muãx
(
sockë_muãx
);

694 
˛õ¡
->
√t
.
sockë
 = 0;

695 #i‡
	`deföed
(
OPENSSL
)

696 
˛õ¡
->
√t
.
s¶
 = 
NULL
;

699 
˛õ¡
->
c⁄√˘ed
 = 0;

700 
˛õ¡
->
c⁄√˘_°©e
 = 0;

702 i‡(
˛õ¡
->
˛ón£ssi⁄
)

703 
	`MQTTClõ¡_˛ónSessi⁄
(
˛õ¡
);

704 
FUNC_EXIT
;

705 
	}
}

708 
	$MQTTClõ¡_˛ónSessi⁄
(
Clõ¡s
* 
˛õ¡
)

710 
rc
 = 0;

712 
FUNC_ENTRY
;

713 #i‡!
	`deföed
(
NO_PERSISTENCE
)

714 
rc
 = 
	`MQTTPîsi°í˚_˛ór
(
˛õ¡
);

716 
	`MQTTPrŸocﬁ_em±yMesßgeLi°
(
˛õ¡
->
öboundMsgs
);

717 
	`MQTTPrŸocﬁ_em±yMesßgeLi°
(
˛õ¡
->
outboundMsgs
);

718 
	`MQTTClõ¡_em±yMesßgeQueue
(
˛õ¡
);

719 
˛õ¡
->
msgID
 = 0;

720 
	`FUNC_EXIT_RC
(
rc
);

721  
rc
;

722 
	}
}

725 
	$PrŸocﬁ_¥o˚ssPubliˇti⁄
(
Publish
* 
publish
, 
Clõ¡s
* 
˛õ¡
)

727 
qE¡ry
* 
qe
 = 
NULL
;

728 
MQTTClõ¡_mesßge
* 
mm
 = 
NULL
;

730 
FUNC_ENTRY
;

731 
qe
 = 
	`mÆloc
((
qE¡ry
));

732 
mm
 = 
	`mÆloc
((
MQTTClõ¡_mesßge
));

734 
qe
->
msg
 = 
mm
;

736 
qe
->
t›icName
 = 
publish
->
t›ic
;

737 
qe
->
t›icLí
 = 
publish
->
t›i˛í
;

738 
publish
->
t›ic
 = 
NULL
;

743 i‡(
publish
->
hódî
.
bôs
.
qos
 == 2)

744 
mm
->
∑ylﬂd
 = 
publish
->payload;

747 
mm
->
∑ylﬂd
 = 
	`mÆloc
(
publish
->
∑ylﬂdÀn
);

748 
	`mem˝y
(
mm
->
∑ylﬂd
, 
publish
->∑ylﬂd,Öublish->
∑ylﬂdÀn
);

751 
mm
->
∑ylﬂdÀn
 = 
publish
->payloadlen;

752 
mm
->
qos
 = 
publish
->
hódî
.
bôs
.qos;

753 
mm
->
ªèöed
 = 
publish
->
hódî
.
bôs
.
ªèö
;

754 i‡(
publish
->
hódî
.
bôs
.
qos
 == 2)

755 
mm
->
dup
 = 0;

757 
mm
->
dup
 = 
publish
->
hódî
.
bôs
.dup;

758 
mm
->
msgid
 = 
publish
->
msgId
;

760 
	`Li°Aµíd
(
˛õ¡
->
mesßgeQueue
, 
qe
, (qeË+ (
mm
Ë+ mm->
∑ylﬂdÀn
 + 
	`°æí
(qe->
t›icName
)+1);

761 #i‡!
	`deföed
(
NO_PERSISTENCE
)

762 i‡(
˛õ¡
->
≥rsi°í˚
)

763 
	`MQTTPîsi°í˚_≥rsi°QueueE¡ry
(
˛õ¡
, (
MQTTPîsi°í˚_qE¡ry
*)
qe
);

765 
FUNC_EXIT
;

766 
	}
}

769 
	$MQTTClõ¡_c⁄√˘URIVîsi⁄
(
MQTTClõ¡
 
h™dÀ
, 
MQTTClõ¡_c⁄√˘O±i⁄s
* 
›ti⁄s
, c⁄° * 
£rvîURI
, 
MQTTVîsi⁄
,

770 
START_TIME_TYPE
 
°¨t
, 
mûli£csTimeout
)

772 
MQTTClõ¡s
* 
m
 = 
h™dÀ
;

773 
rc
 = 
SOCKET_ERROR
;

774 
£ssi⁄Pª£¡
 = 0;

776 
FUNC_ENTRY
;

777 i‡(
m
->
ma
 && !
ru¬ög
)

779 
	`Thªad_°¨t
(
MQTTClõ¡_run
, 
h™dÀ
);

780 i‡(
	`MQTTClõ¡_ñ≠£d
(
°¨t
Ë>
mûli£csTimeout
)

782 
rc
 = 
SOCKET_ERROR
;

783 
exô
;

785 
	`MQTTClõ¡_¶ìp
(100L);

788 
	`Log
(
TRACE_MIN
, -1, "C⁄√˘ögÅÿ£rvîURI %†wôh MQTT vîsi⁄ %d", 
£rvîURI
, 
MQTTVîsi⁄
);

789 #i‡
	`deföed
(
OPENSSL
)

790 
rc
 = 
	`MQTTPrŸocﬁ_c⁄√˘
(
£rvîURI
, 
m
->
c
, m->
s¶
, 
MQTTVîsi⁄
);

792 
rc
 = 
	`MQTTPrŸocﬁ_c⁄√˘
(
£rvîURI
, 
m
->
c
, 
MQTTVîsi⁄
);

794 i‡(
rc
 =
SOCKET_ERROR
)

795 
exô
;

797 i‡(
m
->
c
->
c⁄√˘_°©e
 == 0)

799 
rc
 = 
SOCKET_ERROR
;

800 
exô
;

803 i‡(
m
->
c
->
c⁄√˘_°©e
 == 1)

805 
	`Thªad_u∆ock_muãx
(
mqâ˛õ¡_muãx
);

806 
	`MQTTClõ¡_waôf‹
(
h™dÀ
, 
CONNECT
, &
rc
, 
mûli£csTimeout
 - 
	`MQTTClõ¡_ñ≠£d
(
°¨t
));

807 
	`Thªad_lock_muãx
(
mqâ˛õ¡_muãx
);

808 i‡(
rc
 != 0)

810 
rc
 = 
SOCKET_ERROR
;

811 
exô
;

814 #i‡
	`deföed
(
OPENSSL
)

815 i‡(
m
->
s¶
)

817 i‡(
	`SSLSockë_£tSockëF‹SSL
(&
m
->
c
->
√t
, m->c->
s¶›ts
Ë!
MQTTCLIENT_SUCCESS
)

819 i‡(
m
->
c
->
£ssi⁄
 !
NULL
)

820 i‡((
rc
 = 
	`SSL_£t_£ssi⁄
(
m
->
c
->
√t
.
s¶
, m->c->
£ssi⁄
)) != 1)

821 
	`Log
(
TRACE_MIN
, -1, "FailedÅo set SSL session with stored data,Çon critical");

822 
rc
 = 
	`SSLSockë_c⁄√˘
(
m
->
c
->
√t
.
s¶
, m->c->√t.
sockë
);

823 i‡(
rc
 =
TCPSOCKET_INTERRUPTED
)

824 
m
->
c
->
c⁄√˘_°©e
 = 2;

825 i‡(
rc
 =
SSL_FATAL
)

827 
rc
 = 
SOCKET_ERROR
;

828 
exô
;

830 i‡(
rc
 == 1)

832 
rc
 = 
MQTTCLIENT_SUCCESS
;

833 
m
->
c
->
c⁄√˘_°©e
 = 3;

834 i‡(
	`MQTTPackë_£nd_c⁄√˘
(
m
->
c
, 
MQTTVîsi⁄
Ë=
SOCKET_ERROR
)

836 
rc
 = 
SOCKET_ERROR
;

837 
exô
;

839 i‡(!
m
->
c
->
˛ón£ssi⁄
 && m->c->
£ssi⁄
 =
NULL
)

840 
m
->
c
->
£ssi⁄
 = 
	`SSL_gë1_£ssi⁄
(m->c->
√t
.
s¶
);

845 
rc
 = 
SOCKET_ERROR
;

846 
exô
;

852 
m
->
c
->
c⁄√˘_°©e
 = 3;

853 i‡(
	`MQTTPackë_£nd_c⁄√˘
(
m
->
c
, 
MQTTVîsi⁄
Ë=
SOCKET_ERROR
)

855 
rc
 = 
SOCKET_ERROR
;

856 
exô
;

858 #i‡
	`deföed
(
OPENSSL
)

863 #i‡
	`deföed
(
OPENSSL
)

864 i‡(
m
->
c
->
c⁄√˘_°©e
 == 2)

866 
	`Thªad_u∆ock_muãx
(
mqâ˛õ¡_muãx
);

867 
	`MQTTClõ¡_waôf‹
(
h™dÀ
, 
CONNECT
, &
rc
, 
mûli£csTimeout
 - 
	`MQTTClõ¡_ñ≠£d
(
°¨t
));

868 
	`Thªad_lock_muãx
(
mqâ˛õ¡_muãx
);

869 i‡(
rc
 != 1)

871 
rc
 = 
SOCKET_ERROR
;

872 
exô
;

874 if(!
m
->
c
->
˛ón£ssi⁄
 && m->c->
£ssi⁄
 =
NULL
)

875 
m
->
c
->
£ssi⁄
 = 
	`SSL_gë1_£ssi⁄
(m->c->
√t
.
s¶
);

876 
m
->
c
->
c⁄√˘_°©e
 = 3;

877 i‡(
	`MQTTPackë_£nd_c⁄√˘
(
m
->
c
, 
MQTTVîsi⁄
Ë=
SOCKET_ERROR
)

879 
rc
 = 
SOCKET_ERROR
;

880 
exô
;

885 i‡(
m
->
c
->
c⁄√˘_°©e
 == 3)

887 
MQTTPackë
* 
∑ck
 = 
NULL
;

889 
	`Thªad_u∆ock_muãx
(
mqâ˛õ¡_muãx
);

890 
∑ck
 = 
	`MQTTClõ¡_waôf‹
(
h™dÀ
, 
CONNACK
, &
rc
, 
mûli£csTimeout
 - 
	`MQTTClõ¡_ñ≠£d
(
°¨t
));

891 
	`Thªad_lock_muãx
(
mqâ˛õ¡_muãx
);

892 i‡(
∑ck
 =
NULL
)

893 
rc
 = 
SOCKET_ERROR
;

896 
C⁄«ck
* 
c⁄«ck
 = (C⁄«ck*)
∑ck
;

897 
	`Log
(
TRACE_PROTOCOL
, 1, 
NULL
, 
m
->
c
->
√t
.
sockë
, m->c->
˛õ¡ID
, 
c⁄«ck
->
rc
);

898 i‡((
rc
 = 
c⁄«ck
->rcË=
MQTTCLIENT_SUCCESS
)

900 
m
->
c
->
c⁄√˘ed
 = 1;

901 
m
->
c
->
good
 = 1;

902 
m
->
c
->
c⁄√˘_°©e
 = 0;

903 i‡(
MQTTVîsi⁄
 == 4)

904 
£ssi⁄Pª£¡
 = 
c⁄«ck
->
Êags
.
bôs
.sessionPresent;

905 i‡(
m
->
c
->
˛ón£ssi⁄
)

906 
rc
 = 
	`MQTTClõ¡_˛ónSessi⁄
(
m
->
c
);

907 i‡(
m
->
c
->
outboundMsgs
->
cou¡
 > 0)

909 
Li°EÀmít
* 
outcuºít
 = 
NULL
;

911 
	`Li°NextEÀmít
(
m
->
c
->
outboundMsgs
, &
outcuºít
))

913 
Mesßges
* 
m
 = (Mesßges*)(
outcuºít
->
c⁄ã¡
);

914 
m
->
œ°Touch
 = 0;

916 
	`MQTTPrŸocﬁ_ªåy
((
time_t
)0, 1, 1);

917 i‡(
m
->
c
->
c⁄√˘ed
 != 1)

918 
rc
 = 
MQTTCLIENT_DISCONNECTED
;

921 
	`‰ì
(
c⁄«ck
);

922 
m
->
∑ck
 = 
NULL
;

925 
exô
:

926 i‡(
rc
 =
MQTTCLIENT_SUCCESS
)

928 i‡(
›ti⁄s
->
°ru˘_vîsi⁄
 == 4)

930 
›ti⁄s
->
ªtu∫ed
.
£rvîURI
 = serverURI;

931 
›ti⁄s
->
ªtu∫ed
.
MQTTVîsi⁄
 = MQTTVersion;

932 
›ti⁄s
->
ªtu∫ed
.
£ssi⁄Pª£¡
 = sessionPresent;

937 
	`Thªad_u∆ock_muãx
(
mqâ˛õ¡_muãx
);

938 
	`MQTTClõ¡_disc⁄√˘1
(
h™dÀ
, 0, 0, (
MQTTVîsi⁄
 == 3));

939 
	`Thªad_lock_muãx
(
mqâ˛õ¡_muãx
);

941 
	`FUNC_EXIT_RC
(
rc
);

942  
rc
;

943 
	}
}

946 
	$MQTTClõ¡_c⁄√˘URI
(
MQTTClõ¡
 
h™dÀ
, 
MQTTClõ¡_c⁄√˘O±i⁄s
* 
›ti⁄s
, c⁄° * 
£rvîURI
)

948 
MQTTClõ¡s
* 
m
 = 
h™dÀ
;

949 
START_TIME_TYPE
 
°¨t
;

950 
mûli£csTimeout
 = 30000L;

951 
rc
 = 
SOCKET_ERROR
;

952 
MQTTVîsi⁄
 = 0;

954 
FUNC_ENTRY
;

955 
mûli£csTimeout
 = 
›ti⁄s
->
c⁄√˘Timeout
 * 1000;

956 
°¨t
 = 
	`MQTTClõ¡_°¨t_˛ock
();

958 
m
->
c
->
kìpAliveI¡îvÆ
 = 
›ti⁄s
->keepAliveInterval;

959 
m
->
c
->
˛ón£ssi⁄
 = 
›ti⁄s
->cleansession;

960 
m
->
c
->
maxInÊightMesßges
 = (
›ti⁄s
->
ªlübÀ
) ? 1 : 10;

962 i‡(
m
->
c
->
wûl
)

964 
	`‰ì
(
m
->
c
->
wûl
->
msg
);

965 
	`‰ì
(
m
->
c
->
wûl
->
t›ic
);

966 
	`‰ì
(
m
->
c
->
wûl
);

967 
m
->
c
->
wûl
 = 
NULL
;

970 i‡(
›ti⁄s
->
wûl
 && o±i⁄s->wûl->
°ru˘_vîsi⁄
 == 0)

972 
m
->
c
->
wûl
 = 
	`mÆloc
((
wûlMesßges
));

973 
m
->
c
->
wûl
->
msg
 = 
	`MQTTSådup
(
›ti⁄s
->wûl->
mesßge
);

974 
m
->
c
->
wûl
->
qos
 = 
›ti⁄s
->will->qos;

975 
m
->
c
->
wûl
->
ªèöed
 = 
›ti⁄s
->will->retained;

976 
m
->
c
->
wûl
->
t›ic
 = 
	`MQTTSådup
(
›ti⁄s
->wûl->
t›icName
);

979 #i‡
	`deföed
(
OPENSSL
)

980 i‡(
m
->
c
->
s¶›ts
)

982 i‡(
m
->
c
->
s¶›ts
->
åu°St‹e
)

983 
	`‰ì
((*)
m
->
c
->
s¶›ts
->
åu°St‹e
);

984 i‡(
m
->
c
->
s¶›ts
->
keySt‹e
)

985 
	`‰ì
((*)
m
->
c
->
s¶›ts
->
keySt‹e
);

986 i‡(
m
->
c
->
s¶›ts
->
¥iv©eKey
)

987 
	`‰ì
((*)
m
->
c
->
s¶›ts
->
¥iv©eKey
);

988 i‡(
m
->
c
->
s¶›ts
->
¥iv©eKeyPassw‹d
)

989 
	`‰ì
((*)
m
->
c
->
s¶›ts
->
¥iv©eKeyPassw‹d
);

990 i‡(
m
->
c
->
s¶›ts
->
íabÀdCùhîSuôes
)

991 
	`‰ì
((*)
m
->
c
->
s¶›ts
->
íabÀdCùhîSuôes
);

992 
	`‰ì
(
m
->
c
->
s¶›ts
);

993 
m
->
c
->
s¶›ts
 = 
NULL
;

996 i‡(
›ti⁄s
->
°ru˘_vîsi⁄
 !0 && o±i⁄s->
s¶
)

998 
m
->
c
->
s¶›ts
 = 
	`mÆloc
((
MQTTClõ¡_SSLO±i⁄s
));

999 
	`mem£t
(
m
->
c
->
s¶›ts
, '\0', (
MQTTClõ¡_SSLO±i⁄s
));

1000 i‡(
›ti⁄s
->
s¶
->
åu°St‹e
)

1001 
m
->
c
->
s¶›ts
->
åu°St‹e
 = 
	`MQTTSådup
(
›ti⁄s
->
s¶
->trustStore);

1002 i‡(
›ti⁄s
->
s¶
->
keySt‹e
)

1003 
m
->
c
->
s¶›ts
->
keySt‹e
 = 
	`MQTTSådup
(
›ti⁄s
->
s¶
->keyStore);

1004 i‡(
›ti⁄s
->
s¶
->
¥iv©eKey
)

1005 
m
->
c
->
s¶›ts
->
¥iv©eKey
 = 
	`MQTTSådup
(
›ti⁄s
->
s¶
->privateKey);

1006 i‡(
›ti⁄s
->
s¶
->
¥iv©eKeyPassw‹d
)

1007 
m
->
c
->
s¶›ts
->
¥iv©eKeyPassw‹d
 = 
	`MQTTSådup
(
›ti⁄s
->
s¶
->privateKeyPassword);

1008 i‡(
›ti⁄s
->
s¶
->
íabÀdCùhîSuôes
)

1009 
m
->
c
->
s¶›ts
->
íabÀdCùhîSuôes
 = 
	`MQTTSådup
(
›ti⁄s
->
s¶
->enabledCipherSuites);

1010 
m
->
c
->
s¶›ts
->
íabÀSîvîCîtAuth
 = 
›ti⁄s
->
s¶
->enableServerCertAuth;

1014 
m
->
c
->
u£∫ame
 = 
›ti⁄s
->username;

1015 
m
->
c
->
∑ssw‹d
 = 
›ti⁄s
->password;

1016 
m
->
c
->
ªåyI¡îvÆ
 = 
›ti⁄s
->retryInterval;

1018 i‡(
›ti⁄s
->
°ru˘_vîsi⁄
 >= 3)

1019 
MQTTVîsi⁄
 = 
›ti⁄s
->MQTTVersion;

1021 
MQTTVîsi⁄
 = 
MQTTVERSION_DEFAULT
;

1023 i‡(
MQTTVîsi⁄
 =
MQTTVERSION_DEFAULT
)

1025 i‡((
rc
 = 
	`MQTTClõ¡_c⁄√˘URIVîsi⁄
(
h™dÀ
, 
›ti⁄s
, 
£rvîURI
, 4, 
°¨t
, 
mûli£csTimeout
)Ë!
MQTTCLIENT_SUCCESS
)

1026 
rc
 = 
	`MQTTClõ¡_c⁄√˘URIVîsi⁄
(
h™dÀ
, 
›ti⁄s
, 
£rvîURI
, 3, 
°¨t
, 
mûli£csTimeout
);

1029 
rc
 = 
	`MQTTClõ¡_c⁄√˘URIVîsi⁄
(
h™dÀ
, 
›ti⁄s
, 
£rvîURI
, 
MQTTVîsi⁄
, 
°¨t
, 
mûli£csTimeout
);

1031 
	`FUNC_EXIT_RC
(
rc
);

1032  
rc
;

1033 
	}
}

1036 
	$MQTTClõ¡_c⁄√˘
(
MQTTClõ¡
 
h™dÀ
, 
MQTTClõ¡_c⁄√˘O±i⁄s
* 
›ti⁄s
)

1038 
MQTTClõ¡s
* 
m
 = 
h™dÀ
;

1039 
rc
 = 
SOCKET_ERROR
;

1041 
FUNC_ENTRY
;

1042 
	`Thªad_lock_muãx
(
mqâ˛õ¡_muãx
);

1044 i‡(
›ti⁄s
 =
NULL
)

1046 
rc
 = 
MQTTCLIENT_NULL_PARAMETER
;

1047 
exô
;

1050 i‡(
	`°∫cmp
(
›ti⁄s
->
°ru˘_id
, "MQTC", 4) != 0 ||

1051 (
›ti⁄s
->
°ru˘_vîsi⁄
 != 0 && options->struct_version != 1 && options->struct_version != 2

1052 && 
›ti⁄s
->
°ru˘_vîsi⁄
 != 3 && options->struct_version != 4))

1054 
rc
 = 
MQTTCLIENT_BAD_STRUCTURE
;

1055 
exô
;

1058 i‡(
›ti⁄s
->
wûl
)

1060 i‡(
	`°∫cmp
(
›ti⁄s
->
wûl
->
°ru˘_id
, "MQTW", 4Ë!0 || o±i⁄s->wûl->
°ru˘_vîsi⁄
 != 0)

1062 
rc
 = 
MQTTCLIENT_BAD_STRUCTURE
;

1063 
exô
;

1067 #i‡
	`deföed
(
OPENSSL
)

1068 i‡(
›ti⁄s
->
°ru˘_vîsi⁄
 !0 && o±i⁄s->
s¶
)

1070 i‡(
	`°∫cmp
(
›ti⁄s
->
s¶
->
°ru˘_id
, "MQTS", 4Ë!0 || o±i⁄s->s¶->
°ru˘_vîsi⁄
 != 0)

1072 
rc
 = 
MQTTCLIENT_BAD_STRUCTURE
;

1073 
exô
;

1078 i‡((
›ti⁄s
->
u£∫ame
 && !
	`UTF8_vÆid©eSåög
(options->username)) ||

1079 (
›ti⁄s
->
∑ssw‹d
 && !
	`UTF8_vÆid©eSåög
(options->password)))

1081 
rc
 = 
MQTTCLIENT_BAD_UTF8_STRING
;

1082 
exô
;

1085 i‡(
›ti⁄s
->
°ru˘_vîsi⁄
 < 2 || o±i⁄s->
£rvîURIcou¡
 == 0)

1086 
rc
 = 
	`MQTTClõ¡_c⁄√˘URI
(
h™dÀ
, 
›ti⁄s
, 
m
->
£rvîURI
);

1089 
i
;

1091 
i
 = 0; i < 
›ti⁄s
->
£rvîURIcou¡
; ++i)

1093 * 
£rvîURI
 = 
›ti⁄s
->
£rvîURIs
[
i
];

1095 i‡(
	`°∫cmp
(
URI_TCP
, 
£rvîURI
, 
	`°æí
(URI_TCP)) == 0)

1096 
£rvîURI
 +
	`°æí
(
URI_TCP
);

1097 #i‡
	`deföed
(
OPENSSL
)

1098 i‡(
	`°∫cmp
(
URI_SSL
, 
£rvîURI
, 
	`°æí
(URI_SSL)) == 0)

1100 
£rvîURI
 +
	`°æí
(
URI_SSL
);

1101 
m
->
s¶
 = 1;

1104 i‡((
rc
 = 
	`MQTTClõ¡_c⁄√˘URI
(
h™dÀ
, 
›ti⁄s
, 
£rvîURI
)Ë=
MQTTCLIENT_SUCCESS
)

1109 
exô
:

1110 i‡(
m
->
c
->
wûl
)

1112 
	`‰ì
(
m
->
c
->
wûl
);

1113 
m
->
c
->
wûl
 = 
NULL
;

1115 
	`Thªad_u∆ock_muãx
(
mqâ˛õ¡_muãx
);

1116 
	`FUNC_EXIT_RC
(
rc
);

1117  
rc
;

1118 
	}
}

1121 
	$MQTTClõ¡_disc⁄√˘1
(
MQTTClõ¡
 
h™dÀ
, 
timeout
, 
öã∫Æ
, 
°›
)

1123 
MQTTClõ¡s
* 
m
 = 
h™dÀ
;

1124 
START_TIME_TYPE
 
°¨t
;

1125 
rc
 = 
MQTTCLIENT_SUCCESS
;

1126 
was_c⁄√˘ed
 = 0;

1128 
FUNC_ENTRY
;

1129 
	`Thªad_lock_muãx
(
mqâ˛õ¡_muãx
);

1131 i‡(
m
 =
NULL
 || m->
c
 == NULL)

1133 
rc
 = 
MQTTCLIENT_FAILURE
;

1134 
exô
;

1136 i‡(
m
->
c
->
c⁄√˘ed
 =0 && m->c->
c⁄√˘_°©e
 == 0)

1138 
rc
 = 
MQTTCLIENT_DISCONNECTED
;

1139 
exô
;

1141 
was_c⁄√˘ed
 = 
m
->
c
->
c⁄√˘ed
;

1142 i‡(
m
->
c
->
c⁄√˘ed
 != 0)

1144 
°¨t
 = 
	`MQTTClõ¡_°¨t_˛ock
();

1145 
m
->
c
->
c⁄√˘_°©e
 = -2;

1146 
m
->
c
->
öboundMsgs
->
cou¡
 > 0 || m->c->
outboundMsgs
->count > 0)

1148 i‡(
	`MQTTClõ¡_ñ≠£d
(
°¨t
Ë>
timeout
)

1150 
	`Thªad_u∆ock_muãx
(
mqâ˛õ¡_muãx
);

1151 
	`MQTTClõ¡_yõld
();

1152 
	`Thªad_lock_muãx
(
mqâ˛õ¡_muãx
);

1156 
	`MQTTClõ¡_˛o£Sessi⁄
(
m
->
c
);

1158 
	`Thªad_check_£m
(
m
->
c⁄√˘_£m
))

1159 
	`Thªad_waô_£m
(
m
->
c⁄√˘_£m
, 100);

1160 
	`Thªad_check_£m
(
m
->
c⁄«ck_£m
))

1161 
	`Thªad_waô_£m
(
m
->
c⁄«ck_£m
, 100);

1162 
	`Thªad_check_£m
(
m
->
suback_£m
))

1163 
	`Thªad_waô_£m
(
m
->
suback_£m
, 100);

1164 
	`Thªad_check_£m
(
m
->
unsuback_£m
))

1165 
	`Thªad_waô_£m
(
m
->
unsuback_£m
, 100);

1166 
exô
:

1167 i‡(
°›
)

1168 
	`MQTTClõ¡_°›
();

1169 i‡(
öã∫Æ
 && 
m
->
˛
 && 
was_c⁄√˘ed
)

1171 
	`Log
(
TRACE_MIN
, -1, "CÆlög c⁄√˘i⁄Lo° f‹ clõ¡ %s", 
m
->
c
->
˛õ¡ID
);

1172 
	`Thªad_°¨t
(
c⁄√˘i⁄Lo°_ˇŒ
, 
m
);

1174 
	`Thªad_u∆ock_muãx
(
mqâ˛õ¡_muãx
);

1175 
	`FUNC_EXIT_RC
(
rc
);

1176  
rc
;

1177 
	}
}

1180 
	$MQTTClõ¡_disc⁄√˘_öã∫Æ
(
MQTTClõ¡
 
h™dÀ
, 
timeout
)

1182  
	`MQTTClõ¡_disc⁄√˘1
(
h™dÀ
, 
timeout
, 1, 1);

1183 
	}
}

1186 
	$MQTTPrŸocﬁ_˛o£Sessi⁄
(
Clõ¡s
* 
c
, 
£ndwûl
)

1188 
	`MQTTClõ¡_disc⁄√˘_öã∫Æ
((
MQTTClõ¡
)
c
->
c⁄ãxt
, 0);

1189 
	}
}

1192 
	$MQTTClõ¡_disc⁄√˘
(
MQTTClõ¡
 
h™dÀ
, 
timeout
)

1194  
	`MQTTClõ¡_disc⁄√˘1
(
h™dÀ
, 
timeout
, 0, 1);

1195 
	}
}

1198 
	$MQTTClõ¡_isC⁄√˘ed
(
MQTTClõ¡
 
h™dÀ
)

1200 
MQTTClõ¡s
* 
m
 = 
h™dÀ
;

1201 
rc
 = 0;

1203 
FUNC_ENTRY
;

1204 
	`Thªad_lock_muãx
(
mqâ˛õ¡_muãx
);

1205 i‡(
m
 && m->
c
)

1206 
rc
 = 
m
->
c
->
c⁄√˘ed
;

1207 
	`Thªad_u∆ock_muãx
(
mqâ˛õ¡_muãx
);

1208 
	`FUNC_EXIT_RC
(
rc
);

1209  
rc
;

1210 
	}
}

1213 
	$MQTTClõ¡_subs¸ibeM™y
(
MQTTClõ¡
 
h™dÀ
, 
cou¡
, * c⁄°* 
t›ic
, * 
qos
)

1215 
MQTTClõ¡s
* 
m
 = 
h™dÀ
;

1216 
Li°
* 
t›ics
 = 
	`Li°Inôülize
();

1217 
Li°
* 
qoss
 = 
	`Li°Inôülize
();

1218 
i
 = 0;

1219 
rc
 = 
MQTTCLIENT_FAILURE
;

1220 
msgid
 = 0;

1222 
FUNC_ENTRY
;

1223 
	`Thªad_lock_muãx
(
mqâ˛õ¡_muãx
);

1225 i‡(
m
 =
NULL
 || m->
c
 == NULL)

1227 
rc
 = 
MQTTCLIENT_FAILURE
;

1228 
exô
;

1230 i‡(
m
->
c
->
c⁄√˘ed
 == 0)

1232 
rc
 = 
MQTTCLIENT_DISCONNECTED
;

1233 
exô
;

1235 
i
 = 0; i < 
cou¡
; i++)

1237 i‡(!
	`UTF8_vÆid©eSåög
(
t›ic
[
i
]))

1239 
rc
 = 
MQTTCLIENT_BAD_UTF8_STRING
;

1240 
exô
;

1243 if(
qos
[
i
] < 0 || qos[i] > 2)

1245 
rc
 = 
MQTTCLIENT_BAD_QOS
;

1246 
exô
;

1249 i‡((
msgid
 = 
	`MQTTPrŸocﬁ_assignMsgId
(
m
->
c
)) == 0)

1251 
rc
 = 
MQTTCLIENT_MAX_MESSAGES_INFLIGHT
;

1252 
exô
;

1255 
i
 = 0; i < 
cou¡
; i++)

1257 
	`Li°Aµíd
(
t›ics
, 
t›ic
[
i
], 
	`°æí
(topic[i]));

1258 
	`Li°Aµíd
(
qoss
, &
qos
[
i
], ());

1261 
rc
 = 
	`MQTTPrŸocﬁ_subs¸ibe
(
m
->
c
, 
t›ics
, 
qoss
, 
msgid
);

1262 
	`Li°FªeNoC⁄ã¡
(
t›ics
);

1263 
	`Li°FªeNoC⁄ã¡
(
qoss
);

1265 i‡(
rc
 =
TCPSOCKET_COMPLETE
)

1267 
MQTTPackë
* 
∑ck
 = 
NULL
;

1269 
	`Thªad_u∆ock_muãx
(
mqâ˛õ¡_muãx
);

1270 
∑ck
 = 
	`MQTTClõ¡_waôf‹
(
h™dÀ
, 
SUBACK
, &
rc
, 10000L);

1271 
	`Thªad_lock_muãx
(
mqâ˛õ¡_muãx
);

1272 i‡(
∑ck
 !
NULL
)

1274 
Suback
* 
sub
 = (Suback*)
∑ck
;

1275 
Li°EÀmít
* 
cuºít
 = 
NULL
;

1276 
i
 = 0;

1277 
	`Li°NextEÀmít
(
sub
->
qoss
, &
cuºít
))

1279 * 
ªqqos
 = (*)(
cuºít
->
c⁄ã¡
);

1280 
qos
[
i
++] = *
ªqqos
;

1282 
rc
 = 
	`MQTTPrŸocﬁ_h™dÀSubacks
(
∑ck
, 
m
->
c
->
√t
.
sockë
);

1283 
m
->
∑ck
 = 
NULL
;

1286 
rc
 = 
SOCKET_ERROR
;

1289 i‡(
rc
 =
SOCKET_ERROR
)

1291 
	`Thªad_u∆ock_muãx
(
mqâ˛õ¡_muãx
);

1292 
	`MQTTClõ¡_disc⁄√˘_öã∫Æ
(
h™dÀ
, 0);

1293 
	`Thªad_lock_muãx
(
mqâ˛õ¡_muãx
);

1295 i‡(
rc
 =
TCPSOCKET_COMPLETE
)

1296 
rc
 = 
MQTTCLIENT_SUCCESS
;

1298 
exô
:

1299 
	`Thªad_u∆ock_muãx
(
mqâ˛õ¡_muãx
);

1300 
	`FUNC_EXIT_RC
(
rc
);

1301  
rc
;

1302 
	}
}

1305 
	$MQTTClõ¡_subs¸ibe
(
MQTTClõ¡
 
h™dÀ
, c⁄° * 
t›ic
, 
qos
)

1307 
rc
 = 0;

1308 *c⁄° 
t›ics
[] = {(*)
t›ic
};

1310 
FUNC_ENTRY
;

1311 
rc
 = 
	`MQTTClõ¡_subs¸ibeM™y
(
h™dÀ
, 1, 
t›ics
, &
qos
);

1312 i‡(
qos
 =
MQTT_BAD_SUBSCRIBE
)

1313 
rc
 = 
MQTT_BAD_SUBSCRIBE
;

1314 
	`FUNC_EXIT_RC
(
rc
);

1315  
rc
;

1316 
	}
}

1319 
	$MQTTClõ¡_unsubs¸ibeM™y
(
MQTTClõ¡
 
h™dÀ
, 
cou¡
, * c⁄°* 
t›ic
)

1321 
MQTTClõ¡s
* 
m
 = 
h™dÀ
;

1322 
Li°
* 
t›ics
 = 
	`Li°Inôülize
();

1323 
i
 = 0;

1324 
rc
 = 
SOCKET_ERROR
;

1325 
msgid
 = 0;

1327 
FUNC_ENTRY
;

1328 
	`Thªad_lock_muãx
(
mqâ˛õ¡_muãx
);

1330 i‡(
m
 =
NULL
 || m->
c
 == NULL)

1332 
rc
 = 
MQTTCLIENT_FAILURE
;

1333 
exô
;

1335 i‡(
m
->
c
->
c⁄√˘ed
 == 0)

1337 
rc
 = 
MQTTCLIENT_DISCONNECTED
;

1338 
exô
;

1340 
i
 = 0; i < 
cou¡
; i++)

1342 i‡(!
	`UTF8_vÆid©eSåög
(
t›ic
[
i
]))

1344 
rc
 = 
MQTTCLIENT_BAD_UTF8_STRING
;

1345 
exô
;

1348 i‡((
msgid
 = 
	`MQTTPrŸocﬁ_assignMsgId
(
m
->
c
)) == 0)

1350 
rc
 = 
MQTTCLIENT_MAX_MESSAGES_INFLIGHT
;

1351 
exô
;

1354 
i
 = 0; i < 
cou¡
; i++)

1355 
	`Li°Aµíd
(
t›ics
, 
t›ic
[
i
], 
	`°æí
(topic[i]));

1356 
rc
 = 
	`MQTTPrŸocﬁ_unsubs¸ibe
(
m
->
c
, 
t›ics
, 
msgid
);

1357 
	`Li°FªeNoC⁄ã¡
(
t›ics
);

1359 i‡(
rc
 =
TCPSOCKET_COMPLETE
)

1361 
MQTTPackë
* 
∑ck
 = 
NULL
;

1363 
	`Thªad_u∆ock_muãx
(
mqâ˛õ¡_muãx
);

1364 
∑ck
 = 
	`MQTTClõ¡_waôf‹
(
h™dÀ
, 
UNSUBACK
, &
rc
, 10000L);

1365 
	`Thªad_lock_muãx
(
mqâ˛õ¡_muãx
);

1366 i‡(
∑ck
 !
NULL
)

1368 
rc
 = 
	`MQTTPrŸocﬁ_h™dÀUnsubacks
(
∑ck
, 
m
->
c
->
√t
.
sockë
);

1369 
m
->
∑ck
 = 
NULL
;

1372 
rc
 = 
SOCKET_ERROR
;

1375 i‡(
rc
 =
SOCKET_ERROR
)

1377 
	`Thªad_u∆ock_muãx
(
mqâ˛õ¡_muãx
);

1378 
	`MQTTClõ¡_disc⁄√˘_öã∫Æ
(
h™dÀ
, 0);

1379 
	`Thªad_lock_muãx
(
mqâ˛õ¡_muãx
);

1382 
exô
:

1383 
	`Thªad_u∆ock_muãx
(
mqâ˛õ¡_muãx
);

1384 
	`FUNC_EXIT_RC
(
rc
);

1385  
rc
;

1386 
	}
}

1389 
	$MQTTClõ¡_unsubs¸ibe
(
MQTTClõ¡
 
h™dÀ
, c⁄° * 
t›ic
)

1391 
rc
 = 0;

1392 *c⁄° 
t›ics
[] = {(*)
t›ic
};

1393 
FUNC_ENTRY
;

1394 
rc
 = 
	`MQTTClõ¡_unsubs¸ibeM™y
(
h™dÀ
, 1, 
t›ics
);

1395 
	`FUNC_EXIT_RC
(
rc
);

1396  
rc
;

1397 
	}
}

1400 
	$MQTTClõ¡_publish
(
MQTTClõ¡
 
h™dÀ
, c⁄° * 
t›icName
, 
∑ylﬂdÀn
, * 
∑ylﬂd
,

1401 
qos
, 
ªèöed
, 
MQTTClõ¡_dñivîyTokí
* 
dñivîyTokí
)

1403 
rc
 = 
MQTTCLIENT_SUCCESS
;

1404 
MQTTClõ¡s
* 
m
 = 
h™dÀ
;

1405 
Mesßges
* 
msg
 = 
NULL
;

1406 
Publish
* 
p
 = 
NULL
;

1407 
blocked
 = 0;

1408 
msgid
 = 0;

1410 
FUNC_ENTRY
;

1411 
	`Thªad_lock_muãx
(
mqâ˛õ¡_muãx
);

1413 i‡(
m
 =
NULL
 || m->
c
 == NULL)

1414 
rc
 = 
MQTTCLIENT_FAILURE
;

1415 i‡(
m
->
c
->
c⁄√˘ed
 == 0)

1416 
rc
 = 
MQTTCLIENT_DISCONNECTED
;

1417 i‡(!
	`UTF8_vÆid©eSåög
(
t›icName
))

1418 
rc
 = 
MQTTCLIENT_BAD_UTF8_STRING
;

1419 i‡(
rc
 !
MQTTCLIENT_SUCCESS
)

1420 
exô
;

1423 
m
->
c
->
outboundMsgs
->
cou¡
 >m->c->
maxInÊightMesßges
 ||

1424 
	`Sockë_noPídögWrôes
(
m
->
c
->
√t
.
sockë
) == 0)

1426 i‡(
blocked
 == 0)

1428 
blocked
 = 1;

1429 
	`Log
(
TRACE_MIN
, -1, "BlockögÖublish o¿queuêfuŒ f‹ clõ¡ %s", 
m
->
c
->
˛õ¡ID
);

1431 
	`Thªad_u∆ock_muãx
(
mqâ˛õ¡_muãx
);

1432 
	`MQTTClõ¡_yõld
();

1433 
	`Thªad_lock_muãx
(
mqâ˛õ¡_muãx
);

1434 i‡(
m
->
c
->
c⁄√˘ed
 == 0)

1436 
rc
 = 
MQTTCLIENT_FAILURE
;

1437 
exô
;

1440 i‡(
blocked
 == 1)

1441 
	`Log
(
TRACE_MIN
, -1, "ResumögÖublishÇow queuênŸ fuŒ f‹ clõ¡ %s", 
m
->
c
->
˛õ¡ID
);

1442 i‡(
qos
 > 0 && (
msgid
 = 
	`MQTTPrŸocﬁ_assignMsgId
(
m
->
c
)) == 0)

1444 
rc
 = 
MQTTCLIENT_MAX_MESSAGES_INFLIGHT
;

1445 
exô
;

1448 
p
 = 
	`mÆloc
((
Publish
));

1450 
p
->
∑ylﬂd
 =Öayload;

1451 
p
->
∑ylﬂdÀn
 =Öayloadlen;

1452 
p
->
t›ic
 = (*)
t›icName
;

1453 
p
->
msgId
 = 
msgid
;

1455 
rc
 = 
	`MQTTPrŸocﬁ_°¨tPublish
(
m
->
c
, 
p
, 
qos
, 
ªèöed
, &
msg
);

1462 i‡(
rc
 =
TCPSOCKET_INTERRUPTED
)

1464 
m
->
c
->
c⁄√˘ed
 =1 && 
	`SockëBuf„r_gëWrôe
(m->c->
√t
.
sockë
))

1466 
	`Thªad_u∆ock_muãx
(
mqâ˛õ¡_muãx
);

1467 
	`MQTTClõ¡_yõld
();

1468 
	`Thªad_lock_muãx
(
mqâ˛õ¡_muãx
);

1470 
rc
 = (
qos
 > 0 || 
m
->
c
->
c⁄√˘ed
 =1Ë? 
MQTTCLIENT_SUCCESS
 : 
MQTTCLIENT_FAILURE
;

1473 i‡(
dñivîyTokí
 && 
qos
 > 0)

1474 *
dñivîyTokí
 = 
msg
->
msgid
;

1476 
	`‰ì
(
p
);

1478 i‡(
rc
 =
SOCKET_ERROR
)

1480 
	`Thªad_u∆ock_muãx
(
mqâ˛õ¡_muãx
);

1481 
	`MQTTClõ¡_disc⁄√˘_öã∫Æ
(
h™dÀ
, 0);

1482 
	`Thªad_lock_muãx
(
mqâ˛õ¡_muãx
);

1484 
rc
 = (
qos
 > 0Ë? 
MQTTCLIENT_SUCCESS
 : 
MQTTCLIENT_FAILURE
;

1487 
exô
:

1488 
	`Thªad_u∆ock_muãx
(
mqâ˛õ¡_muãx
);

1489 
	`FUNC_EXIT_RC
(
rc
);

1490  
rc
;

1491 
	}
}

1495 
	$MQTTClõ¡_publishMesßge
(
MQTTClõ¡
 
h™dÀ
, c⁄° * 
t›icName
, 
MQTTClõ¡_mesßge
* 
mesßge
,

1496 
MQTTClõ¡_dñivîyTokí
* 
dñivîyTokí
)

1498 
rc
 = 
MQTTCLIENT_SUCCESS
;

1500 
FUNC_ENTRY
;

1501 i‡(
mesßge
 =
NULL
)

1503 
rc
 = 
MQTTCLIENT_NULL_PARAMETER
;

1504 
exô
;

1507 i‡(
	`°∫cmp
(
mesßge
->
°ru˘_id
, "MQTM", 4Ë!0 || mesßge->
°ru˘_vîsi⁄
 != 0)

1509 
rc
 = 
MQTTCLIENT_BAD_STRUCTURE
;

1510 
exô
;

1513 
rc
 = 
	`MQTTClõ¡_publish
(
h™dÀ
, 
t›icName
, 
mesßge
->
∑ylﬂdÀn
, mesßge->
∑ylﬂd
,

1514 
mesßge
->
qos
, mesßge->
ªèöed
, 
dñivîyTokí
);

1515 
exô
:

1516 
	`FUNC_EXIT_RC
(
rc
);

1517  
rc
;

1518 
	}
}

1521 
	$MQTTClõ¡_ªåy
()

1523 
time_t
 
now
;

1525 
FUNC_ENTRY
;

1526 
	`time
(&(
now
));

1527 i‡(
	`dif·ime
(
now
, 
œ°
) > 5)

1529 
	`time
(&(
œ°
));

1530 
	`MQTTPrŸocﬁ_kì∑live
(
now
);

1531 
	`MQTTPrŸocﬁ_ªåy
(
now
, 1, 0);

1534 
	`MQTTPrŸocﬁ_ªåy
(
now
, 0, 0);

1535 
FUNC_EXIT
;

1536 
	}
}

1539 
MQTTPackë
* 
	$MQTTClõ¡_cy˛e
(* 
sock
, 
timeout
, * 
rc
)

1541 
timevÆ
 
ç
 = {0L, 0L};

1542 
Ack
 
ack
;

1543 
MQTTPackë
* 
∑ck
 = 
NULL
;

1545 
FUNC_ENTRY
;

1546 i‡(
timeout
 > 0L)

1548 
ç
.
tv_£c
 = 
timeout
 / 1000;

1549 
ç
.
tv_u£c
 = (
timeout
 % 1000) * 1000;

1552 #i‡
	`deföed
(
OPENSSL
)

1553 i‡((*
sock
 = 
	`SSLSockë_gëPídögRód
()) == -1)

1557 
	`Thªad_lock_muãx
(
sockë_muãx
);

1558 *
sock
 = 
	`Sockë_gëRódySockë
(0, &
ç
);

1559 
	`Thªad_u∆ock_muãx
(
sockë_muãx
);

1560 #i‡
	`deföed
(
OPENSSL
)

1563 
	`Thªad_lock_muãx
(
mqâ˛õ¡_muãx
);

1564 i‡(*
sock
 > 0)

1566 
MQTTClõ¡s
* 
m
 = 
NULL
;

1567 i‡(
	`Li°FödIãm
(
h™dÀs
, 
sock
, 
˛õ¡SockCom∑ª
Ë!
NULL
)

1568 
m
 = (
MQTTClõ¡
)(
h™dÀs
->
cuºít
->
c⁄ã¡
);

1569 i‡(
m
 !
NULL
)

1571 i‡(
m
->
c
->
c⁄√˘_°©e
 == 1 || m->c->connect_state == 2)

1572 *
rc
 = 0;

1575 
∑ck
 = 
	`MQTTPackë_Fa˘‹y
(&
m
->
c
->
√t
, 
rc
);

1576 i‡(*
rc
 =
TCPSOCKET_INTERRUPTED
)

1577 *
rc
 = 0;

1580 i‡(
∑ck
)

1582 
‰ìd
 = 1;

1585 i‡(
∑ck
->
hódî
.
bôs
.
ty≥
 =
PUBLISH
)

1586 *
rc
 = 
	`MQTTPrŸocﬁ_h™dÀPublishes
(
∑ck
, *
sock
);

1587 i‡(
∑ck
->
hódî
.
bôs
.
ty≥
 =
PUBACK
 ||Öack->hódî.bôs.ty≥ =
PUBCOMP
)

1589 
msgid
;

1591 
ack
 = (
∑ck
->
hódî
.
bôs
.
ty≥
 =
PUBCOMP
Ë? *(
Pubcomp
*Ìack : *(
Puback
*)pack;

1592 
msgid
 = 
ack
.
msgId
;

1593 *
rc
 = (
∑ck
->
hódî
.
bôs
.
ty≥
 =
PUBCOMP
) ?

1594 
	`MQTTPrŸocﬁ_h™dÀPubcomps
(
∑ck
, *
sock
Ë: 
	`MQTTPrŸocﬁ_h™dÀPubacks
(pack, *sock);

1595 i‡(
m
 && m->
dc
)

1597 
	`Log
(
TRACE_MIN
, -1, "CÆlög dñivîyCom∂ëêf‹ clõ¡ %s, msgid %d", 
m
->
c
->
˛õ¡ID
, 
msgid
);

1598 (*(
m
->
dc
))(m->
c⁄ãxt
, 
msgid
);

1601 i‡(
∑ck
->
hódî
.
bôs
.
ty≥
 =
PUBREC
)

1602 *
rc
 = 
	`MQTTPrŸocﬁ_h™dÀPubªcs
(
∑ck
, *
sock
);

1603 i‡(
∑ck
->
hódî
.
bôs
.
ty≥
 =
PUBREL
)

1604 *
rc
 = 
	`MQTTPrŸocﬁ_h™dÀPubªls
(
∑ck
, *
sock
);

1605 i‡(
∑ck
->
hódî
.
bôs
.
ty≥
 =
PINGRESP
)

1606 *
rc
 = 
	`MQTTPrŸocﬁ_h™dÀPögª•s
(
∑ck
, *
sock
);

1608 
‰ìd
 = 0;

1609 i‡(
‰ìd
)

1610 
∑ck
 = 
NULL
;

1613 
	`MQTTClõ¡_ªåy
();

1614 
	`Thªad_u∆ock_muãx
(
mqâ˛õ¡_muãx
);

1615 
	`FUNC_EXIT_RC
(*
rc
);

1616  
∑ck
;

1617 
	}
}

1620 
MQTTPackë
* 
	$MQTTClõ¡_waôf‹
(
MQTTClõ¡
 
h™dÀ
, 
∑ckë_ty≥
, * 
rc
, 
timeout
)

1622 
MQTTPackë
* 
∑ck
 = 
NULL
;

1623 
MQTTClõ¡s
* 
m
 = 
h™dÀ
;

1624 
START_TIME_TYPE
 
°¨t
 = 
	`MQTTClõ¡_°¨t_˛ock
();

1626 
FUNC_ENTRY
;

1627 i‡(((
MQTTClõ¡s
*)
h™dÀ
Ë=
NULL
)

1629 *
rc
 = 
MQTTCLIENT_FAILURE
;

1630 
exô
;

1633 i‡(
ru¬ög
)

1635 i‡(
∑ckë_ty≥
 =
CONNECT
)

1637 i‡((*
rc
 = 
	`Thªad_waô_£m
(
m
->
c⁄√˘_£m
, 
timeout
)) == 0)

1638 *
rc
 = 
m
->rc;

1640 i‡(
∑ckë_ty≥
 =
CONNACK
)

1641 *
rc
 = 
	`Thªad_waô_£m
(
m
->
c⁄«ck_£m
, 
timeout
);

1642 i‡(
∑ckë_ty≥
 =
SUBACK
)

1643 *
rc
 = 
	`Thªad_waô_£m
(
m
->
suback_£m
, 
timeout
);

1644 i‡(
∑ckë_ty≥
 =
UNSUBACK
)

1645 *
rc
 = 
	`Thªad_waô_£m
(
m
->
unsuback_£m
, 
timeout
);

1646 i‡(*
rc
 =0 && 
∑ckë_ty≥
 !
CONNECT
 && 
m
->
∑ck
 =
NULL
)

1647 
	`Log
(
LOG_ERROR
, -1, "waôf‹ u√x≥˘edly i†NULL f‹ clõ¡ %s,Öackë_ty≥ %d,Åimeouà%ld", 
m
->
c
->
˛õ¡ID
, 
∑ckë_ty≥
, 
timeout
);

1648 
∑ck
 = 
m
->pack;

1652 *
rc
 = 
TCPSOCKET_COMPLETE
;

1655 
sock
 = -1;

1656 
∑ck
 = 
	`MQTTClõ¡_cy˛e
(&
sock
, 100L, 
rc
);

1657 i‡(
sock
 =
m
->
c
->
√t
.
sockë
)

1659 i‡(*
rc
 =
SOCKET_ERROR
)

1661 i‡(
∑ck
 && (∑ck->
hódî
.
bôs
.
ty≥
 =
∑ckë_ty≥
))

1663 i‡(
m
->
c
->
c⁄√˘_°©e
 == 1)

1665 
îr‹
;

1666 
sockÀn_t
 
Àn
 = (
îr‹
);

1668 i‡((*
rc
 = 
	`gësock›t
(
m
->
c
->
√t
.
sockë
, 
SOL_SOCKET
, 
SO_ERROR
, (*)&
îr‹
, &
Àn
)) == 0)

1669 *
rc
 = 
îr‹
;

1672 #i‡
	`deföed
(
OPENSSL
)

1673 i‡(
m
->
c
->
c⁄√˘_°©e
 == 2)

1675 *
rc
 = 
	`SSLSockë_c⁄√˘
(
m
->
c
->
√t
.
s¶
, 
sock
);

1676 i‡(*
rc
 =
SSL_FATAL
)

1678 i‡(*
rc
 == 1)

1680 i‡(!
m
->
c
->
˛ón£ssi⁄
 && m->c->
£ssi⁄
 =
NULL
)

1681 
m
->
c
->
£ssi⁄
 = 
	`SSL_gë1_£ssi⁄
(m->c->
√t
.
s¶
);

1686 i‡(
m
->
c
->
c⁄√˘_°©e
 == 3)

1688 
îr‹
;

1689 
sockÀn_t
 
Àn
 = (
îr‹
);

1691 i‡(
	`gësock›t
(
m
->
c
->
√t
.
sockë
, 
SOL_SOCKET
, 
SO_ERROR
, (*)&
îr‹
, &
Àn
) == 0)

1693 i‡(
îr‹
)

1695 *
rc
 = 
îr‹
;

1701 i‡(
	`MQTTClõ¡_ñ≠£d
(
°¨t
Ë> 
timeout
)

1703 
∑ck
 = 
NULL
;

1709 
exô
:

1710 
	`FUNC_EXIT_RC
(*
rc
);

1711  
∑ck
;

1712 
	}
}

1715 
	$MQTTClõ¡_ª˚ive
(
MQTTClõ¡
 
h™dÀ
, ** 
t›icName
, * 
t›icLí
, 
MQTTClõ¡_mesßge
** 
mesßge
,

1716 
timeout
)

1718 
rc
 = 
TCPSOCKET_COMPLETE
;

1719 
START_TIME_TYPE
 
°¨t
 = 
	`MQTTClõ¡_°¨t_˛ock
();

1720 
ñ≠£d
 = 0L;

1721 
MQTTClõ¡s
* 
m
 = 
h™dÀ
;

1723 
FUNC_ENTRY
;

1724 i‡(
m
 =
NULL
 || m->
c
 == NULL)

1726 
rc
 = 
MQTTCLIENT_FAILURE
;

1727 
exô
;

1729 i‡(
m
->
c
->
c⁄√˘ed
 == 0)

1731 
rc
 = 
MQTTCLIENT_DISCONNECTED
;

1732 
exô
;

1735 *
t›icName
 = 
NULL
;

1736 *
mesßge
 = 
NULL
;

1739 i‡(
m
->
c
->
mesßgeQueue
->
cou¡
 > 0)

1740 
timeout
 = 0L;

1742 
ñ≠£d
 = 
	`MQTTClõ¡_ñ≠£d
(
°¨t
);

1745 
sock
 = 0;

1746 
	`MQTTClõ¡_cy˛e
(&
sock
, (
timeout
 > 
ñ≠£d
Ë?Åimeouà-Éœp£d : 0L, &
rc
);

1748 i‡(
rc
 =
SOCKET_ERROR
)

1750 i‡(
	`Li°FödIãm
(
h™dÀs
, &
sock
, 
˛õ¡SockCom∑ª
) &&

1751 (
MQTTClõ¡
)(
h™dÀs
->
cuºít
->
c⁄ã¡
Ë=
h™dÀ
)

1754 
ñ≠£d
 = 
	`MQTTClõ¡_ñ≠£d
(
°¨t
);

1756 
ñ≠£d
 < 
timeout
 && 
m
->
c
->
mesßgeQueue
->
cou¡
 == 0);

1758 i‡(
m
->
c
->
mesßgeQueue
->
cou¡
 > 0)

1759 
rc
 = 
	`MQTTClõ¡_dñivîMesßge
‘c, 
m
, 
t›icName
, 
t›icLí
, 
mesßge
);

1761 i‡(
rc
 =
SOCKET_ERROR
)

1762 
	`MQTTClõ¡_disc⁄√˘_öã∫Æ
(
h™dÀ
, 0);

1764 
exô
:

1765 
	`FUNC_EXIT_RC
(
rc
);

1766  
rc
;

1767 
	}
}

1770 
	$MQTTClõ¡_yõld
()

1772 
START_TIME_TYPE
 
°¨t
 = 
	`MQTTClõ¡_°¨t_˛ock
();

1773 
ñ≠£d
 = 0L;

1774 
timeout
 = 100L;

1775 
rc
 = 0;

1777 
FUNC_ENTRY
;

1778 i‡(
ru¬ög
)

1780 
	`MQTTClõ¡_¶ìp
(
timeout
);

1781 
exô
;

1784 
ñ≠£d
 = 
	`MQTTClõ¡_ñ≠£d
(
°¨t
);

1787 
sock
 = -1;

1788 
	`MQTTClõ¡_cy˛e
(&
sock
, (
timeout
 > 
ñ≠£d
Ë?Åimeouà-Éœp£d : 0L, &
rc
);

1789 i‡(
rc
 =
SOCKET_ERROR
 && 
	`Li°FödIãm
(
h™dÀs
, &
sock
, 
˛õ¡SockCom∑ª
))

1791 
MQTTClõ¡s
* 
m
 = (
MQTTClõ¡
)(
h™dÀs
->
cuºít
->
c⁄ã¡
);

1792 i‡(
m
->
c
->
c⁄√˘_°©e
 != -2)

1793 
	`MQTTClõ¡_disc⁄√˘_öã∫Æ
(
m
, 0);

1795 
ñ≠£d
 = 
	`MQTTClõ¡_ñ≠£d
(
°¨t
);

1797 
ñ≠£d
 < 
timeout
);

1798 
exô
:

1799 
FUNC_EXIT
;

1800 
	}
}

1803 
	$pubCom∑ª
(* 
a
, * 
b
)

1805 
Mesßges
* 
msg
 = (Mesßges*)
a
;

1806  
msg
->
publish
 =(
Publiˇti⁄s
*)
b
;

1807 
	}
}

1810 
	$MQTTClõ¡_waôF‹Com∂ëi⁄
(
MQTTClõ¡
 
h™dÀ
, 
MQTTClõ¡_dñivîyTokí
 
mdt
, 
timeout
)

1812 
rc
 = 
MQTTCLIENT_FAILURE
;

1813 
START_TIME_TYPE
 
°¨t
 = 
	`MQTTClõ¡_°¨t_˛ock
();

1814 
ñ≠£d
 = 0L;

1815 
MQTTClõ¡s
* 
m
 = 
h™dÀ
;

1817 
FUNC_ENTRY
;

1818 
	`Thªad_lock_muãx
(
mqâ˛õ¡_muãx
);

1820 i‡(
m
 =
NULL
 || m->
c
 == NULL)

1822 
rc
 = 
MQTTCLIENT_FAILURE
;

1823 
exô
;

1825 i‡(
m
->
c
->
c⁄√˘ed
 == 0)

1827 
rc
 = 
MQTTCLIENT_DISCONNECTED
;

1828 
exô
;

1831 i‡(
	`Li°FödIãm
(
m
->
c
->
outboundMsgs
, &
mdt
, 
mesßgeIDCom∑ª
Ë=
NULL
)

1833 
rc
 = 
MQTTCLIENT_SUCCESS
;

1834 
exô
;

1837 
ñ≠£d
 = 
	`MQTTClõ¡_ñ≠£d
(
°¨t
);

1838 
ñ≠£d
 < 
timeout
)

1840 
	`Thªad_u∆ock_muãx
(
mqâ˛õ¡_muãx
);

1841 
	`MQTTClõ¡_yõld
();

1842 
	`Thªad_lock_muãx
(
mqâ˛õ¡_muãx
);

1843 i‡(
	`Li°FödIãm
(
m
->
c
->
outboundMsgs
, &
mdt
, 
mesßgeIDCom∑ª
Ë=
NULL
)

1845 
rc
 = 
MQTTCLIENT_SUCCESS
;

1846 
exô
;

1848 
ñ≠£d
 = 
	`MQTTClõ¡_ñ≠£d
(
°¨t
);

1851 
exô
:

1852 
	`Thªad_u∆ock_muãx
(
mqâ˛õ¡_muãx
);

1853 
	`FUNC_EXIT_RC
(
rc
);

1854  
rc
;

1855 
	}
}

1858 
	$MQTTClõ¡_gëPídögDñivîyTokís
(
MQTTClõ¡
 
h™dÀ
, 
MQTTClõ¡_dñivîyTokí
 **
tokís
)

1860 
rc
 = 
MQTTCLIENT_SUCCESS
;

1861 
MQTTClõ¡s
* 
m
 = 
h™dÀ
;

1862 *
tokís
 = 
NULL
;

1864 
FUNC_ENTRY
;

1865 
	`Thªad_lock_muãx
(
mqâ˛õ¡_muãx
);

1867 i‡(
m
 =
NULL
)

1869 
rc
 = 
MQTTCLIENT_FAILURE
;

1870 
exô
;

1873 i‡(
m
->
c
 && m->c->
outboundMsgs
->
cou¡
 > 0)

1875 
Li°EÀmít
* 
cuºít
 = 
NULL
;

1876 
cou¡
 = 0;

1878 *
tokís
 = 
	`mÆloc
((
MQTTClõ¡_dñivîyTokí
Ë* (
m
->
c
->
outboundMsgs
->
cou¡
 + 1));

1880 
	`Li°NextEÀmít
(
m
->
c
->
outboundMsgs
, &
cuºít
))

1882 
Mesßges
* 
m
 = (Mesßges*)(
cuºít
->
c⁄ã¡
);

1883 (*
tokís
)[
cou¡
++] = 
m
->
msgid
;

1885 (*
tokís
)[
cou¡
] = -1;

1888 
exô
:

1889 
	`Thªad_u∆ock_muãx
(
mqâ˛õ¡_muãx
);

1890 
	`FUNC_EXIT_RC
(
rc
);

1891  
rc
;

1892 
	}
}

1894 
MQTTClõ¡_«meVÆue
* 
	$MQTTClõ¡_gëVîsi⁄Info
()

1896 
	#MAX_INFO_STRINGS
 8

	)

1897 
MQTTClõ¡_«meVÆue
 
liböfo
[
MAX_INFO_STRINGS
 + 1];

1898 
i
 = 0;

1900 
liböfo
[
i
].
«me
 = "ProductÇame";

1901 
liböfo
[
i
++].
vÆue
 = "Paho Synchronous MQTT C Client Library";

1903 
liböfo
[
i
].
«me
 = "Version";

1904 
liböfo
[
i
++].
vÆue
 = 
CLIENT_VERSION
;

1906 
liböfo
[
i
].
«me
 = "BuildÜevel";

1907 
liböfo
[
i
++].
vÆue
 = 
BUILD_TIMESTAMP
;

1908 #i‡
	`deföed
(
OPENSSL
)

1909 
liböfo
[
i
].
«me
 = "OpenSSL version";

1910 
liböfo
[
i
++].
vÆue
 = 
	`SSLóy_vîsi⁄
(
SSLEAY_VERSION
);

1912 
liböfo
[
i
].
«me
 = "OpenSSL flags";

1913 
liböfo
[
i
++].
vÆue
 = 
	`SSLóy_vîsi⁄
(
SSLEAY_CFLAGS
);

1915 
liböfo
[
i
].
«me
 = "OpenSSL buildÅimestamp";

1916 
liböfo
[
i
++].
vÆue
 = 
	`SSLóy_vîsi⁄
(
SSLEAY_BUILT_ON
);

1918 
liböfo
[
i
].
«me
 = "OpenSSLÖlatform";

1919 
liböfo
[
i
++].
vÆue
 = 
	`SSLóy_vîsi⁄
(
SSLEAY_PLATFORM
);

1921 
liböfo
[
i
].
«me
 = "OpenSSL directory";

1922 
liböfo
[
i
++].
vÆue
 = 
	`SSLóy_vîsi⁄
(
SSLEAY_DIR
);

1924 
liböfo
[
i
].
«me
 = 
NULL
;

1925 
liböfo
[
i
].
vÆue
 = 
NULL
;

1926  
liböfo
;

1927 
	}
}

1935 
	$MQTTPrŸocﬁ_checkPídögWrôes
()

1937 
FUNC_ENTRY
;

1938 i‡(
°©e
.
≥ndög_wrôes
.
cou¡
 > 0)

1940 
Li°EÀmít
* 
À
 = 
°©e
.
≥ndög_wrôes
.
fú°
;

1941 
À
)

1943 i‡(
	`Sockë_noPídögWrôes
(((
≥ndög_wrôe
*)(
À
->
c⁄ã¡
))->
sockë
))

1945 
	`MQTTPrŸocﬁ_ªmovePubliˇti⁄
(((
≥ndög_wrôe
*)(
À
->
c⁄ã¡
))->
p
);

1946 
°©e
.
≥ndög_wrôes
.
cuºít
 = 
À
;

1947 
	`Li°Remove
(&(
°©e
.
≥ndög_wrôes
), 
À
->
c⁄ã¡
);

1948 
À
 = 
°©e
.
≥ndög_wrôes
.
cuºít
;

1951 
	`Li°NextEÀmít
(&(
°©e
.
≥ndög_wrôes
), &
À
);

1954 
FUNC_EXIT
;

1955 
	}
}

1958 
	$MQTTClõ¡_wrôeCom∂ëe
(
sockë
)

1960 
Li°EÀmít
* 
found
 = 
NULL
;

1962 
FUNC_ENTRY
;

1965 
	`MQTTPrŸocﬁ_checkPídögWrôes
();

1968 i‡((
found
 = 
	`Li°FödIãm
(
h™dÀs
, &
sockë
, 
˛õ¡SockCom∑ª
)Ë!
NULL
)

1970 
MQTTClõ¡s
* 
m
 = (MQTTClõ¡s*)(
found
->
c⁄ã¡
);

1972 
	`time
(&(
m
->
c
->
√t
.
œ°Sít
));

1974 
FUNC_EXIT
;

1975 
	}
}

	@paho-c/src/MQTTClient.h

100 #i‡
deföed
(
__˝lu•lus
)

103 #i‡!
deföed
(
MQTTCLIENT_H
)

104 
	#MQTTCLIENT_H


	)

106 #i‡
deföed
(
WIN32
Ë|| deföed(
WIN64
)

107 
	#DLLImp‹t
 
	`__de˛•ec
(
dŒimp‹t
)

	)

108 
	#DLLExp‹t
 
	`__de˛•ec
(
dŒexp‹t
)

	)

110 
	#DLLImp‹t
 

	)

111 
	#DLLExp‹t
 
	`__©åibuã__
 ((
	`visibûôy
 ("deÁu…")))

	)

114 
	~<°dio.h
>

117 #i‡!
deföed
(
NO_PERSISTENCE
)

118 
	~"MQTTClõ¡Pîsi°í˚.h
"

125 
	#MQTTCLIENT_SUCCESS
 0

	)

130 
	#MQTTCLIENT_FAILURE
 -1

	)

137 
	#MQTTCLIENT_DISCONNECTED
 -3

	)

142 
	#MQTTCLIENT_MAX_MESSAGES_INFLIGHT
 -4

	)

146 
	#MQTTCLIENT_BAD_UTF8_STRING
 -5

	)

150 
	#MQTTCLIENT_NULL_PARAMETER
 -6

	)

156 
	#MQTTCLIENT_TOPICNAME_TRUNCATED
 -7

	)

161 
	#MQTTCLIENT_BAD_STRUCTURE
 -8

	)

165 
	#MQTTCLIENT_BAD_QOS
 -9

	)

170 
	#MQTTVERSION_DEFAULT
 0

	)

174 
	#MQTTVERSION_3_1
 3

	)

178 
	#MQTTVERSION_3_1_1
 4

	)

182 
	#MQTT_BAD_SUBSCRIBE
 0x80

	)

188 * 
	tMQTTClõ¡
;

199 
	tMQTTClõ¡_dñivîyTokí
;

200 
	tMQTTClõ¡_tokí
;

211 
	m°ru˘_id
[4];

213 
	m°ru˘_vîsi⁄
;

215 
	m∑ylﬂdÀn
;

217 * 
	m∑ylﬂd
;

231 
	mqos
;

250 
	mªèöed
;

257 
	mdup
;

261 
	mmsgid
;

262 } 
	tMQTTClõ¡_mesßge
;

264 
	#MQTTClõ¡_mesßge_öôülizî
 { {'M', 'Q', 'T', 'M'}, 0, 0, 
NULL
, 0, 0, 0, 0 }

	)

292 
	tMQTTClõ¡_mesßgeAºived
(* 
	tc⁄ãxt
, * 
	tt›icName
, 
	tt›icLí
, 
	tMQTTClõ¡_mesßge
* 
	tmesßge
);

314 
	tMQTTClõ¡_dñivîyCom∂ëe
(* 
	tc⁄ãxt
, 
	tMQTTClõ¡_dñivîyTokí
 
	tdt
);

331 
	tMQTTClõ¡_c⁄√˘i⁄Lo°
(* 
	tc⁄ãxt
, * 
	tˇu£
);

360 
DLLExp‹t
 
MQTTClõ¡_£tCÆlbacks
(
MQTTClõ¡
 
h™dÀ
, * 
c⁄ãxt
, 
MQTTClõ¡_c⁄√˘i⁄Lo°
* 
˛
,

361 
MQTTClõ¡_mesßgeAºived
* 
ma
, 
MQTTClõ¡_dñivîyCom∂ëe
* 
dc
);

408 
DLLExp‹t
 
MQTTClõ¡_¸óã
(
MQTTClõ¡
* 
h™dÀ
, c⁄° * 
£rvîURI
, c⁄° * 
˛õ¡Id
,

409 
≥rsi°í˚_ty≥
, * 
≥rsi°í˚_c⁄ãxt
);

426 c⁄° 
	m°ru˘_id
[4];

428 
	m°ru˘_vîsi⁄
;

430 c⁄° * 
	mt›icName
;

432 c⁄° * 
	mmesßge
;

436 
	mªèöed
;

441 
	mqos
;

442 } 
	tMQTTClõ¡_wûlO±i⁄s
;

444 
	#MQTTClõ¡_wûlO±i⁄s_öôülizî
 { {'M', 'Q', 'T', 'W'}, 0, 
NULL
, NULL, 0, 0 }

	)

461 c⁄° 
	m°ru˘_id
[4];

463 
	m°ru˘_vîsi⁄
;

466 c⁄° * 
	måu°St‹e
;

471 c⁄° * 
	mkeySt‹e
;

476 c⁄° * 
	m¥iv©eKey
;

478 c⁄° * 
	m¥iv©eKeyPassw‹d
;

488 c⁄° * 
	míabÀdCùhîSuôes
;

491 
	míabÀSîvîCîtAuth
;

493 } 
	tMQTTClõ¡_SSLO±i⁄s
;

495 
	#MQTTClõ¡_SSLO±i⁄s_öôülizî
 { {'M', 'Q', 'T', 'S'}, 0, 
NULL
, NULL, NULL, NULL, NULL, 1 }

	)

514 c⁄° 
	m°ru˘_id
[4];

521 
	m°ru˘_vîsi⁄
;

531 
	mkìpAliveI¡îvÆ
;

553 
	m˛ón£ssi⁄
;

563 
	mªlübÀ
;

569 
MQTTClõ¡_wûlO±i⁄s
* 
	mwûl
;

575 c⁄° * 
	mu£∫ame
;

581 c⁄° * 
	m∑ssw‹d
;

585 
	mc⁄√˘Timeout
;

589 
	mªåyI¡îvÆ
;

594 
MQTTClõ¡_SSLO±i⁄s
* 
	ms¶
;

598 
	m£rvîURIcou¡
;

609 * c⁄°* 
	m£rvîURIs
;

616 
	mMQTTVîsi⁄
;

622 c⁄° * 
	m£rvîURI
;

623 
	mMQTTVîsi⁄
;

624 
	m£ssi⁄Pª£¡
;

625 } 
	mªtu∫ed
;

626 } 
	tMQTTClõ¡_c⁄√˘O±i⁄s
;

628 
	#MQTTClõ¡_c⁄√˘O±i⁄s_öôülizî
 { {'M', 'Q', 'T', 'C'}, 4, 60, 1, 1, 
NULL
, NULL, NULL, 30, 20, NULL, 0, NULL, 0}

	)

639 c⁄° * 
	m«me
;

640 c⁄° * 
	mvÆue
;

641 } 
	tMQTTClõ¡_«meVÆue
;

648 
DLLExp‹t
 
MQTTClõ¡_«meVÆue
* 
MQTTClõ¡_gëVîsi⁄Info
();

670 
DLLExp‹t
 
MQTTClõ¡_c⁄√˘
(
MQTTClõ¡
 
h™dÀ
, 
MQTTClõ¡_c⁄√˘O±i⁄s
* 
›ti⁄s
);

690 
DLLExp‹t
 
MQTTClõ¡_disc⁄√˘
(
MQTTClõ¡
 
h™dÀ
, 
timeout
);

699 
DLLExp‹t
 
MQTTClõ¡_isC⁄√˘ed
(
MQTTClõ¡
 
h™dÀ
);

718 
DLLExp‹t
 
MQTTClõ¡_subs¸ibe
(
MQTTClõ¡
 
h™dÀ
, c⁄° * 
t›ic
, 
qos
);

736 
DLLExp‹t
 
MQTTClõ¡_subs¸ibeM™y
(
MQTTClõ¡
 
h™dÀ
, 
cou¡
, * c⁄°* 
t›ic
, * 
qos
);

749 
DLLExp‹t
 
MQTTClõ¡_unsubs¸ibe
(
MQTTClõ¡
 
h™dÀ
, c⁄° * 
t›ic
);

762 
DLLExp‹t
 
MQTTClõ¡_unsubs¸ibeM™y
(
MQTTClõ¡
 
h™dÀ
, 
cou¡
, * c⁄°* 
t›ic
);

785 
DLLExp‹t
 
MQTTClõ¡_publish
(
MQTTClõ¡
 
h™dÀ
, c⁄° * 
t›icName
, 
∑ylﬂdÀn
, * 
∑ylﬂd
, 
qos
, 
ªèöed
,

786 
MQTTClõ¡_dñivîyTokí
* 
dt
);

806 
DLLExp‹t
 
MQTTClõ¡_publishMesßge
(
MQTTClõ¡
 
h™dÀ
, c⁄° * 
t›icName
, 
MQTTClõ¡_mesßge
* 
msg
, 
MQTTClõ¡_dñivîyTokí
* 
dt
);

824 
DLLExp‹t
 
MQTTClõ¡_waôF‹Com∂ëi⁄
(
MQTTClõ¡
 
h™dÀ
, 
MQTTClõ¡_dñivîyTokí
 
dt
, 
timeout
);

845 
DLLExp‹t
 
MQTTClõ¡_gëPídögDñivîyTokís
(
MQTTClõ¡
 
h™dÀ
, 
MQTTClõ¡_dñivîyTokí
 **
tokís
);

853 
DLLExp‹t
 
MQTTClõ¡_yõld
();

886 
DLLExp‹t
 
MQTTClõ¡_ª˚ive
(
MQTTClõ¡
 
h™dÀ
, ** 
t›icName
, * 
t›icLí
, 
MQTTClõ¡_mesßge
** 
mesßge
,

887 
timeout
);

899 
DLLExp‹t
 
MQTTClõ¡_‰ìMesßge
(
MQTTClõ¡_mesßge
** 
msg
);

909 
DLLExp‹t
 
MQTTClõ¡_‰ì
(* 
±r
);

918 
DLLExp‹t
 
MQTTClõ¡_de°roy
(
MQTTClõ¡
* 
h™dÀ
);

921 #ifde‡
__˝lu•lus


	@paho-c/src/MQTTClientPersistence.h

57 #i‡!
deföed
(
MQTTCLIENTPERSISTENCE_H
)

58 
	#MQTTCLIENTPERSISTENCE_H


	)

65 
	#MQTTCLIENT_PERSISTENCE_DEFAULT
 0

	)

70 
	#MQTTCLIENT_PERSISTENCE_NONE
 1

	)

75 
	#MQTTCLIENT_PERSISTENCE_USER
 2

	)

81 
	#MQTTCLIENT_PERSISTENCE_ERROR
 -2

	)

109 (*
	tPîsi°í˚_›í
)(** 
	th™dÀ
, c⁄° * 
	t˛õ¡ID
, c⁄° * 
	t£rvîURI
, * 
	tc⁄ãxt
);

119 (*
	tPîsi°í˚_˛o£
)(* 
	th™dÀ
);

136 (*
	tPîsi°í˚_put
)(* 
	th™dÀ
, * 
	tkey
, 
	tbufcou¡
, * 
	tbuf„rs
[], 
	tbuÊís
[]);

152 (*
	tPîsi°í˚_gë
)(* 
	th™dÀ
, * 
	tkey
, ** 
	tbuf„r
, * 
	tbuÊí
);

165 (*
	tPîsi°í˚_ªmove
)(* 
	th™dÀ
, * 
	tkey
);

182 (*
	tPîsi°í˚_keys
)(* 
	th™dÀ
, *** 
	tkeys
, * 
	tnkeys
);

193 (*
	tPîsi°í˚_˛ór
)(* 
	th™dÀ
);

204 (*
	tPîsi°í˚_c⁄èöskey
)(* 
	th™dÀ
, * 
	tkey
);

215 * 
c⁄ãxt
;

219 
Pîsi°í˚_›í
 
p›í
;

223 
Pîsi°í˚_˛o£
 
p˛o£
;

227 
Pîsi°í˚_put
 
µut
;

231 
Pîsi°í˚_gë
 
pgë
;

235 
Pîsi°í˚_ªmove
 
¥emove
;

239 
Pîsi°í˚_keys
 
pkeys
;

243 
Pîsi°í˚_˛ór
 
p˛ór
;

247 
Pîsi°í˚_c⁄èöskey
 
pc⁄èöskey
;

248 } 
	tMQTTClõ¡_≥rsi°í˚
;

	@paho-c/src/MQTTPacket.c

26 
	~"MQTTPackë.h
"

27 
	~"Log.h
"

28 #i‡!
deföed
(
NO_PERSISTENCE
)

29 
	~"MQTTPîsi°í˚.h
"

31 
	~"Mesßges.h
"

32 
	~"SèckTø˚.h
"

34 
	~<°dlib.h
>

35 
	~<°rög.h
>

37 
	~"Hóp.h
"

39 #i‡!
deföed
(
mö
)

40 
	#mö
(
A
,
B
Ë–(AË< (BË? (A):(B))

	)

46 * 
	g∑ckë_«mes
[] =

53 ** 
	gMQTTClõ¡_∑ckë_«mes
 = 
∑ckë_«mes
;

61 * 
	$MQTTPackë_«me
(
±y≥
)

63  (
±y≥
 >0 &&Öty≥ <
DISCONNECT
Ë? 
∑ckë_«mes
[ptype] : "UNKNOWN";

64 
	}
}

69 
pf
 
	g√w_∑ckës
[] =

71 
NULL
,

72 
NULL
,

73 
MQTTPackë_c⁄«ck
,

74 
MQTTPackë_publish
,

75 
MQTTPackë_ack
,

76 
MQTTPackë_ack
,

77 
MQTTPackë_ack
,

78 
MQTTPackë_ack
,

79 
NULL
,

80 
MQTTPackë_suback
,

81 
NULL
,

82 
MQTTPackë_ack
,

83 
MQTTPackë_hódî_⁄ly
,

84 
MQTTPackë_hódî_⁄ly
,

85 
MQTTPackë_hódî_⁄ly


95 * 
	$MQTTPackë_Fa˘‹y
(
√tw‹kH™dÀs
* 
√t
, * 
îr‹
)

97 * 
d©a
 = 
NULL
;

98 
Hódî
 
hódî
;

99 
ªmaöög_Àngth
, 
±y≥
;

100 
size_t
 
ªmaöög_Àngth_√w
;

101 * 
∑ck
 = 
NULL
;

102 
a˘uÆ_Àn
 = 0;

104 
FUNC_ENTRY
;

105 *
îr‹
 = 
SOCKET_ERROR
;

108 #i‡
	`deföed
(
OPENSSL
)

109 *
îr‹
 = (
√t
->
s¶
Ë? 
	`SSLSockë_gëch
“ë->s¶,Çë->
sockë
, &
hódî
.
byã
Ë: 
	`Sockë_gëch
(net->socket, &header.byte);

111 *
îr‹
 = 
	`Sockë_gëch
(
√t
->
sockë
, &
hódî
.
byã
);

113 i‡(*
îr‹
 !
TCPSOCKET_COMPLETE
)

114 
exô
;

117 i‡((*
îr‹
 = 
	`MQTTPackë_decode
(
√t
, &
ªmaöög_Àngth
)Ë!
TCPSOCKET_COMPLETE
)

118 
exô
;

121 #i‡
	`deföed
(
OPENSSL
)

122 
d©a
 = (
√t
->
s¶
Ë? 
	`SSLSockë_gëd©a
“ë->s¶,Çë->
sockë
, 
ªmaöög_Àngth
, &
a˘uÆ_Àn
) :

123 
	`Sockë_gëd©a
(
√t
->
sockë
, 
ªmaöög_Àngth
, &
a˘uÆ_Àn
);

125 
d©a
 = 
	`Sockë_gëd©a
(
√t
->
sockë
, 
ªmaöög_Àngth
, &
a˘uÆ_Àn
);

127 i‡(
d©a
 =
NULL
)

129 *
îr‹
 = 
SOCKET_ERROR
;

130 
exô
;

133 i‡(
a˘uÆ_Àn
 !
ªmaöög_Àngth
)

134 *
îr‹
 = 
TCPSOCKET_INTERRUPTED
;

137 
±y≥
 = 
hódî
.
bôs
.
ty≥
;

138 i‡(
±y≥
 < 
CONNECT
 ||Öty≥ > 
DISCONNECT
 || 
√w_∑ckës
[±y≥] =
NULL
)

139 
	`Log
(
TRACE_MIN
, 2, 
NULL
, 
±y≥
);

142 i‡((
∑ck
 = (*
√w_∑ckës
[
±y≥
])(
hódî
.
byã
, 
d©a
, 
ªmaöög_Àngth
)Ë=
NULL
)

143 *
îr‹
 = 
BAD_MQTT_PACKET
;

144 #i‡!
	`deföed
(
NO_PERSISTENCE
)

145 i‡(
hódî
.
bôs
.
ty≥
 =
PUBLISH
 && hódî.bôs.
qos
 == 2)

147 
buf0Àn
;

148 *
buf
 = 
	`mÆloc
(10);

149 
buf
[0] = 
hódî
.
byã
;

150 
buf0Àn
 = 1 + 
	`MQTTPackë_ícode
(&
buf
[1], 
ªmaöög_Àngth
);

151 
ªmaöög_Àngth_√w
 = 
ªmaöög_Àngth
;

152 *
îr‹
 = 
	`MQTTPîsi°í˚_put
(
√t
->
sockë
, 
buf
, 
buf0Àn
, 1,

153 &
d©a
, &
ªmaöög_Àngth_√w
, 
hódî
.
bôs
.
ty≥
, ((
Publish
 *)
∑ck
)->
msgId
, 1);

154 
	`‰ì
(
buf
);

159 i‡(
∑ck
)

160 
	`time
(&(
√t
->
œ°Re˚ived
));

161 
exô
:

162 
	`FUNC_EXIT_RC
(*
îr‹
);

163  
∑ck
;

164 
	}
}

175 
	$MQTTPackë_£nd
(
√tw‹kH™dÀs
* 
√t
, 
Hódî
 
hódî
, * 
buf„r
, 
size_t
 
buÊí
, 
‰ì
)

177 
rc
, 
buf0Àn
;

178 *
buf
;

180 
FUNC_ENTRY
;

181 
buf
 = 
	`mÆloc
(10);

182 
buf
[0] = 
hódî
.
byã
;

183 
buf0Àn
 = 1 + 
	`MQTTPackë_ícode
(&
buf
[1], 
buÊí
);

184 #i‡!
	`deföed
(
NO_PERSISTENCE
)

185 i‡(
hódî
.
bôs
.
ty≥
 =
PUBREL
)

187 * 
±øux
 = 
buf„r
;

188 
msgId
 = 
	`ªadI¡
(&
±øux
);

189 
rc
 = 
	`MQTTPîsi°í˚_put
(
√t
->
sockë
, 
buf
, 
buf0Àn
, 1, &
buf„r
, &
buÊí
,

190 
hódî
.
bôs
.
ty≥
, 
msgId
, 0);

194 #i‡
	`deföed
(
OPENSSL
)

195 i‡(
√t
->
s¶
)

196 
rc
 = 
	`SSLSockë_putd©as
(
√t
->
s¶
,Çë->
sockë
, 
buf
, 
buf0Àn
, 1, &
buf„r
, &
buÊí
, &
‰ì
);

199 
rc
 = 
	`Sockë_putd©as
(
√t
->
sockë
, 
buf
, 
buf0Àn
, 1, &
buf„r
, &
buÊí
, &
‰ì
);

201 i‡(
rc
 =
TCPSOCKET_COMPLETE
)

202 
	`time
(&(
√t
->
œ°Sít
));

204 i‡(
rc
 !
TCPSOCKET_INTERRUPTED
)

205 
	`‰ì
(
buf
);

207 
	`FUNC_EXIT_RC
(
rc
);

208  
rc
;

209 
	}
}

221 
	$MQTTPackë_£nds
(
√tw‹kH™dÀs
* 
√t
, 
Hódî
 
hódî
, 
cou¡
, ** 
buf„rs
, 
size_t
* 
buÊís
, * 
‰ìs
)

223 
i
, 
rc
, 
buf0Àn
, 
tŸÆ
 = 0;

224 *
buf
;

226 
FUNC_ENTRY
;

227 
buf
 = 
	`mÆloc
(10);

228 
buf
[0] = 
hódî
.
byã
;

229 
i
 = 0; i < 
cou¡
; i++)

230 
tŸÆ
 +
buÊís
[
i
];

231 
buf0Àn
 = 1 + 
	`MQTTPackë_ícode
(&
buf
[1], 
tŸÆ
);

232 #i‡!
	`deföed
(
NO_PERSISTENCE
)

233 i‡(
hódî
.
bôs
.
ty≥
 =
PUBLISH
 && hódî.bôs.
qos
 != 0)

235 *
±øux
 = 
buf„rs
[2];

236 
msgId
 = 
	`ªadI¡
(&
±øux
);

237 
rc
 = 
	`MQTTPîsi°í˚_put
(
√t
->
sockë
, 
buf
, 
buf0Àn
, 
cou¡
, 
buf„rs
, 
buÊís
,

238 
hódî
.
bôs
.
ty≥
, 
msgId
, 0);

241 #i‡
	`deföed
(
OPENSSL
)

242 i‡(
√t
->
s¶
)

243 
rc
 = 
	`SSLSockë_putd©as
(
√t
->
s¶
,Çë->
sockë
, 
buf
, 
buf0Àn
, 
cou¡
, 
buf„rs
, 
buÊís
, 
‰ìs
);

246 
rc
 = 
	`Sockë_putd©as
(
√t
->
sockë
, 
buf
, 
buf0Àn
, 
cou¡
, 
buf„rs
, 
buÊís
, 
‰ìs
);

248 i‡(
rc
 =
TCPSOCKET_COMPLETE
)

249 
	`time
(&(
√t
->
œ°Sít
));

251 i‡(
rc
 !
TCPSOCKET_INTERRUPTED
)

252 
	`‰ì
(
buf
);

253 
	`FUNC_EXIT_RC
(
rc
);

254  
rc
;

255 
	}
}

264 
	$MQTTPackë_ícode
(* 
buf
, 
Àngth
)

266 
rc
 = 0;

268 
FUNC_ENTRY
;

271 
d
 = 
Àngth
 % 128;

272 
Àngth
 /= 128;

274 i‡(
Àngth
 > 0)

275 
d
 |= 0x80;

276 
buf
[
rc
++] = 
d
;

277 } 
Àngth
 > 0);

278 
	`FUNC_EXIT_RC
(
rc
);

279  
rc
;

280 
	}
}

289 
	$MQTTPackë_decode
(
√tw‹kH™dÀs
* 
√t
, * 
vÆue
)

291 
rc
 = 
SOCKET_ERROR
;

292 
c
;

293 
mu…ùlõr
 = 1;

294 
Àn
 = 0;

295 
	#MAX_NO_OF_REMAINING_LENGTH_BYTES
 4

	)

297 
FUNC_ENTRY
;

298 *
vÆue
 = 0;

301 i‡(++
Àn
 > 
MAX_NO_OF_REMAINING_LENGTH_BYTES
)

303 
rc
 = 
SOCKET_ERROR
;

304 
exô
;

306 #i‡
	`deföed
(
OPENSSL
)

307 
rc
 = (
√t
->
s¶
Ë? 
	`SSLSockë_gëch
“ë->s¶,Çë->
sockë
, &
c
Ë: 
	`Sockë_gëch
(net->socket, &c);

309 
rc
 = 
	`Sockë_gëch
(
√t
->
sockë
, &
c
);

311 i‡(
rc
 !
TCPSOCKET_COMPLETE
)

312 
exô
;

313 *
vÆue
 +(
c
 & 127Ë* 
mu…ùlõr
;

314 
mu…ùlõr
 *= 128;

315 } (
c
 & 128) != 0);

316 
exô
:

317 
	`FUNC_EXIT_RC
(
rc
);

318  
rc
;

319 
	}
}

327 
	$ªadI¡
(** 
µå
)

329 * 
±r
 = *
µå
;

330 
Àn
 = 256*(()(*
±r
)) + ()(*(ptr+1));

331 *
µå
 += 2;

332  
Àn
;

333 
	}
}

348 * 
	$ªadUTFÀn
(** 
µå
, * 
ídd©a
, * 
Àn
)

350 * 
°rög
 = 
NULL
;

352 
FUNC_ENTRY
;

353 i‡(
ídd©a
 - (*
µå
) > 1)

355 *
Àn
 = 
	`ªadI¡
(
µå
);

356 i‡(&(*
µå
)[*
Àn
] <
ídd©a
)

358 
°rög
 = 
	`mÆloc
(*
Àn
+1);

359 
	`mem˝y
(
°rög
, *
µå
, *
Àn
);

360 
°rög
[*
Àn
] = '\0';

361 *
µå
 +*
Àn
;

364 
FUNC_EXIT
;

365  
°rög
;

366 
	}
}

379 * 
	$ªadUTF
(** 
µå
, * 
ídd©a
)

381 
Àn
;

382  
	`ªadUTFÀn
(
µå
, 
ídd©a
, &
Àn
);

383 
	}
}

391 
	$ªadCh¨
(** 
µå
)

393 
c
 = **
µå
;

394 (*
µå
)++;

395  
c
;

396 
	}
}

404 
	$wrôeCh¨
(** 
µå
, 
c
)

406 **
µå
 = 
c
;

407 (*
µå
)++;

408 
	}
}

416 
	$wrôeI¡
(** 
µå
, 
™I¡
)

418 **
µå
 = ()(
™I¡
 / 256);

419 (*
µå
)++;

420 **
µå
 = ()(
™I¡
 % 256);

421 (*
µå
)++;

422 
	}
}

430 
	$wrôeUTF
(** 
µå
, c⁄° * 
°rög
)

432 
Àn
 = 
	`°æí
(
°rög
);

433 
	`wrôeI¡
(
µå
, 
Àn
);

434 
	`mem˝y
(*
µå
, 
°rög
, 
Àn
);

435 *
µå
 +
Àn
;

436 
	}
}

446 * 
	$MQTTPackë_hódî_⁄ly
(
aHódî
, * 
d©a
, 
size_t
 
d©Æí
)

448 
hódî
 = 0;

449 
hódî
 = 
aHódî
;

450  &
hódî
;

451 
	}
}

459 
	$MQTTPackë_£nd_disc⁄√˘
(
√tw‹kH™dÀs
 *
√t
, c⁄° * 
˛õ¡ID
)

461 
Hódî
 
hódî
;

462 
rc
 = 0;

464 
FUNC_ENTRY
;

465 
hódî
.
byã
 = 0;

466 
hódî
.
bôs
.
ty≥
 = 
DISCONNECT
;

467 
rc
 = 
	`MQTTPackë_£nd
(
√t
, 
hódî
, 
NULL
, 0, 0);

468 
	`Log
(
LOG_PROTOCOL
, 28, 
NULL
, 
√t
->
sockë
, 
˛õ¡ID
, 
rc
);

469 
	`FUNC_EXIT_RC
(
rc
);

470  
rc
;

471 
	}
}

481 * 
	$MQTTPackë_publish
(
aHódî
, * 
d©a
, 
size_t
 
d©Æí
)

483 
Publish
* 
∑ck
 = 
	`mÆloc
((Publish));

484 * 
curd©a
 = 
d©a
;

485 * 
ídd©a
 = &
d©a
[
d©Æí
];

487 
FUNC_ENTRY
;

488 
∑ck
->
hódî
.
byã
 = 
aHódî
;

489 i‡((
∑ck
->
t›ic
 = 
	`ªadUTFÀn
(&
curd©a
, 
ídd©a
, &∑ck->
t›i˛í
)Ë=
NULL
)

491 
	`‰ì
(
∑ck
);

492 
∑ck
 = 
NULL
;

493 
exô
;

495 i‡(
∑ck
->
hódî
.
bôs
.
qos
 > 0)

496 
∑ck
->
msgId
 = 
	`ªadI¡
(&
curd©a
);

498 
∑ck
->
msgId
 = 0;

499 
∑ck
->
∑ylﬂd
 = 
curd©a
;

500 
∑ck
->
∑ylﬂdÀn
 = 
d©Æí
-(
curd©a
-
d©a
);

501 
exô
:

502 
FUNC_EXIT
;

503  
∑ck
;

504 
	}
}

511 
	$MQTTPackë_‰ìPublish
(
Publish
* 
∑ck
)

513 
FUNC_ENTRY
;

514 i‡(
∑ck
->
t›ic
 !
NULL
)

515 
	`‰ì
(
∑ck
->
t›ic
);

516 
	`‰ì
(
∑ck
);

517 
FUNC_EXIT
;

518 
	}
}

529 
	$MQTTPackë_£nd_ack
(
ty≥
, 
msgid
, 
dup
, 
√tw‹kH™dÀs
 *
√t
)

531 
Hódî
 
hódî
;

532 
rc
;

533 *
buf
 = 
	`mÆloc
(2);

534 *
±r
 = 
buf
;

536 
FUNC_ENTRY
;

537 
hódî
.
byã
 = 0;

538 
hódî
.
bôs
.
ty≥
 =Åype;

539 
hódî
.
bôs
.
dup
 = dup;

540 i‡(
ty≥
 =
PUBREL
)

541 
hódî
.
bôs
.
qos
 = 1;

542 
	`wrôeI¡
(&
±r
, 
msgid
);

543 i‡((
rc
 = 
	`MQTTPackë_£nd
(
√t
, 
hódî
, 
buf
, 2, 1)Ë!
TCPSOCKET_INTERRUPTED
)

544 
	`‰ì
(
buf
);

545 
	`FUNC_EXIT_RC
(
rc
);

546  
rc
;

547 
	}
}

557 
	$MQTTPackë_£nd_puback
(
msgid
, 
√tw‹kH™dÀs
* 
√t
, c⁄° * 
˛õ¡ID
)

559 
rc
 = 0;

561 
FUNC_ENTRY
;

562 
rc
 = 
	`MQTTPackë_£nd_ack
(
PUBACK
, 
msgid
, 0, 
√t
);

563 
	`Log
(
LOG_PROTOCOL
, 12, 
NULL
, 
√t
->
sockë
, 
˛õ¡ID
, 
msgid
, 
rc
);

564 
	`FUNC_EXIT_RC
(
rc
);

565  
rc
;

566 
	}
}

573 
	$MQTTPackë_‰ìSuback
(
Suback
* 
∑ck
)

575 
FUNC_ENTRY
;

576 i‡(
∑ck
->
qoss
 !
NULL
)

577 
	`Li°Fªe
(
∑ck
->
qoss
);

578 
	`‰ì
(
∑ck
);

579 
FUNC_EXIT
;

580 
	}
}

590 
	$MQTTPackë_£nd_pubªc
(
msgid
, 
√tw‹kH™dÀs
* 
√t
, c⁄° * 
˛õ¡ID
)

592 
rc
 = 0;

594 
FUNC_ENTRY
;

595 
rc
 = 
	`MQTTPackë_£nd_ack
(
PUBREC
, 
msgid
, 0, 
√t
);

596 
	`Log
(
LOG_PROTOCOL
, 13, 
NULL
, 
√t
->
sockë
, 
˛õ¡ID
, 
msgid
, 
rc
);

597 
	`FUNC_EXIT_RC
(
rc
);

598  
rc
;

599 
	}
}

610 
	$MQTTPackë_£nd_pubªl
(
msgid
, 
dup
, 
√tw‹kH™dÀs
* 
√t
, c⁄° * 
˛õ¡ID
)

612 
rc
 = 0;

614 
FUNC_ENTRY
;

615 
rc
 = 
	`MQTTPackë_£nd_ack
(
PUBREL
, 
msgid
, 
dup
, 
√t
);

616 
	`Log
(
LOG_PROTOCOL
, 16, 
NULL
, 
√t
->
sockë
, 
˛õ¡ID
, 
msgid
, 
rc
);

617 
	`FUNC_EXIT_RC
(
rc
);

618  
rc
;

619 
	}
}

629 
	$MQTTPackë_£nd_pubcomp
(
msgid
, 
√tw‹kH™dÀs
* 
√t
, c⁄° * 
˛õ¡ID
)

631 
rc
 = 0;

633 
FUNC_ENTRY
;

634 
rc
 = 
	`MQTTPackë_£nd_ack
(
PUBCOMP
, 
msgid
, 0, 
√t
);

635 
	`Log
(
LOG_PROTOCOL
, 18, 
NULL
, 
√t
->
sockë
, 
˛õ¡ID
, 
msgid
, 
rc
);

636 
	`FUNC_EXIT_RC
(
rc
);

637  
rc
;

638 
	}
}

648 * 
	$MQTTPackë_ack
(
aHódî
, * 
d©a
, 
size_t
 
d©Æí
)

650 
Ack
* 
∑ck
 = 
	`mÆloc
((Ack));

651 * 
curd©a
 = 
d©a
;

653 
FUNC_ENTRY
;

654 
∑ck
->
hódî
.
byã
 = 
aHódî
;

655 
∑ck
->
msgId
 = 
	`ªadI¡
(&
curd©a
);

656 
FUNC_EXIT
;

657  
∑ck
;

658 
	}
}

671 
	$MQTTPackë_£nd_publish
(
Publish
* 
∑ck
, 
dup
, 
qos
, 
ªèöed
, 
√tw‹kH™dÀs
* 
√t
, c⁄° * 
˛õ¡ID
)

673 
Hódî
 
hódî
;

674 *
t›i˛í
;

675 
rc
 = -1;

677 
FUNC_ENTRY
;

678 
t›i˛í
 = 
	`mÆloc
(2);

680 
hódî
.
bôs
.
ty≥
 = 
PUBLISH
;

681 
hódî
.
bôs
.
dup
 = dup;

682 
hódî
.
bôs
.
qos
 = qos;

683 
hódî
.
bôs
.
ªèö
 = 
ªèöed
;

684 i‡(
qos
 > 0)

686 *
buf
 = 
	`mÆloc
(2);

687 *
±r
 = 
buf
;

688 * 
bufs
[4] = {
t›i˛í
, 
∑ck
->
t›ic
, 
buf
,Öack->
∑ylﬂd
};

689 
size_t
 
Àns
[4] = {2, 
	`°æí
(
∑ck
->
t›ic
), 2,Öack->
∑ylﬂdÀn
};

690 
‰ìs
[4] = {1, 0, 1, 0};

692 
	`wrôeI¡
(&
±r
, 
∑ck
->
msgId
);

693 
±r
 = 
t›i˛í
;

694 
	`wrôeI¡
(&
±r
, 
Àns
[1]);

695 
rc
 = 
	`MQTTPackë_£nds
(
√t
, 
hódî
, 4, 
bufs
, 
Àns
, 
‰ìs
);

696 i‡(
rc
 !
TCPSOCKET_INTERRUPTED
)

697 
	`‰ì
(
buf
);

701 * 
±r
 = 
t›i˛í
;

702 * 
bufs
[3] = {
t›i˛í
, 
∑ck
->
t›ic
,Öack->
∑ylﬂd
};

703 
size_t
 
Àns
[3] = {2, 
	`°æí
(
∑ck
->
t›ic
),Öack->
∑ylﬂdÀn
};

704 
‰ìs
[3] = {1, 0, 0};

706 
	`wrôeI¡
(&
±r
, 
Àns
[1]);

707 
rc
 = 
	`MQTTPackë_£nds
(
√t
, 
hódî
, 3, 
bufs
, 
Àns
, 
‰ìs
);

709 i‡(
rc
 !
TCPSOCKET_INTERRUPTED
)

710 
	`‰ì
(
t›i˛í
);

711 i‡(
qos
 == 0)

712 
	`Log
(
LOG_PROTOCOL
, 27, 
NULL
, 
√t
->
sockë
, 
˛õ¡ID
, 
ªèöed
, 
rc
);

714 
	`Log
(
LOG_PROTOCOL
, 10, 
NULL
, 
√t
->
sockë
, 
˛õ¡ID
, 
∑ck
->
msgId
, 
qos
, 
ªèöed
, 
rc
,

715 
	`mö
(20, 
∑ck
->
∑ylﬂdÀn
),Öack->
∑ylﬂd
);

716 
	`FUNC_EXIT_RC
(
rc
);

717  
rc
;

718 
	}
}

725 
	$MQTTPackë_‰ì_∑ckë
(
MQTTPackë
* 
∑ck
)

727 
FUNC_ENTRY
;

728 i‡(
∑ck
->
hódî
.
bôs
.
ty≥
 =
PUBLISH
)

729 
	`MQTTPackë_‰ìPublish
((
Publish
*)
∑ck
);

735 
	`‰ì
(
∑ck
);

736 
FUNC_EXIT
;

737 
	}
}

	@paho-c/src/MQTTPacket.h

19 #i‡!
deföed
(
MQTTPACKET_H
)

20 
	#MQTTPACKET_H


	)

22 
	~"Sockë.h
"

23 #i‡
deföed
(
OPENSSL
)

24 
	~"SSLSockë.h
"

26 
	~"LökedLi°.h
"

27 
	~"Clõ¡s.h
"

35 
	tboﬁ
;

36 * (*
	tpf
)(, *, 
	tsize_t
);

38 
	#BAD_MQTT_PACKET
 -4

	)

40 
	emsgTy≥s


42 
	mCONNECT
 = 1, 
	mCONNACK
, 
	mPUBLISH
, 
	mPUBACK
, 
	mPUBREC
, 
	mPUBREL
,

43 
	mPUBCOMP
, 
	mSUBSCRIBE
, 
	mSUBACK
, 
	mUNSUBSCRIBE
, 
	mUNSUBACK
,

44 
	mPINGREQ
, 
	mPINGRESP
, 
	mDISCONNECT


53  
	mbyã
;

54 #i‡
deföed
(
REVERSED
)

57 
	mty≥
 : 4;

58 
boﬁ
 
	mdup
 : 1;

59 
	mqos
 : 2;

60 
boﬁ
 
	mªèö
 : 1;

61 } 
	mbôs
;

65 
boﬁ
 
	mªèö
 : 1;

66 
	mqos
 : 2;

67 
boﬁ
 
	mdup
 : 1;

68 
	mty≥
 : 4;

69 } 
	mbôs
;

71 } 
	tHódî
;

79 
Hódî
 
	mhódî
;

82 
	mÆl
;

83 #i‡
deföed
(
REVERSED
)

86 
boﬁ
 
	mu£∫ame
 : 1;

87 
boﬁ
 
	m∑ssw‹d
 : 1;

88 
boﬁ
 
	mwûlRëaö
 : 1;

89 
	mwûlQoS
 : 2;

90 
boﬁ
 
	mwûl
 : 1;

91 
boﬁ
 
	m˛ón°¨t
 : 1;

93 } 
	mbôs
;

98 
boﬁ
 
	m˛ón°¨t
 : 1;

99 
boﬁ
 
	mwûl
 : 1;

100 
	mwûlQoS
 : 2;

101 
boﬁ
 
	mwûlRëaö
 : 1;

102 
boﬁ
 
	m∑ssw‹d
 : 1;

103 
boﬁ
 
	mu£∫ame
 : 1;

104 } 
	mbôs
;

106 } 
	mÊags
;

108 *
	mPrŸocﬁ
,

109 *
	m˛õ¡ID
,

110 *
	mwûlT›ic
,

111 *
	mwûlMsg
;

113 
	mkìpAliveTimî
;

114 
	mvîsi⁄
;

115 } 
	tC⁄√˘
;

123 
Hódî
 
	mhódî
;

126 
	mÆl
;

127 #i‡
deföed
(
REVERSED
)

130 
	mª£rved
 : 7;

131 
boﬁ
 
	m£ssi⁄Pª£¡
 : 1;

132 } 
	mbôs
;

136 
boﬁ
 
	m£ssi⁄Pª£¡
 : 1;

137 
	mª£rved
 : 7;

138 } 
	mbôs
;

140 } 
	mÊags
;

141 
	mrc
;

142 } 
	tC⁄«ck
;

150 
Hódî
 
	mhódî
;

151 } 
	tMQTTPackë
;

159 
Hódî
 
	mhódî
;

160 
	mmsgId
;

161 
Li°
* 
	mt›ics
;

162 
Li°
* 
	mqoss
;

163 
	mnoT›ics
;

164 } 
	tSubs¸ibe
;

172 
Hódî
 
	mhódî
;

173 
	mmsgId
;

174 
Li°
* 
	mqoss
;

175 } 
	tSuback
;

183 
Hódî
 
	mhódî
;

184 
	mmsgId
;

185 
Li°
* 
	mt›ics
;

186 
	mnoT›ics
;

187 } 
	tUnsubs¸ibe
;

195 
Hódî
 
	mhódî
;

196 * 
	mt›ic
;

197 
	mt›i˛í
;

198 
	mmsgId
;

199 * 
	m∑ylﬂd
;

200 
	m∑ylﬂdÀn
;

201 } 
	tPublish
;

209 
Hódî
 
	mhódî
;

210 
	mmsgId
;

211 } 
	tAck
;

213 
Ack
 
	tPuback
;

214 
Ack
 
	tPubªc
;

215 
Ack
 
	tPubªl
;

216 
Ack
 
	tPubcomp
;

217 
Ack
 
	tUnsuback
;

219 
MQTTPackë_ícode
(* 
buf
, 
Àngth
);

220 
MQTTPackë_decode
(
√tw‹kH™dÀs
* 
√t
, * 
vÆue
);

221 
ªadI¡
(** 
µå
);

222 * 
ªadUTF
(** 
µå
, * 
ídd©a
);

223 
ªadCh¨
(** 
µå
);

224 
wrôeCh¨
(** 
µå
, 
c
);

225 
wrôeI¡
(** 
µå
, 
™I¡
);

226 
wrôeUTF
(** 
µå
, c⁄° * 
°rög
);

228 * 
MQTTPackë_«me
(
±y≥
);

230 * 
MQTTPackë_Fa˘‹y
(
√tw‹kH™dÀs
* 
√t
, * 
îr‹
);

231 
MQTTPackë_£nd
(
√tw‹kH™dÀs
* 
√t
, 
Hódî
 
hódî
, * 
buf„r
, 
size_t
 
buÊí
, 
‰ì
);

232 
MQTTPackë_£nds
(
√tw‹kH™dÀs
* 
√t
, 
Hódî
 
hódî
, 
cou¡
, ** 
buf„rs
, 
size_t
* 
buÊís
, * 
‰ìs
);

234 * 
MQTTPackë_hódî_⁄ly
(
aHódî
, * 
d©a
, 
size_t
 
d©Æí
);

235 
MQTTPackë_£nd_disc⁄√˘
(
√tw‹kH™dÀs
* 
√t
, c⁄° * 
˛õ¡ID
);

237 * 
MQTTPackë_publish
(
aHódî
, * 
d©a
, 
size_t
 
d©Æí
);

238 
MQTTPackë_‰ìPublish
(
Publish
* 
∑ck
);

239 
MQTTPackë_£nd_publish
(
Publish
* 
∑ck
, 
dup
, 
qos
, 
ªèöed
, 
√tw‹kH™dÀs
* 
√t
, c⁄° * 
˛õ¡ID
);

240 
MQTTPackë_£nd_puback
(
msgid
, 
√tw‹kH™dÀs
* 
√t
, c⁄° * 
˛õ¡ID
);

241 * 
MQTTPackë_ack
(
aHódî
, * 
d©a
, 
size_t
 
d©Æí
);

243 
MQTTPackë_‰ìSuback
(
Suback
* 
∑ck
);

244 
MQTTPackë_£nd_pubªc
(
msgid
, 
√tw‹kH™dÀs
* 
√t
, c⁄° * 
˛õ¡ID
);

245 
MQTTPackë_£nd_pubªl
(
msgid
, 
dup
, 
√tw‹kH™dÀs
* 
√t
, c⁄° * 
˛õ¡ID
);

246 
MQTTPackë_£nd_pubcomp
(
msgid
, 
√tw‹kH™dÀs
* 
√t
, c⁄° * 
˛õ¡ID
);

248 
MQTTPackë_‰ì_∑ckë
(
MQTTPackë
* 
∑ck
);

250 #i‡!
deföed
(
NO_BRIDGE
)

251 
	~"MQTTPackëOut.h
"

	@paho-c/src/MQTTPacketOut.c

28 
	~"MQTTPackëOut.h
"

29 
	~"Log.h
"

30 
	~"SèckTø˚.h
"

32 
	~<°rög.h
>

33 
	~<°dlib.h
>

35 
	~"Hóp.h
"

44 
	$MQTTPackë_£nd_c⁄√˘
(
Clõ¡s
* 
˛õ¡
, 
MQTTVîsi⁄
)

46 *
buf
, *
±r
;

47 
C⁄√˘
 
∑ckë
;

48 
rc
 = -1, 
Àn
;

50 
FUNC_ENTRY
;

51 
∑ckë
.
hódî
.
byã
 = 0;

52 
∑ckë
.
hódî
.
bôs
.
ty≥
 = 
CONNECT
;

54 
Àn
 = ((
MQTTVîsi⁄
 =3Ë? 12 : 10Ë+ 
	`°æí
(
˛õ¡
->
˛õ¡ID
)+2;

55 i‡(
˛õ¡
->
wûl
)

56 
Àn
 +
	`°æí
(
˛õ¡
->
wûl
->
t›ic
)+2 + såÀn(˛õ¡->wûl->
msg
)+2;

57 i‡(
˛õ¡
->
u£∫ame
)

58 
Àn
 +
	`°æí
(
˛õ¡
->
u£∫ame
)+2;

59 i‡(
˛õ¡
->
∑ssw‹d
)

60 
Àn
 +
	`°æí
(
˛õ¡
->
∑ssw‹d
)+2;

62 
±r
 = 
buf
 = 
	`mÆloc
(
Àn
);

63 i‡(
MQTTVîsi⁄
 == 3)

65 
	`wrôeUTF
(&
±r
, "MQIsdp");

66 
	`wrôeCh¨
(&
±r
, ()3);

68 i‡(
MQTTVîsi⁄
 == 4)

70 
	`wrôeUTF
(&
±r
, "MQTT");

71 
	`wrôeCh¨
(&
±r
, ()4);

74 
exô
;

76 
∑ckë
.
Êags
.
Æl
 = 0;

77 
∑ckë
.
Êags
.
bôs
.
˛ón°¨t
 = 
˛õ¡
->
˛ón£ssi⁄
;

78 
∑ckë
.
Êags
.
bôs
.
wûl
 = (
˛õ¡
->will) ? 1 : 0;

79 i‡(
∑ckë
.
Êags
.
bôs
.
wûl
)

81 
∑ckë
.
Êags
.
bôs
.
wûlQoS
 = 
˛õ¡
->
wûl
->
qos
;

82 
∑ckë
.
Êags
.
bôs
.
wûlRëaö
 = 
˛õ¡
->
wûl
->
ªèöed
;

85 i‡(
˛õ¡
->
u£∫ame
)

86 
∑ckë
.
Êags
.
bôs
.
u£∫ame
 = 1;

87 i‡(
˛õ¡
->
∑ssw‹d
)

88 
∑ckë
.
Êags
.
bôs
.
∑ssw‹d
 = 1;

90 
	`wrôeCh¨
(&
±r
, 
∑ckë
.
Êags
.
Æl
);

91 
	`wrôeI¡
(&
±r
, 
˛õ¡
->
kìpAliveI¡îvÆ
);

92 
	`wrôeUTF
(&
±r
, 
˛õ¡
->
˛õ¡ID
);

93 i‡(
˛õ¡
->
wûl
)

95 
	`wrôeUTF
(&
±r
, 
˛õ¡
->
wûl
->
t›ic
);

96 
	`wrôeUTF
(&
±r
, 
˛õ¡
->
wûl
->
msg
);

98 i‡(
˛õ¡
->
u£∫ame
)

99 
	`wrôeUTF
(&
±r
, 
˛õ¡
->
u£∫ame
);

100 i‡(
˛õ¡
->
∑ssw‹d
)

101 
	`wrôeUTF
(&
±r
, 
˛õ¡
->
∑ssw‹d
);

103 
rc
 = 
	`MQTTPackë_£nd
(&
˛õ¡
->
√t
, 
∑ckë
.
hódî
, 
buf
, 
Àn
, 1);

104 
	`Log
(
LOG_PROTOCOL
, 0, 
NULL
, 
˛õ¡
->
√t
.
sockë
, clõ¡->
˛õ¡ID
, clõ¡->
˛ón£ssi⁄
, 
rc
);

105 
exô
:

106 i‡(
rc
 !
TCPSOCKET_INTERRUPTED
)

107 
	`‰ì
(
buf
);

108 
	`FUNC_EXIT_RC
(
rc
);

109  
rc
;

110 
	}
}

120 * 
	$MQTTPackë_c⁄«ck
(
aHódî
, * 
d©a
, 
size_t
 
d©Æí
)

122 
C⁄«ck
* 
∑ck
 = 
	`mÆloc
((Connack));

123 * 
curd©a
 = 
d©a
;

125 
FUNC_ENTRY
;

126 
∑ck
->
hódî
.
byã
 = 
aHódî
;

127 
∑ck
->
Êags
.
Æl
 = 
	`ªadCh¨
(&
curd©a
);

128 
∑ck
->
rc
 = 
	`ªadCh¨
(&
curd©a
);

129 
FUNC_EXIT
;

130  
∑ck
;

131 
	}
}

140 
	$MQTTPackë_£nd_pögªq
(
√tw‹kH™dÀs
* 
√t
, c⁄° * 
˛õ¡ID
)

142 
Hódî
 
hódî
;

143 
rc
 = 0;

144 
size_t
 
buÊí
 = 0;

146 
FUNC_ENTRY
;

147 
hódî
.
byã
 = 0;

148 
hódî
.
bôs
.
ty≥
 = 
PINGREQ
;

149 
rc
 = 
	`MQTTPackë_£nd
(
√t
, 
hódî
, 
NULL
, 
buÊí
,0);

150 
	`Log
(
LOG_PROTOCOL
, 20, 
NULL
, 
√t
->
sockë
, 
˛õ¡ID
, 
rc
);

151 
	`FUNC_EXIT_RC
(
rc
);

152  
rc
;

153 
	}
}

166 
	$MQTTPackë_£nd_subs¸ibe
(
Li°
* 
t›ics
, Li°* 
qoss
, 
msgid
, 
dup
, 
√tw‹kH™dÀs
* 
√t
, c⁄° * 
˛õ¡ID
)

168 
Hódî
 
hódî
;

169 *
d©a
, *
±r
;

170 
rc
 = -1;

171 
Li°EÀmít
 *
ñem
 = 
NULL
, *
qosEÀm
 = NULL;

172 
d©Æí
;

174 
FUNC_ENTRY
;

175 
hódî
.
bôs
.
ty≥
 = 
SUBSCRIBE
;

176 
hódî
.
bôs
.
dup
 = dup;

177 
hódî
.
bôs
.
qos
 = 1;

178 
hódî
.
bôs
.
ªèö
 = 0;

180 
d©Æí
 = 2 + 
t›ics
->
cou¡
 * 3;

181 
	`Li°NextEÀmít
(
t›ics
, &
ñem
))

182 
d©Æí
 +
	`°æí
((*)(
ñem
->
c⁄ã¡
));

183 
±r
 = 
d©a
 = 
	`mÆloc
(
d©Æí
);

185 
	`wrôeI¡
(&
±r
, 
msgid
);

186 
ñem
 = 
NULL
;

187 
	`Li°NextEÀmít
(
t›ics
, &
ñem
))

189 
	`Li°NextEÀmít
(
qoss
, &
qosEÀm
);

190 
	`wrôeUTF
(&
±r
, (*)(
ñem
->
c⁄ã¡
));

191 
	`wrôeCh¨
(&
±r
, *(*)(
qosEÀm
->
c⁄ã¡
));

193 
rc
 = 
	`MQTTPackë_£nd
(
√t
, 
hódî
, 
d©a
, 
d©Æí
, 1);

194 
	`Log
(
LOG_PROTOCOL
, 22, 
NULL
, 
√t
->
sockë
, 
˛õ¡ID
, 
msgid
, 
rc
);

195 i‡(
rc
 !
TCPSOCKET_INTERRUPTED
)

196 
	`‰ì
(
d©a
);

197 
	`FUNC_EXIT_RC
(
rc
);

198  
rc
;

199 
	}
}

209 * 
	$MQTTPackë_suback
(
aHódî
, * 
d©a
, 
size_t
 
d©Æí
)

211 
Suback
* 
∑ck
 = 
	`mÆloc
((Suback));

212 * 
curd©a
 = 
d©a
;

214 
FUNC_ENTRY
;

215 
∑ck
->
hódî
.
byã
 = 
aHódî
;

216 
∑ck
->
msgId
 = 
	`ªadI¡
(&
curd©a
);

217 
∑ck
->
qoss
 = 
	`Li°Inôülize
();

218 (
size_t
)(
curd©a
 - 
d©a
Ë< 
d©Æí
)

220 * 
√wöt
;

221 
√wöt
 = 
	`mÆloc
(());

222 *
√wöt
 = ()
	`ªadCh¨
(&
curd©a
);

223 
	`Li°Aµíd
(
∑ck
->
qoss
, 
√wöt
, ());

225 
FUNC_EXIT
;

226  
∑ck
;

227 
	}
}

239 
	$MQTTPackë_£nd_unsubs¸ibe
(
Li°
* 
t›ics
, 
msgid
, 
dup
, 
√tw‹kH™dÀs
* 
√t
, c⁄° * 
˛õ¡ID
)

241 
Hódî
 
hódî
;

242 *
d©a
, *
±r
;

243 
rc
 = -1;

244 
Li°EÀmít
 *
ñem
 = 
NULL
;

245 
d©Æí
;

247 
FUNC_ENTRY
;

248 
hódî
.
bôs
.
ty≥
 = 
UNSUBSCRIBE
;

249 
hódî
.
bôs
.
dup
 = dup;

250 
hódî
.
bôs
.
qos
 = 1;

251 
hódî
.
bôs
.
ªèö
 = 0;

253 
d©Æí
 = 2 + 
t›ics
->
cou¡
 * 2;

254 
	`Li°NextEÀmít
(
t›ics
, &
ñem
))

255 
d©Æí
 +
	`°æí
((*)(
ñem
->
c⁄ã¡
));

256 
±r
 = 
d©a
 = 
	`mÆloc
(
d©Æí
);

258 
	`wrôeI¡
(&
±r
, 
msgid
);

259 
ñem
 = 
NULL
;

260 
	`Li°NextEÀmít
(
t›ics
, &
ñem
))

261 
	`wrôeUTF
(&
±r
, (*)(
ñem
->
c⁄ã¡
));

262 
rc
 = 
	`MQTTPackë_£nd
(
√t
, 
hódî
, 
d©a
, 
d©Æí
, 1);

263 
	`Log
(
LOG_PROTOCOL
, 25, 
NULL
, 
√t
->
sockë
, 
˛õ¡ID
, 
msgid
, 
rc
);

264 i‡(
rc
 !
TCPSOCKET_INTERRUPTED
)

265 
	`‰ì
(
d©a
);

266 
	`FUNC_EXIT_RC
(
rc
);

267  
rc
;

268 
	}
}

	@paho-c/src/MQTTPacketOut.h

19 #i‡!
deföed
(
MQTTPACKETOUT_H
)

20 
	#MQTTPACKETOUT_H


	)

22 
	~"MQTTPackë.h
"

24 
MQTTPackë_£nd_c⁄√˘
(
Clõ¡s
* 
˛õ¡
, 
MQTTVîsi⁄
);

25 * 
MQTTPackë_c⁄«ck
(
aHódî
, * 
d©a
, 
size_t
 
d©Æí
);

27 
MQTTPackë_£nd_pögªq
(
√tw‹kH™dÀs
* 
√t
, c⁄° * 
˛õ¡ID
);

29 
MQTTPackë_£nd_subs¸ibe
(
Li°
* 
t›ics
, Li°* 
qoss
, 
msgid
, 
dup
, 
√tw‹kH™dÀs
* 
√t
, c⁄° * 
˛õ¡ID
);

30 * 
MQTTPackë_suback
(
aHódî
, * 
d©a
, 
size_t
 
d©Æí
);

32 
MQTTPackë_£nd_unsubs¸ibe
(
Li°
* 
t›ics
, 
msgid
, 
dup
, 
√tw‹kH™dÀs
* 
√t
, c⁄° * 
˛õ¡ID
);

	@paho-c/src/MQTTPersistence.c

25 
	~<°dio.h
>

26 
	~<°rög.h
>

28 
	~"MQTTPîsi°í˚.h
"

29 
	~"MQTTPîsi°í˚DeÁu….h
"

30 
	~"MQTTPrŸocﬁClõ¡.h
"

31 
	~"Hóp.h
"

41 
	~"SèckTø˚.h
"

43 
	$MQTTPîsi°í˚_¸óã
(
MQTTClõ¡_≥rsi°í˚
** 
≥rsi°í˚
, 
ty≥
, * 
pc⁄ãxt
)

45 
rc
 = 0;

46 
MQTTClõ¡_≥rsi°í˚
* 
≥r
 = 
NULL
;

48 
FUNC_ENTRY
;

49 #i‡!
	`deföed
(
NO_PERSISTENCE
)

50 
ty≥
)

52 
MQTTCLIENT_PERSISTENCE_NONE
 :

53 
≥r
 = 
NULL
;

55 
MQTTCLIENT_PERSISTENCE_DEFAULT
 :

56 
≥r
 = 
	`mÆloc
((
MQTTClõ¡_≥rsi°í˚
));

57 i‡–
≥r
 !
NULL
 )

59 i‡–
pc⁄ãxt
 !
NULL
 )

61 
≥r
->
c⁄ãxt
 = 
	`mÆloc
(
	`°æí
(
pc⁄ãxt
) + 1);

62 
	`°r˝y
(
≥r
->
c⁄ãxt
, 
pc⁄ãxt
);

65 
≥r
->
c⁄ãxt
 = ".";

67 
≥r
->
p›í
 = 
p°›í
;

68 
≥r
->
p˛o£
 = 
p°˛o£
;

69 
≥r
->
µut
 = 
p°put
;

70 
≥r
->
pgë
 = 
p°gë
;

71 
≥r
->
¥emove
 = 
p°ªmove
;

72 
≥r
->
pkeys
 = 
p°keys
;

73 
≥r
->
p˛ór
 = 
p°˛ór
;

74 
≥r
->
pc⁄èöskey
 = 
p°c⁄èöskey
;

77 
rc
 = 
MQTTCLIENT_PERSISTENCE_ERROR
;

79 
MQTTCLIENT_PERSISTENCE_USER
 :

80 
≥r
 = (
MQTTClõ¡_≥rsi°í˚
 *)
pc⁄ãxt
;

81 i‡–
≥r
 =
NULL
 || (≥∏!NULL && (≥r->
c⁄ãxt
 =NULL ||Öî->
p˛ór
 == NULL ||

82 
≥r
->
p˛o£
 =
NULL
 ||Öî->
pc⁄èöskey
 =NULL ||Öî->
pgë
 =NULL ||Öî->
pkeys
 == NULL ||

83 
≥r
->
p›í
 =
NULL
 ||Öî->
µut
 =NULL ||Öî->
¥emove
 == NULL)) )

84 
rc
 = 
MQTTCLIENT_PERSISTENCE_ERROR
;

87 
rc
 = 
MQTTCLIENT_PERSISTENCE_ERROR
;

92 *
≥rsi°í˚
 = 
≥r
;

94 
	`FUNC_EXIT_RC
(
rc
);

95  
rc
;

96 
	}
}

105 
	$MQTTPîsi°í˚_öôülize
(
Clõ¡s
 *
c
, c⁄° *
£rvîURI
)

107 
rc
 = 0;

109 
FUNC_ENTRY
;

110 i‡–
c
->
≥rsi°í˚
 !
NULL
 )

112 
rc
 = 
c
->
≥rsi°í˚
->
	`p›í
(&(c->
ph™dÀ
), c->
˛õ¡ID
, 
£rvîURI
, c->≥rsi°í˚->
c⁄ãxt
);

113 i‡–
rc
 == 0 )

114 
rc
 = 
	`MQTTPîsi°í˚_ª°‹e
(
c
);

117 
	`FUNC_EXIT_RC
(
rc
);

118  
rc
;

119 
	}
}

127 
	$MQTTPîsi°í˚_˛o£
(
Clõ¡s
 *
c
)

129 
rc
 =0;

131 
FUNC_ENTRY
;

132 i‡(
c
->
≥rsi°í˚
 !
NULL
)

134 
rc
 = 
c
->
≥rsi°í˚
->
	`p˛o£
(c->
ph™dÀ
);

135 
c
->
ph™dÀ
 = 
NULL
;

136 #i‡!
	`deföed
(
NO_PERSISTENCE
)

137 i‡–
c
->
≥rsi°í˚
->
p›í
 =
p°›í
 )

138 
	`‰ì
(
c
->
≥rsi°í˚
);

140 
c
->
≥rsi°í˚
 = 
NULL
;

143 
	`FUNC_EXIT_RC
(
rc
);

144  
rc
;

145 
	}
}

152 
	$MQTTPîsi°í˚_˛ór
(
Clõ¡s
 *
c
)

154 
rc
 = 0;

156 
FUNC_ENTRY
;

157 i‡(
c
->
≥rsi°í˚
 !
NULL
)

158 
rc
 = 
c
->
≥rsi°í˚
->
	`p˛ór
(c->
ph™dÀ
);

160 
	`FUNC_EXIT_RC
(
rc
);

161  
rc
;

162 
	}
}

171 
	$MQTTPîsi°í˚_ª°‹e
(
Clõ¡s
 *
c
)

173 
rc
 = 0;

174 **
msgkeys
 = 
NULL
,

175 *
buf„r
 = 
NULL
;

176 
nkeys
, 
buÊí
;

177 
i
 = 0;

178 
msgs_£¡
 = 0;

179 
msgs_rcvd
 = 0;

181 
FUNC_ENTRY
;

182 i‡(
c
->
≥rsi°í˚
 && (
rc
 = c->≥rsi°í˚->
	`pkeys
(c->
ph™dÀ
, &
msgkeys
, &
nkeys
)) == 0)

184 
rc
 =0 && 
i
 < 
nkeys
)

186 i‡(
	`°∫cmp
(
msgkeys
[
i
], 
PERSISTENCE_COMMAND_KEY
, 
	`°æí
(PERSISTENCE_COMMAND_KEY)) == 0)

188 i‡(
	`°∫cmp
(
msgkeys
[
i
], 
PERSISTENCE_QUEUE_KEY
, 
	`°æí
(PERSISTENCE_QUEUE_KEY)) == 0)

190 i‡((
rc
 = 
c
->
≥rsi°í˚
->
	`pgë
(c->
ph™dÀ
, 
msgkeys
[
i
], &
buf„r
, &
buÊí
)) == 0)

192 
MQTTPackë
* 
∑ck
 = 
	`MQTTPîsi°í˚_ª°‹ePackë
(
buf„r
, 
buÊí
);

193 i‡–
∑ck
 !
NULL
 )

195 i‡–
	`°r°r
(
msgkeys
[
i
],
PERSISTENCE_PUBLISH_RECEIVED
Ë!
NULL
 )

197 
Publish
* 
publish
 = (Publish*)
∑ck
;

198 
Mesßges
* 
msg
 = 
NULL
;

199 
msg
 = 
	`MQTTPrŸocﬁ_¸óãMesßge
(
publish
, &msg,Öublish->
hódî
.
bôs
.
qos
,Öublish->hódî.bôs.
ªèö
);

200 
msg
->
√xtMesßgeTy≥
 = 
PUBREL
;

202 
	`Li°Aµíd
(
c
->
öboundMsgs
, 
msg
, msg->
Àn
);

203 
publish
->
t›ic
 = 
NULL
;

204 
	`MQTTPackë_‰ìPublish
(
publish
);

205 
msgs_rcvd
++;

207 i‡–
	`°r°r
(
msgkeys
[
i
],
PERSISTENCE_PUBLISH_SENT
Ë!
NULL
 )

209 
Publish
* 
publish
 = (Publish*)
∑ck
;

210 
Mesßges
* 
msg
 = 
NULL
;

211 *
key
 = 
	`mÆloc
(
MESSAGE_FILENAME_LENGTH
 + 1);

212 
	`•rötf
(
key
, "%s%d", 
PERSISTENCE_PUBREL
, 
publish
->
msgId
);

213 
msg
 = 
	`MQTTPrŸocﬁ_¸óãMesßge
(
publish
, &msg,Öublish->
hódî
.
bôs
.
qos
,Öublish->hódî.bôs.
ªèö
);

214 i‡–
c
->
≥rsi°í˚
->
	`pc⁄èöskey
(c->
ph™dÀ
, 
key
) == 0 )

216 
msg
->
√xtMesßgeTy≥
 = 
PUBCOMP
;

219 
msg
->
œ°Touch
 = 0;

220 
	`MQTTPîsi°í˚_ö£πInOrdî
(
c
->
outboundMsgs
, 
msg
, msg->
Àn
);

221 
publish
->
t›ic
 = 
NULL
;

222 
	`MQTTPackë_‰ìPublish
(
publish
);

223 
	`‰ì
(
key
);

224 
msgs_£¡
++;

226 i‡–
	`°r°r
(
msgkeys
[
i
],
PERSISTENCE_PUBREL
Ë!
NULL
 )

229 
Pubªl
* 
pubªl
 = (Pubªl*)
∑ck
;

230 *
key
 = 
	`mÆloc
(
MESSAGE_FILENAME_LENGTH
 + 1);

231 
	`•rötf
(
key
, "%s%d", 
PERSISTENCE_PUBLISH_SENT
, 
pubªl
->
msgId
);

232 i‡–
c
->
≥rsi°í˚
->
	`pc⁄èöskey
(c->
ph™dÀ
, 
key
) != 0 )

233 
rc
 = 
c
->
≥rsi°í˚
->
	`¥emove
(c->
ph™dÀ
, 
msgkeys
[
i
]);

234 
	`‰ì
(
pubªl
);

235 
	`‰ì
(
key
);

239 
rc
 = 
c
->
≥rsi°í˚
->
	`¥emove
(c->
ph™dÀ
, 
msgkeys
[
i
]);

241 i‡(
buf„r
)

243 
	`‰ì
(
buf„r
);

244 
buf„r
 = 
NULL
;

246 i‡(
msgkeys
[
i
])

247 
	`‰ì
(
msgkeys
[
i
]);

248 
i
++;

250 i‡(
msgkeys
)

251 
	`‰ì
(
msgkeys
);

253 
	`Log
(
TRACE_MINIMUM
, -1, "%d sent messagesánd %dÑeceived messagesÑestored for client %s\n",

254 
msgs_£¡
, 
msgs_rcvd
, 
c
->
˛õ¡ID
);

255 
	`MQTTPîsi°í˚_wøpMsgID
(
c
);

257 
	`FUNC_EXIT_RC
(
rc
);

258  
rc
;

259 
	}
}

267 * 
	$MQTTPîsi°í˚_ª°‹ePackë
(* 
buf„r
, 
size_t
 
buÊí
)

269 * 
∑ck
 = 
NULL
;

270 
Hódî
 
hódî
;

271 
fixed_hódî_Àngth
 = 1, 
±y≥
, 
ªmaöög_Àngth
 = 0;

272 
c
;

273 
mu…ùlõr
 = 1;

274 
pf
 
√w_∑ckës
[];

276 
FUNC_ENTRY
;

277 
hódî
.
byã
 = 
buf„r
[0];

281 
c
 = *(++
buf„r
);

282 
ªmaöög_Àngth
 +(
c
 & 127Ë* 
mu…ùlõr
;

283 
mu…ùlõr
 *= 128;

284 
fixed_hódî_Àngth
++;

285 } (
c
 & 128) != 0);

287 i‡–(
fixed_hódî_Àngth
 + 
ªmaöög_Àngth
Ë=
buÊí
 )

289 
±y≥
 = 
hódî
.
bôs
.
ty≥
;

290 i‡(
±y≥
 >
CONNECT
 &&Öty≥ <
DISCONNECT
 && 
√w_∑ckës
[±y≥] !
NULL
)

291 
∑ck
 = (*
√w_∑ckës
[
±y≥
])(
hódî
.
byã
, ++
buf„r
, 
ªmaöög_Àngth
);

294 
FUNC_EXIT
;

295  
∑ck
;

296 
	}
}

305 
	$MQTTPîsi°í˚_ö£πInOrdî
(
Li°
* 
li°
, * 
c⁄ã¡
, 
size_t
 
size
)

307 
Li°EÀmít
* 
ödex
 = 
NULL
;

308 
Li°EÀmít
* 
cuºít
 = 
NULL
;

310 
FUNC_ENTRY
;

311 
	`Li°NextEÀmít
(
li°
, &
cuºít
Ë!
NULL
 && 
ödex
 == NULL)

313 i‡–((
Mesßges
*)
c⁄ã¡
)->
msgid
 < ((Mesßges*)
cuºít
->content)->msgid )

314 
ödex
 = 
cuºít
;

317 
	`Li°In£π
(
li°
, 
c⁄ã¡
, 
size
, 
ödex
);

318 
FUNC_EXIT
;

319 
	}
}

336 
	$MQTTPîsi°í˚_put
(
sockë
, * 
buf0
, 
size_t
 
buf0Àn
, 
cou¡
,

337 ** 
buf„rs
, 
size_t
* 
buÊís
, 
hty≥
, 
msgId
, 
s¸
 )

339 
rc
 = 0;

340 
Clõ¡Sèãs
* 
b°©e
;

341 
nbufs
, 
i
;

342 * 
Àns
 = 
NULL
;

343 ** 
bufs
 = 
NULL
;

344 *
key
;

345 
Clõ¡s
* 
˛õ¡
 = 
NULL
;

347 
FUNC_ENTRY
;

348 
˛õ¡
 = (
Clõ¡s
*)(
	`Li°FödIãm
(
b°©e
->
˛õ¡s
, &
sockë
, 
˛õ¡SockëCom∑ª
)->
c⁄ã¡
);

349 i‡(
˛õ¡
->
≥rsi°í˚
 !
NULL
)

351 
key
 = 
	`mÆloc
(
MESSAGE_FILENAME_LENGTH
 + 1);

352 
nbufs
 = 1 + 
cou¡
;

353 
Àns
 = (*Ë
	`mÆloc
(
nbufs
 * ());

354 
bufs
 = (**)
	`mÆloc
(
nbufs
 * (*));

355 
Àns
[0] = 
buf0Àn
;

356 
bufs
[0] = 
buf0
;

357 
i
 = 0; i < 
cou¡
; i++)

359 
Àns
[
i
+1] = 
buÊís
[i];

360 
bufs
[
i
+1] = 
buf„rs
[i];

364 i‡–
s¸
 == 0 )

366 i‡(
hty≥
 =
PUBLISH
)

367 
	`•rötf
(
key
, "%s%d", 
PERSISTENCE_PUBLISH_SENT
, 
msgId
);

368 i‡(
hty≥
 =
PUBREL
)

369 
	`•rötf
(
key
, "%s%d", 
PERSISTENCE_PUBREL
, 
msgId
);

371 i‡–
s¸
 == 1 )

372 
	`•rötf
(
key
, "%s%d", 
PERSISTENCE_PUBLISH_RECEIVED
, 
msgId
);

374 
rc
 = 
˛õ¡
->
≥rsi°í˚
->
	`µut
(˛õ¡->
ph™dÀ
, 
key
, 
nbufs
, 
bufs
, 
Àns
);

376 
	`‰ì
(
key
);

377 
	`‰ì
(
Àns
);

378 
	`‰ì
(
bufs
);

381 
	`FUNC_EXIT_RC
(
rc
);

382  
rc
;

383 
	}
}

395 
	$MQTTPîsi°í˚_ªmove
(
Clõ¡s
* 
c
, *
ty≥
, 
qos
, 
msgId
)

397 
rc
 = 0;

399 
FUNC_ENTRY
;

400 i‡(
c
->
≥rsi°í˚
 !
NULL
)

402 *
key
 = 
	`mÆloc
(
MESSAGE_FILENAME_LENGTH
 + 1);

403 i‡–(
	`°rcmp
(
ty≥
,
PERSISTENCE_PUBLISH_SENT
Ë=0Ë&& 
qos
 == 2 )

405 
	`•rötf
(
key
, "%s%d", 
PERSISTENCE_PUBLISH_SENT
, 
msgId
) ;

406 
rc
 = 
c
->
≥rsi°í˚
->
	`¥emove
(c->
ph™dÀ
, 
key
);

407 
	`•rötf
(
key
, "%s%d", 
PERSISTENCE_PUBREL
, 
msgId
) ;

408 
rc
 = 
c
->
≥rsi°í˚
->
	`¥emove
(c->
ph™dÀ
, 
key
);

412 
	`•rötf
(
key
, "%s%d", 
ty≥
, 
msgId
) ;

413 
rc
 = 
c
->
≥rsi°í˚
->
	`¥emove
(c->
ph™dÀ
, 
key
);

415 
	`‰ì
(
key
);

418 
	`FUNC_EXIT_RC
(
rc
);

419  
rc
;

420 
	}
}

428 
	$MQTTPîsi°í˚_wøpMsgID
(
Clõ¡s
 *
˛õ¡
)

430 
Li°EÀmít
* 
wø≥l
 = 
NULL
;

431 
Li°EÀmít
* 
cuºít
 = 
NULL
;

433 
FUNC_ENTRY
;

434 i‡–
˛õ¡
->
outboundMsgs
->
cou¡
 > 0 )

436 
fú°MsgID
 = ((
Mesßges
*)
˛õ¡
->
outboundMsgs
->
fú°
->
c⁄ã¡
)->
msgid
;

437 
œ°MsgID
 = ((
Mesßges
*)
˛õ¡
->
outboundMsgs
->
œ°
->
c⁄ã¡
)->
msgid
;

438 
g≠
 = 
MAX_MSG_ID
 - 
œ°MsgID
 + 
fú°MsgID
;

439 
cuºít
 = 
	`Li°NextEÀmít
(
˛õ¡
->
outboundMsgs
, &current);

441 
	`Li°NextEÀmít
(
˛õ¡
->
outboundMsgs
, &
cuºít
Ë!
NULL
)

443 
curMsgID
 = ((
Mesßges
*)
cuºít
->
c⁄ã¡
)->
msgid
;

444 
curPªvMsgID
 = ((
Mesßges
*)
cuºít
->
¥ev
->
c⁄ã¡
)->
msgid
;

445 
curg≠
 = 
curMsgID
 - 
curPªvMsgID
;

446 i‡–
curg≠
 > 
g≠
 )

448 
g≠
 = 
curg≠
;

449 
wø≥l
 = 
cuºít
;

454 i‡–
wø≥l
 !
NULL
 )

457 
˛õ¡
->
outboundMsgs
->
fú°
->
¥ev
 = clõ¡->outboundMsgs->
œ°
;

458 
˛õ¡
->
outboundMsgs
->
œ°
->
√xt
 = clõ¡->outboundMsgs->
fú°
;

459 
˛õ¡
->
outboundMsgs
->
fú°
 = 
wø≥l
;

460 
˛õ¡
->
outboundMsgs
->
œ°
 = 
wø≥l
->
¥ev
;

461 
˛õ¡
->
outboundMsgs
->
fú°
->
¥ev
 = 
NULL
;

462 
˛õ¡
->
outboundMsgs
->
œ°
->
√xt
 = 
NULL
;

464 
FUNC_EXIT
;

465 
	}
}

468 #i‡!
deföed
(
NO_PERSISTENCE
)

469 
	$MQTTPîsi°í˚_u≈îsi°QueueE¡ry
(
Clõ¡s
* 
˛õ¡
, 
MQTTPîsi°í˚_qE¡ry
* 
qe
)

471 
rc
 = 0;

472 
key
[
PERSISTENCE_MAX_KEY_LENGTH
 + 1];

474 
FUNC_ENTRY
;

475 
	`•rötf
(
key
, "%s%d", 
PERSISTENCE_QUEUE_KEY
, 
qe
->
£qno
);

476 i‡((
rc
 = 
˛õ¡
->
≥rsi°í˚
->
	`¥emove
(˛õ¡->
ph™dÀ
, 
key
)) != 0)

477 
	`Log
(
LOG_ERROR
, 0, "Eº‹ %dÑemovög qE¡ry fromÖîsi°í˚", 
rc
);

478 
	`FUNC_EXIT_RC
(
rc
);

479  
rc
;

480 
	}
}

483 
	$MQTTPîsi°í˚_≥rsi°QueueE¡ry
(
Clõ¡s
* 
a˛õ¡
, 
MQTTPîsi°í˚_qE¡ry
* 
qe
)

485 
rc
 = 0;

486 
nbufs
 = 8;

487 
bufödex
 = 0;

488 
key
[
PERSISTENCE_MAX_KEY_LENGTH
 + 1];

489 * 
Àns
 = 
NULL
;

490 ** 
bufs
 = 
NULL
;

492 
FUNC_ENTRY
;

493 
Àns
 = (*)
	`mÆloc
(
nbufs
 * ());

494 
bufs
 = 
	`mÆloc
(
nbufs
 * (*));

496 
bufs
[
bufödex
] = &
qe
->
msg
->
∑ylﬂdÀn
;

497 
Àns
[
bufödex
++] = (
qe
->
msg
->
∑ylﬂdÀn
);

499 
bufs
[
bufödex
] = 
qe
->
msg
->
∑ylﬂd
;

500 
Àns
[
bufödex
++] = 
qe
->
msg
->
∑ylﬂdÀn
;

502 
bufs
[
bufödex
] = &
qe
->
msg
->
qos
;

503 
Àns
[
bufödex
++] = (
qe
->
msg
->
qos
);

505 
bufs
[
bufödex
] = &
qe
->
msg
->
ªèöed
;

506 
Àns
[
bufödex
++] = (
qe
->
msg
->
ªèöed
);

508 
bufs
[
bufödex
] = &
qe
->
msg
->
dup
;

509 
Àns
[
bufödex
++] = (
qe
->
msg
->
dup
);

511 
bufs
[
bufödex
] = &
qe
->
msg
->
msgid
;

512 
Àns
[
bufödex
++] = (
qe
->
msg
->
msgid
);

514 
bufs
[
bufödex
] = 
qe
->
t›icName
;

515 
Àns
[
bufödex
++] = 
	`°æí
(
qe
->
t›icName
) + 1;

517 
bufs
[
bufödex
] = &
qe
->
t›icLí
;

518 
Àns
[
bufödex
++] = (
qe
->
t›icLí
);

520 
	`•rötf
(
key
, "%s%d", 
PERSISTENCE_QUEUE_KEY
, ++
a˛õ¡
->
qíåy_£qno
);

521 
qe
->
£qno
 = 
a˛õ¡
->
qíåy_£qno
;

523 i‡((
rc
 = 
a˛õ¡
->
≥rsi°í˚
->
	`µut
◊˛õ¡->
ph™dÀ
, 
key
, 
nbufs
, (**)
bufs
, 
Àns
)) != 0)

524 
	`Log
(
LOG_ERROR
, 0, "Eº‹Öîsi°ög queuêíåy,Ñ¯%d", 
rc
);

526 
	`‰ì
(
Àns
);

527 
	`‰ì
(
bufs
);

529 
	`FUNC_EXIT_RC
(
rc
);

530  
rc
;

531 
	}
}

534 
MQTTPîsi°í˚_qE¡ry
* 
	$MQTTPîsi°í˚_ª°‹eQueueE¡ry
(* 
buf„r
, 
size_t
 
buÊí
)

536 
MQTTPîsi°í˚_qE¡ry
* 
qe
 = 
NULL
;

537 * 
±r
 = 
buf„r
;

538 
d©a_size
;

540 
FUNC_ENTRY
;

541 
qe
 = 
	`mÆloc
((
MQTTPîsi°í˚_qE¡ry
));

542 
	`mem£t
(
qe
, '\0', (
MQTTPîsi°í˚_qE¡ry
));

544 
qe
->
msg
 = 
	`mÆloc
((
MQTTPîsi°í˚_mesßge
));

545 
	`mem£t
(
qe
->
msg
, '\0', (
MQTTPîsi°í˚_mesßge
));

547 
qe
->
msg
->
∑ylﬂdÀn
 = *(*)
±r
;

548 
±r
 += ();

550 
d©a_size
 = 
qe
->
msg
->
∑ylﬂdÀn
;

551 
qe
->
msg
->
∑ylﬂd
 = 
	`mÆloc
(
d©a_size
);

552 
	`mem˝y
(
qe
->
msg
->
∑ylﬂd
, 
±r
, 
d©a_size
);

553 
±r
 +
d©a_size
;

555 
qe
->
msg
->
qos
 = *(*)
±r
;

556 
±r
 += ();

558 
qe
->
msg
->
ªèöed
 = *(*)
±r
;

559 
±r
 += ();

561 
qe
->
msg
->
dup
 = *(*)
±r
;

562 
±r
 += ();

564 
qe
->
msg
->
msgid
 = *(*)
±r
;

565 
±r
 += ();

567 
d©a_size
 = 
	`°æí
(
±r
) + 1;

568 
qe
->
t›icName
 = 
	`mÆloc
(
d©a_size
);

569 
	`°r˝y
(
qe
->
t›icName
, 
±r
);

570 
±r
 +
d©a_size
;

572 
qe
->
t›icLí
 = *(*)
±r
;

573 
±r
 += ();

575 
FUNC_EXIT
;

576  
qe
;

577 
	}
}

580 
	$MQTTPîsi°í˚_ö£πInSeqOrdî
(
Li°
* 
li°
, 
MQTTPîsi°í˚_qE¡ry
* 
qE¡ry
, 
size_t
 
size
)

582 
Li°EÀmít
* 
ödex
 = 
NULL
;

583 
Li°EÀmít
* 
cuºít
 = 
NULL
;

585 
FUNC_ENTRY
;

586 
	`Li°NextEÀmít
(
li°
, &
cuºít
Ë!
NULL
 && 
ödex
 == NULL)

588 i‡(
qE¡ry
->
£qno
 < ((
MQTTPîsi°í˚_qE¡ry
*)
cuºít
->
c⁄ã¡
)->seqno)

589 
ödex
 = 
cuºít
;

591 
	`Li°In£π
(
li°
, 
qE¡ry
, 
size
, 
ödex
);

592 
FUNC_EXIT
;

593 
	}
}

601 
	$MQTTPîsi°í˚_ª°‹eMesßgeQueue
(
Clõ¡s
* 
c
)

603 
rc
 = 0;

604 **
msgkeys
;

605 
nkeys
;

606 
i
 = 0;

607 
íåõs_ª°‹ed
 = 0;

609 
FUNC_ENTRY
;

610 i‡(
c
->
≥rsi°í˚
 && (
rc
 = c->≥rsi°í˚->
	`pkeys
(c->
ph™dÀ
, &
msgkeys
, &
nkeys
)) == 0)

612 
rc
 =0 && 
i
 < 
nkeys
)

614 *
buf„r
 = 
NULL
;

615 
buÊí
;

617 i‡(
	`°∫cmp
(
msgkeys
[
i
], 
PERSISTENCE_QUEUE_KEY
, 
	`°æí
(PERSISTENCE_QUEUE_KEY)) != 0)

619 i‡((
rc
 = 
c
->
≥rsi°í˚
->
	`pgë
(c->
ph™dÀ
, 
msgkeys
[
i
], &
buf„r
, &
buÊí
)) == 0)

621 
MQTTPîsi°í˚_qE¡ry
* 
qe
 = 
	`MQTTPîsi°í˚_ª°‹eQueueE¡ry
(
buf„r
, 
buÊí
);

623 i‡(
qe
)

625 
qe
->
£qno
 = 
	`©oi
(
msgkeys
[
i
]+2);

626 
	`MQTTPîsi°í˚_ö£πInSeqOrdî
(
c
->
mesßgeQueue
, 
qe
, (
MQTTPîsi°í˚_qE¡ry
));

627 
	`‰ì
(
buf„r
);

628 
c
->
qíåy_£qno
 = 
	`max
(c->qíåy_£qno, 
qe
->
£qno
);

629 
íåõs_ª°‹ed
++;

632 i‡(
msgkeys
[
i
])

633 
	`‰ì
(
msgkeys
[
i
]);

634 
i
++;

636 i‡(
msgkeys
 !
NULL
)

637 
	`‰ì
(
msgkeys
);

639 
	`Log
(
TRACE_MINIMUM
, -1, "%d queued mesßge†ª°‹ed f‹ clõ¡ %s", 
íåõs_ª°‹ed
, 
c
->
˛õ¡ID
);

640 
	`FUNC_EXIT_RC
(
rc
);

641  
rc
;

642 
	}
}

	@paho-c/src/MQTTPersistence.h

19 #i‡
deföed
(
__˝lu•lus
)

23 
	~"Clõ¡s.h
"

26 
	#PERSISTENCE_PUBLISH_SENT
 "s-"

	)

28 
	#PERSISTENCE_PUBREL
 "sc-"

	)

30 
	#PERSISTENCE_PUBLISH_RECEIVED
 "r-"

	)

32 
	#PERSISTENCE_COMMAND_KEY
 "c-"

	)

34 
	#PERSISTENCE_QUEUE_KEY
 "q-"

	)

35 
	#PERSISTENCE_MAX_KEY_LENGTH
 8

	)

37 
MQTTPîsi°í˚_¸óã
(
MQTTClõ¡_≥rsi°í˚
** 
≥r
, 
ty≥
, * 
pc⁄ãxt
);

38 
MQTTPîsi°í˚_öôülize
(
Clõ¡s
* 
c
, c⁄° * 
£rvîURI
);

39 
MQTTPîsi°í˚_˛o£
(
Clõ¡s
* 
c
);

40 
MQTTPîsi°í˚_˛ór
(
Clõ¡s
* 
c
);

41 
MQTTPîsi°í˚_ª°‹e
(
Clõ¡s
* 
c
);

42 * 
MQTTPîsi°í˚_ª°‹ePackë
(* 
buf„r
, 
size_t
 
buÊí
);

43 
MQTTPîsi°í˚_ö£πInOrdî
(
Li°
* 
li°
, * 
c⁄ã¡
, 
size_t
 
size
);

44 
MQTTPîsi°í˚_put
(
sockë
, * 
buf0
, 
size_t
 
buf0Àn
, 
cou¡
,

45 ** 
buf„rs
, 
size_t
* 
buÊís
, 
hty≥
, 
msgId
, 
s¸
);

46 
MQTTPîsi°í˚_ªmove
(
Clõ¡s
* 
c
, * 
ty≥
, 
qos
, 
msgId
);

47 
MQTTPîsi°í˚_wøpMsgID
(
Clõ¡s
 *
c
);

51 
°ru˘_id
[4];

52 
°ru˘_vîsi⁄
;

53 
∑ylﬂdÀn
;

54 * 
∑ylﬂd
;

55 
qos
;

56 
ªèöed
;

57 
dup
;

58 
msgid
;

59 } 
	tMQTTPîsi°í˚_mesßge
;

63 
MQTTPîsi°í˚_mesßge
* 
msg
;

64 * 
t›icName
;

65 
t›icLí
;

66 
£qno
;

67 } 
	tMQTTPîsi°í˚_qE¡ry
;

69 
MQTTPîsi°í˚_u≈îsi°QueueE¡ry
(
Clõ¡s
* 
˛õ¡
, 
MQTTPîsi°í˚_qE¡ry
* 
qe
);

70 
MQTTPîsi°í˚_≥rsi°QueueE¡ry
(
Clõ¡s
* 
a˛õ¡
, 
MQTTPîsi°í˚_qE¡ry
* 
qe
);

71 
MQTTPîsi°í˚_ª°‹eMesßgeQueue
(
Clõ¡s
* 
c
);

72 #ifde‡
__˝lu•lus


	@paho-c/src/MQTTPersistenceDefault.c

29 #i‡!
deföed
(
NO_PERSISTENCE
)

31 
	~<°dio.h
>

32 
	~<°rög.h
>

33 
	~<î∫o.h
>

35 #i‡
deföed
(
WIN32
Ë|| deföed(
WIN64
)

36 
	~<dúe˘.h
>

38 
	#°πok_r
–
A
, 
B
, 
C
 ) 
	`°πok
–A, B )

	)

39 
keysWö32
(*, ***, *);

40 
˛órWö32
(*);

41 
c⁄èöskeyWö32
(*, *);

43 
	~<sys/°©.h
>

44 
	~<dúít.h
>

45 
	~<uni°d.h
>

46 
keysUnix
(*, ***, *);

47 
˛órUnix
(*);

48 
c⁄èöskeyUnix
(*, *);

51 
	~"MQTTClõ¡Pîsi°í˚.h
"

52 
	~"MQTTPîsi°í˚DeÁu….h
"

53 
	~"SèckTø˚.h
"

54 
	~"Hóp.h
"

61 
	$p°›í
(**
h™dÀ
, c⁄° * 
˛õ¡ID
, c⁄° * 
£rvîURI
, * 
c⁄ãxt
)

63 
rc
 = 0;

64 *
d©aDú
 = 
c⁄ãxt
;

65 *
˛õ¡Dú
;

66 *
pTokí
 = 
NULL
;

67 *
ßve_±r
 = 
NULL
;

68 *
pCπDúName
 = 
NULL
;

69 *
pTokDúName
 = 
NULL
;

70 *
≥r£rvîURI
 = 
NULL
, *
±øux
;

72 
FUNC_ENTRY
;

74 
≥r£rvîURI
 = 
	`mÆloc
(
	`°æí
(
£rvîURI
) + 1);

75 
	`°r˝y
(
≥r£rvîURI
, 
£rvîURI
);

76 
±øux
 = 
	`°r°r
(
≥r£rvîURI
, ":");

77 *
±øux
 = '-' ;

80 
˛õ¡Dú
 = 
	`mÆloc
(
	`°æí
(
d©aDú
Ë+ såÀn(
˛õ¡ID
Ë+ såÀn(
≥r£rvîURI
) + 3);

81 
	`•rötf
(
˛õ¡Dú
, "%s/%s-%s", 
d©aDú
, 
˛õ¡ID
, 
≥r£rvîURI
);

89 
pCπDúName
 = (*)
	`mÆloc
–
	`°æí
(
˛õ¡Dú
) + 1 );

90 
pTokDúName
 = (*)
	`mÆloc
–
	`°æí
(
˛õ¡Dú
) + 1 );

91 
	`°r˝y
–
pTokDúName
, 
˛õ¡Dú
 );

93 
pTokí
 = 
	`°πok_r
–
pTokDúName
, "\\/", &
ßve_±r
 );

95 
	`°r˝y
–
pCπDúName
, 
pTokí
 );

96 
rc
 = 
	`p°mkdú
–
pCπDúName
 );

97 
pTokí
 = 
	`°πok_r
–
NULL
, "\\/", &
ßve_±r
 );

98  (
pTokí
 !
NULL
Ë&& (
rc
 == 0) )

101 
	`•rötf
–
pCπDúName
, "%s/%s",ÖCπDúName, 
pTokí
 );

102 
rc
 = 
	`p°mkdú
–
pCπDúName
 );

103 
pTokí
 = 
	`°πok_r
–
NULL
, "\\/", &
ßve_±r
 );

106 *
h™dÀ
 = 
˛õ¡Dú
;

108 
	`‰ì
(
≥r£rvîURI
);

109 
	`‰ì
(
pTokDúName
);

110 
	`‰ì
(
pCπDúName
);

112 
	`FUNC_EXIT_RC
(
rc
);

113  
rc
;

114 
	}
}

119 
	$p°mkdú
–*
pP©h«me
 )

121 
rc
 = 0;

123 
FUNC_ENTRY
;

124 #i‡
	`deföed
(
WIN32
Ë|| deföed(
WIN64
)

125 i‡–
	`_mkdú
–
pP©h«me
 ) != 0 )

129 i‡–
	`mkdú
–
pP©h«me
, 
S_IRWXU
 | 
S_IRGRP
 ) != 0 )

132 i‡–
î∫o
 !
EEXIST
 )

133 
rc
 = 
MQTTCLIENT_PERSISTENCE_ERROR
;

136 
	`FUNC_EXIT_RC
(
rc
);

137  
rc
;

138 
	}
}

145 
	$p°put
(* 
h™dÀ
, * 
key
, 
bufcou¡
, * 
buf„rs
[], 
buÊís
[])

147 
rc
 = 0;

148 *
˛õ¡Dú
 = 
h™dÀ
;

149 *
fûe
;

150 
FILE
 *
Â
;

151 
byãsWrôãn
 = 0;

152 
byãsTŸÆ
 = 0;

153 
i
;

155 
FUNC_ENTRY
;

156 i‡(
˛õ¡Dú
 =
NULL
)

158 
rc
 = 
MQTTCLIENT_PERSISTENCE_ERROR
;

159 
exô
;

163 
fûe
 = 
	`mÆloc
(
	`°æí
(
˛õ¡Dú
Ë+ såÀn(
key
Ë+ såÀn(
MESSAGE_FILENAME_EXTENSION
) + 2 );

164 
	`•rötf
(
fûe
, "%s/%s%s", 
˛õ¡Dú
, 
key
, 
MESSAGE_FILENAME_EXTENSION
);

166 
Â
 = 
	`f›í
(
fûe
, "wb");

167 i‡–
Â
 !
NULL
 )

169 
i
=0; i<
bufcou¡
; i++)

171 
byãsTŸÆ
 +
buÊís
[
i
];

172 
byãsWrôãn
 +
	`fwrôe
–
buf„rs
[
i
], (), 
buÊís
[i], 
Â
 );

174 
	`f˛o£
(
Â
);

175 
Â
 = 
NULL
;

177 
rc
 = 
MQTTCLIENT_PERSISTENCE_ERROR
;

179 i‡–
byãsWrôãn
 !
byãsTŸÆ
 )

181 
	`p°ªmove
(
h™dÀ
, 
key
);

182 
rc
 = 
MQTTCLIENT_PERSISTENCE_ERROR
;

185 
	`‰ì
(
fûe
);

187 
exô
:

188 
	`FUNC_EXIT_RC
(
rc
);

189  
rc
;

190 
	}
};

196 
	$p°gë
(* 
h™dÀ
, * 
key
, ** 
buf„r
, * 
buÊí
)

198 
rc
 = 0;

199 
FILE
 *
Â
;

200 *
˛õ¡Dú
 = 
h™dÀ
;

201 *
fûe
;

202 *
buf
;

203 
fûeLí
 = 0;

204 
byãsRód
 = 0;

206 
FUNC_ENTRY
;

207 i‡(
˛õ¡Dú
 =
NULL
)

209 
rc
 = 
MQTTCLIENT_PERSISTENCE_ERROR
;

210 
exô
;

214 
fûe
 = 
	`mÆloc
(
	`°æí
(
˛õ¡Dú
Ë+ såÀn(
key
Ë+ såÀn(
MESSAGE_FILENAME_EXTENSION
) + 2);

215 
	`•rötf
(
fûe
, "%s/%s%s", 
˛õ¡Dú
, 
key
, 
MESSAGE_FILENAME_EXTENSION
);

217 
Â
 = 
	`f›í
(
fûe
, "rb");

218 i‡–
Â
 !
NULL
 )

220 
	`f£ek
(
Â
, 0, 
SEEK_END
);

221 
fûeLí
 = 
	`·ñl
(
Â
);

222 
	`f£ek
(
Â
, 0, 
SEEK_SET
);

223 
buf
=(*)
	`mÆloc
(
fûeLí
);

224 
byãsRód
 = 
	`‰ód
(
buf
, (), 
fûeLí
, 
Â
);

225 *
buf„r
 = 
buf
;

226 *
buÊí
 = 
byãsRód
;

227 i‡–
byãsRód
 !
fûeLí
 )

228 
rc
 = 
MQTTCLIENT_PERSISTENCE_ERROR
;

229 
	`f˛o£
(
Â
);

230 
Â
 = 
NULL
;

232 
rc
 = 
MQTTCLIENT_PERSISTENCE_ERROR
;

234 
	`‰ì
(
fûe
);

237 
exô
:

238 
	`FUNC_EXIT_RC
(
rc
);

239  
rc
;

240 
	}
}

247 
	$p°ªmove
(* 
h™dÀ
, * 
key
)

249 
rc
 = 0;

250 *
˛õ¡Dú
 = 
h™dÀ
;

251 *
fûe
;

253 
FUNC_ENTRY
;

254 i‡(
˛õ¡Dú
 =
NULL
)

256  
rc
 = 
MQTTCLIENT_PERSISTENCE_ERROR
;

257 
exô
;

261 
fûe
 = 
	`mÆloc
(
	`°æí
(
˛õ¡Dú
Ë+ såÀn(
key
Ë+ såÀn(
MESSAGE_FILENAME_EXTENSION
) + 2);

262 
	`•rötf
(
fûe
, "%s/%s%s", 
˛õ¡Dú
, 
key
, 
MESSAGE_FILENAME_EXTENSION
);

264 #i‡
	`deföed
(
WIN32
Ë|| deföed(
WIN64
)

265 i‡–
	`_u∆ök
(
fûe
) != 0 )

268 i‡–
	`u∆ök
(
fûe
) != 0 )

271 i‡–
î∫o
 !
ENOENT
 )

272 
rc
 = 
MQTTCLIENT_PERSISTENCE_ERROR
;

275 
	`‰ì
(
fûe
);

277 
exô
:

278 
	`FUNC_EXIT_RC
(
rc
);

279  
rc
;

280 
	}
}

286 
	$p°˛o£
(* 
h™dÀ
)

288 
rc
 = 0;

289 *
˛õ¡Dú
 = 
h™dÀ
;

291 
FUNC_ENTRY
;

292 i‡(
˛õ¡Dú
 =
NULL
)

294 
rc
 = 
MQTTCLIENT_PERSISTENCE_ERROR
;

295 
exô
;

298 #i‡
	`deföed
(
WIN32
Ë|| deföed(
WIN64
)

299 i‡–
	`_rmdú
(
˛õ¡Dú
) != 0 )

302 i‡–
	`rmdú
(
˛õ¡Dú
) != 0 )

305 i‡–
î∫o
 !
ENOENT
 &&Éºnÿ!
ENOTEMPTY
 )

306 
rc
 = 
MQTTCLIENT_PERSISTENCE_ERROR
;

309 
	`‰ì
(
˛õ¡Dú
);

311 
exô
:

312 
	`FUNC_EXIT_RC
(
rc
);

313  
rc
;

314 
	}
}

320 
	$p°c⁄èöskey
(*
h™dÀ
, *
key
)

322 
rc
 = 0;

323 *
˛õ¡Dú
 = 
h™dÀ
;

325 
FUNC_ENTRY
;

326 i‡(
˛õ¡Dú
 =
NULL
)

328 
rc
 = 
MQTTCLIENT_PERSISTENCE_ERROR
;

329 
exô
;

332 #i‡
	`deföed
(
WIN32
Ë|| deföed(
WIN64
)

333 
rc
 = 
	`c⁄èöskeyWö32
(
˛õ¡Dú
, 
key
);

335 
rc
 = 
	`c⁄èöskeyUnix
(
˛õ¡Dú
, 
key
);

338 
exô
:

339 
	`FUNC_EXIT_RC
(
rc
);

340  
rc
;

341 
	}
}

344 #i‡
deföed
(
WIN32
Ë|| deföed(
WIN64
)

345 
	$c⁄èöskeyWö32
(*
dú«me
, *
key
)

347 
nŸFound
 = 
MQTTCLIENT_PERSISTENCE_ERROR
;

348 
fFöished
 = 0;

349 *
fûekey
, *
±øux
;

350 
dú
[
MAX_PATH
+1];

351 
WIN32_FIND_DATAA
 
FûeD©a
;

352 
HANDLE
 
hDú
;

354 
FUNC_ENTRY
;

355 
	`•rötf
(
dú
, "%s/*", 
dú«me
);

357 
hDú
 = 
	`FödFú°FûeA
(
dú
, &
FûeD©a
);

358 i‡(
hDú
 !
INVALID_HANDLE_VALUE
)

360 !
fFöished
)

362 i‡(
FûeD©a
.
dwFûeAâribuãs
 & 
FILE_ATTRIBUTE_ARCHIVE
)

364 
fûekey
 = 
	`mÆloc
(
	`°æí
(
FûeD©a
.
cFûeName
) + 1);

365 
	`°r˝y
(
fûekey
, 
FûeD©a
.
cFûeName
);

366 
±øux
 = 
	`°r°r
(
fûekey
, 
MESSAGE_FILENAME_EXTENSION
);

367 i‡–
±øux
 !
NULL
 )

368 *
±øux
 = '\0' ;

369 if(
	`°rcmp
(
fûekey
, 
key
) == 0)

371 
nŸFound
 = 0;

372 
fFöished
 = 1;

374 
	`‰ì
(
fûekey
);

376 i‡(!
	`FödNextFûeA
(
hDú
, &
FûeD©a
))

378 i‡(
	`GëLa°Eº‹
(Ë=
ERROR_NO_MORE_FILES
)

379 
fFöished
 = 1;

382 
	`FödClo£
(
hDú
);

385 
	`FUNC_EXIT_RC
(
nŸFound
);

386  
nŸFound
;

387 
	}
}

389 
	$c⁄èöskeyUnix
(*
dú«me
, *
key
)

391 
nŸFound
 = 
MQTTCLIENT_PERSISTENCE_ERROR
;

392 *
fûekey
, *
±øux
;

393 
DIR
 *
dp
;

394 
dúít
 *
dú_íåy
;

395 
°©
 
°©_öfo
;

397 
FUNC_ENTRY
;

398 if((
dp
 = 
	`›ídú
(
dú«me
)Ë!
NULL
)

400 (
dú_íåy
 = 
	`ªaddú
(
dp
)Ë!
NULL
 && 
nŸFound
)

402 * 
fûíame
 = 
	`mÆloc
(
	`°æí
(
dú«me
Ë+ såÀn(
dú_íåy
->
d_«me
) + 2);

403 
	`•rötf
(
fûíame
, "%s/%s", 
dú«me
, 
dú_íåy
->
d_«me
);

404 
	`l°©
(
fûíame
, &
°©_öfo
);

405 
	`‰ì
(
fûíame
);

406 if(
	`S_ISREG
(
°©_öfo
.
°_mode
))

408 
fûekey
 = 
	`mÆloc
(
	`°æí
(
dú_íåy
->
d_«me
) + 1);

409 
	`°r˝y
(
fûekey
, 
dú_íåy
->
d_«me
);

410 
±øux
 = 
	`°r°r
(
fûekey
, 
MESSAGE_FILENAME_EXTENSION
);

411 i‡–
±øux
 !
NULL
 )

412 *
±øux
 = '\0' ;

413 if(
	`°rcmp
(
fûekey
, 
key
) == 0)

414 
nŸFound
 = 0;

415 
	`‰ì
(
fûekey
);

418 
	`˛o£dú
(
dp
);

421 
	`FUNC_EXIT_RC
(
nŸFound
);

422  
nŸFound
;

423 
	}
}

430 
	$p°˛ór
(*
h™dÀ
)

432 
rc
 = 0;

433 *
˛õ¡Dú
 = 
h™dÀ
;

435 
FUNC_ENTRY
;

436 i‡(
˛õ¡Dú
 =
NULL
)

438 
rc
 = 
MQTTCLIENT_PERSISTENCE_ERROR
;

439 
exô
;

442 #i‡
	`deföed
(
WIN32
Ë|| deföed(
WIN64
)

443 
rc
 = 
	`˛órWö32
(
˛õ¡Dú
);

445 
rc
 = 
	`˛órUnix
(
˛õ¡Dú
);

448 
exô
:

449 
	`FUNC_EXIT_RC
(
rc
);

450  
rc
;

451 
	}
}

454 #i‡
deföed
(
WIN32
Ë|| deföed(
WIN64
)

455 
	$˛órWö32
(*
dú«me
)

457 
rc
 = 0;

458 
fFöished
 = 0;

459 *
fûe
;

460 
dú
[
MAX_PATH
+1];

461 
WIN32_FIND_DATAA
 
FûeD©a
;

462 
HANDLE
 
hDú
;

464 
FUNC_ENTRY
;

465 
	`•rötf
(
dú
, "%s/*", 
dú«me
);

467 
hDú
 = 
	`FödFú°FûeA
(
dú
, &
FûeD©a
);

468 i‡(
hDú
 !
INVALID_HANDLE_VALUE
)

470 !
fFöished
)

472 i‡(
FûeD©a
.
dwFûeAâribuãs
 & 
FILE_ATTRIBUTE_ARCHIVE
)

474 
fûe
 = 
	`mÆloc
(
	`°æí
(
dú«me
Ë+ såÀn(
FûeD©a
.
cFûeName
) + 2);

475 
	`•rötf
(
fûe
, "%s/%s", 
dú«me
, 
FûeD©a
.
cFûeName
);

476 
rc
 = 
	`ªmove
(
fûe
);

477 
	`‰ì
(
fûe
);

478 i‡–
rc
 != 0 )

480 
rc
 = 
MQTTCLIENT_PERSISTENCE_ERROR
;

484 i‡(!
	`FödNextFûeA
(
hDú
, &
FûeD©a
))

486 i‡(
	`GëLa°Eº‹
(Ë=
ERROR_NO_MORE_FILES
)

487 
fFöished
 = 1;

490 
	`FödClo£
(
hDú
);

492 
rc
 = 
MQTTCLIENT_PERSISTENCE_ERROR
;

494 
	`FUNC_EXIT_RC
(
rc
);

495  
rc
;

496 
	}
}

498 
	$˛órUnix
(*
dú«me
)

500 
rc
 = 0;

501 
DIR
 *
dp
;

502 
dúít
 *
dú_íåy
;

503 
°©
 
°©_öfo
;

505 
FUNC_ENTRY
;

506 if((
dp
 = 
	`›ídú
(
dú«me
)Ë!
NULL
)

508 (
dú_íåy
 = 
	`ªaddú
(
dp
)Ë!
NULL
 && 
rc
 == 0)

510 
	`l°©
(
dú_íåy
->
d_«me
, &
°©_öfo
);

511 if(
	`S_ISREG
(
°©_öfo
.
°_mode
))

513 i‡–
	`ªmove
(
dú_íåy
->
d_«me
) != 0 )

514 
rc
 = 
MQTTCLIENT_PERSISTENCE_ERROR
;

517 
	`˛o£dú
(
dp
);

519 
rc
 = 
MQTTCLIENT_PERSISTENCE_ERROR
;

521 
	`FUNC_EXIT_RC
(
rc
);

522  
rc
;

523 
	}
}

530 
	$p°keys
(*
h™dÀ
, ***
keys
, *
nkeys
)

532 
rc
 = 0;

533 *
˛õ¡Dú
 = 
h™dÀ
;

535 
FUNC_ENTRY
;

536 i‡(
˛õ¡Dú
 =
NULL
)

538 
rc
 = 
MQTTCLIENT_PERSISTENCE_ERROR
;

539 
exô
;

542 #i‡
	`deföed
(
WIN32
Ë|| deföed(
WIN64
)

543 
rc
 = 
	`keysWö32
(
˛õ¡Dú
, 
keys
, 
nkeys
);

545 
rc
 = 
	`keysUnix
(
˛õ¡Dú
, 
keys
, 
nkeys
);

548 
exô
:

549 
	`FUNC_EXIT_RC
(
rc
);

550  
rc
;

551 
	}
}

554 #i‡
deföed
(
WIN32
Ë|| deföed(
WIN64
)

555 
	$keysWö32
(*
dú«me
, ***
keys
, *
nkeys
)

557 
rc
 = 0;

558 **
fkeys
 = 
NULL
;

559 
nfkeys
 = 0;

560 
dú
[
MAX_PATH
+1];

561 
WIN32_FIND_DATAA
 
FûeD©a
;

562 
HANDLE
 
hDú
;

563 
fFöished
 = 0;

564 *
±øux
;

565 
i
;

567 
FUNC_ENTRY
;

568 
	`•rötf
(
dú
, "%s/*", 
dú«me
);

571 
hDú
 = 
	`FödFú°FûeA
(
dú
, &
FûeD©a
);

572 i‡(
hDú
 !
INVALID_HANDLE_VALUE
)

574 !
fFöished
)

576 i‡(
FûeD©a
.
dwFûeAâribuãs
 & 
FILE_ATTRIBUTE_ARCHIVE
)

577 
nfkeys
++;

578 i‡(!
	`FödNextFûeA
(
hDú
, &
FûeD©a
))

580 i‡(
	`GëLa°Eº‹
(Ë=
ERROR_NO_MORE_FILES
)

581 
fFöished
 = 1;

584 
	`FödClo£
(
hDú
);

587 
rc
 = 
MQTTCLIENT_PERSISTENCE_ERROR
;

588 
exô
;

591 i‡(
nfkeys
 != 0 )

592 
fkeys
 = (**)
	`mÆloc
(
nfkeys
 * (*));

595 
hDú
 = 
	`FödFú°FûeA
(
dú
, &
FûeD©a
);

596 i‡(
hDú
 !
INVALID_HANDLE_VALUE
)

598 
fFöished
 = 0;

599 
i
 = 0;

600 !
fFöished
)

602 i‡(
FûeD©a
.
dwFûeAâribuãs
 & 
FILE_ATTRIBUTE_ARCHIVE
)

604 
fkeys
[
i
] = 
	`mÆloc
(
	`°æí
(
FûeD©a
.
cFûeName
) + 1);

605 
	`°r˝y
(
fkeys
[
i
], 
FûeD©a
.
cFûeName
);

606 
±øux
 = 
	`°r°r
(
fkeys
[
i
], 
MESSAGE_FILENAME_EXTENSION
);

607 i‡–
±øux
 !
NULL
 )

608 *
±øux
 = '\0' ;

609 
i
++;

611 i‡(!
	`FödNextFûeA
(
hDú
, &
FûeD©a
))

613 i‡(
	`GëLa°Eº‹
(Ë=
ERROR_NO_MORE_FILES
)

614 
fFöished
 = 1;

617 
	`FödClo£
(
hDú
);

620 
rc
 = 
MQTTCLIENT_PERSISTENCE_ERROR
;

621 
exô
;

624 *
nkeys
 = 
nfkeys
;

625 *
keys
 = 
fkeys
;

628 
exô
:

629 
	`FUNC_EXIT_RC
(
rc
);

630  
rc
;

631 
	}
}

633 
	$keysUnix
(*
dú«me
, ***
keys
, *
nkeys
)

635 
rc
 = 0;

636 **
fkeys
 = 
NULL
;

637 
nfkeys
 = 0;

638 *
±øux
;

639 
i
;

640 
DIR
 *
dp
;

641 
dúít
 *
dú_íåy
;

642 
°©
 
°©_öfo
;

644 
FUNC_ENTRY
;

646 if((
dp
 = 
	`›ídú
(
dú«me
)Ë!
NULL
)

648 (
dú_íåy
 = 
	`ªaddú
(
dp
)Ë!
NULL
)

650 * 
ãmp
 = 
	`mÆloc
(
	`°æí
(
dú«me
)+°æí(
dú_íåy
->
d_«me
)+2);

652 
	`•rötf
(
ãmp
, "%s/%s", 
dú«me
, 
dú_íåy
->
d_«me
);

653 i‡(
	`l°©
(
ãmp
, &
°©_öfo
Ë=0 && 
	`S_ISREG
(°©_öfo.
°_mode
))

654 
nfkeys
++;

655 
	`‰ì
(
ãmp
);

657 
	`˛o£dú
(
dp
);

660 
rc
 = 
MQTTCLIENT_PERSISTENCE_ERROR
;

661 
exô
;

664 i‡(
nfkeys
 != 0)

666 
fkeys
 = (**)
	`mÆloc
(
nfkeys
 * (*));

669 if((
dp
 = 
	`›ídú
(
dú«me
)Ë!
NULL
)

671 
i
 = 0;

672 (
dú_íåy
 = 
	`ªaddú
(
dp
)Ë!
NULL
)

674 * 
ãmp
 = 
	`mÆloc
(
	`°æí
(
dú«me
)+°æí(
dú_íåy
->
d_«me
)+2);

676 
	`•rötf
(
ãmp
, "%s/%s", 
dú«me
, 
dú_íåy
->
d_«me
);

677 i‡(
	`l°©
(
ãmp
, &
°©_öfo
Ë=0 && 
	`S_ISREG
(°©_öfo.
°_mode
))

679 
fkeys
[
i
] = 
	`mÆloc
(
	`°æí
(
dú_íåy
->
d_«me
) + 1);

680 
	`°r˝y
(
fkeys
[
i
], 
dú_íåy
->
d_«me
);

681 
±øux
 = 
	`°r°r
(
fkeys
[
i
], 
MESSAGE_FILENAME_EXTENSION
);

682 i‡–
±øux
 !
NULL
 )

683 *
±øux
 = '\0' ;

684 
i
++;

686 
	`‰ì
(
ãmp
);

688 
	`˛o£dú
(
dp
);

691 
rc
 = 
MQTTCLIENT_PERSISTENCE_ERROR
;

692 
exô
;

696 *
nkeys
 = 
nfkeys
;

697 *
keys
 = 
fkeys
;

700 
exô
:

701 
	`FUNC_EXIT_RC
(
rc
);

702  
rc
;

703 
	}
}

708 #i‡
deföed
(
UNIT_TESTS
)

709 
	$maö
 (
¨gc
, *
¨gv
[])

711 
	#MSTEM
 "m-"

	)

712 
	#NMSGS
 10

	)

713 
	#NBUFS
 4

	)

714 
	#NDEL
 2

	)

715 
	#RC
 !
rc
 ? "(Suc˚ss)" : "(FaûedË"

	)

717 
rc
;

718 *
h™dÀ
;

719 *
≥rdú
 = ".";

720 *
˛õ¡ID
 = "TheUTClient";

721 *
£rvîURI
 = "127.0.0.1:1883";

723 *
°em
 = 
MSTEM
;

724 
msgId
, 
i
;

725 
nm
[
NDEL
] = {5 , 8};

727 *
key
;

728 **
keys
;

729 
nkeys
;

730 *
buf„r
, *
buff
;

731 
buÊí
;

733 
nbufs
 = 
NBUFS
;

734 *
bufs
[
NBUFS
] = {"m0", "mm1", "mmm2" , "mmmm3"};

735 
buÊís
[
NBUFS
];

736 
i
=0;i<
nbufs
;i++)

737 
buÊís
[
i
]=
	`°æí
(
bufs
[i]);

741 
rc
 = 
	`p°›í
((**)&
h™dÀ
, 
˛õ¡ID
, 
£rvîURI
, 
≥rdú
);

742 
	`¥ötf
("%†Pîsi°í˚ dúe˘‹y f‹ clõ¡ %†: %s\n", 
RC
, 
˛õ¡ID
, 
h™dÀ
);

745 
msgId
=0;msgId<
NMSGS
;msgId++)

747 
key
 = 
	`mÆloc
(
MESSAGE_FILENAME_LENGTH
 + 1);

748 
	`•rötf
(
key
, "%s%d", 
°em
, 
msgId
);

749 
rc
 = 
	`p°put
(
h™dÀ
, 
key
, 
nbufs
, 
bufs
, 
buÊís
);

750 
	`¥ötf
("%†Addög mesßgê%s\n", 
RC
, 
key
);

751 
	`‰ì
(
key
);

755 
rc
 = 
	`p°keys
(
h™dÀ
, &
keys
, &
nkeys
);

756 
	`¥ötf
("%†Found %d mesßge†≥rsi°ed i¿%s\n", 
RC
, 
nkeys
, 
h™dÀ
);

757 
i
=0;i<
nkeys
;i++)

758 
	`¥ötf
("%13s\n", 
keys
[
i
]);

760 i‡(
keys
 !=
NULL
)

761 
	`‰ì
(
keys
);

764 
i
=0;i<
NDEL
;i++)

766 
key
 = 
	`mÆloc
(
MESSAGE_FILENAME_LENGTH
 + 1);

767 
	`•rötf
(
key
, "%s%d", 
°em
, 
nm
[
i
]);

768 
rc
 = 
	`p°c⁄èöskey
(
h™dÀ
, 
key
);

769 
	`¥ötf
("%†Mesßgê%†i†≥rsi°ed ?\n", 
RC
, 
key
);

770 
	`‰ì
(
key
);

774 
i
=0;i<
NDEL
;i++)

776 
key
 = 
	`mÆloc
(
MESSAGE_FILENAME_LENGTH
 + 1);

777 
	`•rötf
(
key
, "%s%d", 
°em
, 
nm
[
i
]);

778 
rc
 = 
	`p°gë
(
h™dÀ
, 
key
, &
buf„r
, &
buÊí
);

779 
buff
 = 
	`mÆloc
(
buÊí
+1);

780 
	`mem˝y
(
buff
, 
buf„r
, 
buÊí
);

781 
buff
[
buÊí
] = '\0';

782 
	`¥ötf
("%†Rërõvög mesßgê%†: %s\n", 
RC
, 
key
, 
buff
);

783 
rc
 = 
	`p°ªmove
(
h™dÀ
, 
key
);

784 
	`¥ötf
("%†Removög mesßgê%s\n", 
RC
, 
key
);

785 
	`‰ì
(
key
);

786 
	`‰ì
(
buff
);

787 
	`‰ì
(
buf„r
);

791 
i
=0;i<
NDEL
;i++)

793 
key
 = 
	`mÆloc
(
MESSAGE_FILENAME_LENGTH
 + 1);

794 
	`•rötf
(
key
, "%s%d", 
°em
, 
nm
[
i
]);

795 
rc
 = 
	`p°c⁄èöskey
(
h™dÀ
, 
key
);

796 
	`¥ötf
("%†Mesßgê%†i†≥rsi°ed ?\n", 
RC
, 
key
);

797 
	`‰ì
(
key
);

801 
rc
 = 
	`p°keys
(
h™dÀ
, &
keys
, &
nkeys
);

802 
	`¥ötf
("%†Found %d mesßge†≥rsi°ed i¿%s\n", 
RC
, 
nkeys
, 
h™dÀ
);

803 
i
=0;i<
nkeys
;i++)

804 
	`¥ötf
("%13s\n", 
keys
[
i
]);

806 i‡(
keys
 !
NULL
)

807 
	`‰ì
(
keys
);

811 
rc
 = 
	`p°˛o£
(&
h™dÀ
);

812 
	`¥ötf
("%†Closög clõ¡Öîsi°í˚ dúe˘‹y f‹ clõ¡ %s\n", 
RC
, 
˛õ¡ID
);

815 
rc
 = 
	`p°˛ór
(
h™dÀ
);

816 
	`¥ötf
("%†DñëögáŒÖîsi°ed mesßge†ö %s\n", 
RC
, 
h™dÀ
);

819 
rc
 = 
	`p°keys
(
h™dÀ
, &
keys
, &
nkeys
);

820 
	`¥ötf
("%†Found %d mesßge†≥rsi°ed i¿%s\n", 
RC
, 
nkeys
, 
h™dÀ
);

821 
i
=0;i<
nkeys
;i++)

822 
	`¥ötf
("%13s\n", 
keys
[
i
]);

824 i‡–
keys
 !
NULL
 )

825 
	`‰ì
(
keys
);

828 
rc
 = 
	`p°˛o£
(&
h™dÀ
);

829 
	`¥ötf
("%†Closög clõ¡Öîsi°í˚ dúe˘‹y f‹ clõ¡ %s\n", 
RC
, 
˛õ¡ID
);

830 
	}
}

	@paho-c/src/MQTTPersistenceDefault.h

18 
	#MESSAGE_FILENAME_LENGTH
 8

	)

20 
	#MESSAGE_FILENAME_EXTENSION
 ".msg"

	)

23 
p°›í
(** 
h™dÀ
, c⁄° * 
˛õ¡ID
, c⁄° * 
£rvîURI
, * 
c⁄ãxt
);

24 
p°˛o£
(* 
h™dÀ
);

25 
p°put
(* 
h™dÀ
, * 
key
, 
bufcou¡
, * 
buf„rs
[], 
buÊís
[]);

26 
p°gë
(* 
h™dÀ
, * 
key
, ** 
buf„r
, * 
buÊí
);

27 
p°ªmove
(* 
h™dÀ
, * 
key
);

28 
p°keys
(* 
h™dÀ
, *** 
keys
, * 
nkeys
);

29 
p°˛ór
(* 
h™dÀ
);

30 
p°c⁄èöskey
(* 
h™dÀ
, * 
key
);

32 
p°mkdú
(*
pP©h«me
);

	@paho-c/src/MQTTProtocol.h

18 #i‡!
deföed
(
MQTTPROTOCOL_H
)

19 
	#MQTTPROTOCOL_H


	)

21 
	~"LökedLi°.h
"

22 
	~"MQTTPackë.h
"

23 
	~"Clõ¡s.h
"

25 
	#MAX_MSG_ID
 65535

	)

26 
	#MAX_CLIENTID_LEN
 65535

	)

30 
	msockë
;

31 
Publiˇti⁄s
* 
	mp
;

32 } 
	t≥ndög_wrôe
;

37 
Li°
 
	mpubliˇti⁄s
;

38 
	mmsgs_ª˚ived
;

39 
	mmsgs_£¡
;

40 
Li°
 
	m≥ndög_wrôes
;

41 } 
	tMQTTPrŸocﬁ
;

44 
	~"MQTTPrŸocﬁOut.h
"

	@paho-c/src/MQTTProtocolClient.c

30 
	~<°dlib.h
>

32 
	~"MQTTPrŸocﬁClõ¡.h
"

33 #i‡!
deföed
(
NO_PERSISTENCE
)

34 
	~"MQTTPîsi°í˚.h
"

36 
	~"SockëBuf„r.h
"

37 
	~"SèckTø˚.h
"

38 
	~"Hóp.h
"

40 #i‡!
deföed
(
mö
)

41 
	#mö
(
A
,
B
Ë–(AË< (BË? (A):(B))

	)

44 
PrŸocﬁ_¥o˚ssPubliˇti⁄
(
Publish
* 
publish
, 
Clõ¡s
* 
˛õ¡
);

45 
MQTTPrŸocﬁ_˛o£Sessi⁄
(
Clõ¡s
* 
˛õ¡
, 
£ndwûl
);

47 
MQTTPrŸocﬁ
 
°©e
;

48 
Clõ¡Sèãs
* 
b°©e
;

56 
	$mesßgeIDCom∑ª
(* 
a
, * 
b
)

58 
Mesßges
* 
msg
 = (Mesßges*)
a
;

59  
msg
->
msgid
 =*(*)
b
;

60 
	}
}

69 
	$MQTTPrŸocﬁ_assignMsgId
(
Clõ¡s
* 
˛õ¡
)

71 
°¨t_msgid
 = 
˛õ¡
->
msgID
;

72 
msgid
 = 
°¨t_msgid
;

74 
FUNC_ENTRY
;

75 
msgid
 = (msgid =
MAX_MSG_ID
) ? 1 : msgid + 1;

76 
	`Li°FödIãm
(
˛õ¡
->
outboundMsgs
, &
msgid
, 
mesßgeIDCom∑ª
Ë!
NULL
)

78 
msgid
 = (msgid =
MAX_MSG_ID
) ? 1 : msgid + 1;

79 i‡(
msgid
 =
°¨t_msgid
)

81 
msgid
 = 0;

85 i‡(
msgid
 != 0)

86 
˛õ¡
->
msgID
 = 
msgid
;

87 
	`FUNC_EXIT_RC
(
msgid
);

88  
msgid
;

89 
	}
}

92 
	$MQTTPrŸocﬁ_°‹eQoS0
(
Clõ¡s
* 
pub˛õ¡
, 
Publish
* 
publish
)

94 
Àn
;

95 
≥ndög_wrôe
* 
pw
 = 
NULL
;

97 
FUNC_ENTRY
;

99 
pw
 = 
	`mÆloc
((
≥ndög_wrôe
));

100 
	`Log
(
TRACE_MIN
, 12, 
NULL
);

101 
pw
->
p
 = 
	`MQTTPrŸocﬁ_°‹ePubliˇti⁄
(
publish
, &
Àn
);

102 
pw
->
sockë
 = 
pub˛õ¡
->
√t
.socket;

103 
	`Li°Aµíd
(&(
°©e
.
≥ndög_wrôes
), 
pw
, (
≥ndög_wrôe
)+
Àn
);

106 i‡(
	`SockëBuf„r_upd©eWrôe
(
pw
->
sockë
,Öw->
p
->
t›ic
,Öw->p->
∑ylﬂd
Ë=
NULL
)

107 
	`Log
(
LOG_SEVERE
, 0, "Error updating write");

108 
FUNC_EXIT
;

109 
	}
}

120 
	$MQTTPrŸocﬁ_°¨tPublishComm⁄
(
Clõ¡s
* 
pub˛õ¡
, 
Publish
* 
publish
, 
qos
, 
ªèöed
)

122 
rc
 = 
TCPSOCKET_COMPLETE
;

124 
FUNC_ENTRY
;

125 
rc
 = 
	`MQTTPackë_£nd_publish
(
publish
, 0, 
qos
, 
ªèöed
, &
pub˛õ¡
->
√t
,Öub˛õ¡->
˛õ¡ID
);

126 i‡(
qos
 =0 && 
rc
 =
TCPSOCKET_INTERRUPTED
)

127 
	`MQTTPrŸocﬁ_°‹eQoS0
(
pub˛õ¡
, 
publish
);

128 
	`FUNC_EXIT_RC
(
rc
);

129  
rc
;

130 
	}
}

142 
	$MQTTPrŸocﬁ_°¨tPublish
(
Clõ¡s
* 
pub˛õ¡
, 
Publish
* 
publish
, 
qos
, 
ªèöed
, 
Mesßges
** 
mm
)

144 
Publish
 
p
 = *
publish
;

145 
rc
 = 0;

147 
FUNC_ENTRY
;

148 i‡(
qos
 > 0)

150 *
mm
 = 
	`MQTTPrŸocﬁ_¸óãMesßge
(
publish
, mm, 
qos
, 
ªèöed
);

151 
	`Li°Aµíd
(
pub˛õ¡
->
outboundMsgs
, *
mm
, (*mm)->
Àn
);

154 
p
.
∑ylﬂd
 = (*
mm
)->
publish
->payload;

155 
p
.
t›ic
 = (*
mm
)->
publish
->topic;

157 
rc
 = 
	`MQTTPrŸocﬁ_°¨tPublishComm⁄
(
pub˛õ¡
, &
p
, 
qos
, 
ªèöed
);

158 
	`FUNC_EXIT_RC
(
rc
);

159  
rc
;

160 
	}
}

171 
Mesßges
* 
	$MQTTPrŸocﬁ_¸óãMesßge
(
Publish
* 
publish
, 
Mesßges
 **
mm
, 
qos
, 
ªèöed
)

173 
Mesßges
* 
m
 = 
	`mÆloc
((Messages));

175 
FUNC_ENTRY
;

176 
m
->
Àn
 = (
Mesßges
);

177 i‡(*
mm
 =
NULL
 || (*mm)->
publish
 == NULL)

179 
Àn1
;

180 *
mm
 = 
m
;

181 
m
->
publish
 = 
	`MQTTPrŸocﬁ_°‹ePubliˇti⁄
’ublish, &
Àn1
);

182 
m
->
Àn
 +
Àn1
;

186 ++(((*
mm
)->
publish
)->
ªfcou¡
);

187 
m
->
publish
 = (*
mm
)->publish;

189 
m
->
msgid
 = 
publish
->
msgId
;

190 
m
->
qos
 = qos;

191 
m
->
ªèö
 = 
ªèöed
;

192 
	`time
(&(
m
->
œ°Touch
));

193 i‡(
qos
 == 2)

194 
m
->
√xtMesßgeTy≥
 = 
PUBREC
;

195 
FUNC_EXIT
;

196  
m
;

197 
	}
}

206 
Publiˇti⁄s
* 
	$MQTTPrŸocﬁ_°‹ePubliˇti⁄
(
Publish
* 
publish
, * 
Àn
)

208 
Publiˇti⁄s
* 
p
 = 
	`mÆloc
((Publications));

210 
FUNC_ENTRY
;

211 
p
->
ªfcou¡
 = 1;

213 *
Àn
 = 
	`°æí
(
publish
->
t›ic
)+1;

214 i‡(
	`Hóp_födIãm
(
publish
->
t›ic
))

215 
p
->
t›ic
 = 
publish
->topic;

218 
p
->
t›ic
 = 
	`mÆloc
(*
Àn
);

219 
	`°r˝y
(
p
->
t›ic
, 
publish
->topic);

221 *
Àn
 +(
Publiˇti⁄s
);

223 
p
->
t›i˛í
 = 
publish
->topiclen;

224 
p
->
∑ylﬂdÀn
 = 
publish
->payloadlen;

225 
p
->
∑ylﬂd
 = 
	`mÆloc
(
publish
->
∑ylﬂdÀn
);

226 
	`mem˝y
(
p
->
∑ylﬂd
, 
publish
->∑ylﬂd,Ö->
∑ylﬂdÀn
);

227 *
Àn
 +
publish
->
∑ylﬂdÀn
;

229 
	`Li°Aµíd
(&(
°©e
.
publiˇti⁄s
), 
p
, *
Àn
);

230 
FUNC_EXIT
;

231  
p
;

232 
	}
}

238 
	$MQTTPrŸocﬁ_ªmovePubliˇti⁄
(
Publiˇti⁄s
* 
p
)

240 
FUNC_ENTRY
;

241 i‡(--(
p
->
ªfcou¡
) == 0)

243 
	`‰ì
(
p
->
∑ylﬂd
);

244 
	`‰ì
(
p
->
t›ic
);

245 
	`Li°Remove
(&(
°©e
.
publiˇti⁄s
), 
p
);

247 
FUNC_EXIT
;

248 
	}
}

256 
	$MQTTPrŸocﬁ_h™dÀPublishes
(* 
∑ck
, 
sock
)

258 
Publish
* 
publish
 = (Publish*)
∑ck
;

259 
Clõ¡s
* 
˛õ¡
 = 
NULL
;

260 * 
˛õ¡id
 = 
NULL
;

261 
rc
 = 
TCPSOCKET_COMPLETE
;

263 
FUNC_ENTRY
;

264 
˛õ¡
 = (
Clõ¡s
*)(
	`Li°FödIãm
(
b°©e
->
˛õ¡s
, &
sock
, 
˛õ¡SockëCom∑ª
)->
c⁄ã¡
);

265 
˛õ¡id
 = 
˛õ¡
->
˛õ¡ID
;

266 
	`Log
(
LOG_PROTOCOL
, 11, 
NULL
, 
sock
, 
˛õ¡id
, 
publish
->
msgId
,Öublish->
hódî
.
bôs
.
qos
,

267 
publish
->
hódî
.
bôs
.
ªèö
, 
	`mö
(20,Öublish->
∑ylﬂdÀn
),Öublish->
∑ylﬂd
);

269 i‡(
publish
->
hódî
.
bôs
.
qos
 == 0)

270 
	`PrŸocﬁ_¥o˚ssPubliˇti⁄
(
publish
, 
˛õ¡
);

271 i‡(
publish
->
hódî
.
bôs
.
qos
 == 1)

274 
rc
 = 
	`MQTTPackë_£nd_puback
(
publish
->
msgId
, &
˛õ¡
->
√t
, clõ¡->
˛õ¡ID
);

276 
	`PrŸocﬁ_¥o˚ssPubliˇti⁄
(
publish
, 
˛õ¡
);

278 i‡(
publish
->
hódî
.
bôs
.
qos
 == 2)

281 
Àn
;

282 
Li°EÀmít
* 
li°EÀm
 = 
NULL
;

283 
Mesßges
* 
m
 = 
	`mÆloc
((Messages));

284 
Publiˇti⁄s
* 
p
 = 
	`MQTTPrŸocﬁ_°‹ePubliˇti⁄
(
publish
, &
Àn
);

285 
m
->
publish
 = 
p
;

286 
m
->
msgid
 = 
publish
->
msgId
;

287 
m
->
qos
 = 
publish
->
hódî
.
bôs
.qos;

288 
m
->
ªèö
 = 
publish
->
hódî
.
bôs
.retain;

289 
m
->
√xtMesßgeTy≥
 = 
PUBREL
;

290 i‡––
li°EÀm
 = 
	`Li°FödIãm
(
˛õ¡
->
öboundMsgs
, &(
m
->
msgid
), 
mesßgeIDCom∑ª
ËË!
NULL
 )

292 
Mesßges
* 
msg
 = (Mesßges*)(
li°EÀm
->
c⁄ã¡
);

293 
	`MQTTPrŸocﬁ_ªmovePubliˇti⁄
(
msg
->
publish
);

294 
	`Li°In£π
(
˛õ¡
->
öboundMsgs
, 
m
, (
Mesßges
Ë+ 
Àn
, 
li°EÀm
);

295 
	`Li°Remove
(
˛õ¡
->
öboundMsgs
, 
msg
);

297 
	`Li°Aµíd
(
˛õ¡
->
öboundMsgs
, 
m
, (
Mesßges
Ë+ 
Àn
);

298 
rc
 = 
	`MQTTPackë_£nd_pubªc
(
publish
->
msgId
, &
˛õ¡
->
√t
, clõ¡->
˛õ¡ID
);

299 
publish
->
t›ic
 = 
NULL
;

301 
	`MQTTPackë_‰ìPublish
(
publish
);

302 
	`FUNC_EXIT_RC
(
rc
);

303  
rc
;

304 
	}
}

312 
	$MQTTPrŸocﬁ_h™dÀPubacks
(* 
∑ck
, 
sock
)

314 
Puback
* 
puback
 = (Puback*)
∑ck
;

315 
Clõ¡s
* 
˛õ¡
 = 
NULL
;

316 
rc
 = 
TCPSOCKET_COMPLETE
;

318 
FUNC_ENTRY
;

319 
˛õ¡
 = (
Clõ¡s
*)(
	`Li°FödIãm
(
b°©e
->
˛õ¡s
, &
sock
, 
˛õ¡SockëCom∑ª
)->
c⁄ã¡
);

320 
	`Log
(
LOG_PROTOCOL
, 14, 
NULL
, 
sock
, 
˛õ¡
->
˛õ¡ID
, 
puback
->
msgId
);

323 i‡(
	`Li°FödIãm
(
˛õ¡
->
outboundMsgs
, &(
puback
->
msgId
), 
mesßgeIDCom∑ª
Ë=
NULL
)

324 
	`Log
(
TRACE_MIN
, 3, 
NULL
, "PUBACK", 
˛õ¡
->
˛õ¡ID
, 
puback
->
msgId
);

327 
Mesßges
* 
m
 = (Mesßges*)(
˛õ¡
->
outboundMsgs
->
cuºít
->
c⁄ã¡
);

328 i‡(
m
->
qos
 != 1)

329 
	`Log
(
TRACE_MIN
, 4, 
NULL
, "PUBACK", 
˛õ¡
->
˛õ¡ID
, 
puback
->
msgId
, 
m
->
qos
);

332 
	`Log
(
TRACE_MIN
, 6, 
NULL
, "PUBACK", 
˛õ¡
->
˛õ¡ID
, 
puback
->
msgId
);

333 #i‡!
	`deföed
(
NO_PERSISTENCE
)

334 
rc
 = 
	`MQTTPîsi°í˚_ªmove
(
˛õ¡
, 
PERSISTENCE_PUBLISH_SENT
, 
m
->
qos
, 
puback
->
msgId
);

336 
	`MQTTPrŸocﬁ_ªmovePubliˇti⁄
(
m
->
publish
);

337 
	`Li°Remove
(
˛õ¡
->
outboundMsgs
, 
m
);

340 
	`‰ì
(
∑ck
);

341 
	`FUNC_EXIT_RC
(
rc
);

342  
rc
;

343 
	}
}

352 
	$MQTTPrŸocﬁ_h™dÀPubªcs
(* 
∑ck
, 
sock
)

354 
Pubªc
* 
pubªc
 = (Pubªc*)
∑ck
;

355 
Clõ¡s
* 
˛õ¡
 = 
NULL
;

356 
rc
 = 
TCPSOCKET_COMPLETE
;

358 
FUNC_ENTRY
;

359 
˛õ¡
 = (
Clõ¡s
*)(
	`Li°FödIãm
(
b°©e
->
˛õ¡s
, &
sock
, 
˛õ¡SockëCom∑ª
)->
c⁄ã¡
);

360 
	`Log
(
LOG_PROTOCOL
, 15, 
NULL
, 
sock
, 
˛õ¡
->
˛õ¡ID
, 
pubªc
->
msgId
);

363 
˛õ¡
->
outboundMsgs
->
cuºít
 = 
NULL
;

364 i‡(
	`Li°FödIãm
(
˛õ¡
->
outboundMsgs
, &(
pubªc
->
msgId
), 
mesßgeIDCom∑ª
Ë=
NULL
)

366 i‡(
pubªc
->
hódî
.
bôs
.
dup
 == 0)

367 
	`Log
(
TRACE_MIN
, 3, 
NULL
, "PUBREC", 
˛õ¡
->
˛õ¡ID
, 
pubªc
->
msgId
);

371 
Mesßges
* 
m
 = (Mesßges*)(
˛õ¡
->
outboundMsgs
->
cuºít
->
c⁄ã¡
);

372 i‡(
m
->
qos
 != 2)

374 i‡(
pubªc
->
hódî
.
bôs
.
dup
 == 0)

375 
	`Log
(
TRACE_MIN
, 4, 
NULL
, "PUBREC", 
˛õ¡
->
˛õ¡ID
, 
pubªc
->
msgId
, 
m
->
qos
);

377 i‡(
m
->
√xtMesßgeTy≥
 !
PUBREC
)

379 i‡(
pubªc
->
hódî
.
bôs
.
dup
 == 0)

380 
	`Log
(
TRACE_MIN
, 5, 
NULL
, "PUBREC", 
˛õ¡
->
˛õ¡ID
, 
pubªc
->
msgId
);

384 
rc
 = 
	`MQTTPackë_£nd_pubªl
(
pubªc
->
msgId
, 0, &
˛õ¡
->
√t
, clõ¡->
˛õ¡ID
);

385 
m
->
√xtMesßgeTy≥
 = 
PUBCOMP
;

386 
	`time
(&(
m
->
œ°Touch
));

389 
	`‰ì
(
∑ck
);

390 
	`FUNC_EXIT_RC
(
rc
);

391  
rc
;

392 
	}
}

401 
	$MQTTPrŸocﬁ_h™dÀPubªls
(* 
∑ck
, 
sock
)

403 
Pubªl
* 
pubªl
 = (Pubªl*)
∑ck
;

404 
Clõ¡s
* 
˛õ¡
 = 
NULL
;

405 
rc
 = 
TCPSOCKET_COMPLETE
;

407 
FUNC_ENTRY
;

408 
˛õ¡
 = (
Clõ¡s
*)(
	`Li°FödIãm
(
b°©e
->
˛õ¡s
, &
sock
, 
˛õ¡SockëCom∑ª
)->
c⁄ã¡
);

409 
	`Log
(
LOG_PROTOCOL
, 17, 
NULL
, 
sock
, 
˛õ¡
->
˛õ¡ID
, 
pubªl
->
msgId
);

412 i‡(
	`Li°FödIãm
(
˛õ¡
->
öboundMsgs
, &(
pubªl
->
msgId
), 
mesßgeIDCom∑ª
Ë=
NULL
)

414 i‡(
pubªl
->
hódî
.
bôs
.
dup
 == 0)

415 
	`Log
(
TRACE_MIN
, 3, 
NULL
, "PUBREL", 
˛õ¡
->
˛õ¡ID
, 
pubªl
->
msgId
);

418 
rc
 = 
	`MQTTPackë_£nd_pubcomp
(
pubªl
->
msgId
, &
˛õ¡
->
√t
, clõ¡->
˛õ¡ID
);

422 
Mesßges
* 
m
 = (Mesßges*)(
˛õ¡
->
öboundMsgs
->
cuºít
->
c⁄ã¡
);

423 i‡(
m
->
qos
 != 2)

424 
	`Log
(
TRACE_MIN
, 4, 
NULL
, "PUBREL", 
˛õ¡
->
˛õ¡ID
, 
pubªl
->
msgId
, 
m
->
qos
);

425 i‡(
m
->
√xtMesßgeTy≥
 !
PUBREL
)

426 
	`Log
(
TRACE_MIN
, 5, 
NULL
, "PUBREL", 
˛õ¡
->
˛õ¡ID
, 
pubªl
->
msgId
);

429 
Publish
 
publish
;

432 
rc
 = 
	`MQTTPackë_£nd_pubcomp
(
pubªl
->
msgId
, &
˛õ¡
->
√t
, clõ¡->
˛õ¡ID
);

433 
publish
.
hódî
.
bôs
.
qos
 = 
m
->qos;

434 
publish
.
hódî
.
bôs
.
ªèö
 = 
m
->retain;

435 
publish
.
msgId
 = 
m
->
msgid
;

436 
publish
.
t›ic
 = 
m
->publish->topic;

437 
publish
.
t›i˛í
 = 
m
->publish->topiclen;

438 
publish
.
∑ylﬂd
 = 
m
->publish->payload;

439 
publish
.
∑ylﬂdÀn
 = 
m
->publish->payloadlen;

440 
	`PrŸocﬁ_¥o˚ssPubliˇti⁄
(&
publish
, 
˛õ¡
);

441 #i‡!
	`deföed
(
NO_PERSISTENCE
)

442 
rc
 +
	`MQTTPîsi°í˚_ªmove
(
˛õ¡
, 
PERSISTENCE_PUBLISH_RECEIVED
, 
m
->
qos
, 
pubªl
->
msgId
);

444 
	`Li°Remove
(&(
°©e
.
publiˇti⁄s
), 
m
->
publish
);

445 
	`Li°Remove
(
˛õ¡
->
öboundMsgs
, 
m
);

446 ++(
°©e
.
msgs_ª˚ived
);

449 
	`‰ì
(
∑ck
);

450 
	`FUNC_EXIT_RC
(
rc
);

451  
rc
;

452 
	}
}

461 
	$MQTTPrŸocﬁ_h™dÀPubcomps
(* 
∑ck
, 
sock
)

463 
Pubcomp
* 
pubcomp
 = (Pubcomp*)
∑ck
;

464 
Clõ¡s
* 
˛õ¡
 = 
NULL
;

465 
rc
 = 
TCPSOCKET_COMPLETE
;

467 
FUNC_ENTRY
;

468 
˛õ¡
 = (
Clõ¡s
*)(
	`Li°FödIãm
(
b°©e
->
˛õ¡s
, &
sock
, 
˛õ¡SockëCom∑ª
)->
c⁄ã¡
);

469 
	`Log
(
LOG_PROTOCOL
, 19, 
NULL
, 
sock
, 
˛õ¡
->
˛õ¡ID
, 
pubcomp
->
msgId
);

472 i‡(
	`Li°FödIãm
(
˛õ¡
->
outboundMsgs
, &(
pubcomp
->
msgId
), 
mesßgeIDCom∑ª
Ë=
NULL
)

474 i‡(
pubcomp
->
hódî
.
bôs
.
dup
 == 0)

475 
	`Log
(
TRACE_MIN
, 3, 
NULL
, "PUBCOMP", 
˛õ¡
->
˛õ¡ID
, 
pubcomp
->
msgId
);

479 
Mesßges
* 
m
 = (Mesßges*)(
˛õ¡
->
outboundMsgs
->
cuºít
->
c⁄ã¡
);

480 i‡(
m
->
qos
 != 2)

481 
	`Log
(
TRACE_MIN
, 4, 
NULL
, "PUBCOMP", 
˛õ¡
->
˛õ¡ID
, 
pubcomp
->
msgId
, 
m
->
qos
);

484 i‡(
m
->
√xtMesßgeTy≥
 !
PUBCOMP
)

485 
	`Log
(
TRACE_MIN
, 5, 
NULL
, "PUBCOMP", 
˛õ¡
->
˛õ¡ID
, 
pubcomp
->
msgId
);

488 
	`Log
(
TRACE_MIN
, 6, 
NULL
, "PUBCOMP", 
˛õ¡
->
˛õ¡ID
, 
pubcomp
->
msgId
);

489 #i‡!
	`deföed
(
NO_PERSISTENCE
)

490 
rc
 = 
	`MQTTPîsi°í˚_ªmove
(
˛õ¡
, 
PERSISTENCE_PUBLISH_SENT
, 
m
->
qos
, 
pubcomp
->
msgId
);

492 
	`MQTTPrŸocﬁ_ªmovePubliˇti⁄
(
m
->
publish
);

493 
	`Li°Remove
(
˛õ¡
->
outboundMsgs
, 
m
);

494 (++
°©e
.
msgs_£¡
);

498 
	`‰ì
(
∑ck
);

499 
	`FUNC_EXIT_RC
(
rc
);

500  
rc
;

501 
	}
}

508 
	$MQTTPrŸocﬁ_kì∑live
(
time_t
 
now
)

510 
Li°EÀmít
* 
cuºít
 = 
NULL
;

512 
FUNC_ENTRY
;

513 
	`Li°NextEÀmít
(
b°©e
->
˛õ¡s
, &
cuºít
);

514 
cuºít
)

516 
Clõ¡s
* 
˛õ¡
 = (Clõ¡s*)(
cuºít
->
c⁄ã¡
);

517 
	`Li°NextEÀmít
(
b°©e
->
˛õ¡s
, &
cuºít
);

518 i‡(
˛õ¡
->
c⁄√˘ed
 && clõ¡->
kìpAliveI¡îvÆ
 > 0 &&

519 (
	`dif·ime
(
now
, 
˛õ¡
->
√t
.
œ°Sít
Ë>˛õ¡->
kìpAliveI¡îvÆ
 ||

520 
	`dif·ime
(
now
, 
˛õ¡
->
√t
.
œ°Re˚ived
Ë>˛õ¡->
kìpAliveI¡îvÆ
))

522 i‡(
˛õ¡
->
pög_out°™dög
 == 0)

524 i‡(
	`Sockë_noPídögWrôes
(
˛õ¡
->
√t
.
sockë
))

526 i‡(
	`MQTTPackë_£nd_pögªq
(&
˛õ¡
->
√t
, clõ¡->
˛õ¡ID
Ë!
TCPSOCKET_COMPLETE
)

528 
	`Log
(
TRACE_PROTOCOL
, -1, "Eº‹ sídög PINGREQ f‹ clõ¡ %†⁄ sockë %d, disc⁄√˘ög", 
˛õ¡
->
˛õ¡ID
, clõ¡->
√t
.
sockë
);

529 
	`MQTTPrŸocﬁ_˛o£Sessi⁄
(
˛õ¡
, 1);

533 
˛õ¡
->
√t
.
œ°Sít
 = 
now
;

534 
˛õ¡
->
pög_out°™dög
 = 1;

540 
	`Log
(
TRACE_PROTOCOL
, -1, "PINGRESPÇŸÑe˚ived i¿kì∑livêöãrvÆ f‹ clõ¡ %†⁄ sockë %d, disc⁄√˘ög", 
˛õ¡
->
˛õ¡ID
, clõ¡->
√t
.
sockë
);

541 
	`MQTTPrŸocﬁ_˛o£Sessi⁄
(
˛õ¡
, 1);

545 
FUNC_EXIT
;

546 
	}
}

555 
	$MQTTPrŸocﬁ_ªåõs
(
time_t
 
now
, 
Clõ¡s
* 
˛õ¡
, 
ªg¨dÀss
)

557 
Li°EÀmít
* 
outcuºít
 = 
NULL
;

559 
FUNC_ENTRY
;

561 i‡(!
ªg¨dÀss
 && 
˛õ¡
->
ªåyI¡îvÆ
 <= 0)

562 
exô
;

564 
˛õ¡
 && 
	`Li°NextEÀmít
(˛õ¡->
outboundMsgs
, &
outcuºít
) &&

565 
˛õ¡
->
c⁄√˘ed
 && clõ¡->
good
 &&

566 
	`Sockë_noPídögWrôes
(
˛õ¡
->
√t
.
sockë
))

568 
Mesßges
* 
m
 = (Mesßges*)(
outcuºít
->
c⁄ã¡
);

569 i‡(
ªg¨dÀss
 || 
	`dif·ime
(
now
, 
m
->
œ°Touch
Ë> 
	`max
(
˛õ¡
->
ªåyI¡îvÆ
, 10))

571 i‡(
m
->
qos
 =1 || (m->qo†=2 && m->
√xtMesßgeTy≥
 =
PUBREC
))

573 
Publish
 
publish
;

574 
rc
;

576 
	`Log
(
TRACE_MIN
, 7, 
NULL
, "PUBLISH", 
˛õ¡
->
˛õ¡ID
, clõ¡->
√t
.
sockë
, 
m
->
msgid
);

577 
publish
.
msgId
 = 
m
->
msgid
;

578 
publish
.
t›ic
 = 
m
->publish->topic;

579 
publish
.
∑ylﬂd
 = 
m
->publish->payload;

580 
publish
.
∑ylﬂdÀn
 = 
m
->publish->payloadlen;

581 
rc
 = 
	`MQTTPackë_£nd_publish
(&
publish
, 1, 
m
->
qos
, m->
ªèö
, &
˛õ¡
->
√t
, clõ¡->
˛õ¡ID
);

582 i‡(
rc
 =
SOCKET_ERROR
)

584 
˛õ¡
->
good
 = 0;

585 
	`Log
(
TRACE_PROTOCOL
, 29, 
NULL
, 
˛õ¡
->
˛õ¡ID
, clõ¡->
√t
.
sockë
,

586 
	`Sockë_gë≥î
(
˛õ¡
->
√t
.
sockë
));

587 
	`MQTTPrŸocﬁ_˛o£Sessi⁄
(
˛õ¡
, 1);

588 
˛õ¡
 = 
NULL
;

592 i‡(
m
->
qos
 =0 && 
rc
 =
TCPSOCKET_INTERRUPTED
)

593 
	`MQTTPrŸocﬁ_°‹eQoS0
(
˛õ¡
, &
publish
);

594 
	`time
(&(
m
->
œ°Touch
));

597 i‡(
m
->
qos
 && m->
√xtMesßgeTy≥
 =
PUBCOMP
)

599 
	`Log
(
TRACE_MIN
, 7, 
NULL
, "PUBREL", 
˛õ¡
->
˛õ¡ID
, clõ¡->
√t
.
sockë
, 
m
->
msgid
);

600 i‡(
	`MQTTPackë_£nd_pubªl
(
m
->
msgid
, 0, &
˛õ¡
->
√t
, clõ¡->
˛õ¡ID
Ë!
TCPSOCKET_COMPLETE
)

602 
˛õ¡
->
good
 = 0;

603 
	`Log
(
TRACE_PROTOCOL
, 29, 
NULL
, 
˛õ¡
->
˛õ¡ID
, clõ¡->
√t
.
sockë
,

604 
	`Sockë_gë≥î
(
˛õ¡
->
√t
.
sockë
));

605 
	`MQTTPrŸocﬁ_˛o£Sessi⁄
(
˛õ¡
, 1);

606 
˛õ¡
 = 
NULL
;

609 
	`time
(&(
m
->
œ°Touch
));

614 
exô
:

615 
FUNC_EXIT
;

616 
	}
}

625 
	$MQTTPrŸocﬁ_ªåy
(
time_t
 
now
, 
doRëry
, 
ªg¨dÀss
)

627 
Li°EÀmít
* 
cuºít
 = 
NULL
;

629 
FUNC_ENTRY
;

630 
	`Li°NextEÀmít
(
b°©e
->
˛õ¡s
, &
cuºít
);

632 
cuºít
)

634 
Clõ¡s
* 
˛õ¡
 = (Clõ¡s*)(
cuºít
->
c⁄ã¡
);

635 
	`Li°NextEÀmít
(
b°©e
->
˛õ¡s
, &
cuºít
);

636 i‡(
˛õ¡
->
c⁄√˘ed
 == 0)

638 i‡(
˛õ¡
->
good
 == 0)

640 
	`MQTTPrŸocﬁ_˛o£Sessi⁄
(
˛õ¡
, 1);

643 i‡(
	`Sockë_noPídögWrôes
(
˛õ¡
->
√t
.
sockë
) == 0)

645 i‡(
doRëry
)

646 
	`MQTTPrŸocﬁ_ªåõs
(
now
, 
˛õ¡
, 
ªg¨dÀss
);

648 
FUNC_EXIT
;

649 
	}
}

656 
	$MQTTPrŸocﬁ_‰ìClõ¡
(
Clõ¡s
* 
˛õ¡
)

658 
FUNC_ENTRY
;

660 
	`MQTTPrŸocﬁ_‰ìMesßgeLi°
(
˛õ¡
->
outboundMsgs
);

661 
	`MQTTPrŸocﬁ_‰ìMesßgeLi°
(
˛õ¡
->
öboundMsgs
);

662 
	`Li°Fªe
(
˛õ¡
->
mesßgeQueue
);

663 
	`‰ì
(
˛õ¡
->
˛õ¡ID
);

664 i‡(
˛õ¡
->
wûl
)

666 
	`‰ì
(
˛õ¡
->
wûl
->
msg
);

667 
	`‰ì
(
˛õ¡
->
wûl
->
t›ic
);

668 
	`‰ì
(
˛õ¡
->
wûl
);

670 #i‡
	`deföed
(
OPENSSL
)

671 i‡(
˛õ¡
->
s¶›ts
)

673 i‡(
˛õ¡
->
s¶›ts
->
åu°St‹e
)

674 
	`‰ì
((*)
˛õ¡
->
s¶›ts
->
åu°St‹e
);

675 i‡(
˛õ¡
->
s¶›ts
->
keySt‹e
)

676 
	`‰ì
((*)
˛õ¡
->
s¶›ts
->
keySt‹e
);

677 i‡(
˛õ¡
->
s¶›ts
->
¥iv©eKey
)

678 
	`‰ì
((*)
˛õ¡
->
s¶›ts
->
¥iv©eKey
);

679 i‡(
˛õ¡
->
s¶›ts
->
¥iv©eKeyPassw‹d
)

680 
	`‰ì
((*)
˛õ¡
->
s¶›ts
->
¥iv©eKeyPassw‹d
);

681 i‡(
˛õ¡
->
s¶›ts
->
íabÀdCùhîSuôes
)

682 
	`‰ì
((*)
˛õ¡
->
s¶›ts
->
íabÀdCùhîSuôes
);

683 
	`‰ì
(
˛õ¡
->
s¶›ts
);

687 
FUNC_EXIT
;

688 
	}
}

695 
	$MQTTPrŸocﬁ_em±yMesßgeLi°
(
Li°
* 
msgLi°
)

697 
Li°EÀmít
* 
cuºít
 = 
NULL
;

699 
FUNC_ENTRY
;

700 
	`Li°NextEÀmít
(
msgLi°
, &
cuºít
))

702 
Mesßges
* 
m
 = (Mesßges*)(
cuºít
->
c⁄ã¡
);

703 
	`MQTTPrŸocﬁ_ªmovePubliˇti⁄
(
m
->
publish
);

705 
	`Li°Em±y
(
msgLi°
);

706 
FUNC_EXIT
;

707 
	}
}

714 
	$MQTTPrŸocﬁ_‰ìMesßgeLi°
(
Li°
* 
msgLi°
)

716 
FUNC_ENTRY
;

717 
	`MQTTPrŸocﬁ_em±yMesßgeLi°
(
msgLi°
);

718 
	`Li°Fªe
(
msgLi°
);

719 
FUNC_EXIT
;

720 
	}
}

731 * 
	$MQTTSån˝y
(*
de°
, c⁄° *
§c
, 
size_t
 
de°_size
)

733 
size_t
 
cou¡
 = 
de°_size
;

734 *
ãmp
 = 
de°
;

736 
FUNC_ENTRY
;

737 i‡(
de°_size
 < 
	`°æí
(
§c
))

738 
	`Log
(
TRACE_MIN
, -1, "the src string isÅruncated");

741 
cou¡
 > 1 && (*
ãmp
++ = *
§c
++))

742 
cou¡
--;

744 *
ãmp
 = '\0';

746 
FUNC_EXIT
;

747  
de°
;

748 
	}
}

756 * 
	$MQTTSådup
(c⁄° * 
§c
)

758 
size_t
 
mÀn
 = 
	`°æí
(
§c
) + 1;

759 * 
ãmp
 = 
	`mÆloc
(
mÀn
);

760 
	`MQTTSån˝y
(
ãmp
, 
§c
, 
mÀn
);

761  
ãmp
;

762 
	}
}

	@paho-c/src/MQTTProtocolClient.h

20 #i‡!
deföed
(
MQTTPROTOCOLCLIENT_H
)

21 
	#MQTTPROTOCOLCLIENT_H


	)

23 
	~"LökedLi°.h
"

24 
	~"MQTTPackë.h
"

25 
	~"Log.h
"

26 
	~"MQTTPrŸocﬁ.h
"

27 
	~"Mesßges.h
"

29 
	#MAX_MSG_ID
 65535

	)

30 
	#MAX_CLIENTID_LEN
 65535

	)

32 
MQTTPrŸocﬁ_°¨tPublish
(
Clõ¡s
* 
pub˛õ¡
, 
Publish
* 
publish
, 
qos
, 
ªèöed
, 
Mesßges
** 
m
);

33 
Mesßges
* 
MQTTPrŸocﬁ_¸óãMesßge
(
Publish
* 
publish
, Mesßges** 
mm
, 
qos
, 
ªèöed
);

34 
Publiˇti⁄s
* 
MQTTPrŸocﬁ_°‹ePubliˇti⁄
(
Publish
* 
publish
, * 
Àn
);

35 
mesßgeIDCom∑ª
(* 
a
, * 
b
);

36 
MQTTPrŸocﬁ_assignMsgId
(
Clõ¡s
* 
˛õ¡
);

37 
MQTTPrŸocﬁ_ªmovePubliˇti⁄
(
Publiˇti⁄s
* 
p
);

39 
MQTTPrŸocﬁ_h™dÀPublishes
(* 
∑ck
, 
sock
);

40 
MQTTPrŸocﬁ_h™dÀPubacks
(* 
∑ck
, 
sock
);

41 
MQTTPrŸocﬁ_h™dÀPubªcs
(* 
∑ck
, 
sock
);

42 
MQTTPrŸocﬁ_h™dÀPubªls
(* 
∑ck
, 
sock
);

43 
MQTTPrŸocﬁ_h™dÀPubcomps
(* 
∑ck
, 
sock
);

45 
MQTTPrŸocﬁ_kì∑live
(
time_t
);

46 
MQTTPrŸocﬁ_ªåy
(
time_t
, , );

47 
MQTTPrŸocﬁ_‰ìClõ¡
(
Clõ¡s
* 
˛õ¡
);

48 
MQTTPrŸocﬁ_em±yMesßgeLi°
(
Li°
* 
msgLi°
);

49 
MQTTPrŸocﬁ_‰ìMesßgeLi°
(
Li°
* 
msgLi°
);

51 * 
MQTTSån˝y
(*
de°
, c⁄° * 
§c
, 
size_t
 
num
);

52 * 
MQTTSådup
(c⁄° * 
§c
);

	@paho-c/src/MQTTProtocolOut.c

28 
	~<°dlib.h
>

30 
	~"MQTTPrŸocﬁOut.h
"

31 
	~"SèckTø˚.h
"

32 
	~"Hóp.h
"

34 
MQTTPrŸocﬁ
 
°©e
;

35 
Clõ¡Sèãs
* 
b°©e
;

44 * 
	$MQTTPrŸocﬁ_addªssP‹t
(c⁄° * 
uri
, * 
p‹t
)

46 * 
cﬁ⁄_pos
 = 
	`°ºchr
(
uri
, ':');

47 * 
buf
 = (*)
uri
;

48 
Àn
;

50 
FUNC_ENTRY
;

51 i‡(
uri
[0] == '[')

53 i‡(
cﬁ⁄_pos
 < 
	`°ºchr
(
uri
, ']'))

54 
cﬁ⁄_pos
 = 
NULL
;

57 i‡(
cﬁ⁄_pos
)

59 
addr_Àn
 = 
cﬁ⁄_pos
 - 
uri
;

60 
buf
 = 
	`mÆloc
(
addr_Àn
 + 1);

61 *
p‹t
 = 
	`©oi
(
cﬁ⁄_pos
 + 1);

62 
	`MQTTSån˝y
(
buf
, 
uri
, 
addr_Àn
+1);

65 *
p‹t
 = 
DEFAULT_PORT
;

67 
Àn
 = 
	`°æí
(
buf
);

68 i‡(
buf
[
Àn
 - 1] == ']')

69 
buf
[
Àn
 - 1] = '\0';

71 
FUNC_EXIT
;

72  
buf
;

73 
	}
}

84 #i‡
deföed
(
OPENSSL
)

85 
	$MQTTPrŸocﬁ_c⁄√˘
(c⁄° * 
ù_addªss
, 
Clõ¡s
* 
aClõ¡
, 
s¶
, 
MQTTVîsi⁄
)

87 
	$MQTTPrŸocﬁ_c⁄√˘
(c⁄° * 
ù_addªss
, 
Clõ¡s
* 
aClõ¡
, 
MQTTVîsi⁄
)

90 
rc
, 
p‹t
;

91 * 
addr
;

93 
FUNC_ENTRY
;

94 
aClõ¡
->
good
 = 1;

96 
addr
 = 
	`MQTTPrŸocﬁ_addªssP‹t
(
ù_addªss
, &
p‹t
);

97 
rc
 = 
	`Sockë_√w
(
addr
, 
p‹t
, &(
aClõ¡
->
√t
.
sockë
));

98 i‡(
rc
 =
EINPROGRESS
 ||Ñ¯=
EWOULDBLOCK
)

99 
aClõ¡
->
c⁄√˘_°©e
 = 1;

100 i‡(
rc
 == 0)

102 #i‡
	`deföed
(
OPENSSL
)

103 i‡(
s¶
)

105 i‡(
	`SSLSockë_£tSockëF‹SSL
(&
aClõ¡
->
√t
,áClõ¡->
s¶›ts
) != 1)

107 
rc
 = 
	`SSLSockë_c⁄√˘
(
aClõ¡
->
√t
.
s¶
,áClõ¡->√t.
sockë
);

108 i‡(
rc
 == -1)

109 
aClõ¡
->
c⁄√˘_°©e
 = 2;

112 
rc
 = 
SOCKET_ERROR
;

116 i‡(
rc
 == 0)

119 i‡((
rc
 = 
	`MQTTPackë_£nd_c⁄√˘
(
aClõ¡
, 
MQTTVîsi⁄
)) == 0)

120 
aClõ¡
->
c⁄√˘_°©e
 = 3;

122 
aClõ¡
->
c⁄√˘_°©e
 = 0;

125 i‡(
addr
 !
ù_addªss
)

126 
	`‰ì
(
addr
);

128 
	`FUNC_EXIT_RC
(
rc
);

129  
rc
;

130 
	}
}

139 
	$MQTTPrŸocﬁ_h™dÀPögª•s
(* 
∑ck
, 
sock
)

141 
Clõ¡s
* 
˛õ¡
 = 
NULL
;

142 
rc
 = 
TCPSOCKET_COMPLETE
;

144 
FUNC_ENTRY
;

145 
˛õ¡
 = (
Clõ¡s
*)(
	`Li°FödIãm
(
b°©e
->
˛õ¡s
, &
sock
, 
˛õ¡SockëCom∑ª
)->
c⁄ã¡
);

146 
	`Log
(
LOG_PROTOCOL
, 21, 
NULL
, 
sock
, 
˛õ¡
->
˛õ¡ID
);

147 
˛õ¡
->
pög_out°™dög
 = 0;

148 
	`FUNC_EXIT_RC
(
rc
);

149  
rc
;

150 
	}
}

160 
	$MQTTPrŸocﬁ_subs¸ibe
(
Clõ¡s
* 
˛õ¡
, 
Li°
* 
t›ics
, Li°* 
qoss
, 
msgID
)

162 
rc
 = 0;

164 
FUNC_ENTRY
;

166 
rc
 = 
	`MQTTPackë_£nd_subs¸ibe
(
t›ics
, 
qoss
, 
msgID
, 0, &
˛õ¡
->
√t
, clõ¡->
˛õ¡ID
);

167 
	`FUNC_EXIT_RC
(
rc
);

168  
rc
;

169 
	}
}

178 
	$MQTTPrŸocﬁ_h™dÀSubacks
(* 
∑ck
, 
sock
)

180 
Suback
* 
suback
 = (Suback*)
∑ck
;

181 
Clõ¡s
* 
˛õ¡
 = 
NULL
;

182 
rc
 = 
TCPSOCKET_COMPLETE
;

184 
FUNC_ENTRY
;

185 
˛õ¡
 = (
Clõ¡s
*)(
	`Li°FödIãm
(
b°©e
->
˛õ¡s
, &
sock
, 
˛õ¡SockëCom∑ª
)->
c⁄ã¡
);

186 
	`Log
(
LOG_PROTOCOL
, 23, 
NULL
, 
sock
, 
˛õ¡
->
˛õ¡ID
, 
suback
->
msgId
);

187 
	`MQTTPackë_‰ìSuback
(
suback
);

188 
	`FUNC_EXIT_RC
(
rc
);

189  
rc
;

190 
	}
}

199 
	$MQTTPrŸocﬁ_unsubs¸ibe
(
Clõ¡s
* 
˛õ¡
, 
Li°
* 
t›ics
, 
msgID
)

201 
rc
 = 0;

203 
FUNC_ENTRY
;

205 
rc
 = 
	`MQTTPackë_£nd_unsubs¸ibe
(
t›ics
, 
msgID
, 0, &
˛õ¡
->
√t
, clõ¡->
˛õ¡ID
);

206 
	`FUNC_EXIT_RC
(
rc
);

207  
rc
;

208 
	}
}

217 
	$MQTTPrŸocﬁ_h™dÀUnsubacks
(* 
∑ck
, 
sock
)

219 
Unsuback
* 
unsuback
 = (Unsuback*)
∑ck
;

220 
Clõ¡s
* 
˛õ¡
 = 
NULL
;

221 
rc
 = 
TCPSOCKET_COMPLETE
;

223 
FUNC_ENTRY
;

224 
˛õ¡
 = (
Clõ¡s
*)(
	`Li°FödIãm
(
b°©e
->
˛õ¡s
, &
sock
, 
˛õ¡SockëCom∑ª
)->
c⁄ã¡
);

225 
	`Log
(
LOG_PROTOCOL
, 24, 
NULL
, 
sock
, 
˛õ¡
->
˛õ¡ID
, 
unsuback
->
msgId
);

226 
	`‰ì
(
unsuback
);

227 
	`FUNC_EXIT_RC
(
rc
);

228  
rc
;

229 
	}
}

	@paho-c/src/MQTTProtocolOut.h

19 #i‡!
deföed
(
MQTTPROTOCOLOUT_H
)

20 
	#MQTTPROTOCOLOUT_H


	)

22 
	~"LökedLi°.h
"

23 
	~"MQTTPackë.h
"

24 
	~"Clõ¡s.h
"

25 
	~"Log.h
"

26 
	~"Mesßges.h
"

27 
	~"MQTTPrŸocﬁ.h
"

28 
	~"MQTTPrŸocﬁClõ¡.h
"

30 
	#DEFAULT_PORT
 1883

	)

32 
MQTTPrŸocﬁ_ªc⁄√˘
(c⁄° * 
ù_addªss
, 
Clõ¡s
* 
˛õ¡
);

33 #i‡
deföed
(
OPENSSL
)

34 
MQTTPrŸocﬁ_c⁄√˘
(c⁄° * 
ù_addªss
, 
Clõ¡s
* 
acClõ¡s
, 
s¶
, 
MQTTVîsi⁄
);

36 
MQTTPrŸocﬁ_c⁄√˘
(c⁄° * 
ù_addªss
, 
Clõ¡s
* 
acClõ¡s
, 
MQTTVîsi⁄
);

38 
MQTTPrŸocﬁ_h™dÀPögª•s
(* 
∑ck
, 
sock
);

39 
MQTTPrŸocﬁ_subs¸ibe
(
Clõ¡s
* 
˛õ¡
, 
Li°
* 
t›ics
, Li°* 
qoss
, 
msgID
);

40 
MQTTPrŸocﬁ_h™dÀSubacks
(* 
∑ck
, 
sock
);

41 
MQTTPrŸocﬁ_unsubs¸ibe
(
Clõ¡s
* 
˛õ¡
, 
Li°
* 
t›ics
, 
msgID
);

42 
MQTTPrŸocﬁ_h™dÀUnsubacks
(* 
∑ck
, 
sock
);

	@paho-c/src/MQTTVersion.c

17 
	~<°dio.h
>

18 
	~<°dlib.h
>

19 
	~<°rög.h
>

20 
	~<î∫o.h
>

21 
	~<f˙é.h
>

22 
	~<sys/ty≥s.h
>

23 
	~<mem‹y.h
>

24 
	~<˘y≥.h
>

25 
	~"MQTTAsync.h
"

27 #i‡
deföed
(
WIN32
Ë|| deföed(
WIN64
)

28 
	~<wödows.h
>

29 
	~<tch¨.h
>

30 
	~<io.h
>

31 
	~<sys/°©.h
>

33 
	~<dlf˙.h
>

34 
	~<sys/mm™.h
>

35 
	~<uni°d.h
>

54 * 
	glibørõs
[] = {"paho-mqtt3c", "paho-mqtt3cs", "paho-mqtt3a", "paho-mqtt3as"};

55 * 
	geyeˇtchîs
[] = {"MQTTAsyncV3_Version", "MQTTAsyncV3_Timestamp",

65 * 
	$FödSåög
(* 
fûíame
, * 
eyeˇtchî_öput
)

67 
FILE
* 
öfûe
 = 
NULL
;

68 
vÆue
[100];

69 * 
eyeˇtchî
 = 
eyeˇtchî_öput
;

71 
	`mem£t
(
vÆue
, 0, 100);

72 i‡((
öfûe
 = 
	`f›í
(
fûíame
, "rb")Ë!
NULL
)

74 
buÊí
 = 
	`°æí
(
eyeˇtchî
);

75 * 
buf„r
 = (*Ë
	`mÆloc
(
buÊí
);

76 
cou¡
 = 0;

77 
c
 = 
	`fgëc
(
öfûe
);

79 
	`„of
(
öfûe
) == 0)

81 
buf„r
[
cou¡
++] = 
c
;

82 i‡(
	`memcmp
(
eyeˇtchî
, 
buf„r
, 
buÊí
) == 0)

84 * 
±r
 = 
vÆue
;

85 
c
 = 
	`fgëc
(
öfûe
);

86 
c
 = 
	`fgëc
(
öfûe
);

87 
	`i•röt
(
c
))

89 *
±r
++ = 
c
;

90 
c
 = 
	`fgëc
(
öfûe
);

94 i‡(
cou¡
 =
buÊí
)

96 
	`memmove
(
buf„r
, &buf„r[1], 
buÊí
 - 1);

97 
cou¡
--;

99 
c
 = 
	`fgëc
(
öfûe
);

101 
	`‰ì
(
buf„r
);

103  
vÆue
;

104 
	}
}

107 
	$¥ötVîsi⁄Info
(
MQTTAsync_«meVÆue
* 
öfo
)

109 
rc
 = 0;

111 
öfo
->
«me
)

113 
	`¥ötf
("%s: %s\n", 
öfo
->
«me
, info->
vÆue
);

114 
öfo
++;

115 
rc
 = 1;

117  
rc
;

118 
	}
}

120 
	gMQTTAsync_«meVÆue
* (*
	tfunc_ty≥
)();

122 
	$lﬂd™dˇŒ
(* 
lib«me
)

124 
rc
 = 0;

125 
MQTTAsync_«meVÆue
* (*
func_addªss
)(Ë
NULL
;

126 #i‡
	`deföed
(
WIN32
Ë|| deföed(
WIN64
)

127 
wch¨_t
 
wlib«me
[30];

128 
HMODULE
 
APILibøry
;

130 
	`mb°owcs
(
wlib«me
, 
lib«me
, 
	`°æí
(libname) + 1);

131 i‡((
APILibøry
 = 
	`LﬂdLibøry
(
wlib«me
)Ë=
NULL
)

132 
	`¥ötf
("Eº‹ÜﬂdögÜibøry %s,Éº‹ codê%d\n", 
lib«me
, 
	`GëLa°Eº‹
());

135 
func_addªss
 = (
func_ty≥
)
	`GëProcAddªss
(
APILibøry
, "MQTTAsync_getVersionInfo");

136 i‡(
func_addªss
 =
NULL
)

137 
func_addªss
 = (
func_ty≥
)
	`GëProcAddªss
(
APILibøry
, "MQTTClient_getVersionInfo");

138 i‡(
func_addªss
)

139 
rc
 = 
	`¥ötVîsi⁄Info
((*
func_addªss
)());

140 
	`FªeLibøry
(
APILibøry
);

143 * 
APILibøry
 = 
	`dl›í
(
lib«me
, 
RTLD_LAZY
);

144 * 
Eº‹Ouçut
 = 
	`dÀº‹
();

145 i‡(
Eº‹Ouçut
 !
NULL
)

146 
	`¥ötf
("Eº‹ÜﬂdögÜibøry %s,Éº‹ %s\n", 
lib«me
, 
Eº‹Ouçut
);

149 *(**Ë(&
func_addªss
Ë
	`dlsym
(
APILibøry
, "MQTTAsync_getVersionInfo");

150 i‡(
func_addªss
 =
NULL
)

151 
func_addªss
 = 
	`dlsym
(
APILibøry
, "MQTTClient_getVersionInfo");

152 i‡(
func_addªss
)

153 
rc
 = 
	`¥ötVîsi⁄Info
((*
func_addªss
)());

154 
	`dl˛o£
(
APILibøry
);

157  
rc
;

158 
	}
}

161 #i‡!
deföed
(
ARRAY_SIZE
)

162 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ ◊[0]))

	)

165 
	$¥ötEyeˇtchîs
(* 
fûíame
)

167 
i
 = 0;

169 
i
 = 0; i < 
	`ARRAY_SIZE
(
eyeˇtchîs
); ++i)

171 * 
vÆue
 = 
	`FödSåög
(
fûíame
, 
eyeˇtchîs
[
i
]);

172 i‡(
vÆue
[0])

173 
	`¥ötf
("%s: %s\n", 
eyeˇtchîs
[
i
], 
vÆue
);

175 
	}
}

178 
	$maö
(
¨gc
, ** 
¨gv
)

180 
	`¥ötf
("MQTTVersion:ÖrintÅhe version strings ofán MQTT clientÜibrary\n");

181 
	`¥ötf
("Copyright (c) 2012, 2015 IBM Corp.\n");

183 i‡(
¨gc
 == 1)

185 
i
 = 0;

186 
«mebuf
[60];

188 
	`¥ötf
("SpecifyáÖarticularÜibraryÇame if it isÇot inÅhe current directory, orÇotÉxecutable onÅhisÖlatform\n");

190 
i
 = 0; i < 
	`ARRAY_SIZE
(
libørõs
); ++i)

192 #i‡
	`deföed
(
WIN32
Ë|| deföed(
WIN64
)

193 
	`•rötf
(
«mebuf
, "%s.dŒ", 
libørõs
[
i
]);

195 
	`•rötf
(
«mebuf
, "lib%s.so.1", 
libørõs
[
i
]);

197 
	`¥ötf
("--- TryögÜibøry %†---\n", 
libørõs
[
i
]);

198 i‡(!
	`lﬂd™dˇŒ
(
«mebuf
))

199 
	`¥ötEyeˇtchîs
(
«mebuf
);

204 i‡(!
	`lﬂd™dˇŒ
(
¨gv
[1]))

205 
	`¥ötEyeˇtchîs
(
¨gv
[1]);

209 
	}
}

	@paho-c/src/Messages.c

24 
	~"Mesßges.h
"

25 
	~"Log.h
"

27 
	~<°dio.h
>

28 
	~<°dlib.h
>

29 
	~<mem‹y.h
>

30 
	~<°rög.h
>

32 
	~"Hóp.h
"

34 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ ◊[0]))

	)

36 
	#max_msg_Àn
 120

	)

38 * 
	g¥Ÿocﬁ_mesßge_li°
[] =

72 * 
	gåa˚_mesßge_li°
[] =

95 * 
	$Mesßges_gë
(
ödex
, 
log_Àvñ
)

97 * 
msg
 = 
NULL
;

99 i‡(
log_Àvñ
 =
TRACE_PROTOCOL
)

100 
msg
 = (
ödex
 >0 && index < 
	`ARRAY_SIZE
(
¥Ÿocﬁ_mesßge_li°
)Ë?ÖrŸocﬁ_mesßge_li°[ödex] : 
NULL
;

102 
msg
 = (
ödex
 >0 && index < 
	`ARRAY_SIZE
(
åa˚_mesßge_li°
)Ë?Åø˚_mesßge_li°[ödex] : 
NULL
;

103  
msg
;

104 
	}
}

	@paho-c/src/Messages.h

17 #i‡!
deföed
(
MESSAGES_H
)

18 
	#MESSAGES_H


	)

20 * 
Mesßges_gë
(, );

	@paho-c/src/SSLSocket.c

25 #i‡
deföed
(
OPENSSL
)

27 
	~"SockëBuf„r.h
"

28 
	~"MQTTClõ¡.h
"

29 
	~"SSLSockë.h
"

30 
	~"Log.h
"

31 
	~"SèckTø˚.h
"

32 
	~"Sockë.h
"

34 
	~"Hóp.h
"

36 
	~<›ís¶/s¶.h
>

37 
	~<›ís¶/îr.h
>

38 
	~<›ís¶/¸y±o.h
>

40 
Sockës
 
s
;

42 
SSLSockë_addPídögRód
(
sock
);

44 
s¶_muãx_ty≥
* 
	gs¶Locks
 = 
NULL
;

45 
s¶_muãx_ty≥
 
	gs¶C‹eMuãx
;

47 #i‡
deföed
(
WIN32
Ë|| deföed(
WIN64
)

48 
	#iov_Àn
 
Àn


	)

49 
	#iov_ba£
 
buf


	)

58 
	$SSLSockë_îr‹
(* 
aSåög
, 
SSL
* 
s¶
, 
sock
, 
rc
)

60 
îr‹
;

62 
FUNC_ENTRY
;

63 i‡(
s¶
)

64 
îr‹
 = 
	`SSL_gë_îr‹
(
s¶
, 
rc
);

66 
îr‹
 = 
	`ERR_gë_îr‹
();

67 i‡(
îr‹
 =
SSL_ERROR_WANT_READ
 ||Éº‹ =
SSL_ERROR_WANT_WRITE
)

69 
	`Log
(
TRACE_MIN
, -1, "SSLSocketÉrror WANT_READ/WANT_WRITE");

73 
buf
[120];

75 i‡(
	`°rcmp
(
aSåög
, "shutdown") != 0)

76 
	`Log
(
TRACE_MIN
, -1, "SSLSockëÉº‹ %s(%dËö %†f‹ sockë %dÑ¯%dÉºnÿ%d %s\n", 
buf
, 
îr‹
, 
aSåög
, 
sock
, 
rc
, 
î∫o
, 
	`°ªº‹
(errno));

77 
	`ERR_¥öt_îr‹s_Â
(
°dîr
);

78 i‡(
îr‹
 =
SSL_ERROR_SSL
 ||Éº‹ =
SSL_ERROR_SYSCALL
)

79 
îr‹
 = 
SSL_FATAL
;

81 
	`FUNC_EXIT_RC
(
îr‹
);

82  
îr‹
;

83 
	}
}

87 
	mcode
;

88 * 
	m°rög
;

90 
	gX509_mesßge_èbÀ
[] =

92 { 
X509_V_OK
, "X509_V_OK" },

93 { 
X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT
, "X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT" },

94 { 
X509_V_ERR_UNABLE_TO_GET_CRL
, "X509_V_ERR_UNABLE_TO_GET_CRL" },

95 { 
X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE
, "X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE" },

96 { 
X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE
, "X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE" },

97 { 
X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY
, "X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY" },

98 { 
X509_V_ERR_CERT_SIGNATURE_FAILURE
, "X509_V_ERR_CERT_SIGNATURE_FAILURE" },

99 { 
X509_V_ERR_CRL_SIGNATURE_FAILURE
, "X509_V_ERR_CRL_SIGNATURE_FAILURE" },

100 { 
X509_V_ERR_CERT_NOT_YET_VALID
, "X509_V_ERR_CERT_NOT_YET_VALID" },

101 { 
X509_V_ERR_CERT_HAS_EXPIRED
, "X509_V_ERR_CERT_HAS_EXPIRED" },

102 { 
X509_V_ERR_CRL_NOT_YET_VALID
, "X509_V_ERR_CRL_NOT_YET_VALID" },

103 { 
X509_V_ERR_CRL_HAS_EXPIRED
, "X509_V_ERR_CRL_HAS_EXPIRED" },

104 { 
X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD
, "X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD" },

105 { 
X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD
, "X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD" },

106 { 
X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD
, "X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD" },

107 { 
X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD
, "X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD" },

108 { 
X509_V_ERR_OUT_OF_MEM
, "X509_V_ERR_OUT_OF_MEM" },

109 { 
X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT
, "X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT" },

110 { 
X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN
, "X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN" },

111 { 
X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY
, "X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY" },

112 { 
X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE
, "X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE" },

113 { 
X509_V_ERR_CERT_CHAIN_TOO_LONG
, "X509_V_ERR_CERT_CHAIN_TOO_LONG" },

114 { 
X509_V_ERR_CERT_REVOKED
, "X509_V_ERR_CERT_REVOKED" },

115 { 
X509_V_ERR_INVALID_CA
, "X509_V_ERR_INVALID_CA" },

116 { 
X509_V_ERR_PATH_LENGTH_EXCEEDED
, "X509_V_ERR_PATH_LENGTH_EXCEEDED" },

117 { 
X509_V_ERR_INVALID_PURPOSE
, "X509_V_ERR_INVALID_PURPOSE" },

118 { 
X509_V_ERR_CERT_UNTRUSTED
, "X509_V_ERR_CERT_UNTRUSTED" },

119 { 
X509_V_ERR_CERT_REJECTED
, "X509_V_ERR_CERT_REJECTED" },

120 { 
X509_V_ERR_SUBJECT_ISSUER_MISMATCH
, "X509_V_ERR_SUBJECT_ISSUER_MISMATCH" },

121 { 
X509_V_ERR_AKID_SKID_MISMATCH
, "X509_V_ERR_AKID_SKID_MISMATCH" },

122 { 
X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH
, "X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH" },

123 { 
X509_V_ERR_KEYUSAGE_NO_CERTSIGN
, "X509_V_ERR_KEYUSAGE_NO_CERTSIGN" },

124 { 
X509_V_ERR_UNABLE_TO_GET_CRL_ISSUER
, "X509_V_ERR_UNABLE_TO_GET_CRL_ISSUER" },

125 { 
X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION
, "X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION" },

126 { 
X509_V_ERR_KEYUSAGE_NO_CRL_SIGN
, "X509_V_ERR_KEYUSAGE_NO_CRL_SIGN" },

127 { 
X509_V_ERR_UNHANDLED_CRITICAL_CRL_EXTENSION
, "X509_V_ERR_UNHANDLED_CRITICAL_CRL_EXTENSION" },

128 { 
X509_V_ERR_INVALID_NON_CA
, "X509_V_ERR_INVALID_NON_CA" },

129 { 
X509_V_ERR_PROXY_PATH_LENGTH_EXCEEDED
, "X509_V_ERR_PROXY_PATH_LENGTH_EXCEEDED" },

130 { 
X509_V_ERR_KEYUSAGE_NO_DIGITAL_SIGNATURE
, "X509_V_ERR_KEYUSAGE_NO_DIGITAL_SIGNATURE" },

131 { 
X509_V_ERR_PROXY_CERTIFICATES_NOT_ALLOWED
, "X509_V_ERR_PROXY_CERTIFICATES_NOT_ALLOWED" },

132 { 
X509_V_ERR_INVALID_EXTENSION
, "X509_V_ERR_INVALID_EXTENSION" },

133 { 
X509_V_ERR_INVALID_POLICY_EXTENSION
, "X509_V_ERR_INVALID_POLICY_EXTENSION" },

134 { 
X509_V_ERR_NO_EXPLICIT_POLICY
, "X509_V_ERR_NO_EXPLICIT_POLICY" },

135 { 
X509_V_ERR_UNNESTED_RESOURCE
, "X509_V_ERR_UNNESTED_RESOURCE" },

136 #i‡
deföed
(
X509_V_ERR_DIFFERENT_CRL_SCOPE
)

137 { 
X509_V_ERR_DIFFERENT_CRL_SCOPE
, "X509_V_ERR_DIFFERENT_CRL_SCOPE" },

138 { 
X509_V_ERR_UNSUPPORTED_EXTENSION_FEATURE
, "X509_V_ERR_UNSUPPORTED_EXTENSION_FEATURE" },

139 { 
X509_V_ERR_PERMITTED_VIOLATION
, "X509_V_ERR_PERMITTED_VIOLATION" },

140 { 
X509_V_ERR_EXCLUDED_VIOLATION
, "X509_V_ERR_EXCLUDED_VIOLATION" },

141 { 
X509_V_ERR_SUBTREE_MINMAX
, "X509_V_ERR_SUBTREE_MINMAX" },

142 { 
X509_V_ERR_UNSUPPORTED_CONSTRAINT_TYPE
, "X509_V_ERR_UNSUPPORTED_CONSTRAINT_TYPE" },

143 { 
X509_V_ERR_UNSUPPORTED_CONSTRAINT_SYNTAX
, "X509_V_ERR_UNSUPPORTED_CONSTRAINT_SYNTAX" },

144 { 
X509_V_ERR_UNSUPPORTED_NAME_SYNTAX
, "X509_V_ERR_UNSUPPORTED_NAME_SYNTAX" },

148 #i‡!
deföed
(
ARRAY_SIZE
)

152 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ ◊[0]))

	)

155 * 
	$SSL_gë_vîify_ªsu…_°rög
(
rc
)

157 
i
;

158 * 
ªt°rög
 = "undef";

160 
i
 = 0; i < 
	`ARRAY_SIZE
(
X509_mesßge_èbÀ
); ++i)

162 i‡(
X509_mesßge_èbÀ
[
i
].
code
 =
rc
)

164 
ªt°rög
 = 
X509_mesßge_èbÀ
[
i
].
°rög
;

168  
ªt°rög
;

169 
	}
}

172 
	$SSL_CTX_öfo_ˇŒback
(c⁄° 
SSL
* 
s¶
, 
whîe
, 
ªt
)

174 i‡(
whîe
 & 
SSL_CB_LOOP
)

176 
	`Log
(
TRACE_PROTOCOL
, 1, "SSL state %s:%s:%s",

177 (
whîe
 & 
SSL_ST_CONNECT
Ë? "c⁄√˘" : (whîê& 
SSL_ST_ACCEPT
) ? "accept" : "undef",

178 
	`SSL_°©e_°rög_l⁄g
(
s¶
), 
	`SSL_gë_cùhî_«me
(ssl));

180 i‡(
whîe
 & 
SSL_CB_EXIT
)

182 
	`Log
(
TRACE_PROTOCOL
, 1, "SSL %s:%s",

183 (
whîe
 & 
SSL_ST_CONNECT
Ë? "c⁄√˘" : (whîê& 
SSL_ST_ACCEPT
) ? "accept" : "undef",

184 
	`SSL_°©e_°rög_l⁄g
(
s¶
));

186 i‡(
whîe
 & 
SSL_CB_ALERT
)

188 
	`Log
(
TRACE_PROTOCOL
, 1, "SSLálert %s:%s:%s",

189 (
whîe
 & 
SSL_CB_READ
) ? "read" : "write",

190 
	`SSL_Æît_ty≥_°rög_l⁄g
(
ªt
), 
	`SSL_Æît_desc_°rög_l⁄g
(ret));

192 i‡(
whîe
 & 
SSL_CB_HANDSHAKE_START
)

194 
	`Log
(
TRACE_PROTOCOL
, 1, "SSL handshake started %s:%s:%s",

195 (
whîe
 & 
SSL_CB_READ
) ? "read" : "write",

196 
	`SSL_Æît_ty≥_°rög_l⁄g
(
ªt
), 
	`SSL_Æît_desc_°rög_l⁄g
(ret));

198 i‡(
whîe
 & 
SSL_CB_HANDSHAKE_DONE
)

200 
	`Log
(
TRACE_PROTOCOL
, 1, "SSL handshake done %s:%s:%s",

201 (
whîe
 & 
SSL_CB_READ
) ? "read" : "write",

202 
	`SSL_Æît_ty≥_°rög_l⁄g
(
ªt
), 
	`SSL_Æît_desc_°rög_l⁄g
(ret));

203 
	`Log
(
TRACE_PROTOCOL
, 1, "SSL certificate verification: %s",

204 
	`SSL_gë_vîify_ªsu…_°rög
(
	`SSL_gë_vîify_ªsu…
(
s¶
)));

208 
	`Log
(
TRACE_PROTOCOL
, 1, "SSL sèã %s:%s:%s", 
	`SSL_°©e_°rög_l⁄g
(
s¶
),

209 
	`SSL_Æît_ty≥_°rög_l⁄g
(
ªt
), 
	`SSL_Æît_desc_°rög_l⁄g
(ret));

211 
	}
}

214 * 
	$SSLSockë_gë_vîsi⁄_°rög
(
vîsi⁄
)

216 
i
;

217 
buf
[20];

218 * 
ªt°rög
 = 
NULL
;

221 
code
;

222 * 
°rög
;

224 
vîsi⁄_°rög_èbÀ
[] =

226 { 
SSL2_VERSION
, "SSL 2.0" },

227 { 
SSL3_VERSION
, "SSL 3.0" },

228 { 
TLS1_VERSION
, "TLS 1.0" },

229 #i‡
	`deföed
(
TLS2_VERSION
)

230 { 
TLS2_VERSION
, "TLS 1.1" },

232 #i‡
	`deföed
(
TLS3_VERSION
)

233 { 
TLS3_VERSION
, "TLS 1.2" },

237 
i
 = 0; i < 
	`ARRAY_SIZE
(
vîsi⁄_°rög_èbÀ
); ++i)

239 i‡(
vîsi⁄_°rög_èbÀ
[
i
].
code
 =
vîsi⁄
)

241 
ªt°rög
 = 
vîsi⁄_°rög_èbÀ
[
i
].
°rög
;

246 i‡(
ªt°rög
 =
NULL
)

248 
	`•rötf
(
buf
, "%i", 
vîsi⁄
);

249 
ªt°rög
 = 
buf
;

251  
ªt°rög
;

252 
	}
}

255 
	$SSL_CTX_msg_ˇŒback
(
wrôe_p
, 
vîsi⁄
, 
c⁄ã¡_ty≥
, c⁄° * 
buf
, 
size_t
 
Àn
,

256 
SSL
* 
s¶
, * 
¨g
)

282 
	`Log
(
TRACE_PROTOCOL
, -1, "%†%†%d buÊí %d", (
wrôe_p
 ? "sent" : "received"),

283 
	`SSLSockë_gë_vîsi⁄_°rög
(
vîsi⁄
),

284 
c⁄ã¡_ty≥
, ()
Àn
);

285 
	}
}

288 
	$≥m_∑sswd_cb
(* 
buf
, 
size
, 
rwÊag
, * 
u£rd©a
)

290 
rc
 = 0;

292 
FUNC_ENTRY
;

293 i‡(!
rwÊag
)

295 
	`°∫˝y
(
buf
, (*)(
u£rd©a
), 
size
);

296 
buf
[
size
-1] = '\0';

297 
rc
 = 
	`°æí
(
buf
);

299 
	`FUNC_EXIT_RC
(
rc
);

300  
rc
;

301 
	}
}

303 
	$SSL_¸óã_muãx
(
s¶_muãx_ty≥
* 
muãx
)

305 
rc
 = 0;

307 
FUNC_ENTRY
;

308 #i‡
	`deföed
(
WIN32
Ë|| deföed(
WIN64
)

309 *
muãx
 = 
	`Cª©eMuãx
(
NULL
, 0, NULL);

311 
rc
 = 
	`±hªad_muãx_öô
(
muãx
, 
NULL
);

313 
	`FUNC_EXIT_RC
(
rc
);

314  
rc
;

315 
	}
}

317 
	$SSL_lock_muãx
(
s¶_muãx_ty≥
* 
muãx
)

319 
rc
 = -1;

322 #i‡
	`deföed
(
WIN32
Ë|| deföed(
WIN64
)

323 i‡(
	`WaôF‹SögÀObje˘
(*
muãx
, 
INFINITE
Ë!
WAIT_FAILED
)

325 i‡((
rc
 = 
	`±hªad_muãx_lock
(
muãx
)) == 0)

327 
rc
 = 0;

329  
rc
;

330 
	}
}

332 
	$SSL_u∆ock_muãx
(
s¶_muãx_ty≥
* 
muãx
)

334 
rc
 = -1;

337 #i‡
	`deföed
(
WIN32
Ë|| deföed(
WIN64
)

338 i‡(
	`Rñó£Muãx
(*
muãx
) != 0)

340 i‡((
rc
 = 
	`±hªad_muãx_u∆ock
(
muãx
)) == 0)

342 
rc
 = 0;

344  
rc
;

345 
	}
}

347 
	$SSL_de°roy_muãx
(
s¶_muãx_ty≥
* 
muãx
)

349 
rc
 = 0;

351 
FUNC_ENTRY
;

352 #i‡
	`deföed
(
WIN32
Ë|| deföed(
WIN64
)

353 
rc
 = 
	`Clo£H™dÀ
(*
muãx
);

355 
rc
 = 
	`±hªad_muãx_de°roy
(
muãx
);

356 
	`‰ì
(
muãx
);

358 
	`FUNC_EXIT_RC
(
rc
);

359 
	}
}

363 #i‡(
OPENSSL_VERSION_NUMBER
 >= 0x010000000)

364 
	$SSLThªad_id
(
CRYPTO_THREADID
 *
id
)

366 #i‡
	`deföed
(
WIN32
Ë|| deföed(
WIN64
)

367 
	`CRYPTO_THREADID_£t_numîic
(
id
, ()
	`GëCuºítThªadId
());

369 
	`CRYPTO_THREADID_£t_numîic
(
id
, ()
	`±hªad_£lf
());

371 
	}
}

373 
	$SSLThªad_id
()

375 #i‡
	`deföed
(
WIN32
Ë|| deföed(
WIN64
)

376  ()
	`GëCuºítThªadId
();

378  ()
	`±hªad_£lf
();

380 
	}
}

383 
	$SSLLocks_ˇŒback
(
mode
, 
n
, c⁄° *
fûe
, 
löe
)

385 i‡(
mode
 & 
CRYPTO_LOCK
)

386 
	`SSL_lock_muãx
(&
s¶Locks
[
n
]);

388 
	`SSL_u∆ock_muãx
(&
s¶Locks
[
n
]);

389 
	}
}

391 
	$SSLSockë_öôülize
()

393 
rc
 = 0;

395 
i
;

396 
lockMemSize
;

398 
FUNC_ENTRY
;

400 i‡((
rc
 = 
	`SSL_libøry_öô
()) != 1)

401 
rc
 = -1;

403 
	`ERR_lﬂd_¸y±o_°rögs
();

404 
	`SSL_lﬂd_îr‹_°rögs
();

410 
	`O≥nSSL_add_Æl_Æg‹ôhms
();

412 
lockMemSize
 = 
	`CRYPTO_num_locks
(Ë* (
s¶_muãx_ty≥
);

414 
s¶Locks
 = 
	`mÆloc
(
lockMemSize
);

415 i‡(!
s¶Locks
)

417 
rc
 = -1;

418 
exô
;

421 
	`mem£t
(
s¶Locks
, 0, 
lockMemSize
);

423 
i
 = 0; i < 
	`CRYPTO_num_locks
(); i++)

425  
	`SSL_¸óã_muãx
(&
s¶Locks
[
i
]);

428 #i‡(
OPENSSL_VERSION_NUMBER
 >= 0x010000000)

429 
	`CRYPTO_THREADID_£t_ˇŒback
(
SSLThªad_id
);

431 
	`CRYPTO_£t_id_ˇŒback
(
SSLThªad_id
);

433 
	`CRYPTO_£t_lockög_ˇŒback
(
SSLLocks_ˇŒback
);

435 
	`SSL_¸óã_muãx
(&
s¶C‹eMuãx
);

437 
exô
:

438 
	`FUNC_EXIT_RC
(
rc
);

439  
rc
;

440 
	}
}

442 
	$SSLSockë_ãrmö©e
()

444 
FUNC_ENTRY
;

445 
	`‰ì
(
s¶Locks
);

446 
FUNC_EXIT
;

447 
	}
}

449 
	$SSLSockë_¸óãC⁄ãxt
(
√tw‹kH™dÀs
* 
√t
, 
MQTTClõ¡_SSLO±i⁄s
* 
›ts
)

451 
rc
 = 1;

452 c⁄° * 
cùhîs
 = 
NULL
;

454 
FUNC_ENTRY
;

455 i‡(
√t
->
˘x
 =
NULL
)

456 i‡((
√t
->
˘x
 = 
	`SSL_CTX_√w
(
	`SSLv23_˛õ¡_mëhod
())Ë=
NULL
)

458 
	`SSLSockë_îr‹
("SSL_CTX_√w", 
NULL
, 
√t
->
sockë
, 
rc
);

459 
exô
;

462 i‡(
›ts
->
keySt‹e
)

464 
rc1
 = 0;

466 i‡((
rc
 = 
	`SSL_CTX_u£_˚πifiˇã_chaö_fûe
(
√t
->
˘x
, 
›ts
->
keySt‹e
)) != 1)

468 
	`SSLSockë_îr‹
("SSL_CTX_u£_˚πifiˇã_chaö_fûe", 
NULL
, 
√t
->
sockë
, 
rc
);

469 
‰ì_˘x
;

472 i‡(
›ts
->
¥iv©eKey
 =
NULL
)

473 
›ts
->
¥iv©eKey
 = o±s->
keySt‹e
;

475 i‡(
›ts
->
¥iv©eKeyPassw‹d
 !
NULL
)

477 
	`SSL_CTX_£t_deÁu…_∑sswd_cb
(
√t
->
˘x
, 
≥m_∑sswd_cb
);

478 
	`SSL_CTX_£t_deÁu…_∑sswd_cb_u£rd©a
(
√t
->
˘x
, (*)
›ts
->
¥iv©eKeyPassw‹d
);

482 
rc1
 = 
	`SSL_CTX_u£_Priv©eKey_fûe
(
√t
->
˘x
, 
›ts
->
¥iv©eKey
, 
SSL_FILETYPE_PEM
);

483 i‡(
›ts
->
¥iv©eKey
 =›ts->
keySt‹e
)

484 
›ts
->
¥iv©eKey
 = 
NULL
;

485 i‡(
rc1
 != 1)

487 
	`SSLSockë_îr‹
("SSL_CTX_u£_Priv©eKey_fûe", 
NULL
, 
√t
->
sockë
, 
rc
);

488 
‰ì_˘x
;

492 i‡(
›ts
->
åu°St‹e
)

494 i‡((
rc
 = 
	`SSL_CTX_lﬂd_vîify_loˇti⁄s
(
√t
->
˘x
, 
›ts
->
åu°St‹e
, 
NULL
)) != 1)

496 
	`SSLSockë_îr‹
("SSL_CTX_lﬂd_vîify_loˇti⁄s", 
NULL
, 
√t
->
sockë
, 
rc
);

497 
‰ì_˘x
;

500 i‡((
rc
 = 
	`SSL_CTX_£t_deÁu…_vîify_∑ths
(
√t
->
˘x
)) != 1)

502 
	`SSLSockë_îr‹
("SSL_CTX_£t_deÁu…_vîify_∑ths", 
NULL
, 
√t
->
sockë
, 
rc
);

503 
‰ì_˘x
;

506 i‡(
›ts
->
íabÀdCùhîSuôes
 =
NULL
)

507 
cùhîs
 = "DEFAULT";

509 
cùhîs
 = 
›ts
->
íabÀdCùhîSuôes
;

511 i‡((
rc
 = 
	`SSL_CTX_£t_cùhî_li°
(
√t
->
˘x
, 
cùhîs
)) != 1)

513 
	`SSLSockë_îr‹
("SSL_CTX_£t_cùhî_li°", 
NULL
, 
√t
->
sockë
, 
rc
);

514 
‰ì_˘x
;

517 
	`SSL_CTX_£t_mode
(
√t
->
˘x
, 
SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER
);

519 
exô
;

520 
‰ì_˘x
:

521 
	`SSL_CTX_‰ì
(
√t
->
˘x
);

522 
√t
->
˘x
 = 
NULL
;

524 
exô
:

525 
	`FUNC_EXIT_RC
(
rc
);

526  
rc
;

527 
	}
}

530 
	$SSLSockë_£tSockëF‹SSL
(
√tw‹kH™dÀs
* 
√t
, 
MQTTClõ¡_SSLO±i⁄s
* 
›ts
)

532 
rc
 = 1;

534 
FUNC_ENTRY
;

536 i‡(
√t
->
˘x
 !
NULL
 || (
rc
 = 
	`SSLSockë_¸óãC⁄ãxt
“ë, 
›ts
)) == 1)

538 
i
;

539 
	`SSL_CTX_£t_öfo_ˇŒback
(
√t
->
˘x
, 
SSL_CTX_öfo_ˇŒback
);

540 
	`SSL_CTX_£t_msg_ˇŒback
(
√t
->
˘x
, 
SSL_CTX_msg_ˇŒback
);

541 i‡(
›ts
->
íabÀSîvîCîtAuth
)

542 
	`SSL_CTX_£t_vîify
(
√t
->
˘x
, 
SSL_VERIFY_PEER
, 
NULL
);

544 
√t
->
s¶
 = 
	`SSL_√w
“ë->
˘x
);

547 
i
 = 0; ;i++)

549 c⁄° * 
cùhî
 = 
	`SSL_gë_cùhî_li°
(
√t
->
s¶
, 
i
);

550 i‡(
cùhî
 =
NULL
)

552 
	`Log
(
TRACE_PROTOCOL
, 1, "SSL cùhîávaûabÀ: %d:%s", 
i
, 
cùhî
);

554 i‡((
rc
 = 
	`SSL_£t_fd
(
√t
->
s¶
,Çë->
sockë
)) != 1)

555 
	`SSLSockë_îr‹
("SSL_£t_fd", 
√t
->
s¶
,Çë->
sockë
, 
rc
);

558 
	`FUNC_EXIT_RC
(
rc
);

559  
rc
;

560 
	}
}

563 
	$SSLSockë_c⁄√˘
(
SSL
* 
s¶
, 
sock
)

565 
rc
 = 0;

567 
FUNC_ENTRY
;

569 
rc
 = 
	`SSL_c⁄√˘
(
s¶
);

570 i‡(
rc
 != 1)

572 
îr‹
;

573 
îr‹
 = 
	`SSLSockë_îr‹
("SSL_c⁄√˘", 
s¶
, 
sock
, 
rc
);

574 i‡(
îr‹
 =
SSL_FATAL
)

575 
rc
 = 
îr‹
;

576 i‡(
îr‹
 =
SSL_ERROR_WANT_READ
 ||Éº‹ =
SSL_ERROR_WANT_WRITE
)

577 
rc
 = 
TCPSOCKET_INTERRUPTED
;

580 
	`FUNC_EXIT_RC
(
rc
);

581  
rc
;

582 
	}
}

592 
	$SSLSockë_gëch
(
SSL
* 
s¶
, 
sockë
, * 
c
)

594 
rc
 = 
SOCKET_ERROR
;

596 
FUNC_ENTRY
;

597 i‡((
rc
 = 
	`SockëBuf„r_gëQueuedCh¨
(
sockë
, 
c
)Ë!
SOCKETBUFFER_INTERRUPTED
)

598 
exô
;

600 i‡((
rc
 = 
	`SSL_ªad
(
s¶
, 
c
, (
size_t
)1)) < 0)

602 
îr
 = 
	`SSLSockë_îr‹
("SSL_ªad - gëch", 
s¶
, 
sockë
, 
rc
);

603 i‡(
îr
 =
SSL_ERROR_WANT_READ
 ||Éº =
SSL_ERROR_WANT_WRITE
)

605 
rc
 = 
TCPSOCKET_INTERRUPTED
;

606 
	`SockëBuf„r_öãºu±ed
(
sockë
, 0);

609 i‡(
rc
 == 0)

610 
rc
 = 
SOCKET_ERROR
;

611 i‡(
rc
 == 1)

613 
	`SockëBuf„r_queueCh¨
(
sockë
, *
c
);

614 
rc
 = 
TCPSOCKET_COMPLETE
;

616 
exô
:

617 
	`FUNC_EXIT_RC
(
rc
);

618  
rc
;

619 
	}
}

631 *
	$SSLSockë_gëd©a
(
SSL
* 
s¶
, 
sockë
, 
byãs
, * 
a˘uÆ_Àn
)

633 
rc
;

634 * 
buf
;

636 
FUNC_ENTRY
;

637 i‡(
byãs
 == 0)

639 
buf
 = 
	`SockëBuf„r_com∂ëe
(
sockë
);

640 
exô
;

643 
buf
 = 
	`SockëBuf„r_gëQueuedD©a
(
sockë
, 
byãs
, 
a˘uÆ_Àn
);

645 i‡((
rc
 = 
	`SSL_ªad
(
s¶
, 
buf
 + (*
a˘uÆ_Àn
), (
size_t
)(
byãs
 - (*actual_len)))) < 0)

647 
rc
 = 
	`SSLSockë_îr‹
("SSL_ªad - gëd©a", 
s¶
, 
sockë
,Ñc);

648 i‡(
rc
 !
SSL_ERROR_WANT_READ
 &&Ñ¯!
SSL_ERROR_WANT_WRITE
)

650 
buf
 = 
NULL
;

651 
exô
;

654 i‡(
rc
 == 0)

656 
buf
 = 
NULL
;

657 
exô
;

660 *
a˘uÆ_Àn
 +
rc
;

662 i‡(*
a˘uÆ_Àn
 =
byãs
)

664 
	`SockëBuf„r_com∂ëe
(
sockë
);

669 i‡(
	`SSL_≥ndög
(
s¶
) > 0)

670 
	`SSLSockë_addPídögRód
(
sockë
);

674 
	`SockëBuf„r_öãºu±ed
(
sockë
, *
a˘uÆ_Àn
);

675 
	`Log
(
TRACE_MAX
, -1, "SSL_ªad: %d byã†ex≥˘ed buà%d byã†nowÑe˚ived", 
byãs
, *
a˘uÆ_Àn
);

677 
exô
:

678 
FUNC_EXIT
;

679  
buf
;

680 
	}
}

682 
	$SSLSockë_de°royC⁄ãxt
(
√tw‹kH™dÀs
* 
√t
)

684 
FUNC_ENTRY
;

685 i‡(
√t
->
˘x
)

686 
	`SSL_CTX_‰ì
(
√t
->
˘x
);

687 
√t
->
˘x
 = 
NULL
;

688 
FUNC_EXIT
;

689 
	}
}

692 
	$SSLSockë_˛o£
(
√tw‹kH™dÀs
* 
√t
)

694 
rc
 = 1;

695 
FUNC_ENTRY
;

696 i‡(
√t
->
s¶
) {

697 
rc
 = 
	`SSL_shutdown
(
√t
->
s¶
);

698 
	`SSL_‰ì
(
√t
->
s¶
);

699 
√t
->
s¶
 = 
NULL
;

701 
	`SSLSockë_de°royC⁄ãxt
(
√t
);

702 
	`FUNC_EXIT_RC
(
rc
);

703  
rc
;

704 
	}
}

708 
	$SSLSockë_putd©as
(
SSL
* 
s¶
, 
sockë
, * 
buf0
, 
size_t
 
buf0Àn
, 
cou¡
, ** 
buf„rs
, size_t* 
buÊís
, * 
‰ìs
)

710 
rc
 = 0;

711 
i
;

712 *
±r
;

713 
iobuf
 
iovec
;

714 
s¶îr‹
;

716 
FUNC_ENTRY
;

717 
iovec
.
iov_Àn
 = 
buf0Àn
;

718 
i
 = 0; i < 
cou¡
; i++)

719 
iovec
.
iov_Àn
 +
buÊís
[
i
];

721 
±r
 = 
iovec
.
iov_ba£
 = (*)
	`mÆloc
(iovec.
iov_Àn
);

722 
	`mem˝y
(
±r
, 
buf0
, 
buf0Àn
);

723 
±r
 +
buf0Àn
;

724 
i
 = 0; i < 
cou¡
; i++)

726 
	`mem˝y
(
±r
, 
buf„rs
[
i
], 
buÊís
[i]);

727 
±r
 +
buÊís
[
i
];

730 
	`SSL_lock_muãx
(&
s¶C‹eMuãx
);

731 i‡((
rc
 = 
	`SSL_wrôe
(
s¶
, 
iovec
.
iov_ba£
, iovec.
iov_Àn
)) == iovec.iov_len)

732 
rc
 = 
TCPSOCKET_COMPLETE
;

735 
s¶îr‹
 = 
	`SSLSockë_îr‹
("SSL_wrôe", 
s¶
, 
sockë
, 
rc
);

737 i‡(
s¶îr‹
 =
SSL_ERROR_WANT_WRITE
)

739 * 
sockmem
 = (*)
	`mÆloc
(());

740 
‰ì
 = 1;

742 
	`Log
(
TRACE_MIN
, -1, "Partial write: incomplete write of %d bytes on SSL socket %d",

743 
iovec
.
iov_Àn
, 
sockë
);

744 
	`SockëBuf„r_≥ndögWrôe
(
sockë
, 
s¶
, 1, &
iovec
, &
‰ì
, iovec.
iov_Àn
, 0);

745 *
sockmem
 = 
sockë
;

746 
	`Li°Aµíd
(
s
.
wrôe_≥ndög
, 
sockmem
, ());

747 
	`FD_SET
(
sockë
, &(
s
.
≥ndög_w£t
));

748 
rc
 = 
TCPSOCKET_INTERRUPTED
;

751 
rc
 = 
SOCKET_ERROR
;

753 
	`SSL_u∆ock_muãx
(&
s¶C‹eMuãx
);

755 i‡(
rc
 !
TCPSOCKET_INTERRUPTED
)

756 
	`‰ì
(
iovec
.
iov_ba£
);

759 
i
;

760 
	`‰ì
(
buf0
);

761 
i
 = 0; i < 
cou¡
; ++i)

763 i‡(
‰ìs
[
i
])

764 
	`‰ì
(
buf„rs
[
i
]);

767 
	`FUNC_EXIT_RC
(
rc
);

768  
rc
;

769 
	}
}

771 
Li°
 
≥ndög_ªads
 = {
NULL
, NULL, NULL, 0, 0};

773 
	$SSLSockë_addPídögRód
(
sock
)

775 
FUNC_ENTRY
;

776 i‡(
	`Li°FödIãm
(&
≥ndög_ªads
, &
sock
, 
ötcom∑ª
Ë=
NULL
)

778 * 
psock
 = (*)
	`mÆloc
((
sock
));

779 *
psock
 = 
sock
;

780 
	`Li°Aµíd
(&
≥ndög_ªads
, 
psock
, (
sock
));

783 
	`Log
(
TRACE_MIN
, -1, "SSLSockë_addPídögRód: sockë %dáÃódy i¿thêli°", 
sock
);

785 
FUNC_EXIT
;

786 
	}
}

789 
	$SSLSockë_gëPídögRód
()

791 
sock
 = -1;

793 i‡(
≥ndög_ªads
.
cou¡
 > 0)

795 
sock
 = *(*)(
≥ndög_ªads
.
fú°
->
c⁄ã¡
);

796 
	`Li°RemoveHód
(&
≥ndög_ªads
);

798  
sock
;

799 
	}
}

802 
	$SSLSockë_c⁄töueWrôe
(
≥ndög_wrôes
* 
pw
)

804 
rc
 = 0;

806 
FUNC_ENTRY
;

807 i‡((
rc
 = 
	`SSL_wrôe
(
pw
->
s¶
,Öw->
iovecs
[0].
iov_ba£
,Öw->iovecs[0].
iov_Àn
)) ==Öw->iovecs[0].iov_len)

810 
	`‰ì
(
pw
->
iovecs
[0].
iov_ba£
);

811 
	`Log
(
TRACE_MIN
, -1, "SSL c⁄töueWrôe:Ö¨tü»wrôênow com∂ëêf‹ sockë %d", 
pw
->
sockë
);

812 
rc
 = 1;

816 
s¶îr‹
 = 
	`SSLSockë_îr‹
("SSL_wrôe", 
pw
->
s¶
,Öw->
sockë
, 
rc
);

817 i‡(
s¶îr‹
 =
SSL_ERROR_WANT_WRITE
)

818 
rc
 = 0;

820 
	`FUNC_EXIT_RC
(
rc
);

821  
rc
;

822 
	}
}

	@paho-c/src/SSLSocket.h

16 #i‡!
deföed
(
SSLSOCKET_H
)

17 
	#SSLSOCKET_H


	)

19 #i‡
deföed
(
WIN32
Ë|| deföed(
WIN64
)

20 
	#s¶_muãx_ty≥
 
HANDLE


	)

22 
	~<±hªad.h
>

23 
	~<£m≠h‹e.h
>

24 
	#s¶_muãx_ty≥
 
±hªad_muãx_t


	)

27 
	~<›ís¶/s¶.h
>

28 
	~"SockëBuf„r.h
"

29 
	~"Clõ¡s.h
"

31 
	#URI_SSL
 "s¶://"

	)

33 
SSLSockë_öôülize
();

34 
SSLSockë_ãrmö©e
();

35 
SSLSockë_£tSockëF‹SSL
(
√tw‹kH™dÀs
* 
√t
, 
MQTTClõ¡_SSLO±i⁄s
* 
›ts
);

36 
SSLSockë_gëch
(
SSL
* 
s¶
, 
sockë
, * 
c
);

37 *
SSLSockë_gëd©a
(
SSL
* 
s¶
, 
sockë
, 
byãs
, * 
a˘uÆ_Àn
);

39 
SSLSockë_˛o£
(
√tw‹kH™dÀs
* 
√t
);

40 
SSLSockë_putd©as
(
SSL
* 
s¶
, 
sockë
, * 
buf0
, 
size_t
 
buf0Àn
, 
cou¡
, ** 
buf„rs
, size_t* 
buÊís
, * 
‰ìs
);

41 
SSLSockë_c⁄√˘
(
SSL
* 
s¶
, 
sockë
);

43 
SSLSockë_gëPídögRód
();

44 
SSLSockë_c⁄töueWrôe
(
≥ndög_wrôes
* 
pw
);

	@paho-c/src/Socket.c

26 
	~"Sockë.h
"

27 
	~"Log.h
"

28 
	~"SockëBuf„r.h
"

29 
	~"Mesßges.h
"

30 
	~"SèckTø˚.h
"

31 #i‡
deföed
(
OPENSSL
)

32 
	~"SSLSockë.h
"

35 
	~<°dlib.h
>

36 
	~<°rög.h
>

37 
	~<sig«l.h
>

38 
	~<˘y≥.h
>

40 
	~"Hóp.h
"

42 
Sockë_˛o£_⁄ly
(
sockë
);

43 
Sockë_c⁄töueWrôes
(
fd_£t
* 
pw£t
);

45 #i‡
deföed
(
WIN32
Ë|| deföed(
WIN64
)

46 
	#iov_Àn
 
Àn


	)

47 
	#iov_ba£
 
buf


	)

53 
Sockës
 
	gs
;

54 
fd_£t
 
	gw£t
;

61 
	$Sockë_£ä⁄blockög
(
sock
)

63 
rc
;

64 #i‡
	`deföed
(
WIN32
Ë|| deföed(
WIN64
)

65 
u_l⁄g
 
Êag
 = 1L;

67 
FUNC_ENTRY
;

68 
rc
 = 
	`io˘l
(
sock
, 
FIONBIO
, &
Êag
);

70 
Êags
;

72 
FUNC_ENTRY
;

73 i‡((
Êags
 = 
	`f˙é
(
sock
, 
F_GETFL
, 0)))

74 
Êags
 = 0;

75 
rc
 = 
	`f˙é
(
sock
, 
F_SETFL
, 
Êags
 | 
O_NONBLOCK
);

77 
	`FUNC_EXIT_RC
(
rc
);

78  
rc
;

79 
	}
}

88 
	$Sockë_îr‹
(* 
aSåög
, 
sock
)

90 #i‡
	`deföed
(
WIN32
Ë|| deföed(
WIN64
)

91 
î∫o
;

94 
FUNC_ENTRY
;

95 #i‡
	`deföed
(
WIN32
Ë|| deföed(
WIN64
)

96 
î∫o
 = 
	`WSAGëLa°Eº‹
();

98 i‡(
î∫o
 !
EINTR
 &&Éºnÿ!
EAGAIN
 &&Éºnÿ!
EINPROGRESS
 &&Éºnÿ!
EWOULDBLOCK
)

100 i‡(
	`°rcmp
(
aSåög
, "shutdown"Ë!0 || (
î∫o
 !
ENOTCONN
 &&Éºnÿ!
ECONNRESET
))

101 
	`Log
(
TRACE_MINIMUM
, -1, "SockëÉº‹ %†ö %†f‹ sockë %d", 
	`°ªº‹
(
î∫o
), 
aSåög
, 
sock
);

103 
	`FUNC_EXIT_RC
(
î∫o
);

104  
î∫o
;

105 
	}
}

111 
	$Sockë_outInôülize
()

113 #i‡
	`deföed
(
WIN32
Ë|| deföed(
WIN64
)

114 
WORD
 
wösockVî
 = 0x0202;

115 
WSADATA
 
wsd
;

117 
FUNC_ENTRY
;

118 
	`WSASèπup
(
wösockVî
, &
wsd
);

120 
FUNC_ENTRY
;

121 
	`sig«l
(
SIGPIPE
, 
SIG_IGN
);

124 
	`SockëBuf„r_öôülize
();

125 
s
.
˛õ¡sds
 = 
	`Li°Inôülize
();

126 
s
.
c⁄√˘_≥ndög
 = 
	`Li°Inôülize
();

127 
s
.
wrôe_≥ndög
 = 
	`Li°Inôülize
();

128 
s
.
cur_˛õ¡sds
 = 
NULL
;

129 
	`FD_ZERO
(&(
s
.
r£t
));

130 
	`FD_ZERO
(&(
s
.
≥ndög_w£t
));

131 
s
.
maxfdp1
 = 0;

132 
	`mem˝y
((*)&(
s
.
r£t_ßved
), (*)&(s.
r£t
), (s.rset_saved));

133 
FUNC_EXIT
;

134 
	}
}

140 
	$Sockë_outTîmö©e
()

142 
FUNC_ENTRY
;

143 
	`Li°Fªe
(
s
.
c⁄√˘_≥ndög
);

144 
	`Li°Fªe
(
s
.
wrôe_≥ndög
);

145 
	`Li°Fªe
(
s
.
˛õ¡sds
);

146 
	`SockëBuf„r_ãrmö©e
();

147 #i‡
	`deföed
(
WIN32
Ë|| deföed(
WIN64
)

148 
	`WSACÀ™up
();

150 
FUNC_EXIT
;

151 
	}
}

158 
	$Sockë_addSockë
(
√wSd
)

160 
rc
 = 0;

162 
FUNC_ENTRY
;

163 i‡(
	`Li°FödIãm
(
s
.
˛õ¡sds
, &
√wSd
, 
ötcom∑ª
Ë=
NULL
)

165 * 
≤ewSd
 = (*)
	`mÆloc
((
√wSd
));

166 *
≤ewSd
 = 
√wSd
;

167 
	`Li°Aµíd
(
s
.
˛õ¡sds
, 
≤ewSd
, (
√wSd
));

168 
	`FD_SET
(
√wSd
, &(
s
.
r£t_ßved
));

169 
s
.
maxfdp1
 = 
	`max
(s.maxfdp1, 
√wSd
 + 1);

170 
rc
 = 
	`Sockë_£ä⁄blockög
(
√wSd
);

173 
	`Log
(
LOG_ERROR
, -1, "addSockë: sockë %dáÃódy i¿thêli°", 
√wSd
);

175 
	`FUNC_EXIT_RC
(
rc
);

176  
rc
;

177 
	}
}

188 
	$isRódy
(
sockë
, 
fd_£t
* 
ªad_£t
, fd_£t* 
wrôe_£t
)

190 
rc
 = 1;

192 
FUNC_ENTRY
;

193 i‡(
	`Li°FödIãm
(
s
.
c⁄√˘_≥ndög
, &
sockë
, 
ötcom∑ª
Ë&& 
	`FD_ISSET
(sockë, 
wrôe_£t
))

194 
	`Li°RemoveIãm
(
s
.
c⁄√˘_≥ndög
, &
sockë
, 
ötcom∑ª
);

196 
rc
 = 
	`FD_ISSET
(
sockë
, 
ªad_£t
Ë&& FD_ISSET(sockë, 
wrôe_£t
Ë&& 
	`Sockë_noPídögWrôes
(socket);

197 
	`FUNC_EXIT_RC
(
rc
);

198  
rc
;

199 
	}
}

209 
	$Sockë_gëRódySockë
(
m‹e_w‹k
, 
timevÆ
 *
ç
)

211 
rc
 = 0;

212 
timevÆ
 
zîo
 = {0L, 0L};

213 
timevÆ
 
⁄e
 = {1L, 0L};

214 
timevÆ
 
timeout
 = 
⁄e
;

216 
FUNC_ENTRY
;

217 i‡(
s
.
˛õ¡sds
->
cou¡
 == 0)

218 
exô
;

220 i‡(
m‹e_w‹k
)

221 
timeout
 = 
zîo
;

222 i‡(
ç
)

223 
timeout
 = *
ç
;

225 
s
.
cur_˛õ¡sds
 !
NULL
)

227 i‡(
	`isRódy
(*((*)(
s
.
cur_˛õ¡sds
->
c⁄ã¡
)), &(s.
r£t
), &
w£t
))

229 
	`Li°NextEÀmít
(
s
.
˛õ¡sds
, &s.
cur_˛õ¡sds
);

232 i‡(
s
.
cur_˛õ¡sds
 =
NULL
)

234 
rc1
;

235 
fd_£t
 
pw£t
;

237 
	`mem˝y
((*)&(
s
.
r£t
), (*)&(s.
r£t_ßved
), (s.rset));

238 
	`mem˝y
((*)&(
pw£t
), (*)&(
s
.
≥ndög_w£t
), (pwset));

239 i‡((
rc
 = 
	`£À˘
(
s
.
maxfdp1
, &(s.
r£t
), &
pw£t
, 
NULL
, &
timeout
)Ë=
SOCKET_ERROR
)

241 
	`Sockë_îr‹
("read select", 0);

242 
exô
;

244 
	`Log
(
TRACE_MAX
, -1, "Rëu∫ codê%d fromÑód sñe˘", 
rc
);

246 i‡(
	`Sockë_c⁄töueWrôes
(&
pw£t
Ë=
SOCKET_ERROR
)

248 
rc
 = 0;

249 
exô
;

252 
	`mem˝y
((*)&
w£t
, (*)&(
s
.
r£t_ßved
), (wset));

253 i‡((
rc1
 = 
	`£À˘
(
s
.
maxfdp1
, 
NULL
, &(
w£t
), NULL, &
zîo
)Ë=
SOCKET_ERROR
)

255 
	`Sockë_îr‹
("write select", 0);

256 
rc
 = 
rc1
;

257 
exô
;

259 
	`Log
(
TRACE_MAX
, -1, "Rëu∫ codê%d from wrôê£À˘", 
rc1
);

261 i‡(
rc
 =0 && 
rc1
 == 0)

262 
exô
;

264 
s
.
cur_˛õ¡sds
 = s.
˛õ¡sds
->
fú°
;

265 
s
.
cur_˛õ¡sds
 !
NULL
)

267 
cursock
 = *((*)(
s
.
cur_˛õ¡sds
->
c⁄ã¡
));

268 i‡(
	`isRódy
(
cursock
, &(
s
.
r£t
), &
w£t
))

270 
	`Li°NextEÀmít
(
s
.
˛õ¡sds
, &s.
cur_˛õ¡sds
);

274 i‡(
s
.
cur_˛õ¡sds
 =
NULL
)

275 
rc
 = 0;

278 
rc
 = *((*)(
s
.
cur_˛õ¡sds
->
c⁄ã¡
));

279 
	`Li°NextEÀmít
(
s
.
˛õ¡sds
, &s.
cur_˛õ¡sds
);

281 
exô
:

282 
	`FUNC_EXIT_RC
(
rc
);

283  
rc
;

284 
	}
}

293 
	$Sockë_gëch
(
sockë
, * 
c
)

295 
rc
 = 
SOCKET_ERROR
;

297 
FUNC_ENTRY
;

298 i‡((
rc
 = 
	`SockëBuf„r_gëQueuedCh¨
(
sockë
, 
c
)Ë!
SOCKETBUFFER_INTERRUPTED
)

299 
exô
;

301 i‡((
rc
 = 
	`ªcv
(
sockë
, 
c
, (
size_t
)1, 0)Ë=
SOCKET_ERROR
)

303 
îr
 = 
	`Sockë_îr‹
("ªcv - gëch", 
sockë
);

304 i‡(
îr
 =
EWOULDBLOCK
 ||Éº =
EAGAIN
)

306 
rc
 = 
TCPSOCKET_INTERRUPTED
;

307 
	`SockëBuf„r_öãºu±ed
(
sockë
, 0);

310 i‡(
rc
 == 0)

311 
rc
 = 
SOCKET_ERROR
;

312 i‡(
rc
 == 1)

314 
	`SockëBuf„r_queueCh¨
(
sockë
, *
c
);

315 
rc
 = 
TCPSOCKET_COMPLETE
;

317 
exô
:

318 
	`FUNC_EXIT_RC
(
rc
);

319  
rc
;

320 
	}
}

331 *
	$Sockë_gëd©a
(
sockë
, 
byãs
, * 
a˘uÆ_Àn
)

333 
rc
;

334 * 
buf
;

336 
FUNC_ENTRY
;

337 i‡(
byãs
 == 0)

339 
buf
 = 
	`SockëBuf„r_com∂ëe
(
sockë
);

340 
exô
;

343 
buf
 = 
	`SockëBuf„r_gëQueuedD©a
(
sockë
, 
byãs
, 
a˘uÆ_Àn
);

345 i‡((
rc
 = 
	`ªcv
(
sockë
, 
buf
 + (*
a˘uÆ_Àn
), (
size_t
)(
byãs
 - (*a˘uÆ_Àn)), 0)Ë=
SOCKET_ERROR
)

347 
rc
 = 
	`Sockë_îr‹
("ªcv - gëd©a", 
sockë
);

348 i‡(
rc
 !
EAGAIN
 &&Ñ¯!
EWOULDBLOCK
)

350 
buf
 = 
NULL
;

351 
exô
;

354 i‡(
rc
 == 0)

356 
buf
 = 
NULL
;

357 
exô
;

360 *
a˘uÆ_Àn
 +
rc
;

362 i‡(*
a˘uÆ_Àn
 =
byãs
)

363 
	`SockëBuf„r_com∂ëe
(
sockë
);

366 
	`SockëBuf„r_öãºu±ed
(
sockë
, *
a˘uÆ_Àn
);

367 
	`Log
(
TRACE_MAX
, -1, "%d byã†ex≥˘ed buà%d byã†nowÑe˚ived", 
byãs
, *
a˘uÆ_Àn
);

369 
exô
:

370 
FUNC_EXIT
;

371  
buf
;

372 
	}
}

379 
	$Sockë_noPídögWrôes
(
sockë
)

381 
cursock
 = 
sockë
;

382  
	`Li°FödIãm
(
s
.
wrôe_≥ndög
, &
cursock
, 
ötcom∑ª
Ë=
NULL
;

383 
	}
}

395 
	$Sockë_wrôev
(
sockë
, 
iobuf
* 
iovecs
, 
cou¡
, * 
byãs
)

397 
rc
;

399 
FUNC_ENTRY
;

400 #i‡
	`deföed
(
WIN32
Ë|| deföed(
WIN64
)

401 
rc
 = 
	`WSASíd
(
sockë
, 
iovecs
, 
cou¡
, (
LPDWORD
)
byãs
, 0, 
NULL
, NULL);

402 i‡(
rc
 =
SOCKET_ERROR
)

404 
îr
 = 
	`Sockë_îr‹
("WSASíd -Öutd©as", 
sockë
);

405 i‡(
îr
 =
EWOULDBLOCK
 ||Éº =
EAGAIN
)

406 
rc
 = 
TCPSOCKET_INTERRUPTED
;

409 *
byãs
 = 0L;

410 
rc
 = 
	`wrôev
(
sockë
, 
iovecs
, 
cou¡
);

411 i‡(
rc
 =
SOCKET_ERROR
)

413 
îr
 = 
	`Sockë_îr‹
("wrôev -Öutd©as", 
sockë
);

414 i‡(
îr
 =
EWOULDBLOCK
 ||Éº =
EAGAIN
)

415 
rc
 = 
TCPSOCKET_INTERRUPTED
;

418 *
byãs
 = 
rc
;

420 
	`FUNC_EXIT_RC
(
rc
);

421  
rc
;

422 
	}
}

436 
	$Sockë_putd©as
(
sockë
, * 
buf0
, 
size_t
 
buf0Àn
, 
cou¡
, ** 
buf„rs
, size_t* 
buÊís
, * 
‰ìs
)

438 
byãs
 = 0L;

439 
iobuf
 
iovecs
[5];

440 
‰ìs1
[5];

441 
rc
 = 
TCPSOCKET_INTERRUPTED
, 
i
, 
tŸÆ
 = 
buf0Àn
;

443 
FUNC_ENTRY
;

444 i‡(!
	`Sockë_noPídögWrôes
(
sockë
))

446 
	`Log
(
LOG_SEVERE
, -1, "TryögÅÿwrôêtÿsockë %d f‹ whichÅhîêi†ÆªadyÖídög ouçut", 
sockë
);

447 
rc
 = 
SOCKET_ERROR
;

448 
exô
;

451 
i
 = 0; i < 
cou¡
; i++)

452 
tŸÆ
 +
buÊís
[
i
];

454 
iovecs
[0].
iov_ba£
 = 
buf0
;

455 
iovecs
[0].
iov_Àn
 = 
buf0Àn
;

456 
‰ìs1
[0] = 1;

457 
i
 = 0; i < 
cou¡
; i++)

459 
iovecs
[
i
+1].
iov_ba£
 = 
buf„rs
[i];

460 
iovecs
[
i
+1].
iov_Àn
 = 
buÊís
[i];

461 
‰ìs1
[
i
+1] = 
‰ìs
[i];

464 i‡((
rc
 = 
	`Sockë_wrôev
(
sockë
, 
iovecs
, 
cou¡
+1, &
byãs
)Ë!
SOCKET_ERROR
)

466 i‡(
byãs
 =
tŸÆ
)

467 
rc
 = 
TCPSOCKET_COMPLETE
;

470 * 
sockmem
 = (*)
	`mÆloc
(());

471 
	`Log
(
TRACE_MIN
, -1, "Partial write: %ld bytes of %dáctually written on socket %d",

472 
byãs
, 
tŸÆ
, 
sockë
);

473 #i‡
	`deföed
(
OPENSSL
)

474 
	`SockëBuf„r_≥ndögWrôe
(
sockë
, 
NULL
, 
cou¡
+1, 
iovecs
, 
‰ìs1
, 
tŸÆ
, 
byãs
);

476 
	`SockëBuf„r_≥ndögWrôe
(
sockë
, 
cou¡
+1, 
iovecs
, 
‰ìs1
, 
tŸÆ
, 
byãs
);

478 *
sockmem
 = 
sockë
;

479 
	`Li°Aµíd
(
s
.
wrôe_≥ndög
, 
sockmem
, ());

480 
	`FD_SET
(
sockë
, &(
s
.
≥ndög_w£t
));

481 
rc
 = 
TCPSOCKET_INTERRUPTED
;

484 
exô
:

485 
	`FUNC_EXIT_RC
(
rc
);

486  
rc
;

487 
	}
}

496 
	$Sockë_addPídögWrôe
(
sockë
)

498 
	`FD_SET
(
sockë
, &(
s
.
≥ndög_w£t
));

499 
	}
}

506 
	$Sockë_˛órPídögWrôe
(
sockë
)

508 i‡(
	`FD_ISSET
(
sockë
, &(
s
.
≥ndög_w£t
)))

509 
	`FD_CLR
(
sockë
, &(
s
.
≥ndög_w£t
));

510 
	}
}

518 
	$Sockë_˛o£_⁄ly
(
sockë
)

520 
rc
;

522 
FUNC_ENTRY
;

523 #i‡
	`deföed
(
WIN32
Ë|| deföed(
WIN64
)

524 i‡(
	`shutdown
(
sockë
, 
SD_BOTH
Ë=
SOCKET_ERROR
)

525 
	`Sockë_îr‹
("shutdown", 
sockë
);

526 i‡((
rc
 = 
	`˛o£sockë
(
sockë
)Ë=
SOCKET_ERROR
)

527 
	`Sockë_îr‹
("˛o£", 
sockë
);

529 i‡(
	`shutdown
(
sockë
, 
SHUT_WR
Ë=
SOCKET_ERROR
)

530 
	`Sockë_îr‹
("shutdown", 
sockë
);

531 i‡((
rc
 = 
	`ªcv
(
sockë
, 
NULL
, (
size_t
)0, 0)Ë=
SOCKET_ERROR
)

532 
	`Sockë_îr‹
("shutdown", 
sockë
);

533 i‡((
rc
 = 
	`˛o£
(
sockë
)Ë=
SOCKET_ERROR
)

534 
	`Sockë_îr‹
("˛o£", 
sockë
);

536 
	`FUNC_EXIT_RC
(
rc
);

537  
rc
;

538 
	}
}

546 
	$Sockë_˛o£
(
sockë
)

548 
FUNC_ENTRY
;

549 
	`Sockë_˛o£_⁄ly
(
sockë
);

550 
	`FD_CLR
(
sockë
, &(
s
.
r£t_ßved
));

551 i‡(
	`FD_ISSET
(
sockë
, &(
s
.
≥ndög_w£t
)))

552 
	`FD_CLR
(
sockë
, &(
s
.
≥ndög_w£t
));

553 i‡(
s
.
cur_˛õ¡sds
 !
NULL
 && *(*)(s.cur_˛õ¡sds->
c⁄ã¡
Ë=
sockë
)

554 
s
.
cur_˛õ¡sds
 = s.cur_˛õ¡sds->
√xt
;

555 
	`Li°RemoveIãm
(
s
.
c⁄√˘_≥ndög
, &
sockë
, 
ötcom∑ª
);

556 
	`Li°RemoveIãm
(
s
.
wrôe_≥ndög
, &
sockë
, 
ötcom∑ª
);

557 
	`SockëBuf„r_˛ónup
(
sockë
);

559 i‡(
	`Li°RemoveIãm
(
s
.
˛õ¡sds
, &
sockë
, 
ötcom∑ª
))

560 
	`Log
(
TRACE_MIN
, -1, "Removed sockë %d", 
sockë
);

562 
	`Log
(
LOG_ERROR
, -1, "FaûedÅÿªmovêsockë %d", 
sockë
);

563 i‡(
sockë
 + 1 >
s
.
maxfdp1
)

566 
Li°EÀmít
* 
cur_˛õ¡sds
 = 
NULL
;

568 
s
.
maxfdp1
 = 0;

569 
	`Li°NextEÀmít
(
s
.
˛õ¡sds
, &
cur_˛õ¡sds
))

570 
s
.
maxfdp1
 = 
	`max
(*((*)(
cur_˛õ¡sds
->
c⁄ã¡
)), s.maxfdp1);

571 ++(
s
.
maxfdp1
);

572 
	`Log
(
TRACE_MAX
, -1, "Re£àmax fdp1Åÿ%d", 
s
.
maxfdp1
);

574 
FUNC_EXIT
;

575 
	}
}

585 
	$Sockë_√w
(* 
addr
, 
p‹t
, * 
sock
)

587 
ty≥
 = 
SOCK_STREAM
;

588 
sockaddr_ö
 
addªss
;

589 #i‡
	`deföed
(
AF_INET6
)

590 
sockaddr_ö6
 
addªss6
;

592 
rc
 = 
SOCKET_ERROR
;

593 #i‡
	`deföed
(
WIN32
Ë|| deföed(
WIN64
)

594 
Ámûy
;

596 
ß_Ámûy_t
 
Ámûy
 = 
AF_INET
;

598 
addröfo
 *
ªsu…
 = 
NULL
;

599 
addröfo
 
höts
 = {0, 
AF_UNSPEC
, 
SOCK_STREAM
, 
IPPROTO_TCP
, 0, 
NULL
, NULL, NULL};

601 
FUNC_ENTRY
;

602 *
sock
 = -1;

604 i‡(
addr
[0] == '[')

605 ++
addr
;

607 i‡((
rc
 = 
	`gëaddröfo
(
addr
, 
NULL
, &
höts
, &
ªsu…
)) == 0)

609 
addröfo
* 
ªs
 = 
ªsu…
;

612 
ªs
)

614 i‡(
ªs
->
ai_Ámûy
 =
AF_INET
)

616 
ªsu…
 = 
ªs
;

619 
ªs
 =Ñes->
ai_√xt
;

622 i‡(
ªsu…
 =
NULL
)

623 
rc
 = -1;

625 #i‡
	`deföed
(
AF_INET6
)

626 i‡(
ªsu…
->
ai_Ámûy
 =
AF_INET6
)

628 
addªss6
.
sö6_p‹t
 = 
	`ht⁄s
(
p‹t
);

629 
addªss6
.
sö6_Ámûy
 = 
Ámûy
 = 
AF_INET6
;

630 
addªss6
.
sö6_addr
 = ((
sockaddr_ö6
*)(
ªsu…
->
ai_addr
))->sin6_addr;

634 i‡(
ªsu…
->
ai_Ámûy
 =
AF_INET
)

636 
addªss
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

637 
addªss
.
sö_Ámûy
 = 
Ámûy
 = 
AF_INET
;

638 
addªss
.
sö_addr
 = ((
sockaddr_ö
*)(
ªsu…
->
ai_addr
))->sin_addr;

641 
rc
 = -1;

643 
	`‰ìaddröfo
(
ªsu…
);

646 
	`Log
(
LOG_ERROR
, -1, "gëaddröfÿÁûed f‹ádd∏%†wôhÑ¯%d", 
addr
, 
rc
);

648 i‡(
rc
 != 0)

649 
	`Log
(
LOG_ERROR
, -1, "%†i†nŸá vÆid IPáddªss", 
addr
);

652 *
sock
 = 
	`sockë
(
Ámûy
, 
ty≥
, 0);

653 i‡(*
sock
 =
INVALID_SOCKET
)

654 
rc
 = 
	`Sockë_îr‹
("sockë", *
sock
);

657 #i‡
	`deföed
(
NOSIGPIPE
)

658 
›t
 = 1;

660 i‡(
	`£tsock›t
(*
sock
, 
SOL_SOCKET
, 
SO_NOSIGPIPE
, (*)&
›t
, (opt)) != 0)

661 
	`Log
(
LOG_ERROR
, -1, "CouldÇŸ së SO_NOSIGPIPE f‹ sockë %d", *
sock
);

664 
	`Log
(
TRACE_MIN
, -1, "New sockë %d f‹ %s,Ö‹à%d", *
sock
, 
addr
, 
p‹t
);

665 i‡(
	`Sockë_addSockë
(*
sock
Ë=
SOCKET_ERROR
)

666 
rc
 = 
	`Sockë_îr‹
("£ä⁄blockög", *
sock
);

670 i‡(
Ámûy
 =
AF_INET
)

671 
rc
 = 
	`c⁄√˘
(*
sock
, (
sockaddr
*)&
addªss
, (address));

672 #i‡
	`deföed
(
AF_INET6
)

674 
rc
 = 
	`c⁄√˘
(*
sock
, (
sockaddr
*)&
addªss6
, (address6));

676 i‡(
rc
 =
SOCKET_ERROR
)

677 
rc
 = 
	`Sockë_îr‹
("c⁄√˘", *
sock
);

678 i‡(
rc
 =
EINPROGRESS
 ||Ñ¯=
EWOULDBLOCK
)

680 * 
≤ewSd
 = (*)
	`mÆloc
(());

681 *
≤ewSd
 = *
sock
;

682 
	`Li°Aµíd
(
s
.
c⁄√˘_≥ndög
, 
≤ewSd
, ());

683 
	`Log
(
TRACE_MIN
, 15, "ConnectÖending");

688 
	`FUNC_EXIT_RC
(
rc
);

689  
rc
;

690 
	}
}

693 
Sockë_wrôeCom∂ëe
* 
	gwrôecom∂ëe
 = 
NULL
;

695 
	$Sockë_£tWrôeCom∂ëeCÆlback
(
Sockë_wrôeCom∂ëe
* 
mywrôecom∂ëe
)

697 
wrôecom∂ëe
 = 
mywrôecom∂ëe
;

698 
	}
}

705 
	$Sockë_c⁄töueWrôe
(
sockë
)

707 
rc
 = 0;

708 
≥ndög_wrôes
* 
pw
;

709 
curbuÊí
 = 0L,

710 
byãs
;

711 
curbuf
 = -1, 
i
;

712 
iobuf
 
iovecs1
[5];

714 
FUNC_ENTRY
;

715 
pw
 = 
	`SockëBuf„r_gëWrôe
(
sockë
);

717 #i‡
	`deföed
(
OPENSSL
)

718 i‡(
pw
->
s¶
)

720 
rc
 = 
	`SSLSockë_c⁄töueWrôe
(
pw
);

721 
exô
;

725 
i
 = 0; i < 
pw
->
cou¡
; ++i)

727 i‡(
pw
->
byãs
 <
curbuÊí
)

730 
iovecs1
[++
curbuf
].
iov_Àn
 = 
pw
->
iovecs
[
i
].iov_len;

731 
iovecs1
[
curbuf
].
iov_ba£
 = 
pw
->
iovecs
[
i
].iov_base;

733 i‡(
pw
->
byãs
 < 
curbuÊí
 +Öw->
iovecs
[
i
].
iov_Àn
)

736 
off£t
 = 
pw
->
byãs
 - 
curbuÊí
;

737 
iovecs1
[++
curbuf
].
iov_Àn
 = 
pw
->
iovecs
[
i
].iov_À¿- 
off£t
;

738 
iovecs1
[
curbuf
].
iov_ba£
 = 
pw
->
iovecs
[
i
].iov_ba£ + 
off£t
;

741 
curbuÊí
 +
pw
->
iovecs
[
i
].
iov_Àn
;

744 i‡((
rc
 = 
	`Sockë_wrôev
(
sockë
, 
iovecs1
, 
curbuf
+1, &
byãs
)Ë!
SOCKET_ERROR
)

746 
pw
->
byãs
 += bytes;

747 i‡((
rc
 = (
pw
->
byãs
 =pw->
tŸÆ
)))

749 
i
 = 0; i < 
pw
->
cou¡
; i++)

751 i‡(
pw
->
‰ìs
[
i
])

752 
	`‰ì
(
pw
->
iovecs
[
i
].
iov_ba£
);

754 
	`Log
(
TRACE_MIN
, -1, "C⁄töueWrôe:Ö¨tü»wrôênow com∂ëêf‹ sockë %d", 
sockë
);

757 
	`Log
(
TRACE_MIN
, -1, "C⁄töueWrôêwrŸê+%lu byã†⁄ sockë %d", 
byãs
, 
sockë
);

759 #i‡
	`deföed
(
OPENSSL
)

760 
exô
:

762 
	`FUNC_EXIT_RC
(
rc
);

763  
rc
;

764 
	}
}

772 
	$Sockë_c⁄töueWrôes
(
fd_£t
* 
pw£t
)

774 
rc1
 = 0;

775 
Li°EÀmít
* 
cuΩídög
 = 
s
.
wrôe_≥ndög
->
fú°
;

777 
FUNC_ENTRY
;

778 
cuΩídög
)

780 
sockë
 = *(*)(
cuΩídög
->
c⁄ã¡
);

781 i‡(
	`FD_ISSET
(
sockë
, 
pw£t
Ë&& 
	`Sockë_c⁄töueWrôe
(socket))

783 i‡(!
	`SockëBuf„r_wrôeCom∂ëe
(
sockë
))

784 
	`Log
(
LOG_SEVERE
, -1, "FailedÅoÑemoveÖending write from socket bufferÜist");

785 
	`FD_CLR
(
sockë
, &(
s
.
≥ndög_w£t
));

786 i‡(!
	`Li°Remove
(
s
.
wrôe_≥ndög
, 
cuΩídög
->
c⁄ã¡
))

788 
	`Log
(
LOG_SEVERE
, -1, "FailedÅoÑemoveÖending write fromÜist");

789 
	`Li°NextEÀmít
(
s
.
wrôe_≥ndög
, &
cuΩídög
);

791 
cuΩídög
 = 
s
.
wrôe_≥ndög
->
cuºít
;

793 i‡(
wrôecom∂ëe
)

794 (*
wrôecom∂ëe
)(
sockë
);

797 
	`Li°NextEÀmít
(
s
.
wrôe_≥ndög
, &
cuΩídög
);

799 
	`FUNC_EXIT_RC
(
rc1
);

800  
rc1
;

801 
	}
}

810 * 
	$Sockë_gëadd∫ame
(
sockaddr
* 
ß
, 
sock
)

815 
	#ADDRLEN
 
INET6_ADDRSTRLEN
+1

	)

819 
	#PORTLEN
 10

	)

820 
addr_°rög
[
ADDRLEN
 + 
PORTLEN
];

822 #i‡
	`deföed
(
WIN32
Ë|| deföed(
WIN64
)

823 
buÊí
 = 
ADDRLEN
*2;

824 
wch¨_t
 
buf
[
ADDRLEN
*2];

825 i‡(
	`WSAAddªssToSåög
(
ß
, (
sockaddr_ö6
), 
NULL
, 
buf
, (
LPDWORD
)&
buÊí
Ë=
SOCKET_ERROR
)

826 
	`Sockë_îr‹
("WSAAddªssToSåög", 
sock
);

828 
	`wc°ombs
(
addr_°rög
, 
buf
, (addr_string));

832 
sockaddr_ö
 *
sö
 = (sockaddr_ö *)
ß
;

833 
	`öë_¡›
(
sö
->
sö_Ámûy
, &sö->
sö_addr
, 
addr_°rög
, 
ADDRLEN
);

834 
	`•rötf
(&
addr_°rög
[
	`°æí
◊ddr_°rög)], ":%d", 
	`¡ohs
(
sö
->
sö_p‹t
));

836  
addr_°rög
;

837 
	}
}

845 * 
	$Sockë_gë≥î
(
sock
)

847 
sockaddr_ö6
 
ß
;

848 
sockÀn_t
 
ßl
 = (
ß
);

849 
rc
;

851 i‡((
rc
 = 
	`gë≥î«me
(
sock
, (
sockaddr
*)&
ß
, &
ßl
)Ë=
SOCKET_ERROR
)

853 
	`Sockë_îr‹
("gë≥î«me", 
sock
);

857  
	`Sockë_gëadd∫ame
((
sockaddr
*)&
ß
, 
sock
);

858 
	}
}

861 #i‡
deföed
(
Sockë_TEST
)

863 
	$maö
(
¨gc
, *
¨gv
[])

865 
	`Sockë_c⁄√˘
("127.0.0.1", 1883);

866 
	`Sockë_c⁄√˘
("localhost", 1883);

867 
	`Sockë_c⁄√˘
("loadsadsacalhost", 1883);

868 
	}
}

	@paho-c/src/Socket.h

18 #i‡!
deföed
(
SOCKET_H
)

19 
	#SOCKET_H


	)

21 
	~<sys/ty≥s.h
>

23 #i‡
deföed
(
WIN32
Ë|| deföed(
WIN64
)

24 
	~<wösock2.h
>

25 
	~<ws2t˝ù.h
>

26 
	#MAXHOSTNAMELEN
 256

	)

27 #i‡!
deföed
(
SSLSOCKET_H
)

28 
	#EAGAIN
 
WSAEWOULDBLOCK


	)

29 
	#EINTR
 
WSAEINTR


	)

30 
	#EINPROGRESS
 
WSAEINPROGRESS


	)

31 
	#EWOULDBLOCK
 
WSAEWOULDBLOCK


	)

32 
	#ENOTCONN
 
WSAENOTCONN


	)

33 
	#ECONNRESET
 
WSAECONNRESET


	)

34 
	#ETIMEDOUT
 
WAIT_TIMEOUT


	)

36 
	#io˘l
 
io˘lsockë


	)

37 
	#sockÀn_t
 

	)

39 
	#INVALID_SOCKET
 
SOCKET_ERROR


	)

40 
	~<sys/sockë.h
>

41 
	~<sys/∑øm.h
>

42 
	~<sys/time.h
>

43 
	~<sys/£À˘.h
>

44 
	~<√töë/ö.h
>

45 
	~<√töë/t˝.h
>

46 
	~<¨∑/öë.h
>

47 
	~<√tdb.h
>

48 
	~<°dio.h
>

49 
	~<uni°d.h
>

50 
	~<î∫o.h
>

51 
	~<f˙é.h
>

52 
	~<uni°d.h
>

53 
	~<sys/uio.h
>

57 
	#TCPSOCKET_COMPLETE
 0

	)

58 #i‡!
deföed
(
SOCKET_ERROR
)

60 
	#SOCKET_ERROR
 -1

	)

63 
	#TCPSOCKET_INTERRUPTED
 -22

	)

64 
	#SSL_FATAL
 -3

	)

66 #i‡!
deföed
(
INET6_ADDRSTRLEN
)

67 
	#INET6_ADDRSTRLEN
 46

	)

71 #i‡!
deföed
(
max
)

72 
	#max
(
A
,
B
Ë–(AË> (BË? (A):(B))

	)

75 
	~"LökedLi°.h
"

102 
fd_£t
 
	mr£t
,

103 
	mr£t_ßved
;

104 
	mmaxfdp1
;

105 
Li°
* 
	m˛õ¡sds
;

106 
Li°EÀmít
* 
	mcur_˛õ¡sds
;

107 
Li°
* 
	mc⁄√˘_≥ndög
;

108 
Li°
* 
	mwrôe_≥ndög
;

109 
fd_£t
 
	m≥ndög_w£t
;

110 } 
	tSockës
;

113 
Sockë_outInôülize
();

114 
Sockë_outTîmö©e
();

115 
Sockë_gëRódySockë
(
m‹e_w‹k
, 
timevÆ
 *
ç
);

116 
Sockë_gëch
(
sockë
, * 
c
);

117 *
Sockë_gëd©a
(
sockë
, 
byãs
, * 
a˘uÆ_Àn
);

118 
Sockë_putd©as
(
sockë
, * 
buf0
, 
size_t
 
buf0Àn
, 
cou¡
, ** 
buf„rs
, size_t* 
buÊís
, * 
‰ìs
);

119 
Sockë_˛o£
(
sockë
);

120 
Sockë_√w
(* 
addr
, 
p‹t
, * 
sockë
);

122 
Sockë_noPídögWrôes
(
sockë
);

123 * 
Sockë_gë≥î
(
sock
);

125 
Sockë_addPídögWrôe
(
sockë
);

126 
Sockë_˛órPídögWrôe
(
sockë
);

128 
	tSockë_wrôeCom∂ëe
(
	tsockë
);

129 
Sockë_£tWrôeCom∂ëeCÆlback
(
Sockë_wrôeCom∂ëe
*);

	@paho-c/src/SocketBuffer.c

24 
	~"SockëBuf„r.h
"

25 
	~"LökedLi°.h
"

26 
	~"Log.h
"

27 
	~"Mesßges.h
"

28 
	~"SèckTø˚.h
"

30 
	~<°dlib.h
>

31 
	~<°dio.h
>

32 
	~<mem‹y.h
>

34 
	~"Hóp.h
"

36 #i‡
deföed
(
WIN32
Ë|| deföed(
WIN64
)

37 
	#iov_Àn
 
Àn


	)

38 
	#iov_ba£
 
buf


	)

44 
sockë_queue
* 
	gdef_queue
;

49 
Li°
* 
	gqueues
;

54 
Li°
 
	gwrôes
;

62 
	$sockëcom∑ª
(* 
a
, * 
b
)

64  ((
sockë_queue
*)
a
)->
sockë
 =*(*)
b
;

65 
	}
}

71 
	$SockëBuf„r_√wDefQ
()

73 
def_queue
 = 
	`mÆloc
((
sockë_queue
));

74 
def_queue
->
buÊí
 = 1000;

75 
def_queue
->
buf
 = 
	`mÆloc
(def_queue->
buÊí
);

76 
def_queue
->
sockë
 = def_queue->
ödex
 = def_queue->
buÊí
 = def_queue->
d©Æí
 = 0;

77 
	}
}

83 
	$SockëBuf„r_öôülize
()

85 
FUNC_ENTRY
;

86 
	`SockëBuf„r_√wDefQ
();

87 
queues
 = 
	`Li°Inôülize
();

88 
	`Li°Zîo
(&
wrôes
);

89 
FUNC_EXIT
;

90 
	}
}

96 
	$SockëBuf„r_‰ìDefQ
()

98 
	`‰ì
(
def_queue
->
buf
);

99 
	`‰ì
(
def_queue
);

100 
	}
}

106 
	$SockëBuf„r_ãrmö©e
()

108 
Li°EÀmít
* 
cur
 = 
NULL
;

109 
	`Li°Em±y
(&
wrôes
);

111 
FUNC_ENTRY
;

112 
	`Li°NextEÀmít
(
queues
, &
cur
))

113 
	`‰ì
(((
sockë_queue
*)(
cur
->
c⁄ã¡
))->
buf
);

114 
	`Li°Fªe
(
queues
);

115 
	`SockëBuf„r_‰ìDefQ
();

116 
FUNC_EXIT
;

117 
	}
}

124 
	$SockëBuf„r_˛ónup
(
sockë
)

126 
FUNC_ENTRY
;

127 i‡(
	`Li°FödIãm
(
queues
, &
sockë
, 
sockëcom∑ª
))

129 
	`‰ì
(((
sockë_queue
*)(
queues
->
cuºít
->
c⁄ã¡
))->
buf
);

130 
	`Li°Remove
(
queues
, queues->
cuºít
->
c⁄ã¡
);

132 i‡(
def_queue
->
sockë
 == socket)

133 
def_queue
->
sockë
 = def_queue->
ödex
 = def_queue->
hódîÀn
 = def_queue->
d©Æí
 = 0;

134 
FUNC_EXIT
;

135 
	}
}

145 * 
	$SockëBuf„r_gëQueuedD©a
(
sockë
, 
byãs
, * 
a˘uÆ_Àn
)

147 
sockë_queue
* 
queue
 = 
NULL
;

149 
FUNC_ENTRY
;

150 i‡(
	`Li°FödIãm
(
queues
, &
sockë
, 
sockëcom∑ª
))

152 
queue
 = (
sockë_queue
*)(
queues
->
cuºít
->
c⁄ã¡
);

153 *
a˘uÆ_Àn
 = 
queue
->
d©Æí
;

157 *
a˘uÆ_Àn
 = 0;

158 
queue
 = 
def_queue
;

160 i‡(
byãs
 > 
queue
->
buÊí
)

162 i‡(
queue
->
d©Æí
 > 0)

164 * 
√wmem
 = 
	`mÆloc
(
byãs
);

165 
	`mem˝y
(
√wmem
, 
queue
->
buf
, queue->
d©Æí
);

166 
	`‰ì
(
queue
->
buf
);

167 
queue
->
buf
 = 
√wmem
;

170 
queue
->
buf
 = 
	`ªÆloc
(queue->buf, 
byãs
);

171 
queue
->
buÊí
 = 
byãs
;

174 
FUNC_EXIT
;

175  
queue
->
buf
;

176 
	}
}

185 
	$SockëBuf„r_gëQueuedCh¨
(
sockë
, * 
c
)

187 
rc
 = 
SOCKETBUFFER_INTERRUPTED
;

189 
FUNC_ENTRY
;

190 i‡(
	`Li°FödIãm
(
queues
, &
sockë
, 
sockëcom∑ª
))

192 
sockë_queue
* 
queue
 = (sockë_queue*)(
queues
->
cuºít
->
c⁄ã¡
);

193 i‡(
queue
->
ödex
 < queue->
hódîÀn
)

195 *
c
 = 
queue
->
fixed_hódî
[(queue->
ödex
)++];

196 
	`Log
(
TRACE_MAX
, -1, "ödex i†now %d, hódîÀ¿%d", 
queue
->
ödex
, queue->
hódîÀn
);

197 
rc
 = 
SOCKETBUFFER_COMPLETE
;

198 
exô
;

200 i‡(
queue
->
ödex
 > 4)

202 
	`Log
(
LOG_FATAL
, -1, "header isálreadyát fullÜength");

203 
rc
 = 
SOCKET_ERROR
;

204 
exô
;

207 
exô
:

208 
	`FUNC_EXIT_RC
(
rc
);

209  
rc
;

210 
	}
}

218 
	$SockëBuf„r_öãºu±ed
(
sockë
, 
a˘uÆ_Àn
)

220 
sockë_queue
* 
queue
 = 
NULL
;

222 
FUNC_ENTRY
;

223 i‡(
	`Li°FödIãm
(
queues
, &
sockë
, 
sockëcom∑ª
))

224 
queue
 = (
sockë_queue
*)(
queues
->
cuºít
->
c⁄ã¡
);

227 
queue
 = 
def_queue
;

228 
	`Li°Aµíd
(
queues
, 
def_queue
, (
sockë_queue
)+def_queue->
buÊí
);

229 
	`SockëBuf„r_√wDefQ
();

231 
queue
->
ödex
 = 0;

232 
queue
->
d©Æí
 = 
a˘uÆ_Àn
;

233 
FUNC_EXIT
;

234 
	}
}

242 * 
	$SockëBuf„r_com∂ëe
(
sockë
)

244 
FUNC_ENTRY
;

245 i‡(
	`Li°FödIãm
(
queues
, &
sockë
, 
sockëcom∑ª
))

247 
sockë_queue
* 
queue
 = (sockë_queue*)(
queues
->
cuºít
->
c⁄ã¡
);

248 
	`SockëBuf„r_‰ìDefQ
();

249 
def_queue
 = 
queue
;

250 
	`Li°Dëach
(
queues
, 
queue
);

252 
def_queue
->
sockë
 = def_queue->
ödex
 = def_queue->
hódîÀn
 = def_queue->
d©Æí
 = 0;

253 
FUNC_EXIT
;

254  
def_queue
->
buf
;

255 
	}
}

263 
	$SockëBuf„r_queueCh¨
(
sockë
, 
c
)

265 
îr‹
 = 0;

266 
sockë_queue
* 
curq
 = 
def_queue
;

268 
FUNC_ENTRY
;

269 i‡(
	`Li°FödIãm
(
queues
, &
sockë
, 
sockëcom∑ª
))

270 
curq
 = (
sockë_queue
*)(
queues
->
cuºít
->
c⁄ã¡
);

271 i‡(
def_queue
->
sockë
 == 0)

273 
def_queue
->
sockë
 = socket;

274 
def_queue
->
ödex
 = def_queue->
d©Æí
 = 0;

276 i‡(
def_queue
->
sockë
 != socket)

278 
	`Log
(
LOG_FATAL
, -1, "attemptÅoÑeuse socket queue");

279 
îr‹
 = 1;

281 i‡(
curq
->
ödex
 > 4)

283 
	`Log
(
LOG_FATAL
, -1, "socket queue fixed_header field full");

284 
îr‹
 = 1;

286 i‡(!
îr‹
)

288 
curq
->
fixed_hódî
[(curq->
ödex
)++] = 
c
;

289 
curq
->
hódîÀn
 = curq->
ödex
;

291 
	`Log
(
TRACE_MAX
, -1, "queueCh¨: index i†now %d, hódîÀ¿%d", 
curq
->
ödex
, curq->
hódîÀn
);

292 
FUNC_EXIT
;

293 
	}
}

304 #i‡
deföed
(
OPENSSL
)

305 
	$SockëBuf„r_≥ndögWrôe
(
sockë
, 
SSL
* 
s¶
, 
cou¡
, 
iobuf
* 
iovecs
, * 
‰ìs
, 
tŸÆ
, 
byãs
)

307 
	$SockëBuf„r_≥ndögWrôe
(
sockë
, 
cou¡
, 
iobuf
* 
iovecs
, * 
‰ìs
, 
tŸÆ
, 
byãs
)

310 
i
 = 0;

311 
≥ndög_wrôes
* 
pw
 = 
NULL
;

313 
FUNC_ENTRY
;

315 
pw
 = 
	`mÆloc
((
≥ndög_wrôes
));

316 
pw
->
sockë
 = socket;

317 #i‡
	`deföed
(
OPENSSL
)

318 
pw
->
s¶
 = ssl;

320 
pw
->
byãs
 = bytes;

321 
pw
->
tŸÆ
 =Åotal;

322 
pw
->
cou¡
 = count;

323 
i
 = 0; i < 
cou¡
; i++)

325 
pw
->
iovecs
[
i
] = iovecs[i];

326 
pw
->
‰ìs
[
i
] = frees[i];

328 
	`Li°Aµíd
(&
wrôes
, 
pw
, ’wË+ 
tŸÆ
);

329 
FUNC_EXIT
;

330 
	}
}

339 
	$≥ndög_sockëcom∑ª
(* 
a
, * 
b
)

341  ((
≥ndög_wrôes
*)
a
)->
sockë
 =*(*)
b
;

342 
	}
}

350 
≥ndög_wrôes
* 
	$SockëBuf„r_gëWrôe
(
sockë
)

352 
Li°EÀmít
* 
À
 = 
	`Li°FödIãm
(&
wrôes
, &
sockë
, 
≥ndög_sockëcom∑ª
);

353  (
À
Ë? (
≥ndög_wrôes
*)÷e->
c⁄ã¡
Ë: 
NULL
;

354 
	}
}

362 
	$SockëBuf„r_wrôeCom∂ëe
(
sockë
)

364  
	`Li°RemoveIãm
(&
wrôes
, &
sockë
, 
≥ndög_sockëcom∑ª
);

365 
	}
}

375 
≥ndög_wrôes
* 
	$SockëBuf„r_upd©eWrôe
(
sockë
, * 
t›ic
, * 
∑ylﬂd
)

377 
≥ndög_wrôes
* 
pw
 = 
NULL
;

378 
Li°EÀmít
* 
À
 = 
NULL
;

380 
FUNC_ENTRY
;

381 i‡((
À
 = 
	`Li°FödIãm
(&
wrôes
, &
sockë
, 
≥ndög_sockëcom∑ª
)Ë!
NULL
)

383 
pw
 = (
≥ndög_wrôes
*)(
À
->
c⁄ã¡
);

384 i‡(
pw
->
cou¡
 == 4)

386 
pw
->
iovecs
[2].
iov_ba£
 = 
t›ic
;

387 
pw
->
iovecs
[3].
iov_ba£
 = 
∑ylﬂd
;

391 
FUNC_EXIT
;

392  
pw
;

393 
	}
}

	@paho-c/src/SocketBuffer.h

18 #i‡!
deföed
(
SOCKETBUFFER_H
)

19 
	#SOCKETBUFFER_H


	)

21 #i‡
deföed
(
WIN32
Ë|| deföed(
WIN64
)

22 
	~<wösock2.h
>

24 
	~<sys/sockë.h
>

27 #i‡
deföed
(
OPENSSL
)

28 
	~<›ís¶/s¶.h
>

31 #i‡
deföed
(
WIN32
Ë|| deföed(
WIN64
)

32 
WSABUF
 
	tiobuf
;

34 
iovec
 
	tiobuf
;

39 
	msockë
;

40 
	mödex
, 
	mhódîÀn
;

41 
	mfixed_hódî
[5];

42 
	mbuÊí
,

43 
	md©Æí
;

44 * 
	mbuf
;

45 } 
	tsockë_queue
;

49 
	msockë
, 
	mtŸÆ
, 
	mcou¡
;

50 #i‡
deföed
(
OPENSSL
)

51 
SSL
* 
	ms¶
;

53 
	mbyãs
;

54 
iobuf
 
	miovecs
[5];

55 
	m‰ìs
[5];

56 } 
	t≥ndög_wrôes
;

58 
	#SOCKETBUFFER_COMPLETE
 0

	)

59 #i‡!
deföed
(
SOCKET_ERROR
)

60 
	#SOCKET_ERROR
 -1

	)

62 
	#SOCKETBUFFER_INTERRUPTED
 -22

	)

64 
SockëBuf„r_öôülize
();

65 
SockëBuf„r_ãrmö©e
();

66 
SockëBuf„r_˛ónup
(
sockë
);

67 * 
SockëBuf„r_gëQueuedD©a
(
sockë
, 
byãs
, * 
a˘uÆ_Àn
);

68 
SockëBuf„r_gëQueuedCh¨
(
sockë
, * 
c
);

69 
SockëBuf„r_öãºu±ed
(
sockë
, 
a˘uÆ_Àn
);

70 * 
SockëBuf„r_com∂ëe
(
sockë
);

71 
SockëBuf„r_queueCh¨
(
sockë
, 
c
);

73 #i‡
deföed
(
OPENSSL
)

74 
SockëBuf„r_≥ndögWrôe
(
sockë
, 
SSL
* 
s¶
, 
cou¡
, 
iobuf
* 
iovecs
, * 
‰ìs
, 
tŸÆ
, 
byãs
);

76 
SockëBuf„r_≥ndögWrôe
(
sockë
, 
cou¡
, 
iobuf
* 
iovecs
, * 
‰ìs
, 
tŸÆ
, 
byãs
);

78 
≥ndög_wrôes
* 
SockëBuf„r_gëWrôe
(
sockë
);

79 
SockëBuf„r_wrôeCom∂ëe
(
sockë
);

80 
≥ndög_wrôes
* 
SockëBuf„r_upd©eWrôe
(
sockë
, * 
t›ic
, * 
∑ylﬂd
);

	@paho-c/src/StackTrace.c

17 
	~"SèckTø˚.h
"

18 
	~"Log.h
"

19 
	~"LökedLi°.h
"

21 
	~"Clõ¡s.h
"

22 
	~"Thªad.h
"

24 
	~<°dio.h
>

25 
	~<°rög.h
>

26 
	~<°dlib.h
>

28 #i‡
deföed
(
WIN32
Ë|| deföed(
WIN64
)

29 
	#¢¥ötf
 
_¢¥ötf


	)

42 
	#MAX_STACK_DEPTH
 50

	)

43 
	#MAX_FUNCTION_NAME_LENGTH
 30

	)

44 
	#MAX_THREADS
 255

	)

48 
thªad_id_ty≥
 
	mthªadid
;

49 
	m«me
[
MAX_FUNCTION_NAME_LENGTH
];

50 
	mlöe
;

51 } 
	t°ackE¡ry
;

55 
thªad_id_ty≥
 
	mid
;

56 
	mmaxdïth
;

57 
	mcuºít_dïth
;

58 
°ackE¡ry
 
	mˇŒ°ack
[
MAX_STACK_DEPTH
];

59 } 
	tthªadE¡ry
;

61 
	~"SèckTø˚.h
"

63 
	gthªad_cou¡
 = 0;

64 
thªadE¡ry
 
	gthªads
[
MAX_THREADS
];

65 
thªadE¡ry
 *
	gcur_thªad
 = 
NULL
;

67 #i‡
deföed
(
WIN32
Ë|| deföed(
WIN64
)

68 
muãx_ty≥
 
	g°ack_muãx
;

70 
±hªad_muãx_t
 
	g°ack_muãx_°‹e
 = 
PTHREAD_MUTEX_INITIALIZER
;

71 
muãx_ty≥
 
	g°ack_muãx
 = &
°ack_muãx_°‹e
;

75 
	$£tSèck
(
¸óã
)

77 
i
 = -1;

78 
thªad_id_ty≥
 
curid
 = 
	`Thªad_gëid
();

80 
cur_thªad
 = 
NULL
;

81 
i
 = 0; i < 
MAX_THREADS
 && i < 
thªad_cou¡
; ++i)

83 i‡(
thªads
[
i
].
id
 =
curid
)

85 
cur_thªad
 = &
thªads
[
i
];

90 i‡(
cur_thªad
 =
NULL
 && 
¸óã
 && 
thªad_cou¡
 < 
MAX_THREADS
)

92 
cur_thªad
 = &
thªads
[
thªad_cou¡
];

93 
cur_thªad
->
id
 = 
curid
;

94 
cur_thªad
->
maxdïth
 = 0;

95 
cur_thªad
->
cuºít_dïth
 = 0;

96 ++
thªad_cou¡
;

98  
cur_thªad
 !
NULL
;

99 
	}
}

101 
	$SèckTø˚_íåy
(c⁄° * 
«me
, 
löe
, 
åa˚_Àvñ
)

103 
	`Thªad_lock_muãx
(
°ack_muãx
);

104 i‡(!
	`£tSèck
(1))

105 
exô
;

106 i‡(
åa˚_Àvñ
 != -1)

107 
	`Log_°ackTø˚
(
åa˚_Àvñ
, 9, ()
cur_thªad
->
id
, cur_thªad->
cuºít_dïth
, 
«me
, 
löe
, 
NULL
);

108 
	`°∫˝y
(
cur_thªad
->
ˇŒ°ack
[cur_thªad->
cuºít_dïth
].
«me
,Çame, (cur_thread->callstack[0].name)-1);

109 
cur_thªad
->
ˇŒ°ack
[(cur_thªad->
cuºít_dïth
)++].
löe
 =Üine;

110 i‡(
cur_thªad
->
cuºít_dïth
 > cur_thªad->
maxdïth
)

111 
cur_thªad
->
maxdïth
 = cur_thªad->
cuºít_dïth
;

112 i‡(
cur_thªad
->
cuºít_dïth
 >
MAX_STACK_DEPTH
)

113 
	`Log
(
LOG_FATAL
, -1, "Max stack depthÉxceeded");

114 
exô
:

115 
	`Thªad_u∆ock_muãx
(
°ack_muãx
);

116 
	}
}

119 
	$SèckTø˚_exô
(c⁄° * 
«me
, 
löe
, * 
rc
, 
åa˚_Àvñ
)

121 
	`Thªad_lock_muãx
(
°ack_muãx
);

122 i‡(!
	`£tSèck
(0))

123 
exô
;

124 i‡(--(
cur_thªad
->
cuºít_dïth
) < 0)

125 
	`Log
(
LOG_FATAL
, -1, "Möimum sèck dïthÉx˚eded f‹Åhªad %lu", 
cur_thªad
->
id
);

126 i‡(
	`°∫cmp
(
cur_thªad
->
ˇŒ°ack
[cur_thªad->
cuºít_dïth
].
«me
,Çame, (cur_thread->callstack[0].name)-1) != 0)

127 
	`Log
(
LOG_FATAL
, -1, "Sèck mism©ch. E¡ry:%†Exô:%s\n", 
cur_thªad
->
ˇŒ°ack
[cur_thªad->
cuºít_dïth
].
«me
,Çame);

128 i‡(
åa˚_Àvñ
 != -1)

130 i‡(
rc
 =
NULL
)

131 
	`Log_°ackTø˚
(
åa˚_Àvñ
, 10, ()
cur_thªad
->
id
, cur_thªad->
cuºít_dïth
, 
«me
, 
löe
, 
NULL
);

133 
	`Log_°ackTø˚
(
åa˚_Àvñ
, 11, ()
cur_thªad
->
id
, cur_thªad->
cuºít_dïth
, 
«me
, 
löe
, (*)
rc
);

135 
exô
:

136 
	`Thªad_u∆ock_muãx
(
°ack_muãx
);

137 
	}
}

140 
	$SèckTø˚_¥ötSèck
(
FILE
* 
de°
)

142 
FILE
* 
fûe
 = 
°dout
;

143 
t
 = 0;

145 i‡(
de°
)

146 
fûe
 = 
de°
;

147 
t
 = 0;Å < 
thªad_cou¡
; ++t)

149 
thªadE¡ry
 *
cur_thªad
 = &
thªads
[
t
];

151 i‡(
cur_thªad
->
id
 > 0)

153 
i
 = 
cur_thªad
->
cuºít_dïth
 - 1;

155 
	`Ârötf
(
fûe
, "==========Sèπ o‡°ackÅø˚ f‹Åhªad %lu ==========\n", ()
cur_thªad
->
id
);

156 i‡(
i
 >= 0)

158 
	`Ârötf
(
fûe
, "%†(%d)\n", 
cur_thªad
->
ˇŒ°ack
[
i
].
«me
, cur_thªad->ˇŒ°ack[i].
löe
);

159 --
i
 >= 0)

160 
	`Ârötf
(
fûe
, "áà%†(%d)\n", 
cur_thªad
->
ˇŒ°ack
[
i
].
«me
, cur_thªad->ˇŒ°ack[i].
löe
);

162 
	`Ârötf
(
fûe
, "==========End o‡°ackÅø˚ f‹Åhªad %lu ==========\n\n", ()
cur_thªad
->
id
);

165 i‡(
fûe
 !
°dout
 && fûê!
°dîr
 && fûê!
NULL
)

166 
	`f˛o£
(
fûe
);

167 
	}
}

170 * 
	$SèckTø˚_gë
(
thªad_id_ty≥
 
thªadid
)

172 
bufsize
 = 256;

173 * 
buf
 = 
NULL
;

174 
t
 = 0;

176 i‡((
buf
 = 
	`mÆloc
(
bufsize
)Ë=
NULL
)

177 
exô
;

178 
buf
[0] = '\0';

179 
t
 = 0;Å < 
thªad_cou¡
; ++t)

181 
thªadE¡ry
 *
cur_thªad
 = &
thªads
[
t
];

183 i‡(
cur_thªad
->
id
 =
thªadid
)

185 
i
 = 
cur_thªad
->
cuºít_dïth
 - 1;

186 
cuΩos
 = 0;

188 i‡(
i
 >= 0)

190 
cuΩos
 +
	`¢¥ötf
(&
buf
[cuΩos], 
bufsize
 - curpos -1,

191 "%†(%d)\n", 
cur_thªad
->
ˇŒ°ack
[
i
].
«me
, cur_thªad->ˇŒ°ack[i].
löe
);

192 --
i
 >= 0)

193 
cuΩos
 +
	`¢¥ötf
(&
buf
[cuΩos], 
bufsize
 - curpos -1,

194 "áà%†(%d)\n", 
cur_thªad
->
ˇŒ°ack
[
i
].
«me
, cur_thªad->ˇŒ°ack[i].
löe
);

195 i‡(
buf
[--
cuΩos
] == '\n')

196 
buf
[
cuΩos
] = '\0';

201 
exô
:

202  
buf
;

203 
	}
}

	@paho-c/src/StackTrace.h

17 #i‚de‡
STACKTRACE_H_


18 
	#STACKTRACE_H_


	)

20 
	~<°dio.h
>

21 
	~"Log.h
"

22 
	~"Thªad.h
"

24 #i‡
deföed
(
NOSTACKTRACE
)

25 
	#FUNC_ENTRY


	)

26 
	#FUNC_ENTRY_NOLOG


	)

27 
	#FUNC_ENTRY_MED


	)

28 
	#FUNC_ENTRY_MAX


	)

29 
	#FUNC_EXIT


	)

30 
	#FUNC_EXIT_NOLOG


	)

31 
	#FUNC_EXIT_MED


	)

32 
	#FUNC_EXIT_MAX


	)

33 
	#FUNC_EXIT_RC
(
x
)

	)

34 
	#FUNC_EXIT_MED_RC
(
x
)

	)

35 
	#FUNC_EXIT_MAX_RC
(
x
)

	)

37 #i‡
deföed
(
WIN32
Ë|| deföed(
WIN64
)

38 
	#ölöe
 
__ölöe


	)

39 
	#FUNC_ENTRY
 
	`SèckTø˚_íåy
(
__FUNCTION__
, 
__LINE__
, 
TRACE_MINIMUM
)

	)

40 
	#FUNC_ENTRY_NOLOG
 
	`SèckTø˚_íåy
(
__FUNCTION__
, 
__LINE__
, -1)

	)

41 
	#FUNC_ENTRY_MED
 
	`SèckTø˚_íåy
(
__FUNCTION__
, 
__LINE__
, 
TRACE_MEDIUM
)

	)

42 
	#FUNC_ENTRY_MAX
 
	`SèckTø˚_íåy
(
__FUNCTION__
, 
__LINE__
, 
TRACE_MAXIMUM
)

	)

43 
	#FUNC_EXIT
 
	`SèckTø˚_exô
(
__FUNCTION__
, 
__LINE__
, 
NULL
, 
TRACE_MINIMUM
)

	)

44 
	#FUNC_EXIT_NOLOG
 
	`SèckTø˚_exô
(
__FUNCTION__
, 
__LINE__
, -1)

	)

45 
	#FUNC_EXIT_MED
 
	`SèckTø˚_exô
(
__FUNCTION__
, 
__LINE__
, 
NULL
, 
TRACE_MEDIUM
)

	)

46 
	#FUNC_EXIT_MAX
 
	`SèckTø˚_exô
(
__FUNCTION__
, 
__LINE__
, 
NULL
, 
TRACE_MAXIMUM
)

	)

47 
	#FUNC_EXIT_RC
(
x
Ë
	`SèckTø˚_exô
(
__FUNCTION__
, 
__LINE__
, &x, 
TRACE_MINIMUM
)

	)

48 
	#FUNC_EXIT_MED_RC
(
x
Ë
	`SèckTø˚_exô
(
__FUNCTION__
, 
__LINE__
, &x, 
TRACE_MEDIUM
)

	)

49 
	#FUNC_EXIT_MAX_RC
(
x
Ë
	`SèckTø˚_exô
(
__FUNCTION__
, 
__LINE__
, &x, 
TRACE_MAXIMUM
)

	)

51 
	#FUNC_ENTRY
 
	`SèckTø˚_íåy
(
__func__
, 
__LINE__
, 
TRACE_MINIMUM
)

	)

52 
	#FUNC_ENTRY_NOLOG
 
	`SèckTø˚_íåy
(
__func__
, 
__LINE__
, -1)

	)

53 
	#FUNC_ENTRY_MED
 
	`SèckTø˚_íåy
(
__func__
, 
__LINE__
, 
TRACE_MEDIUM
)

	)

54 
	#FUNC_ENTRY_MAX
 
	`SèckTø˚_íåy
(
__func__
, 
__LINE__
, 
TRACE_MAXIMUM
)

	)

55 
	#FUNC_EXIT
 
	`SèckTø˚_exô
(
__func__
, 
__LINE__
, 
NULL
, 
TRACE_MINIMUM
)

	)

56 
	#FUNC_EXIT_NOLOG
 
	`SèckTø˚_exô
(
__func__
, 
__LINE__
, 
NULL
, -1)

	)

57 
	#FUNC_EXIT_MED
 
	`SèckTø˚_exô
(
__func__
, 
__LINE__
, 
NULL
, 
TRACE_MEDIUM
)

	)

58 
	#FUNC_EXIT_MAX
 
	`SèckTø˚_exô
(
__func__
, 
__LINE__
, 
NULL
, 
TRACE_MAXIMUM
)

	)

59 
	#FUNC_EXIT_RC
(
x
Ë
	`SèckTø˚_exô
(
__func__
, 
__LINE__
, &x, 
TRACE_MINIMUM
)

	)

60 
	#FUNC_EXIT_MED_RC
(
x
Ë
	`SèckTø˚_exô
(
__func__
, 
__LINE__
, &x, 
TRACE_MEDIUM
)

	)

61 
	#FUNC_EXIT_MAX_RC
(
x
Ë
	`SèckTø˚_exô
(
__func__
, 
__LINE__
, &x, 
TRACE_MAXIMUM
)

	)

65 
SèckTø˚_íåy
(c⁄° * 
«me
, 
löe
, 
åa˚
);

66 
SèckTø˚_exô
(c⁄° * 
«me
, 
löe
, * 
ªtu∫_vÆue
, 
åa˚
);

68 
SèckTø˚_¥ötSèck
(
FILE
* 
de°
);

69 * 
SèckTø˚_gë
(
thªad_id_ty≥
);

	@paho-c/src/Thread.c

28 
	~"Thªad.h
"

29 #i‡
deföed
(
THREAD_UNIT_TESTS
)

30 
	#NOSTACKTRACE


	)

32 
	~"SèckTø˚.h
"

34 #unde‡
mÆloc


35 #unde‡
ªÆloc


36 #unde‡
‰ì


38 #i‡!
deföed
(
WIN32
Ë&& !deföed(
WIN64
)

39 
	~<î∫o.h
>

40 
	~<uni°d.h
>

41 
	~<sys/time.h
>

42 
	~<f˙é.h
>

43 
	~<°dio.h
>

44 
	~<sys/°©.h
>

45 
	~<limôs.h
>

47 
	~<mem‹y.h
>

48 
	~<°dlib.h
>

56 
thªad_ty≥
 
	$Thªad_°¨t
(
thªad_‚
 
‚
, * 
∑ømëî
)

58 #i‡
	`deföed
(
WIN32
Ë|| deföed(
WIN64
)

59 
thªad_ty≥
 
thªad
 = 
NULL
;

61 
thªad_ty≥
 
thªad
 = 0;

62 
±hªad_©å_t
 
©å
;

65 
FUNC_ENTRY
;

66 #i‡
	`deföed
(
WIN32
Ë|| deföed(
WIN64
)

67 
thªad
 = 
	`Cª©eThªad
(
NULL
, 0, 
‚
, 
∑ømëî
, 0, NULL);

69 
	`±hªad_©å_öô
(&
©å
);

70 
	`±hªad_©å_£tdëach°©e
(&
©å
, 
PTHREAD_CREATE_DETACHED
);

71 i‡(
	`±hªad_¸óã
(&
thªad
, &
©å
, 
‚
, 
∑ømëî
) != 0)

72 
thªad
 = 0;

73 
	`±hªad_©å_de°roy
(&
©å
);

75 
FUNC_EXIT
;

76  
thªad
;

77 
	}
}

84 
muãx_ty≥
 
	$Thªad_¸óã_muãx
()

86 
muãx_ty≥
 
muãx
 = 
NULL
;

87 
rc
 = 0;

89 
FUNC_ENTRY
;

90 #i‡
	`deföed
(
WIN32
Ë|| deföed(
WIN64
)

91 
muãx
 = 
	`Cª©eMuãx
(
NULL
, 0, NULL);

93 
muãx
 = 
	`mÆloc
((
±hªad_muãx_t
));

94 
rc
 = 
	`±hªad_muãx_öô
(
muãx
, 
NULL
);

96 
	`FUNC_EXIT_RC
(
rc
);

97  
muãx
;

98 
	}
}

106 
	$Thªad_lock_muãx
(
muãx_ty≥
 
muãx
)

108 
rc
 = -1;

111 #i‡
	`deföed
(
WIN32
Ë|| deföed(
WIN64
)

113 
rc
 = 
	`WaôF‹SögÀObje˘
(
muãx
, 
INFINITE
);

115 
rc
 = 
	`±hªad_muãx_lock
(
muãx
);

118  
rc
;

119 
	}
}

127 
	$Thªad_u∆ock_muãx
(
muãx_ty≥
 
muãx
)

129 
rc
 = -1;

132 #i‡
	`deföed
(
WIN32
Ë|| deföed(
WIN64
)

134 i‡(
	`Rñó£Muãx
(
muãx
) == 0)

135 
rc
 = 
	`GëLa°Eº‹
();

137 
rc
 = 0;

139 
rc
 = 
	`±hªad_muãx_u∆ock
(
muãx
);

142  
rc
;

143 
	}
}

150 
	$Thªad_de°roy_muãx
(
muãx_ty≥
 
muãx
)

152 
rc
 = 0;

154 
FUNC_ENTRY
;

155 #i‡
	`deföed
(
WIN32
Ë|| deföed(
WIN64
)

156 
rc
 = 
	`Clo£H™dÀ
(
muãx
);

158 
rc
 = 
	`±hªad_muãx_de°roy
(
muãx
);

159 
	`‰ì
(
muãx
);

161 
	`FUNC_EXIT_RC
(
rc
);

162 
	}
}

169 
thªad_id_ty≥
 
	$Thªad_gëid
()

171 #i‡
	`deföed
(
WIN32
Ë|| deföed(
WIN64
)

172  
	`GëCuºítThªadId
();

174  
	`±hªad_£lf
();

176 
	}
}

179 #i‡
deföed
(
USE_NAMED_SEMAPHORES
)

180 
	#MAX_NAMED_SEMAPHORES
 10

	)

182 
	g«med_£m≠h‹e_cou¡
 = 0;

186 
£m_ty≥
 
	m£m
;

187 
	m«me
[
NAME_MAX
-4];

188 } 
	g«med_£m≠h‹es
[
MAX_NAMED_SEMAPHORES
];

197 
£m_ty≥
 
	$Thªad_¸óã_£m
()

199 
£m_ty≥
 
£m
 = 
NULL
;

200 
rc
 = 0;

202 
FUNC_ENTRY
;

203 #i‡
	`deföed
(
WIN32
Ë|| deföed(
WIN64
)

204 
£m
 = 
	`Cª©eEvít
(

205 
NULL
,

206 
FALSE
,

207 
FALSE
,

208 
NULL


210 #ñi‡
	`deföed
(
USE_NAMED_SEMAPHORES
)

211 i‡(
«med_£m≠h‹e_cou¡
 == 0)

212 
	`mem£t
(
«med_£m≠h‹es
, '\0', (named_semaphores));

213 * 
«me
 = &(
	`°ºchr
(
	`ãm≤am
("/", "MQTT"), '/'))[1];

214 i‡((
£m
 = 
	`£m_›í
(
«me
, 
O_CREAT
, 
S_IRWXU
, 0)Ë=
SEM_FAILED
)

215 
rc
 = -1;

218 
i
;

220 
«med_£m≠h‹e_cou¡
++;

221 
i
 = 0; i < 
MAX_NAMED_SEMAPHORES
; ++i)

223 i‡(
«med_£m≠h‹es
[
i
].
«me
[0] == '\0')

225 
«med_£m≠h‹es
[
i
].
£m
 = sem;

226 
	`°r˝y
(
«med_£m≠h‹es
[
i
].
«me
,Çame);

232 
£m
 = 
	`mÆloc
((
£m_t
));

233 
rc
 = 
	`£m_öô
(
£m
, 0, 0);

235 
	`FUNC_EXIT_RC
(
rc
);

236  
£m
;

237 
	}
}

246 
	$Thªad_waô_£m
(
£m_ty≥
 
£m
, 
timeout
)

251 
rc
 = -1;

252 #i‡!
	`deföed
(
WIN32
Ë&& !deföed(
WIN64
)

253 
	#USE_TRYWAIT


	)

254 #i‡
	`deföed
(
USE_TRYWAIT
)

255 
i
 = 0;

256 
öãrvÆ
 = 10000;

257 
cou¡
 = (1000 * 
timeout
Ë/ 
öãrvÆ
;

259 
time•ec
 
ts
;

263 
FUNC_ENTRY
;

264 #i‡
	`deföed
(
WIN32
Ë|| deföed(
WIN64
)

265 
rc
 = 
	`WaôF‹SögÀObje˘
(
£m
, 
timeout
);

266 #ñi‡
	`deföed
(
USE_TRYWAIT
)

267 ++
i
 < 
cou¡
 && (
rc
 = 
	`£m_åywaô
(
£m
)) != 0)

269 i‡(
rc
 =-1 && (‘¯
î∫o
Ë!
EAGAIN
))

271 
rc
 = 0;

274 
	`u¶ìp
(
öãrvÆ
);

277 i‡(
	`˛ock_gëtime
(
CLOCK_REALTIME
, &
ts
) != -1)

279 
ts
.
tv_£c
 +
timeout
;

280 
rc
 = 
	`£m_timedwaô
(
£m
, &
ts
);

284 
	`FUNC_EXIT_RC
(
rc
);

285  
rc
;

286 
	}
}

294 
	$Thªad_check_£m
(
£m_ty≥
 
£m
)

296 #i‡
	`deföed
(
WIN32
Ë|| deföed(
WIN64
)

297  
	`WaôF‹SögÀObje˘
(
£m
, 0Ë=
WAIT_OBJECT_0
;

299 
£mvÆ
 = -1;

300 
	`£m_gëvÆue
(
£m
, &
£mvÆ
);

301  
£mvÆ
 > 0;

303 
	}
}

311 
	$Thªad_po°_£m
(
£m_ty≥
 
£m
)

313 
rc
 = 0;

315 
FUNC_ENTRY
;

316 #i‡
	`deföed
(
WIN32
Ë|| deföed(
WIN64
)

317 i‡(
	`SëEvít
(
£m
) == 0)

318 
rc
 = 
	`GëLa°Eº‹
();

320 i‡(
	`£m_po°
(
£m
) == -1)

321 
rc
 = 
î∫o
;

324 
	`FUNC_EXIT_RC
(
rc
);

325  
rc
;

326 
	}
}

333 
	$Thªad_de°roy_£m
(
£m_ty≥
 
£m
)

335 
rc
 = 0;

337 
FUNC_ENTRY
;

338 #i‡
	`deföed
(
WIN32
Ë|| deföed(
WIN64
)

339 
rc
 = 
	`Clo£H™dÀ
(
£m
);

340 #ñi‡
	`deföed
(
USE_NAMED_SEMAPHORES
)

341 
i
;

342 
rc
 = 
	`£m_˛o£
(
£m
);

343 
i
 = 0; i < 
MAX_NAMED_SEMAPHORES
; ++i)

345 i‡(
«med_£m≠h‹es
[
i
].
£m
 == sem)

347 
rc
 = 
	`£m_u∆ök
(
«med_£m≠h‹es
[
i
].
«me
);

348 
«med_£m≠h‹es
[
i
].
«me
[0] = '\0';

352 
«med_£m≠h‹e_cou¡
--;

354 
rc
 = 
	`£m_de°roy
(
£m
);

355 
	`‰ì
(
£m
);

357 
	`FUNC_EXIT_RC
(
rc
);

358  
rc
;

359 
	}
}

362 #i‡!
deföed
(
WIN32
Ë&& !deföed(
WIN64
)

367 
c⁄d_ty≥
 
	$Thªad_¸óã_c⁄d
()

369 
c⁄d_ty≥
 
c⁄dv¨
 = 
NULL
;

370 
rc
 = 0;

372 
FUNC_ENTRY
;

373 
c⁄dv¨
 = 
	`mÆloc
((
c⁄d_ty≥_°ru˘
));

374 
rc
 = 
	`±hªad_c⁄d_öô
(&
c⁄dv¨
->
c⁄d
, 
NULL
);

375 
rc
 = 
	`±hªad_muãx_öô
(&
c⁄dv¨
->
muãx
, 
NULL
);

377 
	`FUNC_EXIT_RC
(
rc
);

378  
c⁄dv¨
;

379 
	}
}

385 
	$Thªad_sig«l_c⁄d
(
c⁄d_ty≥
 
c⁄dv¨
)

387 
rc
 = 0;

389 
	`±hªad_muãx_lock
(&
c⁄dv¨
->
muãx
);

390 
rc
 = 
	`±hªad_c⁄d_sig«l
(&
c⁄dv¨
->
c⁄d
);

391 
	`±hªad_muãx_u∆ock
(&
c⁄dv¨
->
muãx
);

393  
rc
;

394 
	}
}

400 
	$Thªad_waô_c⁄d
(
c⁄d_ty≥
 
c⁄dv¨
, 
timeout
)

402 
FUNC_ENTRY
;

403 
rc
 = 0;

404 
time•ec
 
c⁄d_timeout
;

405 
timevÆ
 
cur_time
;

407 
	`gëtimeofday
(&
cur_time
, 
NULL
);

409 
c⁄d_timeout
.
tv_£c
 = 
cur_time
.tv_£¯+ 
timeout
;

410 
c⁄d_timeout
.
tv_n£c
 = 
cur_time
.
tv_u£c
 * 1000;

412 
	`±hªad_muãx_lock
(&
c⁄dv¨
->
muãx
);

413 
rc
 = 
	`±hªad_c⁄d_timedwaô
(&
c⁄dv¨
->
c⁄d
, &c⁄dv¨->
muãx
, &
c⁄d_timeout
);

414 
	`±hªad_muãx_u∆ock
(&
c⁄dv¨
->
muãx
);

416 
	`FUNC_EXIT_RC
(
rc
);

417  
rc
;

418 
	}
}

424 
	$Thªad_de°roy_c⁄d
(
c⁄d_ty≥
 
c⁄dv¨
)

426 
rc
 = 0;

428 
rc
 = 
	`±hªad_muãx_de°roy
(&
c⁄dv¨
->
muãx
);

429 
rc
 = 
	`±hªad_c⁄d_de°roy
(&
c⁄dv¨
->
c⁄d
);

430 
	`‰ì
(
c⁄dv¨
);

432  
rc
;

433 
	}
}

437 #i‡
deföed
(
THREAD_UNIT_TESTS
)

439 
	~<°dio.h
>

441 
thªad_ªtu∫_ty≥
 
	$£c⁄d¨y
(* 
n
)

443 
rc
 = 0;

452 
£m_ty≥
 
£m
 = 
n
;

454 
	`¥ötf
("SecondaryÅhreadáboutÅo wait\n");

455 
rc
 = 
	`Thªad_waô_£m
(
£m
);

456 
	`¥ötf
("Sec⁄d¨yÅhªadÑëu∫ed from waô %d\n", 
rc
);

458 
	`¥ötf
("SecondaryÅhreadáboutÅo wait\n");

459 
rc
 = 
	`Thªad_waô_£m
(
£m
);

460 
	`¥ötf
("Sec⁄d¨yÅhªadÑëu∫ed from waô %d\n", 
rc
);

461 
	`¥ötf
("Sec⁄d¨y check sem %d\n", 
	`Thªad_check_£m
(
£m
));

464 
	}
}

467 
	$maö
(
¨gc
, *
¨gv
[])

469 
rc
 = 0;

471 
£m_ty≥
 
£m
 = 
	`Thªad_¸óã_£m
();

473 
	`¥ötf
("check sem %d\n", 
	`Thªad_check_£m
(
£m
));

475 
	`¥ötf
("post secondary\n");

476 
rc
 = 
	`Thªad_po°_£m
(
£m
);

477 
	`¥ötf
("po°ed sec⁄d¨y %d\n", 
rc
);

479 
	`¥ötf
("check sem %d\n", 
	`Thªad_check_£m
(
£m
));

481 
	`¥ötf
("Starting secondaryÅhread\n");

482 
	`Thªad_°¨t
(
£c⁄d¨y
, (*)
£m
);

484 
	`¶ìp
(3);

485 
	`¥ötf
("check sem %d\n", 
	`Thªad_check_£m
(
£m
));

487 
	`¥ötf
("post secondary\n");

488 
rc
 = 
	`Thªad_po°_£m
(
£m
);

489 
	`¥ötf
("po°ed sec⁄d¨y %d\n", 
rc
);

491 
	`¶ìp
(3);

493 
	`¥ötf
("MainÅhreadÉnding\n");

494 
	}
}

	@paho-c/src/Thread.h

19 #i‡!
deföed
(
THREAD_H
)

20 
	#THREAD_H


	)

22 #i‡
deföed
(
WIN32
Ë|| deföed(
WIN64
)

23 
	~<Wödows.h
>

24 
	#thªad_ty≥
 
HANDLE


	)

25 
	#thªad_id_ty≥
 
DWORD


	)

26 
	#thªad_ªtu∫_ty≥
 
DWORD


	)

27 
	#thªad_‚
 
LPTHREAD_START_ROUTINE


	)

28 
	#muãx_ty≥
 
HANDLE


	)

29 
	#c⁄d_ty≥
 
HANDLE


	)

30 
	#£m_ty≥
 
HANDLE


	)

32 
	~<±hªad.h
>

33 
	~<£m≠h‹e.h
>

34 
	#thªad_ty≥
 
±hªad_t


	)

35 
	#thªad_id_ty≥
 
±hªad_t


	)

36 
	#thªad_ªtu∫_ty≥
 *

	)

37 
	$thªad_ªtu∫_ty≥
 (*
	tthªad_‚
)(*);

38 
	#muãx_ty≥
 
±hªad_muãx_t
*

	)

39 °ru˘ { 
±hªad_c⁄d_t
 
c⁄d
; 
±hªad_muãx_t
 
muãx
; } 
	tc⁄d_ty≥_°ru˘
;

40 
c⁄d_ty≥_°ru˘
 *
	tc⁄d_ty≥
;

41 
£m_t
 *
	t£m_ty≥
;

43 
c⁄d_ty≥
 
	`Thªad_¸óã_c⁄d
();

44 
	`Thªad_sig«l_c⁄d
(
c⁄d_ty≥
);

45 
	`Thªad_waô_c⁄d
(
c⁄d_ty≥
 
c⁄dv¨
, 
timeout
);

46 
	`Thªad_de°roy_c⁄d
(
c⁄d_ty≥
);

49 
thªad_ty≥
 
	`Thªad_°¨t
(
thªad_‚
, *);

51 
muãx_ty≥
 
	`Thªad_¸óã_muãx
();

52 
	`Thªad_lock_muãx
(
muãx_ty≥
);

53 
	`Thªad_u∆ock_muãx
(
muãx_ty≥
);

54 
	`Thªad_de°roy_muãx
(
muãx_ty≥
);

56 
thªad_id_ty≥
 
	`Thªad_gëid
();

58 
£m_ty≥
 
	`Thªad_¸óã_£m
();

59 
	`Thªad_waô_£m
(
£m_ty≥
 
£m
, 
timeout
);

60 
	`Thªad_check_£m
(
£m_ty≥
 
£m
);

61 
	`Thªad_po°_£m
(
£m_ty≥
 
£m
);

62 
	`Thªad_de°roy_£m
(
£m_ty≥
 
£m
);

	@paho-c/src/Tree.c

24 
	#NO_HEAP_TRACKING
 1

	)

26 
	~"Tªe.h
"

28 
	~<°dlib.h
>

29 
	~<°dio.h
>

30 
	~<°rög.h
>

31 
	~<mem‹y.h
>

33 
	~"Hóp.h
"

36 
TªeInôülizeNoMÆloc
(
Tªe
* 
aTªe
, (*
com∑ª
)(*, *, ))

38 
	`mem£t
(
aTªe
, '\0', (
Tªe
));

39 
aTªe
->
hóp_åackög
 = 1;

40 
aTªe
->
ödex
[0].
com∑ª
 = compare;

41 
aTªe
->
ödexes
 = 1;

42 
	}
}

48 
Tªe
* 
TªeInôülize
((*
com∑ª
)(*, *, ))

50 #i‡
	`deföed
(
UNIT_TESTS
)

51 
Tªe
* 
√wt
 = 
	`mÆloc
((Tree));

53 
Tªe
* 
√wt
 = 
	`mymÆloc
(
__FILE__
, 
__LINE__
, (Tree));

55 
	`TªeInôülizeNoMÆloc
(
√wt
, 
com∑ª
);

56  
√wt
;

57 
	}
}

60 
TªeAddIndex
(
Tªe
* 
aTªe
, (*
com∑ª
)(*, *, ))

62 
aTªe
->
ödex
[aTªe->
ödexes
].
com∑ª
 = compare;

63 ++(
aTªe
->
ödexes
);

64 
	}
}

67 
	$TªeFªe
(
Tªe
* 
aTªe
)

69 #i‡
	`deföed
(
UNIT_TESTS
)

70 
	`‰ì
(
aTªe
);

72 (
aTªe
->
hóp_åackög
Ë? 
	`my‰ì
(
__FILE__
, 
__LINE__
,áTªeË: 
	`‰ì
(aTree);

74 
	}
}

77 
	#LEFT
 0

	)

78 
	#RIGHT
 1

	)

79 #i‡!
deföed
(
max
)

80 
	#max
(
a
, 
b
Ë◊ > bË?á : b;

	)

85 
	$isRed
(
Node
* 
aNode
)

87  (
aNode
 !
NULL
Ë&& (aNode->
ªd
);

88 
	}
}

91 
	$isBœck
(
Node
* 
aNode
)

93  (
aNode
 =
NULL
Ë|| (aNode->
ªd
 == 0);

94 
	}
}

97 
	$TªeWÆk
(
Node
* 
cu∫ode
, 
dïth
)

99 i‡(
cu∫ode
)

101 
À·
 = 
	`TªeWÆk
(
cu∫ode
->
chûd
[
LEFT
], 
dïth
+1);

102 
right
 = 
	`TªeWÆk
(
cu∫ode
->
chûd
[
RIGHT
], 
dïth
+1);

103 
dïth
 = 
	`max
(
À·
, 
right
);

104 i‡(
cu∫ode
->
ªd
)

113  
dïth
;

114 
	}
}

117 
	$TªeMaxDïth
(
Tªe
 *
aTªe
)

119 
rc
 = 
	`TªeWÆk
(
aTªe
->
ödex
[0].
roŸ
, 0);

125  
rc
;

126 
	}
}

129 
	$TªeRŸ©e
(
Tªe
* 
aTªe
, 
Node
* 
cu∫ode
, 
dúe˘i⁄
, 
ödex
)

131 
Node
* 
Ÿhî
 = 
cu∫ode
->
chûd
[!
dúe˘i⁄
];

133 
cu∫ode
->
chûd
[!
dúe˘i⁄
] = 
Ÿhî
->child[direction];

134 i‡(
Ÿhî
->
chûd
[
dúe˘i⁄
] !
NULL
)

135 
Ÿhî
->
chûd
[
dúe˘i⁄
]->
∑ª¡
 = 
cu∫ode
;

136 
Ÿhî
->
∑ª¡
 = 
cu∫ode
->parent;

137 i‡(
cu∫ode
->
∑ª¡
 =
NULL
)

138 
aTªe
->
ödex
[ödex].
roŸ
 = 
Ÿhî
;

139 i‡(
cu∫ode
 =cu∫ode->
∑ª¡
->
chûd
[
dúe˘i⁄
])

140 
cu∫ode
->
∑ª¡
->
chûd
[
dúe˘i⁄
] = 
Ÿhî
;

142 
cu∫ode
->
∑ª¡
->
chûd
[!
dúe˘i⁄
] = 
Ÿhî
;

143 
Ÿhî
->
chûd
[
dúe˘i⁄
] = 
cu∫ode
;

144 
cu∫ode
->
∑ª¡
 = 
Ÿhî
;

145 
	}
}

148 
Node
* 
	$TªeBAASub
(
Tªe
* 
aTªe
, 
Node
* 
cu∫ode
, 
which
, 
ödex
)

150 
Node
* 
un˛e
 = 
cu∫ode
->
∑ª¡
->∑ª¡->
chûd
[
which
];

152 i‡(
	`isRed
(
un˛e
))

154 
cu∫ode
->
∑ª¡
->
ªd
 = 
un˛e
->red = 0;

155 
cu∫ode
 = cu∫ode->
∑ª¡
->parent;

156 
cu∫ode
->
ªd
 = 1;

160 i‡(
cu∫ode
 =cu∫ode->
∑ª¡
->
chûd
[
which
])

162 
cu∫ode
 = cu∫ode->
∑ª¡
;

163 
	`TªeRŸ©e
(
aTªe
, 
cu∫ode
, !
which
, 
ödex
);

165 
cu∫ode
->
∑ª¡
->
ªd
 = 0;

166 
cu∫ode
->
∑ª¡
->∑ª¡->
ªd
 = 1;

167 
	`TªeRŸ©e
(
aTªe
, 
cu∫ode
->
∑ª¡
->∑ª¡, 
which
, 
ödex
);

169  
cu∫ode
;

170 
	}
}

173 
	$TªeBÆ™˚A·îAdd
(
Tªe
* 
aTªe
, 
Node
* 
cu∫ode
, 
ödex
)

175 
cu∫ode
 && 
	`isRed
(cu∫ode->
∑ª¡
) && curnode->parent->parent)

177 i‡(
cu∫ode
->
∑ª¡
 =cu∫ode->∑ª¡->∑ª¡->
chûd
[
LEFT
])

178 
cu∫ode
 = 
	`TªeBAASub
(
aTªe
, cu∫ode, 
RIGHT
, 
ödex
);

180 
cu∫ode
 = 
	`TªeBAASub
(
aTªe
, cu∫ode, 
LEFT
, 
ödex
);

182 
aTªe
->
ödex
[ödex].
roŸ
->
ªd
 = 0;

183 
	}
}

192 * 
	$TªeAddByIndex
(
Tªe
* 
aTªe
, * 
c⁄ã¡
, 
size
, 
ödex
)

194 
Node
* 
cuΩ¨ít
 = 
NULL
;

195 
Node
* 
cu∫ode
 = 
aTªe
->
ödex
[ödex].
roŸ
;

196 
Node
* 
√wñ
 = 
NULL
;

197 
À·
 = 0;

198 
ªsu…
 = 1;

199 * 
rc
 = 
NULL
;

201 
cu∫ode
)

203 
ªsu…
 = 
aTªe
->
ödex
[ödex].
	`com∑ª
(
cu∫ode
->
c⁄ã¡
, content, 1);

204 
À·
 = (
ªsu…
 > 0);

205 i‡(
ªsu…
 == 0)

209 
cuΩ¨ít
 = 
cu∫ode
;

210 
cu∫ode
 = cu∫ode->
chûd
[
À·
];

214 i‡(
ªsu…
 == 0)

216 i‡(
aTªe
->
Ælow_du∂iˇãs
)

217 
	`exô
(-99);

219 
√wñ
 = 
cu∫ode
;

220 
rc
 = 
√wñ
->
c⁄ã¡
;

221 i‡(
ödex
 == 0)

222 
aTªe
->
size
 +(sizê- 
cu∫ode
->size);

227 #i‡
	`deföed
(
UNIT_TESTS
)

228 
√wñ
 = 
	`mÆloc
((
Node
));

230 
√wñ
 = (
aTªe
->
hóp_åackög
Ë? 
	`mymÆloc
(
__FILE__
, 
__LINE__
, (
Node
)Ë: 
	`mÆloc
((Node));

232 
	`mem£t
(
√wñ
, '\0', (
Node
));

233 i‡(
cuΩ¨ít
)

234 
cuΩ¨ít
->
chûd
[
À·
] = 
√wñ
;

236 
aTªe
->
ödex
[ödex].
roŸ
 = 
√wñ
;

237 
√wñ
->
∑ª¡
 = 
cuΩ¨ít
;

238 
√wñ
->
ªd
 = 1;

239 i‡(
ödex
 == 0)

241 ++(
aTªe
->
cou¡
);

242 
aTªe
->
size
 += size;

245 
√wñ
->
c⁄ã¡
 = content;

246 
√wñ
->
size
 = size;

247 
	`TªeBÆ™˚A·îAdd
(
aTªe
, 
√wñ
, 
ödex
);

248  
rc
;

249 
	}
}

252 * 
	$TªeAdd
(
Tªe
* 
aTªe
, * 
c⁄ã¡
, 
size
)

254 * 
rc
 = 
NULL
;

255 
i
;

257 
i
 = 0; i < 
aTªe
->
ödexes
; ++i)

258 
rc
 = 
	`TªeAddByIndex
(
aTªe
, 
c⁄ã¡
, 
size
, 
i
);

260  
rc
;

261 
	}
}

264 
Node
* 
	$TªeFödIndex1
(
Tªe
* 
aTªe
, * 
key
, 
ödex
, 
vÆue
)

266 
ªsu…
 = 0;

267 
Node
* 
cu∫ode
 = 
aTªe
->
ödex
[ödex].
roŸ
;

269 
cu∫ode
)

271 
ªsu…
 = 
aTªe
->
ödex
[ödex].
	`com∑ª
(
cu∫ode
->
c⁄ã¡
, 
key
, 
vÆue
);

272 i‡(
ªsu…
 == 0)

275 
cu∫ode
 = cu∫ode->
chûd
[
ªsu…
 > 0];

277  
cu∫ode
;

278 
	}
}

281 
Node
* 
	$TªeFödIndex
(
Tªe
* 
aTªe
, * 
key
, 
ödex
)

283  
	`TªeFödIndex1
(
aTªe
, 
key
, 
ödex
, 0);

284 
	}
}

287 
Node
* 
	$TªeFödC⁄ã¡Index
(
Tªe
* 
aTªe
, * 
key
, 
ödex
)

289  
	`TªeFödIndex1
(
aTªe
, 
key
, 
ödex
, 1);

290 
	}
}

293 
Node
* 
	$TªeFöd
(
Tªe
* 
aTªe
, * 
key
)

295  
	`TªeFödIndex
(
aTªe
, 
key
, 0);

296 
	}
}

299 
Node
* 
	$TªeMöimum
(
Node
* 
cu∫ode
)

301 i‡(
cu∫ode
)

302 
cu∫ode
->
chûd
[
LEFT
])

303 
cu∫ode
 = cu∫ode->
chûd
[
LEFT
];

304  
cu∫ode
;

305 
	}
}

308 
Node
* 
	$TªeSuc˚ss‹
(
Node
* 
cu∫ode
)

310 i‡(
cu∫ode
->
chûd
[
RIGHT
])

311 
cu∫ode
 = 
	`TªeMöimum
(cu∫ode->
chûd
[
RIGHT
]);

314 
Node
* 
cuΩ¨ít
 = 
cu∫ode
->
∑ª¡
;

315 
cuΩ¨ít
 && 
cu∫ode
 =cuΩ¨ít->
chûd
[
RIGHT
])

317 
cu∫ode
 = 
cuΩ¨ít
;

318 
cuΩ¨ít
 = cuΩ¨ít->
∑ª¡
;

320 
cu∫ode
 = 
cuΩ¨ít
;

322  
cu∫ode
;

323 
	}
}

326 
Node
* 
	$TªeNextEÀmítIndex
(
Tªe
* 
aTªe
, 
Node
* 
cu∫ode
, 
ödex
)

328 i‡(
cu∫ode
 =
NULL
)

329 
cu∫ode
 = 
	`TªeMöimum
(
aTªe
->
ödex
[ödex].
roŸ
);

331 
cu∫ode
 = 
	`TªeSuc˚ss‹
(curnode);

332  
cu∫ode
;

333 
	}
}

336 
Node
* 
	$TªeNextEÀmít
(
Tªe
* 
aTªe
, 
Node
* 
cu∫ode
)

338  
	`TªeNextEÀmítIndex
(
aTªe
, 
cu∫ode
, 0);

339 
	}
}

342 
Node
* 
	$TªeBARSub
(
Tªe
* 
aTªe
, 
Node
* 
cu∫ode
, 
which
, 
ödex
)

344 
Node
* 
siblög
 = 
cu∫ode
->
∑ª¡
->
chûd
[
which
];

346 i‡(
	`isRed
(
siblög
))

348 
siblög
->
ªd
 = 0;

349 
cu∫ode
->
∑ª¡
->
ªd
 = 1;

350 
	`TªeRŸ©e
(
aTªe
, 
cu∫ode
->
∑ª¡
, !
which
, 
ödex
);

351 
siblög
 = 
cu∫ode
->
∑ª¡
->
chûd
[
which
];

353 i‡(!
siblög
)

354 
cu∫ode
 = cu∫ode->
∑ª¡
;

355 i‡(
	`isBœck
(
siblög
->
chûd
[!
which
]) && isBlack(sibling->child[which]))

357 
siblög
->
ªd
 = 1;

358 
cu∫ode
 = cu∫ode->
∑ª¡
;

362 i‡(
	`isBœck
(
siblög
->
chûd
[
which
]))

364 
siblög
->
chûd
[!
which
]->
ªd
 = 0;

365 
siblög
->
ªd
 = 1;

366 
	`TªeRŸ©e
(
aTªe
, 
siblög
, 
which
, 
ödex
);

367 
siblög
 = 
cu∫ode
->
∑ª¡
->
chûd
[
which
];

369 
siblög
->
ªd
 = 
cu∫ode
->
∑ª¡
->red;

370 
cu∫ode
->
∑ª¡
->
ªd
 = 0;

371 
siblög
->
chûd
[
which
]->
ªd
 = 0;

372 
	`TªeRŸ©e
(
aTªe
, 
cu∫ode
->
∑ª¡
, !
which
, 
ödex
);

373 
cu∫ode
 = 
aTªe
->
ödex
[ödex].
roŸ
;

375  
cu∫ode
;

376 
	}
}

379 
	$TªeBÆ™˚A·îRemove
(
Tªe
* 
aTªe
, 
Node
* 
cu∫ode
, 
ödex
)

381 
cu∫ode
 !
aTªe
->
ödex
[ödex].
roŸ
 && 
	`isBœck
(curnode))

384 i‡(((
cu∫ode
->
c⁄ã¡
Ë? cu∫odê: 
NULL
Ë=cu∫ode->
∑ª¡
->
chûd
[
LEFT
])

385 
cu∫ode
 = 
	`TªeBARSub
(
aTªe
, cu∫ode, 
RIGHT
, 
ödex
);

387 
cu∫ode
 = 
	`TªeBARSub
(
aTªe
, cu∫ode, 
LEFT
, 
ödex
);

389 
cu∫ode
->
ªd
 = 0;

390 
	}
}

398 * 
	$TªeRemoveNodeIndex
(
Tªe
* 
aTªe
, 
Node
* 
cu∫ode
, 
ödex
)

400 
Node
* 
ªdund™t
 = 
cu∫ode
;

401 
Node
* 
curchûd
 = 
NULL
;

402 
size
 = 
cu∫ode
->size;

403 * 
c⁄ã¡
 = 
cu∫ode
->content;

406 i‡(
cu∫ode
->
chûd
[
LEFT
] && cu∫ode->chûd[
RIGHT
])

407 
ªdund™t
 = 
	`TªeSuc˚ss‹
(
cu∫ode
);

409 
curchûd
 = 
ªdund™t
->
chûd
[‘edund™t->chûd[
LEFT
] !
NULL
Ë? LEFT : 
RIGHT
];

410 i‡(
curchûd
)

411 
curchûd
->
∑ª¡
 = 
ªdund™t
->parent;

413 i‡(
ªdund™t
->
∑ª¡
 =
NULL
)

414 
aTªe
->
ödex
[ödex].
roŸ
 = 
curchûd
;

417 i‡(
ªdund™t
 =ªdund™t->
∑ª¡
->
chûd
[
LEFT
])

418 
ªdund™t
->
∑ª¡
->
chûd
[
LEFT
] = 
curchûd
;

420 
ªdund™t
->
∑ª¡
->
chûd
[
RIGHT
] = 
curchûd
;

423 i‡(
ªdund™t
 !
cu∫ode
)

425 
cu∫ode
->
c⁄ã¡
 = 
ªdund™t
->content;

426 
cu∫ode
->
size
 = 
ªdund™t
->size;

429 i‡(
	`isBœck
(
ªdund™t
))

431 i‡(
curchûd
 =
NULL
)

433 i‡(
ªdund™t
->
∑ª¡
)

435 
Node
 
ãmp
;

436 
	`mem£t
(&
ãmp
, '\0', (
Node
));

437 
ãmp
.
∑ª¡
 = (
ªdund™t
Ë?Ñedund™t->∑ª¡ : 
NULL
;

438 
ãmp
.
ªd
 = 0;

439 
	`TªeBÆ™˚A·îRemove
(
aTªe
, &
ãmp
, 
ödex
);

443 
	`TªeBÆ™˚A·îRemove
(
aTªe
, 
curchûd
, 
ödex
);

446 #i‡
	`deföed
(
UNIT_TESTS
)

447 
	`‰ì
(
ªdund™t
);

449 (
aTªe
->
hóp_åackög
Ë? 
	`my‰ì
(
__FILE__
, 
__LINE__
, 
ªdund™t
Ë: 
	`‰ì
(redundant);

451 i‡(
ödex
 == 0)

453 
aTªe
->
size
 -= size;

454 --(
aTªe
->
cou¡
);

456  
c⁄ã¡
;

457 
	}
}

465 * 
	$TªeRemoveIndex
(
Tªe
* 
aTªe
, * 
c⁄ã¡
, 
ödex
)

467 
Node
* 
cu∫ode
 = 
	`TªeFödC⁄ã¡Index
(
aTªe
, 
c⁄ã¡
, 
ödex
);

469 i‡(
cu∫ode
 =
NULL
)

470  
NULL
;

472  
	`TªeRemoveNodeIndex
(
aTªe
, 
cu∫ode
, 
ödex
);

473 
	}
}

476 * 
	$TªeRemove
(
Tªe
* 
aTªe
, * 
c⁄ã¡
)

478 
i
;

479 * 
rc
 = 
NULL
;

481 
i
 = 0; i < 
aTªe
->
ödexes
; ++i)

482 
rc
 = 
	`TªeRemoveIndex
(
aTªe
, 
c⁄ã¡
, 
i
);

484  
rc
;

485 
	}
}

488 * 
	$TªeRemoveKeyIndex
(
Tªe
* 
aTªe
, * 
key
, 
ödex
)

490 
Node
* 
cu∫ode
 = 
	`TªeFödIndex
(
aTªe
, 
key
, 
ödex
);

491 * 
c⁄ã¡
 = 
NULL
;

492 
i
;

494 i‡(
cu∫ode
 =
NULL
)

495  
NULL
;

497 
c⁄ã¡
 = 
	`TªeRemoveNodeIndex
(
aTªe
, 
cu∫ode
, 
ödex
);

498 
i
 = 0; i < 
aTªe
->
ödexes
; ++i)

500 i‡(
i
 !
ödex
)

501 
c⁄ã¡
 = 
	`TªeRemoveIndex
(
aTªe
, c⁄ã¡, 
i
);

503  
c⁄ã¡
;

504 
	}
}

507 * 
	$TªeRemoveKey
(
Tªe
* 
aTªe
, * 
key
)

509  
	`TªeRemoveKeyIndex
(
aTªe
, 
key
, 0);

510 
	}
}

513 
	$TªeI¡Com∑ª
(* 
a
, * 
b
, 
c⁄ã¡
)

515 
i
 = *((*)
a
);

516 
j
 = *((*)
b
);

519  (
i
 > 
j
) ? -1 : (i == j) ? 0 : 1;

520 
	}
}

523 
	$TªePåCom∑ª
(* 
a
, * 
b
, 
c⁄ã¡
)

525  (
a
 > 
b
) ? -1 : (a == b) ? 0 : 1;

526 
	}
}

529 
	$TªeSåögCom∑ª
(* 
a
, * 
b
, 
c⁄ã¡
)

531  
	`°rcmp
((*)
a
, (*)
b
);

532 
	}
}

535 #i‡
deföed
(
UNIT_TESTS
)

537 
	$check
(
Tªe
 *
t
)

539 
Node
* 
cu∫ode
 = 
NULL
;

540 
rc
 = 0;

542 
cu∫ode
 = 
	`TªeNextEÀmít
(
t
, curnode);

543 
cu∫ode
)

545 
Node
* 
¥evnode
 = 
cu∫ode
;

547 
cu∫ode
 = 
	`TªeNextEÀmít
(
t
, curnode);

549 i‡(
¥evnode
 && 
cu∫ode
 && (*(*)(cu∫ode->
c⁄ã¡
) < *(*)(prevnode->content)))

551 
	`¥ötf
("ouào‡‹dî %d < %d\n", *(*)(
cu∫ode
->
c⁄ã¡
), *(*)(
¥evnode
->content));

552 
rc
 = 99;

555  
rc
;

556 
	}
}

559 
	$åavî£
(
Tªe
 *
t
, 
lookf‹
)

561 
Node
* 
cu∫ode
 = 
NULL
;

562 
rc
 = 0;

564 
	`¥ötf
("Traversing\n");

565 
cu∫ode
 = 
	`TªeNextEÀmít
(
t
, curnode);

567 
cu∫ode
)

569 
Node
* 
¥evnode
 = 
cu∫ode
;

571 
cu∫ode
 = 
	`TªeNextEÀmít
(
t
, curnode);

574 i‡(
¥evnode
 && 
cu∫ode
 && (*(*)(cu∫ode->
c⁄ã¡
) < *(*)(prevnode->content)))

576 
	`¥ötf
("ouào‡‹dî %d < %d\n", *(*)(
cu∫ode
->
c⁄ã¡
), *(*)(
¥evnode
->content));

578 i‡(
cu∫ode
 && (
lookf‹
 =*(*)(cu∫ode->
c⁄ã¡
)))

579 
	`¥ötf
("missög iãm %dá˘uÆly found\n", 
lookf‹
);

581 
	`¥ötf
("EndÅøvî£ %d\n", 
rc
);

582  
rc
;

583 
	}
}

586 
	$ã°
(
limô
)

588 
i
, *
ù
, *
todñëe
;

589 
Node
* 
cuºít
 = 
NULL
;

590 
Tªe
* 
t
 = 
	`TªeInôülize
(
TªeI¡Com∑ª
);

591 
rc
 = 0;

593 
	`¥ötf
("Tree initialized\n");

595 
	`§™d
(
	`time
(
NULL
));

597 
ù
 = 
	`mÆloc
(());

598 *
ù
 = 2;

599 
	`TªeAdd
(
t
, (*)
ù
, ());

601 
	`check
(
t
);

603 
i
 = 2;

604 * 
ªsu…
 = 
	`TªeRemove
(
t
, (*)&
i
);

605 i‡(
ªsu…
)

606 
	`‰ì
(
ªsu…
);

608 
a˘uÆ
[
limô
];

609 
i
 = 0; i < 
limô
; i++)

611 * 
ª∂a˚d
 = 
NULL
;

613 
ù
 = 
	`mÆloc
(());

614 *
ù
 = 
	`ønd
();

615 
ª∂a˚d
 = 
	`TªeAdd
(
t
, (*)
ù
, ());

616 i‡(
ª∂a˚d
)

618 
	`‰ì
(
ª∂a˚d
);

619 
a˘uÆ
[
i
] = -1;

622 
a˘uÆ
[
i
] = *
ù
;

623 i‡(
i
==5)

624 
todñëe
 = 
ù
;

625 
	`¥ötf
("Tªêñemíàadded %d\n", *
ù
);

628 
rc
 = 
	`check
(
t
);

629 
	`¥ötf
("%dÉÀmíts, checkÑesu… %d\n", 
i
+1, 
rc
);

630 i‡(
rc
 != 0)

635 
	`check
(
t
);

637 
i
 = 0; i < 
limô
; i++)

639 
∑rm
 = 
a˘uÆ
[
i
];

641 i‡(
∑rm
 == -1)

644 
Node
* 
found
 = 
	`TªeFöd
(
t
, (*)&
∑rm
);

645 i‡(
found
)

646 
	`¥ötf
("Tªêföd %d %d\n", 
∑rm
, *(*)(
found
->
c⁄ã¡
));

649 
	`¥ötf
("%dÇŸ found\n", 
∑rm
);

650 
	`åavî£
(
t
, 
∑rm
);

655 
	`check
(
t
);

657 
i
 = 
limô
 -1; i >= 0; i--)

659 
∑rm
 = 
a˘uÆ
[
i
];

660 *
found
;

662 i‡(
∑rm
 == -1)

665 
found
 = 
	`TªeRemove
(
t
, (*)&
∑rm
);

666 i‡(
found
)

668 
	`¥ötf
("%d Tªêªmovê%d %d\n", 
i
, 
∑rm
, *(*)(
found
));

669 
	`‰ì
(
found
);

673 
cou¡
 = 0;

674 
	`¥ötf
("%d %dÇŸ found\n", 
i
, 
∑rm
);

675 
	`åavî£
(
t
, 
∑rm
);

676 
i
 = 0; i < 
limô
; i++)

677 i‡(
a˘uÆ
[
i
] =
∑rm
)

678 ++
cou¡
;

679 
	`¥ötf
("%d occur†%dÅimes\n", 
∑rm
, 
cou¡
);

682 i‡(
i
 % 1000 == 0)

684 
rc
 = 
	`check
(
t
);

685 
	`¥ötf
("%dÉÀmíts, checkÑesu… %d\n", 
i
+1, 
rc
);

686 i‡(
rc
 != 0)

690 
	`¥ötf
("finished\n");

692 
	}
}

694 
	$maö
(
¨gc
, *
¨gv
[])

696 
rc
 = 0;

698 
rc
 == 0)

699 
rc
 = 
	`ã°
(999999);

700 
	}
}

	@paho-c/src/Tree.h

18 #i‡!
deföed
(
TREE_H
)

19 
	#TREE_H


	)

61 
	sNodeSåu˘


63 
NodeSåu˘
 *
	m∑ª¡
,

64 *
	mchûd
[2];

65 * 
	mc⁄ã¡
;

66 
	msize
;

67 
	mªd
 : 1;

68 } 
	tNode
;

78 
Node
 *
	mroŸ
;

79 (*
	mcom∑ª
)(*, *, );

80 } 
	mödex
[2];

81 
	mödexes
,

82 
	mcou¡
,

83 
	msize
;

84 
	mhóp_åackög
 : 1;

85 
	mÆlow_du∂iˇãs
 : 1;

86 } 
	tTªe
;

89 
Tªe
* 
TªeInôülize
((*
com∑ª
)(*, *, ));

90 
	`TªeInôülizeNoMÆloc
(
Tªe
* 
aTªe
, (*
com∑ª
)(*, *, ));

91 
	`TªeAddIndex
(
Tªe
* 
aTªe
, (*
com∑ª
)(*, *, ));

93 * 
	`TªeAdd
(
Tªe
* 
aTªe
, * 
c⁄ã¡
, 
size
);

95 * 
	`TªeRemove
(
Tªe
* 
aTªe
, * 
c⁄ã¡
);

97 * 
	`TªeRemoveKey
(
Tªe
* 
aTªe
, * 
key
);

98 * 
	`TªeRemoveKeyIndex
(
Tªe
* 
aTªe
, * 
key
, 
ödex
);

100 * 
	`TªeRemoveNodeIndex
(
Tªe
* 
aTªe
, 
Node
* 
aNode
, 
ödex
);

102 
	`TªeFªe
(
Tªe
* 
aTªe
);

104 
Node
* 
	`TªeFöd
(
Tªe
* 
aTªe
, * 
key
);

105 
Node
* 
	`TªeFödIndex
(
Tªe
* 
aTªe
, * 
key
, 
ödex
);

107 
Node
* 
	`TªeNextEÀmít
(
Tªe
* 
aTªe
, Node* 
cu∫ode
);

109 
	`TªeI¡Com∑ª
(* 
a
, * 
b
, );

110 
	`TªePåCom∑ª
(* 
a
, * 
b
, );

111 
	`TªeSåögCom∑ª
(* 
a
, * 
b
, );

	@paho-c/src/samples/MQTTAsync_publish.c

17 
	~"°dio.h
"

18 
	~"°dlib.h
"

19 
	~"°rög.h
"

20 
	~"MQTTAsync.h
"

22 #i‡!
deföed
(
WIN32
)

23 
	~<uni°d.h
>

26 
	#ADDRESS
 "t˝://121.42.52.171:1883"

	)

27 
	#CLIENTID
 "Exam∂eClõ¡Pub"

	)

28 
	#TOPIC
 "/MQTT/Exam∂es"

	)

29 
	#PAYLOAD
 "HñlÿW‹ld!"

	)

30 
	#QOS
 1

	)

31 
	#TIMEOUT
 10000L

	)

33 vﬁ©ûê
MQTTAsync_tokí
 
	gdñivîedtokí
;

35 
	gföished
 = 0;

37 
	$c⁄∆o°
(*
c⁄ãxt
, *
ˇu£
)

39 
MQTTAsync
 
˛õ¡
 = (MQTTAsync)
c⁄ãxt
;

40 
MQTTAsync_c⁄√˘O±i⁄s
 
c⁄n_›ts
 = 
MQTTAsync_c⁄√˘O±i⁄s_öôülizî
;

41 
rc
;

43 
	`¥ötf
("\nConnectionÜost\n");

44 
	`¥ötf
(" cau£: %s\n", 
ˇu£
);

46 
	`¥ötf
("Reconnecting\n");

47 
c⁄n_›ts
.
kìpAliveI¡îvÆ
 = 20;

48 
c⁄n_›ts
.
˛ón£ssi⁄
 = 1;

49 i‡((
rc
 = 
	`MQTTAsync_c⁄√˘
(
˛õ¡
, &
c⁄n_›ts
)Ë!
MQTTASYNC_SUCCESS
)

51 
	`¥ötf
("FaûedÅÿ°¨àc⁄√˘,Ñëu∫ codê%d\n", 
rc
);

52 
föished
 = 1;

54 
	}
}

57 
	$⁄Disc⁄√˘
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

59 
	`¥ötf
("Successful disconnection\n");

60 
föished
 = 1;

61 
	}
}

64 
	$⁄Síd
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

66 
MQTTAsync
 
˛õ¡
 = (MQTTAsync)
c⁄ãxt
;

67 
MQTTAsync_disc⁄√˘O±i⁄s
 
›ts
 = 
MQTTAsync_disc⁄√˘O±i⁄s_öôülizî
;

68 
rc
;

70 
	`¥ötf
("MesßgêwôhÅokí vÆuê%d dñivîy c⁄fúmed\n", 
ª•⁄£
->
tokí
);

72 
›ts
.
⁄Suc˚ss
 = 
⁄Disc⁄√˘
;

73 
›ts
.
c⁄ãxt
 = 
˛õ¡
;

75 i‡((
rc
 = 
	`MQTTAsync_disc⁄√˘
(
˛õ¡
, &
›ts
)Ë!
MQTTASYNC_SUCCESS
)

77 
	`¥ötf
("FaûedÅÿ°¨à£ndMesßge,Ñëu∫ codê%d\n", 
rc
);

78 
	`exô
(-1);

80 
	}
}

83 
	$⁄C⁄√˘Faûuª
(* 
c⁄ãxt
, 
MQTTAsync_ÁûuªD©a
* 
ª•⁄£
)

85 
	`¥ötf
("C⁄√˘ faûed,Ñ¯%d\n", 
ª•⁄£
 ?Ñe•⁄£->
code
 : 0);

86 
föished
 = 1;

87 
	}
}

90 
	$⁄C⁄√˘
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

92 
MQTTAsync
 
˛õ¡
 = (MQTTAsync)
c⁄ãxt
;

93 
MQTTAsync_ª•⁄£O±i⁄s
 
›ts
 = 
MQTTAsync_ª•⁄£O±i⁄s_öôülizî
;

94 
MQTTAsync_mesßge
 
pubmsg
 = 
MQTTAsync_mesßge_öôülizî
;

95 
rc
;

97 
	`¥ötf
("Successful connection\n");

99 
›ts
.
⁄Suc˚ss
 = 
⁄Síd
;

100 
›ts
.
c⁄ãxt
 = 
˛õ¡
;

102 
pubmsg
.
∑ylﬂd
 = 
PAYLOAD
;

103 
pubmsg
.
∑ylﬂdÀn
 = 
	`°æí
(
PAYLOAD
);

104 
pubmsg
.
qos
 = 
QOS
;

105 
pubmsg
.
ªèöed
 = 0;

106 
dñivîedtokí
 = 0;

108 i‡((
rc
 = 
	`MQTTAsync_£ndMesßge
(
˛õ¡
, 
TOPIC
, &
pubmsg
, &
›ts
)Ë!
MQTTASYNC_SUCCESS
)

110 
	`¥ötf
("FaûedÅÿ°¨à£ndMesßge,Ñëu∫ codê%d\n", 
rc
);

111 
	`exô
(-1);

113 
	}
}

116 
	$maö
(
¨gc
, * 
¨gv
[])

118 
MQTTAsync
 
˛õ¡
;

119 
MQTTAsync_c⁄√˘O±i⁄s
 
c⁄n_›ts
 = 
MQTTAsync_c⁄√˘O±i⁄s_öôülizî
;

120 
MQTTAsync_mesßge
 
pubmsg
 = 
MQTTAsync_mesßge_öôülizî
;

121 
MQTTAsync_tokí
 
tokí
;

122 
rc
;

124 
	`MQTTAsync_¸óã
(&
˛õ¡
, 
ADDRESS
, 
CLIENTID
, 
MQTTCLIENT_PERSISTENCE_NONE
, 
NULL
);

126 
	`MQTTAsync_£tCÆlbacks
(
˛õ¡
, 
NULL
, 
c⁄∆o°
, NULL, NULL);

128 
c⁄n_›ts
.
kìpAliveI¡îvÆ
 = 20;

129 
c⁄n_›ts
.
˛ón£ssi⁄
 = 1;

130 
c⁄n_›ts
.
⁄Suc˚ss
 = 
⁄C⁄√˘
;

131 
c⁄n_›ts
.
⁄Faûuª
 = 
⁄C⁄√˘Faûuª
;

132 
c⁄n_›ts
.
c⁄ãxt
 = 
˛õ¡
;

133 i‡((
rc
 = 
	`MQTTAsync_c⁄√˘
(
˛õ¡
, &
c⁄n_›ts
)Ë!
MQTTASYNC_SUCCESS
)

135 
	`¥ötf
("FaûedÅÿ°¨àc⁄√˘,Ñëu∫ codê%d\n", 
rc
);

136 
	`exô
(-1);

139 
	`¥ötf
("Waiting forÖublication of %s\n"

141 
PAYLOAD
, 
TOPIC
, 
CLIENTID
);

142 !
föished
)

143 #i‡
	`deföed
(
WIN32
)

144 
	`SÀï
(100);

146 
	`u¶ìp
(10000L);

149 
	`MQTTAsync_de°roy
(&
˛õ¡
);

150  
rc
;

151 
	}
}

	@paho-c/src/samples/MQTTAsync_subscribe.c

17 
	~"°dio.h
"

18 
	~"°dlib.h
"

19 
	~"°rög.h
"

20 
	~"MQTTAsync.h
"

22 #i‡!
deföed
(
WIN32
)

23 
	~<uni°d.h
>

26 
	#ADDRESS
 "t˝://121.42.52.171:1883"

	)

27 
	#CLIENTID
 "Exam∂eClõ¡Sub"

	)

29 
	#TOPIC
 "/100001Ali˚/CÆÀd/Ph⁄eOthî"

	)

30 
	#PAYLOAD
 "HñlÿW‹ld!"

	)

31 
	#QOS
 1

	)

32 
	#TIMEOUT
 10000L

	)

34 vﬁ©ûê
MQTTAsync_tokí
 
	gdñivîedtokí
;

36 
	gdisc_föished
 = 0;

37 
	gsubs¸ibed
 = 0;

38 
	gföished
 = 0;

40 
	$c⁄∆o°
(*
c⁄ãxt
, *
ˇu£
)

42 
MQTTAsync
 
˛õ¡
 = (MQTTAsync)
c⁄ãxt
;

43 
MQTTAsync_c⁄√˘O±i⁄s
 
c⁄n_›ts
 = 
MQTTAsync_c⁄√˘O±i⁄s_öôülizî
;

44 
rc
;

46 
	`¥ötf
("\nConnectionÜost\n");

47 
	`¥ötf
(" cau£: %s\n", 
ˇu£
);

49 
	`¥ötf
("Reconnecting\n");

50 
c⁄n_›ts
.
kìpAliveI¡îvÆ
 = 20;

51 
c⁄n_›ts
.
˛ón£ssi⁄
 = 1;

52 i‡((
rc
 = 
	`MQTTAsync_c⁄√˘
(
˛õ¡
, &
c⁄n_›ts
)Ë!
MQTTASYNC_SUCCESS
)

54 
	`¥ötf
("FaûedÅÿ°¨àc⁄√˘,Ñëu∫ codê%d\n", 
rc
);

55 
föished
 = 1;

57 
	}
}

60 
	$msg¨rvd
(*
c⁄ãxt
, *
t›icName
, 
t›icLí
, 
MQTTAsync_mesßge
 *
mesßge
)

62 
i
;

63 * 
∑ylﬂd±r
;

65 
	`¥ötf
("Messageárrived\n");

66 
	`¥ötf
("Å›ic: %s\n", 
t›icName
);

67 
	`¥ötf
(" message: ");

69 
∑ylﬂd±r
 = 
mesßge
->
∑ylﬂd
;

70 
i
=0; i<
mesßge
->
∑ylﬂdÀn
; i++)

72 
	`putch¨
(*
∑ylﬂd±r
++);

74 
	`putch¨
('\n');

75 
	`MQTTAsync_‰ìMesßge
(&
mesßge
);

76 
	`MQTTAsync_‰ì
(
t›icName
);

78 
	}
}

81 
	$⁄Disc⁄√˘
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

83 
	`¥ötf
("Successful disconnection\n");

84 
disc_föished
 = 1;

85 
	}
}

88 
	$⁄Subs¸ibe
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

90 
	`¥ötf
("Subscribe succeeded\n");

91 
subs¸ibed
 = 1;

92 
	}
}

94 
	$⁄Subs¸ibeFaûuª
(* 
c⁄ãxt
, 
MQTTAsync_ÁûuªD©a
* 
ª•⁄£
)

96 
	`¥ötf
("Subs¸ibêÁûed,Ñ¯%d\n", 
ª•⁄£
 ?Ñe•⁄£->
code
 : 0);

97 
föished
 = 1;

98 
	}
}

101 
	$⁄C⁄√˘Faûuª
(* 
c⁄ãxt
, 
MQTTAsync_ÁûuªD©a
* 
ª•⁄£
)

103 
	`¥ötf
("C⁄√˘ faûed,Ñ¯%d\n", 
ª•⁄£
 ?Ñe•⁄£->
code
 : 0);

104 
föished
 = 1;

105 
	}
}

108 
	$⁄C⁄√˘
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

110 
MQTTAsync
 
˛õ¡
 = (MQTTAsync)
c⁄ãxt
;

111 
MQTTAsync_ª•⁄£O±i⁄s
 
›ts
 = 
MQTTAsync_ª•⁄£O±i⁄s_öôülizî
;

112 
MQTTAsync_mesßge
 
pubmsg
 = 
MQTTAsync_mesßge_öôülizî
;

113 
rc
;

115 
	`¥ötf
("Successful connection\n");

117 
	`¥ötf
("SubscribingÅoÅopic %s\nfor client %s using QoS%d\n\n"

118 "Pªs†Q<E¡î>Åÿquô\n\n", 
TOPIC
, 
CLIENTID
, 
QOS
);

119 
›ts
.
⁄Suc˚ss
 = 
⁄Subs¸ibe
;

120 
›ts
.
⁄Faûuª
 = 
⁄Subs¸ibeFaûuª
;

121 
›ts
.
c⁄ãxt
 = 
˛õ¡
;

123 
dñivîedtokí
 = 0;

125 i‡((
rc
 = 
	`MQTTAsync_subs¸ibe
(
˛õ¡
, 
TOPIC
, 
QOS
, &
›ts
)Ë!
MQTTASYNC_SUCCESS
)

127 
	`¥ötf
("FaûedÅÿ°¨àsubs¸ibe,Ñëu∫ codê%d\n", 
rc
);

128 
	`exô
(-1);

130 
	}
}

133 
	$maö
(
¨gc
, * 
¨gv
[])

135 
MQTTAsync
 
˛õ¡
;

136 
MQTTAsync_c⁄√˘O±i⁄s
 
c⁄n_›ts
 = 
MQTTAsync_c⁄√˘O±i⁄s_öôülizî
;

137 
MQTTAsync_disc⁄√˘O±i⁄s
 
disc_›ts
 = 
MQTTAsync_disc⁄√˘O±i⁄s_öôülizî
;

138 
MQTTAsync_mesßge
 
pubmsg
 = 
MQTTAsync_mesßge_öôülizî
;

139 
MQTTAsync_tokí
 
tokí
;

140 
rc
;

141 
ch
;

143 
	`MQTTAsync_¸óã
(&
˛õ¡
, 
ADDRESS
, 
CLIENTID
, 
MQTTCLIENT_PERSISTENCE_NONE
, 
NULL
);

145 
	`MQTTAsync_£tCÆlbacks
(
˛õ¡
, 
NULL
, 
c⁄∆o°
, 
msg¨rvd
, NULL);

147 
c⁄n_›ts
.
kìpAliveI¡îvÆ
 = 20;

148 
c⁄n_›ts
.
˛ón£ssi⁄
 = 1;

149 
c⁄n_›ts
.
⁄Suc˚ss
 = 
⁄C⁄√˘
;

150 
c⁄n_›ts
.
⁄Faûuª
 = 
⁄C⁄√˘Faûuª
;

151 
c⁄n_›ts
.
c⁄ãxt
 = 
˛õ¡
;

152 i‡((
rc
 = 
	`MQTTAsync_c⁄√˘
(
˛õ¡
, &
c⁄n_›ts
)Ë!
MQTTASYNC_SUCCESS
)

154 
	`¥ötf
("FaûedÅÿ°¨àc⁄√˘,Ñëu∫ codê%d\n", 
rc
);

155 
	`exô
(-1);

158 !
subs¸ibed
)

159 #i‡
	`deföed
(
WIN32
)

160 
	`SÀï
(100);

162 
	`u¶ìp
(10000L);

165 i‡(
föished
)

166 
exô
;

170 
ch
 = 
	`gëch¨
();

171 } 
ch
!='Q' && ch != 'q');

173 
disc_›ts
.
⁄Suc˚ss
 = 
⁄Disc⁄√˘
;

174 i‡((
rc
 = 
	`MQTTAsync_disc⁄√˘
(
˛õ¡
, &
disc_›ts
)Ë!
MQTTASYNC_SUCCESS
)

176 
	`¥ötf
("FaûedÅÿ°¨àdisc⁄√˘,Ñëu∫ codê%d\n", 
rc
);

177 
	`exô
(-1);

179 !
disc_föished
)

180 #i‡
	`deföed
(
WIN32
)

181 
	`SÀï
(100);

183 
	`u¶ìp
(10000L);

186 
exô
:

187 
	`MQTTAsync_de°roy
(&
˛õ¡
);

188  
rc
;

189 
	}
}

	@paho-c/src/samples/pahopub.c

38 
	~"MQTTClõ¡.h
"

39 
	~"MQTTClõ¡Pîsi°í˚.h
"

41 
	~<°dio.h
>

42 
	~<sig«l.h
>

43 
	~<mem‹y.h
>

46 #i‡
deföed
(
WIN32
)

47 
	~<Wödows.h
>

48 
	#¶ìp
 
SÀï


	)

50 
	~<sys/time.h
>

51 
	~<°dlib.h
>

55 vﬁ©ûê
	gtoSt›
 = 0;

58 
	$ußge
()

60 
	`¥ötf
("MQTT stdinÖublisher\n");

61 
	`¥ötf
("Usage: stdinpubÅopicname <options>, where optionsáre:\n");

62 
	`¥ötf
(" --host <hostname> (default isÜocalhost)\n");

63 
	`¥ötf
(" --port <port> (default is 1883)\n");

64 
	`¥ötf
(" --qos <qos> (default is 0)\n");

65 
	`¥ötf
(" --retained (default is off)\n");

66 
	`¥ötf
(" --delimiter <delim> (default is \\n)");

67 
	`¥ötf
(" --clientid <clientid> (default is hostname+timestamp)");

68 
	`¥ötf
(" --maxdatalen 100\n");

69 
	`¥ötf
(" --usernameÇone\n");

70 
	`¥ötf
(" --passwordÇone\n");

71 
	`exô
(-1);

72 
	}
}

75 
	$myc⁄√˘
(
MQTTClõ¡
* 
˛õ¡
, 
MQTTClõ¡_c⁄√˘O±i⁄s
* 
›ts
)

77 
	`¥ötf
("Connecting\n");

78 i‡(
	`MQTTClõ¡_c⁄√˘
(*
˛õ¡
, 
›ts
) != 0)

80 
	`¥ötf
("FailedÅo connect\n");

81 
	`exô
(-1);

83 
	`¥ötf
("Connected\n");

84 
	}
}

87 
	$cföish
(
sig
)

89 
	`sig«l
(
SIGINT
, 
NULL
);

90 
toSt›
 = 1;

91 
	}
}

96 * 
	m˛õ¡id
;

97 * 
	mdñimôî
;

98 
	mmaxd©Æí
;

99 
	mqos
;

100 
	mªèöed
;

101 * 
	mu£∫ame
;

102 * 
	m∑ssw‹d
;

103 * 
	mho°
;

104 * 
	mp‹t
;

105 
	mvîbo£
;

106 } 
	g›ts
 =

108 "publishî", "\n", 100, 0, 0, 
NULL
, NULL, "localhost", "1883", 0

111 
gë›ts
(
¨gc
, ** 
¨gv
);

113 
	$mesßgeAºived
(* 
c⁄ãxt
, * 
t›icName
, 
t›icLí
, 
MQTTClõ¡_mesßge
* 
m
)

117 
	}
}

119 
	$maö
(
¨gc
, ** 
¨gv
)

121 
MQTTClõ¡
 
˛õ¡
;

122 
MQTTClõ¡_c⁄√˘O±i⁄s
 
c⁄n_›ts
 = 
MQTTClõ¡_c⁄√˘O±i⁄s_öôülizî
;

123 
MQTTClõ¡_SSLO±i⁄s
 
s¶_›ts
 = 
MQTTClõ¡_SSLO±i⁄s_öôülizî
;

124 * 
t›ic
 = 
NULL
;

125 * 
buf„r
 = 
NULL
;

126 
rc
 = 0;

127 
uæ
[100];

129 i‡(
¨gc
 < 2)

130 
	`ußge
();

132 
	`gë›ts
(
¨gc
, 
¨gv
);

134 
	`•rötf
(
uæ
, "%s:%s", 
›ts
.
ho°
, o±s.
p‹t
);

135 i‡(
›ts
.
vîbo£
)

136 
	`¥ötf
("URL i†%s\n", 
uæ
);

138 
t›ic
 = 
¨gv
[1];

139 
	`¥ötf
("UsögÅ›i¯%s\n", 
t›ic
);

141 
rc
 = 
	`MQTTClõ¡_¸óã
(&
˛õ¡
, 
uæ
, 
›ts
.
˛õ¡id
, 
MQTTCLIENT_PERSISTENCE_NONE
, 
NULL
);

143 
	`sig«l
(
SIGINT
, 
cföish
);

144 
	`sig«l
(
SIGTERM
, 
cföish
);

146 
rc
 = 
	`MQTTClõ¡_£tCÆlbacks
(
˛õ¡
, 
NULL
, NULL, 
mesßgeAºived
, NULL);

148 
c⁄n_›ts
.
kìpAliveI¡îvÆ
 = 10;

149 
c⁄n_›ts
.
ªlübÀ
 = 0;

150 
c⁄n_›ts
.
˛ón£ssi⁄
 = 1;

151 
c⁄n_›ts
.
u£∫ame
 = 
›ts
.username;

152 
c⁄n_›ts
.
∑ssw‹d
 = 
›ts
.password;

153 
s¶_›ts
.
íabÀSîvîCîtAuth
 = 0;

154 
c⁄n_›ts
.
s¶
 = &
s¶_›ts
;

156 
	`myc⁄√˘
(&
˛õ¡
, &
c⁄n_›ts
);

158 
buf„r
 = 
	`mÆloc
(
›ts
.
maxd©Æí
);

160 !
toSt›
)

162 
d©a_Àn
 = 0;

163 
dñim_Àn
 = 0;

165 
dñim_Àn
 = 
	`°æí
(
›ts
.
dñimôî
);

168 
buf„r
[
d©a_Àn
++] = 
	`gëch¨
();

169 i‡(
d©a_Àn
 > 
dñim_Àn
)

172 i‡(
	`°∫cmp
(
›ts
.
dñimôî
, &
buf„r
[
d©a_Àn
 - 
dñim_Àn
], delim_len) == 0)

175 } 
d©a_Àn
 < 
›ts
.
maxd©Æí
);

177 i‡(
›ts
.
vîbo£
)

178 
	`¥ötf
("Publishög d©®o‡Àngth %d\n", 
d©a_Àn
);

179 
rc
 = 
	`MQTTClõ¡_publish
(
˛õ¡
, 
t›ic
, 
d©a_Àn
, 
buf„r
, 
›ts
.
qos
, o±s.
ªèöed
, 
NULL
);

180 i‡(
rc
 != 0)

182 
	`myc⁄√˘
(&
˛õ¡
, &
c⁄n_›ts
);

183 
rc
 = 
	`MQTTClõ¡_publish
(
˛õ¡
, 
t›ic
, 
d©a_Àn
, 
buf„r
, 
›ts
.
qos
, o±s.
ªèöed
, 
NULL
);

185 i‡(
›ts
.
qos
 > 0)

186 
	`MQTTClõ¡_yõld
();

189 
	`¥ötf
("Stopping\n");

191 
	`‰ì
(
buf„r
);

193 
	`MQTTClõ¡_disc⁄√˘
(
˛õ¡
, 0);

195 
	`MQTTClõ¡_de°roy
(&
˛õ¡
);

198 
	}
}

200 
	$gë›ts
(
¨gc
, ** 
¨gv
)

202 
cou¡
 = 2;

204 
cou¡
 < 
¨gc
)

206 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--retained") == 0)

207 
›ts
.
ªèöed
 = 1;

208 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--verbose") == 0)

209 
›ts
.
vîbo£
 = 1;

210 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--qos") == 0)

212 i‡(++
cou¡
 < 
¨gc
)

214 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "0") == 0)

215 
›ts
.
qos
 = 0;

216 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "1") == 0)

217 
›ts
.
qos
 = 1;

218 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "2") == 0)

219 
›ts
.
qos
 = 2;

221 
	`ußge
();

224 
	`ußge
();

226 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--host") == 0)

228 i‡(++
cou¡
 < 
¨gc
)

229 
›ts
.
ho°
 = 
¨gv
[
cou¡
];

231 
	`ußge
();

233 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--port") == 0)

235 i‡(++
cou¡
 < 
¨gc
)

236 
›ts
.
p‹t
 = 
¨gv
[
cou¡
];

238 
	`ußge
();

240 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--clientid") == 0)

242 i‡(++
cou¡
 < 
¨gc
)

243 
›ts
.
˛õ¡id
 = 
¨gv
[
cou¡
];

245 
	`ußge
();

247 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--username") == 0)

249 i‡(++
cou¡
 < 
¨gc
)

250 
›ts
.
u£∫ame
 = 
¨gv
[
cou¡
];

252 
	`ußge
();

254 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--password") == 0)

256 i‡(++
cou¡
 < 
¨gc
)

257 
›ts
.
∑ssw‹d
 = 
¨gv
[
cou¡
];

259 
	`ußge
();

261 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--maxdatalen") == 0)

263 i‡(++
cou¡
 < 
¨gc
)

264 
›ts
.
maxd©Æí
 = 
	`©oi
(
¨gv
[
cou¡
]);

266 
	`ußge
();

268 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--delimiter") == 0)

270 i‡(++
cou¡
 < 
¨gc
)

271 
›ts
.
dñimôî
 = 
¨gv
[
cou¡
];

273 
	`ußge
();

275 
cou¡
++;

278 
	}
}

	@paho-c/src/samples/pubasync.c

17 
	~"°dio.h
"

18 
	~"°dlib.h
"

19 
	~"°rög.h
"

20 
	~"MQTTClõ¡.h
"

22 
	#ADDRESS
 "t˝://loˇlho°:1883"

	)

23 
	#CLIENTID
 "Exam∂eClõ¡Pub"

	)

24 
	#TOPIC
 "MQTT Exam∂es"

	)

25 
	#PAYLOAD
 "HñlÿW‹ld!"

	)

26 
	#QOS
 1

	)

27 
	#TIMEOUT
 10000L

	)

29 vﬁ©ûê
MQTTClõ¡_dñivîyTokí
 
	gdñivîedtokí
;

31 
	$dñivîed
(*
c⁄ãxt
, 
MQTTClõ¡_dñivîyTokí
 
dt
)

33 
	`¥ötf
("MesßgêwôhÅokí vÆuê%d dñivîy c⁄fúmed\n", 
dt
);

34 
dñivîedtokí
 = 
dt
;

35 
	}
}

37 
	$msg¨rvd
(*
c⁄ãxt
, *
t›icName
, 
t›icLí
, 
MQTTClõ¡_mesßge
 *
mesßge
)

39 
i
;

40 * 
∑ylﬂd±r
;

42 
	`¥ötf
("Messageárrived\n");

43 
	`¥ötf
("Å›ic: %s\n", 
t›icName
);

44 
	`¥ötf
(" message: ");

46 
∑ylﬂd±r
 = 
mesßge
->
∑ylﬂd
;

47 
i
=0; i<
mesßge
->
∑ylﬂdÀn
; i++)

49 
	`putch¨
(*
∑ylﬂd±r
++);

51 
	`putch¨
('\n');

52 
	`MQTTClõ¡_‰ìMesßge
(&
mesßge
);

53 
	`MQTTClõ¡_‰ì
(
t›icName
);

55 
	}
}

57 
	$c⁄∆o°
(*
c⁄ãxt
, *
ˇu£
)

59 
	`¥ötf
("\nConnectionÜost\n");

60 
	`¥ötf
(" cau£: %s\n", 
ˇu£
);

61 
	}
}

63 
	$maö
(
¨gc
, * 
¨gv
[])

65 
MQTTClõ¡
 
˛õ¡
;

66 
MQTTClõ¡_c⁄√˘O±i⁄s
 
c⁄n_›ts
 = 
MQTTClõ¡_c⁄√˘O±i⁄s_öôülizî
;

67 
MQTTClõ¡_mesßge
 
pubmsg
 = 
MQTTClõ¡_mesßge_öôülizî
;

68 
MQTTClõ¡_dñivîyTokí
 
tokí
;

69 
rc
;

71 
	`MQTTClõ¡_¸óã
(&
˛õ¡
, 
ADDRESS
, 
CLIENTID
,

72 
MQTTCLIENT_PERSISTENCE_NONE
, 
NULL
);

73 
c⁄n_›ts
.
kìpAliveI¡îvÆ
 = 20;

74 
c⁄n_›ts
.
˛ón£ssi⁄
 = 1;

76 
	`MQTTClõ¡_£tCÆlbacks
(
˛õ¡
, 
NULL
, 
c⁄∆o°
, 
msg¨rvd
, 
dñivîed
);

78 i‡((
rc
 = 
	`MQTTClõ¡_c⁄√˘
(
˛õ¡
, &
c⁄n_›ts
)Ë!
MQTTCLIENT_SUCCESS
)

80 
	`¥ötf
("FaûedÅÿc⁄√˘,Ñëu∫ codê%d\n", 
rc
);

81 
	`exô
(-1);

83 
pubmsg
.
∑ylﬂd
 = 
PAYLOAD
;

84 
pubmsg
.
∑ylﬂdÀn
 = 
	`°æí
(
PAYLOAD
);

85 
pubmsg
.
qos
 = 
QOS
;

86 
pubmsg
.
ªèöed
 = 0;

87 
dñivîedtokí
 = 0;

88 
	`MQTTClõ¡_publishMesßge
(
˛õ¡
, 
TOPIC
, &
pubmsg
, &
tokí
);

89 
	`¥ötf
("Waiting forÖublication of %s\n"

91 
PAYLOAD
, 
TOPIC
, 
CLIENTID
);

92 
dñivîedtokí
 !
tokí
);

93 
	`MQTTClõ¡_disc⁄√˘
(
˛õ¡
, 10000);

94 
	`MQTTClõ¡_de°roy
(&
˛õ¡
);

95  
rc
;

96 
	}
}

	@paho-c/src/samples/pubsync.c

17 
	~"°dio.h
"

18 
	~"°dlib.h
"

19 
	~"°rög.h
"

20 
	~"MQTTClõ¡.h
"

22 
	#ADDRESS
 "t˝://loˇlho°:1883"

	)

23 
	#CLIENTID
 "Exam∂eClõ¡Pub"

	)

24 
	#TOPIC
 "MQTT Exam∂es"

	)

25 
	#PAYLOAD
 "HñlÿW‹ld!"

	)

26 
	#QOS
 1

	)

27 
	#TIMEOUT
 10000L

	)

29 
	$maö
(
¨gc
, * 
¨gv
[])

31 
MQTTClõ¡
 
˛õ¡
;

32 
MQTTClõ¡_c⁄√˘O±i⁄s
 
c⁄n_›ts
 = 
MQTTClõ¡_c⁄√˘O±i⁄s_öôülizî
;

33 
MQTTClõ¡_mesßge
 
pubmsg
 = 
MQTTClõ¡_mesßge_öôülizî
;

34 
MQTTClõ¡_dñivîyTokí
 
tokí
;

35 
rc
;

37 
	`MQTTClõ¡_¸óã
(&
˛õ¡
, 
ADDRESS
, 
CLIENTID
,

38 
MQTTCLIENT_PERSISTENCE_NONE
, 
NULL
);

39 
c⁄n_›ts
.
kìpAliveI¡îvÆ
 = 20;

40 
c⁄n_›ts
.
˛ón£ssi⁄
 = 1;

42 i‡((
rc
 = 
	`MQTTClõ¡_c⁄√˘
(
˛õ¡
, &
c⁄n_›ts
)Ë!
MQTTCLIENT_SUCCESS
)

44 
	`¥ötf
("FaûedÅÿc⁄√˘,Ñëu∫ codê%d\n", 
rc
);

45 
	`exô
(-1);

47 
pubmsg
.
∑ylﬂd
 = 
PAYLOAD
;

48 
pubmsg
.
∑ylﬂdÀn
 = 
	`°æí
(
PAYLOAD
);

49 
pubmsg
.
qos
 = 
QOS
;

50 
pubmsg
.
ªèöed
 = 0;

51 
	`MQTTClõ¡_publishMesßge
(
˛õ¡
, 
TOPIC
, &
pubmsg
, &
tokí
);

52 
	`¥ötf
("Waiting for upÅo %d seconds forÖublication of %s\n"

54 ()(
TIMEOUT
/1000), 
PAYLOAD
, 
TOPIC
, 
CLIENTID
);

55 
rc
 = 
	`MQTTClõ¡_waôF‹Com∂ëi⁄
(
˛õ¡
, 
tokí
, 
TIMEOUT
);

56 
	`¥ötf
("Mesßgêwôh dñivîyÅokí %d dñivîed\n", 
tokí
);

57 
	`MQTTClõ¡_disc⁄√˘
(
˛õ¡
, 10000);

58 
	`MQTTClõ¡_de°roy
(&
˛õ¡
);

59  
rc
;

60 
	}
}

	@paho-c/src/samples/stdinpub.c

38 
	~"MQTTClõ¡.h
"

39 
	~"MQTTClõ¡Pîsi°í˚.h
"

41 
	~<°dio.h
>

42 
	~<sig«l.h
>

43 
	~<mem‹y.h
>

46 #i‡
deföed
(
WIN32
)

47 
	~<Wödows.h
>

48 
	#¶ìp
 
SÀï


	)

50 
	~<sys/time.h
>

51 
	~<°dlib.h
>

55 vﬁ©ûê
	gtoSt›
 = 0;

58 
	$ußge
()

60 
	`¥ötf
("MQTT stdinÖublisher\n");

61 
	`¥ötf
("Usage: stdinpubÅopicname <options>, where optionsáre:\n");

62 
	`¥ötf
(" --host <hostname> (default isÜocalhost)\n");

63 
	`¥ötf
(" --port <port> (default is 1883)\n");

64 
	`¥ötf
(" --qos <qos> (default is 0)\n");

65 
	`¥ötf
(" --retained (default is off)\n");

66 
	`¥ötf
(" --delimiter <delim> (default is \\n)");

67 
	`¥ötf
(" --clientid <clientid> (default is hostname+timestamp)");

68 
	`¥ötf
(" --maxdatalen 100\n");

69 
	`¥ötf
(" --usernameÇone\n");

70 
	`¥ötf
(" --passwordÇone\n");

71 
	`exô
(-1);

72 
	}
}

75 
	$myc⁄√˘
(
MQTTClõ¡
* 
˛õ¡
, 
MQTTClõ¡_c⁄√˘O±i⁄s
* 
›ts
)

77 
	`¥ötf
("Connecting\n");

78 i‡(
	`MQTTClõ¡_c⁄√˘
(*
˛õ¡
, 
›ts
) != 0)

80 
	`¥ötf
("FailedÅo connect\n");

81 
	`exô
(-1);

83 
	}
}

86 
	$cföish
(
sig
)

88 
	`sig«l
(
SIGINT
, 
NULL
);

89 
toSt›
 = 1;

90 
	}
}

95 * 
	m˛õ¡id
;

96 * 
	mdñimôî
;

97 
	mmaxd©Æí
;

98 
	mqos
;

99 
	mªèöed
;

100 * 
	mu£∫ame
;

101 * 
	m∑ssw‹d
;

102 * 
	mho°
;

103 * 
	mp‹t
;

104 
	mvîbo£
;

105 } 
	g›ts
 =

107 "publishî", "\n", 100, 0, 0, 
NULL
, NULL, "localhost", "1883", 0

110 
gë›ts
(
¨gc
, ** 
¨gv
);

112 
	$mesßgeAºived
(* 
c⁄ãxt
, * 
t›icName
, 
t›icLí
, 
MQTTClõ¡_mesßge
* 
m
)

116 
	}
}

118 
	$maö
(
¨gc
, ** 
¨gv
)

120 
MQTTClõ¡
 
˛õ¡
;

121 
MQTTClõ¡_c⁄√˘O±i⁄s
 
c⁄n_›ts
 = 
MQTTClõ¡_c⁄√˘O±i⁄s_öôülizî
;

122 * 
t›ic
 = 
NULL
;

123 * 
buf„r
 = 
NULL
;

124 
rc
 = 0;

125 
uæ
[100];

127 i‡(
¨gc
 < 2)

128 
	`ußge
();

130 
	`gë›ts
(
¨gc
, 
¨gv
);

132 
	`•rötf
(
uæ
, "%s:%s", 
›ts
.
ho°
, o±s.
p‹t
);

133 i‡(
›ts
.
vîbo£
)

134 
	`¥ötf
("URL i†%s\n", 
uæ
);

136 
t›ic
 = 
¨gv
[1];

137 
	`¥ötf
("UsögÅ›i¯%s\n", 
t›ic
);

139 
rc
 = 
	`MQTTClõ¡_¸óã
(&
˛õ¡
, 
uæ
, 
›ts
.
˛õ¡id
, 
MQTTCLIENT_PERSISTENCE_NONE
, 
NULL
);

141 
	`sig«l
(
SIGINT
, 
cföish
);

142 
	`sig«l
(
SIGTERM
, 
cföish
);

144 
rc
 = 
	`MQTTClõ¡_£tCÆlbacks
(
˛õ¡
, 
NULL
, NULL, 
mesßgeAºived
, NULL);

146 
c⁄n_›ts
.
kìpAliveI¡îvÆ
 = 10;

147 
c⁄n_›ts
.
ªlübÀ
 = 0;

148 
c⁄n_›ts
.
˛ón£ssi⁄
 = 1;

149 
c⁄n_›ts
.
u£∫ame
 = 
›ts
.username;

150 
c⁄n_›ts
.
∑ssw‹d
 = 
›ts
.password;

152 
	`myc⁄√˘
(&
˛õ¡
, &
c⁄n_›ts
);

154 
buf„r
 = 
	`mÆloc
(
›ts
.
maxd©Æí
);

156 !
toSt›
)

158 
d©a_Àn
 = 0;

159 
dñim_Àn
 = 0;

161 
dñim_Àn
 = 
	`°æí
(
›ts
.
dñimôî
);

164 
buf„r
[
d©a_Àn
++] = 
	`gëch¨
();

165 i‡(
d©a_Àn
 > 
dñim_Àn
)

168 i‡(
	`°∫cmp
(
›ts
.
dñimôî
, &
buf„r
[
d©a_Àn
 - 
dñim_Àn
], delim_len) == 0)

171 } 
d©a_Àn
 < 
›ts
.
maxd©Æí
);

173 i‡(
›ts
.
vîbo£
)

174 
	`¥ötf
("Publishög d©®o‡Àngth %d\n", 
d©a_Àn
);

175 
rc
 = 
	`MQTTClõ¡_publish
(
˛õ¡
, 
t›ic
, 
d©a_Àn
, 
buf„r
, 
›ts
.
qos
, o±s.
ªèöed
, 
NULL
);

176 i‡(
rc
 != 0)

178 
	`myc⁄√˘
(&
˛õ¡
, &
c⁄n_›ts
);

179 
rc
 = 
	`MQTTClõ¡_publish
(
˛õ¡
, 
t›ic
, 
d©a_Àn
, 
buf„r
, 
›ts
.
qos
, o±s.
ªèöed
, 
NULL
);

181 i‡(
›ts
.
qos
 > 0)

182 
	`MQTTClõ¡_yõld
();

185 
	`¥ötf
("Stopping\n");

187 
	`‰ì
(
buf„r
);

189 
	`MQTTClõ¡_disc⁄√˘
(
˛õ¡
, 0);

191 
	`MQTTClõ¡_de°roy
(&
˛õ¡
);

194 
	}
}

196 
	$gë›ts
(
¨gc
, ** 
¨gv
)

198 
cou¡
 = 2;

200 
cou¡
 < 
¨gc
)

202 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--retained") == 0)

203 
›ts
.
ªèöed
 = 1;

204 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--verbose") == 0)

205 
›ts
.
vîbo£
 = 1;

206 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--qos") == 0)

208 i‡(++
cou¡
 < 
¨gc
)

210 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "0") == 0)

211 
›ts
.
qos
 = 0;

212 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "1") == 0)

213 
›ts
.
qos
 = 1;

214 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "2") == 0)

215 
›ts
.
qos
 = 2;

217 
	`ußge
();

220 
	`ußge
();

222 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--host") == 0)

224 i‡(++
cou¡
 < 
¨gc
)

225 
›ts
.
ho°
 = 
¨gv
[
cou¡
];

227 
	`ußge
();

229 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--port") == 0)

231 i‡(++
cou¡
 < 
¨gc
)

232 
›ts
.
p‹t
 = 
¨gv
[
cou¡
];

234 
	`ußge
();

236 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--clientid") == 0)

238 i‡(++
cou¡
 < 
¨gc
)

239 
›ts
.
˛õ¡id
 = 
¨gv
[
cou¡
];

241 
	`ußge
();

243 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--username") == 0)

245 i‡(++
cou¡
 < 
¨gc
)

246 
›ts
.
u£∫ame
 = 
¨gv
[
cou¡
];

248 
	`ußge
();

250 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--password") == 0)

252 i‡(++
cou¡
 < 
¨gc
)

253 
›ts
.
∑ssw‹d
 = 
¨gv
[
cou¡
];

255 
	`ußge
();

257 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--maxdatalen") == 0)

259 i‡(++
cou¡
 < 
¨gc
)

260 
›ts
.
maxd©Æí
 = 
	`©oi
(
¨gv
[
cou¡
]);

262 
	`ußge
();

264 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--delimiter") == 0)

266 i‡(++
cou¡
 < 
¨gc
)

267 
›ts
.
dñimôî
 = 
¨gv
[
cou¡
];

269 
	`ußge
();

271 
cou¡
++;

274 
	}
}

	@paho-c/src/samples/stdinpuba.c

38 
	~"MQTTAsync.h
"

40 
	~<°dio.h
>

41 
	~<sig«l.h
>

42 
	~<mem‹y.h
>

45 #i‡
deföed
(
WIN32
)

46 
	~<Wödows.h
>

47 
	#¶ìp
 
SÀï


	)

49 
	~<sys/time.h
>

50 
	~<°dlib.h
>

54 vﬁ©ûê
	gtoSt›
 = 0;

57 
	$ußge
()

59 
	`¥ötf
("MQTT stdinÖublisher\n");

60 
	`¥ötf
("Usage: stdinpubÅopicname <options>, where optionsáre:\n");

61 
	`¥ötf
(" --host <hostname> (default isÜocalhost)\n");

62 
	`¥ötf
(" --port <port> (default is 1883)\n");

63 
	`¥ötf
(" --qos <qos> (default is 0)\n");

64 
	`¥ötf
(" --retained (default is off)\n");

65 
	`¥ötf
(" --delimiter <delim> (default is \\n)");

66 
	`¥ötf
(" --clientid <clientid> (default is hostname+timestamp)");

67 
	`¥ötf
(" --maxdatalen 100\n");

68 
	`¥ötf
(" --usernameÇone\n");

69 
	`¥ötf
(" --passwordÇone\n");

70 
	`exô
(-1);

71 
	}
}

75 
	$cföish
(
sig
)

77 
	`sig«l
(
SIGINT
, 
NULL
);

78 
toSt›
 = 1;

79 
	}
}

84 * 
	m˛õ¡id
;

85 * 
	mdñimôî
;

86 
	mmaxd©Æí
;

87 
	mqos
;

88 
	mªèöed
;

89 * 
	mu£∫ame
;

90 * 
	m∑ssw‹d
;

91 * 
	mho°
;

92 * 
	mp‹t
;

93 
	mvîbo£
;

94 } 
	g›ts
 =

96 "publishî", "\n", 100, 0, 0, 
NULL
, NULL, "localhost", "1883", 0

99 
gë›ts
(
¨gc
, ** 
¨gv
);

101 
	$mesßgeAºived
(* 
c⁄ãxt
, * 
t›icName
, 
t›icLí
, 
MQTTAsync_mesßge
* 
m
)

105 
	}
}

108 
	gdisc⁄√˘ed
 = 0;

110 
	$⁄Disc⁄√˘
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

112 
disc⁄√˘ed
 = 1;

113 
	}
}

116 
	gc⁄√˘ed
 = 0;

118 
	$⁄C⁄√˘Faûuª
(* 
c⁄ãxt
, 
MQTTAsync_ÁûuªD©a
* 
ª•⁄£
)

120 
	`¥ötf
("C⁄√˘ faûed,Ñ¯%d\n", 
ª•⁄£
 ? -1 :Ñe•⁄£->
code
);

121 
c⁄√˘ed
 = -1;

122 
	}
}

125 
	$⁄C⁄√˘
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

127 
MQTTAsync
 
˛õ¡
 = (MQTTAsync)
c⁄ãxt
;

128 
rc
;

130 
	`¥ötf
("Connected\n");

131 
c⁄√˘ed
 = 1;

132 
	}
}

135 
	$myc⁄√˘
(
MQTTAsync
* 
˛õ¡
)

137 
MQTTAsync_c⁄√˘O±i⁄s
 
c⁄n_›ts
 = 
MQTTAsync_c⁄√˘O±i⁄s_öôülizî
;

138 
MQTTAsync_SSLO±i⁄s
 
s¶_›ts
 = 
MQTTAsync_SSLO±i⁄s_öôülizî
;

139 
rc
 = 0;

141 
	`¥ötf
("Connecting\n");

142 
c⁄n_›ts
.
kìpAliveI¡îvÆ
 = 10;

143 
c⁄n_›ts
.
˛ón£ssi⁄
 = 1;

144 
c⁄n_›ts
.
u£∫ame
 = 
›ts
.username;

145 
c⁄n_›ts
.
∑ssw‹d
 = 
›ts
.password;

146 
c⁄n_›ts
.
⁄Suc˚ss
 = 
⁄C⁄√˘
;

147 
c⁄n_›ts
.
⁄Faûuª
 = 
⁄C⁄√˘Faûuª
;

148 
c⁄n_›ts
.
c⁄ãxt
 = 
˛õ¡
;

149 
s¶_›ts
.
íabÀSîvîCîtAuth
 = 0;

150 
c⁄n_›ts
.
s¶
 = &
s¶_›ts
;

151 
c⁄√˘ed
 = 0;

152 i‡((
rc
 = 
	`MQTTAsync_c⁄√˘
(*
˛õ¡
, &
c⁄n_›ts
)Ë!
MQTTASYNC_SUCCESS
)

154 
	`¥ötf
("FaûedÅÿ°¨àc⁄√˘,Ñëu∫ codê%d\n", 
rc
);

155 
	`exô
(-1);

157 
c⁄√˘ed
 == 0)

158 #i‡
	`deföed
(
WIN32
)

159 
	`SÀï
(100);

161 
	`u¶ìp
(10000L);

163 
	}
}

166 
	gpublished
 = 0;

168 
	$⁄PublishFaûuª
(* 
c⁄ãxt
, 
MQTTAsync_ÁûuªD©a
* 
ª•⁄£
)

170 
	`¥ötf
("Publish faûed,Ñ¯%d\n", 
ª•⁄£
 ? -1 :Ñe•⁄£->
code
);

171 
published
 = -1;

172 
	}
}

175 
	$⁄Publish
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

177 
MQTTAsync
 
˛õ¡
 = (MQTTAsync)
c⁄ãxt
;

179 
published
 = 1;

180 
	}
}

183 
	$c⁄√˘i⁄Lo°
(* 
c⁄ãxt
, * 
ˇu£
)

185 
MQTTAsync
 
˛õ¡
 = (MQTTAsync)
c⁄ãxt
;

186 
MQTTAsync_c⁄√˘O±i⁄s
 
c⁄n_›ts
 = 
MQTTAsync_c⁄√˘O±i⁄s_öôülizî
;

187 
MQTTAsync_SSLO±i⁄s
 
s¶_›ts
 = 
MQTTAsync_SSLO±i⁄s_öôülizî
;

188 
rc
 = 0;

190 
	`¥ötf
("Connecting\n");

191 
c⁄n_›ts
.
kìpAliveI¡îvÆ
 = 10;

192 
c⁄n_›ts
.
˛ón£ssi⁄
 = 1;

193 
c⁄n_›ts
.
u£∫ame
 = 
›ts
.username;

194 
c⁄n_›ts
.
∑ssw‹d
 = 
›ts
.password;

195 
c⁄n_›ts
.
⁄Suc˚ss
 = 
⁄C⁄√˘
;

196 
c⁄n_›ts
.
⁄Faûuª
 = 
⁄C⁄√˘Faûuª
;

197 
c⁄n_›ts
.
c⁄ãxt
 = 
˛õ¡
;

198 
s¶_›ts
.
íabÀSîvîCîtAuth
 = 0;

199 
c⁄n_›ts
.
s¶
 = &
s¶_›ts
;

200 
c⁄√˘ed
 = 0;

201 i‡((
rc
 = 
	`MQTTAsync_c⁄√˘
(
˛õ¡
, &
c⁄n_›ts
)Ë!
MQTTASYNC_SUCCESS
)

203 
	`¥ötf
("FaûedÅÿ°¨àc⁄√˘,Ñëu∫ codê%d\n", 
rc
);

204 
	`exô
(-1);

206 
	}
}

208 #i‡!
deföed
(
_WINDOWS
)

209 
	~<sys/time.h
>

210 
	~<sys/sockë.h
>

211 
	~<uni°d.h
>

212 
	~<î∫o.h
>

214 
	~<wösock2.h
>

215 
	~<ws2t˝ù.h
>

216 
	#MAXHOSTNAMELEN
 256

	)

217 
	#EAGAIN
 
WSAEWOULDBLOCK


	)

218 
	#EINTR
 
WSAEINTR


	)

219 
	#EINPROGRESS
 
WSAEINPROGRESS


	)

220 
	#EWOULDBLOCK
 
WSAEWOULDBLOCK


	)

221 
	#ENOTCONN
 
WSAENOTCONN


	)

222 
	#ECONNRESET
 
WSAECONNRESET


	)

223 
	#£ãnv
(
a
, 
b
, 
c
Ë
	`_puãnv_s
◊, b)

	)

227 #i‡!
deföed
(
SOCKET_ERROR
)

228 
	#SOCKET_ERROR
 -1

	)

234 
	msockë
;

235 
time_t
 
	mœ°C⁄è˘
;

236 #i‡
deföed
(
OPENSSL
)

237 
SSL
* 
	ms¶
;

238 
SSL_CTX
* 
	m˘x
;

240 } 
	t√tw‹kH™dÀs
;

245 * 
	m˛õ¡ID
;

246 * 
	mu£∫ame
;

247 * 
	m∑ssw‹d
;

248 
	m˛ón£ssi⁄
 : 1;

249 
	mc⁄√˘ed
 : 1;

250 
	mgood
 : 1;

251 
	mpög_out°™dög
 : 1;

252 
	mc⁄√˘_°©e
 : 4;

253 
√tw‹kH™dÀs
 
	m√t
;

255 } 
	tClõ¡s
;

258 
	sMQTTAsync_°ru˘


260 * 
	m£rvîURI
;

261 
	ms¶
;

262 
Clõ¡s
* 
	mc
;

265 
MQTTAsync_c⁄√˘i⁄Lo°
* 
	m˛
;

266 
MQTTAsync_mesßgeAºived
* 
	mma
;

267 
MQTTAsync_dñivîyCom∂ëe
* 
	mdc
;

268 * 
	mc⁄ãxt
;

270 
MQTTAsync_comm™d
 
	mc⁄√˘
;

271 
MQTTAsync_comm™d
 
	mdisc⁄√˘
;

272 
MQTTAsync_comm™d
* 
	m≥ndög_wrôe
;

274 
Li°
* 
	mª•⁄£s
;

275 
	mcomm™d_£qno
;

277 
MQTTPackë
* 
	m∑ck
;

279 } 
	tMQTTAsyncs
;

281 
	$ã°6_sockë_îr‹
(* 
aSåög
, 
sock
)

283 #i‡
	`deföed
(
WIN32
)

284 
î∫o
;

287 #i‡
	`deföed
(
WIN32
)

288 
î∫o
 = 
	`WSAGëLa°Eº‹
();

290 i‡(
î∫o
 !
EINTR
 &&Éºnÿ!
EAGAIN
 &&Éºnÿ!
EINPROGRESS
 &&Éºnÿ!
EWOULDBLOCK
)

292 i‡(
	`°rcmp
(
aSåög
, "shutdown"Ë!0 || (
î∫o
 !
ENOTCONN
 &&Éºnÿ!
ECONNRESET
))

293 
	`¥ötf
("SockëÉº‹ %d i¿%†f‹ sockë %d", 
î∫o
, 
aSåög
, 
sock
);

295  
î∫o
;

296 
	}
}

299 
	$ã°6_sockë_˛o£
(
sockë
)

301 
rc
;

303 #i‡
	`deföed
(
WIN32
)

304 i‡(
	`shutdown
(
sockë
, 
SD_BOTH
Ë=
SOCKET_ERROR
)

305 
	`ã°6_sockë_îr‹
("shutdown", 
sockë
);

306 i‡((
rc
 = 
	`˛o£sockë
(
sockë
)Ë=
SOCKET_ERROR
)

307 
	`ã°6_sockë_îr‹
("˛o£", 
sockë
);

309 i‡(
	`shutdown
(
sockë
, 
SHUT_RDWR
Ë=
SOCKET_ERROR
)

310 
	`ã°6_sockë_îr‹
("shutdown", 
sockë
);

311 i‡((
rc
 = 
	`˛o£
(
sockë
)Ë=
SOCKET_ERROR
)

312 
	`ã°6_sockë_îr‹
("˛o£", 
sockë
);

314  
rc
;

315 
	}
}

318 
	$maö
(
¨gc
, ** 
¨gv
)

320 
MQTTAsync_disc⁄√˘O±i⁄s
 
disc_›ts
 = 
MQTTAsync_disc⁄√˘O±i⁄s_öôülizî
;

321 
MQTTAsync_ª•⁄£O±i⁄s
 
pub_›ts
 = 
MQTTAsync_ª•⁄£O±i⁄s_öôülizî
;

322 
MQTTAsync
 
˛õ¡
;

323 * 
t›ic
 = 
NULL
;

324 * 
buf„r
 = 
NULL
;

325 
rc
 = 0;

326 
uæ
[100];

328 i‡(
¨gc
 < 2)

329 
	`ußge
();

331 
	`gë›ts
(
¨gc
, 
¨gv
);

333 
	`•rötf
(
uæ
, "%s:%s", 
›ts
.
ho°
, o±s.
p‹t
);

334 i‡(
›ts
.
vîbo£
)

335 
	`¥ötf
("URL i†%s\n", 
uæ
);

337 
t›ic
 = 
¨gv
[1];

338 
	`¥ötf
("UsögÅ›i¯%s\n", 
t›ic
);

340 
rc
 = 
	`MQTTAsync_¸óã
(&
˛õ¡
, 
uæ
, 
›ts
.
˛õ¡id
, 
MQTTCLIENT_PERSISTENCE_NONE
, 
NULL
);

342 
	`sig«l
(
SIGINT
, 
cföish
);

343 
	`sig«l
(
SIGTERM
, 
cföish
);

345 
rc
 = 
	`MQTTAsync_£tCÆlbacks
(
˛õ¡
, clõ¡, 
c⁄√˘i⁄Lo°
, 
mesßgeAºived
, 
NULL
);

347 
	`myc⁄√˘
(&
˛õ¡
);

349 
buf„r
 = 
	`mÆloc
(
›ts
.
maxd©Æí
);

351 !
toSt›
)

353 
d©a_Àn
 = 0;

354 
dñim_Àn
 = 0;

356 
dñim_Àn
 = 
	`°æí
(
›ts
.
dñimôî
);

359 
buf„r
[
d©a_Àn
++] = 
	`gëch¨
();

360 i‡(
d©a_Àn
 > 
dñim_Àn
)

363 i‡(
	`°∫cmp
(
›ts
.
dñimôî
, &
buf„r
[
d©a_Àn
 - 
dñim_Àn
], delim_len) == 0)

366 } 
d©a_Àn
 < 
›ts
.
maxd©Æí
);

368 i‡(
›ts
.
vîbo£
)

369 
	`¥ötf
("Publishög d©®o‡Àngth %d\n", 
d©a_Àn
);

370 
pub_›ts
.
⁄Suc˚ss
 = 
⁄Publish
;

371 
pub_›ts
.
⁄Faûuª
 = 
⁄PublishFaûuª
;

374 
published
 = 0;

375 
rc
 = 
	`MQTTAsync_£nd
(
˛õ¡
, 
t›ic
, 
d©a_Àn
, 
buf„r
, 
›ts
.
qos
, o±s.
ªèöed
, &
pub_›ts
);

376 
published
 == 0)

377 #i‡
	`deföed
(
WIN32
)

378 
	`SÀï
(100);

380 
	`u¶ìp
(1000L);

382 i‡(
published
 == -1)

383 
	`myc⁄√˘
(&
˛õ¡
);

384 
	`ã°6_sockë_˛o£
(((
MQTTAsyncs
*)
˛õ¡
)->
c
->
√t
.
sockë
);

386 
published
 != 1);

389 
	`¥ötf
("Stopping\n");

391 
	`‰ì
(
buf„r
);

393 
disc_›ts
.
⁄Suc˚ss
 = 
⁄Disc⁄√˘
;

394 i‡((
rc
 = 
	`MQTTAsync_disc⁄√˘
(
˛õ¡
, &
disc_›ts
)Ë!
MQTTASYNC_SUCCESS
)

396 
	`¥ötf
("FaûedÅÿ°¨àdisc⁄√˘,Ñëu∫ codê%d\n", 
rc
);

397 
	`exô
(-1);

400 !
disc⁄√˘ed
)

401 #i‡
	`deföed
(
WIN32
)

402 
	`SÀï
(100);

404 
	`u¶ìp
(10000L);

407 
	`MQTTAsync_de°roy
(&
˛õ¡
);

410 
	}
}

412 
	$gë›ts
(
¨gc
, ** 
¨gv
)

414 
cou¡
 = 2;

416 
cou¡
 < 
¨gc
)

418 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--retained") == 0)

419 
›ts
.
ªèöed
 = 1;

420 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--verbose") == 0)

421 
›ts
.
vîbo£
 = 1;

422 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--qos") == 0)

424 i‡(++
cou¡
 < 
¨gc
)

426 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "0") == 0)

427 
›ts
.
qos
 = 0;

428 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "1") == 0)

429 
›ts
.
qos
 = 1;

430 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "2") == 0)

431 
›ts
.
qos
 = 2;

433 
	`ußge
();

436 
	`ußge
();

438 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--host") == 0)

440 i‡(++
cou¡
 < 
¨gc
)

441 
›ts
.
ho°
 = 
¨gv
[
cou¡
];

443 
	`ußge
();

445 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--port") == 0)

447 i‡(++
cou¡
 < 
¨gc
)

448 
›ts
.
p‹t
 = 
¨gv
[
cou¡
];

450 
	`ußge
();

452 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--clientid") == 0)

454 i‡(++
cou¡
 < 
¨gc
)

455 
›ts
.
˛õ¡id
 = 
¨gv
[
cou¡
];

457 
	`ußge
();

459 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--username") == 0)

461 i‡(++
cou¡
 < 
¨gc
)

462 
›ts
.
u£∫ame
 = 
¨gv
[
cou¡
];

464 
	`ußge
();

466 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--password") == 0)

468 i‡(++
cou¡
 < 
¨gc
)

469 
›ts
.
∑ssw‹d
 = 
¨gv
[
cou¡
];

471 
	`ußge
();

473 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--maxdatalen") == 0)

475 i‡(++
cou¡
 < 
¨gc
)

476 
›ts
.
maxd©Æí
 = 
	`©oi
(
¨gv
[
cou¡
]);

478 
	`ußge
();

480 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--delimiter") == 0)

482 i‡(++
cou¡
 < 
¨gc
)

483 
›ts
.
dñimôî
 = 
¨gv
[
cou¡
];

485 
	`ußge
();

487 
cou¡
++;

490 
	}
}

	@paho-c/src/samples/stdoutsub.c

38 
	~"MQTTClõ¡.h
"

39 
	~"MQTTClõ¡Pîsi°í˚.h
"

41 
	~<°dio.h
>

42 
	~<sig«l.h
>

43 
	~<mem‹y.h
>

46 #i‡
deföed
(
WIN32
)

47 
	~<Wödows.h
>

48 
	#¶ìp
 
SÀï


	)

50 
	~<sys/time.h
>

51 
	~<°dlib.h
>

55 vﬁ©ûê
	gtoSt›
 = 0;

58 
	$ußge
()

60 
	`¥ötf
("MQTT stdout subscriber\n");

61 
	`¥ötf
("Usage: stdoutsubÅopicname <options>, where optionsáre:\n");

62 
	`¥ötf
(" --host <hostname> (default isÜocalhost)\n");

63 
	`¥ötf
(" --port <port> (default is 1883)\n");

64 
	`¥ötf
(" --qos <qos> (default is 2)\n");

65 
	`¥ötf
(" --delimiter <delim> (default is \\n)\n");

66 
	`¥ötf
(" --clientid <clientid> (default is hostname+timestamp)\n");

67 
	`¥ötf
(" --usernameÇone\n");

68 
	`¥ötf
(" --passwordÇone\n");

69 
	`¥ötf
(" --showtopics <on or off> (default is on ifÅheÅopic hasá wildcard,Élse off)\n");

70 
	`exô
(-1);

71 
	}
}

74 
	$myc⁄√˘
(
MQTTClõ¡
* 
˛õ¡
, 
MQTTClõ¡_c⁄√˘O±i⁄s
* 
›ts
)

76 
rc
 = 0;

77 i‡((
rc
 = 
	`MQTTClõ¡_c⁄√˘
(*
˛õ¡
, 
›ts
)) != 0)

79 
	`¥ötf
("FaûedÅÿc⁄√˘,Ñëu∫ codê%d\n", 
rc
);

80 
	`exô
(-1);

82 
	}
}

85 
	$cföish
(
sig
)

87 
	`sig«l
(
SIGINT
, 
NULL
);

88 
toSt›
 = 1;

89 
	}
}

92 
	s›ts_°ru˘


94 * 
	m˛õ¡id
;

95 
	mnodñimôî
;

96 * 
	mdñimôî
;

97 
	mqos
;

98 * 
	mu£∫ame
;

99 * 
	m∑ssw‹d
;

100 * 
	mho°
;

101 * 
	mp‹t
;

102 
	mshowt›ics
;

103 } 
	g›ts
 =

105 "°dout-subs¸ibî", 0, "\n", 2, 
NULL
, NULL, "localhost", "1883", 0

108 
gë›ts
(
¨gc
, ** 
¨gv
);

110 
	$maö
(
¨gc
, ** 
¨gv
)

112 
MQTTClõ¡
 
˛õ¡
;

113 
MQTTClõ¡_c⁄√˘O±i⁄s
 
c⁄n_›ts
 = 
MQTTClõ¡_c⁄√˘O±i⁄s_öôülizî
;

114 * 
t›ic
 = 
NULL
;

115 
rc
 = 0;

116 
uæ
[100];

118 i‡(
¨gc
 < 2)

119 
	`ußge
();

121 
t›ic
 = 
¨gv
[1];

123 i‡(
	`°rchr
(
t›ic
, '#') || strchr(topic, '+'))

124 
›ts
.
showt›ics
 = 1;

125 i‡(
›ts
.
showt›ics
)

126 
	`¥ötf
("t›i¯i†%s\n", 
t›ic
);

128 
	`gë›ts
(
¨gc
, 
¨gv
);

129 
	`•rötf
(
uæ
, "%s:%s", 
›ts
.
ho°
, o±s.
p‹t
);

131 
rc
 = 
	`MQTTClõ¡_¸óã
(&
˛õ¡
, 
uæ
, 
›ts
.
˛õ¡id
, 
MQTTCLIENT_PERSISTENCE_NONE
, 
NULL
);

133 
	`sig«l
(
SIGINT
, 
cföish
);

134 
	`sig«l
(
SIGTERM
, 
cföish
);

136 
c⁄n_›ts
.
kìpAliveI¡îvÆ
 = 10;

137 
c⁄n_›ts
.
ªlübÀ
 = 0;

138 
c⁄n_›ts
.
˛ón£ssi⁄
 = 1;

139 
c⁄n_›ts
.
u£∫ame
 = 
›ts
.username;

140 
c⁄n_›ts
.
∑ssw‹d
 = 
›ts
.password;

142 
	`myc⁄√˘
(&
˛õ¡
, &
c⁄n_›ts
);

144 
rc
 = 
	`MQTTClõ¡_subs¸ibe
(
˛õ¡
, 
t›ic
, 
›ts
.
qos
);

146 !
toSt›
)

148 * 
t›icName
 = 
NULL
;

149 
t›icLí
;

150 
MQTTClõ¡_mesßge
* 
mesßge
 = 
NULL
;

152 
rc
 = 
	`MQTTClõ¡_ª˚ive
(
˛õ¡
, &
t›icName
, &
t›icLí
, &
mesßge
, 1000);

153 i‡(
mesßge
)

155 i‡(
›ts
.
showt›ics
)

156 
	`¥ötf
("%s\t", 
t›icName
);

157 i‡(
›ts
.
nodñimôî
)

158 
	`¥ötf
("%.*s", 
mesßge
->
∑ylﬂdÀn
, (*)mesßge->
∑ylﬂd
);

160 
	`¥ötf
("%.*s%s", 
mesßge
->
∑ylﬂdÀn
, (*)mesßge->
∑ylﬂd
, 
›ts
.
dñimôî
);

161 
	`fÊush
(
°dout
);

162 
	`MQTTClõ¡_‰ìMesßge
(&
mesßge
);

163 
	`MQTTClõ¡_‰ì
(
t›icName
);

165 i‡(
rc
 != 0)

166 
	`myc⁄√˘
(&
˛õ¡
, &
c⁄n_›ts
);

169 
	`¥ötf
("Stopping\n");

171 
	`MQTTClõ¡_disc⁄√˘
(
˛õ¡
, 0);

173 
	`MQTTClõ¡_de°roy
(&
˛õ¡
);

176 
	}
}

178 
	$gë›ts
(
¨gc
, ** 
¨gv
)

180 
cou¡
 = 2;

182 
cou¡
 < 
¨gc
)

184 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--qos") == 0)

186 i‡(++
cou¡
 < 
¨gc
)

188 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "0") == 0)

189 
›ts
.
qos
 = 0;

190 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "1") == 0)

191 
›ts
.
qos
 = 1;

192 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "2") == 0)

193 
›ts
.
qos
 = 2;

195 
	`ußge
();

198 
	`ußge
();

200 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--host") == 0)

202 i‡(++
cou¡
 < 
¨gc
)

203 
›ts
.
ho°
 = 
¨gv
[
cou¡
];

205 
	`ußge
();

207 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--port") == 0)

209 i‡(++
cou¡
 < 
¨gc
)

210 
›ts
.
p‹t
 = 
¨gv
[
cou¡
];

212 
	`ußge
();

214 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--clientid") == 0)

216 i‡(++
cou¡
 < 
¨gc
)

217 
›ts
.
˛õ¡id
 = 
¨gv
[
cou¡
];

219 
	`ußge
();

221 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--username") == 0)

223 i‡(++
cou¡
 < 
¨gc
)

224 
›ts
.
u£∫ame
 = 
¨gv
[
cou¡
];

226 
	`ußge
();

228 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--password") == 0)

230 i‡(++
cou¡
 < 
¨gc
)

231 
›ts
.
∑ssw‹d
 = 
¨gv
[
cou¡
];

233 
	`ußge
();

235 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--delimiter") == 0)

237 i‡(++
cou¡
 < 
¨gc
)

238 
›ts
.
dñimôî
 = 
¨gv
[
cou¡
];

240 
›ts
.
nodñimôî
 = 1;

242 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--showtopics") == 0)

244 i‡(++
cou¡
 < 
¨gc
)

246 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "on") == 0)

247 
›ts
.
showt›ics
 = 1;

248 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "off") == 0)

249 
›ts
.
showt›ics
 = 0;

251 
	`ußge
();

254 
	`ußge
();

256 
cou¡
++;

259 
	}
}

	@paho-c/src/samples/stdoutsuba.c

39 
	~"MQTTAsync.h
"

40 
	~"MQTTClõ¡Pîsi°í˚.h
"

42 
	~<°dio.h
>

43 
	~<sig«l.h
>

44 
	~<mem‹y.h
>

47 #i‡
deföed
(
WIN32
)

48 
	~<Wödows.h
>

49 
	#¶ìp
 
SÀï


	)

51 
	~<sys/time.h
>

52 
	~<°dlib.h
>

53 
	~<uni°d.h
>

57 vﬁ©ûê
	gföished
 = 0;

58 * 
	gt›ic
 = 
NULL
;

59 
	gsubs¸ibed
 = 0;

60 
	gdisc⁄√˘ed
 = 0;

63 
	$cföish
(
sig
)

65 
	`sig«l
(
SIGINT
, 
NULL
);

66 
föished
 = 1;

67 
	}
}

72 * 
	m˛õ¡id
;

73 
	mnodñimôî
;

74 
	mdñimôî
;

75 
	mqos
;

76 * 
	mu£∫ame
;

77 * 
	m∑ssw‹d
;

78 * 
	mho°
;

79 * 
	mp‹t
;

80 
	mshowt›ics
;

81 } 
	g›ts
 =

83 "°dout-subs¸ibî", 1, '\n', 2, 
NULL
, NULL, "localhost", "1883", 0

87 
	$ußge
()

89 
	`¥ötf
("MQTT stdout subscriber\n");

90 
	`¥ötf
("Usage: stdoutsubÅopicname <options>, where optionsáre:\n");

91 
	`¥ötf
(" --host <hostname> (default isÜocalhost)\n");

92 
	`¥ötf
(" --port <port> (default is 1883)\n");

93 
	`¥ötf
(" --qos <qos> (default is 2)\n");

94 
	`¥ötf
(" --delimiter <delim> (default isÇo delimiter)\n");

95 
	`¥ötf
(" --clientid <clientid> (default is hostname+timestamp)\n");

96 
	`¥ötf
(" --usernameÇone\n");

97 
	`¥ötf
(" --passwordÇone\n");

98 
	`¥ötf
(" --showtopics <on or off> (default is on ifÅheÅopic hasá wildcard,Élse off)\n");

99 
	`exô
(-1);

100 
	}
}

103 
	$gë›ts
(
¨gc
, ** 
¨gv
)

105 
cou¡
 = 2;

107 
cou¡
 < 
¨gc
)

109 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--qos") == 0)

111 i‡(++
cou¡
 < 
¨gc
)

113 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "0") == 0)

114 
›ts
.
qos
 = 0;

115 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "1") == 0)

116 
›ts
.
qos
 = 1;

117 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "2") == 0)

118 
›ts
.
qos
 = 2;

120 
	`ußge
();

123 
	`ußge
();

125 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--host") == 0)

127 i‡(++
cou¡
 < 
¨gc
)

128 
›ts
.
ho°
 = 
¨gv
[
cou¡
];

130 
	`ußge
();

132 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--port") == 0)

134 i‡(++
cou¡
 < 
¨gc
)

135 
›ts
.
p‹t
 = 
¨gv
[
cou¡
];

137 
	`ußge
();

139 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--clientid") == 0)

141 i‡(++
cou¡
 < 
¨gc
)

142 
›ts
.
˛õ¡id
 = 
¨gv
[
cou¡
];

144 
	`ußge
();

146 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--username") == 0)

148 i‡(++
cou¡
 < 
¨gc
)

149 
›ts
.
u£∫ame
 = 
¨gv
[
cou¡
];

151 
	`ußge
();

153 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--password") == 0)

155 i‡(++
cou¡
 < 
¨gc
)

156 
›ts
.
∑ssw‹d
 = 
¨gv
[
cou¡
];

158 
	`ußge
();

160 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--delimiter") == 0)

162 i‡(++
cou¡
 < 
¨gc
)

164 i‡(
	`°rcmp
("√wlöe", 
¨gv
[
cou¡
]) == 0)

165 
›ts
.
dñimôî
 = '\n';

167 
›ts
.
dñimôî
 = 
¨gv
[
cou¡
][0];

168 
›ts
.
nodñimôî
 = 0;

171 
	`ußge
();

173 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--showtopics") == 0)

175 i‡(++
cou¡
 < 
¨gc
)

177 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "on") == 0)

178 
›ts
.
showt›ics
 = 1;

179 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "off") == 0)

180 
›ts
.
showt›ics
 = 0;

182 
	`ußge
();

185 
	`ußge
();

187 
cou¡
++;

190 
	}
}

193 
	$mesßgeAºived
(*
c⁄ãxt
, *
t›icName
, 
t›icLí
, 
MQTTAsync_mesßge
 *
mesßge
)

195 i‡(
›ts
.
showt›ics
)

196 
	`¥ötf
("%s\t", 
t›icName
);

197 i‡(
›ts
.
nodñimôî
)

198 
	`¥ötf
("%.*s", 
mesßge
->
∑ylﬂdÀn
, (*)mesßge->
∑ylﬂd
);

200 
	`¥ötf
("%.*s%c", 
mesßge
->
∑ylﬂdÀn
, (*)mesßge->
∑ylﬂd
, 
›ts
.
dñimôî
);

201 
	`fÊush
(
°dout
);

202 
	`MQTTAsync_‰ìMesßge
(&
mesßge
);

203 
	`MQTTAsync_‰ì
(
t›icName
);

205 
	}
}

208 
	$⁄Disc⁄√˘
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

210 
disc⁄√˘ed
 = 1;

211 
	}
}

214 
	$⁄Subs¸ibe
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

216 
subs¸ibed
 = 1;

217 
	}
}

220 
	$⁄Subs¸ibeFaûuª
(* 
c⁄ãxt
, 
MQTTAsync_ÁûuªD©a
* 
ª•⁄£
)

222 
	`¥ötf
("Subs¸ibêÁûed,Ñ¯%d\n", 
ª•⁄£
->
code
);

223 
föished
 = 1;

224 
	}
}

227 
	$⁄C⁄√˘Faûuª
(* 
c⁄ãxt
, 
MQTTAsync_ÁûuªD©a
* 
ª•⁄£
)

229 
	`¥ötf
("C⁄√˘ faûed,Ñ¯%d\n", 
ª•⁄£
->
code
);

230 
föished
 = 1;

231 
	}
}

234 
	$⁄C⁄√˘
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

236 
MQTTAsync
 
˛õ¡
 = (MQTTAsync)
c⁄ãxt
;

237 
MQTTAsync_ª•⁄£O±i⁄s
 
r›ts
 = 
MQTTAsync_ª•⁄£O±i⁄s_öôülizî
;

238 
MQTTAsync_mesßge
 
pubmsg
 = 
MQTTAsync_mesßge_öôülizî
;

239 
rc
;

241 i‡(
›ts
.
showt›ics
)

242 
	`¥ötf
("Subs¸ibögÅÿt›i¯%†wôh clõ¡ %†© QoS %d\n", 
t›ic
, 
›ts
.
˛õ¡id
, o±s.
qos
);

244 
r›ts
.
⁄Suc˚ss
 = 
⁄Subs¸ibe
;

245 
r›ts
.
⁄Faûuª
 = 
⁄Subs¸ibeFaûuª
;

246 
r›ts
.
c⁄ãxt
 = 
˛õ¡
;

247 i‡((
rc
 = 
	`MQTTAsync_subs¸ibe
(
˛õ¡
, 
t›ic
, 
›ts
.
qos
, &
r›ts
)Ë!
MQTTASYNC_SUCCESS
)

249 
	`¥ötf
("FaûedÅÿ°¨àsubs¸ibe,Ñëu∫ codê%d\n", 
rc
);

250 
föished
 = 1;

252 
	}
}

255 
MQTTAsync_c⁄√˘O±i⁄s
 
	gc⁄n_›ts
 = 
MQTTAsync_c⁄√˘O±i⁄s_öôülizî
;

258 
	$c⁄√˘i⁄Lo°
(*
c⁄ãxt
, *
ˇu£
)

260 
MQTTAsync
 
˛õ¡
 = (MQTTAsync)
c⁄ãxt
;

261 
rc
;

263 
	`¥ötf
("connectionLost called\n");

264 i‡((
rc
 = 
	`MQTTAsync_c⁄√˘
(
˛õ¡
, &
c⁄n_›ts
)Ë!
MQTTASYNC_SUCCESS
)

266 
	`¥ötf
("FaûedÅÿ°¨àªc⁄√˘,Ñëu∫ codê%d\n", 
rc
);

267 
föished
 = 1;

269 
	}
}

272 
	$maö
(
¨gc
, ** 
¨gv
)

274 
MQTTAsync
 
˛õ¡
;

275 
MQTTAsync_disc⁄√˘O±i⁄s
 
disc_›ts
 = 
MQTTAsync_disc⁄√˘O±i⁄s_öôülizî
;

276 
rc
 = 0;

277 
uæ
[100];

279 i‡(
¨gc
 < 2)

280 
	`ußge
();

282 
t›ic
 = 
¨gv
[1];

284 i‡(
	`°rchr
(
t›ic
, '#') || strchr(topic, '+'))

285 
›ts
.
showt›ics
 = 1;

286 i‡(
›ts
.
showt›ics
)

287 
	`¥ötf
("t›i¯i†%s\n", 
t›ic
);

289 
	`gë›ts
(
¨gc
, 
¨gv
);

290 
	`•rötf
(
uæ
, "%s:%s", 
›ts
.
ho°
, o±s.
p‹t
);

292 
rc
 = 
	`MQTTAsync_¸óã
(&
˛õ¡
, 
uæ
, 
›ts
.
˛õ¡id
, 
MQTTCLIENT_PERSISTENCE_NONE
, 
NULL
);

294 
	`MQTTAsync_£tCÆlbacks
(
˛õ¡
, clõ¡, 
c⁄√˘i⁄Lo°
, 
mesßgeAºived
, 
NULL
);

296 
	`sig«l
(
SIGINT
, 
cföish
);

297 
	`sig«l
(
SIGTERM
, 
cföish
);

299 
c⁄n_›ts
.
kìpAliveI¡îvÆ
 = 10;

300 
c⁄n_›ts
.
˛ón£ssi⁄
 = 1;

301 
c⁄n_›ts
.
u£∫ame
 = 
›ts
.username;

302 
c⁄n_›ts
.
∑ssw‹d
 = 
›ts
.password;

303 
c⁄n_›ts
.
⁄Suc˚ss
 = 
⁄C⁄√˘
;

304 
c⁄n_›ts
.
⁄Faûuª
 = 
⁄C⁄√˘Faûuª
;

305 
c⁄n_›ts
.
c⁄ãxt
 = 
˛õ¡
;

306 i‡((
rc
 = 
	`MQTTAsync_c⁄√˘
(
˛õ¡
, &
c⁄n_›ts
)Ë!
MQTTASYNC_SUCCESS
)

308 
	`¥ötf
("FaûedÅÿ°¨àc⁄√˘,Ñëu∫ codê%d\n", 
rc
);

309 
	`exô
(-1);

312 !
subs¸ibed
)

313 #i‡
	`deföed
(
WIN32
)

314 
	`SÀï
(100);

316 
	`u¶ìp
(10000L);

319 i‡(
föished
)

320 
exô
;

322 !
föished
)

323 #i‡
	`deföed
(
WIN32
)

324 
	`SÀï
(100);

326 
	`u¶ìp
(10000L);

329 
disc_›ts
.
⁄Suc˚ss
 = 
⁄Disc⁄√˘
;

330 i‡((
rc
 = 
	`MQTTAsync_disc⁄√˘
(
˛õ¡
, &
disc_›ts
)Ë!
MQTTASYNC_SUCCESS
)

332 
	`¥ötf
("FaûedÅÿ°¨àdisc⁄√˘,Ñëu∫ codê%d\n", 
rc
);

333 
	`exô
(-1);

336 !
disc⁄√˘ed
)

337 #i‡
	`deföed
(
WIN32
)

338 
	`SÀï
(100);

340 
	`u¶ìp
(10000L);

343 
exô
:

344 
	`MQTTAsync_de°roy
(&
˛õ¡
);

347 
	}
}

	@paho-c/src/samples/subasync.c

17 
	~"°dio.h
"

18 
	~"°dlib.h
"

19 
	~"°rög.h
"

20 
	~"MQTTClõ¡.h
"

22 
	#ADDRESS
 "t˝://loˇlho°:1883"

	)

23 
	#CLIENTID
 "Exam∂eClõ¡Sub"

	)

24 
	#TOPIC
 "MQTT Exam∂es"

	)

25 
	#PAYLOAD
 "HñlÿW‹ld!"

	)

26 
	#QOS
 1

	)

27 
	#TIMEOUT
 10000L

	)

29 vﬁ©ûê
MQTTClõ¡_dñivîyTokí
 
	gdñivîedtokí
;

31 
	$dñivîed
(*
c⁄ãxt
, 
MQTTClõ¡_dñivîyTokí
 
dt
)

33 
	`¥ötf
("MesßgêwôhÅokí vÆuê%d dñivîy c⁄fúmed\n", 
dt
);

34 
dñivîedtokí
 = 
dt
;

35 
	}
}

37 
	$msg¨rvd
(*
c⁄ãxt
, *
t›icName
, 
t›icLí
, 
MQTTClõ¡_mesßge
 *
mesßge
)

39 
i
;

40 * 
∑ylﬂd±r
;

42 
	`¥ötf
("Messageárrived\n");

43 
	`¥ötf
("Å›ic: %s\n", 
t›icName
);

44 
	`¥ötf
(" message: ");

46 
∑ylﬂd±r
 = 
mesßge
->
∑ylﬂd
;

47 
i
=0; i<
mesßge
->
∑ylﬂdÀn
; i++)

49 
	`putch¨
(*
∑ylﬂd±r
++);

51 
	`putch¨
('\n');

52 
	`MQTTClõ¡_‰ìMesßge
(&
mesßge
);

53 
	`MQTTClõ¡_‰ì
(
t›icName
);

55 
	}
}

57 
	$c⁄∆o°
(*
c⁄ãxt
, *
ˇu£
)

59 
	`¥ötf
("\nConnectionÜost\n");

60 
	`¥ötf
(" cau£: %s\n", 
ˇu£
);

61 
	}
}

63 
	$maö
(
¨gc
, * 
¨gv
[])

65 
MQTTClõ¡
 
˛õ¡
;

66 
MQTTClõ¡_c⁄√˘O±i⁄s
 
c⁄n_›ts
 = 
MQTTClõ¡_c⁄√˘O±i⁄s_öôülizî
;

67 
rc
;

68 
ch
;

70 
	`MQTTClõ¡_¸óã
(&
˛õ¡
, 
ADDRESS
, 
CLIENTID
,

71 
MQTTCLIENT_PERSISTENCE_NONE
, 
NULL
);

72 
c⁄n_›ts
.
kìpAliveI¡îvÆ
 = 20;

73 
c⁄n_›ts
.
˛ón£ssi⁄
 = 1;

75 
	`MQTTClõ¡_£tCÆlbacks
(
˛õ¡
, 
NULL
, 
c⁄∆o°
, 
msg¨rvd
, 
dñivîed
);

77 i‡((
rc
 = 
	`MQTTClõ¡_c⁄√˘
(
˛õ¡
, &
c⁄n_›ts
)Ë!
MQTTCLIENT_SUCCESS
)

79 
	`¥ötf
("FaûedÅÿc⁄√˘,Ñëu∫ codê%d\n", 
rc
);

80 
	`exô
(-1);

82 
	`¥ötf
("SubscribingÅoÅopic %s\nfor client %s using QoS%d\n\n"

83 "Pªs†Q<E¡î>Åÿquô\n\n", 
TOPIC
, 
CLIENTID
, 
QOS
);

84 
	`MQTTClõ¡_subs¸ibe
(
˛õ¡
, 
TOPIC
, 
QOS
);

88 
ch
 = 
	`gëch¨
();

89 } 
ch
!='Q' && ch != 'q');

91 
	`MQTTClõ¡_disc⁄√˘
(
˛õ¡
, 10000);

92 
	`MQTTClõ¡_de°roy
(&
˛õ¡
);

93  
rc
;

94 
	}
}

	@paho-c/src/utf-8.c

27 
	~<°dlib.h
>

28 
	~<°rög.h
>

30 
	~"SèckTø˚.h
"

35 #i‡!
deföed
(
ARRAY_SIZE
)

36 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ ◊[0]))

	)

45 
	mÀn
;

48 
	mlowî
;

49 
	muµî
;

50 } 
	mbyãs
[4];

52 
	gvÆid_ønges
[] =

72 c⁄° * 
	$UTF8_ch¨_vÆid©e
(
Àn
, c⁄° * 
d©a
)

74 
good
 = 0;

75 
ch¨Àn
 = 2;

76 
i
, 
j
;

77 c⁄° *
rc
 = 
NULL
;

79 
FUNC_ENTRY
;

81 i‡((
d©a
[0] & 128) == 0)

82 
ch¨Àn
 = 1;

83 i‡((
d©a
[0] & 0xF0) == 0xF0)

84 
ch¨Àn
 = 4;

85 i‡((
d©a
[0] & 0xE0) == 0xE0)

86 
ch¨Àn
 = 3;

88 i‡(
ch¨Àn
 > 
Àn
)

89 
exô
;

91 
i
 = 0; i < 
	`ARRAY_SIZE
(
vÆid_ønges
); ++i)

93 i‡(
vÆid_ønges
[
i
].
Àn
 =
ch¨Àn
)

95 
good
 = 1;

96 
j
 = 0; j < 
ch¨Àn
; ++j)

98 i‡(
d©a
[
j
] < 
vÆid_ønges
[
i
].
byãs
[j].
lowî
 ||

99 
d©a
[
j
] > 
vÆid_ønges
[
i
].
byãs
[j].
uµî
)

101 
good
 = 0;

105 i‡(
good
)

110 i‡(
good
)

111 
rc
 = 
d©a
 + 
ch¨Àn
;

112 
exô
:

113 
FUNC_EXIT
;

114  
rc
;

115 
	}
}

124 
	$UTF8_vÆid©e
(
Àn
, c⁄° * 
d©a
)

126 c⁄° * 
curd©a
 = 
NULL
;

127 
rc
 = 0;

129 
FUNC_ENTRY
;

130 i‡(
Àn
 == 0)

132 
rc
 = 1;

133 
exô
;

135 
curd©a
 = 
	`UTF8_ch¨_vÆid©e
(
Àn
, 
d©a
);

136 
curd©a
 && (curd©®< 
d©a
 + 
Àn
))

137 
curd©a
 = 
	`UTF8_ch¨_vÆid©e
(
Àn
, curdata);

139 
rc
 = 
curd©a
 !
NULL
;

140 
exô
:

141 
	`FUNC_EXIT_RC
(
rc
);

142  
rc
;

143 
	}
}

151 
	$UTF8_vÆid©eSåög
(c⁄° * 
°rög
)

153 
rc
 = 0;

155 
FUNC_ENTRY
;

156 
rc
 = 
	`UTF8_vÆid©e
(
	`°æí
(
°rög
), string);

157 
	`FUNC_EXIT_RC
(
rc
);

158  
rc
;

159 
	}
}

163 #i‡
deföed
(
UNIT_TESTS
)

164 
	~<°dio.h
>

168 
	mÀn
;

169 
	md©a
[20];

170 } 
	tã°s
;

172 
ã°s
 
	gvÆid_°rögs
[] =

183 
ã°s
 
	gövÆid_°rögs
[] =

191 
	$maö
 (
¨gc
, *
¨gv
[])

193 
i
, 
Áûed
 = 0;

195 
i
 = 0; i < 
	`ARRAY_SIZE
(
vÆid_°rögs
); ++i)

197 i‡(!
	`UTF8_vÆid©e
(
vÆid_°rögs
[
i
].
Àn
, vÆid_°rögs[i].
d©a
))

199 
	`¥ötf
("vÆidÅe° %d faûed\n", 
i
);

200 
Áûed
 = 1;

203 
	`¥ötf
("vÆidÅe° %dÖas£d\n", 
i
);

206 
i
 = 0; i < 
	`ARRAY_SIZE
(
övÆid_°rögs
); ++i)

208 i‡(
	`UTF8_vÆid©e
(
övÆid_°rögs
[
i
].
Àn
, invÆid_°rögs[i].
d©a
))

210 
	`¥ötf
("övÆidÅe° %d faûed\n", 
i
);

211 
Áûed
 = 1;

214 
	`¥ötf
("övÆidÅe° %dÖas£d\n", 
i
);

217 i‡(
Áûed
)

218 
	`¥ötf
("Failed\n");

220 
	`¥ötf
("Passed\n");

223 
	}
}

	@paho-c/src/utf-8.h

17 #i‡!
deföed
(
UTF8_H
)

18 
	#UTF8_H


	)

20 
UTF8_vÆid©e
(
Àn
, * 
d©a
);

21 
UTF8_vÆid©eSåög
(c⁄° * 
°rög
);

	@paho-c/test/MQTTTest_v2.c

37 
	~<mem‹y.h
>

38 
	~<MQTTAsync.h
>

39 
	~<MQTTClõ¡Pîsi°í˚.h
>

40 
	~<sig«l.h
>

41 
	~<°dio.h
>

42 
	~<sys/time.h
>

44 #i‡
deföed
(
WIN32
)

45 
	~<Wödows.h
>

46 
	#¶ìp
 
SÀï


	)

48 
	~<°dlib.h
>

49 
	~<sys/time.h
>

52 vﬁ©ûê
	gtoSt›
 = 0;

53 vﬁ©ûê
	gföished
 = 0;

54 vﬁ©ûê
	gc⁄√˘ed
 = 0;

55 vﬁ©ûê
	gquõtMode
 = 0;

56 vﬁ©ûê
	g£¡
 = 0;

57 vﬁ©ûê
	gdñivîy
 = 0;

58 vﬁ©ûê
MQTTAsync_tokí
 
	gdñivîedtokí
;

59 
	g˛õ¡Id
[24];

60 
	sO±i⁄s


62 * 
	ma˘i⁄
;

63 * 
	mt›ic
;

64 * 
	mmesßge
;

65 
	mqos
;

66 * 
	mbrokî
;

67 * 
	mp‹t
;

68 
	mmesßge_cou¡
;

69 } 
	g›ti⁄s
 =

72 
NULL
,

80 
	$¥ötHñp
()

82 
	`¥ötf
("Syntax:\n\n");

83 
	`¥ötf
(" MQTTV3ASample [-h] [-aÖublish|subscribe] [-t <topic>] [-m <messageÅext>]\n");

84 
	`¥ötf
(" [-s 0|1|2] [-b <hostname|IPáddress>] [-p <brokerport>] \n\n");

85 
	`¥ötf
(" -h PrintÅhis helpÅextánd quit\n");

86 
	`¥ötf
(" -q Quiet mode (default is false)\n");

87 
	`¥ötf
(" -a PerformÅheÑelevantáction (default isÖublish)\n");

88 
	`¥ötf
(" -t Publish/subscribeÅo <topic> instead ofÅhe default\n");

89 
	`¥ötf
(" (publish: \"MQTTV3ASample/C/v3\", subscribe: \"MQTTV3ASample/#\")\n");

90 
	`¥ötf
(" -m UseÅhis message instead ofÅhe default (\"Message from MQTTv3 Cásynchronous client\")\n");

91 
	`¥ötf
(" -s UseÅhis QoS instead ofÅhe default (2)\n");

92 
	`¥ötf
(" -b UseÅhisÇame/IPáddress instead ofÅhe default (localhost)\n");

93 
	`¥ötf
(" -p UseÅhisÖort instead ofÅhe default (1883)\n");

94 
	`¥ötf
("\nDelimit strings containing spaces with \"\"\n");

95 
	`¥ötf
("\nPublishersÅransmitá single messageÅhen disconnect fromÅhe broker.\n");

96 
	`¥ötf
("SubscribersÑemain connectedÅoÅhe brokerándÑeceiveáppropriate messages\n");

97 
	`¥ötf
("until Control-C (^C) isÑeceived fromÅhe keyboard.\n\n");

98 
	}
}

101 
	$h™dÀSig«l
(
sig
)

103 
toSt›
 = 1;

104 
	}
}

106 
	$mesßgeAºived
(*
c⁄ãxt
, *
t›icName
, 
t›icLí
, 
MQTTAsync_mesßge
 *
mesßge
)

108 
i
;

109 * 
∑ylﬂd±r
;

110 if((
£¡
++ % 1000) == 0)

111 
	`¥ötf
("%d mesßge†ª˚ived\n", 
£¡
++);

122 
	`MQTTAsync_‰ìMesßge
(&
mesßge
);

123 
	`MQTTAsync_‰ì
(
t›icName
);

125 
	}
}

127 
	$⁄Subs¸ibe
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

129 
	`¥ötf
("Subscribe succeeded\n");

130 
	}
}

132 
	$⁄Subs¸ibeFaûuª
(* 
c⁄ãxt
, 
MQTTAsync_ÁûuªD©a
* 
ª•⁄£
)

134 
	`¥ötf
("Subscribe failed\n");

135 
föished
 = 1;

136 
	}
}

138 
	$⁄Disc⁄√˘
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

140 
	`¥ötf
("Successful disconnection\n");

141 
föished
 = 1;

142 
	}
}

145 
	$⁄SídFaûuª
(* 
c⁄ãxt
, 
MQTTAsync_ÁûuªD©a
* 
ª•⁄£
)

147 
	`¥ötf
("⁄SídFaûuª: mesßgêwôhÅokí vÆuê%d dñivîy faûed\n", 
ª•⁄£
->
tokí
);

148 
	}
}

152 
	$⁄Síd
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

154 
œ°_£nd
 = 0;

156 i‡(
ª•⁄£
->
tokí
 - 
œ°_£nd
 != 1)

157 
	`¥ötf
("Eº‹ i¿⁄Síd,Åokí vÆuê%d,Üa°_£nd %d\n", 
ª•⁄£
->
tokí
, 
œ°_£nd
);

159 
œ°_£nd
++;

161 i‡((
ª•⁄£
->
tokí
 % 1000) == 0)

162 
	`¥ötf
("⁄Síd: mesßgêwôhÅokí vÆuê%d dñivîy c⁄fúmed\n", 
ª•⁄£
->
tokí
);

163 
	}
}

165 
	$dñivîyCom∂ëe
(* 
c⁄ãxt
, 
MQTTAsync_tokí
 
tokí
)

167 
£¡
++;

168 i‡((
£¡
 % 1000) == 0)

169 
	`¥ötf
("dñivîyCom∂ëe: mesßgêwôhÅokí vÆuê%d dñivîy c⁄fúmed\n", 
tokí
);

170 i‡(
£¡
 !
tokí
)

171 
	`¥ötf
("Eº‹, síà%d !tokí %d\n", 
£¡
, 
tokí
);

172 i‡(
£¡
 =
›ti⁄s
.
mesßge_cou¡
)

173 
toSt›
 = 1;

174 
	}
}

176 
	$⁄C⁄√˘Faûuª
(* 
c⁄ãxt
, 
MQTTAsync_ÁûuªD©a
* 
ª•⁄£
)

178 
	`¥ötf
("Connect failed\n");

179 
föished
 = 1;

180 
	}
}

183 
	$⁄C⁄√˘
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

185 
	`¥ötf
("Connected\n");

186 
c⁄√˘ed
=1;

187 
	}
}

189 
	$c⁄√˘i⁄Lo°
(*
c⁄ãxt
, *
ˇu£
)

191 
MQTTAsync
 
˛õ¡
 = (MQTTAsync)
c⁄ãxt
;

192 
MQTTAsync_c⁄√˘O±i⁄s
 
c⁄n_›ts
 = 
MQTTAsync_c⁄√˘O±i⁄s_öôülizî
;

193 
rc
;

195 
	`¥ötf
("\nConnectionÜost\n");

196 
	`¥ötf
(" cau£: %s\n", 
ˇu£
);

198 
	`¥ötf
("Reconnecting\n");

199 
c⁄n_›ts
.
kìpAliveI¡îvÆ
 = 20;

200 
c⁄n_›ts
.
˛ón£ssi⁄
 = 1;

201 
c⁄n_›ts
.
⁄Suc˚ss
 = 
⁄C⁄√˘
;

202 
c⁄n_›ts
.
⁄Faûuª
 = 
⁄C⁄√˘Faûuª
;

203 
c⁄n_›ts
.
c⁄ãxt
 = 
˛õ¡
;

204 
c⁄n_›ts
.
ªåyI¡îvÆ
 = 1000;

205 i‡((
rc
 = 
	`MQTTAsync_c⁄√˘
(
˛õ¡
, &
c⁄n_›ts
)Ë!
MQTTASYNC_SUCCESS
)

207 
	`¥ötf
("FaûedÅÿ°¨àc⁄√˘,Ñëu∫ codê%d\n", 
rc
);

208 
föished
 = 1;

210 
	}
}

213 
	$h™dÀTø˚
(
MQTTASYNC_TRACE_LEVELS
 
Àvñ
, * 
mesßge
)

215 
	`¥ötf
("%s\n", 
mesßge
);

216 
	}
}

225 
	$maö
(
¨gc
, ** 
¨gv
)

227 
rc
 = 0;

228 
ch
;

229 
uæ
[256];

232 
i
=0;

234 
MQTTAsync
 
˛õ¡
;

235 
MQTTAsync_c⁄√˘O±i⁄s
 
c⁄n_›ts
 = 
MQTTAsync_c⁄√˘O±i⁄s_öôülizî
;

236 
MQTTAsync_mesßge
 
pubmsg
 = 
MQTTAsync_mesßge_öôülizî
;

237 
MQTTAsync_tokí
 
tokí
;

239 
	`sig«l
(
SIGINT
, 
h™dÀSig«l
);

240 
	`sig«l
(
SIGTERM
, 
h™dÀSig«l
);

242 
quõtMode
 = 0;

244 
i
=1; i<
¨gc
; i++)

247 i‡(
	`°æí
(
¨gv
[
i
]) == 2 &&árgv[i][0] == '-')

249 
¨g
 = 
¨gv
[
i
][1];

251 i‡(
¨g
 == 'h' ||árg == '?')

253 
	`¥ötHñp
();

256 i‡(
¨g
 == 'q')

258 
quõtMode
 = 1;

263 i‡(
i
 =
¨gc
 - 1 || 
¨gv
[i+1][0] == '-')

265 
	`¥ötf
("Missög vÆuêf‹árgumít: %s\n", 
¨gv
[
i
]);

266 
	`¥ötHñp
();

269 
¨g
)

271 'a': 
›ti⁄s
.
a˘i⁄
 = 
¨gv
[++
i
]; ;

272 't': 
›ti⁄s
.
t›ic
 = 
¨gv
[++
i
]; ;

273 'm': 
›ti⁄s
.
mesßge
 = 
¨gv
[++
i
]; ;

274 's': 
›ti⁄s
.
qos
 = 
	`©oi
(
¨gv
[++
i
]); ;

275 'c': 
›ti⁄s
.
mesßge_cou¡
 = 
	`©oi
(
¨gv
[++
i
]); ;

276 'b': 
›ti⁄s
.
brokî
 = 
¨gv
[++
i
]; ;

277 'p': 
›ti⁄s
.
p‹t
 = 
¨gv
[++
i
]; ;

279 
	`¥ötf
("Uƒecogni£dárgumít: %s\n", 
¨gv
[
i
]);

280 
	`¥ötHñp
();

286 
	`¥ötf
("Uƒecogni£dárgumít: %s\n", 
¨gv
[
i
]);

287 
	`¥ötHñp
();

293 i‡(
	`°rcmp
(
›ti⁄s
.
a˘i⁄
, "publish") != 0 && strcmp(options.action, "subscribe") != 0)

295 
	`¥ötf
("InvÆidá˘i⁄: %s\n", 
›ti⁄s
.
a˘i⁄
);

296 
	`¥ötHñp
();

299 i‡(
›ti⁄s
.
qos
 < 0 || options.qos > 2)

301 
	`¥ötf
("InvÆid QoS: %d\n", 
›ti⁄s
.
qos
);

302 
	`¥ötHñp
();

305 i‡(
›ti⁄s
.
t›ic
 =
NULL
 || ( o±i⁄s.t›i¯!NULL && 
	`°æí
(options.topic) == 0) )

308 i‡(
	`°rcmp
(
›ti⁄s
.
a˘i⁄
, "publish") == 0)

309 
›ti⁄s
.
t›ic
 = "MQTTV3ASample/C/v3";

311 
›ti⁄s
.
t›ic
 = "MQTTV3ASample/#";

315 
	`•rötf
(
uæ
, "t˝://%s:%s", 
›ti⁄s
.
brokî
, o±i⁄s.
p‹t
);

316 
	`•rötf
(
˛õ¡Id
, "Sam∂eCV3A_%s", 
›ti⁄s
.
a˘i⁄
);

319 
	`MQTTAsync_¸óã
(&
˛õ¡
, 
uæ
, 
˛õ¡Id
, 
MQTTCLIENT_PERSISTENCE_NONE
, 
NULL
);

321 
	`MQTTAsync_£tTø˚CÆlback
(
h™dÀTø˚
);

322 
	`MQTTAsync_£tTø˚Levñ
(
MQTTASYNC_TRACE_ERROR
);

324 
	`MQTTAsync_£tCÆlbacks
(
˛õ¡
, clõ¡, 
c⁄√˘i⁄Lo°
, 
mesßgeAºived
, 
dñivîyCom∂ëe
);

326 
c⁄n_›ts
.
˛ón£ssi⁄
 = 0;

327 
c⁄n_›ts
.
⁄Suc˚ss
 = 
⁄C⁄√˘
;

328 
c⁄n_›ts
.
⁄Faûuª
 = 
⁄C⁄√˘Faûuª
;

329 
c⁄n_›ts
.
c⁄ãxt
 = 
˛õ¡
;

330 
c⁄n_›ts
.
kìpAliveI¡îvÆ
 = 0;

331 
c⁄n_›ts
.
ªåyI¡îvÆ
 = 0;

334 i‡((
rc
 = 
	`MQTTAsync_c⁄√˘
(
˛õ¡
, &
c⁄n_›ts
)Ë!
MQTTASYNC_SUCCESS
)

336 
	`¥ötf
("FaûedÅÿ°¨àc⁄√˘,Ñëu∫ codê%d\n", 
rc
);

337 
exô
;

339 
	`¥ötf
("Waiting for connect\n");

340 
c⁄√˘ed
 =0 && 
föished
 =0 && 
toSt›
 == 0) {

341 
	`¥ötf
("Waôög f‹ c⁄√˘: %d %d %d\n", 
c⁄√˘ed
, 
föished
, 
toSt›
);

342 
	`u¶ìp
(10000L);

345 
MQTTAsync_ª•⁄£O±i⁄s
 
›ts
 = 
MQTTAsync_ª•⁄£O±i⁄s_öôülizî
;

346 
	`¥ötf
("Waôög f‹ c⁄√˘: %d %d %d\n", 
c⁄√˘ed
, 
föished
, 
toSt›
);

348 
	`¥ötf
("Successful connection\n");

350 i‡(
c⁄√˘ed
 =1 && 
	`°rcmp
(
›ti⁄s
.
a˘i⁄
, "publish") == 0)

352 
i
;

353 
timevÆ
 
tv
;

354 
	`gëtimeofday
(&
tv
,
NULL
);

355 
	`¥ötf
("°¨à£c⁄d†: %ld\n",
tv
.
tv_£c
);

356 
i
 = 0; i < 
›ti⁄s
.
mesßge_cou¡
; i++)

358 
›ts
.
⁄Suc˚ss
 = 
⁄Síd
;

359 
›ts
.
⁄Faûuª
 = 
⁄SídFaûuª
;

360 
›ts
.
c⁄ãxt
 = 
˛õ¡
;

361 
pubmsg
.
∑ylﬂd
 = 
›ti⁄s
.
mesßge
;

362 
pubmsg
.
∑ylﬂdÀn
 = 
	`°æí
(
›ti⁄s
.
mesßge
);

363 
pubmsg
.
qos
 = 
›ti⁄s
.qos;

364 
pubmsg
.
ªèöed
 = 0;

365 
dñivîedtokí
 = 0;

366 
	`u¶ìp
(100);

368 i‡((
rc
 = 
	`MQTTAsync_£ndMesßge
(
˛õ¡
, 
›ti⁄s
.
t›ic
, &
pubmsg
, &
›ts
))

369 !
MQTTASYNC_SUCCESS
)

371 
	`¥ötf
("FaûedÅÿ°¨à£ndMesßge,Ñëu∫ codê%d\n", 
rc
);

372 
	`exô
(-1);

376 
	`gëtimeofday
(&
tv
,
NULL
);

378 
	`¥ötf
("íd sec⁄d†: %ld\n",
tv
.
tv_£c
);

379 } i‡(
	`°rcmp
(
›ti⁄s
.
a˘i⁄
, "subscribe") == 0) {

380 
›ts
.
⁄Suc˚ss
 = 
⁄Subs¸ibe
;

381 
›ts
.
⁄Faûuª
 = 
⁄Subs¸ibeFaûuª
;

382 
›ts
.
c⁄ãxt
 = 
˛õ¡
;

383 i‡((
rc
 = 
	`MQTTAsync_subs¸ibe
(
˛õ¡
, 
›ti⁄s
.
t›ic
, o±i⁄s.
qos
, &
›ts
)Ë!
MQTTASYNC_SUCCESS
) {

384 
	`¥ötf
("FaûedÅÿsubs¸ibe,Ñëu∫ codê%d\n", 
rc
);

385 
	`exô
(-1);

389 !
föished
)

391 #i‡
	`deföed
(
WIN32
)

392 
	`SÀï
(100);

394 
	`u¶ìp
(1000L);

396 i‡(
toSt›
 == 1)

398 
MQTTAsync_disc⁄√˘O±i⁄s
 
›ts
 = 
MQTTAsync_disc⁄√˘O±i⁄s_öôülizî
;

400 
›ts
.
⁄Suc˚ss
 = 
⁄Disc⁄√˘
;

401 
›ts
.
c⁄ãxt
 = 
˛õ¡
;

402 
	`¥ötf
("Entering disconnectionÖhase\n");

403 i‡((
rc
 = 
	`MQTTAsync_disc⁄√˘
(
˛õ¡
, &
›ts
)Ë!
MQTTASYNC_SUCCESS
)

405 
	`¥ötf
("FaûedÅÿ°¨àdisc⁄√˘,Ñëu∫ codê%d\n", 
rc
);

406 
	`exô
(-1);

408 
toSt›
 = 0;

412 
exô
:

413 
	`¥ötf
("calling destroy\n");

414 
	`MQTTAsync_de°roy
(&
˛õ¡
);

415  
rc
;

416 
	}
}

	@paho-c/test/sync_client_test.c

17 
	~"MQTTClõ¡.h
"

18 
	~<°rög.h
>

19 
	~<°dlib.h
>

21 #i‡!
deföed
(
_WINDOWS
)

22 
	~<sys/time.h
>

23 
	~<sys/sockë.h
>

24 
	~<uni°d.h
>

25 
	~<î∫o.h
>

27 
	~<wösock2.h
>

28 
	~<ws2t˝ù.h
>

29 
	#MAXHOSTNAMELEN
 256

	)

30 
	#EAGAIN
 
WSAEWOULDBLOCK


	)

31 
	#EINTR
 
WSAEINTR


	)

32 
	#EINPROGRESS
 
WSAEINPROGRESS


	)

33 
	#EWOULDBLOCK
 
WSAEWOULDBLOCK


	)

34 
	#ENOTCONN
 
WSAENOTCONN


	)

35 
	#ECONNRESET
 
WSAECONNRESET


	)

38 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ ◊[0]))

	)

41 * 
	gt›ics
[] = {"TopicA", "TopicA/B", "Topic/C", "TopicA/C", "/TopicA"};

42 * 
	gwûdt›ics
[] = {"TopicA/+", "+/C", "#", "/#", "/+", "+/+", "TopicA/#"};

43 * 
	gnosubs¸ibe_t›ics
[] = {"nosubscribe",};

45 
	sO±i⁄s


47 * 
	mc⁄√˘i⁄
;

48 * 
	m˛õ¡id1
;

49 * 
	m˛õ¡id2
;

50 * 
	mu£∫ame
;

51 * 
	m∑ssw‹d
;

52 
	mvîbo£
;

53 
	mMQTTVîsi⁄
;

54 
	môî©i⁄s
;

55 
	mrun_dﬁœr_t›ics_ã°
;

56 
	mrun_subs¸ibe_Áûuª_ã°
;

57 } 
	g›ti⁄s
 =

62 
NULL
,

63 
NULL
,

65 
MQTTVERSION_3_1_1
,

72 
	$ußge
()

74 
	`¥ötf
("options:\n connection, clientid1, clientid2, username,Öassword, MQTTversion, iterations, verbose\n");

75 
	`exô
(-1);

76 
	}
}

78 
	$gë›ts
(
¨gc
, ** 
¨gv
)

80 
cou¡
 = 1;

82 
cou¡
 < 
¨gc
)

84 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--dollar_topics_test") == 0 || strcmp(argv[count], "--$") == 0)

86 
›ti⁄s
.
run_dﬁœr_t›ics_ã°
 = 1;

87 
	`¥ötf
("Running $ÅopicsÅest\n");

89 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--subscribe_failure_test") == 0 || strcmp(argv[count], "-s") == 0)

91 
›ti⁄s
.
run_subs¸ibe_Áûuª_ã°
 = 1;

92 
	`¥ötf
("Running subscribe failureÅest\n");

94 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--connection") == 0)

96 i‡(++
cou¡
 < 
¨gc
)

98 
›ti⁄s
.
c⁄√˘i⁄
 = 
¨gv
[
cou¡
];

99 
	`¥ötf
("Sëtög c⁄√˘i⁄Åÿ%s\n", 
›ti⁄s
.
c⁄√˘i⁄
);

102 
	`ußge
();

104 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--clientid1") == 0)

106 i‡(++
cou¡
 < 
¨gc
)

108 
›ti⁄s
.
˛õ¡id1
 = 
¨gv
[
cou¡
];

109 
	`¥ötf
("Sëtög clõ¡id1Åÿ%s\n", 
›ti⁄s
.
˛õ¡id1
);

112 
	`ußge
();

114 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--clientid2") == 0)

116 i‡(++
cou¡
 < 
¨gc
)

118 
›ti⁄s
.
˛õ¡id2
 = 
¨gv
[
cou¡
];

119 
	`¥ötf
("Sëtög clõ¡id2Åÿ%s\n", 
›ti⁄s
.
˛õ¡id2
);

122 
	`ußge
();

124 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--username") == 0)

126 i‡(++
cou¡
 < 
¨gc
)

128 
›ti⁄s
.
u£∫ame
 = 
¨gv
[
cou¡
];

129 
	`¥ötf
("Sëtög u£∫amêtÿ%s\n", 
›ti⁄s
.
u£∫ame
);

132 
	`ußge
();

134 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--password") == 0)

136 i‡(++
cou¡
 < 
¨gc
)

138 
›ti⁄s
.
∑ssw‹d
 = 
¨gv
[
cou¡
];

139 
	`¥ötf
("SëtögÖassw‹dÅÿ%s\n", 
›ti⁄s
.
∑ssw‹d
);

142 
	`ußge
();

144 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--MQTTversion") == 0)

146 i‡(++
cou¡
 < 
¨gc
)

148 
›ti⁄s
.
MQTTVîsi⁄
 = 
	`©oi
(
¨gv
[
cou¡
]);

149 
	`¥ötf
("Sëtög MQTT vîsi⁄Åÿ%d\n", 
›ti⁄s
.
MQTTVîsi⁄
);

152 
	`ußge
();

154 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--iterations") == 0)

156 i‡(++
cou¡
 < 
¨gc
)

158 
›ti⁄s
.
ôî©i⁄s
 = 
	`©oi
(
¨gv
[
cou¡
]);

159 
	`¥ötf
("Sëtög iãøti⁄†tÿ%d\n", 
›ti⁄s
.
ôî©i⁄s
);

162 
	`ußge
();

164 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--verbose") == 0)

166 
›ti⁄s
.
vîbo£
 = 1;

167 
	`¥ötf
("\nSetting verbose on\n");

169 
cou¡
++;

171 
	}
}

174 #i‡
deföed
(
WIN32
Ë|| deföed(
_WINDOWS
)

175 
	#m¶ìp
 
SÀï


	)

176 
	#START_TIME_TYPE
 
DWORD


	)

177 
DWORD
 
	g°¨t_time
 = 0;

178 
START_TIME_TYPE
 
	$°¨t_˛ock
()

180  
	`GëTickCou¡
();

181 
	}
}

182 #ñi‡
deföed
(
AIX
)

183 
	#mq¶ìp
 
¶ìp


	)

184 
	#START_TIME_TYPE
 
time•ec


	)

185 
START_TIME_TYPE
 
	$°¨t_˛ock
()

187 
time•ec
 
°¨t
;

188 
	`˛ock_gëtime
(
CLOCK_REALTIME
, &
°¨t
);

189  
°¨t
;

190 
	}
}

192 
	#m¶ìp
(
A
Ë
	`u¶ìp
(A*1000)

	)

193 
	#START_TIME_TYPE
 
timevÆ


	)

195 
START_TIME_TYPE
 
	$°¨t_˛ock
()

197 
timevÆ
 
°¨t_time
;

198 
	`gëtimeofday
(&
°¨t_time
, 
NULL
);

199  
°¨t_time
;

200 
	}
}

203 
	#LOGA_DEBUG
 0

	)

204 
	#LOGA_INFO
 1

	)

205 
	~<°d¨g.h
>

206 
	~<time.h
>

207 
	~<sys/timeb.h
>

208 
	$MyLog
(
LOGA_Àvñ
, * 
f‹m©
, ...)

210 
msg_buf
[256];

211 
va_li°
 
¨gs
;

212 
timeb
 
ts
;

214 
tm
 *
timeöfo
;

216 i‡(
LOGA_Àvñ
 =
LOGA_DEBUG
 && 
›ti⁄s
.
vîbo£
 == 0)

219 
	`·ime
(&
ts
);

220 
timeöfo
 = 
	`loˇ…ime
(&
ts
.
time
);

221 
	`°r·ime
(
msg_buf
, 80, "%Y%m%d %H%M%S", 
timeöfo
);

223 
	`•rötf
(&
msg_buf
[
	`°æí
(msg_buf)], ".%.3hu ", 
ts
.
mûlôm
);

225 
	`va_°¨t
(
¨gs
, 
f‹m©
);

226 
	`v¢¥ötf
(&
msg_buf
[
	`°æí
(msg_buf)], (msg_bufË- såÀn(msg_buf), 
f‹m©
, 
¨gs
);

227 
	`va_íd
(
¨gs
);

229 
	`¥ötf
("%s\n", 
msg_buf
);

230 
	`fÊush
(
°dout
);

231 
	}
}

234 
	gã°s
 = 0;

235 
	gÁûuªs
 = 0;

238 
	$myas£π
(* 
fûíame
, 
löío
, * 
des¸ùti⁄
, 
vÆue
, * 
f‹m©
, ...)

240 ++
ã°s
;

241 i‡(!
vÆue
)

243 
cou¡
;

244 
va_li°
 
¨gs
;

246 ++
Áûuªs
;

247 
	`¥ötf
("As£πi⁄ faûed, fûê%s,Üöê%d, des¸ùti⁄: %s\n", 
fûíame
, 
löío
, 
des¸ùti⁄
);

249 
	`va_°¨t
(
¨gs
, 
f‹m©
);

250 
cou¡
 = 
	`v¥ötf
(
f‹m©
, 
¨gs
);

251 
	`va_íd
(
¨gs
);

252 i‡(
cou¡
)

253 
	`¥ötf
("\n");

259 
	`MyLog
(
LOGA_DEBUG
, "As£πi⁄ suc˚eded, fûê%s,Üöê%d, des¸ùti⁄: %s", 
fûíame
, 
löío
, 
des¸ùti⁄
);

260 
	}
}

263 
	#as£π
(
a
, 
b
, 
c
, 
d
Ë
	`myas£π
(
__FILE__
, 
__LINE__
,á, b, c, d)

	)

264 
	#as£π1
(
a
, 
b
, 
c
, 
d
, 
e
Ë
	`myas£π
(
__FILE__
, 
__LINE__
,á, b, c, d,É)

	)

268 * 
	mt›icName
;

269 
	mt›icLí
;

270 
MQTTClõ¡_mesßge
* 
	mm
;

271 } 
	tmesßgeSåu˘
;

273 
mesßgeSåu˘
 
	gmesßgesAºived
[1000];

274 
	gmesßgeCou¡
 = 0;

276 
	$mesßgeAºived
(* 
c⁄ãxt
, * 
t›icName
, 
t›icLí
, 
MQTTClõ¡_mesßge
* 
m
)

278 
mesßgesAºived
[
mesßgeCou¡
].
t›icName
 =ÅopicName;

279 
mesßgesAºived
[
mesßgeCou¡
].
t›icLí
 =ÅopicLen;

280 
mesßgesAºived
[
mesßgeCou¡
++].
m
 = m;

281 
	`MyLog
(
LOGA_DEBUG
, "Callback: %d messageÑeceived onÅopic %s is %.*s.",

282 
mesßgeCou¡
, 
t›icName
, 
m
->
∑ylﬂdÀn
, (*)(m->
∑ylﬂd
));

284 
	}
}

287 
	$˛órMesßges
()

289 
i
;

291 
i
 = 0; i < 
mesßgeCou¡
; ++i)

293 
	`MQTTClõ¡_‰ì
(
mesßgesAºived
[
i
].
t›icName
);

294 
	`MQTTClõ¡_‰ìMesßge
(&
mesßgesAºived
[
i
].
m
);

296 
mesßgeCou¡
 = 0;

297 
	}
}

299 
	$˛ónup
()

302 * 
˛õ¡ids
[] = {
›ti⁄s
.
˛õ¡id1
, o±i⁄s.
˛õ¡id2
};

303 
i
, 
rc
;

304 
MQTTClõ¡_c⁄√˘O±i⁄s
 
›ts
 = 
MQTTClõ¡_c⁄√˘O±i⁄s_öôülizî
;

305 
MQTTClõ¡
 
a˛õ¡
;

307 
	`MyLog
(
LOGA_INFO
, "Cleaning up");

309 
›ts
.
kìpAliveI¡îvÆ
 = 20;

310 
›ts
.
˛ón£ssi⁄
 = 1;

311 
›ts
.
u£∫ame
 = 
›ti⁄s
.username;

312 
›ts
.
∑ssw‹d
 = 
›ti⁄s
.password;

313 
›ts
.
MQTTVîsi⁄
 = 
›ti⁄s
.MQTTVersion;

315 
i
 = 0; i < 2; ++i)

317 
rc
 = 
	`MQTTClõ¡_¸óã
(&
a˛õ¡
, 
›ti⁄s
.
c⁄√˘i⁄
, 
˛õ¡ids
[
i
], 
MQTTCLIENT_PERSISTENCE_DEFAULT
, 
NULL
);

318 
	`as£π
("goodÑ¯‰om cª©e", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d\n",Ñc);

320 
rc
 = 
	`MQTTClõ¡_c⁄√˘
(
a˛õ¡
, &
›ts
);

321 
	`as£π
("GoodÑ¯‰om c⁄√˘", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

323 
rc
 = 
	`MQTTClõ¡_disc⁄√˘
(
a˛õ¡
, 100);

324 
	`as£π
("Disc⁄√˘ suc˚ssful", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

326 
	`MQTTClõ¡_de°roy
(&
a˛õ¡
);

330 
rc
 = 
	`MQTTClõ¡_¸óã
(&
a˛õ¡
, 
›ti⁄s
.
c⁄√˘i⁄
, o±i⁄s.
˛õ¡id1
, 
MQTTCLIENT_PERSISTENCE_DEFAULT
, 
NULL
);

331 
	`as£π
("goodÑ¯‰om cª©e", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d\n",Ñc);

333 
rc
 = 
	`MQTTClõ¡_£tCÆlbacks
(
a˛õ¡
, 
NULL
, NULL, 
mesßgeAºived
, NULL);

334 
	`as£π
("GoodÑ¯‰om sëCÆlbacks", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

336 
rc
 = 
	`MQTTClõ¡_c⁄√˘
(
a˛õ¡
, &
›ts
);

337 
	`as£π
("GoodÑ¯‰om c⁄√˘", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

339 
rc
 = 
	`MQTTClõ¡_subs¸ibe
(
a˛õ¡
, "#", 0);

340 
	`as£π
("GoodÑ¯‰om subs¸ibe", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

342 
	`m¶ìp
(2000);

344 
rc
 = 
	`MQTTClõ¡_unsubs¸ibe
(
a˛õ¡
, "#");

345 
	`as£π
("GoodÑ¯‰om unsubs¸ibe", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

347 
i
 = 0; i < 
mesßgeCou¡
; ++i)

349 i‡(
mesßgesAºived
[
i
].
m
->
ªèöed
)

351 
	`MyLog
(
LOGA_INFO
, "DñëögÑëaöed mesßgêf‹Å›i¯%s", (*)
mesßgesAºived
[
i
].
t›icName
);

352 
rc
 = 
	`MQTTClõ¡_publish
(
a˛õ¡
, 
mesßgesAºived
[
i
].
t›icName
, 0, "", 0, 1, 
NULL
);

353 
	`as£π
("GoodÑ¯‰omÖublish", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

357 
rc
 = 
	`MQTTClõ¡_disc⁄√˘
(
a˛õ¡
, 100);

358 
	`as£π
("Disc⁄√˘ suc˚ssful", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

360 
	`MQTTClõ¡_de°roy
(&
a˛õ¡
);

362 
	`˛órMesßges
();

364 
	`MyLog
(
LOGA_INFO
, "Finished cleaning up");

365 
	}
}

368 
	$basic_ã°
()

370 
i
, 
rc
;

371 
MQTTClõ¡_c⁄√˘O±i⁄s
 
›ts
 = 
MQTTClõ¡_c⁄√˘O±i⁄s_öôülizî
;

372 
MQTTClõ¡
 
a˛õ¡
;

374 
	`MyLog
(
LOGA_INFO
, "Starting basicÅest");

376 
ã°s
 = 
Áûuªs
 = 0;

378 
›ts
.
kìpAliveI¡îvÆ
 = 20;

379 
›ts
.
˛ón£ssi⁄
 = 1;

380 
›ts
.
u£∫ame
 = 
›ti⁄s
.username;

381 
›ts
.
∑ssw‹d
 = 
›ti⁄s
.password;

382 
›ts
.
MQTTVîsi⁄
 = 
›ti⁄s
.MQTTVersion;

384 
rc
 = 
	`MQTTClõ¡_¸óã
(&
a˛õ¡
, 
›ti⁄s
.
c⁄√˘i⁄
, o±i⁄s.
˛õ¡id1
, 
MQTTCLIENT_PERSISTENCE_DEFAULT
, 
NULL
);

385 
	`as£π
("goodÑ¯‰om cª©e", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d\n",Ñc);

387 
rc
 = 
	`MQTTClõ¡_£tCÆlbacks
(
a˛õ¡
, 
NULL
, NULL, 
mesßgeAºived
, NULL);

388 
	`as£π
("GoodÑ¯‰om sëCÆlbacks", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

390 
rc
 = 
	`MQTTClõ¡_c⁄√˘
(
a˛õ¡
, &
›ts
);

391 
	`as£π
("GoodÑ¯‰om c⁄√˘", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

393 
rc
 = 
	`MQTTClõ¡_disc⁄√˘
(
a˛õ¡
, 100);

394 
	`as£π
("Disc⁄√˘ suc˚ssful", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

396 
rc
 = 
	`MQTTClõ¡_c⁄√˘
(
a˛õ¡
, &
›ts
);

397 
	`as£π
("GoodÑ¯‰om c⁄√˘", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

399 
rc
 = 
	`MQTTClõ¡_subs¸ibe
(
a˛õ¡
, 
t›ics
[0], 0);

400 
	`as£π
("GoodÑ¯‰om subs¸ibe", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

402 
rc
 = 
	`MQTTClõ¡_publish
(
a˛õ¡
, 
t›ics
[0], 5, "qo†0", 0, 0, 
NULL
);

403 
	`as£π
("GoodÑ¯‰omÖublish", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

405 
rc
 = 
	`MQTTClõ¡_publish
(
a˛õ¡
, 
t›ics
[0], 5, "qo†1", 1, 0, 
NULL
);

406 
	`as£π
("GoodÑ¯‰omÖublish", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

408 
rc
 = 
	`MQTTClõ¡_publish
(
a˛õ¡
, 
t›ics
[0], 5, "qo†2", 2, 0, 
NULL
);

409 
	`as£π
("GoodÑ¯‰omÖublish", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

411 
	`m¶ìp
(1000);

413 
rc
 = 
	`MQTTClõ¡_disc⁄√˘
(
a˛õ¡
, 10000);

414 
	`as£π
("Disc⁄√˘ suc˚ssful", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

416 
	`as£π
("3 Mesßge†ª˚ived", 
mesßgeCou¡
 == 3, "messageCount was %d", messageCount);

417 
	`˛órMesßges
();

423 
	`MQTTClõ¡_de°roy
(&
a˛õ¡
);

425 
	`MyLog
(
LOGA_INFO
, "Basi¯ã° %s", (
Áûuªs
 == 0) ? "succeeded" : "failed");

426  
Áûuªs
;

427 
	}
}

431 
	$ofÊöe_mesßge_queueög_ã°
()

433 
i
, 
rc
;

434 
MQTTClõ¡_c⁄√˘O±i⁄s
 
›ts
 = 
MQTTClõ¡_c⁄√˘O±i⁄s_öôülizî
;

435 
MQTTClõ¡
 
a˛õ¡
;

436 
MQTTClõ¡
 
b˛õ¡
;

438 
	`MyLog
(
LOGA_INFO
, "Offline message queueingÅest");

440 
ã°s
 = 
Áûuªs
 = 0;

442 
›ts
.
kìpAliveI¡îvÆ
 = 20;

443 
›ts
.
˛ón£ssi⁄
 = 0;

444 
›ts
.
u£∫ame
 = 
›ti⁄s
.username;

445 
›ts
.
∑ssw‹d
 = 
›ti⁄s
.password;

446 
›ts
.
MQTTVîsi⁄
 = 
›ti⁄s
.MQTTVersion;

448 
rc
 = 
	`MQTTClõ¡_¸óã
(&
a˛õ¡
, 
›ti⁄s
.
c⁄√˘i⁄
, o±i⁄s.
˛õ¡id1
, 
MQTTCLIENT_PERSISTENCE_DEFAULT
, 
NULL
);

449 
	`as£π
("goodÑ¯‰om cª©e", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d\n",Ñc);

451 
rc
 = 
	`MQTTClõ¡_£tCÆlbacks
(
a˛õ¡
, 
NULL
, NULL, 
mesßgeAºived
, NULL);

452 
	`as£π
("GoodÑ¯‰om sëCÆlbacks", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

454 
rc
 = 
	`MQTTClõ¡_c⁄√˘
(
a˛õ¡
, &
›ts
);

455 
	`as£π
("GoodÑ¯‰om c⁄√˘", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

457 
rc
 = 
	`MQTTClõ¡_subs¸ibe
(
a˛õ¡
, 
wûdt›ics
[5], 2);

458 
	`as£π
("GoodÑ¯‰om subs¸ibe", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

460 
rc
 = 
	`MQTTClõ¡_disc⁄√˘
(
a˛õ¡
, 100);

461 
	`as£π
("Disc⁄√˘ suc˚ssful", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

463 
rc
 = 
	`MQTTClõ¡_¸óã
(&
b˛õ¡
, 
›ti⁄s
.
c⁄√˘i⁄
, o±i⁄s.
˛õ¡id2
, 
MQTTCLIENT_PERSISTENCE_DEFAULT
, 
NULL
);

464 
	`as£π
("goodÑ¯‰om cª©e", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d\n",Ñc);

466 
›ts
.
˛ón£ssi⁄
 = 1;

467 
rc
 = 
	`MQTTClõ¡_c⁄√˘
(
b˛õ¡
, &
›ts
);

468 
	`as£π
("GoodÑ¯‰om c⁄√˘", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

470 
rc
 = 
	`MQTTClõ¡_publish
(
b˛õ¡
, 
t›ics
[1], 5, "qo†0", 0, 0, 
NULL
);

471 
	`as£π
("GoodÑ¯‰omÖublish", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

473 
rc
 = 
	`MQTTClõ¡_publish
(
b˛õ¡
, 
t›ics
[2], 5, "qo†1", 1, 0, 
NULL
);

474 
	`as£π
("GoodÑ¯‰omÖublish", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

476 
rc
 = 
	`MQTTClõ¡_publish
(
b˛õ¡
, 
t›ics
[3], 5, "qo†2", 2, 0, 
NULL
);

477 
	`as£π
("GoodÑ¯‰omÖublish", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

479 
	`m¶ìp
(2000);

481 
rc
 = 
	`MQTTClõ¡_disc⁄√˘
(
b˛õ¡
, 100);

482 
	`as£π
("Disc⁄√˘ suc˚ssful", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

484 
	`MQTTClõ¡_de°roy
(&
b˛õ¡
);

486 
›ts
.
˛ón£ssi⁄
 = 0;

487 
rc
 = 
	`MQTTClõ¡_c⁄√˘
(
a˛õ¡
, &
›ts
);

488 
	`as£π
("GoodÑ¯‰om c⁄√˘", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

490 
	`m¶ìp
(1000);

492 
rc
 = 
	`MQTTClõ¡_disc⁄√˘
(
a˛õ¡
, 100);

493 
	`as£π
("Disc⁄√˘ suc˚ssful", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

495 
	`MQTTClõ¡_de°roy
(&
a˛õ¡
);

497 
	`as£π
("2 o∏3 mesßge†ª˚ived", 
mesßgeCou¡
 == 3 || messageCount == 2, "messageCount was %d", messageCount);

499 
	`MyLog
(
LOGA_INFO
, "Thi†£rvî %†queueög QoS 0 mesßge†f‹ ofÊöê˛õ¡s", (
mesßgeCou¡
 == 3) ? "is" : "isÇot");

501 
	`˛órMesßges
();

503 
	`MyLog
(
LOGA_INFO
, "OfÊöêmesßgêqueueögÅe° %s", (
Áûuªs
 == 0) ? "succeeded" : "failed");

504  
Áûuªs
;

505 
	}
}

508 
	$ªèöed_mesßge_ã°
()

510 
i
, 
rc
;

511 
MQTTClõ¡_c⁄√˘O±i⁄s
 
›ts
 = 
MQTTClõ¡_c⁄√˘O±i⁄s_öôülizî
;

512 
MQTTClõ¡
 
a˛õ¡
;

514 
	`MyLog
(
LOGA_INFO
, "Retained messageÅest");

516 
ã°s
 = 
Áûuªs
 = 0;

518 
›ts
.
kìpAliveI¡îvÆ
 = 20;

519 
›ts
.
˛ón£ssi⁄
 = 1;

520 
›ts
.
u£∫ame
 = 
›ti⁄s
.username;

521 
›ts
.
∑ssw‹d
 = 
›ti⁄s
.password;

522 
›ts
.
MQTTVîsi⁄
 = 
›ti⁄s
.MQTTVersion;

524 
	`as£π
("0 mesßge†ª˚ived", 
mesßgeCou¡
 == 0, "messageCount was %d", messageCount);

527 
rc
 = 
	`MQTTClõ¡_¸óã
(&
a˛õ¡
, 
›ti⁄s
.
c⁄√˘i⁄
, o±i⁄s.
˛õ¡id1
, 
MQTTCLIENT_PERSISTENCE_DEFAULT
, 
NULL
);

528 
	`as£π
("goodÑ¯‰om cª©e", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d\n",Ñc);

530 
rc
 = 
	`MQTTClõ¡_£tCÆlbacks
(
a˛õ¡
, 
NULL
, NULL, 
mesßgeAºived
, NULL);

531 
	`as£π
("GoodÑ¯‰om sëCÆlbacks", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

533 
rc
 = 
	`MQTTClõ¡_c⁄√˘
(
a˛õ¡
, &
›ts
);

534 
	`as£π
("GoodÑ¯‰om c⁄√˘", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

536 
rc
 = 
	`MQTTClõ¡_publish
(
a˛õ¡
, 
t›ics
[1], 5, "qo†0", 0, 1, 
NULL
);

537 
	`as£π
("GoodÑ¯‰omÖublish", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

539 
rc
 = 
	`MQTTClõ¡_publish
(
a˛õ¡
, 
t›ics
[2], 5, "qo†1", 1, 1, 
NULL
);

540 
	`as£π
("GoodÑ¯‰omÖublish", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

542 
rc
 = 
	`MQTTClõ¡_publish
(
a˛õ¡
, 
t›ics
[3], 5, "qo†2", 2, 1, 
NULL
);

543 
	`as£π
("GoodÑ¯‰omÖublish", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

545 
	`m¶ìp
(1000);

547 
rc
 = 
	`MQTTClõ¡_subs¸ibe
(
a˛õ¡
, 
wûdt›ics
[5], 2);

548 
	`as£π
("GoodÑ¯‰om subs¸ibe", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

550 
	`m¶ìp
(2000);

552 
rc
 = 
	`MQTTClõ¡_disc⁄√˘
(
a˛õ¡
, 100);

553 
	`as£π
("Disc⁄√˘ suc˚ssful", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

555 
	`as£π
("3 mesßge†ª˚ived", 
mesßgeCou¡
 == 3, "messageCount was %d", messageCount);

557 
i
 = 0; i < 
mesßgeCou¡
; ++i)

559 
	`as£π
("mesßge†should bêªèöed", 
mesßgesAºived
[
i
].
m
->
ªèöed
, "retained was %d",

560 
mesßgesAºived
[
i
].
m
->
ªèöed
);

561 
	`MQTTClõ¡_‰ì
(
mesßgesAºived
[
i
].
t›icName
);

562 
	`MQTTClõ¡_‰ìMesßge
(&
mesßgesAºived
[
i
].
m
);

564 
mesßgeCou¡
 = 0;

567 
rc
 = 
	`MQTTClõ¡_c⁄√˘
(
a˛õ¡
, &
›ts
);

568 
	`as£π
("GoodÑ¯‰om c⁄√˘", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

570 
rc
 = 
	`MQTTClõ¡_publish
(
a˛õ¡
, 
t›ics
[1], 0, "", 0, 1, 
NULL
);

571 
	`as£π
("GoodÑ¯‰omÖublish", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

573 
rc
 = 
	`MQTTClõ¡_publish
(
a˛õ¡
, 
t›ics
[2], 0, "", 1, 1, 
NULL
);

574 
	`as£π
("GoodÑ¯‰omÖublish", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

576 
rc
 = 
	`MQTTClõ¡_publish
(
a˛õ¡
, 
t›ics
[3], 0, "", 2, 1, 
NULL
);

577 
	`as£π
("GoodÑ¯‰omÖublish", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

579 
	`m¶ìp
(200);

580 
rc
 = 
	`MQTTClõ¡_subs¸ibe
(
a˛õ¡
, 
wûdt›ics
[5], 2);

581 
	`as£π
("GoodÑ¯‰om subs¸ibe", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

583 
	`m¶ìp
(200);

585 
rc
 = 
	`MQTTClõ¡_disc⁄√˘
(
a˛õ¡
, 100);

586 
	`as£π
("Disc⁄√˘ suc˚ssful", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

588 
	`as£π
("0 mesßge†ª˚ived", 
mesßgeCou¡
 == 0, "messageCount was %d", messageCount);

590 
	`MQTTClõ¡_de°roy
(&
a˛õ¡
);

592 
	`MyLog
(
LOGA_INFO
, "Rëaöed mesßgêã° %s", (
Áûuªs
 == 0) ? "succeeded" : "failed");

593  
Áûuªs
;

594 
	}
}

596 
	#SOCKET_ERROR
 -1

	)

598 
	$ã°6_sockë_îr‹
(* 
aSåög
, 
sock
)

600 #i‡
	`deföed
(
WIN32
)

601 
î∫o
;

604 #i‡
	`deföed
(
WIN32
)

605 
î∫o
 = 
	`WSAGëLa°Eº‹
();

607 i‡(
î∫o
 !
EINTR
 &&Éºnÿ!
EAGAIN
 &&Éºnÿ!
EINPROGRESS
 &&Éºnÿ!
EWOULDBLOCK
)

609 i‡(
	`°rcmp
(
aSåög
, "shutdown"Ë!0 || (
î∫o
 !
ENOTCONN
 &&Éºnÿ!
ECONNRESET
))

610 
	`¥ötf
("SockëÉº‹ %d i¿%†f‹ sockë %d", 
î∫o
, 
aSåög
, 
sock
);

612  
î∫o
;

613 
	}
}

615 
	$ã°6_sockë_˛o£
(
sockë
)

617 
rc
;

619 #i‡
	`deföed
(
WIN32
)

620 i‡(
	`shutdown
(
sockë
, 
SD_BOTH
Ë=
SOCKET_ERROR
)

621 
	`ã°6_sockë_îr‹
("shutdown", 
sockë
);

622 i‡((
rc
 = 
	`˛o£sockë
(
sockë
)Ë=
SOCKET_ERROR
)

623 
	`ã°6_sockë_îr‹
("˛o£", 
sockë
);

625 i‡(
	`shutdown
(
sockë
, 
SHUT_RDWR
Ë=
SOCKET_ERROR
)

626 
	`ã°6_sockë_îr‹
("shutdown", 
sockë
);

627 i‡((
rc
 = 
	`˛o£
(
sockë
)Ë=
SOCKET_ERROR
)

628 
	`ã°6_sockë_îr‹
("˛o£", 
sockë
);

630  
rc
;

631 
	}
}

635 
	msockë
;

636 
time_t
 
	mœ°C⁄è˘
;

637 #i‡
deföed
(
OPENSSL
)

638 
SSL
* 
	ms¶
;

639 
SSL_CTX
* 
	m˘x
;

641 } 
	t√tw‹kH™dÀs
;

646 * 
	m˛õ¡ID
;

647 * 
	mu£∫ame
;

648 * 
	m∑ssw‹d
;

649 
	m˛ón£ssi⁄
 : 1;

650 
	mc⁄√˘ed
 : 1;

651 
	mgood
 : 1;

652 
	mpög_out°™dög
 : 1;

653 
	mc⁄√˘_°©e
 : 4;

654 
√tw‹kH™dÀs
 
	m√t
;

656 } 
	tClõ¡s
;

661 * 
	m£rvîURI
;

662 
Clõ¡s
* 
	mc
;

663 
MQTTClõ¡_c⁄√˘i⁄Lo°
* 
	m˛
;

664 
MQTTClõ¡_mesßgeAºived
* 
	mma
;

665 
MQTTClõ¡_dñivîyCom∂ëe
* 
	mdc
;

666 * 
	mc⁄ãxt
;

668 
	mc⁄√˘_£m
;

669 
	mrc
;

670 
	mc⁄«ck_£m
;

671 
	msuback_£m
;

672 
	munsuback_£m
;

673 * 
	m∑ck
;

674 } 
	tMQTTClõ¡s
;

677 
	$wûl_mesßge_ã°
()

679 
i
, 
rc
, 
cou¡
 = 0;

680 
MQTTClõ¡_c⁄√˘O±i⁄s
 
›ts
 = 
MQTTClõ¡_c⁄√˘O±i⁄s_öôülizî
;

681 
MQTTClõ¡_wûlO±i⁄s
 
w›ts
 = 
MQTTClõ¡_wûlO±i⁄s_öôülizî
;

682 
MQTTClõ¡
 
a˛õ¡
, 
b˛õ¡
;

684 
	`MyLog
(
LOGA_INFO
, "Will messageÅest");

686 
ã°s
 = 
Áûuªs
 = 0;

688 
›ts
.
kìpAliveI¡îvÆ
 = 2;

689 
›ts
.
˛ón£ssi⁄
 = 1;

690 
›ts
.
u£∫ame
 = 
›ti⁄s
.username;

691 
›ts
.
∑ssw‹d
 = 
›ti⁄s
.password;

692 
›ts
.
MQTTVîsi⁄
 = 
›ti⁄s
.MQTTVersion;

694 
›ts
.
wûl
 = &
w›ts
;

695 
›ts
.
wûl
->
mesßge
 = "clientÇot disconnected";

696 
›ts
.
wûl
->
qos
 = 1;

697 
›ts
.
wûl
->
ªèöed
 = 0;

698 
›ts
.
wûl
->
t›icName
 = 
t›ics
[2];

700 
rc
 = 
	`MQTTClõ¡_¸óã
(&
a˛õ¡
, 
›ti⁄s
.
c⁄√˘i⁄
, o±i⁄s.
˛õ¡id1
, 
MQTTCLIENT_PERSISTENCE_DEFAULT
, 
NULL
);

701 
	`as£π
("goodÑ¯‰om cª©e", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d\n",Ñc);

703 
rc
 = 
	`MQTTClõ¡_c⁄√˘
(
a˛õ¡
, &
›ts
);

704 
	`as£π
("GoodÑ¯‰om c⁄√˘", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

706 
rc
 = 
	`MQTTClõ¡_¸óã
(&
b˛õ¡
, 
›ti⁄s
.
c⁄√˘i⁄
, o±i⁄s.
˛õ¡id2
, 
MQTTCLIENT_PERSISTENCE_DEFAULT
, 
NULL
);

707 
	`as£π
("goodÑ¯‰om cª©e", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d\n",Ñc);

709 
rc
 = 
	`MQTTClõ¡_£tCÆlbacks
(
b˛õ¡
, 
NULL
, NULL, 
mesßgeAºived
, NULL);

710 
	`as£π
("GoodÑ¯‰om sëCÆlbacks", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

712 
›ts
.
kìpAliveI¡îvÆ
 = 20;

713 
›ts
.
wûl
 = 
NULL
;

714 
rc
 = 
	`MQTTClõ¡_c⁄√˘
(
b˛õ¡
, &
›ts
);

715 
	`as£π
("GoodÑ¯‰om c⁄√˘", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

717 
rc
 = 
	`MQTTClõ¡_subs¸ibe
(
b˛õ¡
, 
t›ics
[2], 2);

718 
	`as£π
("GoodÑ¯‰om subs¸ibe", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

720 
	`m¶ìp
(100);

722 
	`ã°6_sockë_˛o£
(((
MQTTClõ¡s
*)
a˛õ¡
)->
c
->
√t
.
sockë
);

724 
mesßgeCou¡
 =0 && ++
cou¡
 < 10)

725 
	`m¶ìp
(1000);

727 
rc
 = 
	`MQTTClõ¡_disc⁄√˘
(
b˛õ¡
, 100);

728 
	`as£π
("Disc⁄√˘ suc˚ssful", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

730 
	`MQTTClõ¡_de°roy
(&
b˛õ¡
);

732 
	`as£π
("wû»mesßgêª˚ived", 
mesßgeCou¡
 == 1, "messageCount was %d", messageCount);

734 
rc
 = 
	`MQTTClõ¡_disc⁄√˘
(
a˛õ¡
, 100);

736 
	`MQTTClõ¡_de°roy
(&
a˛õ¡
);

738 
	`MyLog
(
LOGA_INFO
, "Wû»mesßgêã° %s", (
Áûuªs
 == 0) ? "succeeded" : "failed");

739  
Áûuªs
;

740 
	}
}

743 
	$ovîœµög_subs¸ùti⁄s_ã°
()

749 
i
, 
rc
;

750 
MQTTClõ¡_c⁄√˘O±i⁄s
 
›ts
 = 
MQTTClõ¡_c⁄√˘O±i⁄s_öôülizî
;

751 
MQTTClõ¡
 
a˛õ¡
;

752 * 
t›icLi°
[] = {
wûdt›ics
[6], wildtopics[0]};

753 
qosLi°
[] = {2, 1};

755 
	`MyLog
(
LOGA_INFO
, "Starting overlapping subscriptionsÅest");

757 
	`˛órMesßges
();

758 
ã°s
 = 
Áûuªs
 = 0;

760 
›ts
.
kìpAliveI¡îvÆ
 = 20;

761 
›ts
.
˛ón£ssi⁄
 = 1;

762 
›ts
.
u£∫ame
 = 
›ti⁄s
.username;

763 
›ts
.
∑ssw‹d
 = 
›ti⁄s
.password;

764 
›ts
.
MQTTVîsi⁄
 = 
›ti⁄s
.MQTTVersion;

766 
rc
 = 
	`MQTTClõ¡_¸óã
(&
a˛õ¡
, 
›ti⁄s
.
c⁄√˘i⁄
, o±i⁄s.
˛õ¡id1
, 
MQTTCLIENT_PERSISTENCE_DEFAULT
, 
NULL
);

767 
	`as£π
("goodÑ¯‰om cª©e", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d\n",Ñc);

769 
rc
 = 
	`MQTTClõ¡_£tCÆlbacks
(
a˛õ¡
, 
NULL
, NULL, 
mesßgeAºived
, NULL);

770 
	`as£π
("GoodÑ¯‰om sëCÆlbacks", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

772 
rc
 = 
	`MQTTClõ¡_c⁄√˘
(
a˛õ¡
, &
›ts
);

773 
	`as£π
("GoodÑ¯‰om c⁄√˘", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

775 
rc
 = 
	`MQTTClõ¡_subs¸ibeM™y
(
a˛õ¡
, 2, 
t›icLi°
, 
qosLi°
);

776 
	`as£π
("GoodÑ¯‰om subs¸ibe", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

778 
rc
 = 
	`MQTTClõ¡_publish
(
a˛õ¡
, 
t›ics
[3], 
	`°æí
("overlappingÅopic filters") + 1,

779 "ovîœµögÅ›i¯fûãrs", 2, 0, 
NULL
);

780 
	`as£π
("GoodÑ¯‰omÖublish", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

782 
	`m¶ìp
(1000);

784 
	`as£π
("1 o∏2 mesßge†ª˚ived", 
mesßgeCou¡
 == 1 || messageCount == 2, "messageCount was %d", messageCount);

786 i‡(
mesßgeCou¡
 == 1)

788 
	`MyLog
(
LOGA_INFO
, "This server isÖublishing one message foráll matching overlapping subscriptions,Çot one forÉach.");

789 
	`as£π
("QoS should bê2", 
mesßgesAºived
[0].
m
->
qos
 == 2, "QoS was %d", messagesArrived[0].m->qos);

793 
	`MyLog
(
LOGA_INFO
, "This server isÖublishing one messageÖerÉach matching overlapping subscription.");

794 
	`as£π1
("QoSs should be 1ánd 2",

795 (
mesßgesAºived
[0].
m
->
qos
 == 2 && messagesArrived[1].m->qos == 1) ||

796 (
mesßgesAºived
[0].
m
->
qos
 == 1 && messagesArrived[1].m->qos == 2),

797 "QoS†wîê%d %d", 
mesßgesAºived
[0].
m
->
qos
, messagesArrived[1].m->qos);

800 
rc
 = 
	`MQTTClõ¡_disc⁄√˘
(
a˛õ¡
, 100);

802 
	`MQTTClõ¡_de°roy
(&
a˛õ¡
);

804 
	`MyLog
(
LOGA_INFO
, "Ovîœµög subs¸ùti⁄Åe° %s", (
Áûuªs
 == 0) ? "succeeded" : "failed");

805  
Áûuªs
;

806 
	}
}

809 
	$kì∑live_ã°
()

814 
i
, 
rc
, 
cou¡
 = 0;

815 
MQTTClõ¡_c⁄√˘O±i⁄s
 
›ts
 = 
MQTTClõ¡_c⁄√˘O±i⁄s_öôülizî
;

816 
MQTTClõ¡_wûlO±i⁄s
 
w›ts
 = 
MQTTClõ¡_wûlO±i⁄s_öôülizî
;

817 
MQTTClõ¡
 
a˛õ¡
, 
b˛õ¡
;

819 
	`MyLog
(
LOGA_INFO
, "Starting keepaliveÅest");

821 
ã°s
 = 
Áûuªs
 = 0;

822 
	`˛órMesßges
();

824 
›ts
.
˛ón£ssi⁄
 = 1;

825 
›ts
.
u£∫ame
 = 
›ti⁄s
.username;

826 
›ts
.
∑ssw‹d
 = 
›ti⁄s
.password;

827 
›ts
.
MQTTVîsi⁄
 = 
›ti⁄s
.MQTTVersion;

829 
›ts
.
wûl
 = &
w›ts
;

830 
›ts
.
wûl
->
mesßge
 = "keepaliveÉxpiry";

831 
›ts
.
wûl
->
qos
 = 1;

832 
›ts
.
wûl
->
ªèöed
 = 0;

833 
›ts
.
wûl
->
t›icName
 = 
t›ics
[4];

835 
›ts
.
kìpAliveI¡îvÆ
 = 20;

836 
rc
 = 
	`MQTTClõ¡_¸óã
(&
b˛õ¡
, 
›ti⁄s
.
c⁄√˘i⁄
, o±i⁄s.
˛õ¡id2
, 
MQTTCLIENT_PERSISTENCE_DEFAULT
, 
NULL
);

837 
	`as£π
("goodÑ¯‰om cª©e", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d\n",Ñc);

839 
rc
 = 
	`MQTTClõ¡_£tCÆlbacks
(
b˛õ¡
, 
NULL
, NULL, 
mesßgeAºived
, NULL);

840 
	`as£π
("GoodÑ¯‰om sëCÆlbacks", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

842 
rc
 = 
	`MQTTClõ¡_c⁄√˘
(
b˛õ¡
, &
›ts
);

843 
	`as£π
("GoodÑ¯‰om c⁄√˘", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

845 
rc
 = 
	`MQTTClõ¡_subs¸ibe
(
b˛õ¡
, 
t›ics
[4], 2);

846 
	`as£π
("GoodÑ¯‰om subs¸ibe", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

848 
›ts
.
kìpAliveI¡îvÆ
 = 2;

849 
rc
 = 
	`MQTTClõ¡_¸óã
(&
a˛õ¡
, 
›ti⁄s
.
c⁄√˘i⁄
, o±i⁄s.
˛õ¡id1
, 
MQTTCLIENT_PERSISTENCE_DEFAULT
, 
NULL
);

850 
	`as£π
("goodÑ¯‰om cª©e", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d\n",Ñc);

852 
rc
 = 
	`MQTTClõ¡_c⁄√˘
(
a˛õ¡
, &
›ts
);

853 
	`as£π
("GoodÑ¯‰om c⁄√˘", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

855 
mesßgeCou¡
 =0 && ++
cou¡
 < 20)

856 
	`m¶ìp
(1000);

858 
rc
 = 
	`MQTTClõ¡_disc⁄√˘
(
b˛õ¡
, 100);

859 
	`as£π
("Disc⁄√˘ suc˚ssful", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

861 
	`as£π
("Should havêwû»mesßge", 
mesßgeCou¡
 == 1, "messageCount was %d", messageCount);

863 
rc
 = 
	`MQTTClõ¡_disc⁄√˘
(
a˛õ¡
, 100);

865 
	`MQTTClõ¡_de°roy
(&
a˛õ¡
);

867 
	`MyLog
(
LOGA_INFO
, "Kì∑livêã° %s", (
Áûuªs
 == 0) ? "succeeded" : "failed");

868  
Áûuªs
;

869 
	}
}

873 
	$ªdñivîy_⁄_ªc⁄√˘_ã°
()

878 
i
, 
rc
, 
cou¡
 = 0;

879 
MQTTClõ¡_c⁄√˘O±i⁄s
 
›ts
 = 
MQTTClõ¡_c⁄√˘O±i⁄s_öôülizî
;

880 
MQTTClõ¡
 
a˛õ¡
;

882 
	`MyLog
(
LOGA_INFO
, "StartingÑedelivery onÑeconnectÅest");

884 
ã°s
 = 
Áûuªs
 = 0;

885 
	`˛órMesßges
();

887 
›ts
.
kìpAliveI¡îvÆ
 = 0;

888 
›ts
.
˛ón£ssi⁄
 = 0;

889 
›ts
.
u£∫ame
 = 
›ti⁄s
.username;

890 
›ts
.
∑ssw‹d
 = 
›ti⁄s
.password;

891 
›ts
.
MQTTVîsi⁄
 = 
›ti⁄s
.MQTTVersion;

893 
rc
 = 
	`MQTTClõ¡_¸óã
(&
a˛õ¡
, 
›ti⁄s
.
c⁄√˘i⁄
, o±i⁄s.
˛õ¡id1
, 
MQTTCLIENT_PERSISTENCE_DEFAULT
, 
NULL
);

894 
	`as£π
("goodÑ¯‰om cª©e", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d\n",Ñc);

896 
rc
 = 
	`MQTTClõ¡_c⁄√˘
(
a˛õ¡
, &
›ts
);

897 
	`as£π
("GoodÑ¯‰om c⁄√˘", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

899 
rc
 = 
	`MQTTClõ¡_subs¸ibe
(
a˛õ¡
, 
wûdt›ics
[6], 2);

900 
	`as£π
("GoodÑ¯‰om subs¸ibe", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

901 
	`MQTTClõ¡_yõld
();

904 
rc
 = 
	`MQTTClõ¡_publish
(
a˛õ¡
, 
t›ics
[1], 6, "qo†1", 2, 0, 
NULL
);

905 
	`as£π
("GoodÑ¯‰omÖublish", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

907 
rc
 = 
	`MQTTClõ¡_publish
(
a˛õ¡
, 
t›ics
[3], 6, "qo†2", 2, 0, 
NULL
);

908 
	`as£π
("GoodÑ¯‰omÖublish", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

910 
rc
 = 
	`MQTTClõ¡_disc⁄√˘
(
a˛õ¡
, 0);

912 
	`as£π
("Nÿmesßge†should havêbì¿ª˚ived yë", 
mesßgeCou¡
 == 0, "messageCount was %d", messageCount);

914 
rc
 = 
	`MQTTClõ¡_£tCÆlbacks
(
a˛õ¡
, 
NULL
, NULL, 
mesßgeAºived
, NULL);

915 
	`as£π
("GoodÑ¯‰om sëCÆlbacks", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

917 
rc
 = 
	`MQTTClõ¡_c⁄√˘
(
a˛õ¡
, &
›ts
);

918 
	`as£π
("GoodÑ¯‰om c⁄√˘", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

920 
mesßgeCou¡
 < 2 && ++
cou¡
 < 5)

921 
	`m¶ìp
(1000);

923 
	`as£π
("Should havê2 mesßges", 
mesßgeCou¡
 == 2, "messageCount was %d", messageCount);

925 
rc
 = 
	`MQTTClõ¡_disc⁄√˘
(
a˛õ¡
, 100);

927 
	`MQTTClõ¡_de°roy
(&
a˛õ¡
);

929 
	`MyLog
(
LOGA_INFO
, "Redñivîy o¿ªc⁄√˘Åe° %s", (
Áûuªs
 == 0) ? "succeeded" : "failed");

930  
Áûuªs
;

931 
	}
}

935 
	$zîo_Àngth_˛õ¡id_ã°
()

937 
i
, 
rc
, 
cou¡
 = 0;

938 
MQTTClõ¡_c⁄√˘O±i⁄s
 
›ts
 = 
MQTTClõ¡_c⁄√˘O±i⁄s_öôülizî
;

939 
MQTTClõ¡
 
a˛õ¡
;

941 
	`MyLog
(
LOGA_INFO
, "Starting zeroÜength clientidÅest");

943 
ã°s
 = 
Áûuªs
 = 0;

944 
	`˛órMesßges
();

946 
›ts
.
kìpAliveI¡îvÆ
 = 0;

947 
›ts
.
˛ón£ssi⁄
 = 0;

948 
›ts
.
u£∫ame
 = 
›ti⁄s
.username;

949 
›ts
.
∑ssw‹d
 = 
›ti⁄s
.password;

950 
›ts
.
MQTTVîsi⁄
 = 
›ti⁄s
.MQTTVersion;

952 
rc
 = 
	`MQTTClõ¡_¸óã
(&
a˛õ¡
, 
›ti⁄s
.
c⁄√˘i⁄
, "", 
MQTTCLIENT_PERSISTENCE_DEFAULT
, 
NULL
);

953 
	`as£π
("goodÑ¯‰om cª©e", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d\n",Ñc);

955 
rc
 = 
	`MQTTClõ¡_c⁄√˘
(
a˛õ¡
, &
›ts
);

956 
	`as£π
("r¯2 from c⁄√˘", 
rc
 == 2, "rc was %d",Ñc);

958 
›ts
.
˛ón£ssi⁄
 = 1;

959 
rc
 = 
	`MQTTClõ¡_c⁄√˘
(
a˛õ¡
, &
›ts
);

960 
	`as£π
("C⁄«ckÑ¯should bê0 o∏2", 
rc
 =
MQTTCLIENT_SUCCESS
 ||Ñc == 2, "rc was %d",Ñc);

962 
	`MyLog
(
LOGA_INFO
, "Thi†£rvî %†suµ‹àzîÿÀngth clõ¡ids", (
rc
 == 2) ? "doesÇot" : "does");

964 i‡(
rc
 =
MQTTCLIENT_SUCCESS
)

965 
rc
 = 
	`MQTTClõ¡_disc⁄√˘
(
a˛õ¡
, 100);

967 
	`MQTTClõ¡_de°roy
(&
a˛õ¡
);

969 
	`MyLog
(
LOGA_INFO
, "ZîÿÀngth clõ¡idÅe° %s", (
Áûuªs
 == 0) ? "succeeded" : "failed");

970  
Áûuªs
;

971 
	}
}

974 
	$dﬁœr_t›ics_ã°
()

980 
i
, 
rc
, 
cou¡
 = 0;

981 
MQTTClõ¡_c⁄√˘O±i⁄s
 
›ts
 = 
MQTTClõ¡_c⁄√˘O±i⁄s_öôülizî
;

982 
MQTTClõ¡
 
a˛õ¡
;

983 
dﬁœπ›ic
[20];

985 
	`MyLog
(
LOGA_INFO
, "Starting $ÅopicsÅest");

987 
	`•rötf
(
dﬁœπ›ic
, "$%s", 
t›ics
[1]);

989 
	`˛órMesßges
();

991 
›ts
.
kìpAliveI¡îvÆ
 = 5;

992 
›ts
.
˛ón£ssi⁄
 = 1;

993 
›ts
.
u£∫ame
 = 
›ti⁄s
.username;

994 
›ts
.
∑ssw‹d
 = 
›ti⁄s
.password;

995 
›ts
.
MQTTVîsi⁄
 = 
›ti⁄s
.MQTTVersion;

997 
rc
 = 
	`MQTTClõ¡_¸óã
(&
a˛õ¡
, 
›ti⁄s
.
c⁄√˘i⁄
, o±i⁄s.
˛õ¡id1
, 
MQTTCLIENT_PERSISTENCE_DEFAULT
, 
NULL
);

998 
	`as£π
("goodÑ¯‰om cª©e", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d\n",Ñc);

1000 
rc
 = 
	`MQTTClõ¡_£tCÆlbacks
(
a˛õ¡
, 
NULL
, NULL, 
mesßgeAºived
, NULL);

1001 
	`as£π
("GoodÑ¯‰om sëCÆlbacks", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

1003 
rc
 = 
	`MQTTClõ¡_c⁄√˘
(
a˛õ¡
, &
›ts
);

1004 
	`as£π
("GoodÑ¯‰om c⁄√˘", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

1006 
rc
 = 
	`MQTTClõ¡_subs¸ibe
(
a˛õ¡
, 
wûdt›ics
[5], 2);

1007 
	`as£π
("GoodÑ¯‰om subs¸ibe", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

1009 
	`m¶ìp
(1000);

1010 
	`˛órMesßges
();

1012 
rc
 = 
	`MQTTClõ¡_publish
(
a˛õ¡
, 
t›ics
[1], 20, "nŸ síàtÿdﬁœ∏t›ic", 1, 0, 
NULL
);

1013 
	`as£π
("GoodÑ¯‰omÖublish", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

1015 
rc
 = 
	`MQTTClõ¡_publish
(
a˛õ¡
, 
dﬁœπ›ic
, 20, "£¡Åÿdﬁœ∏t›ic", 1, 0, 
NULL
);

1016 
	`as£π
("GoodÑ¯‰omÖublish", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

1018 
	`m¶ìp
(1000);

1019 
	`as£π
("Should havê1 mesßge", 
mesßgeCou¡
 == 1, "messageCount was %d", messageCount);

1021 
rc
 = 
	`MQTTClõ¡_disc⁄√˘
(
a˛õ¡
, 100);

1022 
	`as£π
("Disc⁄√˘ suc˚ssful", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

1024 
	`MQTTClõ¡_de°roy
(&
a˛õ¡
);

1026 
	`MyLog
(
LOGA_INFO
, "$Å›ic†ã° %s", (
Áûuªs
 == 0) ? "succeeded" : "failed");

1027  
Áûuªs
;

1028 
	}
}

1031 
	$subs¸ibe_Áûuª_ã°
()

1036 
i
, 
rc
, 
cou¡
 = 0;

1037 
MQTTClõ¡_c⁄√˘O±i⁄s
 
›ts
 = 
MQTTClõ¡_c⁄√˘O±i⁄s_öôülizî
;

1038 
MQTTClõ¡
 
a˛õ¡
;

1039 
subqos
 = 2;

1041 
	`MyLog
(
LOGA_INFO
, "Starting subscribe failureÅest");

1043 
	`˛órMesßges
();

1045 
›ts
.
kìpAliveI¡îvÆ
 = 5;

1046 
›ts
.
˛ón£ssi⁄
 = 1;

1047 
›ts
.
u£∫ame
 = 
›ti⁄s
.username;

1048 
›ts
.
∑ssw‹d
 = 
›ti⁄s
.password;

1049 
›ts
.
MQTTVîsi⁄
 = 
›ti⁄s
.MQTTVersion;

1051 
rc
 = 
	`MQTTClõ¡_¸óã
(&
a˛õ¡
, 
›ti⁄s
.
c⁄√˘i⁄
, o±i⁄s.
˛õ¡id1
, 
MQTTCLIENT_PERSISTENCE_DEFAULT
, 
NULL
);

1052 
	`as£π
("goodÑ¯‰om cª©e", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d\n",Ñc);

1054 
rc
 = 
	`MQTTClõ¡_£tCÆlbacks
(
a˛õ¡
, 
NULL
, NULL, 
mesßgeAºived
, NULL);

1055 
	`as£π
("GoodÑ¯‰om sëCÆlbacks", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

1057 
rc
 = 
	`MQTTClõ¡_c⁄√˘
(
a˛õ¡
, &
›ts
);

1058 
	`as£π
("GoodÑ¯‰om c⁄√˘", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

1060 
rc
 = 
	`MQTTClõ¡_subs¸ibeM™y
(
a˛õ¡
, 1, &
nosubs¸ibe_t›ics
[0], &
subqos
);

1061 
	`as£π
("GoodÑ¯‰om subs¸ibe", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

1062 
	`as£π
("0x80Ñ¯‰om subs¸ibe", 
subqos
 == 0x80, "subqos was %d", subqos);

1064 
rc
 = 
	`MQTTClõ¡_disc⁄√˘
(
a˛õ¡
, 100);

1065 
	`as£π
("Disc⁄√˘ suc˚ssful", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

1067 
	`MQTTClõ¡_de°roy
(&
a˛õ¡
);

1069 
	`MyLog
(
LOGA_INFO
, "Subs¸ibêÁûuªÅe° %s", (
Áûuªs
 == 0) ? "succeeded" : "failed");

1070  
Áûuªs
;

1071 
	}
}

1074 
	$maö
(
¨gc
, ** 
¨gv
)

1076 
i
;

1077 
Æl_Áûuªs
 = 0;

1079 
	`gë›ts
(
¨gc
, 
¨gv
);

1081 
i
 = 0; i < 
›ti⁄s
.
ôî©i⁄s
; ++i)

1083 
	`˛ónup
();

1084 
Æl_Áûuªs
 +
	`basic_ã°
() +

1085 
	`ofÊöe_mesßge_queueög_ã°
() +

1086 
	`ªèöed_mesßge_ã°
() +

1087 
	`wûl_mesßge_ã°
() +

1088 
	`ovîœµög_subs¸ùti⁄s_ã°
() +

1089 
	`kì∑live_ã°
() +

1090 
	`ªdñivîy_⁄_ªc⁄√˘_ã°
() +

1091 
	`zîo_Àngth_˛õ¡id_ã°
();

1093 i‡(
›ti⁄s
.
run_dﬁœr_t›ics_ã°
)

1094 
Æl_Áûuªs
 +
	`dﬁœr_t›ics_ã°
();

1096 i‡(
›ti⁄s
.
run_subs¸ibe_Áûuª_ã°
)

1097 
Æl_Áûuªs
 +
	`subs¸ibe_Áûuª_ã°
();

1100 
	`MyLog
(
LOGA_INFO
, "Te° suôê%s", (
Æl_Áûuªs
 == 0) ? "succeeded" : "failed");

1101 
	}
}

	@paho-c/test/test1.c

31 
	~"MQTTClõ¡.h
"

32 
	~<°rög.h
>

33 
	~<°dlib.h
>

35 #i‡!
deföed
(
_WINDOWS
)

36 
	~<sys/time.h
>

37 
	~<sys/sockë.h
>

38 
	~<uni°d.h
>

39 
	~<î∫o.h
>

41 
	~<wösock2.h
>

42 
	~<ws2t˝ù.h
>

43 
	#MAXHOSTNAMELEN
 256

	)

44 
	#EAGAIN
 
WSAEWOULDBLOCK


	)

45 
	#EINTR
 
WSAEINTR


	)

46 
	#EINPROGRESS
 
WSAEINPROGRESS


	)

47 
	#EWOULDBLOCK
 
WSAEWOULDBLOCK


	)

48 
	#ENOTCONN
 
WSAENOTCONN


	)

49 
	#ECONNRESET
 
WSAECONNRESET


	)

50 
	#£ãnv
(
a
, 
b
, 
c
Ë
	`_puãnv_s
◊, b)

	)

53 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ ◊[0]))

	)

55 
	$ußge
()

57 
	`¥ötf
("help!!\n");

58 
	`exô
(-1);

59 
	}
}

61 
	sO±i⁄s


63 * 
	mc⁄√˘i⁄
;

64 ** 
	mhac⁄√˘i⁄s
;

65 
	mhacou¡
;

66 
	mvîbo£
;

67 
	mã°_no
;

68 
	mMQTTVîsi⁄
;

69 
	môî©i⁄s
;

70 } 
	g›ti⁄s
 =

73 
NULL
,

77 
MQTTVERSION_DEFAULT
,

81 
	$gë›ts
(
¨gc
, ** 
¨gv
)

83 
cou¡
 = 1;

85 
cou¡
 < 
¨gc
)

87 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--test_no") == 0)

89 i‡(++
cou¡
 < 
¨gc
)

90 
›ti⁄s
.
ã°_no
 = 
	`©oi
(
¨gv
[
cou¡
]);

92 
	`ußge
();

94 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--connection") == 0)

96 i‡(++
cou¡
 < 
¨gc
)

98 
›ti⁄s
.
c⁄√˘i⁄
 = 
¨gv
[
cou¡
];

99 
	`¥ötf
("\nSëtög c⁄√˘i⁄Åÿ%s\n", 
›ti⁄s
.
c⁄√˘i⁄
);

102 
	`ußge
();

104 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--haconnections") == 0)

106 i‡(++
cou¡
 < 
¨gc
)

108 * 
tok
 = 
	`°πok
(
¨gv
[
cou¡
], " ");

109 
›ti⁄s
.
hacou¡
 = 0;

110 
›ti⁄s
.
hac⁄√˘i⁄s
 = 
	`mÆloc
((*) * 5);

111 
tok
)

113 
›ti⁄s
.
hac⁄√˘i⁄s
[›ti⁄s.
hacou¡
] = 
	`mÆloc
(
	`°æí
(
tok
) + 1);

114 
	`°r˝y
(
›ti⁄s
.
hac⁄√˘i⁄s
[›ti⁄s.
hacou¡
], 
tok
);

115 
›ti⁄s
.
hacou¡
++;

116 
tok
 = 
	`°πok
(
NULL
, " ");

120 
	`ußge
();

122 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--MQTTversion") == 0)

124 i‡(++
cou¡
 < 
¨gc
)

126 
›ti⁄s
.
MQTTVîsi⁄
 = 
	`©oi
(
¨gv
[
cou¡
]);

127 
	`¥ötf
("£âög MQTT vîsi⁄Åÿ%d\n", 
›ti⁄s
.
MQTTVîsi⁄
);

130 
	`ußge
();

132 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--iterations") == 0)

134 i‡(++
cou¡
 < 
¨gc
)

135 
›ti⁄s
.
ôî©i⁄s
 = 
	`©oi
(
¨gv
[
cou¡
]);

137 
	`ußge
();

139 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--verbose") == 0)

141 
›ti⁄s
.
vîbo£
 = 1;

142 
	`¥ötf
("\nSetting verbose on\n");

144 
cou¡
++;

146 
	}
}

149 
	#LOGA_DEBUG
 0

	)

150 
	#LOGA_INFO
 1

	)

151 
	~<°d¨g.h
>

152 
	~<time.h
>

153 
	~<sys/timeb.h
>

154 
	$MyLog
(
LOGA_Àvñ
, * 
f‹m©
, ...)

156 
msg_buf
[256];

157 
va_li°
 
¨gs
;

158 
timeb
 
ts
;

160 
tm
 *
timeöfo
;

162 i‡(
LOGA_Àvñ
 =
LOGA_DEBUG
 && 
›ti⁄s
.
vîbo£
 == 0)

165 
	`·ime
(&
ts
);

166 
timeöfo
 = 
	`loˇ…ime
(&
ts
.
time
);

167 
	`°r·ime
(
msg_buf
, 80, "%Y%m%d %H%M%S", 
timeöfo
);

169 
	`•rötf
(&
msg_buf
[
	`°æí
(msg_buf)], ".%.3hu ", 
ts
.
mûlôm
);

171 
	`va_°¨t
(
¨gs
, 
f‹m©
);

172 
	`v¢¥ötf
(&
msg_buf
[
	`°æí
(msg_buf)], (msg_bufË- såÀn(msg_buf), 
f‹m©
, 
¨gs
);

173 
	`va_íd
(
¨gs
);

175 
	`¥ötf
("%s\n", 
msg_buf
);

176 
	`fÊush
(
°dout
);

177 
	}
}

180 #i‡
deföed
(
WIN32
Ë|| deföed(
_WINDOWS
)

181 
	#mq¶ìp
(
A
Ë
	`SÀï
(1000*A)

	)

182 
	#START_TIME_TYPE
 
DWORD


	)

183 
DWORD
 
	g°¨t_time
 = 0;

184 
START_TIME_TYPE
 
	$°¨t_˛ock
()

186  
	`GëTickCou¡
();

187 
	}
}

188 #ñi‡
deföed
(
AIX
)

189 
	#mq¶ìp
 
¶ìp


	)

190 
	#START_TIME_TYPE
 
time•ec


	)

191 
START_TIME_TYPE
 
	$°¨t_˛ock
()

193 
time•ec
 
°¨t
;

194 
	`˛ock_gëtime
(
CLOCK_REALTIME
, &
°¨t
);

195  
°¨t
;

196 
	}
}

198 
	#mq¶ìp
 
¶ìp


	)

199 
	#START_TIME_TYPE
 
timevÆ


	)

201 
START_TIME_TYPE
 
	$°¨t_˛ock
()

203 
timevÆ
 
°¨t_time
;

204 
	`gëtimeofday
(&
°¨t_time
, 
NULL
);

205  
°¨t_time
;

206 
	}
}

210 #i‡
deföed
(
WIN32
)

211 
	$ñ≠£d
(
START_TIME_TYPE
 
°¨t_time
)

213  
	`GëTickCou¡
(Ë- 
°¨t_time
;

214 
	}
}

215 #ñi‡
deföed
(
AIX
)

216 
	#as£π
(
a
)

	)

217 
	$ñ≠£d
(
time•ec
 
°¨t
)

219 
time•ec
 
now
, 
ªs
;

221 
	`˛ock_gëtime
(
CLOCK_REALTIME
, &
now
);

222 
	`¡imîsub
(
now
, 
°¨t
, 
ªs
);

223  (
ªs
.
tv_£c
)*1000L + (ªs.
tv_n£c
)/1000000L;

224 
	}
}

226 
	$ñ≠£d
(
START_TIME_TYPE
 
°¨t_time
)

228 
timevÆ
 
now
, 
ªs
;

230 
	`gëtimeofday
(&
now
, 
NULL
);

231 
	`timîsub
(&
now
, &
°¨t_time
, &
ªs
);

232  (
ªs
.
tv_£c
)*1000 + (ªs.
tv_u£c
)/1000;

233 
	}
}

237 
	#as£π
(
a
, 
b
, 
c
, 
d
Ë
	`myas£π
(
__FILE__
, 
__LINE__
,á, b, c, d)

	)

238 
	#as£π1
(
a
, 
b
, 
c
, 
d
, 
e
Ë
	`myas£π
(
__FILE__
, 
__LINE__
,á, b, c, d,É)

	)

240 
	gã°s
 = 0;

241 
	gÁûuªs
 = 0;

242 
FILE
* 
	gxml
;

243 
START_TIME_TYPE
 
	gglobÆ_°¨t_time
;

244 
	gouçut
[3000];

245 * 
	gcur_ouçut
 = 
ouçut
;

248 
	$wrôe_ã°_ªsu…
()

250 
duøti⁄
 = 
	`ñ≠£d
(
globÆ_°¨t_time
);

252 
	`Ârötf
(
xml
, "Åime=\"%ld.%.3ld\" >\n", 
duøti⁄
 / 1000, duration % 1000);

253 i‡(
cur_ouçut
 !
ouçut
)

255 
	`Ârötf
(
xml
, "%s", 
ouçut
);

256 
cur_ouçut
 = 
ouçut
;

258 
	`Ârötf
(
xml
, "</testcase>\n");

259 
	}
}

262 
	$myas£π
(* 
fûíame
, 
löío
, * 
des¸ùti⁄
, 
vÆue
, * 
f‹m©
, ...)

264 ++
ã°s
;

265 i‡(!
vÆue
)

267 
va_li°
 
¨gs
;

269 ++
Áûuªs
;

270 
	`MyLog
(
LOGA_INFO
, "As£πi⁄ faûed, fûê%s,Üöê%d, des¸ùti⁄: %s\n", 
fûíame
, 
löío
, 
des¸ùti⁄
);

272 
	`va_°¨t
(
¨gs
, 
f‹m©
);

273 
	`v¥ötf
(
f‹m©
, 
¨gs
);

274 
	`va_íd
(
¨gs
);

276 
cur_ouçut
 +
	`•rötf
(cur_output, "<failureÅype=\"%s\">file %s,Üine %d </failure>\n",

277 
des¸ùti⁄
, 
fûíame
, 
löío
);

280 
	`MyLog
(
LOGA_DEBUG
, "As£πi⁄ suc˚eded, fûê%s,Üöê%d, des¸ùti⁄: %s", 
fûíame
, 
löío
, 
des¸ùti⁄
);

281 
	}
}

289 
	$ã°1_£ndAndRe˚ive
(
MQTTClõ¡
* 
c
, 
qos
, * 
ã°_t›ic
)

291 
MQTTClõ¡_dñivîyTokí
 
dt
;

292 
MQTTClõ¡_mesßge
 
pubmsg
 = 
MQTTClõ¡_mesßge_öôülizî
;

293 
MQTTClõ¡_mesßge
* 
m
 = 
NULL
;

294 * 
t›icName
 = 
NULL
;

295 
t›icLí
;

296 
i
 = 0;

297 
ôî©i⁄s
 = 50;

298 
rc
;

300 
	`MyLog
(
LOGA_DEBUG
, "%d mesßge†© QoS %d", 
ôî©i⁄s
, 
qos
);

301 
pubmsg
.
∑ylﬂd
 = "a muchÜonger messageÅhat we can shortenÅoÅheÉxtentÅhat weÇeedÅoÖayload upÅo 11";

302 
pubmsg
.
∑ylﬂdÀn
 = 11;

303 
pubmsg
.
qos
 = qos;

304 
pubmsg
.
ªèöed
 = 0;

306 
i
 = 0; i< 
ôî©i⁄s
; ++i)

308 i‡(
i
 % 10 == 0)

309 
rc
 = 
	`MQTTClõ¡_publish
(
c
, 
ã°_t›ic
, 
pubmsg
.
∑ylﬂdÀn
,Öubmsg.
∑ylﬂd
,Öubmsg.
qos
,Öubmsg.
ªèöed
, &
dt
);

311 
rc
 = 
	`MQTTClõ¡_publishMesßge
(
c
, 
ã°_t›ic
, &
pubmsg
, &
dt
);

312 
	`as£π
("GoodÑ¯‰omÖublish", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

314 i‡(
qos
 > 0)

316 
rc
 = 
	`MQTTClõ¡_waôF‹Com∂ëi⁄
(
c
, 
dt
, 5000L);

317 
	`as£π
("GoodÑ¯‰om waôf‹Com∂ëi⁄", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

320 
rc
 = 
	`MQTTClõ¡_ª˚ive
(
c
, &
t›icName
, &
t›icLí
, &
m
, 5000);

321 
	`as£π
("GoodÑ¯‰omÑe˚ive", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

322 i‡(
t›icName
)

324 
	`MyLog
(
LOGA_DEBUG
, "Mesßgêª˚ived o¿t›i¯%†i†%.*s", 
t›icName
, 
m
->
∑ylﬂdÀn
, (*)(m->
∑ylﬂd
));

325 i‡(
pubmsg
.
∑ylﬂdÀn
 !
m
->payloadlen ||

326 
	`memcmp
(
m
->
∑ylﬂd
, 
pubmsg
.∑ylﬂd, m->
∑ylﬂdÀn
) != 0)

328 
Áûuªs
++;

329 
	`MyLog
(
LOGA_INFO
, "Eº‹: wr⁄g d©®-Ñe˚ivedÜígth†%d %d", 
pubmsg
.
∑ylﬂdÀn
, 
m
->payloadlen);

332 
	`MQTTClõ¡_‰ì
(
t›icName
);

333 
	`MQTTClõ¡_‰ìMesßge
(&
m
);

336 
	`¥ötf
("No messageÑeceived withinÅimeoutÖeriod\n");

340 
	`MQTTClõ¡_ª˚ive
(
c
, &
t›icName
, &
t›icLí
, &
m
, 2000);

341 
t›icName
)

343 
	`¥ötf
("Mesßgêª˚ived o¿t›i¯%†i†%.*s.\n", 
t›icName
, 
m
->
∑ylﬂdÀn
, (*)(m->
∑ylﬂd
));

344 
	`MQTTClõ¡_‰ì
(
t›icName
);

345 
	`MQTTClõ¡_‰ìMesßge
(&
m
);

346 
	`MQTTClõ¡_ª˚ive
(
c
, &
t›icName
, &
t›icLí
, &
m
, 2000);

348 
	}
}

351 
	$ã°1
(
O±i⁄s
 
›ti⁄s
)

353 
subsqos
 = 2;

354 
MQTTClõ¡
 
c
;

355 
MQTTClõ¡_c⁄√˘O±i⁄s
 
›ts
 = 
MQTTClõ¡_c⁄√˘O±i⁄s_öôülizî
;

356 
MQTTClõ¡_wûlO±i⁄s
 
w›ts
 = 
MQTTClõ¡_wûlO±i⁄s_öôülizî
;

357 
rc
 = 0;

358 * 
ã°_t›ic
 = "C clientÅest1";

360 
	`Ârötf
(
xml
, "<testcase classname=\"test1\"Çame=\"singleÅhreaded client usingÑeceive\"");

361 
globÆ_°¨t_time
 = 
	`°¨t_˛ock
();

362 
Áûuªs
 = 0;

363 
	`MyLog
(
LOGA_INFO
, "StartingÅest 1 - singleÅhreaded client usingÑeceive");

365 
rc
 = 
	`MQTTClõ¡_¸óã
(&
c
, 
›ti⁄s
.
c⁄√˘i⁄
, "single_threaded_test",

366 
MQTTCLIENT_PERSISTENCE_DEFAULT
, 
NULL
);

367 
	`as£π
("goodÑ¯‰om cª©e", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d\n",Ñc);

368 i‡(
rc
 !
MQTTCLIENT_SUCCESS
)

370 
	`MQTTClõ¡_de°roy
(&
c
);

371 
exô
;

374 
›ts
.
kìpAliveI¡îvÆ
 = 20;

375 
›ts
.
˛ón£ssi⁄
 = 1;

376 
›ts
.
u£∫ame
 = "testuser";

377 
›ts
.
∑ssw‹d
 = "testpassword";

378 
›ts
.
MQTTVîsi⁄
 = 
›ti⁄s
.MQTTVersion;

379 i‡(
›ti⁄s
.
hac⁄√˘i⁄s
 !
NULL
)

381 
›ts
.
£rvîURIs
 = 
›ti⁄s
.
hac⁄√˘i⁄s
;

382 
›ts
.
£rvîURIcou¡
 = 
›ti⁄s
.
hacou¡
;

385 
›ts
.
wûl
 = &
w›ts
;

386 
›ts
.
wûl
->
mesßge
 = "will message";

387 
›ts
.
wûl
->
qos
 = 1;

388 
›ts
.
wûl
->
ªèöed
 = 0;

389 
›ts
.
wûl
->
t›icName
 = "willÅopic";

390 
›ts
.
wûl
 = 
NULL
;

392 
	`MyLog
(
LOGA_DEBUG
, "Connecting");

393 
rc
 = 
	`MQTTClõ¡_c⁄√˘
(
c
, &
›ts
);

394 
	`as£π
("GoodÑ¯‰om c⁄√˘", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

395 i‡(
rc
 !
MQTTCLIENT_SUCCESS
)

396 
exô
;

398 
rc
 = 
	`MQTTClõ¡_subs¸ibe
(
c
, 
ã°_t›ic
, 
subsqos
);

399 
	`as£π
("GoodÑ¯‰om subs¸ibe", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

401 
	`ã°1_£ndAndRe˚ive
(
c
, 0, 
ã°_t›ic
);

402 
	`ã°1_£ndAndRe˚ive
(
c
, 1, 
ã°_t›ic
);

403 
	`ã°1_£ndAndRe˚ive
(
c
, 2, 
ã°_t›ic
);

405 
	`MyLog
(
LOGA_DEBUG
, "Stopping\n");

407 
rc
 = 
	`MQTTClõ¡_unsubs¸ibe
(
c
, 
ã°_t›ic
);

408 
	`as£π
("Unsubs¸ibêsuc˚ssful", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

409 
rc
 = 
	`MQTTClõ¡_disc⁄√˘
(
c
, 0);

410 
	`as£π
("Disc⁄√˘ suc˚ssful", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

413 
rc
 = 
	`MQTTClõ¡_c⁄√˘
(
c
, &
›ts
);

414 
	`as£π
("C⁄√˘ suc˚ssful", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

415 
rc
 = 
	`MQTTClõ¡_disc⁄√˘
(
c
, 0);

416 
	`as£π
("Disc⁄√˘ suc˚ssful", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

418 
	`MQTTClõ¡_de°roy
(&
c
);

420 
exô
:

421 
	`MyLog
(
LOGA_INFO
, "TEST1:Åest %s. %dÅestsÑun, %d failures.",

422 (
Áûuªs
 =0Ë? "∑s£d" : "Áûed", 
ã°s
, failures);

423 
	`wrôe_ã°_ªsu…
();

424  
Áûuªs
;

425 
	}
}

433 vﬁ©ûê
	gã°2_¨rivedcou¡
 = 0;

434 
	gã°2_dñivîyCom∂ëed
 = 0;

435 
MQTTClõ¡_mesßge
 
	gã°2_pubmsg
 = 
MQTTClõ¡_mesßge_öôülizî
;

437 
	$ã°2_dñivîyCom∂ëe
(* 
c⁄ãxt
, 
MQTTClõ¡_dñivîyTokí
 
dt
)

439 ++
ã°2_dñivîyCom∂ëed
;

440 
	}
}

442 
	$ã°2_mesßgeAºived
(* 
c⁄ãxt
, * 
t›icName
, 
t›icLí
, 
MQTTClõ¡_mesßge
* 
m
)

444 ++
ã°2_¨rivedcou¡
;

445 
	`MyLog
(
LOGA_DEBUG
, "Callback: %d messageÑeceived onÅopic %s is %.*s.",

446 
ã°2_¨rivedcou¡
, 
t›icName
, 
m
->
∑ylﬂdÀn
, (*)(m->
∑ylﬂd
));

447 i‡(
ã°2_pubmsg
.
∑ylﬂdÀn
 !
m
->payloadlen ||

448 
	`memcmp
(
m
->
∑ylﬂd
, 
ã°2_pubmsg
.∑ylﬂd, m->
∑ylﬂdÀn
) != 0)

450 
Áûuªs
++;

451 
	`MyLog
(
LOGA_INFO
, "Eº‹: wr⁄g d©®ª˚ivedÜígth†%d %d\n", 
ã°2_pubmsg
.
∑ylﬂdÀn
, 
m
->payloadlen);

453 
	`MQTTClõ¡_‰ì
(
t›icName
);

454 
	`MQTTClõ¡_‰ìMesßge
(&
m
);

456 
	}
}

459 
	$ã°2_£ndAndRe˚ive
(
MQTTClõ¡
* 
c
, 
qos
, * 
ã°_t›ic
)

461 
MQTTClõ¡_dñivîyTokí
 
dt
;

462 
i
 = 0;

463 
ôî©i⁄s
 = 50;

464 
rc
 = 0;

465 
waô_£c⁄ds
 = 0;

467 
ã°2_dñivîyCom∂ëed
 = 0;

469 
	`MyLog
(
LOGA_INFO
, "%d mesßge†© QoS %d", 
ôî©i⁄s
, 
qos
);

470 
ã°2_pubmsg
.
∑ylﬂd
 = "a muchÜonger messageÅhat we can shortenÅoÅheÉxtentÅhat weÇeedÅo";

471 
ã°2_pubmsg
.
∑ylﬂdÀn
 = 27;

472 
ã°2_pubmsg
.
qos
 = qos;

473 
ã°2_pubmsg
.
ªèöed
 = 0;

475 
i
 = 1; i <
ôî©i⁄s
; ++i)

477 i‡(
i
 % 10 == 0)

478 
rc
 = 
	`MQTTClõ¡_publish
(
c
, 
ã°_t›ic
, 
ã°2_pubmsg
.
∑ylﬂdÀn
,Åe°2_pubmsg.
∑ylﬂd
,

479 
ã°2_pubmsg
.
qos
,Åe°2_pubmsg.
ªèöed
, 
NULL
);

481 
rc
 = 
	`MQTTClõ¡_publishMesßge
(
c
, 
ã°_t›ic
, &
ã°2_pubmsg
, &
dt
);

482 
	`as£π
("GoodÑ¯‰omÖublish", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

484 #i‡
	`deföed
(
WIN32
)

485 
	`SÀï
(100);

487 
	`u¶ìp
(100000L);

490 
waô_£c⁄ds
 = 10;

491 (
ã°2_¨rivedcou¡
 < 
i
Ë&& (
waô_£c⁄ds
-- > 0))

493 
	`MyLog
(
LOGA_DEBUG
, "Aºived %d cou¡ %d", 
ã°2_¨rivedcou¡
, 
i
);

494 #i‡
	`deföed
(
WIN32
)

495 
	`SÀï
(1000);

497 
	`u¶ìp
(1000000L);

500 
	`as£π
("MesßgêAºived", 
waô_£c⁄ds
 > 0,

501 "Timêouàwaôög f‹ mesßgê%d\n", 
i
 );

503 i‡(
qos
 > 0)

509 
waô_£c⁄ds
 = 10;

510 (
ã°2_dñivîyCom∂ëed
 < 
ôî©i⁄s
Ë&& (
waô_£c⁄ds
-- > 0))

512 
	`MyLog
(
LOGA_DEBUG
, "Dñivîy Com∂ëed %d cou¡ %d", 
ã°2_dñivîyCom∂ëed
, 
i
);

513 #i‡
	`deföed
(
WIN32
)

514 
	`SÀï
(1000);

516 
	`u¶ìp
(1000000L);

519 
	`as£π
("AŒ Dñivîõ†Com∂ëe", 
waô_£c⁄ds
 > 0,

521 
ã°2_dñivîyCom∂ëed
);

523 
	}
}

526 
	$ã°2
(
O±i⁄s
 
›ti⁄s
)

528 * 
ã°«me
 = "test2";

529 
subsqos
 = 2;

531 
MQTTClõ¡
 
c
;

532 
MQTTClõ¡_c⁄√˘O±i⁄s
 
›ts
 = 
MQTTClõ¡_c⁄√˘O±i⁄s_öôülizî
;

533 
rc
 = 0;

534 * 
ã°_t›ic
 = "C clientÅest2";

536 
	`Ârötf
(
xml
, "<testcase classname=\"test1\"Çame=\"multi-threaded client using callbacks\"");

537 
	`MyLog
(
LOGA_INFO
, "StartingÅest 2 - multi-threaded client using callbacks");

538 
globÆ_°¨t_time
 = 
	`°¨t_˛ock
();

539 
Áûuªs
 = 0;

541 
	`MQTTClõ¡_¸óã
(&
c
, 
›ti⁄s
.
c⁄√˘i⁄
, "mu…i_thªaded_ßm∂e", 
MQTTCLIENT_PERSISTENCE_DEFAULT
, 
NULL
);

543 
›ts
.
kìpAliveI¡îvÆ
 = 20;

544 
›ts
.
˛ón£ssi⁄
 = 1;

545 
›ts
.
MQTTVîsi⁄
 = 
›ti⁄s
.MQTTVersion;

546 i‡(
›ti⁄s
.
hac⁄√˘i⁄s
 !
NULL
)

548 
›ts
.
£rvîURIs
 = 
›ti⁄s
.
hac⁄√˘i⁄s
;

549 
›ts
.
£rvîURIcou¡
 = 
›ti⁄s
.
hacou¡
;

552 
rc
 = 
	`MQTTClõ¡_£tCÆlbacks
(
c
, 
NULL
, NULL, 
ã°2_mesßgeAºived
, 
ã°2_dñivîyCom∂ëe
);

553 
	`as£π
("GoodÑ¯‰om sëCÆlbacks", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

555 
	`MyLog
(
LOGA_DEBUG
, "Connecting");

556 
rc
 = 
	`MQTTClõ¡_c⁄√˘
(
c
, &
›ts
);

557 
	`as£π
("GoodÑ¯‰om c⁄√˘", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

558 i‡(
rc
 !
MQTTCLIENT_SUCCESS
)

559 
exô
;

561 
rc
 = 
	`MQTTClõ¡_subs¸ibe
(
c
, 
ã°_t›ic
, 
subsqos
);

562 
	`as£π
("GoodÑ¯‰om subs¸ibe", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

564 
	`ã°2_£ndAndRe˚ive
(
c
, 0, 
ã°_t›ic
);

565 
	`ã°2_£ndAndRe˚ive
(
c
, 1, 
ã°_t›ic
);

566 
	`ã°2_£ndAndRe˚ive
(
c
, 2, 
ã°_t›ic
);

568 
	`MyLog
(
LOGA_DEBUG
, "Stopping");

570 
rc
 = 
	`MQTTClõ¡_unsubs¸ibe
(
c
, 
ã°_t›ic
);

571 
	`as£π
("Unsubs¸ibêsuc˚ssful", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

572 
rc
 = 
	`MQTTClõ¡_disc⁄√˘
(
c
, 0);

573 
	`as£π
("Disc⁄√˘ suc˚ssful", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

575 
	`MQTTClõ¡_de°roy
(&
c
);

577 
exô
:

578 
	`MyLog
(
LOGA_INFO
, "%s:Åest %s. %dÅestsÑun, %d failures.",

579 (
Áûuªs
 =0Ë? "∑s£d" : "Áûed", 
ã°«me
, 
ã°s
, failures);

580 
	`wrôe_ã°_ªsu…
();

581  
Áûuªs
;

582 
	}
}

599 
	$ã°3
(
O±i⁄s
 
›ti⁄s
)

601 * 
ã°«me
 = "test3";

602 
rc
;

603 
MQTTClõ¡
 
c
;

604 
MQTTClõ¡_c⁄√˘O±i⁄s
 
›ts
 = 
MQTTClõ¡_c⁄√˘O±i⁄s_öôülizî
;

605 
MQTTClõ¡_wûlO±i⁄s
 
w›ts
 = 
MQTTClõ¡_wûlO±i⁄s_öôülizî
;

607 
	`Ârötf
(
xml
, "<testcase classname=\"test1\"Çame=\"connackÑeturn codes\"");

608 
globÆ_°¨t_time
 = 
	`°¨t_˛ock
();

609 
Áûuªs
 = 0;

610 
	`MyLog
(
LOGA_INFO
, "StartingÅest 3 - connackÑeturn codes");

614 
rc
 = 
	`MQTTClõ¡_¸óã
(&
c
, 
›ti⁄s
.
c⁄√˘i⁄
, "client_ID_too_long_for_MQTT_protocol_version_3",

615 
MQTTCLIENT_PERSISTENCE_NONE
, 
NULL
);

616 
	`as£π
("goodÑ¯‰om cª©e", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d\n",Ñc);

617 
rc
 = 
	`MQTTClõ¡_c⁄√˘
(
c
, &
›ts
);

618 
	`as£π
("idítifõ∏ªje˘ed", 
rc
 == 2, "rc was %d\n",Ñc);

619 
	`MQTTClõ¡_de°roy
(&
c
);

622 
rc
 = 
	`MQTTClõ¡_¸óã
(&
c
, 
›ti⁄s
.
c⁄√˘i⁄
, "ThêC Clõ¡", 
MQTTCLIENT_PERSISTENCE_NONE
, 
NULL
);

623 
	`as£π
("goodÑ¯‰om cª©e", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d\n",Ñc);

625 
rc
 = 
	`MQTTClõ¡_c⁄√˘
(
c
, &
›ts
);

626 
	`as£π
("brokî u«vaûabÀ", 
rc
 == 3, "rc was %d\n",Ñc);

629 
›ts
.
u£∫ame
 = "Admin";

630 
›ts
.
∑ssw‹d
 = "fred";

631 
rc
 = 
	`MQTTClõ¡_c⁄√˘
(
c
, &
›ts
);

632 
	`as£π
("Bad u£∏«mê‹Öassw‹d", 
rc
 == 4, "rc was %d\n",Ñc);

636 
›ts
.
u£∫ame
 = "Admin";

637 
›ts
.
∑ssw‹d
 = "Admin";

643 
rc
 = 
	`MQTTClõ¡_c⁄√˘
(
c
, &
›ts
);

648 
›ts
.
u£∫ame
 = "Admin";

649 
›ts
.
∑ssw‹d
 = "Admin";

650 
›ts
.
wûl
 = 
NULL
;

651 
rc
 = 
	`MQTTClõ¡_c⁄√˘
(
c
, &
›ts
);

652 
	`as£π
("suc˚ssfu»c⁄√˘i⁄", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d\n",Ñc);

653 
	`MQTTClõ¡_disc⁄√˘
(
c
, 0);

654 
	`MQTTClõ¡_de°roy
(&
c
);

658 
	`MyLog
(
LOGA_INFO
, "%s:Åest %s. %dÅestsÑun, %d failures.",

659 (
Áûuªs
 =0Ë? "∑s£d" : "Áûed", 
ã°«me
, 
ã°s
, failures);

660 
	`wrôe_ã°_ªsu…
();

661  
Áûuªs
;

662 
	}
}

671 
	$ã°4_run
(
qos
)

673 * 
ã°«me
 = "test 4";

674 * 
t›ic
 = "PersistenceÅest 1";

675 
subsqos
 = 2;

676 
MQTTClõ¡
 
c
;

677 
MQTTClõ¡_c⁄√˘O±i⁄s
 
›ts
 = 
MQTTClõ¡_c⁄√˘O±i⁄s_öôülizî
;

678 
MQTTClõ¡_mesßge
* 
m
 = 
NULL
;

679 * 
t›icName
 = 
NULL
;

680 
t›icLí
;

681 
MQTTClõ¡_dñivîyTokí
* 
tokís
 = 
NULL
;

682 
mytokí
 = -99;

683 
buf„r
[100];

684 
cou¡
 = 3;

685 
i
, 
rc
;

687 
Áûuªs
 = 0;

688 
	`MyLog
(
LOGA_INFO
, "SèπögÅe° 4 -Öîsi°í˚, qo†%d", 
qos
);

690 
	`MQTTClõ¡_¸óã
(&
c
, 
›ti⁄s
.
c⁄√˘i⁄
, "xr˘e°1_ã°_4", 
MQTTCLIENT_PERSISTENCE_DEFAULT
, 
NULL
);

692 
›ts
.
kìpAliveI¡îvÆ
 = 20;

693 
›ts
.
ªlübÀ
 = 0;

694 
›ts
.
MQTTVîsi⁄
 = 
›ti⁄s
.MQTTVersion;

695 i‡(
›ti⁄s
.
hac⁄√˘i⁄s
 !
NULL
)

697 
›ts
.
£rvîURIs
 = 
›ti⁄s
.
hac⁄√˘i⁄s
;

698 
›ts
.
£rvîURIcou¡
 = 
›ti⁄s
.
hacou¡
;

701 
	`MyLog
(
LOGA_DEBUG
, "Cleanup by connecting clean session\n");

702 
›ts
.
˛ón£ssi⁄
 = 1;

703 i‡((
rc
 = 
	`MQTTClõ¡_c⁄√˘
(
c
, &
›ts
)) != 0)

705 
	`as£π
("GoodÑ¯‰om c⁄√˘", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

708 
›ts
.
˛ón£ssi⁄
 = 0;

709 
	`MQTTClõ¡_disc⁄√˘
(
c
, 0);

711 
	`MyLog
(
LOGA_DEBUG
, "Connecting\n");

712 i‡((
rc
 = 
	`MQTTClõ¡_c⁄√˘
(
c
, &
›ts
)) != 0)

714 
	`as£π
("GoodÑ¯‰om c⁄√˘", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

719 
rc
 = 
	`MQTTClõ¡_subs¸ibe
(
c
, 
t›ic
, 
subsqos
);

720 
	`as£π
("GoodÑ¯‰om subs¸ibe", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

723 
i
 = 0; i < 
cou¡
; ++i)

725 
	`•rötf
(
buf„r
, "Mesßgê£quí˚Çÿ%d", 
i
);

726 
rc
 = 
	`MQTTClõ¡_publish
(
c
, 
t›ic
, 10, 
buf„r
, 
qos
, 0, 
NULL
);

727 
	`as£π
("GoodÑ¯‰omÖublish", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

731 
	`MQTTClõ¡_disc⁄√˘
(
c
, 0);

733 
rc
 = 
	`MQTTClõ¡_gëPídögDñivîyTokís
(
c
, &
tokís
);

734 
	`as£π
("gëPídögDñivîyTokí†r¯=0", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

736 
	`as£π
("should gë somêtokí†back", 
tokís
 !
NULL
, "tokens was %p",Åokens);

737 i‡(
tokís
)

739 
i
 = 0;

741 
tokís
[
i
] != -1)

742 
	`MyLog
(
LOGA_DEBUG
, "Pídög dñivîyÅokí %d", 
tokís
[
i
++]);

743 
	`MQTTClõ¡_‰ì
(
tokís
);

744 
	`as£π1
("nÿo‡tokí†should bêcou¡", 
i
 =
cou¡
, "no ofÅokens %d count %d", i, count);

745 
mytokí
 = 
tokís
[0];

748 
	`MQTTClõ¡_de°roy
(&
c
);

750 
	`MQTTClõ¡_¸óã
(&
c
, 
›ti⁄s
.
c⁄√˘i⁄
, "xr˘e°1_ã°_4", 
MQTTCLIENT_PERSISTENCE_DEFAULT
, 
NULL
);

752 
rc
 = 
	`MQTTClõ¡_gëPídögDñivîyTokís
(
c
, &
tokís
);

753 
	`as£π
("gëPídögDñivîyTokí†r¯=0", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

755 
	`as£π
("should gë somêtokí†back", 
tokís
 !
NULL
, "tokens was %p",Åokens);

756 i‡(
tokís
)

758 
i
 = 0;

759 
tokís
[
i
] != -1)

760 
	`MyLog
(
LOGA_DEBUG
, "Pídög dñivîyÅokí %d", 
tokís
[
i
++]);

761 
	`MQTTClõ¡_‰ì
(
tokís
);

762 
	`as£π1
("nÿo‡tokí†should bêcou¡", 
i
 =
cou¡
, "no ofÅokens %d count %d", i, count);

765 
	`MyLog
(
LOGA_DEBUG
, "Reconnecting");

766 i‡(
	`MQTTClõ¡_c⁄√˘
(
c
, &
›ts
) != 0)

768 
	`as£π
("GoodÑ¯‰om c⁄√˘", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

772 
i
 = 0; i < 
cou¡
; ++i)

774 
dup
 = 0;

777 
dup
 = 0;

778 
	`MQTTClõ¡_ª˚ive
(
c
, &
t›icName
, &
t›icLí
, &
m
, 1000);

779 i‡(
m
 && m->
dup
)

781 
	`as£π
("Nÿdu∂iˇã†should bêª˚ived f‹ qo†2", 
qos
 == 1, "qos is %d", qos);

782 
	`MyLog
(
LOGA_DEBUG
, "Du∂iˇã mesßgêid %d", 
m
->
msgid
);

783 
	`MQTTClõ¡_‰ìMesßge
(&
m
);

784 
	`MQTTClõ¡_‰ì
(
t›icName
);

785 
dup
 = 1;

787 } 
dup
 == 1);

788 
	`as£π
("should gëá mesßge", 
m
 !
NULL
, "m was %p", m);

789 i‡(
m
)

791 
	`MyLog
(
LOGA_DEBUG
, "Re˚ived mesßgêid %d", 
m
->
msgid
);

792 
	`as£π
("t›icNamêi†c‹ª˘", 
	`°rcmp
(
t›icName
, 
t›ic
) == 0, "topicName is %s",ÅopicName);

793 
	`MQTTClõ¡_‰ìMesßge
(&
m
);

794 
	`MQTTClõ¡_‰ì
(
t›icName
);

798 
	`MQTTClõ¡_yõld
();

800 
rc
 = 
	`MQTTClõ¡_gëPídögDñivîyTokís
(
c
, &
tokís
);

801 
	`as£π
("gëPídögDñivîyTokí†r¯=0", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

802 
	`as£π
("should gëÇÿtokí†back", 
tokís
 =
NULL
, "tokens was %p",Åokens);

804 
	`MQTTClõ¡_disc⁄√˘
(
c
, 0);

806 
	`MQTTClõ¡_de°roy
(&
c
);

809 
	`MyLog
(
LOGA_INFO
, "%s:Åest %s. %dÅestsÑun, %d failures.",

810 (
Áûuªs
 =0Ë? "∑s£d" : "Áûed", 
ã°«me
, 
ã°s
, failures);

812  
Áûuªs
;

813 
	}
}

816 
	$ã°4
(
O±i⁄s
 
›ti⁄s
)

818 
rc
 = 0;

819 
	`Ârötf
(
xml
, "<testcase classname=\"test1\"Çame=\"persistence\"");

820 
globÆ_°¨t_time
 = 
	`°¨t_˛ock
();

821 
rc
 = 
	`ã°4_run
(1) +Åest4_run(2);

822 
	`Ârötf
(
xml
, "Åime=\"%ld\" >\n", 
	`ñ≠£d
(
globÆ_°¨t_time
) / 1000);

823 i‡(
cur_ouçut
 !
ouçut
)

825 
	`Ârötf
(
xml
, "%s", 
ouçut
);

826 
cur_ouçut
 = 
ouçut
;

828 
	`Ârötf
(
xml
, "</testcase>\n");

829  
rc
;

830 
	}
}

838 
	$ã°5
(
O±i⁄s
 
›ti⁄s
)

840 * 
ã°«me
 = "test 5";

843 * 
t›ic
 = "PersistenceÅest 2";

844 
subsqos
 = 2;

845 
MQTTClõ¡
 
c
;

846 
MQTTClõ¡_c⁄√˘O±i⁄s
 
›ts
 = 
MQTTClõ¡_c⁄√˘O±i⁄s_öôülizî
;

849 
MQTTClõ¡_dñivîyTokí
* 
tokís
 = 
NULL
;

851 
buf„r
[100];

852 
cou¡
 = 5;

853 
i
, 
rc
;

855 
	`Ârötf
(
xml
, "<testcase classname=\"test1\"Çame=\"disconnect with quiesceÅimeout shouldállowÉxchangesÅo complete\"");

856 
globÆ_°¨t_time
 = 
	`°¨t_˛ock
();

857 
Áûuªs
 = 0;

858 
	`MyLog
(
LOGA_INFO
, "StartingÅest 5 - disconnect with quiesceÅimeout shouldállowÉxchangesÅo complete");

860 
	`MQTTClõ¡_¸óã
(&
c
, 
›ti⁄s
.
c⁄√˘i⁄
, "xr˘e°1_ã°_5", 
MQTTCLIENT_PERSISTENCE_DEFAULT
, 
NULL
);

862 
›ts
.
kìpAliveI¡îvÆ
 = 20;

863 
›ts
.
˛ón£ssi⁄
 = 0;

864 
›ts
.
ªlübÀ
 = 0;

865 
›ts
.
MQTTVîsi⁄
 = 
›ti⁄s
.MQTTVersion;

866 i‡(
›ti⁄s
.
hac⁄√˘i⁄s
 !
NULL
)

868 
›ts
.
£rvîURIs
 = 
›ti⁄s
.
hac⁄√˘i⁄s
;

869 
›ts
.
£rvîURIcou¡
 = 
›ti⁄s
.
hacou¡
;

872 
	`MyLog
(
LOGA_DEBUG
, "Connecting");

873 i‡((
rc
 = 
	`MQTTClõ¡_c⁄√˘
(
c
, &
›ts
)) != 0)

875 
	`as£π
("GoodÑ¯‰om c⁄√˘", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

876 
	`MQTTClõ¡_de°roy
(&
c
);

877 
exô
;

880 
rc
 = 
	`MQTTClõ¡_subs¸ibe
(
c
, 
t›ic
, 
subsqos
);

881 
	`as£π
("GoodÑ¯‰om subs¸ibe", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

883 
i
 = 0; i < 
cou¡
; ++i)

885 
	`•rötf
(
buf„r
, "Mesßgê£quí˚Çÿ%d", 
i
);

886 
rc
 = 
	`MQTTClõ¡_publish
(
c
, 
t›ic
, 10, 
buf„r
, 1, 0, 
NULL
);

887 
	`as£π
("GoodÑ¯‰omÖublish", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

890 
	`MQTTClõ¡_disc⁄√˘
(
c
, 1000);

891 
	`MyLog
(
LOGA_DEBUG
, "Disconnected");

893 
rc
 = 
	`MQTTClõ¡_gëPídögDñivîyTokís
(
c
, &
tokís
);

894 
	`as£π
("gëPídögDñivîyTokí†r¯=0", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

896 
	`as£π
("should gëÇÿtokí†back", 
tokís
 =
NULL
, "tokens was %p",Åokens);

898 
	`MQTTClõ¡_de°roy
(&
c
);

900 
exô
:

901 
	`MyLog
(
LOGA_INFO
, "%s:Åest %s. %dÅestsÑun, %d failures.",

902 (
Áûuªs
 =0Ë? "∑s£d" : "Áûed", 
ã°«me
, 
ã°s
, failures);

903 
	`wrôe_ã°_ªsu…
();

904  
Áûuªs
;

905 
	}
}

913 
MQTTClõ¡
 
	gã°6_c1
, 
	gã°6_c2
;

914 vﬁ©ûê
	gã°6_wûl_mesßge_¨rived
 = 0;

915 vﬁ©ûê
	gã°6_c⁄√˘i⁄_lo°_ˇŒed
 = 0;

917 
	$ã°6_c⁄√˘i⁄Lo°
(* 
c⁄ãxt
, * 
ˇu£
)

919 
MQTTClõ¡
 
c
 = (MQTTClõ¡)
c⁄ãxt
;

920 
	`¥ötf
("%†-> CÆlback: c⁄√˘i⁄Üo°\n", (
c
 =
ã°6_c1
) ? "Client-1" : "Client-2");

921 
ã°6_c⁄√˘i⁄_lo°_ˇŒed
 = 1;

922 
	}
}

924 
	$ã°6_dñivîyCom∂ëe
(* 
c⁄ãxt
, 
MQTTClõ¡_dñivîyTokí
 
tokí
)

926 
	`¥ötf
("Clõ¡-2 -> CÆlback:Öublish com∂ëêf‹Åokí %d\n", 
tokí
);

927 
	}
}

929 * 
	gã°6_wûl_t›ic
 = "C Test 2: willÅopic";

930 * 
	gã°6_wûl_mesßge
 = "will message from Client-1";

932 
	$ã°6_mesßgeAºived
(* 
c⁄ãxt
, * 
t›icName
, 
t›icLí
, 
MQTTClõ¡_mesßge
* 
m
)

934 
MQTTClõ¡
 
c
 = (MQTTClõ¡)
c⁄ãxt
;

935 
	`¥ötf
("%s -> Callback: messageÑeceived onÅopic '%s' is '%.*s'.\n",

936 (
c
 =
ã°6_c1
Ë? "Clõ¡-1" : "Clõ¡-2", 
t›icName
, 
m
->
∑ylﬂdÀn
, (*)(m->
∑ylﬂd
));

937 i‡(
c
 =
ã°6_c2
 && 
	`°rcmp
(
t›icName
, 
ã°6_wûl_t›ic
Ë=0 && 
	`memcmp
(
m
->
∑ylﬂd
, 
ã°6_wûl_mesßge
, m->
∑ylﬂdÀn
) == 0)

938 
ã°6_wûl_mesßge_¨rived
 = 1;

939 
	`MQTTClõ¡_‰ì
(
t›icName
);

940 
	`MQTTClõ¡_‰ìMesßge
(&
m
);

942 
	}
}

945 
	$ã°6_sockë_îr‹
(* 
aSåög
, 
sock
)

947 #i‡
	`deföed
(
WIN32
)

948 
î∫o
;

951 #i‡
	`deföed
(
WIN32
)

952 
î∫o
 = 
	`WSAGëLa°Eº‹
();

954 i‡(
î∫o
 !
EINTR
 &&Éºnÿ!
EAGAIN
 &&Éºnÿ!
EINPROGRESS
 &&Éºnÿ!
EWOULDBLOCK
)

956 i‡(
	`°rcmp
(
aSåög
, "shutdown"Ë!0 || (
î∫o
 !
ENOTCONN
 &&Éºnÿ!
ECONNRESET
))

957 
	`¥ötf
("SockëÉº‹ %d i¿%†f‹ sockë %d", 
î∫o
, 
aSåög
, 
sock
);

959  
î∫o
;

960 
	}
}

962 #i‡!
deföed
(
SOCKET_ERROR
)

963 
	#SOCKET_ERROR
 -1

	)

966 
	$ã°6_sockë_˛o£
(
sockë
)

968 
rc
;

970 #i‡
	`deföed
(
WIN32
)

971 i‡(
	`shutdown
(
sockë
, 
SD_BOTH
Ë=
SOCKET_ERROR
)

972 
	`ã°6_sockë_îr‹
("shutdown", 
sockë
);

973 i‡((
rc
 = 
	`˛o£sockë
(
sockë
)Ë=
SOCKET_ERROR
)

974 
	`ã°6_sockë_îr‹
("˛o£", 
sockë
);

976 i‡(
	`shutdown
(
sockë
, 
SHUT_RDWR
Ë=
SOCKET_ERROR
)

977 
	`ã°6_sockë_îr‹
("shutdown", 
sockë
);

978 i‡((
rc
 = 
	`˛o£
(
sockë
)Ë=
SOCKET_ERROR
)

979 
	`ã°6_sockë_îr‹
("˛o£", 
sockë
);

981  
rc
;

982 
	}
}

986 
	msockë
;

987 
time_t
 
	mœ°C⁄è˘
;

988 #i‡
deföed
(
OPENSSL
)

989 
SSL
* 
	ms¶
;

990 
SSL_CTX
* 
	m˘x
;

992 } 
	t√tw‹kH™dÀs
;

997 * 
	m˛õ¡ID
;

998 * 
	mu£∫ame
;

999 * 
	m∑ssw‹d
;

1000 
	m˛ón£ssi⁄
 : 1;

1001 
	mc⁄√˘ed
 : 1;

1002 
	mgood
 : 1;

1003 
	mpög_out°™dög
 : 1;

1004 
	mc⁄√˘_°©e
 : 4;

1005 
√tw‹kH™dÀs
 
	m√t
;

1007 } 
	tClõ¡s
;

1012 * 
	m£rvîURI
;

1013 
Clõ¡s
* 
	mc
;

1014 
MQTTClõ¡_c⁄√˘i⁄Lo°
* 
	m˛
;

1015 
MQTTClõ¡_mesßgeAºived
* 
	mma
;

1016 
MQTTClõ¡_dñivîyCom∂ëe
* 
	mdc
;

1017 * 
	mc⁄ãxt
;

1019 
	mc⁄√˘_£m
;

1020 
	mrc
;

1021 
	mc⁄«ck_£m
;

1022 
	msuback_£m
;

1023 
	munsuback_£m
;

1024 * 
	m∑ck
;

1025 } 
	tMQTTClõ¡s
;

1028 
	$ã°6
(
O±i⁄s
 
›ti⁄s
)

1030 * 
ã°«me
 = "test6";

1031 
MQTTClõ¡_c⁄√˘O±i⁄s
 
›ts
 = 
MQTTClõ¡_c⁄√˘O±i⁄s_öôülizî
;

1032 
MQTTClõ¡_wûlO±i⁄s
 
w›ts
 = 
MQTTClõ¡_wûlO±i⁄s_öôülizî
;

1033 
MQTTClõ¡_c⁄√˘O±i⁄s
 
›ts2
 = 
MQTTClõ¡_c⁄√˘O±i⁄s_öôülizî
;

1034 
rc
, 
cou¡
;

1035 * 
mqâßs_t›ic
 = "MQTTSASÅopic";

1037 
Áûuªs
 = 0;

1038 
	`MyLog
(
LOGA_INFO
, "StartingÅest 6 - connectionLostánd will messages");

1039 
	`Ârötf
(
xml
, "<testcase classname=\"test1\"Çame=\"connectionLostánd will messages\"");

1040 
globÆ_°¨t_time
 = 
	`°¨t_˛ock
();

1042 
›ts
.
kìpAliveI¡îvÆ
 = 2;

1043 
›ts
.
˛ón£ssi⁄
 = 1;

1044 
›ts
.
MQTTVîsi⁄
 = 
›ti⁄s
.MQTTVersion;

1045 
›ts
.
wûl
 = &
w›ts
;

1046 
›ts
.
wûl
->
mesßge
 = 
ã°6_wûl_mesßge
;

1047 
›ts
.
wûl
->
qos
 = 1;

1048 
›ts
.
wûl
->
ªèöed
 = 0;

1049 
›ts
.
wûl
->
t›icName
 = 
ã°6_wûl_t›ic
;

1050 i‡(
›ti⁄s
.
hac⁄√˘i⁄s
 !
NULL
)

1052 
›ts
.
£rvîURIs
 = 
›ti⁄s
.
hac⁄√˘i⁄s
;

1053 
›ts
.
£rvîURIcou¡
 = 
›ti⁄s
.
hacou¡
;

1057 
rc
 = 
	`MQTTClõ¡_¸óã
(&
ã°6_c1
, 
›ti⁄s
.
c⁄√˘i⁄
, "Clõ¡_1", 
MQTTCLIENT_PERSISTENCE_DEFAULT
, 
NULL
);

1058 
	`as£π
("goodÑ¯‰om cª©e", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d\n",Ñc);

1059 i‡(
rc
 !
MQTTCLIENT_SUCCESS
)

1060 
exô
;

1062 
rc
 = 
	`MQTTClõ¡_£tCÆlbacks
(
ã°6_c1
, (*Èe°6_c1, 
ã°6_c⁄√˘i⁄Lo°
, 
ã°6_mesßgeAºived
, 
ã°6_dñivîyCom∂ëe
);

1063 
	`as£π
("goodÑ¯‰om sëCÆlbacks", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d\n",Ñc);

1064 i‡(
rc
 !
MQTTCLIENT_SUCCESS
)

1065 
exô
;

1068 
rc
 = 
	`MQTTClõ¡_c⁄√˘
(
ã°6_c1
, &
›ts
);

1069 
	`as£π
("goodÑ¯‰om c⁄√˘", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d\n",Ñc);

1070 i‡(
rc
 !
MQTTCLIENT_SUCCESS
)

1071 
exô
;

1074 
rc
 = 
	`MQTTClõ¡_¸óã
(&
ã°6_c2
, 
›ti⁄s
.
c⁄√˘i⁄
, "Clõ¡_2", 
MQTTCLIENT_PERSISTENCE_DEFAULT
, 
NULL
);

1075 
	`as£π
("goodÑ¯‰om cª©e", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d\n",Ñc);

1078 
rc
 = 
	`MQTTClõ¡_£tCÆlbacks
(
ã°6_c2
, (*Èe°6_c2, 
ã°6_c⁄√˘i⁄Lo°
, 
ã°6_mesßgeAºived
, 
ã°6_dñivîyCom∂ëe
);

1079 
	`as£π
("goodÑ¯‰om sëCÆlbacks", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d\n",Ñc);

1082 
›ts2
.
kìpAliveI¡îvÆ
 = 20;

1083 
›ts2
.
˛ón£ssi⁄
 = 1;

1084 
	`MyLog
(
LOGA_INFO
, "Connecting Client_2 ...");

1085 
rc
 = 
	`MQTTClõ¡_c⁄√˘
(
ã°6_c2
, &
›ts2
);

1086 
	`as£π
("GoodÑ¯‰om c⁄√˘", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d\n",Ñc);

1088 
rc
 = 
	`MQTTClõ¡_subs¸ibe
(
ã°6_c2
, 
ã°6_wûl_t›ic
, 2);

1089 
	`as£π
("GoodÑ¯‰om subs¸ibe", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d\n",Ñc);

1094 
	`ã°6_sockë_˛o£
(((
MQTTClõ¡s
*)
ã°6_c1
)->
c
->
√t
.
sockë
);

1096 
	`MyLog
(
LOGA_INFO
, "WaitingÅoÑeceiveÅhe will message");

1097 
cou¡
 = 0;

1098 ++
cou¡
 < 40)

1100 #i‡
	`deföed
(
WIN32
)

1101 
	`SÀï
(1000L);

1103 
	`¶ìp
(1);

1105 i‡(
ã°6_wûl_mesßge_¨rived
 =1 && 
ã°6_c⁄√˘i⁄_lo°_ˇŒed
 == 1)

1108 
	`as£π
("wû»mesßgê¨rived", 
ã°6_wûl_mesßge_¨rived
 == 1,

1109 "wûl_mesßge_¨rived wa†%d\n", 
ã°6_wûl_mesßge_¨rived
);

1110 
	`as£π
("c⁄√˘i⁄Üo° cÆÀd", 
ã°6_c⁄√˘i⁄_lo°_ˇŒed
 == 1,

1111 "c⁄√˘i⁄_lo°_ˇŒed %d\n", 
ã°6_c⁄√˘i⁄_lo°_ˇŒed
);

1113 
rc
 = 
	`MQTTClõ¡_unsubs¸ibe
(
ã°6_c2
, 
ã°6_wûl_t›ic
);

1114 
	`as£π
("GoodÑ¯‰om unsubs¸ibe", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

1116 
rc
 = 
	`MQTTClõ¡_isC⁄√˘ed
(
ã°6_c2
);

1117 
	`as£π
("Clõ¡-2 stû»c⁄√˘ed", 
rc
 == 1, "isconnected is %d",Ñc);

1119 
rc
 = 
	`MQTTClõ¡_isC⁄√˘ed
(
ã°6_c1
);

1120 
	`as£π
("Clõ¡-1ÇŸ c⁄√˘ed", 
rc
 == 0, "isconnected is %d",Ñc);

1125 
	`MQTTClõ¡_de°roy
(&
ã°6_c1
);

1128 
exô
:

1129 
	`MyLog
(
LOGA_INFO
, "%s:Åest %s. %dÅestsÑun, %d failures.\n",

1130 (
Áûuªs
 =0Ë? "∑s£d" : "Áûed", 
ã°«me
, 
ã°s
, failures);

1131 
	`wrôe_ã°_ªsu…
();

1132  
Áûuªs
;

1133 
	}
}

1135 
	$maö
(
¨gc
, ** 
¨gv
)

1137 
rc
 = 0;

1138 (*
ã°s
[])(Ë{
NULL
, 
ã°1
, 
ã°2
, 
ã°3
, 
ã°4
, 
ã°5
, 
ã°6
};

1139 
i
;

1141 
xml
 = 
	`f›í
("TEST-test1.xml", "w");

1142 
	`Ârötf
(
xml
, "<ã°suôê«me=\"ã°1\"Åe°s=\"%d\">\n", ()(
	`ARRAY_SIZE
(
ã°s
) - 1));

1144 
	`£ãnv
("MQTT_C_CLIENT_TRACE", "ON", 1);

1145 
	`£ãnv
("MQTT_C_CLIENT_TRACE_LEVEL", "ERROR", 1);

1147 
	`gë›ts
(
¨gc
, 
¨gv
);

1149 
i
 = 0; i < 
›ti⁄s
.
ôî©i⁄s
; ++i)

1151 i‡(
›ti⁄s
.
ã°_no
 == 0)

1153 
›ti⁄s
.
ã°_no
 = 1; o±i⁄s.ã°_nÿ< 
	`ARRAY_SIZE
(
ã°s
); ++options.test_no)

1154 
rc
 +
ã°s
[
›ti⁄s
.
ã°_no
](options);

1157 
rc
 = 
ã°s
[
›ti⁄s
.
ã°_no
](options);

1160 i‡(
rc
 == 0)

1161 
	`MyLog
(
LOGA_INFO
, "verdictÖass");

1163 
	`MyLog
(
LOGA_INFO
, "verdict fail");

1165 
	`Ârötf
(
xml
, "</testsuite>\n");

1166 
	`f˛o£
(
xml
);

1167  
rc
;

1168 
	}
}

	@paho-c/test/test3.c

23 
	~"MQTTClõ¡.h
"

24 
	~<°rög.h
>

25 
	~<°dlib.h
>

27 #i‡!
deföed
(
_WINDOWS
)

28 
	~<sys/time.h
>

29 
	~<sys/sockë.h
>

30 
	~<uni°d.h
>

31 
	~<î∫o.h
>

33 
	~<wösock2.h
>

34 
	~<ws2t˝ù.h
>

35 
	#MAXHOSTNAMELEN
 256

	)

36 
	#EAGAIN
 
WSAEWOULDBLOCK


	)

37 
	#EINTR
 
WSAEINTR


	)

38 
	#EINPROGRESS
 
WSAEINPROGRESS


	)

39 
	#EWOULDBLOCK
 
WSAEWOULDBLOCK


	)

40 
	#ENOTCONN
 
WSAENOTCONN


	)

41 
	#ECONNRESET
 
WSAECONNRESET


	)

42 
	#¢¥ötf
 
_¢¥ötf


	)

43 
	#£ãnv
(
a
, 
b
, 
c
Ë
	`_puãnv_s
◊, b)

	)

46 #i‡
deföed
(
IOS
)

47 
	gskeytmp
[1024];

48 
	gckeytmp
[1024];

49 
	g≥rsi°í˚St‹e
[1024];

51 * 
	g≥rsi°í˚St‹e
 = 
NULL
;

55 
	~<logaX.h
>

56 
	#MyLog
 
logaLöe


	)

58 
	#LOGA_DEBUG
 0

	)

59 
	#LOGA_INFO
 1

	)

60 
	~<°d¨g.h
>

61 
	~<time.h
>

62 
	~<sys/timeb.h
>

64 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ ◊[0]))

	)

66 
	$ußge
()

68 
	`¥ötf
("Options:\n");

69 
	`¥ötf
("\t--test_no <test_no> - RunÅestÇumber <test_no>\n");

70 
	`¥ötf
("\t--connection <mqtt URL> - ConnectÅo <mqtt URL> forÅests\n");

71 
	`¥ötf
("\t--haconnections \"<mqtt URLs>\" - Use \"<mqtt URLs>\"ásÅheÜist of servers for HAÅests (space separated)\n");

72 
	`¥ötf
("\t--client_key <key_file> - Use <key_file>ásÅhe client certificate for SSLáuthentication\n");

73 
	`¥ötf
("\t--client_key_pass <password> - Use <password>ÅoáccessÅheÖrivate key inÅhe client certificate\n");

74 
	`¥ötf
("\t--client_privatekey <file> - ClientÖrivate key file ifÇot in certificate file\n");

75 
	`¥ötf
("\t--server_key <key_file> - Use <key_file>ásÅheÅrusted certificate for server\n");

76 
	`¥ötf
("\t--verbose - Enable verbose output \n");

77 
	`¥ötf
("\tserver connection URLs should be inÅhe form; (tcp|ssl)://hostname:port\n");

78 
	`¥ötf
("\t--help - This help output\n");

79 
	`exô
(-1);

80 
	}
}

82 
	sO±i⁄s


84 
	mc⁄√˘i⁄
[100];

85 
	mmutuÆ_auth_c⁄√˘i⁄
[100];

86 
	mno˚π_mutuÆ_auth_c⁄√˘i⁄
[100];

87 
	m£rvî_auth_c⁄√˘i⁄
[100];

88 
	m™⁄_c⁄√˘i⁄
[100];

89 ** 
	mhac⁄√˘i⁄s
;

90 
	mhacou¡
;

91 * 
	m˛õ¡_key_fûe
;

92 * 
	m˛õ¡_key_∑ss
;

93 * 
	m£rvî_key_fûe
;

94 * 
	m˛õ¡_¥iv©e_key_fûe
;

95 
	mvîbo£
;

96 
	mã°_no
;

97 } 
	g›ti⁄s
 =

104 
NULL
,

107 
NULL
,

109 
NULL
,

115 * 
	gã°_m≠
[] =

134 
	$gë›ts
(
¨gc
, ** 
¨gv
)

136 
cou¡
 = 1;

138 
cou¡
 < 
¨gc
)

140 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--help") == 0)

141 
	`ußge
();

142 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--test_no") == 0)

144 i‡(++
cou¡
 < 
¨gc
)

146 
i
;

148 
i
 = 1; i < 
	`ARRAY_SIZE
(
ã°_m≠
); ++i)

150 i‡(
	`°rcmp
(
¨gv
[
cou¡
], 
ã°_m≠
[
i
]) == 0)

152 
›ti⁄s
.
ã°_no
 = 
i
;

156 i‡(
›ti⁄s
.
ã°_no
 == 0)

157 
›ti⁄s
.
ã°_no
 = 
	`©oi
(
¨gv
[
cou¡
]);

161 
	`ußge
();

163 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--hostname") == 0)

165 i‡(++
cou¡
 < 
¨gc
)

167 
	`•rötf
(
›ti⁄s
.
c⁄√˘i⁄
, "s¶://%s:18883", 
¨gv
[
cou¡
]);

168 
	`¥ötf
("Sëtög c⁄√˘i⁄Åÿ%s\n", 
›ti⁄s
.
c⁄√˘i⁄
);

169 
	`•rötf
(
›ti⁄s
.
mutuÆ_auth_c⁄√˘i⁄
, "s¶://%s:18884", 
¨gv
[
cou¡
]);

170 
	`¥ötf
("Sëtög mutuÆ_auth_c⁄√˘i⁄Åÿ%s\n", 
›ti⁄s
.
mutuÆ_auth_c⁄√˘i⁄
);

171 
	`•rötf
(
›ti⁄s
.
no˚π_mutuÆ_auth_c⁄√˘i⁄
, "s¶://%s:18887", 
¨gv
[
cou¡
]);

172 
	`¥ötf
("SettingÇocert_mutual_auth_connectionÅo %s\n",

173 
›ti⁄s
.
no˚π_mutuÆ_auth_c⁄√˘i⁄
);

174 
	`•rötf
(
›ti⁄s
.
£rvî_auth_c⁄√˘i⁄
, "s¶://%s:18885", 
¨gv
[
cou¡
]);

175 
	`¥ötf
("Sëtög sîvî_auth_c⁄√˘i⁄Åÿ%s\n", 
›ti⁄s
.
£rvî_auth_c⁄√˘i⁄
);

176 
	`•rötf
(
›ti⁄s
.
™⁄_c⁄√˘i⁄
, "s¶://%s:18886", 
¨gv
[
cou¡
]);

177 
	`¥ötf
("Sëtögán⁄_c⁄√˘i⁄Åÿ%s\n", 
›ti⁄s
.
™⁄_c⁄√˘i⁄
);

180 
	`ußge
();

182 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--haconnections") == 0)

184 i‡(++
cou¡
 < 
¨gc
)

186 * 
tok
 = 
	`°πok
(
¨gv
[
cou¡
], " ");

187 
›ti⁄s
.
hacou¡
 = 0;

188 
›ti⁄s
.
hac⁄√˘i⁄s
 = 
	`mÆloc
((*) * 5);

189 
tok
)

191 
›ti⁄s
.
hac⁄√˘i⁄s
[›ti⁄s.
hacou¡
] = 
	`mÆloc
(
	`°æí
(
tok
) + 1);

192 
	`°r˝y
(
›ti⁄s
.
hac⁄√˘i⁄s
[›ti⁄s.
hacou¡
], 
tok
);

193 
›ti⁄s
.
hacou¡
++;

194 
tok
 = 
	`°πok
(
NULL
, " ");

198 
	`ußge
();

200 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--client_key") == 0)

202 i‡(++
cou¡
 < 
¨gc
)

204 #i‡
	`deföed
(
IOS
)

205 
	`°rˇt
(
ckeytmp
, 
	`gëív
("HOME"));

206 
	`°rˇt
(
ckeytmp
, 
¨gv
[
cou¡
]);

207 
›ti⁄s
.
˛õ¡_key_fûe
 = 
ckeytmp
;

209 
›ti⁄s
.
˛õ¡_key_fûe
 = 
¨gv
[
cou¡
];

213 
	`ußge
();

215 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--client_privatekey") == 0)

217 i‡(++
cou¡
 < 
¨gc
)

219 #i‡
	`deföed
(
IOS
)

220 
	`°rˇt
(
ckeytmp
, 
	`gëív
("HOME"));

221 
	`°rˇt
(
ckeytmp
, 
¨gv
[
cou¡
]);

222 
›ti⁄s
.
˛õ¡_¥iv©e_key_fûe
 = 
ckeytmp
;

224 
›ti⁄s
.
˛õ¡_¥iv©e_key_fûe
 = 
¨gv
[
cou¡
];

228 
	`ußge
();

230 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--client_key_pass") == 0)

232 i‡(++
cou¡
 < 
¨gc
)

233 
›ti⁄s
.
˛õ¡_key_∑ss
 = 
¨gv
[
cou¡
];

235 
	`ußge
();

237 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--server_key") == 0)

239 i‡(++
cou¡
 < 
¨gc
)

241 #i‡
	`deföed
(
IOS
)

242 
	`°rˇt
(
skeytmp
, 
	`gëív
("HOME"));

243 
	`°rˇt
(
skeytmp
, 
¨gv
[
cou¡
]);

244 
›ti⁄s
.
£rvî_key_fûe
 = 
skeytmp
;

246 
›ti⁄s
.
£rvî_key_fûe
 = 
¨gv
[
cou¡
];

250 
	`ußge
();

252 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--verbose") == 0)

254 
›ti⁄s
.
vîbo£
 = 1;

256 
	`¥ötf
("\nSetting verbose on\n");

258 
cou¡
++;

260 #i‡
	`deföed
(
IOS
)

261 
	`°r˝y
(
≥rsi°í˚St‹e
, 
	`gëív
("HOME"));

262 
	`°rˇt
(
≥rsi°í˚St‹e
, "/Library/Caches");

264 
	}
}

266 
	$MyLog
(
LOGA_Àvñ
, * 
f‹m©
, ...)

268 
msg_buf
[256];

269 
va_li°
 
¨gs
;

270 
timeb
 
ts
;

272 
tm
 *
timeöfo
;

274 i‡(
LOGA_Àvñ
 =
LOGA_DEBUG
 && 
›ti⁄s
.
vîbo£
 == 0)

277 
	`·ime
(&
ts
);

278 
timeöfo
 = 
	`loˇ…ime
(&
ts
.
time
);

279 
	`°r·ime
(
msg_buf
, 80, "%Y%m%d %H%M%S", 
timeöfo
);

281 
	`•rötf
(&
msg_buf
[
	`°æí
(msg_buf)], ".%.3hu ", 
ts
.
mûlôm
);

283 
	`va_°¨t
(
¨gs
, 
f‹m©
);

284 
	`v¢¥ötf
(&
msg_buf
[
	`°æí
(msg_buf)], (msg_bufË- såÀn(msg_buf), 
f‹m©
, 
¨gs
);

285 
	`va_íd
(
¨gs
);

287 
	`¥ötf
("%s\n", 
msg_buf
);

288 
	`fÊush
(
°dout
);

289 
	}
}

293 #i‡
deföed
(
WIN32
Ë|| deföed(
_WINDOWS
)

294 
	#mq¶ìp
(
A
Ë
	`SÀï
(1000*A)

	)

295 
	#START_TIME_TYPE
 
DWORD


	)

296 
DWORD
 
	g°¨t_time
 = 0;

297 
START_TIME_TYPE
 
	$°¨t_˛ock
()

299  
	`GëTickCou¡
();

300 
	}
}

301 #ñi‡
deföed
(
AIX
)

302 
	#mq¶ìp
 
¶ìp


	)

303 
	#START_TIME_TYPE
 
time•ec


	)

304 
START_TIME_TYPE
 
	$°¨t_˛ock
()

306 
time•ec
 
°¨t
;

307 
	`˛ock_gëtime
(
CLOCK_REALTIME
, &
°¨t
);

308  
°¨t
;

309 
	}
}

311 
	#mq¶ìp
 
¶ìp


	)

312 
	#START_TIME_TYPE
 
timevÆ


	)

314 
START_TIME_TYPE
 
	$°¨t_˛ock
()

316 
timevÆ
 
°¨t_time
;

317 
	`gëtimeofday
(&
°¨t_time
, 
NULL
);

318  
°¨t_time
;

319 
	}
}

323 #i‡
deföed
(
WIN32
)

324 
	$ñ≠£d
(
START_TIME_TYPE
 
°¨t_time
)

326  
	`GëTickCou¡
(Ë- 
°¨t_time
;

327 
	}
}

328 #ñi‡
deföed
(
AIX
)

329 
	#as£π
(
a
)

	)

330 
	$ñ≠£d
(
time•ec
 
°¨t
)

332 
time•ec
 
now
, 
ªs
;

334 
	`˛ock_gëtime
(
CLOCK_REALTIME
, &
now
);

335 
	`¡imîsub
(
now
, 
°¨t
, 
ªs
);

336  (
ªs
.
tv_£c
)*1000L + (ªs.
tv_n£c
)/1000000L;

337 
	}
}

339 
	$ñ≠£d
(
START_TIME_TYPE
 
°¨t_time
)

341 
timevÆ
 
now
, 
ªs
;

343 
	`gëtimeofday
(&
now
, 
NULL
);

344 
	`timîsub
(&
now
, &
°¨t_time
, &
ªs
);

345  (
ªs
.
tv_£c
)*1000 + (ªs.
tv_u£c
)/1000;

346 
	}
}

350 
	#as£π
(
a
, 
b
, 
c
, 
d
Ë
	`myas£π
(
__FILE__
, 
__LINE__
,á, b, c, d)

	)

351 
	#as£π1
(
a
, 
b
, 
c
, 
d
, 
e
Ë
	`myas£π
(
__FILE__
, 
__LINE__
,á, b, c, d,É)

	)

354 
	gã°s
 = 0;

355 
	gÁûuªs
 = 0;

356 
FILE
* 
	gxml
;

357 
START_TIME_TYPE
 
	gglobÆ_°¨t_time
;

358 
	gouçut
[3000];

359 * 
	gcur_ouçut
 = 
ouçut
;

362 
	$wrôe_ã°_ªsu…
()

364 
duøti⁄
 = 
	`ñ≠£d
(
globÆ_°¨t_time
);

366 
	`Ârötf
(
xml
, "Åime=\"%ld.%.3ld\" >\n", 
duøti⁄
 / 1000, duration % 1000);

367 i‡(
cur_ouçut
 !
ouçut
)

369 
	`Ârötf
(
xml
, "%s", 
ouçut
);

370 
cur_ouçut
 = 
ouçut
;

372 
	`Ârötf
(
xml
, "</testcase>\n");

373 
	}
}

376 
	$myas£π
(* 
fûíame
, 
löío
, * 
des¸ùti⁄
, 
vÆue
, * 
f‹m©
, ...)

378 ++
ã°s
;

379 i‡(!
vÆue
)

381 
va_li°
 
¨gs
;

383 ++
Áûuªs
;

384 
	`¥ötf
("As£πi⁄ faûed, fûê%s,Üöê%d, des¸ùti⁄: %s\n", 
fûíame
, 
löío
, 
des¸ùti⁄
);

386 
	`va_°¨t
(
¨gs
, 
f‹m©
);

387 
	`v¥ötf
(
f‹m©
, 
¨gs
);

388 
	`va_íd
(
¨gs
);

390 
cur_ouçut
 +
	`•rötf
(cur_output, "<failureÅype=\"%s\">file %s,Üine %d </failure>\n",

391 
des¸ùti⁄
, 
fûíame
, 
löío
);

394 
	`MyLog
(
LOGA_DEBUG
, "As£πi⁄ suc˚eded, fûê%s,Üöê%d, des¸ùti⁄: %s", 
fûíame
, 
löío
, 
des¸ùti⁄
);

395  
vÆue
;

396 
	}
}

404 
	$sögÀThªad_£ndAndRe˚ive
(
MQTTClõ¡
* 
c
, 
qos
, * 
ã°_t›ic
)

406 
MQTTClõ¡_dñivîyTokí
 
dt
;

407 
MQTTClõ¡_mesßge
 
pubmsg
 = 
MQTTClõ¡_mesßge_öôülizî
;

408 
MQTTClõ¡_mesßge
* 
m
 = 
NULL
;

409 * 
t›icName
 = 
NULL
;

410 
t›icLí
;

411 
i
 = 0;

412 
ôî©i⁄s
 = 50;

413 
rc
;

415 
	`MyLog
(
LOGA_DEBUG
, "%d mesßge†© QoS %d", 
ôî©i⁄s
, 
qos
);

416 
pubmsg
.
∑ylﬂd
 = "a muchÜonger messageÅhat we can shortenÅoÅheÉxtentÅhat weÇeedÅoÖayload upÅo 11";

417 
pubmsg
.
∑ylﬂdÀn
 = 11;

418 
pubmsg
.
qos
 = qos;

419 
pubmsg
.
ªèöed
 = 0;

421 
i
 = 0; i< 
ôî©i⁄s
; ++i)

423 i‡(
i
 % 10 == 0)

424 
rc
 = 
	`MQTTClõ¡_publish
(
c
, 
ã°_t›ic
, 
pubmsg
.
∑ylﬂdÀn
,Öubmsg.
∑ylﬂd
,Öubmsg.
qos
,Öubmsg.
ªèöed
, 
NULL
);

426 
rc
 = 
	`MQTTClõ¡_publishMesßge
(
c
, 
ã°_t›ic
, &
pubmsg
, &
dt
);

427 
	`as£π
("GoodÑ¯‰omÖublish", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

429 i‡(
qos
 > 0)

431 
rc
 = 
	`MQTTClõ¡_waôF‹Com∂ëi⁄
(
c
, 
dt
, 20000L);

432 
	`as£π
("GoodÑ¯‰om waôf‹Com∂ëi⁄", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

435 
rc
 = 
	`MQTTClõ¡_ª˚ive
(
c
, &
t›icName
, &
t›icLí
, &
m
, 10000);

436 
	`as£π
("GoodÑ¯‰omÑe˚ive", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

437 i‡(
t›icName
)

439 
	`MyLog
(
LOGA_DEBUG
, "Mesßgêª˚ived o¿t›i¯%†i†%.*s", 
t›icName
, 
m
->
∑ylﬂdÀn
, (*)(m->
∑ylﬂd
));

440 i‡(
pubmsg
.
∑ylﬂdÀn
 !
m
->payloadlen ||

441 
	`memcmp
(
m
->
∑ylﬂd
, 
pubmsg
.∑ylﬂd, m->
∑ylﬂdÀn
) != 0)

443 
Áûuªs
++;

444 
	`MyLog
(
LOGA_INFO
, "Eº‹: wr⁄g d©®-Ñe˚ivedÜígth†%d %d", 
pubmsg
.
∑ylﬂdÀn
, 
m
->payloadlen);

447 
	`MQTTClõ¡_‰ì
(
t›icName
);

448 
	`MQTTClõ¡_‰ìMesßge
(&
m
);

451 
	`¥ötf
("No messageÑeceived withinÅimeoutÖeriod\n");

455 
	`MQTTClõ¡_ª˚ive
(
c
, &
t›icName
, &
t›icLí
, &
m
, 1000);

456 
t›icName
)

458 
	`¥ötf
("Mesßgêª˚ived o¿t›i¯%†i†%.*s.\n", 
t›icName
, 
m
->
∑ylﬂdÀn
, (*)(m->
∑ylﬂd
));

459 
	`MQTTClõ¡_‰ì
(
t›icName
);

460 
	`MQTTClõ¡_‰ìMesßge
(&
m
);

461 
	`MQTTClõ¡_ª˚ive
(
c
, &
t›icName
, &
t›icLí
, &
m
, 1000);

463 
	}
}

470 vﬁ©ûê
	gmu…iThªad_¨rivedcou¡
 = 0;

471 
	gmu…iThªad_dñivîyCom∂ëed
 = 0;

472 
MQTTClõ¡_mesßge
 
	gmu…iThªad_pubmsg
 = 
MQTTClõ¡_mesßge_öôülizî
;

474 
	$mu…iThªad_dñivîyCom∂ëe
(* 
c⁄ãxt
, 
MQTTClõ¡_dñivîyTokí
 
dt
)

476 ++
mu…iThªad_dñivîyCom∂ëed
;

477 
	}
}

479 
	$mu…iThªad_mesßgeAºived
(* 
c⁄ãxt
, * 
t›icName
, 
t›icLí
, 
MQTTClõ¡_mesßge
* 
m
)

481 ++
mu…iThªad_¨rivedcou¡
;

482 
	`MyLog
(
LOGA_DEBUG
, "Callback: %d messageÑeceived onÅopic %s is %.*s.",

483 
mu…iThªad_¨rivedcou¡
, 
t›icName
, 
m
->
∑ylﬂdÀn
, (*)(m->
∑ylﬂd
));

484 i‡(
mu…iThªad_pubmsg
.
∑ylﬂdÀn
 !
m
->payloadlen ||

485 
	`memcmp
(
m
->
∑ylﬂd
, 
mu…iThªad_pubmsg
.∑ylﬂd, m->
∑ylﬂdÀn
) != 0)

487 
Áûuªs
++;

488 
	`MyLog
(
LOGA_INFO
, "Eº‹: wr⁄g d©®ª˚ivedÜígth†%d %d\n", 
mu…iThªad_pubmsg
.
∑ylﬂdÀn
, 
m
->payloadlen);

490 
	`MQTTClõ¡_‰ì
(
t›icName
);

491 
	`MQTTClõ¡_‰ìMesßge
(&
m
);

493 
	}
}

496 
	$mu…iThªad_£ndAndRe˚ive
(
MQTTClõ¡
* 
c
, 
qos
, * 
ã°_t›ic
)

498 
MQTTClõ¡_dñivîyTokí
 
dt
;

499 
i
 = 0;

500 
ôî©i⁄s
 = 50;

501 
rc
 = 0;

502 
waô_£c⁄ds
 = 0;

504 
mu…iThªad_dñivîyCom∂ëed
 = 0;

505 
mu…iThªad_¨rivedcou¡
 = 0;

507 
	`MyLog
(
LOGA_DEBUG
, "%d mesßge†© QoS %d", 
ôî©i⁄s
, 
qos
);

508 
mu…iThªad_pubmsg
.
∑ylﬂd
 = "a muchÜonger messageÅhat we can shortenÅoÅheÉxtentÅhat weÇeedÅo";

509 
mu…iThªad_pubmsg
.
∑ylﬂdÀn
 = 27;

510 
mu…iThªad_pubmsg
.
qos
 = qos;

511 
mu…iThªad_pubmsg
.
ªèöed
 = 0;

513 
i
 = 1; i <
ôî©i⁄s
; ++i)

515 i‡(
i
 % 10 == 0)

516 
rc
 = 
	`MQTTClõ¡_publish
(
c
, 
ã°_t›ic
, 
mu…iThªad_pubmsg
.
∑ylﬂdÀn
, mu…iThªad_pubmsg.
∑ylﬂd
,

517 
mu…iThªad_pubmsg
.
qos
, mu…iThªad_pubmsg.
ªèöed
, 
NULL
);

519 
rc
 = 
	`MQTTClõ¡_publishMesßge
(
c
, 
ã°_t›ic
, &
mu…iThªad_pubmsg
, &
dt
);

520 
	`as£π
("GoodÑ¯‰omÖublish", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

522 #i‡
	`deföed
(
WIN32
)

523 
	`SÀï
(100);

525 
	`u¶ìp
(100000L);

528 
waô_£c⁄ds
 = 20;

529 (
mu…iThªad_¨rivedcou¡
 < 
i
Ë&& (
waô_£c⁄ds
-- > 0))

531 
	`MyLog
(
LOGA_DEBUG
, "Aºived %d cou¡ %d", 
mu…iThªad_¨rivedcou¡
, 
i
);

532 #i‡
	`deföed
(
WIN32
)

533 
	`SÀï
(1000);

535 
	`u¶ìp
(1000000L);

538 
	`as£π
("MesßgêAºived", 
waô_£c⁄ds
 > 0,

539 "Timêouàwaôög f‹ mesßgê%d\n", 
i
 );

541 i‡(
qos
 > 0)

547 
waô_£c⁄ds
 = 10;

548 (
mu…iThªad_dñivîyCom∂ëed
 < 
ôî©i⁄s
Ë&& (
waô_£c⁄ds
-- > 0))

550 
	`MyLog
(
LOGA_DEBUG
, "Dñivîy Com∂ëed %d cou¡ %d", 
mu…iThªad_dñivîyCom∂ëed
, 
i
);

551 #i‡
	`deföed
(
WIN32
)

552 
	`SÀï
(1000);

554 
	`u¶ìp
(1000000L);

557 
	`as£π
("AŒ Dñivîõ†Com∂ëe", 
waô_£c⁄ds
 > 0,

559 
mu…iThªad_dñivîyCom∂ëed
);

561 
	}
}

569 
	$ã°1
(
O±i⁄s
 
›ti⁄s
)

571 * 
ã°«me
 = "test1";

572 * 
ã°_t›ic
 = "C client SSLÅest1";

573 
subsqos
 = 2;

574 
MQTTClõ¡
 
c
;

575 
MQTTClõ¡_c⁄√˘O±i⁄s
 
›ts
 = 
MQTTClõ¡_c⁄√˘O±i⁄s_öôülizî
;

576 
MQTTClõ¡_wûlO±i⁄s
 
w›ts
 = 
MQTTClõ¡_wûlO±i⁄s_öôülizî
;

577 
MQTTClõ¡_SSLO±i⁄s
 
s¶›ts
 = 
MQTTClõ¡_SSLO±i⁄s_öôülizî
;

578 
rc
 = 0;

580 
Áûuªs
 = 0;

581 
	`MyLog
(
LOGA_INFO
, "Starting SSLÅest 1 - connectionÅoÇonSSL MQTT server");

582 
	`Ârötf
(
xml
, "<testcase classname=\"test3\"Çame=\"SSL connect failÅoÇonSSL MQTT server\"");

583 
globÆ_°¨t_time
 = 
	`°¨t_˛ock
();

585 
rc
 = 
	`MQTTClõ¡_¸óã
(&
c
, 
›ti⁄s
.
c⁄√˘i⁄
, "ã°1", 
MQTTCLIENT_PERSISTENCE_DEFAULT
, 
≥rsi°í˚St‹e
);

586 i‡(!(
	`as£π
("goodÑ¯‰om cª©e", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d \n",Ñc)))

587 
exô
;

589 
›ts
.
kìpAliveI¡îvÆ
 = 20;

590 
›ts
.
˛ón£ssi⁄
 = 1;

591 
›ts
.
u£∫ame
 = "testuser";

592 
›ts
.
∑ssw‹d
 = "testpassword";

593 i‡(
›ti⁄s
.
hac⁄√˘i⁄s
 !
NULL
)

595 
›ts
.
£rvîURIs
 = 
›ti⁄s
.
hac⁄√˘i⁄s
;

596 
›ts
.
£rvîURIcou¡
 = 
›ti⁄s
.
hacou¡
;

599 
›ts
.
s¶
 = &
s¶›ts
;

600 i‡(
›ti⁄s
.
£rvî_key_fûe
 !
NULL
)

601 
›ts
.
s¶
->
åu°St‹e
 = 
›ti⁄s
.
£rvî_key_fûe
;

603 
	`MyLog
(
LOGA_DEBUG
, "Connecting");

605 
rc
 = 
	`MQTTClõ¡_c⁄√˘
(
c
, &
›ts
);

606 i‡(!(
	`as£π
("C⁄√˘ should faû", 
rc
 =
MQTTCLIENT_FAILURE
, "rc was %d ",Ñc)))

607 
exô
;

609 
exô
:

610 
	`MQTTClõ¡_de°roy
(&
c
);

611 
	`MyLog
(
LOGA_INFO
, "%s:Åest %s. %dÅestsÑun, %d failures.",

612 (
Áûuªs
 =0Ë? "∑s£d" : "Áûed", 
ã°«me
, 
ã°s
, failures);

613 
	`wrôe_ã°_ªsu…
();

614  
Áûuªs
;

615 
	}
}

624 
	$ã°2a_s
(
O±i⁄s
 
›ti⁄s
)

626 * 
ã°«me
 = "test2a_s";

627 * 
ã°_t›ic
 = "C clientÅest2a_s";

628 
subsqos
 = 2;

629 
MQTTClõ¡
 
c
;

630 
MQTTClõ¡_c⁄√˘O±i⁄s
 
›ts
 = 
MQTTClõ¡_c⁄√˘O±i⁄s_öôülizî
;

631 
MQTTClõ¡_wûlO±i⁄s
 
w›ts
 = 
MQTTClõ¡_wûlO±i⁄s_öôülizî
;

632 
MQTTClõ¡_SSLO±i⁄s
 
s¶›ts
 = 
MQTTClõ¡_SSLO±i⁄s_öôülizî
;

633 
rc
 = 0;

635 
Áûuªs
 = 0;

636 
	`MyLog
(
LOGA_INFO
, "StartingÅest 2a_s - Mutual SSLáuthentication - singleÅhreaded client usingÑeceive");

637 
	`Ârötf
(
xml
, "<testcase classname=\"test3\"Çame=\"test 2a_s\"");

638 
globÆ_°¨t_time
 = 
	`°¨t_˛ock
();

640 
rc
 = 
	`MQTTClõ¡_¸óã
(&
c
, 
›ti⁄s
.
£rvî_auth_c⁄√˘i⁄
, "ã°2a_s", 
MQTTCLIENT_PERSISTENCE_DEFAULT
, 
≥rsi°í˚St‹e
);

641 i‡(!(
	`as£π
("goodÑ¯‰om cª©e", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d\n",Ñc)))

642 
exô
;

644 
›ts
.
kìpAliveI¡îvÆ
 = 20;

645 
›ts
.
˛ón£ssi⁄
 = 1;

646 
›ts
.
u£∫ame
 = "testuser";

647 
›ts
.
∑ssw‹d
 = "testpassword";

648 i‡(
›ti⁄s
.
hac⁄√˘i⁄s
 !
NULL
)

650 
›ts
.
£rvîURIs
 = 
›ti⁄s
.
hac⁄√˘i⁄s
;

651 
›ts
.
£rvîURIcou¡
 = 
›ti⁄s
.
hacou¡
;

654 
›ts
.
s¶
 = &
s¶›ts
;

655 i‡(
›ti⁄s
.
£rvî_key_fûe
)

656 
›ts
.
s¶
->
åu°St‹e
 = 
›ti⁄s
.
£rvî_key_fûe
;

657 
›ts
.
s¶
->
keySt‹e
 = 
›ti⁄s
.
˛õ¡_key_fûe
;

658 i‡(
›ti⁄s
.
˛õ¡_key_∑ss
)

659 
›ts
.
s¶
->
¥iv©eKeyPassw‹d
 = 
›ti⁄s
.
˛õ¡_key_∑ss
;

660 i‡(
›ti⁄s
.
˛õ¡_¥iv©e_key_fûe
)

661 
›ts
.
s¶
->
¥iv©eKey
 = 
›ti⁄s
.
˛õ¡_¥iv©e_key_fûe
;

663 
	`MyLog
(
LOGA_DEBUG
, "Connecting");

665 
rc
 = 
	`MQTTClõ¡_c⁄√˘
(
c
, &
›ts
);

666 i‡(!(
	`as£π
("GoodÑ¯‰om c⁄√˘", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc)))

667 
exô
;

669 
rc
 = 
	`MQTTClõ¡_subs¸ibe
(
c
, 
ã°_t›ic
, 
subsqos
);

670 i‡(!(
	`as£π
("GoodÑ¯‰om subs¸ibe", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc)))

671 
exô
;

673 
	`sögÀThªad_£ndAndRe˚ive
(
c
, 0, 
ã°_t›ic
);

674 
	`sögÀThªad_£ndAndRe˚ive
(
c
, 1, 
ã°_t›ic
);

675 
	`sögÀThªad_£ndAndRe˚ive
(
c
, 2, 
ã°_t›ic
);

677 
	`MyLog
(
LOGA_DEBUG
, "Stopping\n");

679 
rc
 = 
	`MQTTClõ¡_unsubs¸ibe
(
c
, 
ã°_t›ic
);

680 i‡(!(
	`as£π
("Unsubs¸ibêsuc˚ssful", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc)))

681 
exô
;

682 
rc
 = 
	`MQTTClõ¡_disc⁄√˘
(
c
, 0);

683 i‡(!(
	`as£π
("Disc⁄√˘ suc˚ssful", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc)))

684 
exô
;

687 
rc
 = 
	`MQTTClõ¡_c⁄√˘
(
c
, &
›ts
);

688 i‡(!(
	`as£π
("C⁄√˘ suc˚ssful", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc)))

689 
exô
;

690 
rc
 = 
	`MQTTClõ¡_disc⁄√˘
(
c
, 0);

691 i‡(!(
	`as£π
("Disc⁄√˘ suc˚ssful", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc)))

692 
exô
;

694 
exô
:

695 
	`MQTTClõ¡_de°roy
(&
c
);

696 
	`MyLog
(
LOGA_INFO
, "%s:Åest %s. %dÅestsÑun, %d failures.",

697 (
Áûuªs
 =0Ë? "∑s£d" : "Áûed", 
ã°«me
, 
ã°s
, failures);

698 
	`wrôe_ã°_ªsu…
();

699  
Áûuªs
;

700 
	}
}

708 
	$ã°2a_m
(
O±i⁄s
 
›ti⁄s
)

710 * 
ã°«me
 = "test2a_m";

711 * 
ã°_t›ic
 = "C clientÅest2a_m";

712 
subsqos
 = 2;

714 
MQTTClõ¡
 
c
;

715 
MQTTClõ¡_c⁄√˘O±i⁄s
 
›ts
 = 
MQTTClõ¡_c⁄√˘O±i⁄s_öôülizî
;

716 
MQTTClõ¡_wûlO±i⁄s
 
w›ts
 = 
MQTTClõ¡_wûlO±i⁄s_öôülizî
;

717 
MQTTClõ¡_SSLO±i⁄s
 
s¶›ts
 = 
MQTTClõ¡_SSLO±i⁄s_öôülizî
;

718 
rc
 = 0;

720 
Áûuªs
 = 0;

721 
	`MyLog
(
LOGA_INFO
, "StartingÅest 2a_m - Mutual SSLáuthentication - multi-threaded client using callbacks");

722 
	`Ârötf
(
xml
, "<testcase classname=\"test3\"Çame=\"test 2a_m\"");

723 
globÆ_°¨t_time
 = 
	`°¨t_˛ock
();

725 
rc
 = 
	`MQTTClõ¡_¸óã
(&
c
, 
›ti⁄s
.
mutuÆ_auth_c⁄√˘i⁄
, "ã°2a_m", 
MQTTCLIENT_PERSISTENCE_DEFAULT
, 
≥rsi°í˚St‹e
);

726 i‡(!(
	`as£π
("goodÑ¯‰om cª©e", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d\n",Ñc)))

727 
exô
;

729 
›ts
.
kìpAliveI¡îvÆ
 = 20;

730 
›ts
.
˛ón£ssi⁄
 = 1;

731 
›ts
.
u£∫ame
 = "testuser";

732 
›ts
.
∑ssw‹d
 = "testpassword";

733 i‡(
›ti⁄s
.
hac⁄√˘i⁄s
 !
NULL
)

735 
›ts
.
£rvîURIs
 = 
›ti⁄s
.
hac⁄√˘i⁄s
;

736 
›ts
.
£rvîURIcou¡
 = 
›ti⁄s
.
hacou¡
;

739 
›ts
.
s¶
 = &
s¶›ts
;

740 i‡(
›ti⁄s
.
£rvî_key_fûe
)

741 
›ts
.
s¶
->
åu°St‹e
 = 
›ti⁄s
.
£rvî_key_fûe
;

742 
›ts
.
s¶
->
keySt‹e
 = 
›ti⁄s
.
˛õ¡_key_fûe
;

743 i‡(
›ti⁄s
.
˛õ¡_key_∑ss
)

744 
›ts
.
s¶
->
¥iv©eKeyPassw‹d
 = 
›ti⁄s
.
˛õ¡_key_∑ss
;

745 i‡(
›ti⁄s
.
˛õ¡_¥iv©e_key_fûe
)

746 
›ts
.
s¶
->
¥iv©eKey
 = 
›ti⁄s
.
˛õ¡_¥iv©e_key_fûe
;

750 
rc
 = 
	`MQTTClõ¡_£tCÆlbacks
(
c
, 
NULL
, NULL, 
mu…iThªad_mesßgeAºived
, 
mu…iThªad_dñivîyCom∂ëe
);

751 i‡(!(
	`as£π
("GoodÑ¯‰om sëCÆlbacks", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc)))

752 
exô
;

754 
	`MyLog
(
LOGA_DEBUG
, "Connecting");

756 
rc
 = 
	`MQTTClõ¡_c⁄√˘
(
c
, &
›ts
);

757 i‡(!(
	`as£π
("GoodÑ¯‰om c⁄√˘", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc)))

758 
exô
;

760 
rc
 = 
	`MQTTClõ¡_subs¸ibe
(
c
, 
ã°_t›ic
, 
subsqos
);

761 i‡(!(
	`as£π
("GoodÑ¯‰om subs¸ibe", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc)))

762 
exô
;

764 
	`mu…iThªad_£ndAndRe˚ive
(
c
, 0, 
ã°_t›ic
);

765 
	`mu…iThªad_£ndAndRe˚ive
(
c
, 1, 
ã°_t›ic
);

766 
	`mu…iThªad_£ndAndRe˚ive
(
c
, 2, 
ã°_t›ic
);

768 
	`MyLog
(
LOGA_DEBUG
, "Stopping");

770 
rc
 = 
	`MQTTClõ¡_unsubs¸ibe
(
c
, 
ã°_t›ic
);

771 i‡(!(
	`as£π
("Unsubs¸ibêsuc˚ssful", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc)))

772 
exô
;

773 
rc
 = 
	`MQTTClõ¡_disc⁄√˘
(
c
, 0);

774 i‡(!(
	`as£π
("Disc⁄√˘ suc˚ssful", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc)))

775 
exô
;

777 
exô
:

778 
	`MQTTClõ¡_de°roy
(&
c
);

779 
	`MyLog
(
LOGA_INFO
, "%s:Åest %s. %dÅestsÑun, %d failures.",

780 (
Áûuªs
 =0Ë? "∑s£d" : "Áûed", 
ã°«me
, 
ã°s
, failures);

781 
	`wrôe_ã°_ªsu…
();

782  
Áûuªs
;

783 
	}
}

790 
	$ã°2b
(
O±i⁄s
 
›ti⁄s
)

792 * 
ã°«me
 = "test2b";

793 * 
ã°_t›ic
 = "C clientÅest2b";

794 
subsqos
 = 2;

795 
MQTTClõ¡
 
c
;

796 
MQTTClõ¡_c⁄√˘O±i⁄s
 
›ts
 = 
MQTTClõ¡_c⁄√˘O±i⁄s_öôülizî
;

797 
MQTTClõ¡_wûlO±i⁄s
 
w›ts
 = 
MQTTClõ¡_wûlO±i⁄s_öôülizî
;

798 
MQTTClõ¡_SSLO±i⁄s
 
s¶›ts
 = 
MQTTClõ¡_SSLO±i⁄s_öôülizî
;

799 
rc
 = 0;

801 
Áûuªs
 = 0;

802 
	`MyLog
(
LOGA_INFO
, "StartingÅest 2b - connectionÅo SSL MQTT server with clientauth=req but server doesÇot have client cert");

803 
	`Ârötf
(
xml
, "<testcase classname=\"test3\"Çame=\"test 2b\"");

804 
globÆ_°¨t_time
 = 
	`°¨t_˛ock
();

806 
rc
 = 
	`MQTTClõ¡_¸óã
(&
c
, 
›ti⁄s
.
no˚π_mutuÆ_auth_c⁄√˘i⁄
, "ã°2b", 
MQTTCLIENT_PERSISTENCE_DEFAULT
, 
≥rsi°í˚St‹e
);

807 i‡(!(
	`as£π
("goodÑ¯‰om cª©e", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d\n",Ñc)))

808 
exô
;

810 
›ts
.
kìpAliveI¡îvÆ
 = 20;

811 
›ts
.
˛ón£ssi⁄
 = 1;

812 
›ts
.
u£∫ame
 = "testuser";

813 
›ts
.
∑ssw‹d
 = "testpassword";

814 i‡(
›ti⁄s
.
hac⁄√˘i⁄s
 !
NULL
)

816 
›ts
.
£rvîURIs
 = 
›ti⁄s
.
hac⁄√˘i⁄s
;

817 
›ts
.
£rvîURIcou¡
 = 
›ti⁄s
.
hacou¡
;

820 
›ts
.
s¶
 = &
s¶›ts
;

821 i‡(
›ti⁄s
.
£rvî_key_fûe
)

822 
›ts
.
s¶
->
åu°St‹e
 = 
›ti⁄s
.
£rvî_key_fûe
;

823 
›ts
.
s¶
->
keySt‹e
 = 
›ti⁄s
.
˛õ¡_key_fûe
;

824 i‡(
›ti⁄s
.
˛õ¡_key_∑ss
)

825 
›ts
.
s¶
->
¥iv©eKeyPassw‹d
 = 
›ti⁄s
.
˛õ¡_key_∑ss
;

826 i‡(
›ti⁄s
.
˛õ¡_¥iv©e_key_fûe
)

827 
›ts
.
s¶
->
¥iv©eKey
 = 
›ti⁄s
.
˛õ¡_¥iv©e_key_fûe
;

831 
	`MyLog
(
LOGA_DEBUG
, "Connecting");

833 
rc
 = 
	`MQTTClõ¡_c⁄√˘
(
c
, &
›ts
);

834 i‡(!(
	`as£π
("BadÑ¯‰om c⁄√˘", 
rc
 =
MQTTCLIENT_FAILURE
, "rc was %d\n",Ñc)))

835 
exô
;

837 
exô
:

838 
	`MQTTClõ¡_de°roy
(&
c
);

839 
	`MyLog
(
LOGA_INFO
, "%s:Åest %s. %dÅestsÑun, %d failures.",

840 (
Áûuªs
 =0Ë? "∑s£d" : "Áûed", 
ã°«me
, 
ã°s
, failures);

841 
	`wrôe_ã°_ªsu…
();

842  
Áûuªs
;

843 
	}
}

850 
	$ã°2c
(
O±i⁄s
 
›ti⁄s
)

852 * 
ã°«me
 = "test2c";

853 * 
ã°_t›ic
 = "C clientÅest2c";

854 
subsqos
 = 2;

855 
MQTTClõ¡
 
c
;

856 
MQTTClõ¡_c⁄√˘O±i⁄s
 
›ts
 = 
MQTTClõ¡_c⁄√˘O±i⁄s_öôülizî
;

857 
MQTTClõ¡_wûlO±i⁄s
 
w›ts
 = 
MQTTClõ¡_wûlO±i⁄s_öôülizî
;

858 
MQTTClõ¡_SSLO±i⁄s
 
s¶›ts
 = 
MQTTClõ¡_SSLO±i⁄s_öôülizî
;

859 
rc
 = 0;

861 
Áûuªs
 = 0;

862 
	`MyLog
(
LOGA_INFO
, "StartingÅest 2c - connectionÅo SSL MQTT server, serveráuthÉnabled but unknown cert");

863 
	`Ârötf
(
xml
, "<testcase classname=\"test3\"Çame=\"test 2c\"");

864 
globÆ_°¨t_time
 = 
	`°¨t_˛ock
();

866 
rc
 = 
	`MQTTClõ¡_¸óã
(&
c
, 
›ti⁄s
.
mutuÆ_auth_c⁄√˘i⁄
, "ã°2c", 
MQTTCLIENT_PERSISTENCE_DEFAULT
, 
≥rsi°í˚St‹e
);

867 i‡(!(
	`as£π
("goodÑ¯‰om cª©e", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d\n",Ñc)))

868 
exô
;

870 
›ts
.
kìpAliveI¡îvÆ
 = 20;

871 
›ts
.
˛ón£ssi⁄
 = 1;

872 
›ts
.
u£∫ame
 = "testuser";

873 
›ts
.
∑ssw‹d
 = "testpassword";

874 i‡(
›ti⁄s
.
hac⁄√˘i⁄s
 !
NULL
)

876 
›ts
.
£rvîURIs
 = 
›ti⁄s
.
hac⁄√˘i⁄s
;

877 
›ts
.
£rvîURIcou¡
 = 
›ti⁄s
.
hacou¡
;

880 
›ts
.
s¶
 = &
s¶›ts
;

883 
›ts
.
s¶
->
keySt‹e
 = 
›ti⁄s
.
˛õ¡_key_fûe
;

884 i‡(
›ti⁄s
.
˛õ¡_key_∑ss
)

885 
›ts
.
s¶
->
¥iv©eKeyPassw‹d
 = 
›ti⁄s
.
˛õ¡_key_∑ss
;

886 i‡(
›ti⁄s
.
˛õ¡_¥iv©e_key_fûe
)

887 
›ts
.
s¶
->
¥iv©eKey
 = 
›ti⁄s
.
˛õ¡_¥iv©e_key_fûe
;

891 
	`MyLog
(
LOGA_DEBUG
, "Connecting");

893 
rc
 = 
	`MQTTClõ¡_c⁄√˘
(
c
, &
›ts
);

894 i‡(!(
	`as£π
("GoodÑ¯‰om c⁄√˘", 
rc
 =
MQTTCLIENT_FAILURE
, "rc was %d",Ñc)))

895 
exô
;

897 
exô
:

898 
	`MQTTClõ¡_de°roy
(&
c
);

899 
	`MyLog
(
LOGA_INFO
, "%s:Åest %s. %dÅestsÑun, %d failures.",

900 (
Áûuªs
 =0Ë? "∑s£d" : "Áûed", 
ã°«me
, 
ã°s
, failures);

901 
	`wrôe_ã°_ªsu…
();

902  
Áûuªs
;

903 
	}
}

911 
	$ã°3a_s
(
O±i⁄s
 
›ti⁄s
)

913 * 
ã°«me
 = "test3a_s";

914 * 
ã°_t›ic
 = "C clientÅest3a_s";

915 
subsqos
 = 2;

916 
MQTTClõ¡
 
c
;

917 
MQTTClõ¡_c⁄√˘O±i⁄s
 
›ts
 = 
MQTTClõ¡_c⁄√˘O±i⁄s_öôülizî
;

918 
MQTTClõ¡_wûlO±i⁄s
 
w›ts
 = 
MQTTClõ¡_wûlO±i⁄s_öôülizî
;

919 
MQTTClõ¡_SSLO±i⁄s
 
s¶›ts
 = 
MQTTClõ¡_SSLO±i⁄s_öôülizî
;

920 
rc
 = 0;

922 
Áûuªs
 = 0;

923 
	`MyLog
(
LOGA_INFO
, "StartingÅest 3a_s - Serveráuthentication - singleÅhreaded client usingÑeceive");

924 
	`Ârötf
(
xml
, "<testcase classname=\"test3\"Çame=\"test 3a_s\"");

925 
globÆ_°¨t_time
 = 
	`°¨t_˛ock
();

927 
rc
 = 
	`MQTTClõ¡_¸óã
(&
c
, 
›ti⁄s
.
£rvî_auth_c⁄√˘i⁄
, "ã°3a_s", 
MQTTCLIENT_PERSISTENCE_DEFAULT
, 
≥rsi°í˚St‹e
);

928 i‡(!(
	`as£π
("goodÑ¯‰om cª©e", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d\n",Ñc)))

929 
exô
;

931 
›ts
.
kìpAliveI¡îvÆ
 = 20;

932 
›ts
.
˛ón£ssi⁄
 = 1;

933 
›ts
.
u£∫ame
 = "testuser";

934 
›ts
.
∑ssw‹d
 = "testpassword";

935 i‡(
›ti⁄s
.
hac⁄√˘i⁄s
 !
NULL
)

937 
›ts
.
£rvîURIs
 = 
›ti⁄s
.
hac⁄√˘i⁄s
;

938 
›ts
.
£rvîURIcou¡
 = 
›ti⁄s
.
hacou¡
;

941 
›ts
.
s¶
 = &
s¶›ts
;

942 i‡(
›ti⁄s
.
£rvî_key_fûe
 !
NULL
)

943 
›ts
.
s¶
->
åu°St‹e
 = 
›ti⁄s
.
£rvî_key_fûe
;

945 
	`MyLog
(
LOGA_DEBUG
, "Connecting");

947 
rc
 = 
	`MQTTClõ¡_c⁄√˘
(
c
, &
›ts
);

948 i‡(!(
	`as£π
("GoodÑ¯‰om c⁄√˘", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc)))

949 
exô
;

951 
rc
 = 
	`MQTTClõ¡_subs¸ibe
(
c
, 
ã°_t›ic
, 
subsqos
);

952 i‡(!(
	`as£π
("GoodÑ¯‰om subs¸ibe", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc)))

954 
	`sögÀThªad_£ndAndRe˚ive
(
c
, 0, 
ã°_t›ic
);

955 
	`sögÀThªad_£ndAndRe˚ive
(
c
, 1, 
ã°_t›ic
);

956 
	`sögÀThªad_£ndAndRe˚ive
(
c
, 2, 
ã°_t›ic
);

958 
	`MyLog
(
LOGA_DEBUG
, "Stopping\n");

960 
rc
 = 
	`MQTTClõ¡_unsubs¸ibe
(
c
, 
ã°_t›ic
);

961 i‡(!(
	`as£π
("Unsubs¸ibêsuc˚ssful", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc)))

962 
exô
;

963 
rc
 = 
	`MQTTClõ¡_disc⁄√˘
(
c
, 0);

964 i‡(!(
	`as£π
("Disc⁄√˘ suc˚ssful", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc)))

965 
exô
;

969 
rc
 = 
	`MQTTClõ¡_c⁄√˘
(
c
, &
›ts
);

970 i‡(!(
	`as£π
("C⁄√˘ suc˚ssful", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc)))

971 
exô
;

972 
rc
 = 
	`MQTTClõ¡_disc⁄√˘
(
c
, 0);

973 i‡(!(
	`as£π
("Disc⁄√˘ suc˚ssful", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc)))

974 
exô
;

976 
exô
:

977 
	`MQTTClõ¡_de°roy
(&
c
);

978 
	`MyLog
(
LOGA_INFO
, "%s:Åest %s. %dÅestsÑun, %d failures.",

979 (
Áûuªs
 =0Ë? "∑s£d" : "Áûed", 
ã°«me
, 
ã°s
, failures);

980 
	`wrôe_ã°_ªsu…
();

981  
Áûuªs
;

982 
	}
}

990 
	$ã°3a_m
(
O±i⁄s
 
›ti⁄s
)

992 * 
ã°«me
 = "test3a_m";

993 * 
ã°_t›ic
 = "C clientÅest3a_m";

994 
subsqos
 = 2;

995 
MQTTClõ¡
 
c
;

996 
MQTTClõ¡_c⁄√˘O±i⁄s
 
›ts
 = 
MQTTClõ¡_c⁄√˘O±i⁄s_öôülizî
;

997 
MQTTClõ¡_wûlO±i⁄s
 
w›ts
 = 
MQTTClõ¡_wûlO±i⁄s_öôülizî
;

998 
MQTTClõ¡_SSLO±i⁄s
 
s¶›ts
 = 
MQTTClõ¡_SSLO±i⁄s_öôülizî
;

999 
rc
 = 0;

1001 
Áûuªs
 = 0;

1002 
	`MyLog
(
LOGA_INFO
, "StartingÅest 3a_m - Serveráuthentication - multi-threaded client using callbacks");

1003 
	`Ârötf
(
xml
, "<testcase classname=\"test3\"Çame=\"test 3a_m\"");

1004 
globÆ_°¨t_time
 = 
	`°¨t_˛ock
();

1006 
rc
 = 
	`MQTTClõ¡_¸óã
(&
c
, 
›ti⁄s
.
£rvî_auth_c⁄√˘i⁄
, "ã°3a_m", 
MQTTCLIENT_PERSISTENCE_DEFAULT
, 
≥rsi°í˚St‹e
);

1007 i‡(!(
	`as£π
("goodÑ¯‰om cª©e", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d\n",Ñc)))

1008 
exô
;

1010 
›ts
.
kìpAliveI¡îvÆ
 = 20;

1011 
›ts
.
˛ón£ssi⁄
 = 1;

1012 
›ts
.
u£∫ame
 = "testuser";

1013 
›ts
.
∑ssw‹d
 = "testpassword";

1014 i‡(
›ti⁄s
.
hac⁄√˘i⁄s
 !
NULL
)

1016 
›ts
.
£rvîURIs
 = 
›ti⁄s
.
hac⁄√˘i⁄s
;

1017 
›ts
.
£rvîURIcou¡
 = 
›ti⁄s
.
hacou¡
;

1020 
›ts
.
s¶
 = &
s¶›ts
;

1021 i‡(
›ti⁄s
.
£rvî_key_fûe
 !
NULL
)

1022 
›ts
.
s¶
->
åu°St‹e
 = 
›ti⁄s
.
£rvî_key_fûe
;

1024 
rc
 = 
	`MQTTClõ¡_£tCÆlbacks
(
c
, 
NULL
, NULL, 
mu…iThªad_mesßgeAºived
, 
mu…iThªad_dñivîyCom∂ëe
);

1025 i‡(!(
	`as£π
("GoodÑ¯‰om sëCÆlbacks", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc)))

1026 
exô
;

1028 
	`MyLog
(
LOGA_DEBUG
, "Connecting");

1030 
rc
 = 
	`MQTTClõ¡_c⁄√˘
(
c
, &
›ts
);

1031 i‡(!(
	`as£π
("GoodÑ¯‰om c⁄√˘", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc)))

1032 
exô
;

1034 
rc
 = 
	`MQTTClõ¡_subs¸ibe
(
c
, 
ã°_t›ic
, 
subsqos
);

1035 i‡(!(
	`as£π
("GoodÑ¯‰om subs¸ibe", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc)))

1036 
exô
;

1038 
	`mu…iThªad_£ndAndRe˚ive
(
c
, 0, 
ã°_t›ic
);

1039 
	`mu…iThªad_£ndAndRe˚ive
(
c
, 1, 
ã°_t›ic
);

1040 
	`mu…iThªad_£ndAndRe˚ive
(
c
, 2, 
ã°_t›ic
);

1042 
	`MyLog
(
LOGA_DEBUG
, "Stopping\n");

1044 
rc
 = 
	`MQTTClõ¡_unsubs¸ibe
(
c
, 
ã°_t›ic
);

1045 i‡(!(
	`as£π
("Unsubs¸ibêsuc˚ssful", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc)))

1046 
exô
;

1047 
rc
 = 
	`MQTTClõ¡_disc⁄√˘
(
c
, 0);

1048 i‡(!(
	`as£π
("Disc⁄√˘ suc˚ssful", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc)))

1049 
exô
;

1051 
exô
:

1052 
	`MQTTClõ¡_de°roy
(&
c
);

1053 
	`MyLog
(
LOGA_INFO
, "%s:Åest %s. %dÅestsÑun, %d failures.",

1054 (
Áûuªs
 =0Ë? "∑s£d" : "Áûed", 
ã°«me
, 
ã°s
, failures);

1055 
	`wrôe_ã°_ªsu…
();

1056  
Áûuªs
;

1057 
	}
}

1064 
	$ã°3b
(
O±i⁄s
 
›ti⁄s
)

1066 * 
ã°«me
 = "test3b";

1067 * 
ã°_t›ic
 = "C clientÅest3b";

1068 
subsqos
 = 2;

1069 
MQTTClõ¡
 
c
;

1070 
MQTTClõ¡_c⁄√˘O±i⁄s
 
›ts
 = 
MQTTClõ¡_c⁄√˘O±i⁄s_öôülizî
;

1071 
MQTTClõ¡_wûlO±i⁄s
 
w›ts
 = 
MQTTClõ¡_wûlO±i⁄s_öôülizî
;

1072 
MQTTClõ¡_SSLO±i⁄s
 
s¶›ts
 = 
MQTTClõ¡_SSLO±i⁄s_öôülizî
;

1073 
rc
 = 0;

1075 
Áûuªs
 = 0;

1076 
	`MyLog
(
LOGA_INFO
, "StartingÅest 3b - connectionÅo SSL MQTT server with clientauth=opt but client doesÇot have server cert");

1077 
	`Ârötf
(
xml
, "<testcase classname=\"test3\"Çame=\"test 3b\"");

1078 
globÆ_°¨t_time
 = 
	`°¨t_˛ock
();

1080 
rc
 = 
	`MQTTClõ¡_¸óã
(&
c
, 
›ti⁄s
.
£rvî_auth_c⁄√˘i⁄
, "ã°3b", 
MQTTCLIENT_PERSISTENCE_DEFAULT
, 
≥rsi°í˚St‹e
);

1081 i‡(!(
	`as£π
("goodÑ¯‰om cª©e", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d\n",Ñc)))

1082 
exô
;

1084 
›ts
.
kìpAliveI¡îvÆ
 = 20;

1085 
›ts
.
˛ón£ssi⁄
 = 1;

1086 
›ts
.
u£∫ame
 = "testuser";

1087 
›ts
.
∑ssw‹d
 = "testpassword";

1088 i‡(
›ti⁄s
.
hac⁄√˘i⁄s
 !
NULL
)

1090 
›ts
.
£rvîURIs
 = 
›ti⁄s
.
hac⁄√˘i⁄s
;

1091 
›ts
.
£rvîURIcou¡
 = 
›ti⁄s
.
hacou¡
;

1094 
›ts
.
s¶
 = &
s¶›ts
;

1096 
	`MyLog
(
LOGA_DEBUG
, "Connecting");

1098 
rc
 = 
	`MQTTClõ¡_c⁄√˘
(
c
, &
›ts
);

1099 i‡(!(
	`as£π
("GoodÑ¯‰om c⁄√˘", 
rc
 =
MQTTCLIENT_FAILURE
, "rc was %d",Ñc)))

1100 
exô
;

1102 
exô
:

1103 
	`MQTTClõ¡_de°roy
(&
c
);

1104 
	`MyLog
(
LOGA_INFO
, "%s:Åest %s. %dÅestsÑun, %d failures.",

1105 (
Áûuªs
 =0Ë? "∑s£d" : "Áûed", 
ã°«me
, 
ã°s
, failures);

1106 
	`wrôe_ã°_ªsu…
();

1107  
Áûuªs
;

1108 
	}
}

1116 
	$ã°4_s
(
O±i⁄s
 
›ti⁄s
)

1118 * 
ã°«me
 = "test4_s";

1119 * 
ã°_t›ic
 = "C clientÅest4_s";

1120 
subsqos
 = 2;

1121 
MQTTClõ¡
 
c
;

1122 
MQTTClõ¡_c⁄√˘O±i⁄s
 
›ts
 = 
MQTTClõ¡_c⁄√˘O±i⁄s_öôülizî
;

1123 
MQTTClõ¡_wûlO±i⁄s
 
w›ts
 = 
MQTTClõ¡_wûlO±i⁄s_öôülizî
;

1124 
MQTTClõ¡_SSLO±i⁄s
 
s¶›ts
 = 
MQTTClõ¡_SSLO±i⁄s_öôülizî
;

1125 
rc
 = 0;

1127 
Áûuªs
 = 0;

1128 
	`MyLog
(
LOGA_INFO
, "StartingÅest 4_s -áccept invalid server certificates - singleÅhreaded");

1129 
	`Ârötf
(
xml
, "<testcase classname=\"test3\"Çame=\"test 4_s\"");

1130 
globÆ_°¨t_time
 = 
	`°¨t_˛ock
();

1132 
rc
 = 
	`MQTTClõ¡_¸óã
(&
c
, 
›ti⁄s
.
£rvî_auth_c⁄√˘i⁄
, "ã°4_s", 
MQTTCLIENT_PERSISTENCE_DEFAULT
, 
≥rsi°í˚St‹e
);

1133 i‡(!(
	`as£π
("goodÑ¯‰om cª©e", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d\n",Ñc)))

1134 
exô
;

1136 
›ts
.
kìpAliveI¡îvÆ
 = 20;

1137 
›ts
.
˛ón£ssi⁄
 = 1;

1138 
›ts
.
u£∫ame
 = "testuser";

1139 
›ts
.
∑ssw‹d
 = "testpassword";

1140 i‡(
›ti⁄s
.
hac⁄√˘i⁄s
 !
NULL
)

1142 
›ts
.
£rvîURIs
 = 
›ti⁄s
.
hac⁄√˘i⁄s
;

1143 
›ts
.
£rvîURIcou¡
 = 
›ti⁄s
.
hacou¡
;

1146 
›ts
.
s¶
 = &
s¶›ts
;

1147 
›ts
.
s¶
->
íabÀSîvîCîtAuth
 = 0;

1149 
	`MyLog
(
LOGA_DEBUG
, "Connecting");

1151 
rc
 = 
	`MQTTClõ¡_c⁄√˘
(
c
, &
›ts
);

1152 i‡(!(
	`as£π
("GoodÑ¯‰om c⁄√˘", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc)))

1153 
exô
;

1154 
rc
 = 
	`MQTTClõ¡_subs¸ibe
(
c
, 
ã°_t›ic
, 
subsqos
);

1155 i‡(!(
	`as£π
("GoodÑ¯‰om subs¸ibe", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc)))

1156 
exô
;

1158 
	`sögÀThªad_£ndAndRe˚ive
(
c
, 0, 
ã°_t›ic
);

1159 
	`sögÀThªad_£ndAndRe˚ive
(
c
, 1, 
ã°_t›ic
);

1160 
	`sögÀThªad_£ndAndRe˚ive
(
c
, 2, 
ã°_t›ic
);

1162 
	`MyLog
(
LOGA_DEBUG
, "Stopping\n");

1164 
rc
 = 
	`MQTTClõ¡_unsubs¸ibe
(
c
, 
ã°_t›ic
);

1165 i‡(!(
	`as£π
("Unsubs¸ibêsuc˚ssful", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc)))

1166 
exô
;

1167 
rc
 = 
	`MQTTClõ¡_disc⁄√˘
(
c
, 0);

1168 i‡(!(
	`as£π
("Disc⁄√˘ suc˚ssful", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc)))

1169 
exô
;

1172 
rc
 = 
	`MQTTClõ¡_c⁄√˘
(
c
, &
›ts
);

1173 i‡(!(
	`as£π
("C⁄√˘ suc˚ssful", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc)))

1174 
exô
;

1175 
rc
 = 
	`MQTTClõ¡_disc⁄√˘
(
c
, 0);

1176 i‡(!(
	`as£π
("Disc⁄√˘ suc˚ssful", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc)))

1177 
exô
;

1179 
exô
:

1180 
	`MQTTClõ¡_de°roy
(&
c
);

1181 
	`MyLog
(
LOGA_INFO
, "%s:Åest %s. %dÅestsÑun, %d failures.",

1182 (
Áûuªs
 =0Ë? "∑s£d" : "Áûed", 
ã°«me
, 
ã°s
, failures);

1183 
	`wrôe_ã°_ªsu…
();

1184  
Áûuªs
;

1185 
	}
}

1193 
	$ã°4_m
(
O±i⁄s
 
›ti⁄s
)

1195 * 
ã°«me
 = "test4_m";

1196 * 
ã°_t›ic
 = "C clientÅest4_m";

1197 
subsqos
 = 2;

1198 
MQTTClõ¡
 
c
;

1199 
MQTTClõ¡_c⁄√˘O±i⁄s
 
›ts
 = 
MQTTClõ¡_c⁄√˘O±i⁄s_öôülizî
;

1200 
MQTTClõ¡_wûlO±i⁄s
 
w›ts
 = 
MQTTClõ¡_wûlO±i⁄s_öôülizî
;

1201 
MQTTClõ¡_SSLO±i⁄s
 
s¶›ts
 = 
MQTTClõ¡_SSLO±i⁄s_öôülizî
;

1202 
rc
 = 0;

1204 
Áûuªs
 = 0;

1205 
	`MyLog
(
LOGA_INFO
, "StartingÅest 4_m -áccept invalid server certificates - multi-threaded");

1206 
	`Ârötf
(
xml
, "<testcase classname=\"test3\"Çame=\"test 4_m\"");

1207 
globÆ_°¨t_time
 = 
	`°¨t_˛ock
();

1209 
rc
 = 
	`MQTTClõ¡_¸óã
(&
c
, 
›ti⁄s
.
£rvî_auth_c⁄√˘i⁄
, "ã°4_m", 
MQTTCLIENT_PERSISTENCE_DEFAULT
, 
≥rsi°í˚St‹e
);

1210 i‡(!(
	`as£π
("goodÑ¯‰om cª©e", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d\n",Ñc)))

1211 
exô
;

1213 
›ts
.
kìpAliveI¡îvÆ
 = 20;

1214 
›ts
.
˛ón£ssi⁄
 = 1;

1215 
›ts
.
u£∫ame
 = "testuser";

1216 
›ts
.
∑ssw‹d
 = "testpassword";

1217 i‡(
›ti⁄s
.
hac⁄√˘i⁄s
 !
NULL
)

1219 
›ts
.
£rvîURIs
 = 
›ti⁄s
.
hac⁄√˘i⁄s
;

1220 
›ts
.
£rvîURIcou¡
 = 
›ti⁄s
.
hacou¡
;

1223 
›ts
.
s¶
 = &
s¶›ts
;

1224 
›ts
.
s¶
->
íabÀSîvîCîtAuth
 = 0;

1226 
rc
 = 
	`MQTTClõ¡_£tCÆlbacks
(
c
, 
NULL
, NULL, 
mu…iThªad_mesßgeAºived
, 
mu…iThªad_dñivîyCom∂ëe
);

1227 i‡(!(
	`as£π
("GoodÑ¯‰om sëCÆlbacks", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc)))

1228 
exô
;

1230 
	`MyLog
(
LOGA_DEBUG
, "Connecting");

1232 
rc
 = 
	`MQTTClõ¡_c⁄√˘
(
c
, &
›ts
);

1233 i‡(!(
	`as£π
("GoodÑ¯‰om c⁄√˘", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc)))

1234 
exô
;

1235 
rc
 = 
	`MQTTClõ¡_subs¸ibe
(
c
, 
ã°_t›ic
, 
subsqos
);

1236 i‡(!(
	`as£π
("GoodÑ¯‰om subs¸ibe", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc)))

1237 
exô
;

1239 
	`mu…iThªad_£ndAndRe˚ive
(
c
, 0, 
ã°_t›ic
);

1240 
	`mu…iThªad_£ndAndRe˚ive
(
c
, 1, 
ã°_t›ic
);

1241 
	`mu…iThªad_£ndAndRe˚ive
(
c
, 2, 
ã°_t›ic
);

1243 
	`MyLog
(
LOGA_DEBUG
, "Stopping");

1245 
rc
 = 
	`MQTTClõ¡_unsubs¸ibe
(
c
, 
ã°_t›ic
);

1246 i‡(!(
	`as£π
("Unsubs¸ibêsuc˚ssful", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc)))

1247 
exô
;

1248 
rc
 = 
	`MQTTClõ¡_disc⁄√˘
(
c
, 0);

1249 i‡(!(
	`as£π
("Disc⁄√˘ suc˚ssful", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc)))

1250 
exô
;

1252 
exô
:

1253 
	`MQTTClõ¡_de°roy
(&
c
);

1255 
	`MyLog
(
LOGA_INFO
, "%s:Åest %s. %dÅestsÑun, %d failures.",

1256 (
Áûuªs
 =0Ë? "∑s£d" : "Áûed", 
ã°«me
, 
ã°s
, failures);

1257 
	`wrôe_ã°_ªsu…
();

1258  
Áûuªs
;

1259 
	}
}

1267 
	$ã°5a
(
O±i⁄s
 
›ti⁄s
)

1269 * 
ã°«me
 = "test5a";

1270 * 
ã°_t›ic
 = "C client SSLÅest5a";

1271 
subsqos
 = 2;

1272 
MQTTClõ¡
 
c
;

1273 
MQTTClõ¡_c⁄√˘O±i⁄s
 
›ts
 = 
MQTTClõ¡_c⁄√˘O±i⁄s_öôülizî
;

1274 
MQTTClõ¡_wûlO±i⁄s
 
w›ts
 = 
MQTTClõ¡_wûlO±i⁄s_öôülizî
;

1275 
MQTTClõ¡_SSLO±i⁄s
 
s¶›ts
 = 
MQTTClõ¡_SSLO±i⁄s_öôülizî
;

1276 
rc
 = 0;

1278 
Áûuªs
 = 0;

1279 
	`MyLog
(
LOGA_INFO
, "Starting SSLÅest 5a - Anonymous ciphers - serveráuthentication disabled");

1280 
	`Ârötf
(
xml
, "<testcase classname=\"test3\"Çame=\"test 5a\"");

1281 
globÆ_°¨t_time
 = 
	`°¨t_˛ock
();

1283 
rc
 = 
	`MQTTClõ¡_¸óã
(&
c
, 
›ti⁄s
.
™⁄_c⁄√˘i⁄
, "ã°5a", 
MQTTCLIENT_PERSISTENCE_DEFAULT
, 
≥rsi°í˚St‹e
);

1284 i‡(!(
	`as£π
("goodÑ¯‰om cª©e", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d\n",Ñc)))

1285 
exô
;

1287 
›ts
.
kìpAliveI¡îvÆ
 = 20;

1288 
›ts
.
˛ón£ssi⁄
 = 1;

1289 
›ts
.
u£∫ame
 = "testuser";

1290 
›ts
.
∑ssw‹d
 = "testpassword";

1291 i‡(
›ti⁄s
.
hac⁄√˘i⁄s
 !
NULL
)

1293 
›ts
.
£rvîURIs
 = 
›ti⁄s
.
hac⁄√˘i⁄s
;

1294 
›ts
.
£rvîURIcou¡
 = 
›ti⁄s
.
hacou¡
;

1297 
›ts
.
s¶
 = &
s¶›ts
;

1298 
›ts
.
s¶
->
íabÀdCùhîSuôes
 = "aNULL";

1299 
›ts
.
s¶
->
íabÀSîvîCîtAuth
 = 0;

1301 
	`MyLog
(
LOGA_DEBUG
, "Connecting");

1303 
rc
 = 
	`MQTTClõ¡_c⁄√˘
(
c
, &
›ts
);

1304 i‡(!(
	`as£π
("GoodÑ¯‰om c⁄√˘", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc)))

1305 
exô
;

1306 
rc
 = 
	`MQTTClõ¡_subs¸ibe
(
c
, 
ã°_t›ic
, 
subsqos
);

1307 i‡(!(
	`as£π
("GoodÑ¯‰om subs¸ibe", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc)))

1308 
exô
;

1310 
	`sögÀThªad_£ndAndRe˚ive
(
c
, 0, 
ã°_t›ic
);

1311 
	`sögÀThªad_£ndAndRe˚ive
(
c
, 1, 
ã°_t›ic
);

1312 
	`sögÀThªad_£ndAndRe˚ive
(
c
, 2, 
ã°_t›ic
);

1314 
	`MyLog
(
LOGA_DEBUG
, "Stopping\n");

1316 
rc
 = 
	`MQTTClõ¡_unsubs¸ibe
(
c
, 
ã°_t›ic
);

1317 i‡(!(
	`as£π
("Unsubs¸ibêsuc˚ssful", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc)))

1318 
exô
;

1319 
rc
 = 
	`MQTTClõ¡_disc⁄√˘
(
c
, 0);

1320 i‡(!(
	`as£π
("Disc⁄√˘ suc˚ssful", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc)))

1321 
exô
;

1325 
rc
 = 
	`MQTTClõ¡_c⁄√˘
(
c
, &
›ts
);

1326 i‡(!(
	`as£π
("C⁄√˘ suc˚ssful", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc)))

1327 
exô
;

1328 
rc
 = 
	`MQTTClõ¡_disc⁄√˘
(
c
, 0);

1329 i‡(!(
	`as£π
("Disc⁄√˘ suc˚ssful", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc)))

1330 
exô
;

1332 
exô
:

1333 
	`MQTTClõ¡_de°roy
(&
c
);

1334 
	`MyLog
(
LOGA_INFO
, "%s:Åest %s. %dÅestsÑun, %d failures.",

1335 (
Áûuªs
 =0Ë? "∑s£d" : "Áûed", 
ã°«me
, 
ã°s
, failures);

1336 
	`wrôe_ã°_ªsu…
();

1337  
Áûuªs
;

1338 
	}
}

1346 
	$ã°5b
(
O±i⁄s
 
›ti⁄s
)

1348 * 
ã°«me
 = "test5b";

1349 * 
ã°_t›ic
 = "C client SSLÅest5b";

1350 
subsqos
 = 2;

1351 
MQTTClõ¡
 
c
;

1352 
MQTTClõ¡_c⁄√˘O±i⁄s
 
›ts
 = 
MQTTClõ¡_c⁄√˘O±i⁄s_öôülizî
;

1353 
MQTTClõ¡_wûlO±i⁄s
 
w›ts
 = 
MQTTClõ¡_wûlO±i⁄s_öôülizî
;

1354 
MQTTClõ¡_SSLO±i⁄s
 
s¶›ts
 = 
MQTTClõ¡_SSLO±i⁄s_öôülizî
;

1355 
rc
 = 0;

1357 
Áûuªs
 = 0;

1358 
	`MyLog
(
LOGA_INFO
, "Starting SSLÅest 5b - Anonymous ciphers - serveráuthenticationÉnabled");

1359 
	`Ârötf
(
xml
, "<testcase classname=\"test3\"Çame=\"test 5b\"");

1360 
globÆ_°¨t_time
 = 
	`°¨t_˛ock
();

1362 
rc
 = 
	`MQTTClõ¡_¸óã
(&
c
, 
›ti⁄s
.
™⁄_c⁄√˘i⁄
, "ã°5b", 
MQTTCLIENT_PERSISTENCE_DEFAULT
, 
≥rsi°í˚St‹e
);

1363 i‡(!(
	`as£π
("goodÑ¯‰om cª©e", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d\n",Ñc)))

1364 
exô
;

1366 
›ts
.
kìpAliveI¡îvÆ
 = 20;

1367 
›ts
.
˛ón£ssi⁄
 = 1;

1368 
›ts
.
u£∫ame
 = "testuser";

1369 
›ts
.
∑ssw‹d
 = "testpassword";

1370 i‡(
›ti⁄s
.
hac⁄√˘i⁄s
 !
NULL
)

1372 
›ts
.
£rvîURIs
 = 
›ti⁄s
.
hac⁄√˘i⁄s
;

1373 
›ts
.
£rvîURIcou¡
 = 
›ti⁄s
.
hacou¡
;

1376 
›ts
.
s¶
 = &
s¶›ts
;

1380 
›ts
.
s¶
->
íabÀdCùhîSuôes
 = "aNULL";

1381 
›ts
.
s¶
->
íabÀSîvîCîtAuth
 = 1;

1383 
	`MyLog
(
LOGA_DEBUG
, "Connecting");

1385 
rc
 = 
	`MQTTClõ¡_c⁄√˘
(
c
, &
›ts
);

1386 i‡(!(
	`as£π
("GoodÑ¯‰om c⁄√˘", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc)))

1387 
exô
;

1388 
rc
 = 
	`MQTTClõ¡_subs¸ibe
(
c
, 
ã°_t›ic
, 
subsqos
);

1389 i‡(!(
	`as£π
("GoodÑ¯‰om subs¸ibe", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc)))

1390 
exô
;

1392 
	`sögÀThªad_£ndAndRe˚ive
(
c
, 0, 
ã°_t›ic
);

1393 
	`sögÀThªad_£ndAndRe˚ive
(
c
, 1, 
ã°_t›ic
);

1394 
	`sögÀThªad_£ndAndRe˚ive
(
c
, 2, 
ã°_t›ic
);

1396 
	`MyLog
(
LOGA_DEBUG
, "Stopping\n");

1398 
rc
 = 
	`MQTTClõ¡_unsubs¸ibe
(
c
, 
ã°_t›ic
);

1399 i‡(!(
	`as£π
("Unsubs¸ibêsuc˚ssful", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc)))

1400 
exô
;

1401 
rc
 = 
	`MQTTClõ¡_disc⁄√˘
(
c
, 0);

1402 i‡(!(
	`as£π
("Disc⁄√˘ suc˚ssful", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc)))

1403 
exô
;

1406 
rc
 = 
	`MQTTClõ¡_c⁄√˘
(
c
, &
›ts
);

1407 i‡(!(
	`as£π
("C⁄√˘ suc˚ssful", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc)))

1408 
exô
;

1409 
rc
 = 
	`MQTTClõ¡_disc⁄√˘
(
c
, 0);

1410 i‡(!(
	`as£π
("Disc⁄√˘ suc˚ssful", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc)))

1411 
exô
;

1413 
exô
:

1414 
	`MQTTClõ¡_de°roy
(&
c
);

1415 
	`MyLog
(
LOGA_INFO
, "%s:Åest %s. %dÅestsÑun, %d failures.",

1416 (
Áûuªs
 =0Ë? "∑s£d" : "Áûed", 
ã°«me
, 
ã°s
, failures);

1417 
	`wrôe_ã°_ªsu…
();

1418  
Áûuªs
;

1419 
	}
}

1428 
	$ã°5c
(
O±i⁄s
 
›ti⁄s
)

1430 * 
ã°«me
 = "test5c";

1431 * 
ã°_t›ic
 = "C client SSLÅest5c";

1432 
subsqos
 = 2;

1433 
MQTTClõ¡
 
c
;

1434 
MQTTClõ¡_c⁄√˘O±i⁄s
 
›ts
 = 
MQTTClõ¡_c⁄√˘O±i⁄s_öôülizî
;

1435 
MQTTClõ¡_wûlO±i⁄s
 
w›ts
 = 
MQTTClõ¡_wûlO±i⁄s_öôülizî
;

1436 
MQTTClõ¡_SSLO±i⁄s
 
s¶›ts
 = 
MQTTClõ¡_SSLO±i⁄s_öôülizî
;

1437 
rc
 = 0;

1439 
Áûuªs
 = 0;

1440 
	`MyLog
(
LOGA_INFO
, "Starting SSLÅest 5c - Anonymous ciphers - clientÇot usingánonymous cipher");

1441 
	`Ârötf
(
xml
, "<testcase classname=\"test3\"Çame=\"test 5c\"");

1442 
globÆ_°¨t_time
 = 
	`°¨t_˛ock
();

1444 
rc
 = 
	`MQTTClõ¡_¸óã
(&
c
, 
›ti⁄s
.
™⁄_c⁄√˘i⁄
, "ã°5c", 
MQTTCLIENT_PERSISTENCE_DEFAULT
, 
≥rsi°í˚St‹e
);

1445 i‡(!(
	`as£π
("goodÑ¯‰om cª©e", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d\n",Ñc)))

1446 
exô
;

1448 
›ts
.
kìpAliveI¡îvÆ
 = 20;

1449 
›ts
.
˛ón£ssi⁄
 = 1;

1450 
›ts
.
u£∫ame
 = "testuser";

1451 
›ts
.
∑ssw‹d
 = "testpassword";

1452 i‡(
›ti⁄s
.
hac⁄√˘i⁄s
 !
NULL
)

1454 
›ts
.
£rvîURIs
 = 
›ti⁄s
.
hac⁄√˘i⁄s
;

1455 
›ts
.
£rvîURIcou¡
 = 
›ti⁄s
.
hacou¡
;

1458 
›ts
.
s¶
 = &
s¶›ts
;

1462 
›ts
.
s¶
->
íabÀdCùhîSuôes
 = "DEFAULT";

1463 
›ts
.
s¶
->
íabÀSîvîCîtAuth
 = 0;

1465 
	`MyLog
(
LOGA_DEBUG
, "Connecting");

1467 
rc
 = 
	`MQTTClõ¡_c⁄√˘
(
c
, &
›ts
);

1468 i‡(!(
	`as£π
("GoodÑ¯‰om c⁄√˘", 
rc
 =
MQTTCLIENT_FAILURE
, "rc was %d",Ñc)))

1469 
exô
;

1471 
exô
:

1472 
	`MQTTClõ¡_de°roy
(&
c
);

1473 
	`MyLog
(
LOGA_INFO
, "%s:Åest %s. %dÅestsÑun, %d failures.",

1474 (
Áûuªs
 =0Ë? "∑s£d" : "Áûed", 
ã°«me
, 
ã°s
, failures);

1475 
	`wrôe_ã°_ªsu…
();

1476  
Áûuªs
;

1477 
	}
}

1481 * 
	m˛õ¡ID
;

1482 * 
	mu£∫ame
;

1483 * 
	m∑ssw‹d
;

1484 
	m˛ón£ssi⁄
 : 1;

1485 
	mc⁄√˘ed
 : 1;

1486 
	mgood
 : 1;

1487 
	mpög_out°™dög
 : 1;

1488 
	mc⁄√˘_°©e
 : 2;

1489 
	msockë
;

1490 
	mmsgID
;

1491 
	mkìpAliveI¡îvÆ
;

1492 
	mªåyI¡îvÆ
;

1493 
	mmaxInÊightMesßges
;

1494 
time_t
 
	mœ°C⁄è˘
;

1495 * 
	mwûl
;

1496 * 
	möboundMsgs
;

1497 * 
	moutboundMsgs
;

1498 * 
	mmesßgeQueue
;

1499 * 
	mph™dÀ
;

1500 
MQTTClõ¡_≥rsi°í˚
* 
	m≥rsi°í˚
;

1501 
	mc⁄√˘O±i⁄sVîsi⁄
;

1502 } 
	tClõ¡s
;

1506 * 
	m£rvîURI
;

1507 
Clõ¡s
* 
	mc
;

1508 
MQTTClõ¡_c⁄√˘i⁄Lo°
* 
	m˛
;

1509 
MQTTClõ¡_mesßgeAºived
* 
	mma
;

1510 
MQTTClõ¡_dñivîyCom∂ëe
* 
	mdc
;

1511 * 
	mc⁄ãxt
;

1513 
	mc⁄√˘_£m
;

1514 
	mrc
;

1515 
	mc⁄«ck_£m
;

1516 
	msuback_£m
;

1517 
	munsuback_£m
;

1518 * 
	m∑ck
;

1519 } 
	tMQTTClõ¡s
;

1522 
	$maö
(
¨gc
, ** 
¨gv
)

1524 * 
numã°s
 = &
ã°s
;

1525 
rc
 = 0;

1526 (*
ã°s
[])(Ë{
NULL
, 
ã°1
, 
ã°2a_s
, 
ã°2a_m
, 
ã°2b
, 
ã°2c
, 
ã°3a_s
, 
ã°3a_m
, 
ã°3b
, 
ã°4_s
, 
ã°4_m
, };

1529 
xml
 = 
	`f›í
("TEST-test3.xml", "w");

1530 
	`Ârötf
(
xml
, "<ã°suôê«me=\"ã°3\"Åe°s=\"%d\">\n", ()(
	`ARRAY_SIZE
(
ã°s
) - 1));

1532 
	`£ãnv
("MQTT_C_CLIENT_TRACE", "ON", 1);

1533 
	`£ãnv
("MQTT_C_CLIENT_TRACE_LEVEL", "ERROR", 1);

1534 
	`gë›ts
(
¨gc
, 
¨gv
);

1535 i‡(
›ti⁄s
.
ã°_no
 == 0)

1537 
›ti⁄s
.
ã°_no
 = 1; o±i⁄s.ã°_nÿ< 
	`ARRAY_SIZE
(
ã°s
); ++options.test_no)

1538 
rc
 +
ã°s
[
›ti⁄s
.
ã°_no
](options);

1541 
rc
 = 
ã°s
[
›ti⁄s
.
ã°_no
](options);

1543 
	`MyLog
(
LOGA_INFO
, "TŸÆÅe°†run: %d", *
numã°s
);

1544 i‡(
rc
 == 0)

1545 
	`MyLog
(
LOGA_INFO
, "verdictÖass");

1547 
	`MyLog
(
LOGA_INFO
, "verdict fail");

1549 
	`Ârötf
(
xml
, "</testsuite>\n");

1550 
	`f˛o£
(
xml
);

1552  
rc
;

1553 
	}
}

	@paho-c/test/test4.c

31 
	~"MQTTAsync.h
"

32 
	~<°rög.h
>

33 
	~<°dlib.h
>

35 #i‡!
deföed
(
_WINDOWS
)

36 
	~<sys/time.h
>

37 
	~<sys/sockë.h
>

38 
	~<uni°d.h
>

39 
	~<î∫o.h
>

41 
	~<wösock2.h
>

42 
	~<ws2t˝ù.h
>

43 
	#MAXHOSTNAMELEN
 256

	)

44 
	#EAGAIN
 
WSAEWOULDBLOCK


	)

45 
	#EINTR
 
WSAEINTR


	)

46 
	#EINPROGRESS
 
WSAEINPROGRESS


	)

47 
	#EWOULDBLOCK
 
WSAEWOULDBLOCK


	)

48 
	#ENOTCONN
 
WSAENOTCONN


	)

49 
	#ECONNRESET
 
WSAECONNRESET


	)

52 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ ◊[0]))

	)

54 
	$ußge
()

56 
	`¥ötf
("help!!\n");

57 
	`exô
(-1);

58 
	}
}

60 
	sO±i⁄s


62 * 
	mc⁄√˘i⁄
;

63 
	mvîbo£
;

64 
	mã°_no
;

65 
	msize
;

66 
	mMQTTVîsi⁄
;

67 
	môî©i⁄s
;

68 } 
	g›ti⁄s
 =

74 
MQTTVERSION_DEFAULT
,

78 
	$gë›ts
(
¨gc
, ** 
¨gv
)

80 
cou¡
 = 1;

82 
cou¡
 < 
¨gc
)

84 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--test_no") == 0)

86 i‡(++
cou¡
 < 
¨gc
)

87 
›ti⁄s
.
ã°_no
 = 
	`©oi
(
¨gv
[
cou¡
]);

89 
	`ußge
();

91 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--size") == 0)

93 i‡(++
cou¡
 < 
¨gc
)

94 
›ti⁄s
.
size
 = 
	`©oi
(
¨gv
[
cou¡
]);

96 
	`ußge
();

98 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--connection") == 0)

100 i‡(++
cou¡
 < 
¨gc
)

101 
›ti⁄s
.
c⁄√˘i⁄
 = 
¨gv
[
cou¡
];

103 
	`ußge
();

105 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--MQTTversion") == 0)

107 i‡(++
cou¡
 < 
¨gc
)

109 
›ti⁄s
.
MQTTVîsi⁄
 = 
	`©oi
(
¨gv
[
cou¡
]);

110 
	`¥ötf
("£âög MQTT vîsi⁄Åÿ%d\n", 
›ti⁄s
.
MQTTVîsi⁄
);

113 
	`ußge
();

115 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--iterations") == 0)

117 i‡(++
cou¡
 < 
¨gc
)

118 
›ti⁄s
.
ôî©i⁄s
 = 
	`©oi
(
¨gv
[
cou¡
]);

120 
	`ußge
();

122 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--verbose") == 0)

123 
›ti⁄s
.
vîbo£
 = 1;

124 
cou¡
++;

126 
	}
}

129 
	~<logaX.h
>

130 
	#MyLog
 
logaLöe


	)

132 
	#LOGA_DEBUG
 0

	)

133 
	#LOGA_INFO
 1

	)

134 
	~<°d¨g.h
>

135 
	~<time.h
>

136 
	~<sys/timeb.h
>

137 
	$MyLog
(
LOGA_Àvñ
, * 
f‹m©
, ...)

139 
msg_buf
[256];

140 
va_li°
 
¨gs
;

141 
timeb
 
ts
;

143 
tm
 *
timeöfo
;

145 i‡(
LOGA_Àvñ
 =
LOGA_DEBUG
 && 
›ti⁄s
.
vîbo£
 == 0)

148 
	`·ime
(&
ts
);

149 
timeöfo
 = 
	`loˇ…ime
(&
ts
.
time
);

150 
	`°r·ime
(
msg_buf
, 80, "%Y%m%d %H%M%S", 
timeöfo
);

152 
	`•rötf
(&
msg_buf
[
	`°æí
(msg_buf)], ".%.3hu ", 
ts
.
mûlôm
);

154 
	`va_°¨t
(
¨gs
, 
f‹m©
);

155 
	`v¢¥ötf
(&
msg_buf
[
	`°æí
(msg_buf)], (msg_bufË- såÀn(msg_buf), 
f‹m©
, 
¨gs
);

156 
	`va_íd
(
¨gs
);

158 
	`¥ötf
("%s\n", 
msg_buf
);

159 
	`fÊush
(
°dout
);

160 
	}
}

164 #i‡
deföed
(
WIN32
Ë|| deföed(
_WINDOWS
)

165 
	#mq¶ìp
(
A
Ë
	`SÀï
(1000*A)

	)

166 
	#START_TIME_TYPE
 
DWORD


	)

167 
DWORD
 
	g°¨t_time
 = 0;

168 
START_TIME_TYPE
 
	$°¨t_˛ock
()

170  
	`GëTickCou¡
();

171 
	}
}

172 #ñi‡
deföed
(
AIX
)

173 
	#mq¶ìp
 
¶ìp


	)

174 
	#START_TIME_TYPE
 
time•ec


	)

175 
START_TIME_TYPE
 
	$°¨t_˛ock
()

177 
time•ec
 
°¨t
;

178 
	`˛ock_gëtime
(
CLOCK_REALTIME
, &
°¨t
);

179  
°¨t
;

180 
	}
}

182 
	#mq¶ìp
 
¶ìp


	)

183 
	#START_TIME_TYPE
 
timevÆ


	)

185 
START_TIME_TYPE
 
	$°¨t_˛ock
()

187 
timevÆ
 
°¨t_time
;

188 
	`gëtimeofday
(&
°¨t_time
, 
NULL
);

189  
°¨t_time
;

190 
	}
}

194 #i‡
deföed
(
WIN32
)

195 
	$ñ≠£d
(
START_TIME_TYPE
 
°¨t_time
)

197  
	`GëTickCou¡
(Ë- 
°¨t_time
;

198 
	}
}

199 #ñi‡
deföed
(
AIX
)

200 
	#as£π
(
a
)

	)

201 
	$ñ≠£d
(
time•ec
 
°¨t
)

203 
time•ec
 
now
, 
ªs
;

205 
	`˛ock_gëtime
(
CLOCK_REALTIME
, &
now
);

206 
	`¡imîsub
(
now
, 
°¨t
, 
ªs
);

207  (
ªs
.
tv_£c
)*1000L + (ªs.
tv_n£c
)/1000000L;

208 
	}
}

210 
	$ñ≠£d
(
START_TIME_TYPE
 
°¨t_time
)

212 
timevÆ
 
now
, 
ªs
;

214 
	`gëtimeofday
(&
now
, 
NULL
);

215 
	`timîsub
(&
now
, &
°¨t_time
, &
ªs
);

216  (
ªs
.
tv_£c
)*1000 + (ªs.
tv_u£c
)/1000;

217 
	}
}

220 
	#as£π
(
a
, 
b
, 
c
, 
d
Ë
	`myas£π
(
__FILE__
, 
__LINE__
,á, b, c, d)

	)

221 
	#as£π1
(
a
, 
b
, 
c
, 
d
, 
e
Ë
	`myas£π
(
__FILE__
, 
__LINE__
,á, b, c, d,É)

	)

223 
	gã°s
 = 0;

224 
	gÁûuªs
 = 0;

225 
FILE
* 
	gxml
;

226 
START_TIME_TYPE
 
	gglobÆ_°¨t_time
;

227 
	gouçut
[3000];

228 * 
	gcur_ouçut
 = 
ouçut
;

230 
	$wrôe_ã°_ªsu…
()

232 
duøti⁄
 = 
	`ñ≠£d
(
globÆ_°¨t_time
);

234 
	`Ârötf
(
xml
, "Åime=\"%ld.%.3ld\" >\n", 
duøti⁄
 / 1000, duration % 1000);

235 i‡(
cur_ouçut
 !
ouçut
)

237 
	`Ârötf
(
xml
, "%s", 
ouçut
);

238 
cur_ouçut
 = 
ouçut
;

240 
	`Ârötf
(
xml
, "</testcase>\n");

241 
	}
}

243 
	$myas£π
(* 
fûíame
, 
löío
, * 
des¸ùti⁄
, 
vÆue
, * 
f‹m©
, ...)

245 ++
ã°s
;

246 i‡(!
vÆue
)

248 
va_li°
 
¨gs
;

250 ++
Áûuªs
;

251 
	`¥ötf
("As£πi⁄ faûed, fûê%s,Üöê%d, des¸ùti⁄: %s\n", 
fûíame
, 
löío
, 
des¸ùti⁄
);

253 
	`va_°¨t
(
¨gs
, 
f‹m©
);

254 
	`v¥ötf
(
f‹m©
, 
¨gs
);

255 
	`va_íd
(
¨gs
);

257 
cur_ouçut
 +
	`•rötf
(cur_output, "<failureÅype=\"%s\">file %s,Üine %d </failure>\n",

258 
des¸ùti⁄
, 
fûíame
, 
löío
);

261 
	`MyLog
(
LOGA_DEBUG
, "As£πi⁄ suc˚eded, fûê%s,Üöê%d, des¸ùti⁄: %s", 
fûíame
, 
löío
, 
des¸ùti⁄
);

262 
	}
}

264 vﬁ©ûê
	gã°_föished
 = 0;

266 * 
	gã°_t›ic
 = "asyncÅestÅopic";

269 
	$ã°1_⁄Disc⁄√˘
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

271 
MQTTAsync
 
c
 = (MQTTAsync)
c⁄ãxt
;

272 
	`MyLog
(
LOGA_DEBUG
, "I¿⁄Disc⁄√˘ cÆlback %p", 
c
);

273 
ã°_föished
 = 1;

274 
	}
}

277 
	$ã°1_⁄Unsubs¸ibe
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

279 
MQTTAsync
 
c
 = (MQTTAsync)
c⁄ãxt
;

280 
MQTTAsync_disc⁄√˘O±i⁄s
 
›ts
 = 
MQTTAsync_disc⁄√˘O±i⁄s_öôülizî
;

281 
rc
;

283 
	`MyLog
(
LOGA_DEBUG
, "I¿⁄Unsubs¸ibê⁄Suc˚s†ˇŒback %p", 
c
);

284 
›ts
.
⁄Suc˚ss
 = 
ã°1_⁄Disc⁄√˘
;

285 
›ts
.
c⁄ãxt
 = 
c
;

287 
rc
 = 
	`MQTTAsync_disc⁄√˘
(
c
, &
›ts
);

288 
	`as£π
("Disc⁄√˘ suc˚ssful", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

289 
	}
}

292 
	$ã°1_mesßgeAºived
(* 
c⁄ãxt
, * 
t›icName
, 
t›icLí
, 
MQTTAsync_mesßge
* 
mesßge
)

294 
MQTTAsync
 
c
 = (MQTTAsync)
c⁄ãxt
;

295 
mesßge_cou¡
 = 0;

296 
rc
;

298 
	`MyLog
(
LOGA_DEBUG
, "I¿mesßgeAºived cÆlback %p", 
c
);

300 i‡(++
mesßge_cou¡
 == 1)

302 
MQTTAsync_mesßge
 
pubmsg
 = 
MQTTAsync_mesßge_öôülizî
;

303 
MQTTAsync_ª•⁄£O±i⁄s
 
›ts
 = 
MQTTAsync_ª•⁄£O±i⁄s_öôülizî
;

304 
pubmsg
.
∑ylﬂd
 = "a muchÜonger messageÅhat we can shortenÅoÅheÉxtentÅhat weÇeedÅoÖayload upÅo 11";

305 
pubmsg
.
∑ylﬂdÀn
 = 11;

306 
pubmsg
.
qos
 = 2;

307 
pubmsg
.
ªèöed
 = 0;

308 
rc
 = 
	`MQTTAsync_£ndMesßge
(
c
, 
ã°_t›ic
, &
pubmsg
, &
›ts
);

312 
MQTTAsync_ª•⁄£O±i⁄s
 
›ts
 = 
MQTTAsync_ª•⁄£O±i⁄s_öôülizî
;

314 
›ts
.
⁄Suc˚ss
 = 
ã°1_⁄Unsubs¸ibe
;

315 
›ts
.
c⁄ãxt
 = 
c
;

316 
rc
 = 
	`MQTTAsync_unsubs¸ibe
(
c
, 
ã°_t›ic
, &
›ts
);

317 
	`as£π
("Unsubs¸ibêsuc˚ssful", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

320 
	`MQTTAsync_‰ìMesßge
(&
mesßge
);

321 
	`MQTTAsync_‰ì
(
t›icName
);

324 
	}
}

326 
	$ã°1_⁄Subs¸ibe
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

328 
MQTTAsync
 
c
 = (MQTTAsync)
c⁄ãxt
;

329 
MQTTAsync_mesßge
 
pubmsg
 = 
MQTTAsync_mesßge_öôülizî
;

330 
rc
;

332 
	`MyLog
(
LOGA_DEBUG
, "I¿subs¸ibê⁄Suc˚s†ˇŒback %∞gø¡ed qo†%d", 
c
, 
ª•⁄£
->
Æt
.
qos
);

334 
pubmsg
.
∑ylﬂd
 = "a muchÜonger messageÅhat we can shortenÅoÅheÉxtentÅhat weÇeedÅoÖayload upÅo 11";

335 
pubmsg
.
∑ylﬂdÀn
 = 11;

336 
pubmsg
.
qos
 = 2;

337 
pubmsg
.
ªèöed
 = 0;

339 
rc
 = 
	`MQTTAsync_£nd
(
c
, 
ã°_t›ic
, 
pubmsg
.
∑ylﬂdÀn
,Öubmsg.
∑ylﬂd
,Öubmsg.
qos
,Öubmsg.
ªèöed
, 
NULL
);

340 
	}
}

343 
	$ã°1_⁄C⁄√˘
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

345 
MQTTAsync
 
c
 = (MQTTAsync)
c⁄ãxt
;

346 
MQTTAsync_ª•⁄£O±i⁄s
 
›ts
 = 
MQTTAsync_ª•⁄£O±i⁄s_öôülizî
;

347 
rc
;

349 
	`MyLog
(
LOGA_DEBUG
, "I¿c⁄√˘ onSuc˚s†ˇŒback, c⁄ãxà%p", 
c⁄ãxt
);

350 
›ts
.
⁄Suc˚ss
 = 
ã°1_⁄Subs¸ibe
;

351 
›ts
.
c⁄ãxt
 = 
c
;

353 
rc
 = 
	`MQTTAsync_subs¸ibe
(
c
, 
ã°_t›ic
, 2, &
›ts
);

354 
	`as£π
("GoodÑ¯‰om subs¸ibe", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

355 i‡(
rc
 !
MQTTASYNC_SUCCESS
)

356 
ã°_föished
 = 1;

357 
	}
}

365 
	$ã°1
(
O±i⁄s
 
›ti⁄s
)

367 
subsqos
 = 2;

368 
MQTTAsync
 
c
;

369 
MQTTAsync_c⁄√˘O±i⁄s
 
›ts
 = 
MQTTAsync_c⁄√˘O±i⁄s_öôülizî
;

370 
MQTTAsync_wûlO±i⁄s
 
w›ts
 = 
MQTTAsync_wûlO±i⁄s_öôülizî
;

371 
rc
 = 0;

372 * 
ã°_t›ic
 = "C clientÅest1";

374 
	`MyLog
(
LOGA_INFO
, "StartingÅest 1 -ásynchronous connect");

375 
	`Ârötf
(
xml
, "<testcase classname=\"test4\"Çame=\"asynchronous connect\"");

376 
globÆ_°¨t_time
 = 
	`°¨t_˛ock
();

378 
rc
 = 
	`MQTTAsync_¸óã
(&
c
, 
›ti⁄s
.
c⁄√˘i⁄
, "async_test",

379 
MQTTCLIENT_PERSISTENCE_DEFAULT
, 
NULL
);

380 
	`as£π
("goodÑ¯‰om cª©e", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d\n",Ñc);

381 i‡(
rc
 !
MQTTASYNC_SUCCESS
)

383 
	`MQTTAsync_de°roy
(&
c
);

384 
exô
;

387 
rc
 = 
	`MQTTAsync_£tCÆlbacks
(
c
, c, 
NULL
, 
ã°1_mesßgeAºived
, NULL);

388 
	`as£π
("GoodÑ¯‰om sëCÆlbacks", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

390 
›ts
.
kìpAliveI¡îvÆ
 = 20;

391 
›ts
.
˛ón£ssi⁄
 = 1;

392 
›ts
.
u£∫ame
 = "testuser";

393 
›ts
.
∑ssw‹d
 = "testpassword";

394 
›ts
.
MQTTVîsi⁄
 = 
›ti⁄s
.MQTTVersion;

396 
›ts
.
wûl
 = &
w›ts
;

397 
›ts
.
wûl
->
mesßge
 = "will message";

398 
›ts
.
wûl
->
qos
 = 1;

399 
›ts
.
wûl
->
ªèöed
 = 0;

400 
›ts
.
wûl
->
t›icName
 = "willÅopic";

401 
›ts
.
wûl
 = 
NULL
;

402 
›ts
.
⁄Suc˚ss
 = 
ã°1_⁄C⁄√˘
;

403 
›ts
.
⁄Faûuª
 = 
NULL
;

404 
›ts
.
c⁄ãxt
 = 
c
;

406 
	`MyLog
(
LOGA_DEBUG
, "Connecting");

407 
rc
 = 
	`MQTTAsync_c⁄√˘
(
c
, &
›ts
);

408 
rc
 = 0;

409 
	`as£π
("GoodÑ¯‰om c⁄√˘", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

410 i‡(
rc
 !
MQTTASYNC_SUCCESS
)

411 
exô
;

413 !
ã°_föished
)

414 #i‡
	`deföed
(
WIN32
)

415 
	`SÀï
(100);

417 
	`u¶ìp
(10000L);

420 
	`MQTTAsync_de°roy
(&
c
);

422 
exô
:

423 
	`MyLog
(
LOGA_INFO
, "TEST1:Åest %s. %dÅestsÑun, %d failures.",

424 (
Áûuªs
 =0Ë? "∑s£d" : "Áûed", 
ã°s
, failures);

425 
	`wrôe_ã°_ªsu…
();

426  
Áûuªs
;

427 
	}
}

429 
	gã°2_⁄Faûuª_ˇŒed
 = 0;

431 
	$ã°2_⁄Faûuª
(* 
c⁄ãxt
, 
MQTTAsync_ÁûuªD©a
* 
ª•⁄£
)

433 
	`MyLog
(
LOGA_DEBUG
, "I¿c⁄√˘ onFaûuª cÆlback, c⁄ãxà%p", 
c⁄ãxt
);

435 
ã°2_⁄Faûuª_ˇŒed
++;

436 
ã°_föished
 = 1;

437 
	}
}

440 
	$ã°2_⁄C⁄√˘
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

443 
	`MyLog
(
LOGA_DEBUG
, "I¿c⁄√˘ onSuc˚s†ˇŒback, c⁄ãxà%p\n", 
c⁄ãxt
);

445 
	`as£π
("Connect shouldÇot succeed", 0, "connect success callback was called", 0);

447 
ã°_föished
 = 1;

448 
	}
}

455 
	$ã°2
(
O±i⁄s
 
›ti⁄s
)

457 
subsqos
 = 2;

458 
MQTTAsync
 
c
;

459 
MQTTAsync_c⁄√˘O±i⁄s
 
›ts
 = 
MQTTAsync_c⁄√˘O±i⁄s_öôülizî
;

460 
MQTTAsync_wûlO±i⁄s
 
w›ts
 = 
MQTTAsync_wûlO±i⁄s_öôülizî
;

461 
rc
 = 0;

462 * 
ã°_t›ic
 = "C clientÅest2";

464 
ã°_föished
 = 0;

466 
	`MyLog
(
LOGA_INFO
, "StartingÅest 2 - connectÅimeout");

467 
	`Ârötf
(
xml
, "<testcase classname=\"test4\"Çame=\"connectÅimeout\"");

468 
globÆ_°¨t_time
 = 
	`°¨t_˛ock
();

470 
rc
 = 
	`MQTTAsync_¸óã
(&
c
, "tcp://9.20.96.160:66", "connectÅimeout",

471 
MQTTCLIENT_PERSISTENCE_DEFAULT
, 
NULL
);

472 
	`as£π
("goodÑ¯‰om cª©e", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d\n",Ñc);

473 i‡(
rc
 !
MQTTASYNC_SUCCESS
)

475 
	`MQTTAsync_de°roy
(&
c
);

476 
exô
;

479 
rc
 = 
	`MQTTAsync_£tCÆlbacks
(
c
, c, 
NULL
, 
ã°1_mesßgeAºived
, NULL);

480 
	`as£π
("GoodÑ¯‰om sëCÆlbacks", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

482 
›ts
.
c⁄√˘Timeout
 = 5;

483 
›ts
.
kìpAliveI¡îvÆ
 = 20;

484 
›ts
.
˛ón£ssi⁄
 = 1;

485 
›ts
.
u£∫ame
 = "testuser";

486 
›ts
.
∑ssw‹d
 = "testpassword";

487 
›ts
.
MQTTVîsi⁄
 = 
›ti⁄s
.MQTTVersion;

489 
›ts
.
wûl
 = &
w›ts
;

490 
›ts
.
wûl
->
mesßge
 = "will message";

491 
›ts
.
wûl
->
qos
 = 1;

492 
›ts
.
wûl
->
ªèöed
 = 0;

493 
›ts
.
wûl
->
t›icName
 = "willÅopic";

494 
›ts
.
wûl
 = 
NULL
;

495 
›ts
.
⁄Suc˚ss
 = 
ã°2_⁄C⁄√˘
;

496 
›ts
.
⁄Faûuª
 = 
ã°2_⁄Faûuª
;

497 
›ts
.
c⁄ãxt
 = 
c
;

499 
	`MyLog
(
LOGA_DEBUG
, "Connecting");

500 
rc
 = 
	`MQTTAsync_c⁄√˘
(
c
, &
›ts
);

501 
rc
 = 0;

502 
	`as£π
("GoodÑ¯‰om c⁄√˘", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

503 i‡(
rc
 !
MQTTASYNC_SUCCESS
)

504 
exô
;

506 !
ã°_föished
)

507 #i‡
	`deföed
(
WIN32
)

508 
	`SÀï
(100);

510 
	`u¶ìp
(10000L);

513 
	`MQTTAsync_de°roy
(&
c
);

515 
exô
:

516 
	`as£π
("C⁄√˘ onFaûuª should bêˇŒed on˚", 
ã°2_⁄Faûuª_ˇŒed
 == 1,

517 "c⁄√˘ onFaûuª wa†ˇŒed %dÅimes", 
ã°2_⁄Faûuª_ˇŒed
);

519 
	`MyLog
(
LOGA_INFO
, "TEST2:Åest %s. %dÅestsÑun, %d failures.",

520 (
Áûuªs
 =0Ë? "∑s£d" : "Áûed", 
ã°s
, failures);

521 
	`wrôe_ã°_ªsu…
();

522  
Áûuªs
;

523 
	}
}

528 
MQTTAsync
 
	mc
;

529 
	mödex
;

530 
	m˛õ¡id
[24];

531 
	mã°_t›ic
[100];

532 
	mmesßge_cou¡
;

533 } 
	t˛õ¡_d©a
;

536 
	$ã°3_⁄Disc⁄√˘
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

538 
˛õ¡_d©a
* 
cd
 = (˛õ¡_d©a*)
c⁄ãxt
;

539 
	`MyLog
(
LOGA_DEBUG
, "I¿⁄Disc⁄√˘ cÆlback f‹ clõ¡ \"%s\"", 
cd
->
˛õ¡id
);

540 
ã°_föished
++;

541 
	}
}

544 
	$ã°3_⁄Publish
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

546 
˛õ¡_d©a
* 
cd
 = (˛õ¡_d©a*)
c⁄ãxt
;

547 
	`MyLog
(
LOGA_DEBUG
, "I¿QoS 0 onPublish cÆlback f‹ clõ¡ \"%s\"", 
cd
->
˛õ¡id
);

548 
	}
}

551 
	$ã°3_⁄Unsubs¸ibe
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

553 
˛õ¡_d©a
* 
cd
 = (˛õ¡_d©a*)
c⁄ãxt
;

554 
MQTTAsync_disc⁄√˘O±i⁄s
 
›ts
 = 
MQTTAsync_disc⁄√˘O±i⁄s_öôülizî
;

555 
rc
;

557 
	`MyLog
(
LOGA_DEBUG
, "I¿⁄Unsubs¸ibê⁄Suc˚s†ˇŒback \"%s\"", 
cd
->
˛õ¡id
);

558 
›ts
.
⁄Suc˚ss
 = 
ã°3_⁄Disc⁄√˘
;

559 
›ts
.
c⁄ãxt
 = 
cd
;

561 
rc
 = 
	`MQTTAsync_disc⁄√˘
(
cd
->
c
, &
›ts
);

562 
	`as£π
("Disc⁄√˘ suc˚ssful", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

563 
	}
}

566 
	$ã°3_mesßgeAºived
(* 
c⁄ãxt
, * 
t›icName
, 
t›icLí
, 
MQTTAsync_mesßge
* 
mesßge
)

568 
˛õ¡_d©a
* 
cd
 = (˛õ¡_d©a*)
c⁄ãxt
;

569 
rc
;

571 
	`MyLog
(
LOGA_DEBUG
, "I¿mesßgeAºived cÆlback \"%s\" mesßgêcou¡ ", 
cd
->
˛õ¡id
);

573 i‡(++
cd
->
mesßge_cou¡
 == 1)

575 
MQTTAsync_mesßge
 
pubmsg
 = 
MQTTAsync_mesßge_öôülizî
;

576 
MQTTAsync_ª•⁄£O±i⁄s
 
›ts
 = 
MQTTAsync_ª•⁄£O±i⁄s_öôülizî
;

577 
pubmsg
.
∑ylﬂd
 = "a muchÜonger messageÅhat we can shortenÅoÅheÉxtentÅhat weÇeedÅoÖayload upÅo 11";

578 
pubmsg
.
∑ylﬂdÀn
 = 25;

579 
pubmsg
.
qos
 = 1;

580 
pubmsg
.
ªèöed
 = 0;

581 
rc
 = 
	`MQTTAsync_£ndMesßge
(
cd
->
c
, cd->
ã°_t›ic
, &
pubmsg
, &
›ts
);

582 
	`as£π
("GoodÑ¯‰omÖublish", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

584 i‡(
cd
->
mesßge_cou¡
 == 2)

586 
MQTTAsync_mesßge
 
pubmsg
 = 
MQTTAsync_mesßge_öôülizî
;

587 
MQTTAsync_ª•⁄£O±i⁄s
 
›ts
 = 
MQTTAsync_ª•⁄£O±i⁄s_öôülizî
;

588 
pubmsg
.
∑ylﬂd
 = "a QoS 0 messageÅhat we can shortenÅoÅheÉxtentÅhat weÇeedÅoÖayload upÅo 11";

589 
pubmsg
.
∑ylﬂdÀn
 = 29;

590 
pubmsg
.
qos
 = 0;

591 
pubmsg
.
ªèöed
 = 0;

592 
›ts
.
c⁄ãxt
 = 
cd
;

593 
›ts
.
⁄Suc˚ss
 = 
ã°3_⁄Publish
;

595 
rc
 = 
	`MQTTAsync_£ndMesßge
(
cd
->
c
, cd->
ã°_t›ic
, &
pubmsg
, &
›ts
);

596 
	`as£π
("GoodÑ¯‰omÖublish", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

600 
MQTTAsync_ª•⁄£O±i⁄s
 
›ts
 = 
MQTTAsync_ª•⁄£O±i⁄s_öôülizî
;

602 
›ts
.
⁄Suc˚ss
 = 
ã°3_⁄Unsubs¸ibe
;

603 
›ts
.
c⁄ãxt
 = 
cd
;

604 
rc
 = 
	`MQTTAsync_unsubs¸ibe
(
cd
->
c
, cd->
ã°_t›ic
, &
›ts
);

605 
	`as£π
("Unsubs¸ibêsuc˚ssful", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

607 
	`MQTTAsync_‰ìMesßge
(&
mesßge
);

608 
	`MQTTAsync_‰ì
(
t›icName
);

610 
	}
}

612 
	$ã°3_⁄Subs¸ibe
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

614 
˛õ¡_d©a
* 
cd
 = (˛õ¡_d©a*)
c⁄ãxt
;

615 
MQTTAsync_mesßge
 
pubmsg
 = 
MQTTAsync_mesßge_öôülizî
;

616 
rc
;

618 
	`MyLog
(
LOGA_DEBUG
, "I¿subs¸ibê⁄Suc˚s†ˇŒback \"%s\"", 
cd
->
˛õ¡id
);

620 
pubmsg
.
∑ylﬂd
 = "a muchÜonger messageÅhat we can shortenÅoÅheÉxtentÅhat weÇeedÅoÖayload upÅo 11";

621 
pubmsg
.
∑ylﬂdÀn
 = 11;

622 
pubmsg
.
qos
 = 2;

623 
pubmsg
.
ªèöed
 = 0;

625 
rc
 = 
	`MQTTAsync_£nd
(
cd
->
c
, cd->
ã°_t›ic
, 
pubmsg
.
∑ylﬂdÀn
,Öubmsg.
∑ylﬂd
,Öubmsg.
qos
,Öubmsg.
ªèöed
, 
NULL
);

626 
	`as£π
("GoodÑ¯‰omÖublish", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

627 
	}
}

630 
	$ã°3_⁄C⁄√˘
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

632 
˛õ¡_d©a
* 
cd
 = (˛õ¡_d©a*)
c⁄ãxt
;

633 
MQTTAsync_ª•⁄£O±i⁄s
 
›ts
 = 
MQTTAsync_ª•⁄£O±i⁄s_öôülizî
;

634 
rc
;

636 
	`MyLog
(
LOGA_DEBUG
, "I¿c⁄√˘ onSuc˚s†ˇŒback, \"%s\"", 
cd
->
˛õ¡id
);

637 
›ts
.
⁄Suc˚ss
 = 
ã°3_⁄Subs¸ibe
;

638 
›ts
.
c⁄ãxt
 = 
cd
;

640 
rc
 = 
	`MQTTAsync_subs¸ibe
(
cd
->
c
, cd->
ã°_t›ic
, 2, &
›ts
);

641 
	`as£π
("GoodÑ¯‰om subs¸ibe", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

642 i‡(
rc
 !
MQTTASYNC_SUCCESS
)

643 
ã°_föished
++;

644 
	}
}

647 
	$ã°3_⁄Faûuª
(* 
c⁄ãxt
, 
MQTTAsync_ÁûuªD©a
* 
ª•⁄£
)

649 
˛õ¡_d©a
* 
cd
 = (˛õ¡_d©a*)
c⁄ãxt
;

650 
MQTTAsync_ª•⁄£O±i⁄s
 
›ts
 = 
MQTTAsync_ª•⁄£O±i⁄s_öôülizî
;

652 
	`as£π
("Should havêc⁄√˘ed", 0, "%†ÁûedÅÿc⁄√˘\n", 
cd
->
˛õ¡id
);

653 
	`MyLog
(
LOGA_DEBUG
, "I¿c⁄√˘ onFaûuª cÆlback, \"%s\"Ñ¯%d\n", 
cd
->
˛õ¡id
, 
ª•⁄£
 ?Ñe•⁄£->
code
 : -999);

654 i‡(
ª•⁄£
 &&Ñe•⁄£->
mesßge
)

655 
	`MyLog
(
LOGA_DEBUG
, "I¿c⁄√˘ onFaûuª cÆlback, \"%s\"\n", 
ª•⁄£
->
mesßge
);

657 
ã°_föished
++;

658 
	}
}

666 
	$ã°3
(
O±i⁄s
 
›ti⁄s
)

668 
	#num_˛õ¡s
 10

	)

669 
subsqos
 = 2;

670 
MQTTAsync_c⁄√˘O±i⁄s
 
›ts
 = 
MQTTAsync_c⁄√˘O±i⁄s_öôülizî
;

671 
MQTTAsync_wûlO±i⁄s
 
w›ts
 = 
MQTTAsync_wûlO±i⁄s_öôülizî
;

672 
rc
 = 0;

673 
i
;

674 
˛õ¡_d©a
 
˛õ¡d©a
[
num_˛õ¡s
];

676 
ã°_föished
 = 0;

677 
	`MyLog
(
LOGA_INFO
, "StartingÅest 3 - multiple connections");

678 
	`Ârötf
(
xml
, "<testcase classname=\"test4\"Çame=\"multiple connections\"");

679 
globÆ_°¨t_time
 = 
	`°¨t_˛ock
();

681 
i
 = 0; i < 
num_˛õ¡s
; ++i)

683 
	`•rötf
(
˛õ¡d©a
[
i
].
˛õ¡id
, "async_test3_num_%d", i);

684 
	`•rötf
(
˛õ¡d©a
[
i
].
ã°_t›ic
, "asyncÅest3ÅopicÇum %d", i);

685 
˛õ¡d©a
[
i
].
ödex
 = i;

686 
˛õ¡d©a
[
i
].
mesßge_cou¡
 = 0;

688 
rc
 = 
	`MQTTAsync_¸óã
(&(
˛õ¡d©a
[
i
].
c
), 
›ti⁄s
.
c⁄√˘i⁄
, clõ¡d©a[i].
˛õ¡id
,

689 
MQTTCLIENT_PERSISTENCE_NONE
, 
NULL
);

690 
	`as£π
("goodÑ¯‰om cª©e", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d\n",Ñc);

692 
rc
 = 
	`MQTTAsync_£tCÆlbacks
(
˛õ¡d©a
[
i
].
c
, &˛õ¡d©a[i], 
NULL
, 
ã°3_mesßgeAºived
, NULL);

693 
	`as£π
("GoodÑ¯‰om sëCÆlbacks", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

695 
›ts
.
kìpAliveI¡îvÆ
 = 20;

696 
›ts
.
˛ón£ssi⁄
 = 1;

697 
›ts
.
u£∫ame
 = "testuser";

698 
›ts
.
∑ssw‹d
 = "testpassword";

699 
›ts
.
MQTTVîsi⁄
 = 
›ti⁄s
.MQTTVersion;

701 
›ts
.
wûl
 = &
w›ts
;

702 
›ts
.
wûl
->
mesßge
 = "will message";

703 
›ts
.
wûl
->
qos
 = 1;

704 
›ts
.
wûl
->
ªèöed
 = 0;

705 
›ts
.
wûl
->
t›icName
 = "willÅopic";

706 
›ts
.
⁄Suc˚ss
 = 
ã°3_⁄C⁄√˘
;

707 
›ts
.
⁄Faûuª
 = 
ã°3_⁄Faûuª
;

708 
›ts
.
c⁄ãxt
 = &
˛õ¡d©a
[
i
];

710 
	`MyLog
(
LOGA_DEBUG
, "Connecting");

711 
rc
 = 
	`MQTTAsync_c⁄√˘
(
˛õ¡d©a
[
i
].
c
, &
›ts
);

712 
	`as£π
("GoodÑ¯‰om c⁄√˘", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

715 
ã°_föished
 < 
num_˛õ¡s
)

717 
	`MyLog
(
LOGA_DEBUG
, "num_˛õ¡†%dÅe°_föished %d\n", 
num_˛õ¡s
, 
ã°_föished
);

718 #i‡
	`deföed
(
WIN32
)

719 
	`SÀï
(100);

721 
	`u¶ìp
(10000L);

725 
	`MyLog
(
LOGA_DEBUG
, "TEST3: destroying clients");

727 
i
 = 0; i < 
num_˛õ¡s
; ++i)

728 
	`MQTTAsync_de°roy
(&
˛õ¡d©a
[
i
].
c
);

731 
	`MyLog
(
LOGA_INFO
, "TEST3:Åest %s. %dÅestsÑun, %d failures.",

732 (
Áûuªs
 =0Ë? "∑s£d" : "Áûed", 
ã°s
, failures);

733 
	`wrôe_ã°_ªsu…
();

734  
Áûuªs
;

735 
	}
}

738 * 
	gã°4_∑ylﬂd
 = 
NULL
;

739 
	gã°4_∑ylﬂdÀn
 = 0;

741 
	$ã°4_⁄Publish
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

743 
MQTTAsync
 
c
 = (MQTTAsync)
c⁄ãxt
;

745 
	`MyLog
(
LOGA_DEBUG
, "I¿publish onSuc˚s†ˇŒback, c⁄ãxà%p", 
c⁄ãxt
);

746 
	}
}

748 
	$ã°4_mesßgeAºived
(* 
c⁄ãxt
, * 
t›icName
, 
t›icLí
, 
MQTTAsync_mesßge
* 
mesßge
)

750 
MQTTAsync
 
c
 = (MQTTAsync)
c⁄ãxt
;

751 
mesßge_cou¡
 = 0;

752 
rc
, 
i
;

754 
	`MyLog
(
LOGA_DEBUG
, "I¿mesßgeAºived cÆlback %p", 
c
);

756 
	`as£π
("Mesßgêsizêc‹ª˘", 
mesßge
->
∑ylﬂdÀn
 =
ã°4_∑ylﬂdÀn
,

757 "mesßgêsizêwa†%d", 
mesßge
->
∑ylﬂdÀn
);

759 
i
 = 0; i < 
›ti⁄s
.
size
; ++i)

761 i‡(((*)
ã°4_∑ylﬂd
)[
i
] !((*)
mesßge
->
∑ylﬂd
)[i])

763 
	`as£π
("Mesßgêc⁄ã¡†c‹ª˘", ((*)
ã°4_∑ylﬂd
)[
i
] !((*)
mesßge
->
∑ylﬂd
)[i],

764 "mesßgêc⁄ã¡ wa†%c", ((*)
mesßge
->
∑ylﬂd
)[
i
]);

769 i‡(++
mesßge_cou¡
 == 1)

771 
MQTTAsync_mesßge
 
pubmsg
 = 
MQTTAsync_mesßge_öôülizî
;

772 
MQTTAsync_ª•⁄£O±i⁄s
 
›ts
 = 
MQTTAsync_ª•⁄£O±i⁄s_öôülizî
;

774 
pubmsg
.
∑ylﬂd
 = 
ã°4_∑ylﬂd
;

775 
pubmsg
.
∑ylﬂdÀn
 = 
ã°4_∑ylﬂdÀn
;

776 
pubmsg
.
qos
 = 1;

777 
pubmsg
.
ªèöed
 = 0;

778 
›ts
.
⁄Suc˚ss
 = 
ã°4_⁄Publish
;

779 
›ts
.
c⁄ãxt
 = 
c
;

781 
rc
 = 
	`MQTTAsync_£ndMesßge
(
c
, 
ã°_t›ic
, &
pubmsg
, &
›ts
);

783 i‡(
mesßge_cou¡
 == 2)

785 
MQTTAsync_mesßge
 
pubmsg
 = 
MQTTAsync_mesßge_öôülizî
;

786 
MQTTAsync_ª•⁄£O±i⁄s
 
›ts
 = 
MQTTAsync_ª•⁄£O±i⁄s_öôülizî
;

788 
pubmsg
.
∑ylﬂd
 = 
ã°4_∑ylﬂd
;

789 
pubmsg
.
∑ylﬂdÀn
 = 
ã°4_∑ylﬂdÀn
;

790 
pubmsg
.
qos
 = 0;

791 
pubmsg
.
ªèöed
 = 0;

792 
›ts
.
⁄Suc˚ss
 = 
ã°4_⁄Publish
;

793 
›ts
.
c⁄ãxt
 = 
c
;

794 
rc
 = 
	`MQTTAsync_£ndMesßge
(
c
, 
ã°_t›ic
, &
pubmsg
, &
›ts
);

798 
MQTTAsync_ª•⁄£O±i⁄s
 
›ts
 = 
MQTTAsync_ª•⁄£O±i⁄s_öôülizî
;

800 
›ts
.
⁄Suc˚ss
 = 
ã°1_⁄Unsubs¸ibe
;

801 
›ts
.
c⁄ãxt
 = 
c
;

802 
rc
 = 
	`MQTTAsync_unsubs¸ibe
(
c
, 
ã°_t›ic
, &
›ts
);

803 
	`as£π
("Unsubs¸ibêsuc˚ssful", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

806 
	`MQTTAsync_‰ìMesßge
(&
mesßge
);

807 
	`MQTTAsync_‰ì
(
t›icName
);

810 
	}
}

813 
	$ã°4_⁄Subs¸ibe
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

815 
MQTTAsync
 
c
 = (MQTTAsync)
c⁄ãxt
;

816 
MQTTAsync_mesßge
 
pubmsg
 = 
MQTTAsync_mesßge_öôülizî
;

817 
rc
, 
i
;

819 
	`MyLog
(
LOGA_DEBUG
, "I¿subs¸ibê⁄Suc˚s†ˇŒback %p", 
c
);

821 
pubmsg
.
∑ylﬂd
 = 
ã°4_∑ylﬂd
 = 
	`mÆloc
(
›ti⁄s
.
size
);

822 
pubmsg
.
∑ylﬂdÀn
 = 
ã°4_∑ylﬂdÀn
 = 
›ti⁄s
.
size
;

824 
	`§™d
(33);

825 
i
 = 0; i < 
›ti⁄s
.
size
; ++i)

826 ((*)
pubmsg
.
∑ylﬂd
)[
i
] = 
	`ønd
() % 256;

828 
pubmsg
.
qos
 = 2;

829 
pubmsg
.
ªèöed
 = 0;

831 
rc
 = 
	`MQTTAsync_£nd
(
c
, 
ã°_t›ic
, 
pubmsg
.
∑ylﬂdÀn
,Öubmsg.
∑ylﬂd
,Öubmsg.
qos
,Öubmsg.
ªèöed
, 
NULL
);

832 
	}
}

835 
	$ã°4_⁄C⁄√˘
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

837 
MQTTAsync
 
c
 = (MQTTAsync)
c⁄ãxt
;

838 
MQTTAsync_ª•⁄£O±i⁄s
 
›ts
 = 
MQTTAsync_ª•⁄£O±i⁄s_öôülizî
;

839 
rc
;

841 
	`MyLog
(
LOGA_DEBUG
, "I¿c⁄√˘ onSuc˚s†ˇŒback, c⁄ãxà%p", 
c⁄ãxt
);

842 
›ts
.
⁄Suc˚ss
 = 
ã°4_⁄Subs¸ibe
;

843 
›ts
.
c⁄ãxt
 = 
c
;

845 
rc
 = 
	`MQTTAsync_subs¸ibe
(
c
, 
ã°_t›ic
, 2, &
›ts
);

846 
	`as£π
("GoodÑ¯‰om subs¸ibe", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

847 i‡(
rc
 !
MQTTASYNC_SUCCESS
)

848 
ã°_föished
 = 1;

849 
	}
}

857 
	$ã°4
(
O±i⁄s
 
›ti⁄s
)

859 
subsqos
 = 2;

860 
MQTTAsync
 
c
;

861 
MQTTAsync_c⁄√˘O±i⁄s
 
›ts
 = 
MQTTAsync_c⁄√˘O±i⁄s_öôülizî
;

862 
MQTTAsync_wûlO±i⁄s
 
w›ts
 = 
MQTTAsync_wûlO±i⁄s_öôülizî
;

863 
rc
 = 0;

864 * 
ã°_t›ic
 = "C clientÅest4";

866 
ã°_föished
 = 
Áûuªs
 = 0;

867 
	`MyLog
(
LOGA_INFO
, "StartingÅest 4 - big messages");

868 
	`Ârötf
(
xml
, "<testcase classname=\"test4\"Çame=\"big messages\"");

869 
globÆ_°¨t_time
 = 
	`°¨t_˛ock
();

871 
rc
 = 
	`MQTTAsync_¸óã
(&
c
, 
›ti⁄s
.
c⁄√˘i⁄
, "async_test_4",

872 
MQTTCLIENT_PERSISTENCE_DEFAULT
, 
NULL
);

873 
	`as£π
("goodÑ¯‰om cª©e", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d\n",Ñc);

874 i‡(
rc
 !
MQTTASYNC_SUCCESS
)

876 
	`MQTTAsync_de°roy
(&
c
);

877 
exô
;

880 
rc
 = 
	`MQTTAsync_£tCÆlbacks
(
c
, c, 
NULL
, 
ã°4_mesßgeAºived
, NULL);

881 
	`as£π
("GoodÑ¯‰om sëCÆlbacks", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

883 
›ts
.
kìpAliveI¡îvÆ
 = 20;

884 
›ts
.
˛ón£ssi⁄
 = 1;

885 
›ts
.
u£∫ame
 = "testuser";

886 
›ts
.
∑ssw‹d
 = "testpassword";

887 
›ts
.
MQTTVîsi⁄
 = 
›ti⁄s
.MQTTVersion;

889 
›ts
.
wûl
 = &
w›ts
;

890 
›ts
.
wûl
->
mesßge
 = "will message";

891 
›ts
.
wûl
->
qos
 = 1;

892 
›ts
.
wûl
->
ªèöed
 = 0;

893 
›ts
.
wûl
->
t›icName
 = "willÅopic";

894 
›ts
.
wûl
 = 
NULL
;

895 
›ts
.
⁄Suc˚ss
 = 
ã°4_⁄C⁄√˘
;

896 
›ts
.
⁄Faûuª
 = 
NULL
;

897 
›ts
.
c⁄ãxt
 = 
c
;

899 
	`MyLog
(
LOGA_DEBUG
, "Connecting");

900 
rc
 = 
	`MQTTAsync_c⁄√˘
(
c
, &
›ts
);

901 
rc
 = 0;

902 
	`as£π
("GoodÑ¯‰om c⁄√˘", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

903 i‡(
rc
 !
MQTTASYNC_SUCCESS
)

904 
exô
;

906 !
ã°_föished
)

907 #i‡
	`deföed
(
WIN32
)

908 
	`SÀï
(100);

910 
	`u¶ìp
(1000L);

913 
	`MQTTAsync_de°roy
(&
c
);

915 
exô
:

916 
	`MyLog
(
LOGA_INFO
, "TEST4:Åest %s. %dÅestsÑun, %d failures.",

917 (
Áûuªs
 =0Ë? "∑s£d" : "Áûed", 
ã°s
, failures);

918 
	`wrôe_ã°_ªsu…
();

919  
Áûuªs
;

920 
	}
}

923 
	$ã°5_⁄C⁄√˘Faûuª
(* 
c⁄ãxt
, 
MQTTAsync_ÁûuªD©a
* 
ª•⁄£
)

925 
MQTTAsync
 
c
 = (MQTTAsync)
c⁄ãxt
;

926 
MQTTAsync_ª•⁄£O±i⁄s
 
›ts
 = 
MQTTAsync_ª•⁄£O±i⁄s_öôülizî
;

928 
	`MyLog
(
LOGA_DEBUG
, "I¿c⁄√˘ onFaûuª cÆlback, c⁄ãxà%p", 
c⁄ãxt
);

930 
	`MyLog
(
LOGA_INFO
, "C⁄«ckÑ¯i†%d", 
ª•⁄£
 ?Ñe•⁄£->
code
 : -999);

932 
ã°_föished
 = 1;

933 
	}
}

936 
	$ã°5_⁄C⁄√˘
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

938 
MQTTAsync
 
c
 = (MQTTAsync)
c⁄ãxt
;

939 
MQTTAsync_ª•⁄£O±i⁄s
 
›ts
 = 
MQTTAsync_ª•⁄£O±i⁄s_öôülizî
;

941 
	`MyLog
(
LOGA_DEBUG
, "I¿c⁄√˘ onFaûuª cÆlback, c⁄ãxà%p", 
c⁄ãxt
);

943 
ã°_föished
 = 1;

944 
	}
}

952 
	$ã°5
(
O±i⁄s
 
›ti⁄s
)

954 
subsqos
 = 2;

955 
MQTTAsync
 
c
;

956 
MQTTAsync_c⁄√˘O±i⁄s
 
›ts
 = 
MQTTAsync_c⁄√˘O±i⁄s_öôülizî
;

957 
MQTTAsync_wûlO±i⁄s
 
w›ts
 = 
MQTTAsync_wûlO±i⁄s_öôülizî
;

958 
rc
 = 0;

959 * 
ã°_t›ic
 = "C clientÅest1";

961 
ã°_föished
 = 
Áûuªs
 = 0;

962 
	`MyLog
(
LOGA_INFO
, "StartingÅest 5 - connackÑeturn codes");

963 
	`Ârötf
(
xml
, "<testcase classname=\"test4\"Çame=\"connackÑeturn codes\"");

964 
globÆ_°¨t_time
 = 
	`°¨t_˛ock
();

966 
rc
 = 
	`MQTTAsync_¸óã
(&
c
, 
›ti⁄s
.
c⁄√˘i⁄
, "a clientidÅhat isÅooÜongÅo beáccepted",

967 
MQTTCLIENT_PERSISTENCE_DEFAULT
, 
NULL
);

968 
	`as£π
("goodÑ¯‰om cª©e", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d\n",Ñc);

969 i‡(
rc
 !
MQTTASYNC_SUCCESS
)

971 
	`MQTTAsync_de°roy
(&
c
);

972 
exô
;

975 
rc
 = 
	`MQTTAsync_£tCÆlbacks
(
c
, c, 
NULL
, 
ã°1_mesßgeAºived
, NULL);

976 
	`as£π
("GoodÑ¯‰om sëCÆlbacks", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

978 
›ts
.
⁄Suc˚ss
 = 
ã°5_⁄C⁄√˘
;

979 
›ts
.
⁄Faûuª
 = 
ã°5_⁄C⁄√˘Faûuª
;

980 
›ts
.
c⁄ãxt
 = 
c
;

982 
	`MyLog
(
LOGA_DEBUG
, "Connecting");

983 
rc
 = 
	`MQTTAsync_c⁄√˘
(
c
, &
›ts
);

984 
rc
 = 0;

985 
	`as£π
("GoodÑ¯‰om c⁄√˘", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

986 i‡(
rc
 !
MQTTASYNC_SUCCESS
)

987 
exô
;

989 !
ã°_föished
)

990 #i‡
	`deföed
(
WIN32
)

991 
	`SÀï
(100);

993 
	`u¶ìp
(10000L);

996 
	`MQTTAsync_de°roy
(&
c
);

998 
exô
:

999 
	`MyLog
(
LOGA_INFO
, "TEST5:Åest %s. %dÅestsÑun, %d failures.",

1000 (
Áûuªs
 =0Ë? "∑s£d" : "Áûed", 
ã°s
, failures);

1001 
	`wrôe_ã°_ªsu…
();

1002  
Áûuªs
;

1003 
	}
}

1008 
MQTTAsync
 
	mc
;

1009 
	mshould_Áû
;

1010 } 
	tã°6_˛õ¡_öfo
;

1012 
	$ã°6_⁄C⁄√˘Faûuª
(* 
c⁄ãxt
, 
MQTTAsync_ÁûuªD©a
* 
ª•⁄£
)

1014 
ã°6_˛õ¡_öfo
 
cöfo
 = *—e°6_˛õ¡_öfo*)
c⁄ãxt
;

1016 
	`MyLog
(
LOGA_DEBUG
, "I¿c⁄√˘ onFaûuª cÆlback, c⁄ãxà%p", 
c⁄ãxt
);

1018 i‡(
ª•⁄£
)

1019 
	`MyLog
(
LOGA_INFO
, "C⁄«ckÑ¯i†%d", 
ª•⁄£
->
code
);

1021 
	`as£π
("Should faûÅÿc⁄√˘", 
cöfo
.
should_Áû
, "should_fail was %d", cinfo.should_fail);

1023 
ã°_föished
 = 1;

1024 
	}
}

1027 
	$ã°6_⁄C⁄√˘
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

1029 
ã°6_˛õ¡_öfo
 
cöfo
 = *—e°6_˛õ¡_öfo*)
c⁄ãxt
;

1031 
	`MyLog
(
LOGA_DEBUG
, "I¿c⁄√˘ suc˚s†ˇŒback, c⁄ãxà%p", 
c⁄ãxt
);

1033 
	`as£π
("Should c⁄√˘ c‹ª˘ly", !
cöfo
.
should_Áû
, "should_fail was %d", cinfo.should_fail);

1035 
ã°_föished
 = 1;

1036 
	}
}

1044 
	$ã°6
(
O±i⁄s
 
›ti⁄s
)

1046 
subsqos
 = 2;

1047 
ã°6_˛õ¡_öfo
 
cöfo
;

1048 
MQTTAsync_c⁄√˘O±i⁄s
 
›ts
 = 
MQTTAsync_c⁄√˘O±i⁄s_öôülizî
;

1049 
MQTTAsync_wûlO±i⁄s
 
w›ts
 = 
MQTTAsync_wûlO±i⁄s_öôülizî
;

1050 
rc
 = 0;

1051 * 
ã°_t›ic
 = "C clientÅest1";

1052 * 
uris
[2] = {
›ti⁄s
.
c⁄√˘i⁄
, options.connection};

1054 
Áûuªs
 = 0;

1055 
	`MyLog
(
LOGA_INFO
, "StartingÅest 6 - HA connections");

1056 
	`Ârötf
(
xml
, "<testcase classname=\"test4\"Çame=\"HA connections\"");

1057 
globÆ_°¨t_time
 = 
	`°¨t_˛ock
();

1059 
ã°_föished
 = 0;

1060 
cöfo
.
should_Áû
 = 1;

1061 
rc
 = 
	`MQTTAsync_¸óã
(&
cöfo
.
c
, "tcp://rubbish:1883", "async ha connection",

1062 
MQTTCLIENT_PERSISTENCE_DEFAULT
, 
NULL
);

1063 
	`as£π
("goodÑ¯‰om cª©e", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d\n",Ñc);

1064 i‡(
rc
 !
MQTTASYNC_SUCCESS
)

1066 
	`MQTTAsync_de°roy
(&
cöfo
.
c
);

1067 
exô
;

1070 
rc
 = 
	`MQTTAsync_£tCÆlbacks
(
cöfo
.
c
, cöfo.c, 
NULL
, 
ã°1_mesßgeAºived
, NULL);

1071 
	`as£π
("GoodÑ¯‰om sëCÆlbacks", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

1073 
›ts
.
⁄Suc˚ss
 = 
ã°6_⁄C⁄√˘
;

1074 
›ts
.
⁄Faûuª
 = 
ã°6_⁄C⁄√˘Faûuª
;

1075 
›ts
.
c⁄ãxt
 = &
cöfo
;

1076 
›ts
.
MQTTVîsi⁄
 = 
›ti⁄s
.MQTTVersion;

1078 
	`MyLog
(
LOGA_DEBUG
, "Connecting");

1079 
rc
 = 
	`MQTTAsync_c⁄√˘
(
cöfo
.
c
, &
›ts
);

1080 
rc
 = 0;

1081 
	`as£π
("GoodÑ¯‰om c⁄√˘", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

1082 i‡(
rc
 !
MQTTASYNC_SUCCESS
)

1083 
exô
;

1085 !
ã°_föished
)

1086 #i‡
	`deföed
(
WIN32
)

1087 
	`SÀï
(100);

1089 
	`u¶ìp
(10000L);

1092 
ã°_föished
 = 0;

1093 
cöfo
.
should_Áû
 = 0;

1094 
rc
 = 
	`MQTTAsync_¸óã
(&
cöfo
.
c
, "tcp://rubbish:1883", "async ha connection",

1095 
MQTTCLIENT_PERSISTENCE_DEFAULT
, 
NULL
);

1096 
	`as£π
("goodÑ¯‰om cª©e", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d\n",Ñc);

1097 i‡(
rc
 !
MQTTASYNC_SUCCESS
)

1099 
	`MQTTAsync_de°roy
(&
cöfo
.
c
);

1100 
exô
;

1103 
rc
 = 
	`MQTTAsync_£tCÆlbacks
(
cöfo
.
c
, cöfo.c, 
NULL
, 
ã°1_mesßgeAºived
, NULL);

1104 
	`as£π
("GoodÑ¯‰om sëCÆlbacks", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

1106 
›ts
.
⁄Suc˚ss
 = 
ã°6_⁄C⁄√˘
;

1107 
›ts
.
⁄Faûuª
 = 
ã°6_⁄C⁄√˘Faûuª
;

1108 
›ts
.
c⁄ãxt
 = &
cöfo
;

1109 
›ts
.
£rvîURIs
 = 
uris
;

1110 
›ts
.
£rvîURIcou¡
 = 2;

1112 
	`MyLog
(
LOGA_DEBUG
, "Connecting");

1113 
rc
 = 
	`MQTTAsync_c⁄√˘
(
cöfo
.
c
, &
›ts
);

1114 
rc
 = 0;

1115 
	`as£π
("GoodÑ¯‰om c⁄√˘", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

1116 i‡(
rc
 !
MQTTASYNC_SUCCESS
)

1117 
exô
;

1119 !
ã°_föished
)

1120 #i‡
	`deföed
(
WIN32
)

1121 
	`SÀï
(100);

1123 
	`u¶ìp
(10000L);

1126 
	`MQTTAsync_de°roy
(&
cöfo
.
c
);

1128 
exô
:

1129 
	`MyLog
(
LOGA_INFO
, "TEST6:Åest %s. %dÅestsÑun, %d failures.",

1130 (
Áûuªs
 =0Ë? "∑s£d" : "Áûed", 
ã°s
, failures);

1131 
	`wrôe_ã°_ªsu…
();

1132  
Áûuªs
;

1133 
	}
}

1143 * 
	gã°7_t›ic
 = "C clientÅest7";

1144 
	gã°7_mesßgeCou¡
 = 0;

1146 
	$ã°7_⁄Disc⁄√˘Faûuª
(* 
c⁄ãxt
, 
MQTTAsync_ÁûuªD©a
* 
ª•⁄£
)

1148 
MQTTAsync
 
c
 = (MQTTAsync)
c⁄ãxt
;

1149 
	`MyLog
(
LOGA_DEBUG
, "I¿⁄Disc⁄√˘ faûuª cÆlback %p", 
c
);

1151 
	`as£π
("Successful disconnect", 0, "disconnect failed", 0);

1153 
ã°_föished
 = 1;

1154 
	}
}

1156 
	$ã°7_⁄Disc⁄√˘
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

1158 
MQTTAsync
 
c
 = (MQTTAsync)
c⁄ãxt
;

1159 
	`MyLog
(
LOGA_DEBUG
, "I¿⁄Disc⁄√˘ cÆlback %p", 
c
);

1160 
ã°_föished
 = 1;

1161 
	}
}

1164 
	$ã°7_⁄Unsubs¸ibe
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

1166 
MQTTAsync
 
c
 = (MQTTAsync)
c⁄ãxt
;

1167 
MQTTAsync_disc⁄√˘O±i⁄s
 
›ts
 = 
MQTTAsync_disc⁄√˘O±i⁄s_öôülizî
;

1168 
rc
;

1170 
	`MyLog
(
LOGA_DEBUG
, "I¿⁄Unsubs¸ibê⁄Suc˚s†ˇŒback %p", 
c
);

1171 
›ts
.
⁄Suc˚ss
 = 
ã°7_⁄Disc⁄√˘
;

1172 
›ts
.
c⁄ãxt
 = 
c
;

1174 
rc
 = 
	`MQTTAsync_disc⁄√˘
(
c
, &
›ts
);

1175 
	`as£π
("Disc⁄√˘ suc˚ssful", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

1176 
	}
}

1179 
	$ã°7_mesßgeAºived
(* 
c⁄ãxt
, * 
t›icName
, 
t›icLí
, 
MQTTAsync_mesßge
* 
mesßge
)

1181 
MQTTAsync
 
c
 = (MQTTAsync)
c⁄ãxt
;

1182 
mesßge_cou¡
 = 0;

1184 
	`MyLog
(
LOGA_DEBUG
, "Te°7:Ñe˚ived mesßgêid %d", 
mesßge
->
msgid
);

1186 
ã°7_mesßgeCou¡
++;

1188 
	`MQTTAsync_‰ìMesßge
(&
mesßge
);

1189 
	`MQTTAsync_‰ì
(
t›icName
);

1192 
	}
}

1195 
	gã°7_subs¸ibed
 = 0;

1197 
	$ã°7_⁄Subs¸ibe
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

1199 
MQTTAsync
 
c
 = (MQTTAsync)
c⁄ãxt
;

1201 
	`MyLog
(
LOGA_DEBUG
, "I¿subs¸ibê⁄Suc˚s†ˇŒback %∞gø¡ed qo†%d", 
c
, 
ª•⁄£
->
Æt
.
qos
);

1203 
ã°7_subs¸ibed
 = 1;

1204 
	}
}

1207 
	$ã°7_⁄C⁄√˘
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

1209 
MQTTAsync
 
c
 = (MQTTAsync)
c⁄ãxt
;

1210 
MQTTAsync_ª•⁄£O±i⁄s
 
›ts
 = 
MQTTAsync_ª•⁄£O±i⁄s_öôülizî
;

1211 
rc
;

1213 
	`MyLog
(
LOGA_DEBUG
, "I¿c⁄√˘ onSuc˚s†ˇŒback, c⁄ãxà%p", 
c⁄ãxt
);

1214 
›ts
.
⁄Suc˚ss
 = 
ã°7_⁄Subs¸ibe
;

1215 
›ts
.
c⁄ãxt
 = 
c
;

1217 
rc
 = 
	`MQTTAsync_subs¸ibe
(
c
, 
ã°7_t›ic
, 2, &
›ts
);

1218 
	`as£π
("GoodÑ¯‰om subs¸ibe", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

1219 i‡(
rc
 !
MQTTASYNC_SUCCESS
)

1220 
ã°_föished
 = 1;

1221 
	}
}

1224 
	$ã°7_⁄C⁄√˘O∆y
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

1226 
MQTTAsync
 
c
 = (MQTTAsync)
c⁄ãxt
;

1227 
MQTTAsync_disc⁄√˘O±i⁄s
 
d›ts
 = 
MQTTAsync_disc⁄√˘O±i⁄s_öôülizî
;

1228 
rc
;

1230 
	`MyLog
(
LOGA_DEBUG
, "I¿c⁄√˘ onSuc˚s†ˇŒback, c⁄ãxà%p", 
c⁄ãxt
);

1231 
d›ts
.
c⁄ãxt
 = context;

1232 
d›ts
.
timeout
 = 1000;

1233 
d›ts
.
⁄Suc˚ss
 = 
ã°7_⁄Disc⁄√˘
;

1234 
rc
 = 
	`MQTTAsync_disc⁄√˘
(
c
, &
d›ts
);

1236 
	`as£π
("GoodÑ¯‰om disc⁄√˘", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

1237 i‡(
rc
 !
MQTTASYNC_SUCCESS
)

1238 
ã°_föished
 = 1;

1239 
	}
}

1247 
	$ã°7
(
O±i⁄s
 
›ti⁄s
)

1249 
subsqos
 = 2;

1250 
MQTTAsync
 
c
;

1251 
MQTTAsync_c⁄√˘O±i⁄s
 
›ts
 = 
MQTTAsync_c⁄√˘O±i⁄s_öôülizî
;

1252 
MQTTAsync_wûlO±i⁄s
 
w›ts
 = 
MQTTAsync_wûlO±i⁄s_öôülizî
;

1253 
rc
 = 0;

1254 
MQTTAsync_mesßge
 
pubmsg
 = 
MQTTAsync_mesßge_öôülizî
;

1255 
MQTTAsync_ª•⁄£O±i⁄s
 
r›ts
 = 
MQTTAsync_ª•⁄£O±i⁄s_öôülizî
;

1256 
MQTTAsync_disc⁄√˘O±i⁄s
 
d›ts
 = 
MQTTAsync_disc⁄√˘O±i⁄s_öôülizî
;

1257 
MQTTAsync_tokí
* 
tokís
 = 
NULL
;

1258 
msg_cou¡
 = 6;

1260 
	`MyLog
(
LOGA_INFO
, "StartingÅest 7 -ÖendingÅokens");

1261 
	`Ârötf
(
xml
, "<testcase classname=\"test4\"Çame=\"pendingÅokens\"");

1262 
globÆ_°¨t_time
 = 
	`°¨t_˛ock
();

1263 
ã°_föished
 = 0;

1265 
rc
 = 
	`MQTTAsync_¸óã
(&
c
, 
›ti⁄s
.
c⁄√˘i⁄
, "async_test7",

1266 
MQTTCLIENT_PERSISTENCE_DEFAULT
, 
NULL
);

1267 
	`as£π
("goodÑ¯‰om cª©e", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d\n",Ñc);

1268 i‡(
rc
 !
MQTTASYNC_SUCCESS
)

1270 
	`MQTTAsync_de°roy
(&
c
);

1271 
exô
;

1274 
rc
 = 
	`MQTTAsync_£tCÆlbacks
(
c
, c, 
NULL
, 
ã°7_mesßgeAºived
, NULL);

1275 
	`as£π
("GoodÑ¯‰om sëCÆlbacks", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

1277 
›ts
.
kìpAliveI¡îvÆ
 = 20;

1278 
›ts
.
u£∫ame
 = "testuser";

1279 
›ts
.
∑ssw‹d
 = "testpassword";

1280 
›ts
.
MQTTVîsi⁄
 = 
›ti⁄s
.MQTTVersion;

1282 
›ts
.
wûl
 = &
w›ts
;

1283 
›ts
.
wûl
->
mesßge
 = "will message";

1284 
›ts
.
wûl
->
qos
 = 1;

1285 
›ts
.
wûl
->
ªèöed
 = 0;

1286 
›ts
.
wûl
->
t›icName
 = "willÅopic";

1287 
›ts
.
wûl
 = 
NULL
;

1289 
›ts
.
⁄Faûuª
 = 
NULL
;

1290 
›ts
.
c⁄ãxt
 = 
c
;

1292 
›ts
.
˛ón£ssi⁄
 = 1;

1293 
›ts
.
⁄Suc˚ss
 = 
ã°7_⁄C⁄√˘O∆y
;

1294 
	`MyLog
(
LOGA_DEBUG
, "ConnectingÅo clean up");

1295 
rc
 = 
	`MQTTAsync_c⁄√˘
(
c
, &
›ts
);

1296 
rc
 = 0;

1297 
	`as£π
("GoodÑ¯‰om c⁄√˘", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

1298 i‡(
rc
 !
MQTTASYNC_SUCCESS
)

1299 
exô
;

1301 !
ã°_föished
)

1302 #i‡
	`deföed
(
WIN32
)

1303 
	`SÀï
(100);

1305 
	`u¶ìp
(10000L);

1308 
ã°_föished
 = 0;

1309 
	`MyLog
(
LOGA_DEBUG
, "Connecting");

1310 
›ts
.
˛ón£ssi⁄
 = 0;

1311 
›ts
.
⁄Suc˚ss
 = 
ã°7_⁄C⁄√˘
;

1312 
rc
 = 
	`MQTTAsync_c⁄√˘
(
c
, &
›ts
);

1313 
rc
 = 0;

1314 
	`as£π
("GoodÑ¯‰om c⁄√˘", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

1315 i‡(
rc
 !
MQTTASYNC_SUCCESS
)

1316 
exô
;

1318 !
ã°7_subs¸ibed
)

1319 #i‡
	`deföed
(
WIN32
)

1320 
	`SÀï
(100);

1322 
	`u¶ìp
(10000L);

1325 
pubmsg
.
∑ylﬂd
 = "a muchÜonger messageÅhat we can shortenÅoÅheÉxtentÅhat weÇeedÅoÖayload upÅo 11";

1326 
pubmsg
.
∑ylﬂdÀn
 = 11;

1327 
pubmsg
.
qos
 = 2;

1328 
pubmsg
.
ªèöed
 = 0;

1329 
rc
 = 
	`MQTTAsync_£nd
(
c
, 
ã°_t›ic
, 
pubmsg
.
∑ylﬂdÀn
,Öubmsg.
∑ylﬂd
,Öubmsg.
qos
,Öubmsg.
ªèöed
, &
r›ts
);

1330 
	`MyLog
(
LOGA_DEBUG
, "Tokí wa†%d", 
r›ts
.
tokí
);

1331 
rc
 = 
	`MQTTAsync_isCom∂ëe
(
c
, 
r›ts
.
tokí
);

1332 
	`as£π
("0Ñ¯‰om isCom∂ëe", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

1333 
rc
 = 
	`MQTTAsync_waôF‹Com∂ëi⁄
(
c
, 
r›ts
.
tokí
, 5000L);

1334 
	`as£π
("GoodÑ¯‰om waôF‹Com∂ëi⁄", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

1335 
rc
 = 
	`MQTTAsync_isCom∂ëe
(
c
, 
r›ts
.
tokí
);

1336 
	`as£π
("1Ñ¯‰om isCom∂ëe", 
rc
 == 1, "rc was %d",Ñc);

1338 
ã°7_mesßgeCou¡
 = 0;

1339 
i
 = 0;

1340 
pubmsg
.
qos
 = 2;

1341 
i
 = 0; i < 
msg_cou¡
; ++i)

1343 
pubmsg
.
∑ylﬂd
 = "a muchÜonger messageÅhat we can shortenÅoÅheÉxtentÅhat weÇeedÅoÖayload upÅo 11";

1344 
pubmsg
.
∑ylﬂdÀn
 = 11;

1346 
pubmsg
.
ªèöed
 = 0;

1347 
rc
 = 
	`MQTTAsync_£ndMesßge
(
c
, 
ã°_t›ic
, &
pubmsg
, &
r›ts
);

1350 
d›ts
.
timeout
 = 0;

1351 
d›ts
.
⁄Suc˚ss
 = 
ã°7_⁄Disc⁄√˘
;

1352 
d›ts
.
c⁄ãxt
 = 
c
;

1353 
	`MQTTAsync_disc⁄√˘
(
c
, &
d›ts
);

1355 !
ã°_föished
)

1356 #i‡
	`deföed
(
WIN32
)

1357 
	`SÀï
(100);

1359 
	`u¶ìp
(10000L);

1361 
ã°_föished
 = 0;

1363 
rc
 = 
	`MQTTAsync_gëPídögTokís
(
c
, &
tokís
);

1364 
	`as£π
("gëPídögTokí†r¯=0", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

1366 
	`as£π
("should gë somêtokí†back", 
tokís
 !
NULL
, "tokens was %p",Åokens);

1367 
	`MQTTAsync_‰ì
(
tokís
);

1369 
	`MQTTAsync_de°roy
(&
c
);

1371 
	`MQTTAsync_£tTø˚Levñ
(
MQTTASYNC_TRACE_ERROR
);

1372 
rc
 = 
	`MQTTAsync_¸óã
(&
c
, 
›ti⁄s
.
c⁄√˘i⁄
, "async_ã°7", 
MQTTCLIENT_PERSISTENCE_DEFAULT
, 
NULL
);

1373 
	`as£π
("goodÑ¯‰om cª©e", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d\n",Ñc);

1374 i‡(
rc
 !
MQTTASYNC_SUCCESS
)

1376 
	`MQTTAsync_de°roy
(&
c
);

1377 
exô
;

1380 
rc
 = 
	`MQTTAsync_gëPídögTokís
(
c
, &
tokís
);

1381 
	`as£π
("gëPídögTokí†r¯=0", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

1383 
	`as£π
("should gë somêtokí†back", 
tokís
 !
NULL
, "tokens was %p",Åokens);

1384 i‡(
tokís
)

1386 
i
 = 0;

1387 
tokís
[
i
] != -1)

1388 
	`MyLog
(
LOGA_DEBUG
, "DñivîyÅokí %d", 
tokís
[
i
++]);

1389 
	`MQTTAsync_‰ì
(
tokís
);

1394 
rc
 = 
	`MQTTAsync_£tCÆlbacks
(
c
, c, 
NULL
, 
ã°7_mesßgeAºived
, NULL);

1395 
	`as£π
("GoodÑ¯‰om sëCÆlbacks", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

1397 
	`MyLog
(
LOGA_DEBUG
, "Reconnecting");

1398 
›ts
.
c⁄ãxt
 = 
c
;

1399 i‡(
	`MQTTAsync_c⁄√˘
(
c
, &
›ts
) != 0)

1401 
	`as£π
("GoodÑ¯‰om c⁄√˘", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

1402 
exô
;

1405 #i‡
	`deföed
(
WIN32
)

1406 
	`SÀï
(5000);

1408 
	`u¶ìp
(5000000L);

1411 
rc
 = 
	`MQTTAsync_gëPídögTokís
(
c
, &
tokís
);

1412 
	`as£π
("gëPídögTokí†r¯=0", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

1420 
d›ts
.
⁄Faûuª
 = 
ã°7_⁄Disc⁄√˘Faûuª
;

1421 
d›ts
.
⁄Suc˚ss
 = 
ã°7_⁄Disc⁄√˘
;

1422 
d›ts
.
timeout
 = 1000;

1423 
	`MQTTAsync_disc⁄√˘
(
c
, &
d›ts
);

1425 !
ã°_föished
)

1426 #i‡
	`deföed
(
WIN32
)

1427 
	`SÀï
(100);

1429 
	`u¶ìp
(10000L);

1432 
	`MQTTAsync_de°roy
(&
c
);

1434 
exô
:

1435 
	`MyLog
(
LOGA_INFO
, "TEST7:Åest %s. %dÅestsÑun, %d failures.",

1436 (
Áûuªs
 =0Ë? "∑s£d" : "Áûed", 
ã°s
, failures);

1437 
	`wrôe_ã°_ªsu…
();

1438  
Áûuªs
;

1439 
	}
}

1443 
	$åa˚_ˇŒback
(
MQTTASYNC_TRACE_LEVELS
 
Àvñ
, * 
mesßge
)

1445 
	`¥ötf
("Tø˚ : %d, %s\n", 
Àvñ
, 
mesßge
);

1446 
	}
}

1451 
	$maö
(
¨gc
, ** 
¨gv
)

1453 
rc
 = 0;

1454 (*
ã°s
[])(Ë{
NULL
, 
ã°1
, 
ã°2
, 
ã°3
, 
ã°4
, 
ã°5
, 
ã°6
, 
ã°7
};

1455 
MQTTAsync_«meVÆue
* 
öfo
;

1456 
i
;

1458 
xml
 = 
	`f›í
("TEST-test4.xml", "w");

1459 
	`Ârötf
(
xml
, "<ã°suôê«me=\"ã°4\"Åe°s=\"%d\">\n", ()(
	`ARRAY_SIZE
(
ã°s
)) - 1);

1461 
	`gë›ts
(
¨gc
, 
¨gv
);

1463 
	`MQTTAsync_£tTø˚CÆlback
(
åa˚_ˇŒback
);

1465 
öfo
 = 
	`MQTTAsync_gëVîsi⁄Info
();

1466 
öfo
->
«me
)

1468 
	`MyLog
(
LOGA_INFO
, "%s: %s", 
öfo
->
«me
, info->
vÆue
);

1469 
öfo
++;

1472 
i
 = 0; i < 
›ti⁄s
.
ôî©i⁄s
; ++i)

1474 i‡(
›ti⁄s
.
ã°_no
 == -1)

1476 
›ti⁄s
.
ã°_no
 = 1; o±i⁄s.ã°_nÿ< 
	`ARRAY_SIZE
(
ã°s
); ++options.test_no)

1478 
Áûuªs
 = 0;

1479 
	`MQTTAsync_£tTø˚Levñ
(
MQTTASYNC_TRACE_ERROR
);

1480 
rc
 +
ã°s
[
›ti⁄s
.
ã°_no
](options);

1485 
	`MQTTAsync_£tTø˚Levñ
(
MQTTASYNC_TRACE_ERROR
);

1486 
rc
 = 
ã°s
[
›ti⁄s
.
ã°_no
](options);

1490 i‡(
rc
 == 0)

1491 
	`MyLog
(
LOGA_INFO
, "verdictÖass");

1493 
	`MyLog
(
LOGA_INFO
, "verdict fail");

1495 
	`Ârötf
(
xml
, "</testsuite>\n");

1496 
	`f˛o£
(
xml
);

1498  
rc
;

1499 
	}
}

	@paho-c/test/test5.c

29 
	~"MQTTAsync.h
"

30 
	~<°rög.h
>

31 
	~<°dlib.h
>

32 
	~"Thªad.h
"

34 #i‡!
deföed
(
_WINDOWS
)

35 
	~<sys/time.h
>

36 
	~<sys/sockë.h
>

37 
	~<uni°d.h
>

38 
	~<î∫o.h
>

40 
	~<wösock2.h
>

41 
	~<ws2t˝ù.h
>

42 
	#MAXHOSTNAMELEN
 256

	)

43 
	#EAGAIN
 
WSAEWOULDBLOCK


	)

44 
	#EINTR
 
WSAEINTR


	)

45 
	#EINPROGRESS
 
WSAEINPROGRESS


	)

46 
	#EWOULDBLOCK
 
WSAEWOULDBLOCK


	)

47 
	#ENOTCONN
 
WSAENOTCONN


	)

48 
	#ECONNRESET
 
WSAECONNRESET


	)

49 
	#¢¥ötf
 
_¢¥ötf


	)

52 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ ◊[0]))

	)

54 
	$ußge
()

56 
	`¥ötf
("Options:\n");

57 
	`¥ötf
("\t--test_no <test_no> - RunÅestÇumber <test_no>\n");

58 
	`¥ötf
("\t--server <hostname> - ConnectÅo <hostname> forÅests\n");

59 
	`¥ötf
("\t--client_key <key_file> - Use <key_file>ásÅhe client certificate for SSLáuthentication\n");

60 
	`¥ötf
("\t--client_key_pass <password> - Use <password>ÅoáccessÅheÖrivate key inÅhe client certificate\n");

61 
	`¥ötf
("\t--server_key <key_file> - Use <key_file>ásÅheÅrusted certificate for server\n");

62 
	`¥ötf
("\t--verbose - Enable verbose output \n");

63 
	`¥ötf
("\t--help - This help output\n");

64 
	`exô
(-1);

65 
	}
}

67 
	sO±i⁄s


69 
	mc⁄√˘i⁄
[100];

70 
	mmutuÆ_auth_c⁄√˘i⁄
[100];

71 
	mno˚π_mutuÆ_auth_c⁄√˘i⁄
[100];

72 
	m£rvî_auth_c⁄√˘i⁄
[100];

73 
	m™⁄_c⁄√˘i⁄
[100];

74 * 
	m˛õ¡_key_fûe
;

75 * 
	m˛õ¡_key_∑ss
;

76 * 
	m£rvî_key_fûe
;

77 * 
	m˛õ¡_¥iv©e_key_fûe
;

78 
	mvîbo£
;

79 
	mã°_no
;

80 
	msize
;

81 } 
	g›ti⁄s
 =

89 
NULL
,

91 
NULL
,

99 
MQTTAsync
 
	m˛õ¡
;

100 
	m˛õ¡id
[24];

101 
	mt›ic
[100];

102 
	mmaxmsgs
;

103 
	mrcvdmsgs
[3];

104 
	m£¡msgs
[3];

105 
	mã°Föished
;

106 
	msubs¸ibed
;

107 } 
	tAsyncTe°Clõ¡
;

109 
	#AsyncTe°Clõ¡_öôülizî
 {
NULL
, "\0", "\0", 0, {0, 0, 0}, {0, 0, 0}, 0, 0}

	)

111 
	$gë›ts
(
¨gc
, ** 
¨gv
)

113 
cou¡
 = 1;

115 
cou¡
 < 
¨gc
)

117 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--help") == 0)

119 
	`ußge
();

121 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--test_no") == 0)

123 i‡(++
cou¡
 < 
¨gc
)

124 
›ti⁄s
.
ã°_no
 = 
	`©oi
(
¨gv
[
cou¡
]);

126 
	`ußge
();

128 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--client_key") == 0)

130 i‡(++
cou¡
 < 
¨gc
)

131 
›ti⁄s
.
˛õ¡_key_fûe
 = 
¨gv
[
cou¡
];

133 
	`ußge
();

135 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--client_key_pass") == 0)

137 i‡(++
cou¡
 < 
¨gc
)

138 
›ti⁄s
.
˛õ¡_key_∑ss
 = 
¨gv
[
cou¡
];

140 
	`ußge
();

142 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--server_key") == 0)

144 i‡(++
cou¡
 < 
¨gc
)

145 
›ti⁄s
.
£rvî_key_fûe
 = 
¨gv
[
cou¡
];

147 
	`ußge
();

149 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--verbose") == 0)

151 
›ti⁄s
.
vîbo£
 = 1;

152 
	`¥ötf
("\nSetting verbose on\n");

154 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--hostname") == 0)

156 i‡(++
cou¡
 < 
¨gc
)

158 
	`•rötf
(
›ti⁄s
.
c⁄√˘i⁄
, "s¶://%s:18883", 
¨gv
[
cou¡
]);

159 
	`¥ötf
("Sëtög c⁄√˘i⁄Åÿ%s\n", 
›ti⁄s
.
c⁄√˘i⁄
);

160 
	`•rötf
(
›ti⁄s
.
mutuÆ_auth_c⁄√˘i⁄
, "s¶://%s:18884", 
¨gv
[
cou¡
]);

161 
	`¥ötf
("Sëtög mutuÆ_auth_c⁄√˘i⁄Åÿ%s\n", 
›ti⁄s
.
mutuÆ_auth_c⁄√˘i⁄
);

162 
	`•rötf
(
›ti⁄s
.
no˚π_mutuÆ_auth_c⁄√˘i⁄
, "s¶://%s:18887", 
¨gv
[
cou¡
]);

163 
	`¥ötf
("SettingÇocert_mutual_auth_connectionÅo %s\n",

164 
›ti⁄s
.
no˚π_mutuÆ_auth_c⁄√˘i⁄
);

165 
	`•rötf
(
›ti⁄s
.
£rvî_auth_c⁄√˘i⁄
, "s¶://%s:18885", 
¨gv
[
cou¡
]);

166 
	`¥ötf
("Sëtög sîvî_auth_c⁄√˘i⁄Åÿ%s\n", 
›ti⁄s
.
£rvî_auth_c⁄√˘i⁄
);

167 
	`•rötf
(
›ti⁄s
.
™⁄_c⁄√˘i⁄
, "s¶://%s:18886", 
¨gv
[
cou¡
]);

168 
	`¥ötf
("Sëtögán⁄_c⁄√˘i⁄Åÿ%s\n", 
›ti⁄s
.
™⁄_c⁄√˘i⁄
);

171 
	`ußge
();

173 
cou¡
++;

175 
	}
}

178 
	~<logaX.h
>

179 
	#MyLog
 
logaLöe


	)

181 
	#LOGA_DEBUG
 0

	)

182 
	#LOGA_INFO
 1

	)

183 
	~<°d¨g.h
>

184 
	~<time.h
>

185 
	~<sys/timeb.h
>

186 
	$MyLog
(
LOGA_Àvñ
, * 
f‹m©
, ...)

188 
msg_buf
[256];

189 
va_li°
 
¨gs
;

190 
timeb
 
ts
;

192 
tm
 *
timeöfo
;

194 i‡(
LOGA_Àvñ
 =
LOGA_DEBUG
 && 
›ti⁄s
.
vîbo£
 == 0)

197 
	`·ime
(&
ts
);

198 
timeöfo
 = 
	`loˇ…ime
(&
ts
.
time
);

199 
	`°r·ime
(
msg_buf
, 80, "%Y%m%d %H%M%S", 
timeöfo
);

201 
	`•rötf
(&
msg_buf
[
	`°æí
(msg_buf)], ".%.3hu ", 
ts
.
mûlôm
);

203 
	`va_°¨t
(
¨gs
, 
f‹m©
);

204 
	`v¢¥ötf
(&
msg_buf
[
	`°æí
(msg_buf)], (msg_buf) - strlen(msg_buf),

205 
f‹m©
, 
¨gs
);

206 
	`va_íd
(
¨gs
);

208 
	`¥ötf
("%s\n", 
msg_buf
);

209 
	`fÊush
(
°dout
);

210 
	}
}

213 #i‡
deföed
(
WIN32
Ë|| deföed(
_WINDOWS
)

214 
	#mq¶ìp
(
A
Ë
	`SÀï
(1000*A)

	)

215 
	#START_TIME_TYPE
 
DWORD


	)

216 
DWORD
 
	g°¨t_time
 = 0;

217 
START_TIME_TYPE
 
	$°¨t_˛ock
()

219  
	`GëTickCou¡
();

220 
	}
}

221 #ñi‡
deföed
(
AIX
)

222 
	#mq¶ìp
 
¶ìp


	)

223 
	#START_TIME_TYPE
 
time•ec


	)

224 
START_TIME_TYPE
 
	$°¨t_˛ock
()

226 
time•ec
 
°¨t
;

227 
	`˛ock_gëtime
(
CLOCK_REALTIME
, &
°¨t
);

228  
°¨t
;

229 
	}
}

231 
	#mq¶ìp
 
¶ìp


	)

232 
	#START_TIME_TYPE
 
timevÆ


	)

234 
START_TIME_TYPE
 
	$°¨t_˛ock
()

236 
timevÆ
 
°¨t_time
;

237 
	`gëtimeofday
(&
°¨t_time
, 
NULL
);

238  
°¨t_time
;

239 
	}
}

242 #i‡
deföed
(
WIN32
)

243 
	$ñ≠£d
(
START_TIME_TYPE
 
°¨t_time
)

245  
	`GëTickCou¡
(Ë- 
°¨t_time
;

246 
	}
}

247 #ñi‡
deföed
(
AIX
)

248 
	#as£π
(
a
)

	)

249 
	$ñ≠£d
(
time•ec
 
°¨t
)

251 
time•ec
 
now
, 
ªs
;

253 
	`˛ock_gëtime
(
CLOCK_REALTIME
, &
now
);

254 
	`¡imîsub
(
now
, 
°¨t
, 
ªs
);

255  (
ªs
.
tv_£c
)*1000L + (ªs.
tv_n£c
)/1000000L;

256 
	}
}

258 
	$ñ≠£d
(
START_TIME_TYPE
 
°¨t_time
)

260 
timevÆ
 
now
, 
ªs
;

262 
	`gëtimeofday
(&
now
, 
NULL
);

263 
	`timîsub
(&
now
, &
°¨t_time
, &
ªs
);

264  (
ªs
.
tv_£c
Ë* 1000 + (ªs.
tv_u£c
) / 1000;

265 
	}
}

268 
	#as£π
(
a
, 
b
, 
c
, 
d
Ë
	`myas£π
(
__FILE__
, 
__LINE__
,á, b, c, d)

	)

269 
	#as£π1
(
a
, 
b
, 
c
, 
d
, 
e
Ë
	`myas£π
(
__FILE__
, 
__LINE__
,á, b, c, d,É)

	)

271 
	#MAXMSGS
 30;

	)

273 
	gã°s
 = 0;

274 
	gÁûuªs
 = 0;

275 
FILE
* 
	gxml
;

276 
START_TIME_TYPE
 
	gglobÆ_°¨t_time
;

277 
	gouçut
[3000];

278 * 
	gcur_ouçut
 = 
ouçut
;

281 
	$wrôe_ã°_ªsu…
()

283 
duøti⁄
 = 
	`ñ≠£d
(
globÆ_°¨t_time
);

285 
	`Ârötf
(
xml
, "Åime=\"%ld.%.3ld\" >\n", 
duøti⁄
 / 1000, duration % 1000);

286 i‡(
cur_ouçut
 !
ouçut
)

288 
	`Ârötf
(
xml
, "%s", 
ouçut
);

289 
cur_ouçut
 = 
ouçut
;

291 
	`Ârötf
(
xml
, "</testcase>\n");

292 
	}
}

294 
	$myas£π
(* 
fûíame
, 
löío
, * 
des¸ùti⁄
, 
vÆue
,

295 * 
f‹m©
, ...)

297 ++
ã°s
;

298 i‡(!
vÆue
)

300 
va_li°
 
¨gs
;

302 ++
Áûuªs
;

303 
	`¥ötf
("As£πi⁄ faûed, fûê%s,Üöê%d, des¸ùti⁄: %s", 
fûíame
,

304 
löío
, 
des¸ùti⁄
);

306 
	`va_°¨t
(
¨gs
, 
f‹m©
);

307 
	`v¥ötf
(
f‹m©
, 
¨gs
);

308 
	`va_íd
(
¨gs
);

310 
cur_ouçut
 +
	`•rötf
(cur_output, "<failureÅype=\"%s\">file %s,Üine %d </failure>\n",

311 
des¸ùti⁄
, 
fûíame
, 
löío
);

314 
	`MyLog
(
LOGA_DEBUG
,

316 
fûíame
, 
löío
, 
des¸ùti⁄
);

317 
	}
}

324 vﬁ©ûê
	gmu…iThªad_¨rivedcou¡
 = 0;

325 
	gmu…iThªad_dñivîyCom∂ëed
 = 0;

326 
MQTTAsync_mesßge
 
	gmu…iThªad_pubmsg
 = 
MQTTAsync_mesßge_öôülizî
;

328 
	$mu…iThªad_dñivîyCom∂ëe
(* 
c⁄ãxt
, 
MQTTAsync_tokí
 
dt
)

330 ++
mu…iThªad_dñivîyCom∂ëed
;

331 
	}
}

333 
	$mu…iThªad_mesßgeAºived
(* 
c⁄ãxt
, * 
t›icName
, 
t›icLí
,

334 
MQTTAsync_mesßge
* 
m
)

336 ++
mu…iThªad_¨rivedcou¡
;

337 
	`MyLog
(
LOGA_DEBUG
, "Callback: %d messageÑeceived onÅopic %s is %.*s.",

338 
mu…iThªad_¨rivedcou¡
, 
t›icName
, 
m
->
∑ylﬂdÀn
,

339 (*Ë(
m
->
∑ylﬂd
));

340 i‡(
mu…iThªad_pubmsg
.
∑ylﬂdÀn
 !
m
->∑ylﬂdÀ¿|| 
	`memcmp
(m->
∑ylﬂd
,

341 
mu…iThªad_pubmsg
.
∑ylﬂd
, 
m
->
∑ylﬂdÀn
) != 0)

343 
Áûuªs
++;

344 
	`MyLog
(
LOGA_INFO
, "Error: wrong dataÑeceivedÜengths %d %d\n",

345 
mu…iThªad_pubmsg
.
∑ylﬂdÀn
, 
m
->payloadlen);

347 
	`MQTTAsync_‰ì
(
t›icName
);

348 
	`MQTTAsync_‰ìMesßge
(&
m
);

350 
	}
}

352 
	$£ndAndRe˚ive
(
MQTTAsync
* 
c
, 
qos
, * 
ã°_t›ic
)

354 
MQTTAsync_ª•⁄£O±i⁄s
 
r›ts
;

355 
i
 = 0;

356 
ôî©i⁄s
 = 50;

357 
rc
 = 0;

358 
waô_£c⁄ds
 = 0;

360 
mu…iThªad_dñivîyCom∂ëed
 = 0;

361 
mu…iThªad_¨rivedcou¡
 = 0;

363 
	`MyLog
(
LOGA_DEBUG
, "%d mesßge†© QoS %d", 
ôî©i⁄s
, 
qos
);

364 
mu…iThªad_pubmsg
.
∑ylﬂd


366 
mu…iThªad_pubmsg
.
∑ylﬂdÀn
 = 27;

367 
mu…iThªad_pubmsg
.
qos
 = qos;

368 
mu…iThªad_pubmsg
.
ªèöed
 = 0;

370 
i
 = 1; i <
ôî©i⁄s
; ++i)

372 i‡(
i
 % 10 == 0)

373 
rc
 = 
	`MQTTAsync_£nd
(
c
, 
ã°_t›ic
, 
mu…iThªad_pubmsg
.
∑ylﬂdÀn
,

374 
mu…iThªad_pubmsg
.
∑ylﬂd
, mu…iThªad_pubmsg.
qos
,

375 
mu…iThªad_pubmsg
.
ªèöed
, 
NULL
);

377 
rc
 = 
	`MQTTAsync_£ndMesßge
(
c
, 
ã°_t›ic
, &
mu…iThªad_pubmsg
,

378 &
r›ts
);

379 
	`as£π
("GoodÑ¯‰omÖublish", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

381 #i‡
	`deföed
(
WIN32
)

382 
	`SÀï
(100);

384 
	`u¶ìp
(100000L);

387 
waô_£c⁄ds
 = 10;

388 (
mu…iThªad_¨rivedcou¡
 < 
i
Ë&& (
waô_£c⁄ds
-- > 0))

390 
	`MyLog
(
LOGA_DEBUG
, "Aºived %d cou¡ %d", 
mu…iThªad_¨rivedcou¡
,

391 
i
);

392 #i‡
	`deföed
(
WIN32
)

393 
	`SÀï
(1000);

395 
	`u¶ìp
(1000000L);

398 
	`as£π
("MesßgêAºived", 
waô_£c⁄ds
 > 0,

399 "Timêouàwaôög f‹ mesßgê%d\n", 
i
 );

401 i‡(
qos
 > 0)

407 
waô_£c⁄ds
 = 10;

408 (
mu…iThªad_dñivîyCom∂ëed
 < 
ôî©i⁄s
Ë&& (
waô_£c⁄ds
--

411 
	`MyLog
(
LOGA_DEBUG
, "Delivery Completed %d count %d",

412 
mu…iThªad_dñivîyCom∂ëed
, 
i
);

413 #i‡
	`deföed
(
WIN32
)

414 
	`SÀï
(1000);

416 
	`u¶ìp
(1000000L);

419 
	`as£π
("AŒ Dñivîõ†Com∂ëe", 
waô_£c⁄ds
 > 0,

421 
mu…iThªad_dñivîyCom∂ëed
);

423 
	}
}

435 
	$asyncTe°OnDisc⁄√˘
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

439 
AsyncTe°Clõ¡
* 
tc
 = (AsyncTe°Clõ¡*Ë
c⁄ãxt
;

440 
	`MyLog
(
LOGA_DEBUG
, "I¿asyncTe°OnDisc⁄√˘ cÆlback, %s", 
tc
->
˛õ¡id
);

442 
tc
->
ã°Föished
 = 1;

444 
	}
}

446 
	$asyncTe°OnSíd
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

448 
AsyncTe°Clõ¡
* 
tc
 = (AsyncTe°Clõ¡*Ë
c⁄ãxt
;

450 
qos
 = 
ª•⁄£
->
Æt
.
pub
.
mesßge
.qos;

451 
	`MyLog
(
LOGA_DEBUG
, "I¿asyncTe°OnSíd cÆlback, %s", 
tc
->
˛õ¡id
);

453 
tc
->
£¡msgs
[
qos
]++;

455 
	}
}

457 
	$asyncTe°OnSubs¸ibeFaûuª
(* 
c⁄ãxt
, 
MQTTAsync_ÁûuªD©a
* 
ª•⁄£
)

459 
AsyncTe°Clõ¡
* 
tc
 = (AsyncTe°Clõ¡*Ë
c⁄ãxt
;

460 
	`MyLog
(
LOGA_DEBUG
, "InásyncTestOnSubscribeFailure callback, %s",

461 
tc
->
˛õ¡id
);

463 
	`as£π
("There should beÇo failures inÅhisÅest. ", 0, "asyncTestOnSubscribeFailure callback was called\n", 0);

464 
	}
}

466 
	$asyncTe°OnUnsubs¸ibe
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

468 
AsyncTe°Clõ¡
* 
tc
 = (AsyncTe°Clõ¡*Ë
c⁄ãxt
;

469 
MQTTAsync_disc⁄√˘O±i⁄s
 
›ts
 = 
MQTTAsync_disc⁄√˘O±i⁄s_öôülizî
;

470 
rc
;

472 
	`MyLog
(
LOGA_DEBUG
, "I¿asyncTe°OnUnsubs¸ibêˇŒback, %s", 
tc
->
˛õ¡id
);

473 
›ts
.
⁄Suc˚ss
 = 
asyncTe°OnDisc⁄√˘
;

474 
›ts
.
c⁄ãxt
 = 
tc
;

476 
rc
 = 
	`MQTTAsync_disc⁄√˘
(
tc
->
˛õ¡
, &
›ts
);

477 
	}
}

479 
	$asyncTe°OnSubs¸ibe
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

481 
AsyncTe°Clõ¡
* 
tc
 = (AsyncTe°Clõ¡*Ë
c⁄ãxt
;

482 
rc
, 
i
;

483 
	`MyLog
(
LOGA_DEBUG
, "I¿asyncTe°OnSubs¸ibêˇŒback, %s", 
tc
->
˛õ¡id
);

485 
tc
->
subs¸ibed
 = 1;

487 
i
 = 0; i < 3; i++)

489 
MQTTAsync_mesßge
 
pubmsg
 = 
MQTTAsync_mesßge_öôülizî
;

491 
pubmsg
.
∑ylﬂd


493 
pubmsg
.
∑ylﬂdÀn
 = 11;

494 
pubmsg
.
qos
 = 
i
;

495 
pubmsg
.
ªèöed
 = 0;

497 
MQTTAsync_ª•⁄£O±i⁄s
 
›ts
 = 
MQTTAsync_ª•⁄£O±i⁄s_öôülizî
;

499 
›ts
.
c⁄ãxt
 = &
tc
;

501 
rc
 = 
	`MQTTAsync_£nd
(
tc
->
˛õ¡
,Åc->
t›ic
, 
pubmsg
.
∑ylﬂdÀn
,

502 
pubmsg
.
∑ylﬂd
,Öubmsg.
qos
,Öubmsg.
ªèöed
, &
›ts
);

503 
	`as£π
("GoodÑ¯‰omÖublish", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

504 
tc
->
£¡msgs
[
i
]++;

505 
	`MyLog
(
LOGA_DEBUG
, "Maxmsg†%d", 
tc
->
maxmsgs
);

507 
	}
}

509 
	$asyncTe°MesßgeAºived
(* 
c⁄ãxt
, * 
t›icName
, 
t›icLí
,

510 
MQTTAsync_mesßge
* 
m
)

512 
AsyncTe°Clõ¡
* 
tc
 = (AsyncTe°Clõ¡*Ë
c⁄ãxt
;

513 
rc
;

515 
tc
->
rcvdmsgs
[
m
->
qos
]++;

519 
	`MyLog
(

520 
LOGA_DEBUG
,

522 
tc
->
˛õ¡id
, (tc->
maxmsgs
 * 3),Åc->
rcvdmsgs
[0],Åc->rcvdmsgs[1],

523 
tc
->
rcvdmsgs
[2]);

525 i‡(
tc
->
£¡msgs
[
m
->
qos
] <Åc->
maxmsgs
)

527 
MQTTAsync_ª•⁄£O±i⁄s
 
›ts
 = 
MQTTAsync_ª•⁄£O±i⁄s_öôülizî
;

530 
›ts
.
c⁄ãxt
 = 
tc
;

532 
MQTTAsync_mesßge
 
pubmsg
 = 
MQTTAsync_mesßge_öôülizî
;

533 
pubmsg
.
∑ylﬂd


535 
pubmsg
.
∑ylﬂdÀn
 = 11;

536 
pubmsg
.
qos
 = 
m
->qos;

537 
pubmsg
.
ªèöed
 = 0;

539 
rc
 = 
	`MQTTAsync_£nd
(
tc
->
˛õ¡
,Åc->
t›ic
, 
pubmsg
.
∑ylﬂdÀn
,

540 
pubmsg
.
∑ylﬂd
,Öubmsg.
qos
,Öubmsg.
ªèöed
, &
›ts
);

541 
	`as£π
("GoodÑ¯‰omÖublish", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d messages sent %d,%d,%d",Ñc);

542 
	`MyLog
(
LOGA_DEBUG
, "Mesßge†£¡ %d,%d,%d", 
tc
->
£¡msgs
[0],

543 
tc
->
£¡msgs
[1],Åc->sentmsgs[2]);

544 
tc
->
£¡msgs
[
m
->
qos
]++;

546 i‡((
tc
->
rcvdmsgs
[0] +Åc->rcvdmsgs[1] +Åc->rcvdmsgs[2]Ë=—c->
maxmsgs


549 
	`MyLog
(
LOGA_DEBUG
, "ReadyÅo unsubscribe");

550 
MQTTAsync_ª•⁄£O±i⁄s
 
›ts
 = 
MQTTAsync_ª•⁄£O±i⁄s_öôülizî
;

552 
›ts
.
⁄Suc˚ss
 = 
asyncTe°OnUnsubs¸ibe
;

553 
›ts
.
c⁄ãxt
 = 
tc
;

554 
rc
 = 
	`MQTTAsync_unsubs¸ibe
(
tc
->
˛õ¡
,Åc->
t›ic
, &
›ts
);

555 
	`as£π
("Unsubs¸ibêsuc˚ssful", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

558 
	`MyLog
(
LOGA_DEBUG
, "LeavingásyncTestMessageArrived callback");

559 
	`MQTTAsync_‰ìMesßge
(&
m
);

560 
	`MQTTAsync_‰ì
(
t›icName
);

562 
	}
}

564 
	$asyncTe°OnDñivîyCom∂ëe
(* 
c⁄ãxt
, 
MQTTAsync_tokí
 
tokí
)

567 
	}
}

569 
	$asyncTe°OnC⁄√˘
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

571 
AsyncTe°Clõ¡
* 
tc
 = (AsyncTe°Clõ¡*Ë
c⁄ãxt
;

572 
subsqos
 = 2;

573 
rc
;

574 
	`MyLog
(
LOGA_DEBUG
, "I¿asyncTe°OnC⁄√˘ cÆlback, %s", 
tc
->
˛õ¡id
);

576 
MQTTAsync_ª•⁄£O±i⁄s
 
›ts
 = 
MQTTAsync_ª•⁄£O±i⁄s_öôülizî
;

577 
›ts
.
⁄Suc˚ss
 = 
asyncTe°OnSubs¸ibe
;

578 
›ts
.
⁄Faûuª
 = 
asyncTe°OnSubs¸ibeFaûuª
;

579 
›ts
.
c⁄ãxt
 = 
tc
;

581 
rc
 = 
	`MQTTAsync_subs¸ibe
(
tc
->
˛õ¡
,Åc->
t›ic
, 
subsqos
, &
›ts
);

582 
	`as£π
("GoodÑ¯‰om subs¸ibe", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

583 
	}
}

591 
	gã°1Föished
 = 0;

593 
	gã°1OnFaûuªCÆÀd
 = 0;

595 
	$ã°1OnFaûuª
(* 
c⁄ãxt
, 
MQTTAsync_ÁûuªD©a
* 
ª•⁄£
)

597 
	`MyLog
(
LOGA_DEBUG
, "I¿c⁄√˘ onFaûuª cÆlback, c⁄ãxà%p", 
c⁄ãxt
);

599 
ã°1OnFaûuªCÆÀd
++;

600 
ã°1Föished
 = 1;

601 
	}
}

603 
	$ã°1OnC⁄√˘
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

606 
	`MyLog
(
LOGA_DEBUG
, "I¿c⁄√˘ onSuc˚s†ˇŒback, c⁄ãxà%p\n", 
c⁄ãxt
);

608 
	`as£π
("Connect shouldÇot succeed", 0, "connect success callback was called", 0);

610 
ã°1Föished
 = 1;

611 
	}
}

613 
	$ã°1
(
O±i⁄s
 
›ti⁄s
)

615 * 
ã°«me
 = "test1";

616 
subsqos
 = 2;

617 
MQTTAsync
 
c
;

618 
MQTTAsync_c⁄√˘O±i⁄s
 
›ts
 = 
MQTTAsync_c⁄√˘O±i⁄s_öôülizî
;

619 
MQTTAsync_wûlO±i⁄s
 
w›ts
 = 
MQTTAsync_wûlO±i⁄s_öôülizî
;

620 
MQTTAsync_SSLO±i⁄s
 
s¶›ts
 = 
MQTTAsync_SSLO±i⁄s_öôülizî
;

621 
rc
 = 0;

622 * 
ã°_t›ic
 = "C client SSLÅest1";

623 
cou¡
 = 0;

625 
ã°1Föished
 = 0;

626 
Áûuªs
 = 0;

627 
	`MyLog
(
LOGA_INFO
, "Starting SSLÅest 1 - connectionÅoÇonSSL MQTT server");

628 
	`Ârötf
(
xml
, "<ã°ˇ£ cœs¢ame=\"ã°5\"Çame=\"%s\"", 
ã°«me
);

629 
globÆ_°¨t_time
 = 
	`°¨t_˛ock
();

631 
rc
 = 
	`MQTTAsync_¸óã
(&
c
, 
›ti⁄s
.
c⁄√˘i⁄
, "ã°1", 
MQTTCLIENT_PERSISTENCE_DEFAULT
,

632 
NULL
);

633 
	`as£π
("goodÑ¯‰om cª©e", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d \n",Ñc);

634 i‡(
rc
 !
MQTTASYNC_SUCCESS
)

636 
	`MQTTAsync_de°roy
(&
c
);

637 
exô
;

640 
›ts
.
kìpAliveI¡îvÆ
 = 20;

641 
›ts
.
˛ón£ssi⁄
 = 1;

642 
›ts
.
u£∫ame
 = "testuser";

643 
›ts
.
∑ssw‹d
 = "testpassword";

645 
›ts
.
wûl
 = &
w›ts
;

646 
›ts
.
wûl
->
mesßge
 = "will message";

647 
›ts
.
wûl
->
qos
 = 1;

648 
›ts
.
wûl
->
ªèöed
 = 0;

649 
›ts
.
wûl
->
t›icName
 = "willÅopic";

650 
›ts
.
wûl
 = 
NULL
;

651 
›ts
.
⁄Suc˚ss
 = 
ã°1OnC⁄√˘
;

652 
›ts
.
⁄Faûuª
 = 
ã°1OnFaûuª
;

653 
›ts
.
c⁄ãxt
 = 
c
;

655 
›ts
.
s¶
 = &
s¶›ts
;

656 
›ts
.
s¶
->
íabÀSîvîCîtAuth
 = 0;

658 
	`MyLog
(
LOGA_DEBUG
, "Connecting");

659 
rc
 = 
	`MQTTAsync_c⁄√˘
(
c
, &
›ts
);

660 
	`as£π
("GoodÑ¯‰om c⁄√˘", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d ",Ñc);

661 i‡(
rc
 !
MQTTASYNC_SUCCESS
)

663 
Áûuªs
++;

664 
exô
;

668 !
ã°1Föished
 && ++
cou¡
 < 10000)

669 #i‡
	`deföed
(
WIN32
)

670 
	`SÀï
(100);

672 
	`u¶ìp
(10000L);

675 
exô
: 
	`MQTTAsync_de°roy
(&
c
);

676 
	`MyLog
(
LOGA_INFO
, "%s:Åest %s. %dÅestsÑun, %d failures.",

677 (
Áûuªs
 =0Ë? "∑s£d" : "Áûed", 
ã°«me
, 
ã°s
, failures);

678 
	`wrôe_ã°_ªsu…
();

679  
Áûuªs
;

680 
	}
}

688 
	$ã°2aOnC⁄√˘Faûuª
(* 
c⁄ãxt
, 
MQTTAsync_ÁûuªD©a
* 
ª•⁄£
)

690 
AsyncTe°Clõ¡
* 
˛õ¡
 = (AsyncTe°Clõ¡*Ë
c⁄ãxt
;

691 
	`MyLog
(
LOGA_DEBUG
, "InÅest2aOnConnectFailure callback, %s",

692 
˛õ¡
->
˛õ¡id
);

694 
	`as£π
("There should beÇo failures inÅhisÅest. ", 0, "test2aOnConnectFailure callback was called\n", 0);

695 
˛õ¡
->
ã°Föished
 = 1;

696 
	}
}

698 
	$ã°2aOnPublishFaûuª
(* 
c⁄ãxt
, 
MQTTAsync_ÁûuªD©a
* 
ª•⁄£
)

700 
AsyncTe°Clõ¡
* 
˛õ¡
 = (AsyncTe°Clõ¡*Ë
c⁄ãxt
;

701 
	`MyLog
(
LOGA_DEBUG
, "InÅest2aOnPublishFailure callback, %s",

702 
˛õ¡
->
˛õ¡id
);

704 
	`as£π
("There should beÇo failures inÅhisÅest. ", 0, "test2aOnPublishFailure callback was called\n", 0);

705 
	}
}

707 
	$ã°2a
(
O±i⁄s
 
›ti⁄s
)

709 * 
ã°«me
 = "test2a";

711 
AsyncTe°Clõ¡
 
tc
 =

712 
AsyncTe°Clõ¡_öôülizî
;

713 
MQTTAsync
 
c
;

714 
MQTTAsync_c⁄√˘O±i⁄s
 
›ts
 = 
MQTTAsync_c⁄√˘O±i⁄s_öôülizî
;

715 
MQTTAsync_wûlO±i⁄s
 
w›ts
 = 
MQTTAsync_wûlO±i⁄s_öôülizî
;

716 
MQTTAsync_SSLO±i⁄s
 
s¶›ts
 = 
MQTTAsync_SSLO±i⁄s_öôülizî
;

717 
rc
 = 0;

719 
Áûuªs
 = 0;

720 
	`MyLog
(
LOGA_INFO
, "StartingÅest 2a - Mutual SSLáuthentication");

721 
	`Ârötf
(
xml
, "<ã°ˇ£ cœs¢ame=\"ã°5\"Çame=\"%s\"", 
ã°«me
);

722 
globÆ_°¨t_time
 = 
	`°¨t_˛ock
();

724 
	`MQTTAsync_¸óã
(&
c
, 
›ti⁄s
.
mutuÆ_auth_c⁄√˘i⁄
, "ã°2a", 
MQTTCLIENT_PERSISTENCE_DEFAULT
, 
NULL
);

725 
	`as£π
("goodÑ¯‰om cª©e", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d\n",Ñc);

726 i‡(
rc
 !
MQTTASYNC_SUCCESS
)

727 
exô
;

729 
tc
.
˛õ¡
 = 
c
;

730 
	`•rötf
(
tc
.
˛õ¡id
, "%s", 
ã°«me
);

731 
	`•rötf
(
tc
.
t›ic
, "C client SSLÅest2a");

732 
tc
.
maxmsgs
 = 
MAXMSGS
;

734 
tc
.
subs¸ibed
 = 0;

735 
tc
.
ã°Föished
 = 0;

737 
›ts
.
kìpAliveI¡îvÆ
 = 20;

738 
›ts
.
˛ón£ssi⁄
 = 1;

739 
›ts
.
u£∫ame
 = "testuser";

740 
›ts
.
∑ssw‹d
 = "testpassword";

742 
›ts
.
wûl
 = &
w›ts
;

743 
›ts
.
wûl
->
mesßge
 = "will message";

744 
›ts
.
wûl
->
qos
 = 1;

745 
›ts
.
wûl
->
ªèöed
 = 0;

746 
›ts
.
wûl
->
t›icName
 = "willÅopic";

747 
›ts
.
wûl
 = 
NULL
;

748 
›ts
.
⁄Suc˚ss
 = 
asyncTe°OnC⁄√˘
;

749 
›ts
.
⁄Faûuª
 = 
ã°2aOnC⁄√˘Faûuª
;

750 
›ts
.
c⁄ãxt
 = &
tc
;

752 
›ts
.
s¶
 = &
s¶›ts
;

753 i‡(
›ti⁄s
.
£rvî_key_fûe
 !
NULL
)

754 
›ts
.
s¶
->
åu°St‹e
 = 
›ti⁄s
.
£rvî_key_fûe
;

755 
›ts
.
s¶
->
keySt‹e
 = 
›ti⁄s
.
˛õ¡_key_fûe
;

756 i‡(
›ti⁄s
.
˛õ¡_key_∑ss
 !
NULL
)

757 
›ts
.
s¶
->
¥iv©eKeyPassw‹d
 = 
›ti⁄s
.
˛õ¡_key_∑ss
;

761 
rc
 = 
	`MQTTAsync_£tCÆlbacks
(
c
, &
tc
, 
NULL
, 
asyncTe°MesßgeAºived
,

762 
asyncTe°OnDñivîyCom∂ëe
);

763 
	`as£π
("GoodÑ¯‰om sëCÆlbacks", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

765 
	`MyLog
(
LOGA_DEBUG
, "Connecting");

766 
rc
 = 
	`MQTTAsync_c⁄√˘
(
c
, &
›ts
);

767 
	`as£π
("GoodÑ¯‰om c⁄√˘", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

768 i‡(
rc
 !
MQTTASYNC_SUCCESS
)

769 
exô
;

771 !
tc
.
subs¸ibed
 && !tc.
ã°Föished
)

772 #i‡
	`deföed
(
WIN32
)

773 
	`SÀï
(100);

775 
	`u¶ìp
(10000L);

778 i‡(
tc
.
ã°Föished
)

779 
exô
;

781 !
tc
.
ã°Föished
)

782 #i‡
	`deföed
(
WIN32
)

783 
	`SÀï
(100);

785 
	`u¶ìp
(10000L);

788 
	`MyLog
(
LOGA_DEBUG
, "Stopping");

790 
exô
: 
	`MQTTAsync_de°roy
(&
c
);

791 
	`MyLog
(
LOGA_INFO
, "%s:Åest %s. %dÅestsÑun, %d failures.",

792 (
Áûuªs
 =0Ë? "∑s£d" : "Áûed", 
ã°«me
, 
ã°s
, failures);

793 
	`wrôe_ã°_ªsu…
();

794  
Áûuªs
;

795 
	}
}

803 
	gã°2bFöished
;

805 
	$ã°2bOnC⁄√˘Faûuª
(* 
c⁄ãxt
, 
MQTTAsync_ÁûuªD©a
* 
ª•⁄£
)

807 
	`MyLog
(
LOGA_DEBUG
, "I¿ã°2bOnC⁄√˘Faûuª cÆlback, c⁄ãxà%p", 
c⁄ãxt
);

809 
	`as£π
("ThisÅest should callÅest2bOnConnectFailure. ", 1, "test2bOnConnectFailure callback was called\n", 1);

810 
ã°2bFöished
 = 1;

811 
	}
}

813 
	$ã°2bOnC⁄√˘
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

815 
	`MyLog
(
LOGA_DEBUG
, "I¿ã°2bOnC⁄√˘Faûuª cÆlback, c⁄ãxà%p", 
c⁄ãxt
);

817 
	`as£π
("This connect shouldÇot succeed. ", 0, "test2bOnConnect callback was called\n", 0);

818 
ã°2bFöished
 = 1;

819 
	}
}

821 
	$ã°2b
(
O±i⁄s
 
›ti⁄s
)

823 * 
ã°«me
 = "test2b";

824 
subsqos
 = 2;

825 
MQTTAsync
 
c
;

826 
MQTTAsync_c⁄√˘O±i⁄s
 
›ts
 = 
MQTTAsync_c⁄√˘O±i⁄s_öôülizî
;

827 
MQTTAsync_wûlO±i⁄s
 
w›ts
 = 
MQTTAsync_wûlO±i⁄s_öôülizî
;

828 
MQTTAsync_SSLO±i⁄s
 
s¶›ts
 = 
MQTTAsync_SSLO±i⁄s_öôülizî
;

829 
rc
 = 0;

830 
cou¡
 = 0;

832 
ã°2bFöished
 = 0;

833 
Áûuªs
 = 0;

834 
	`MyLog
(
LOGA_INFO
,

836 
	`Ârötf
(
xml
, "<ã°ˇ£ cœs¢ame=\"ã°5\"Çame=\"%s\"", 
ã°«me
);

837 
globÆ_°¨t_time
 = 
	`°¨t_˛ock
();

839 
rc
 = 
	`MQTTAsync_¸óã
(&
c
, 
›ti⁄s
.
no˚π_mutuÆ_auth_c⁄√˘i⁄
,

840 "ã°2b", 
MQTTCLIENT_PERSISTENCE_DEFAULT
, 
NULL
);

841 
	`as£π
("goodÑ¯‰om cª©e", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d\n",Ñc);

842 i‡(
rc
 !
MQTTASYNC_SUCCESS
)

844 
	`MQTTAsync_de°roy
(&
c
);

845 
exô
;

848 
›ts
.
kìpAliveI¡îvÆ
 = 20;

849 
›ts
.
˛ón£ssi⁄
 = 1;

850 
›ts
.
u£∫ame
 = "testuser";

851 
›ts
.
∑ssw‹d
 = "testpassword";

853 
›ts
.
wûl
 = &
w›ts
;

854 
›ts
.
wûl
->
mesßge
 = "will message";

855 
›ts
.
wûl
->
qos
 = 1;

856 
›ts
.
wûl
->
ªèöed
 = 0;

857 
›ts
.
wûl
->
t›icName
 = "willÅopic";

858 
›ts
.
wûl
 = 
NULL
;

859 
›ts
.
⁄Suc˚ss
 = 
ã°2bOnC⁄√˘
;

860 
›ts
.
⁄Faûuª
 = 
ã°2bOnC⁄√˘Faûuª
;

861 
›ts
.
c⁄ãxt
 = 
c
;

863 
›ts
.
s¶
 = &
s¶›ts
;

864 i‡(
›ti⁄s
.
£rvî_key_fûe
 !
NULL
)

865 
›ts
.
s¶
->
åu°St‹e
 = 
›ti⁄s
.
£rvî_key_fûe
;

866 
›ts
.
s¶
->
keySt‹e
 = 
›ti⁄s
.
˛õ¡_key_fûe
;

867 i‡(
›ti⁄s
.
˛õ¡_key_∑ss
 !
NULL
)

868 
›ts
.
s¶
->
¥iv©eKeyPassw‹d
 = 
›ti⁄s
.
˛õ¡_key_∑ss
;

872 
	`MyLog
(
LOGA_DEBUG
, "Connecting");

873 
rc
 = 
	`MQTTAsync_c⁄√˘
(
c
, &
›ts
);

874 
	`as£π
("GoodÑ¯‰om c⁄√˘", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

875 i‡(
rc
 !
MQTTASYNC_SUCCESS
)

876 
exô
;

878 !
ã°2bFöished
 && ++
cou¡
 < 10000)

879 #i‡
	`deföed
(
WIN32
)

880 
	`SÀï
(100);

882 
	`u¶ìp
(10000L);

885 
exô
: 
	`MQTTAsync_de°roy
(&
c
);

886 
	`MyLog
(
LOGA_INFO
, "%s:Åest %s. %dÅestsÑun, %d failures.",

887 (
Áûuªs
 =0Ë? "∑s£d" : "Áûed", 
ã°«me
, 
ã°s
, failures);

888 
	`wrôe_ã°_ªsu…
();

889  
Áûuªs
;

890 
	}
}

898 
	gã°2cFöished
;

900 
	$ã°2cOnC⁄√˘Faûuª
(* 
c⁄ãxt
, 
MQTTAsync_ÁûuªD©a
* 
ª•⁄£
)

902 
	`MyLog
(
LOGA_DEBUG
, "I¿ã°2cOnC⁄√˘Faûuª cÆlback, c⁄ãxà%p", 
c⁄ãxt
);

904 
	`as£π
("ThisÅest should callÅest2cOnConnectFailure. ", 1, "test2cOnConnectFailure callback was called\n", 0);

905 
ã°2cFöished
 = 1;

906 
	}
}

908 
	$ã°2cOnC⁄√˘
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

910 
	`MyLog
(
LOGA_DEBUG
, "I¿ã°2cOnC⁄√˘Faûuª cÆlback, c⁄ãxà%p", 
c⁄ãxt
);

912 
	`as£π
("This connect shouldÇot succeed. ", 0, "test2cOnConnect callback was called\n", 0);

913 
ã°2cFöished
 = 1;

914 
	}
}

916 
	$ã°2c
(
O±i⁄s
 
›ti⁄s
)

918 * 
ã°«me
 = "test2c";

919 
subsqos
 = 2;

920 
MQTTAsync
 
c
;

921 
MQTTAsync_c⁄√˘O±i⁄s
 
›ts
 = 
MQTTAsync_c⁄√˘O±i⁄s_öôülizî
;

922 
MQTTAsync_wûlO±i⁄s
 
w›ts
 = 
MQTTAsync_wûlO±i⁄s_öôülizî
;

923 
MQTTAsync_SSLO±i⁄s
 
s¶›ts
 = 
MQTTAsync_SSLO±i⁄s_öôülizî
;

924 
rc
 = 0;

925 * 
ã°_t›ic
 = "C clientÅest2c";

926 
cou¡
 = 0;

928 
Áûuªs
 = 0;

929 
	`MyLog
(

930 
LOGA_INFO
,

932 
	`Ârötf
(
xml
, "<ã°ˇ£ cœs¢ame=\"ã°5\"Çame=\"%s\"", 
ã°«me
);

933 
globÆ_°¨t_time
 = 
	`°¨t_˛ock
();

935 
rc
 = 
	`MQTTAsync_¸óã
(&
c
, 
›ti⁄s
.
no˚π_mutuÆ_auth_c⁄√˘i⁄
,

936 "ã°2c", 
MQTTCLIENT_PERSISTENCE_DEFAULT
, 
NULL
);

937 
	`as£π
("goodÑ¯‰om cª©e", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d\n",Ñc);

938 i‡(
rc
 !
MQTTASYNC_SUCCESS
)

940 
	`MQTTAsync_de°roy
(&
c
);

941 
exô
;

944 
›ts
.
kìpAliveI¡îvÆ
 = 20;

945 
›ts
.
˛ón£ssi⁄
 = 1;

946 
›ts
.
u£∫ame
 = "testuser";

947 
›ts
.
∑ssw‹d
 = "testpassword";

949 
›ts
.
wûl
 = &
w›ts
;

950 
›ts
.
wûl
->
mesßge
 = "will message";

951 
›ts
.
wûl
->
qos
 = 1;

952 
›ts
.
wûl
->
ªèöed
 = 0;

953 
›ts
.
wûl
->
t›icName
 = "willÅopic";

954 
›ts
.
wûl
 = 
NULL
;

955 
›ts
.
⁄Suc˚ss
 = 
ã°2cOnC⁄√˘
;

956 
›ts
.
⁄Faûuª
 = 
ã°2cOnC⁄√˘Faûuª
;

957 
›ts
.
c⁄ãxt
 = 
c
;

959 
›ts
.
s¶
 = &
s¶›ts
;

961 
›ts
.
s¶
->
keySt‹e
 = 
›ti⁄s
.
˛õ¡_key_fûe
;

962 i‡(
›ti⁄s
.
˛õ¡_key_∑ss
 !
NULL
)

963 
›ts
.
s¶
->
¥iv©eKeyPassw‹d
 = 
›ti⁄s
.
˛õ¡_key_∑ss
;

967 
	`MyLog
(
LOGA_DEBUG
, "Connecting");

968 
rc
 = 
	`MQTTAsync_c⁄√˘
(
c
, &
›ts
);

969 
	`as£π
("GoodÑ¯‰om c⁄√˘", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

970 i‡(
rc
 !
MQTTASYNC_SUCCESS
)

972 
Áûuªs
++;

973 
exô
;

976 !
ã°2cFöished
 && ++
cou¡
 < 10000)

977 #i‡
	`deföed
(
WIN32
)

978 
	`SÀï
(100);

980 
	`u¶ìp
(10000L);

983 
exô
: 
	`MQTTAsync_de°roy
(&
c
);

984 
	`MyLog
(
LOGA_INFO
, "%s:Åest %s. %dÅestsÑun, %d failures.",

985 (
Áûuªs
 =0Ë? "∑s£d" : "Áûed", 
ã°«me
, 
ã°s
, failures);

986 
	`wrôe_ã°_ªsu…
();

987  
Áûuªs
;

988 
	}
}

996 
	$ã°3aOnC⁄√˘Faûuª
(* 
c⁄ãxt
, 
MQTTAsync_ÁûuªD©a
* 
ª•⁄£
)

998 
AsyncTe°Clõ¡
* 
˛õ¡
 = (AsyncTe°Clõ¡*Ë
c⁄ãxt
;

999 
	`MyLog
(
LOGA_DEBUG
, "I¿ã°3aOnC⁄√˘Faûuª cÆlback, c⁄ãxà%p", 
c⁄ãxt
);

1001 
	`as£π
("There should beÇo failures inÅhisÅest. ", 0, "test3aOnConnectFailure callback was called\n", 0);

1002 
˛õ¡
->
ã°Föished
 = 1;

1003 
	}
}

1005 
	$ã°3a
(
O±i⁄s
 
›ti⁄s
)

1007 * 
ã°«me
 = "test3a";

1008 
subsqos
 = 2;

1010 
AsyncTe°Clõ¡
 
tc
 =

1011 
AsyncTe°Clõ¡_öôülizî
;

1012 
MQTTAsync
 
c
;

1013 
MQTTAsync_c⁄√˘O±i⁄s
 
›ts
 = 
MQTTAsync_c⁄√˘O±i⁄s_öôülizî
;

1014 
MQTTAsync_wûlO±i⁄s
 
w›ts
 = 
MQTTAsync_wûlO±i⁄s_öôülizî
;

1015 
MQTTAsync_SSLO±i⁄s
 
s¶›ts
 = 
MQTTAsync_SSLO±i⁄s_öôülizî
;

1016 
rc
 = 0;

1017 
i
;

1019 
Áûuªs
 = 0;

1021 
	`MyLog
(
LOGA_INFO
, "StartingÅest 3a - Serveráuthentication");

1022 
	`Ârötf
(
xml
, "<ã°ˇ£ cœs¢ame=\"ã°5\"Çame=\"%s\"", 
ã°«me
);

1023 
globÆ_°¨t_time
 = 
	`°¨t_˛ock
();

1025 
	`MQTTAsync_¸óã
(&
c
, 
›ti⁄s
.
£rvî_auth_c⁄√˘i⁄
, "ã°3a", 
MQTTCLIENT_PERSISTENCE_DEFAULT
, 
NULL
);

1027 
tc
.
˛õ¡
 = 
c
;

1028 
	`•rötf
(
tc
.
˛õ¡id
, "%s", 
ã°«me
);

1029 
	`•rötf
(
tc
.
t›ic
, "C client SSLÅest3a");

1030 
tc
.
maxmsgs
 = 
MAXMSGS
;

1032 
tc
.
subs¸ibed
 = 0;

1033 
tc
.
ã°Föished
 = 0;

1035 
›ts
.
kìpAliveI¡îvÆ
 = 20;

1036 
›ts
.
˛ón£ssi⁄
 = 1;

1037 
›ts
.
u£∫ame
 = "testuser";

1038 
›ts
.
∑ssw‹d
 = "testpassword";

1040 
›ts
.
wûl
 = &
w›ts
;

1041 
›ts
.
wûl
->
mesßge
 = "will message";

1042 
›ts
.
wûl
->
qos
 = 1;

1043 
›ts
.
wûl
->
ªèöed
 = 0;

1044 
›ts
.
wûl
->
t›icName
 = "willÅopic";

1045 
›ts
.
wûl
 = 
NULL
;

1046 
›ts
.
⁄Suc˚ss
 = 
asyncTe°OnC⁄√˘
;

1047 
›ts
.
⁄Faûuª
 = 
ã°3aOnC⁄√˘Faûuª
;

1048 
›ts
.
c⁄ãxt
 = &
tc
;

1050 
›ts
.
s¶
 = &
s¶›ts
;

1051 i‡(
›ti⁄s
.
£rvî_key_fûe
 !
NULL
)

1052 
›ts
.
s¶
->
åu°St‹e
 = 
›ti⁄s
.
£rvî_key_fûe
;

1058 
rc
 = 
	`MQTTAsync_£tCÆlbacks
(
c
, &
tc
, 
NULL
, 
asyncTe°MesßgeAºived
,

1059 
asyncTe°OnDñivîyCom∂ëe
);

1060 
	`as£π
("GoodÑ¯‰om sëCÆlbacks", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

1062 
	`MyLog
(
LOGA_DEBUG
, "Connecting");

1063 
rc
 = 
	`MQTTAsync_c⁄√˘
(
c
, &
›ts
);

1064 
	`as£π
("GoodÑ¯‰om c⁄√˘", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

1065 i‡(
rc
 !
MQTTASYNC_SUCCESS
)

1066 
exô
;

1068 !
tc
.
subs¸ibed
 && !tc.
ã°Föished
)

1069 #i‡
	`deföed
(
WIN32
)

1070 
	`SÀï
(100);

1072 
	`u¶ìp
(10000L);

1075 i‡(
tc
.
ã°Föished
)

1076 
exô
;

1078 
i
 = 0; i < 3; i++)

1080 
MQTTAsync_mesßge
 
pubmsg
 = 
MQTTAsync_mesßge_öôülizî
;

1082 
pubmsg
.
∑ylﬂd


1084 
pubmsg
.
∑ylﬂdÀn
 = 11;

1085 
pubmsg
.
qos
 = 
i
;

1086 
pubmsg
.
ªèöed
 = 0;

1088 
MQTTAsync_ª•⁄£O±i⁄s
 
›ts
 = 
MQTTAsync_ª•⁄£O±i⁄s_öôülizî
;

1089 
›ts
.
⁄Suc˚ss
 = 
asyncTe°OnSíd
;

1090 
›ts
.
c⁄ãxt
 = &
tc
;

1092 
rc
 = 
	`MQTTAsync_£nd
(
c
, 
tc
.
t›ic
, 
pubmsg
.
∑ylﬂdÀn
,Öubmsg.
∑ylﬂd
,

1093 
pubmsg
.
qos
,Öubmsg.
ªèöed
, &
›ts
);

1094 
	`as£π
("GoodÑ¯‰omÖublish", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

1097 !
tc
.
ã°Föished
)

1098 #i‡
	`deföed
(
WIN32
)

1099 
	`SÀï
(100);

1101 
	`u¶ìp
(10000L);

1104 
	`MyLog
(
LOGA_DEBUG
, "Stopping");

1106 
	`MQTTAsync_de°roy
(&
c
);

1108 
exô
: 
	`MyLog
(
LOGA_INFO
, "%s:Åe° %s. %dÅe°†run, %d faûuªs.", (
Áûuªs


1109 =0Ë? "∑s£d" : "Áûed", 
ã°«me
, 
ã°s
, 
Áûuªs
);

1110 
	`wrôe_ã°_ªsu…
();

1111  
Áûuªs
;

1112 
	}
}

1120 
	gã°3bFöished
;

1122 
	$ã°3bOnC⁄√˘Faûuª
(* 
c⁄ãxt
, 
MQTTAsync_ÁûuªD©a
* 
ª•⁄£
)

1124 
	`MyLog
(
LOGA_DEBUG
, "I¿ã°3bOnC⁄√˘Faûuª cÆlback, c⁄ãxà%p", 
c⁄ãxt
);

1126 
	`as£π
("ThisÅest should callÅest3bOnConnectFailure. ", 1, "test3bOnConnectFailure callback was called\n", 1);

1127 
ã°3bFöished
 = 1;

1128 
	}
}

1130 
	$ã°3bOnC⁄√˘
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

1132 
	`MyLog
(
LOGA_DEBUG
, "I¿ã°3bOnC⁄√˘Faûuª cÆlback, c⁄ãxà%p", 
c⁄ãxt
);

1134 
	`as£π
("This connect shouldÇot succeed. ", 0, "test3bOnConnect callback was called\n", 0);

1135 
ã°3bFöished
 = 1;

1136 
	}
}

1138 
	$ã°3b
(
O±i⁄s
 
›ti⁄s
)

1140 * 
ã°«me
 = "test3b";

1141 
subsqos
 = 2;

1142 
MQTTAsync
 
c
;

1143 
MQTTAsync_c⁄√˘O±i⁄s
 
›ts
 = 
MQTTAsync_c⁄√˘O±i⁄s_öôülizî
;

1144 
MQTTAsync_wûlO±i⁄s
 
w›ts
 = 
MQTTAsync_wûlO±i⁄s_öôülizî
;

1145 
MQTTAsync_SSLO±i⁄s
 
s¶›ts
 = 
MQTTAsync_SSLO±i⁄s_öôülizî
;

1146 
rc
 = 0;

1147 
cou¡
 = 0;

1149 
ã°3bFöished
 = 0;

1150 
Áûuªs
 = 0;

1151 
	`MyLog
(

1152 
LOGA_INFO
,

1154 
	`Ârötf
(
xml
, "<ã°ˇ£ cœs¢ame=\"ã°5\"Çame=\"%s\"", 
ã°«me
);

1155 
globÆ_°¨t_time
 = 
	`°¨t_˛ock
();

1157 
rc
 = 
	`MQTTAsync_¸óã
(&
c
, 
›ti⁄s
.
£rvî_auth_c⁄√˘i⁄
, "ã°3b", 
MQTTCLIENT_PERSISTENCE_DEFAULT
,

1158 
NULL
);

1159 
	`as£π
("goodÑ¯‰om cª©e", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d\n",Ñc);

1160 i‡(
rc
 !
MQTTASYNC_SUCCESS
)

1161 
exô
;

1163 
›ts
.
kìpAliveI¡îvÆ
 = 20;

1164 
›ts
.
˛ón£ssi⁄
 = 1;

1165 
›ts
.
u£∫ame
 = "testuser";

1166 
›ts
.
∑ssw‹d
 = "testpassword";

1168 
›ts
.
wûl
 = &
w›ts
;

1169 
›ts
.
wûl
->
mesßge
 = "will message";

1170 
›ts
.
wûl
->
qos
 = 1;

1171 
›ts
.
wûl
->
ªèöed
 = 0;

1172 
›ts
.
wûl
->
t›icName
 = "willÅopic";

1173 
›ts
.
wûl
 = 
NULL
;

1174 
›ts
.
⁄Suc˚ss
 = 
ã°3bOnC⁄√˘
;

1175 
›ts
.
⁄Faûuª
 = 
ã°3bOnC⁄√˘Faûuª
;

1176 
›ts
.
c⁄ãxt
 = 
c
;

1178 
›ts
.
s¶
 = &
s¶›ts
;

1185 
	`MyLog
(
LOGA_DEBUG
, "Connecting");

1186 
rc
 = 
	`MQTTAsync_c⁄√˘
(
c
, &
›ts
);

1187 
	`as£π
("GoodÑ¯‰om c⁄√˘", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

1188 i‡(
rc
 !
MQTTASYNC_SUCCESS
)

1189 
exô
;

1191 !
ã°3bFöished
 && ++
cou¡
 < 10000)

1192 #i‡
	`deföed
(
WIN32
)

1193 
	`SÀï
(100);

1195 
	`u¶ìp
(10000L);

1198 
exô
: 
	`MQTTAsync_de°roy
(&
c
);

1199 
	`MyLog
(
LOGA_INFO
, "%s:Åest %s. %dÅestsÑun, %d failures.",

1200 (
Áûuªs
 =0Ë? "∑s£d" : "Áûed", 
ã°«me
, 
ã°s
, failures);

1201 
	`wrôe_ã°_ªsu…
();

1202  
Áûuªs
;

1203 
	}
}

1211 
	$ã°4OnC⁄√˘Faûuª
(* 
c⁄ãxt
, 
MQTTAsync_ÁûuªD©a
* 
ª•⁄£
)

1213 
AsyncTe°Clõ¡
* 
˛õ¡
 = (AsyncTe°Clõ¡*Ë
c⁄ãxt
;

1214 
	`MyLog
(
LOGA_DEBUG
, "I¿ã°4OnC⁄√˘Faûuª cÆlback, c⁄ãxà%p", 
c⁄ãxt
);

1216 
	`as£π
("There should beÇo failures inÅhisÅest. ", 0, "test4OnConnectFailure callback was called\n", 0);

1217 
˛õ¡
->
ã°Föished
 = 1;

1218 
	}
}

1220 
	$ã°4OnPublishFaûuª
(* 
c⁄ãxt
, 
MQTTAsync_ÁûuªD©a
* 
ª•⁄£
)

1222 
	`MyLog
(
LOGA_DEBUG
, "I¿ã°4OnPublishFaûuª cÆlback, c⁄ãxà%p", 
c⁄ãxt
);

1224 
	`as£π
("There should beÇo failures inÅhisÅest. ", 0, "test4OnPublishFailure callback was called\n", 0);

1225 
	}
}

1227 
	$ã°4
(
O±i⁄s
 
›ti⁄s
)

1229 * 
ã°«me
 = "test4";

1230 
subsqos
 = 2;

1232 
AsyncTe°Clõ¡
 
tc
 =

1233 
AsyncTe°Clõ¡_öôülizî
;

1234 
MQTTAsync
 
c
;

1235 
MQTTAsync_c⁄√˘O±i⁄s
 
›ts
 = 
MQTTAsync_c⁄√˘O±i⁄s_öôülizî
;

1236 
MQTTAsync_wûlO±i⁄s
 
w›ts
 = 
MQTTAsync_wûlO±i⁄s_öôülizî
;

1237 
MQTTAsync_SSLO±i⁄s
 
s¶›ts
 = 
MQTTAsync_SSLO±i⁄s_öôülizî
;

1238 
rc
 = 0;

1239 
i
;

1241 
Áûuªs
 = 0;

1243 
	`MyLog
(
LOGA_INFO
, "StartingÅest 4 -áccept invalid server certificates");

1244 
	`Ârötf
(
xml
, "<ã°ˇ£ cœs¢ame=\"ã°5\"Çame=\"%s\"", 
ã°«me
);

1245 
globÆ_°¨t_time
 = 
	`°¨t_˛ock
();

1247 
	`MQTTAsync_¸óã
(&
c
, 
›ti⁄s
.
£rvî_auth_c⁄√˘i⁄
, "ã°4", 
MQTTCLIENT_PERSISTENCE_DEFAULT
, 
NULL
);

1249 
tc
.
˛õ¡
 = 
c
;

1250 
	`•rötf
(
tc
.
˛õ¡id
, "%s", 
ã°«me
);

1251 
	`•rötf
(
tc
.
t›ic
, "C client SSLÅest4");

1252 
tc
.
maxmsgs
 = 
MAXMSGS
;

1254 
tc
.
subs¸ibed
 = 0;

1255 
tc
.
ã°Föished
 = 0;

1257 
›ts
.
kìpAliveI¡îvÆ
 = 20;

1258 
›ts
.
˛ón£ssi⁄
 = 1;

1259 
›ts
.
u£∫ame
 = "testuser";

1260 
›ts
.
∑ssw‹d
 = "testpassword";

1262 
›ts
.
wûl
 = &
w›ts
;

1263 
›ts
.
wûl
->
mesßge
 = "will message";

1264 
›ts
.
wûl
->
qos
 = 1;

1265 
›ts
.
wûl
->
ªèöed
 = 0;

1266 
›ts
.
wûl
->
t›icName
 = "willÅopic";

1267 
›ts
.
wûl
 = 
NULL
;

1268 
›ts
.
⁄Suc˚ss
 = 
asyncTe°OnC⁄√˘
;

1269 
›ts
.
⁄Faûuª
 = 
ã°4OnC⁄√˘Faûuª
;

1270 
›ts
.
c⁄ãxt
 = &
tc
;

1272 
›ts
.
s¶
 = &
s¶›ts
;

1277 
›ts
.
s¶
->
íabÀSîvîCîtAuth
 = 0;

1279 
rc
 = 
	`MQTTAsync_£tCÆlbacks
(
c
, &
tc
, 
NULL
, 
asyncTe°MesßgeAºived
,

1280 
asyncTe°OnDñivîyCom∂ëe
);

1281 
	`as£π
("GoodÑ¯‰om sëCÆlbacks", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

1283 
	`MyLog
(
LOGA_DEBUG
, "Connecting");

1284 
rc
 = 
	`MQTTAsync_c⁄√˘
(
c
, &
›ts
);

1285 
	`as£π
("GoodÑ¯‰om c⁄√˘", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

1286 i‡(
rc
 !
MQTTASYNC_SUCCESS
)

1287 
exô
;

1289 !
tc
.
subs¸ibed
 && !tc.
ã°Föished
)

1290 #i‡
	`deföed
(
WIN32
)

1291 
	`SÀï
(100);

1293 
	`u¶ìp
(10000L);

1296 i‡(
tc
.
ã°Föished
)

1297 
exô
;

1299 
i
 = 0; i < 3; i++)

1301 
MQTTAsync_mesßge
 
pubmsg
 = 
MQTTAsync_mesßge_öôülizî
;

1303 
pubmsg
.
∑ylﬂd


1305 
pubmsg
.
∑ylﬂdÀn
 = 11;

1306 
pubmsg
.
qos
 = 
i
;

1307 
pubmsg
.
ªèöed
 = 0;

1309 
MQTTAsync_ª•⁄£O±i⁄s
 
›ts
 = 
MQTTAsync_ª•⁄£O±i⁄s_öôülizî
;

1310 
›ts
.
⁄Suc˚ss
 = 
asyncTe°OnSíd
;

1311 
›ts
.
c⁄ãxt
 = &
tc
;

1313 
rc
 = 
	`MQTTAsync_£nd
(
c
, 
tc
.
t›ic
, 
pubmsg
.
∑ylﬂdÀn
,Öubmsg.
∑ylﬂd
,

1314 
pubmsg
.
qos
,Öubmsg.
ªèöed
, &
›ts
);

1315 
	`as£π
("GoodÑ¯‰omÖublish", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

1318 !
tc
.
ã°Föished
)

1319 #i‡
	`deföed
(
WIN32
)

1320 
	`SÀï
(100);

1322 
	`u¶ìp
(10000L);

1325 
	`MyLog
(
LOGA_DEBUG
, "Stopping");

1327 
exô
: 
	`MQTTAsync_de°roy
(&
c
);

1328 
	`MyLog
(
LOGA_INFO
, "%s:Åest %s. %dÅestsÑun, %d failures.",

1329 (
Áûuªs
 =0Ë? "∑s£d" : "Áûed", 
ã°«me
, 
ã°s
, failures);

1330 
	`wrôe_ã°_ªsu…
();

1331  
Áûuªs
;

1332 
	}
}

1340 
	$ã°5aOnC⁄√˘Faûuª
(* 
c⁄ãxt
, 
MQTTAsync_ÁûuªD©a
* 
ª•⁄£
)

1342 
AsyncTe°Clõ¡
* 
˛õ¡
 = (AsyncTe°Clõ¡*Ë
c⁄ãxt
;

1343 
	`MyLog
(
LOGA_DEBUG
, "I¿ã°5aOnC⁄√˘Faûuª cÆlback, c⁄ãxà%p", 
c⁄ãxt
);

1345 
	`as£π
("There should beÇo failures inÅhisÅest. ", 0, "test5aOnConnectFailure callback was called\n", 0);

1346 
˛õ¡
->
ã°Föished
 = 1;

1347 
	}
}

1349 
	$ã°5aOnPublishFaûuª
(* 
c⁄ãxt
, 
MQTTAsync_ÁûuªD©a
* 
ª•⁄£
)

1351 
	`MyLog
(
LOGA_DEBUG
, "I¿ã°5aOnPublishFaûuª cÆlback, c⁄ãxà%p", 
c⁄ãxt
);

1353 
	`as£π
("There should beÇo failures inÅhisÅest. ", 0, "test5aOnPublishFailure callback was called\n", 0);

1354 
	}
}

1356 
	$ã°5a
(
O±i⁄s
 
›ti⁄s
)

1358 * 
ã°«me
 = "test5a";

1360 
AsyncTe°Clõ¡
 
tc
 =

1361 
AsyncTe°Clõ¡_öôülizî
;

1362 
MQTTAsync
 
c
;

1363 
MQTTAsync_c⁄√˘O±i⁄s
 
›ts
 = 
MQTTAsync_c⁄√˘O±i⁄s_öôülizî
;

1364 
MQTTAsync_wûlO±i⁄s
 
w›ts
 = 
MQTTAsync_wûlO±i⁄s_öôülizî
;

1365 
MQTTAsync_SSLO±i⁄s
 
s¶›ts
 = 
MQTTAsync_SSLO±i⁄s_öôülizî
;

1366 
rc
 = 0;

1367 
i
;

1369 
Áûuªs
 = 0;

1371 
	`MyLog
(
LOGA_INFO
,

1373 
	`Ârötf
(
xml
, "<ã°ˇ£ cœs¢ame=\"ã°5\"Çame=\"%s\"", 
ã°«me
);

1374 
globÆ_°¨t_time
 = 
	`°¨t_˛ock
();

1376 
rc
 = 
	`MQTTAsync_¸óã
(&
c
, 
›ti⁄s
.
™⁄_c⁄√˘i⁄
, "ã°5a", 
MQTTCLIENT_PERSISTENCE_DEFAULT
,

1377 
NULL
);

1378 
	`as£π
("goodÑ¯‰om cª©e", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d\n",Ñc);

1379 i‡(
rc
 !
MQTTASYNC_SUCCESS
)

1380 
exô
;

1382 
tc
.
˛õ¡
 = 
c
;

1383 
	`•rötf
(
tc
.
˛õ¡id
, "%s", 
ã°«me
);

1384 
	`•rötf
(
tc
.
t›ic
, "C client SSLÅest5a");

1385 
tc
.
maxmsgs
 = 
MAXMSGS
;

1387 
tc
.
subs¸ibed
 = 0;

1388 
tc
.
ã°Föished
 = 0;

1390 
›ts
.
kìpAliveI¡îvÆ
 = 20;

1391 
›ts
.
˛ón£ssi⁄
 = 1;

1392 
›ts
.
u£∫ame
 = "testuser";

1393 
›ts
.
∑ssw‹d
 = "testpassword";

1395 
›ts
.
wûl
 = &
w›ts
;

1396 
›ts
.
wûl
->
mesßge
 = "will message";

1397 
›ts
.
wûl
->
qos
 = 1;

1398 
›ts
.
wûl
->
ªèöed
 = 0;

1399 
›ts
.
wûl
->
t›icName
 = "willÅopic";

1400 
›ts
.
wûl
 = 
NULL
;

1401 
›ts
.
⁄Suc˚ss
 = 
asyncTe°OnC⁄√˘
;

1402 
›ts
.
⁄Faûuª
 = 
ã°5aOnC⁄√˘Faûuª
;

1403 
›ts
.
c⁄ãxt
 = &
tc
;

1405 
›ts
.
s¶
 = &
s¶›ts
;

1409 
›ts
.
s¶
->
íabÀdCùhîSuôes
 = "aNULL";

1410 
›ts
.
s¶
->
íabÀSîvîCîtAuth
 = 0;

1412 
rc
 = 
	`MQTTAsync_£tCÆlbacks
(
c
, &
tc
, 
NULL
, 
asyncTe°MesßgeAºived
,

1413 
asyncTe°OnDñivîyCom∂ëe
);

1414 
	`as£π
("GoodÑ¯‰om sëCÆlbacks", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

1416 
	`MyLog
(
LOGA_DEBUG
, "Connecting");

1417 
rc
 = 
	`MQTTAsync_c⁄√˘
(
c
, &
›ts
);

1418 
	`as£π
("GoodÑ¯‰om c⁄√˘", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

1419 i‡(
rc
 !
MQTTASYNC_SUCCESS
)

1420 
exô
;

1422 !
tc
.
subs¸ibed
 && !tc.
ã°Föished
)

1423 #i‡
	`deföed
(
WIN32
)

1424 
	`SÀï
(100);

1426 
	`u¶ìp
(10000L);

1429 i‡(
tc
.
ã°Föished
)

1430 
exô
;

1432 
i
 = 0; i < 3; i++)

1434 
MQTTAsync_mesßge
 
pubmsg
 = 
MQTTAsync_mesßge_öôülizî
;

1436 
pubmsg
.
∑ylﬂd


1438 
pubmsg
.
∑ylﬂdÀn
 = 11;

1439 
pubmsg
.
qos
 = 
i
;

1440 
pubmsg
.
ªèöed
 = 0;

1442 
MQTTAsync_ª•⁄£O±i⁄s
 
›ts
 = 
MQTTAsync_ª•⁄£O±i⁄s_öôülizî
;

1443 
›ts
.
⁄Suc˚ss
 = 
asyncTe°OnSíd
;

1444 
›ts
.
c⁄ãxt
 = &
tc
;

1446 
rc
 = 
	`MQTTAsync_£nd
(
c
, 
tc
.
t›ic
, 
pubmsg
.
∑ylﬂdÀn
,Öubmsg.
∑ylﬂd
,

1447 
pubmsg
.
qos
,Öubmsg.
ªèöed
, &
›ts
);

1448 
	`as£π
("GoodÑ¯‰omÖublish", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

1451 !
tc
.
ã°Föished
)

1452 #i‡
	`deföed
(
WIN32
)

1453 
	`SÀï
(100);

1455 
	`u¶ìp
(10000L);

1458 
	`MyLog
(
LOGA_DEBUG
, "Stopping");

1460 
exô
: 
	`MQTTAsync_de°roy
(&
c
);

1461 
	`MyLog
(
LOGA_INFO
, "%s:Åest %s. %dÅestsÑun, %d failures.",

1462 (
Áûuªs
 =0Ë? "∑s£d" : "Áûed", 
ã°«me
, 
ã°s
, failures);

1463 
	`wrôe_ã°_ªsu…
();

1464  
Áûuªs
;

1465 
	}
}

1473 
	$ã°5bOnC⁄√˘Faûuª
(* 
c⁄ãxt
, 
MQTTAsync_ÁûuªD©a
* 
ª•⁄£
)

1475 
AsyncTe°Clõ¡
* 
˛õ¡
 = (AsyncTe°Clõ¡*Ë
c⁄ãxt
;

1476 
	`MyLog
(
LOGA_DEBUG
, "I¿ã°5bOnC⁄√˘Faûuª cÆlback, c⁄ãxà%p", 
c⁄ãxt
);

1478 
	`as£π
("There should beÇo failures inÅhisÅest. ", 0, "test5bOnConnectFailure callback was called\n", 0);

1479 
˛õ¡
->
ã°Föished
 = 1;

1480 
	}
}

1482 
	$ã°5bOnPublishFaûuª
(* 
c⁄ãxt
, 
MQTTAsync_ÁûuªD©a
* 
ª•⁄£
)

1484 
	`MyLog
(
LOGA_DEBUG
, "I¿ã°5bOnPublishFaûuª cÆlback, c⁄ãxà%p", 
c⁄ãxt
);

1486 
	`as£π
("There should beÇo failures inÅhisÅest. ", 0, "test5bOnPublishFailure callback was called\n", 0);

1487 
	}
}

1489 
	$ã°5b
(
O±i⁄s
 
›ti⁄s
)

1491 * 
ã°«me
 = "test5b";

1493 
AsyncTe°Clõ¡
 
tc
 =

1494 
AsyncTe°Clõ¡_öôülizî
;

1495 
MQTTAsync
 
c
;

1496 
MQTTAsync_c⁄√˘O±i⁄s
 
›ts
 = 
MQTTAsync_c⁄√˘O±i⁄s_öôülizî
;

1497 
MQTTAsync_wûlO±i⁄s
 
w›ts
 = 
MQTTAsync_wûlO±i⁄s_öôülizî
;

1498 
MQTTAsync_SSLO±i⁄s
 
s¶›ts
 = 
MQTTAsync_SSLO±i⁄s_öôülizî
;

1499 
rc
 = 0;

1500 
i
;

1502 
Áûuªs
 = 0;

1504 
	`MyLog
(
LOGA_INFO
,

1506 
	`Ârötf
(
xml
, "<ã°ˇ£ cœs¢ame=\"ã°5\"Çame=\"%s\"", 
ã°«me
);

1507 
globÆ_°¨t_time
 = 
	`°¨t_˛ock
();

1509 
rc
 = 
	`MQTTAsync_¸óã
(&
c
, 
›ti⁄s
.
™⁄_c⁄√˘i⁄
, "ã°5b", 
MQTTCLIENT_PERSISTENCE_DEFAULT
,

1510 
NULL
);

1511 
	`as£π
("goodÑ¯‰om cª©e", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d\n",Ñc);

1512 i‡(
rc
 !
MQTTASYNC_SUCCESS
)

1513 
exô
;

1515 
tc
.
˛õ¡
 = 
c
;

1516 
	`•rötf
(
tc
.
˛õ¡id
, "%s", 
ã°«me
);

1517 
	`•rötf
(
tc
.
t›ic
, "C client SSLÅest5b");

1518 
tc
.
maxmsgs
 = 
MAXMSGS
;

1520 
tc
.
subs¸ibed
 = 0;

1521 
tc
.
ã°Föished
 = 0;

1523 
›ts
.
kìpAliveI¡îvÆ
 = 20;

1524 
›ts
.
˛ón£ssi⁄
 = 1;

1525 
›ts
.
u£∫ame
 = "testuser";

1526 
›ts
.
∑ssw‹d
 = "testpassword";

1528 
›ts
.
wûl
 = &
w›ts
;

1529 
›ts
.
wûl
->
mesßge
 = "will message";

1530 
›ts
.
wûl
->
qos
 = 1;

1531 
›ts
.
wûl
->
ªèöed
 = 0;

1532 
›ts
.
wûl
->
t›icName
 = "willÅopic";

1533 
›ts
.
wûl
 = 
NULL
;

1534 
›ts
.
⁄Suc˚ss
 = 
asyncTe°OnC⁄√˘
;

1535 
›ts
.
⁄Faûuª
 = 
ã°5bOnC⁄√˘Faûuª
;

1536 
›ts
.
c⁄ãxt
 = &
tc
;

1538 
›ts
.
s¶
 = &
s¶›ts
;

1542 
›ts
.
s¶
->
íabÀdCùhîSuôes
 = "aNULL";

1543 
›ts
.
s¶
->
íabÀSîvîCîtAuth
 = 1;

1545 
rc
 = 
	`MQTTAsync_£tCÆlbacks
(
c
, &
tc
, 
NULL
, 
asyncTe°MesßgeAºived
,

1546 
asyncTe°OnDñivîyCom∂ëe
);

1547 
	`as£π
("GoodÑ¯‰om sëCÆlbacks", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

1549 
	`MyLog
(
LOGA_DEBUG
, "Connecting");

1550 
rc
 = 
	`MQTTAsync_c⁄√˘
(
c
, &
›ts
);

1551 
	`as£π
("GoodÑ¯‰om c⁄√˘", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

1552 i‡(
rc
 !
MQTTASYNC_SUCCESS
)

1553 
exô
;

1555 !
tc
.
subs¸ibed
 && !tc.
ã°Föished
)

1556 #i‡
	`deföed
(
WIN32
)

1557 
	`SÀï
(100);

1559 
	`u¶ìp
(10000L);

1562 i‡(
tc
.
ã°Föished
)

1563 
exô
;

1565 
i
 = 0; i < 3; i++)

1567 
MQTTAsync_mesßge
 
pubmsg
 = 
MQTTAsync_mesßge_öôülizî
;

1569 
pubmsg
.
∑ylﬂd


1571 
pubmsg
.
∑ylﬂdÀn
 = 11;

1572 
pubmsg
.
qos
 = 
i
;

1573 
pubmsg
.
ªèöed
 = 0;

1575 
MQTTAsync_ª•⁄£O±i⁄s
 
›ts
 = 
MQTTAsync_ª•⁄£O±i⁄s_öôülizî
;

1576 
›ts
.
⁄Suc˚ss
 = 
asyncTe°OnSíd
;

1577 
›ts
.
c⁄ãxt
 = &
tc
;

1579 
rc
 = 
	`MQTTAsync_£nd
(
c
, 
tc
.
t›ic
, 
pubmsg
.
∑ylﬂdÀn
,Öubmsg.
∑ylﬂd
,

1580 
pubmsg
.
qos
,Öubmsg.
ªèöed
, &
›ts
);

1581 
	`as£π
("GoodÑ¯‰omÖublish", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

1584 !
tc
.
ã°Föished
)

1585 #i‡
	`deföed
(
WIN32
)

1586 
	`SÀï
(100);

1588 
	`u¶ìp
(10000L);

1591 
	`MyLog
(
LOGA_DEBUG
, "Stopping");

1593 
exô
: 
	`MQTTAsync_de°roy
(&
c
);

1594 
	`MyLog
(
LOGA_INFO
, "%s:Åest %s. %dÅestsÑun, %d failures.",

1595 (
Áûuªs
 =0Ë? "∑s£d" : "Áûed", 
ã°«me
, 
ã°s
, failures);

1596 
	`wrôe_ã°_ªsu…
();

1597  
Áûuªs
;

1598 
	}
}

1606 
	gã°5cFöished
;

1608 
	$ã°5cOnC⁄√˘Faûuª
(* 
c⁄ãxt
, 
MQTTAsync_ÁûuªD©a
* 
ª•⁄£
)

1610 
	`MyLog
(
LOGA_DEBUG
, "I¿ã°5cOnC⁄√˘Faûuª cÆlback, c⁄ãxà%p", 
c⁄ãxt
);

1612 
	`as£π
("ThisÅest should callÅest5cOnConnectFailure. ", 1, "test5cOnConnectFailure callback was called\n", 1);

1613 
ã°5cFöished
 = 1;

1614 
	}
}

1616 
	$ã°5cOnC⁄√˘
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

1618 
	`MyLog
(
LOGA_DEBUG
, "I¿ã°5cOnC⁄√˘Faûuª cÆlback, c⁄ãxà%p", 
c⁄ãxt
);

1620 
	`as£π
("This connect shouldÇot succeed. ", 0, "test5cOnConnect callback was called\n", 0);

1621 
ã°5cFöished
 = 1;

1622 
	}
}

1624 
	$ã°5c
(
O±i⁄s
 
›ti⁄s
)

1626 * 
ã°«me
 = "test5c";

1627 
subsqos
 = 2;

1628 
MQTTAsync
 
c
;

1629 
MQTTAsync_c⁄√˘O±i⁄s
 
›ts
 = 
MQTTAsync_c⁄√˘O±i⁄s_öôülizî
;

1630 
MQTTAsync_wûlO±i⁄s
 
w›ts
 = 
MQTTAsync_wûlO±i⁄s_öôülizî
;

1631 
MQTTAsync_SSLO±i⁄s
 
s¶›ts
 = 
MQTTAsync_SSLO±i⁄s_öôülizî
;

1632 
rc
 = 0;

1633 
cou¡
 = 0;

1635 
ã°5cFöished
 = 0;

1636 
Áûuªs
 = 0;

1637 
	`MyLog
(
LOGA_INFO
,

1639 
	`Ârötf
(
xml
, "<ã°ˇ£ cœs¢ame=\"ã°5\"Çame=\"%s\"", 
ã°«me
);

1640 
globÆ_°¨t_time
 = 
	`°¨t_˛ock
();

1642 
rc
 = 
	`MQTTAsync_¸óã
(&
c
, 
›ti⁄s
.
™⁄_c⁄√˘i⁄
, "ã°5c", 
MQTTCLIENT_PERSISTENCE_DEFAULT
,

1643 
NULL
);

1644 
	`as£π
("goodÑ¯‰om cª©e", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d\n",Ñc);

1645 i‡(
rc
 !
MQTTASYNC_SUCCESS
)

1646 
exô
;

1648 
›ts
.
kìpAliveI¡îvÆ
 = 20;

1649 
›ts
.
˛ón£ssi⁄
 = 1;

1650 
›ts
.
u£∫ame
 = "testuser";

1651 
›ts
.
∑ssw‹d
 = "testpassword";

1653 
›ts
.
wûl
 = &
w›ts
;

1654 
›ts
.
wûl
->
mesßge
 = "will message";

1655 
›ts
.
wûl
->
qos
 = 1;

1656 
›ts
.
wûl
->
ªèöed
 = 0;

1657 
›ts
.
wûl
->
t›icName
 = "willÅopic";

1658 
›ts
.
wûl
 = 
NULL
;

1659 
›ts
.
⁄Suc˚ss
 = 
ã°5cOnC⁄√˘
;

1660 
›ts
.
⁄Faûuª
 = 
ã°5cOnC⁄√˘Faûuª
;

1661 
›ts
.
c⁄ãxt
 = 
c
;

1663 
›ts
.
s¶
 = &
s¶›ts
;

1668 
›ts
.
s¶
->
íabÀSîvîCîtAuth
 = 0;

1670 
	`MyLog
(
LOGA_DEBUG
, "Connecting");

1671 
rc
 = 
	`MQTTAsync_c⁄√˘
(
c
, &
›ts
);

1672 
	`as£π
("GoodÑ¯‰om c⁄√˘", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d\n",Ñc);

1673 i‡(
rc
 !
MQTTASYNC_SUCCESS
)

1674 
exô
;

1676 !
ã°5cFöished
 && ++
cou¡
 < 10000)

1677 #i‡
	`deföed
(
WIN32
)

1678 
	`SÀï
(100);

1680 
	`u¶ìp
(10000L);

1683 
exô
:

1684 
	`MQTTAsync_de°roy
(&
c
);

1685 
	`MyLog
(
LOGA_INFO
, "%s:Åest %s. %dÅestsÑun, %d failures.",

1686 (
Áûuªs
 =0Ë? "∑s£d" : "Áûed", 
ã°«me
, 
ã°s
, failures);

1687 
	`wrôe_ã°_ªsu…
();

1688  
Áûuªs
;

1689 
	}
}

1697 
	$ã°6OnC⁄√˘Faûuª
(* 
c⁄ãxt
, 
MQTTAsync_ÁûuªD©a
* 
ª•⁄£
)

1699 
AsyncTe°Clõ¡
* 
˛õ¡
 = (AsyncTe°Clõ¡*Ë
c⁄ãxt
;

1700 
	`MyLog
(
LOGA_DEBUG
, "I¿ã°6OnC⁄√˘Faûuª cÆlback, c⁄ãxà%p", 
c⁄ãxt
);

1702 
	`as£π
("There should beÇo failures inÅhisÅest. ", 0, "test6OnConnectFailure callback was called\n", 0);

1703 
˛õ¡
->
ã°Föished
 = 1;

1704 
	}
}

1706 
	$ã°6OnPublishFaûuª
(* 
c⁄ãxt
, 
MQTTAsync_ÁûuªD©a
* 
ª•⁄£
)

1708 
	`MyLog
(
LOGA_DEBUG
, "I¿ã°6OnPublishFaûuª cÆlback, c⁄ãxà%p", 
c⁄ãxt
);

1710 
	`as£π
("There should beÇo failures inÅhisÅest. ", 0, "test6OnPublishFailure callback was called\n", 0);

1711 
	}
}

1713 
	$ã°6
(
O±i⁄s
 
›ti⁄s
)

1715 * 
ã°«me
 = "test6";

1716 
	#num_˛õ¡s
 10

	)

1717 
subsqos
 = 2;

1718 
MQTTAsync_c⁄√˘O±i⁄s
 
›ts
 = 
MQTTAsync_c⁄√˘O±i⁄s_öôülizî
;

1719 
MQTTAsync_wûlO±i⁄s
 
w›ts
 = 
MQTTAsync_wûlO±i⁄s_öôülizî
;

1720 
MQTTAsync_SSLO±i⁄s
 
s¶›ts
 = 
MQTTAsync_SSLO±i⁄s_öôülizî
;

1721 
rc
 = 0;

1722 
i
;

1723 
AsyncTe°Clõ¡
 
tc
[
num_˛õ¡s
];

1724 
ã°6föished
 = 0;

1726 
	`MyLog
(
LOGA_INFO
, "StartingÅest 6 - multiple connections");

1727 
	`Ârötf
(
xml
, "<ã°ˇ£ cœs¢ame=\"ã°5\"Çame=\"%s\"", 
ã°«me
);

1728 
globÆ_°¨t_time
 = 
	`°¨t_˛ock
();

1730 
i
 = 0; i < 
num_˛õ¡s
; ++i)

1732 
tc
[
i
].
maxmsgs
 = 
MAXMSGS
;

1733 
tc
[
i
].
rcvdmsgs
[0] = 0;

1734 
tc
[
i
].
rcvdmsgs
[1] = 0;

1735 
tc
[
i
].
rcvdmsgs
[2] = 0;

1736 
tc
[
i
].
£¡msgs
[0] = 0;

1737 
tc
[
i
].
£¡msgs
[1] = 0;

1738 
tc
[
i
].
£¡msgs
[2] = 0;

1739 
tc
[
i
].
ã°Föished
 = 0;

1740 
	`•rötf
(
tc
[
i
].
˛õ¡id
, "sslasync_test6_num_%d", i);

1741 
	`•rötf
(
tc
[
i
].
t›ic
, "sslasyncÅest6ÅopicÇum %d", i);

1743 
rc
 = 
	`MQTTAsync_¸óã
(&(
tc
[
i
].
˛õ¡
), 
›ti⁄s
.
£rvî_auth_c⁄√˘i⁄
,Åc[i].
˛õ¡id
,

1744 
MQTTCLIENT_PERSISTENCE_NONE
, 
NULL
);

1745 
	`as£π
("goodÑ¯‰om cª©e", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d\n",Ñc);

1747 
rc
 = 
	`MQTTAsync_£tCÆlbacks
(
tc
[
i
].
˛õ¡
, &tc[i], 
NULL
,

1748 
asyncTe°MesßgeAºived
, 
NULL
);

1749 
	`as£π
("GoodÑ¯‰om sëCÆlbacks", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

1751 
›ts
.
kìpAliveI¡îvÆ
 = 20;

1752 
›ts
.
˛ón£ssi⁄
 = 1;

1753 
›ts
.
u£∫ame
 = "testuser";

1754 
›ts
.
∑ssw‹d
 = "testpassword";

1756 
›ts
.
wûl
 = &
w›ts
;

1757 
›ts
.
wûl
->
mesßge
 = "will message";

1758 
›ts
.
wûl
->
qos
 = 1;

1759 
›ts
.
wûl
->
ªèöed
 = 0;

1760 
›ts
.
wûl
->
t›icName
 = "willÅopic";

1761 
›ts
.
⁄Suc˚ss
 = 
asyncTe°OnC⁄√˘
;

1762 
›ts
.
⁄Faûuª
 = 
ã°6OnC⁄√˘Faûuª
;

1763 
›ts
.
c⁄ãxt
 = &
tc
[
i
];

1765 
›ts
.
s¶
 = &
s¶›ts
;

1766 i‡(
›ti⁄s
.
£rvî_key_fûe
 !
NULL
)

1767 
›ts
.
s¶
->
åu°St‹e
 = 
›ti⁄s
.
£rvî_key_fûe
;

1768 
›ts
.
s¶
->
keySt‹e
 = 
›ti⁄s
.
˛õ¡_key_fûe
;

1769 i‡(
›ti⁄s
.
˛õ¡_key_∑ss
 !
NULL
)

1770 
›ts
.
s¶
->
¥iv©eKeyPassw‹d
 = 
›ti⁄s
.
˛õ¡_key_∑ss
;

1774 
	`MyLog
(
LOGA_DEBUG
, "Connecting");

1775 
rc
 = 
	`MQTTAsync_c⁄√˘
(
tc
[
i
].
˛õ¡
, &
›ts
);

1776 
	`as£π
("GoodÑ¯‰om c⁄√˘", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

1779 
ã°6föished
 < 
num_˛õ¡s
)

1781 
	`MyLog
(
LOGA_DEBUG
, "num_˛õ¡†%dÅe°_föished %d\n", 
num_˛õ¡s
,

1782 
ã°6föished
);

1783 #i‡
	`deföed
(
WIN32
)

1784 
	`SÀï
(100);

1787 
	`u¶ìp
(10000L);

1789 
i
 = 0; i < 
num_˛õ¡s
; ++i)

1791 i‡(
tc
[
i
].
ã°Föished
)

1793 
ã°6föished
++;

1794 
tc
[
i
].
ã°Föished
 = 0;

1799 
	`MyLog
(
LOGA_DEBUG
, "test6: destroying clients");

1801 
i
 = 0; i < 
num_˛õ¡s
; ++i)

1802 
	`MQTTAsync_de°roy
(&
tc
[
i
].
˛õ¡
);

1805 
	`MyLog
(
LOGA_INFO
, "%s:Åest %s. %dÅestsÑun, %d failures.",

1806 (
Áûuªs
 =0Ë? "∑s£d" : "Áûed", 
ã°«me
, 
ã°s
, failures);

1807 
	`wrôe_ã°_ªsu…
();

1808  
Áûuªs
;

1809 
	}
}

1817 * 
	gã°7_∑ylﬂd
 = 
NULL
;

1818 
	gã°7_∑ylﬂdÀn
 = 0;

1820 
	$ã°7OnC⁄√˘Faûuª
(* 
c⁄ãxt
, 
MQTTAsync_ÁûuªD©a
* 
ª•⁄£
)

1822 
AsyncTe°Clõ¡
* 
˛õ¡
 = (AsyncTe°Clõ¡*Ë
c⁄ãxt
;

1823 
	`MyLog
(
LOGA_DEBUG
, "I¿ã°7OnC⁄√˘Faûuª cÆlback, %s", 
˛õ¡
->
˛õ¡id
);

1825 
	`as£π
("There should beÇo failures inÅhisÅest. ", 0, "test7OnConnectFailure callback was called\n", 0);

1826 
˛õ¡
->
ã°Föished
 = 1;

1827 
	}
}

1829 
	$ã°7OnPublishFaûuª
(* 
c⁄ãxt
, 
MQTTAsync_ÁûuªD©a
* 
ª•⁄£
)

1831 
AsyncTe°Clõ¡
* 
˛õ¡
 = (AsyncTe°Clõ¡*Ë
c⁄ãxt
;

1832 
	`MyLog
(
LOGA_DEBUG
, "I¿ã°7OnPublishFaûuª cÆlback, %s", 
˛õ¡
->
˛õ¡id
);

1834 
	`as£π
("There should beÇo failures inÅhisÅest. ", 0, "test7OnPublishFailure callback was called\n", 0);

1835 
˛õ¡
->
ã°Föished
 = 1;

1836 
	}
}

1838 
	$ã°7MesßgeAºived
(* 
c⁄ãxt
, * 
t›icName
, 
t›icLí
,

1839 
MQTTAsync_mesßge
* 
mesßge
)

1841 
AsyncTe°Clõ¡
* 
tc
 = (AsyncTe°Clõ¡*Ë
c⁄ãxt
;

1842 
mesßge_cou¡
 = 0;

1843 
rc
, 
i
;

1845 
	`MyLog
(
LOGA_DEBUG
, "I¿mesßgeAºived cÆlback %p", 
tc
);

1847 
	`as£π
("Mesßgêsizêc‹ª˘", 
mesßge
->
∑ylﬂdÀn
 =
ã°7_∑ylﬂdÀn
,

1848 "mesßgêsizêwa†%d", 
mesßge
->
∑ylﬂdÀn
);

1850 
i
 = 0; i < 
›ti⁄s
.
size
; ++i)

1852 i‡(((*Ë
ã°7_∑ylﬂd
)[
i
] !((*Ë
mesßge
->
∑ylﬂd
)[i])

1854 
	`as£π
("Mesßgêc⁄ã¡†c‹ª˘", ((*)
ã°7_∑ylﬂd
)[
i
] !((*)
mesßge
->
∑ylﬂd
)[i],

1855 "mesßgêc⁄ã¡ wa†%c", ((*)
mesßge
->
∑ylﬂd
)[
i
]);

1860 i‡(++
mesßge_cou¡
 == 1)

1862 
MQTTAsync_mesßge
 
pubmsg
 = 
MQTTAsync_mesßge_öôülizî
;

1863 
MQTTAsync_ª•⁄£O±i⁄s
 
›ts
 = 
MQTTAsync_ª•⁄£O±i⁄s_öôülizî
;

1865 
pubmsg
.
∑ylﬂd
 = 
ã°7_∑ylﬂd
;

1866 
pubmsg
.
∑ylﬂdÀn
 = 
ã°7_∑ylﬂdÀn
;

1867 
pubmsg
.
qos
 = 1;

1868 
pubmsg
.
ªèöed
 = 0;

1869 
›ts
.
⁄Suc˚ss
 = 
NULL
;

1870 
›ts
.
⁄Faûuª
 = 
ã°7OnPublishFaûuª
;

1871 
›ts
.
c⁄ãxt
 = 
tc
;

1873 
rc
 = 
	`MQTTAsync_£ndMesßge
(
tc
->
˛õ¡
,Åc->
t›ic
, &
pubmsg
, &
›ts
);

1875 i‡(
mesßge_cou¡
 == 2)

1877 
MQTTAsync_mesßge
 
pubmsg
 = 
MQTTAsync_mesßge_öôülizî
;

1878 
MQTTAsync_ª•⁄£O±i⁄s
 
›ts
 = 
MQTTAsync_ª•⁄£O±i⁄s_öôülizî
;

1880 
pubmsg
.
∑ylﬂd
 = 
ã°7_∑ylﬂd
;

1881 
pubmsg
.
∑ylﬂdÀn
 = 
ã°7_∑ylﬂdÀn
;

1882 
pubmsg
.
qos
 = 0;

1883 
pubmsg
.
ªèöed
 = 0;

1884 
›ts
.
⁄Suc˚ss
 = 
NULL
;

1885 
›ts
.
⁄Faûuª
 = 
ã°7OnPublishFaûuª
;

1886 
›ts
.
c⁄ãxt
 = 
tc
;

1887 
rc
 = 
	`MQTTAsync_£ndMesßge
(
tc
->
˛õ¡
,Åc->
t›ic
, &
pubmsg
, &
›ts
);

1891 
MQTTAsync_ª•⁄£O±i⁄s
 
›ts
 = 
MQTTAsync_ª•⁄£O±i⁄s_öôülizî
;

1893 
›ts
.
⁄Suc˚ss
 = 
asyncTe°OnUnsubs¸ibe
;

1894 
›ts
.
c⁄ãxt
 = 
tc
;

1895 
rc
 = 
	`MQTTAsync_unsubs¸ibe
(
tc
->
˛õ¡
,Åc->
t›ic
, &
›ts
);

1896 
	`as£π
("Unsubs¸ibêsuc˚ssful", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

1899 
	`MQTTAsync_‰ìMesßge
(&
mesßge
);

1900 
	`MQTTAsync_‰ì
(
t›icName
);

1903 
	}
}

1905 
	$ã°7OnSubs¸ibe
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

1907 
AsyncTe°Clõ¡
* 
tc
 = (AsyncTe°Clõ¡*Ë
c⁄ãxt
;

1908 
MQTTAsync_mesßge
 
pubmsg
 = 
MQTTAsync_mesßge_öôülizî
;

1909 
rc
, 
i
;

1911 
	`MyLog
(
LOGA_DEBUG
, "I¿subs¸ibê⁄Suc˚s†ˇŒback %p", 
tc
);

1913 
pubmsg
.
∑ylﬂd
 = 
ã°7_∑ylﬂd
 = 
	`mÆloc
(
›ti⁄s
.
size
);

1914 
pubmsg
.
∑ylﬂdÀn
 = 
ã°7_∑ylﬂdÀn
 = 
›ti⁄s
.
size
;

1916 
	`§™d
(33);

1917 
i
 = 0; i < 
›ti⁄s
.
size
; ++i)

1918 ((*Ë
pubmsg
.
∑ylﬂd
)[
i
] = 
	`ønd
() % 256;

1920 
pubmsg
.
qos
 = 2;

1921 
pubmsg
.
ªèöed
 = 0;

1923 
rc
 = 
	`MQTTAsync_£nd
(
tc
->
˛õ¡
,Åc->
t›ic
, 
pubmsg
.
∑ylﬂdÀn
,Öubmsg.
∑ylﬂd
,

1924 
pubmsg
.
qos
,Öubmsg.
ªèöed
, 
NULL
);

1925 
	}
}

1927 
	$ã°7OnC⁄√˘
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

1929 
AsyncTe°Clõ¡
* 
tc
 = (AsyncTe°Clõ¡*Ë
c⁄ãxt
;

1930 
MQTTAsync_ª•⁄£O±i⁄s
 
›ts
 = 
MQTTAsync_ª•⁄£O±i⁄s_öôülizî
;

1931 
rc
;

1933 
	`MyLog
(
LOGA_DEBUG
, "I¿c⁄√˘ onSuc˚s†ˇŒback, c⁄ãxà%p", 
c⁄ãxt
);

1934 
›ts
.
⁄Suc˚ss
 = 
ã°7OnSubs¸ibe
;

1935 
›ts
.
c⁄ãxt
 = 
tc
;

1937 
rc
 = 
	`MQTTAsync_subs¸ibe
(
tc
->
˛õ¡
,Åc->
t›ic
, 2, &
›ts
);

1938 
	`as£π
("GoodÑ¯‰om subs¸ibe", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

1939 i‡(
rc
 !
MQTTASYNC_SUCCESS
)

1940 
tc
->
ã°Föished
 = 1;

1941 
	}
}

1943 
	$ã°7
(
O±i⁄s
 
›ti⁄s
)

1945 * 
ã°«me
 = "test7";

1946 
subsqos
 = 2;

1947 
AsyncTe°Clõ¡
 
tc
 =

1948 
AsyncTe°Clõ¡_öôülizî
;

1949 
MQTTAsync
 
c
;

1950 
MQTTAsync_c⁄√˘O±i⁄s
 
›ts
 = 
MQTTAsync_c⁄√˘O±i⁄s_öôülizî
;

1951 
MQTTAsync_wûlO±i⁄s
 
w›ts
 = 
MQTTAsync_wûlO±i⁄s_öôülizî
;

1952 
MQTTAsync_SSLO±i⁄s
 
s¶›ts
 = 
MQTTAsync_SSLO±i⁄s_öôülizî
;

1953 
rc
 = 0;

1954 * 
ã°_t›ic
 = "C clientÅest7";

1955 
ã°_föished
;

1957 
ã°_föished
 = 
Áûuªs
 = 0;

1959 
	`MyLog
(
LOGA_INFO
, "StartingÅest 7 - big messages");

1960 
	`Ârötf
(
xml
, "<ã°ˇ£ cœs¢ame=\"ã°5\"Çame=\"%s\"", 
ã°«me
);

1961 
globÆ_°¨t_time
 = 
	`°¨t_˛ock
();

1963 
rc
 = 
	`MQTTAsync_¸óã
(&
c
, 
›ti⁄s
.
£rvî_auth_c⁄√˘i⁄
, "async_ã°_7", 
MQTTCLIENT_PERSISTENCE_NONE
,

1964 
NULL
);

1965 
	`as£π
("goodÑ¯‰om cª©e", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d\n",Ñc);

1966 i‡(
rc
 !
MQTTASYNC_SUCCESS
)

1968 
	`MQTTAsync_de°roy
(&
c
);

1969 
exô
;

1972 
rc
 = 
	`MQTTAsync_£tCÆlbacks
(
c
, &
tc
, 
NULL
, 
ã°7MesßgeAºived
, NULL);

1973 
	`as£π
("GoodÑ¯‰om sëCÆlbacks", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

1975 
tc
.
˛õ¡
 = 
c
;

1976 
	`•rötf
(
tc
.
˛õ¡id
, "%s", 
ã°«me
);

1977 
	`•rötf
(
tc
.
t›ic
, "C client SSLÅest7");

1978 
tc
.
maxmsgs
 = 
MAXMSGS
;

1980 
tc
.
subs¸ibed
 = 0;

1981 
tc
.
ã°Föished
 = 0;

1983 
›ts
.
kìpAliveI¡îvÆ
 = 20;

1984 
›ts
.
˛ón£ssi⁄
 = 1;

1985 
›ts
.
u£∫ame
 = "testuser";

1986 
›ts
.
∑ssw‹d
 = "testpassword";

1988 
›ts
.
wûl
 = &
w›ts
;

1989 
›ts
.
wûl
->
mesßge
 = "will message";

1990 
›ts
.
wûl
->
qos
 = 1;

1991 
›ts
.
wûl
->
ªèöed
 = 0;

1992 
›ts
.
wûl
->
t›icName
 = "willÅopic";

1993 
›ts
.
wûl
 = 
NULL
;

1994 
›ts
.
⁄Suc˚ss
 = 
ã°7OnC⁄√˘
;

1995 
›ts
.
⁄Faûuª
 = 
ã°7OnC⁄√˘Faûuª
;

1996 
›ts
.
c⁄ãxt
 = &
tc
;

1998 
›ts
.
s¶
 = &
s¶›ts
;

1999 i‡(
›ti⁄s
.
£rvî_key_fûe
 !
NULL
)

2000 
›ts
.
s¶
->
åu°St‹e
 = 
›ti⁄s
.
£rvî_key_fûe
;

2001 
›ts
.
s¶
->
keySt‹e
 = 
›ti⁄s
.
˛õ¡_key_fûe
;

2002 i‡(
›ti⁄s
.
˛õ¡_key_∑ss
 !
NULL
)

2003 
›ts
.
s¶
->
¥iv©eKeyPassw‹d
 = 
›ti⁄s
.
˛õ¡_key_∑ss
;

2007 
	`MyLog
(
LOGA_DEBUG
, "Connecting");

2008 
rc
 = 
	`MQTTAsync_c⁄√˘
(
c
, &
›ts
);

2009 
rc
 = 0;

2010 
	`as£π
("GoodÑ¯‰om c⁄√˘", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

2011 i‡(
rc
 !
MQTTASYNC_SUCCESS
)

2012 
exô
;

2014 !
tc
.
ã°Föished
)

2015 #i‡
	`deföed
(
WIN32
)

2016 
	`SÀï
(100);

2018 
	`u¶ìp
(1000L);

2021 
	`MQTTAsync_de°roy
(&
c
);

2023 
exô
: 
	`MyLog
(
LOGA_INFO
, "%s:Åest %s. %dÅestsÑun, %d failures.",

2024 (
Áûuªs
 =0Ë? "∑s£d" : "Áûed", 
ã°«me
, 
ã°s
, failures);

2025 
	`wrôe_ã°_ªsu…
();

2026  
Áûuªs
;

2027 
	}
}

2029 
	$h™dÀTø˚
(
MQTTASYNC_TRACE_LEVELS
 
Àvñ
, * 
mesßge
)

2031 
	`¥ötf
("%s\n", 
mesßge
);

2032 
	}
}

2034 
	$maö
(
¨gc
, ** 
¨gv
)

2036 * 
numã°s
 = &
ã°s
;

2037 
rc
 = 0;

2038 (*
ã°s
[])() =

2039 { 
NULL
, 
ã°1
, 
ã°2a
, 
ã°2b
, 
ã°2c
, 
ã°3a
, 
ã°3b
, 
ã°4
,

2040  
ã°6
, 
ã°7
 };

2042 
xml
 = 
	`f›í
("TEST-test5.xml", "w");

2043 
	`Ârötf
(
xml
, "<ã°suôê«me=\"ã°5\"Åe°s=\"%lu\">\n", 
	`ARRAY_SIZE
(
ã°s
) - 1);

2045 
	`MQTTAsync_£tTø˚CÆlback
(
h™dÀTø˚
);

2046 
	`gë›ts
(
¨gc
, 
¨gv
);

2048 i‡(
›ti⁄s
.
ã°_no
 == 0)

2050 
›ti⁄s
.
ã°_no
 = 1; o±i⁄s.ã°_nÿ< 
	`ARRAY_SIZE
(
ã°s
); ++options.test_no)

2052 
Áûuªs
 = 0;

2053 
	`MQTTAsync_£tTø˚Levñ
(
MQTTASYNC_TRACE_ERROR
);

2054 
rc
 +
ã°s
[
›ti⁄s
.
ã°_no
](options);

2059 
	`MQTTAsync_£tTø˚Levñ
(
MQTTASYNC_TRACE_ERROR
);

2060 
rc
 = 
ã°s
[
›ti⁄s
.
ã°_no
](options);

2063 
	`MyLog
(
LOGA_INFO
, "TŸÆÅe°†run: %d", *
numã°s
);

2064 i‡(
rc
 == 0)

2065 
	`MyLog
(
LOGA_INFO
, "verdictÖass");

2067 
	`MyLog
(
LOGA_INFO
, "verdict fail");

2069 
	`Ârötf
(
xml
, "</testsuite>\n");

2070 
	`f˛o£
(
xml
);

2072  
rc
;

2073 
	}
}

	@paho-c/test/test6.c

29 
	~"MQTTAsync.h
"

30 
	~<°rög.h
>

31 
	~<°dlib.h
>

33 #i‡!
deföed
(
_WINDOWS
)

34 
	~<sys/time.h
>

35 
	~<uni°d.h
>

36 
	~<sig«l.h
>

38 
	~<wösock2.h
>

41 
	$ußge
()

43 
	`¥ötf
("help!!\n");

44 
	`exô
(-1);

45 
	}
}

47 
	gpub_t›ic
[200];

48 
	gsub_t›ic
[200];

52 * 
	mc⁄√˘i⁄
;

53 ** 
	mc⁄√˘i⁄s
;

54 
	mc⁄√˘i⁄_cou¡
;

55 * 
	mc⁄åﬁ_c⁄√˘i⁄
;

56 * 
	mt›ic
;

57 * 
	mc⁄åﬁ_t›ic
;

58 * 
	m˛õ¡id
;

59 
	m¶Ÿ_no
;

60 
	mqos
;

61 
	mªèöed
;

62 * 
	mu£∫ame
;

63 * 
	m∑ssw‹d
;

64 
	mvîbo£
;

65 
	m≥rsi°í˚
;

66 } 
	g›ts
 =

69 
NULL
,

78 
NULL
,

79 
NULL
,

84 
	$gë›ts
(
¨gc
, ** 
¨gv
)

86 
cou¡
 = 1;

88 
cou¡
 < 
¨gc
)

90 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--qos") == 0)

92 i‡(++
cou¡
 < 
¨gc
)

94 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "0") == 0)

95 
›ts
.
qos
 = 0;

96 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "1") == 0)

97 
›ts
.
qos
 = 1;

98 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "2") == 0)

99 
›ts
.
qos
 = 2;

101 
	`ußge
();

104 
	`ußge
();

106 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--slot_no") == 0)

108 i‡(++
cou¡
 < 
¨gc
)

109 
›ts
.
¶Ÿ_no
 = 
	`©oi
(
¨gv
[
cou¡
]);

111 
	`ußge
();

113 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--connection") == 0)

115 i‡(++
cou¡
 < 
¨gc
)

116 
›ts
.
c⁄√˘i⁄
 = 
¨gv
[
cou¡
];

118 
	`ußge
();

120 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--connections") == 0)

122 i‡(++
cou¡
 < 
¨gc
)

124 
›ts
.
c⁄√˘i⁄_cou¡
 = 0;

125 
›ts
.
c⁄√˘i⁄s
 = 
	`mÆloc
((*) * 5);

126 * 
tok
 = 
	`°πok
(
¨gv
[
cou¡
], " ");

127 
tok
)

129 
›ts
.
c⁄√˘i⁄s
[›ts.
c⁄√˘i⁄_cou¡
] = 
	`mÆloc
(
	`°æí
(
tok
)+1);

130 
	`°r˝y
(
›ts
.
c⁄√˘i⁄s
[›ts.
c⁄√˘i⁄_cou¡
], 
tok
);

131 
›ts
.
c⁄√˘i⁄_cou¡
++;

132 
tok
 = 
	`°πok
(
NULL
, " ");

136 
	`ußge
();

138 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--control_connection") == 0)

140 i‡(++
cou¡
 < 
¨gc
)

141 
›ts
.
c⁄åﬁ_c⁄√˘i⁄
 = 
¨gv
[
cou¡
];

143 
	`ußge
();

145 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--clientid") == 0)

147 i‡(++
cou¡
 < 
¨gc
)

148 
›ts
.
˛õ¡id
 = 
¨gv
[
cou¡
];

150 
	`ußge
();

152 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--username") == 0)

154 i‡(++
cou¡
 < 
¨gc
)

155 
›ts
.
u£∫ame
 = 
¨gv
[
cou¡
];

157 
	`ußge
();

159 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--password") == 0)

161 i‡(++
cou¡
 < 
¨gc
)

162 
›ts
.
∑ssw‹d
 = 
¨gv
[
cou¡
];

164 
	`ußge
();

166 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--persistent") == 0)

167 
›ts
.
≥rsi°í˚
 = 1;

168 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--verbose") == 0)

169 
›ts
.
vîbo£
 = 1;

170 
cou¡
++;

172 
	}
}

175 
	~<logaX.h
>

176 
	#MyLog
 
logaLöe


	)

178 
	#LOGA_DEBUG
 0

	)

179 
	#LOGA_ALWAYS
 1

	)

180 
	#LOGA_INFO
 2

	)

181 
	~<°d¨g.h
>

182 
	~<time.h
>

183 
	~<sys/timeb.h
>

184 
	$MyLog
(
log_Àvñ
, * 
f‹m©
, ...)

186 
msg_buf
[256];

187 
va_li°
 
¨gs
;

188 
timeb
 
ts
;

190 
tm
 *
timeöfo
;

192 i‡(
log_Àvñ
 =
LOGA_DEBUG
 && 
›ts
.
vîbo£
 == 0)

195 
	`·ime
(&
ts
);

196 
timeöfo
 = 
	`loˇ…ime
(&
ts
.
time
);

197 
	`°r·ime
(
msg_buf
, 80, "%Y%m%d %H%M%S", 
timeöfo
);

199 
	`•rötf
(&
msg_buf
[
	`°æí
(msg_buf)], ".%.3hu ", 
ts
.
mûlôm
);

201 
	`•rötf
(&
msg_buf
[
	`°æí
(msg_buf)], "%†", 
›ts
.
˛õ¡id
);

203 
	`va_°¨t
(
¨gs
, 
f‹m©
);

204 
	`v¢¥ötf
(&
msg_buf
[
	`°æí
(msg_buf)], (msg_bufË- såÀn(msg_buf), 
f‹m©
, 
¨gs
);

205 
	`va_íd
(
¨gs
);

207 
	`¥ötf
("%s\n", 
msg_buf
);

208 
	`fÊush
(
°dout
);

209 
	}
}

213 #i‡
deföed
(
WIN32
Ë|| deföed(
_WINDOWS
)

214 
	#mq¶ìp
(
A
Ë
	`SÀï
(1000*A)

	)

215 
	#START_TIME_TYPE
 
DWORD


	)

216 
DWORD
 
	g°¨t_time
 = 0;

217 
START_TIME_TYPE
 
	$°¨t_˛ock
()

219  
	`GëTickCou¡
();

220 
	}
}

221 #ñi‡
deföed
(
AIX
)

222 
	#mq¶ìp
 
¶ìp


	)

223 
	#START_TIME_TYPE
 
time•ec


	)

224 
START_TIME_TYPE
 
	$°¨t_˛ock
()

226 
time•ec
 
°¨t
;

227 
	`˛ock_gëtime
(
CLOCK_REALTIME
, &
°¨t
);

228  
°¨t
;

229 
	}
}

231 
	#mq¶ìp
 
¶ìp


	)

232 
	#START_TIME_TYPE
 
timevÆ


	)

233 
timevÆ
 
	g°¨t_time
;

234 
START_TIME_TYPE
 
	$°¨t_˛ock
()

236 
timevÆ
 
°¨t_time
;

237 
	`gëtimeofday
(&
°¨t_time
, 
NULL
);

238  
°¨t_time
;

239 
	}
}

243 #i‡
deföed
(
WIN32
)

244 
	$ñ≠£d
(
START_TIME_TYPE
 
°¨t_time
)

246  
	`GëTickCou¡
(Ë- 
°¨t_time
;

247 
	}
}

248 #ñi‡
deföed
(
AIX
)

249 
	#as£π
(
a
)

	)

250 
	$ñ≠£d
(
time•ec
 
°¨t
)

252 
time•ec
 
now
, 
ªs
;

254 
	`˛ock_gëtime
(
CLOCK_REALTIME
, &
now
);

255 
	`¡imîsub
(
now
, 
°¨t
, 
ªs
);

256  (
ªs
.
tv_£c
)*1000L + (ªs.
tv_n£c
)/1000000L;

257 
	}
}

259 
	$ñ≠£d
(
START_TIME_TYPE
 
°¨t_time
)

261 
timevÆ
 
now
, 
ªs
;

263 
	`gëtimeofday
(&
now
, 
NULL
);

264 
	`timîsub
(&
now
, &
°¨t_time
, &
ªs
);

265  (
ªs
.
tv_£c
)*1000 + (ªs.
tv_u£c
)/1000;

266 
	}
}

269 
MQTTAsync
 
	gc⁄åﬁ_˛õ¡
;

270 
MQTTAsync_c⁄√˘O±i⁄s
 
	gc⁄n_›ts
 = 
MQTTAsync_c⁄√˘O±i⁄s_öôülizî
;

271 
MQTTAsync
 
	g˛õ¡
;

272 
	g¨rivedCou¡
 = 0;

273 
	gex≥˘edCou¡
 = 0;

274 
	gmósurög
 = 0;

275 
	groundåù_time
 = 0L;

276 
	gîr‹s
 = 0;

277 
	g°›pög
 = 0;

278 
	gc⁄√˘i⁄_lo°
 = 0;

279 
	gª¸óãd
 = 0;

280 
	g˛õ¡_˛ó√d
 = 0;

282 * 
	gwaô_mesßge
 = 
NULL
;

283 * 
	gwaô_mesßge2
 = 
NULL
;

284 
	gc⁄åﬁ_found
 = 0;

285 
	gœ°_com∂ëi⁄_time
 = -1;

286 
	gã°_cou¡
 = 1000;

288 
	$c⁄åﬁ_c⁄√˘i⁄Lo°
(* 
c⁄ãxt
, * 
ˇu£
)

290 
	`MyLog
(
LOGA_ALWAYS
, "Control connectionÜost - stopping");

292 
°›pög
 = 1;

293 
	}
}

303 
	$c⁄åﬁ_mesßgeAºived
(* 
c⁄ãxt
, * 
t›icName
, 
t›icLí
, 
MQTTAsync_mesßge
* 
m
)

305 
	`MyLog
(
LOGA_DEBUG
, "Control messageárrived: %.*s %s",

306 
m
->
∑ylﬂdÀn
, m->
∑ylﬂd
, 
waô_mesßge
);

307 i‡(
	`°rcmp
(
m
->
∑ylﬂd
, "stop") == 0)

308 
°›pög
 = 1;

309 i‡(
waô_mesßge
 !
NULL
 && 
	`°∫cmp
(waô_mesßge, 
m
->
∑ylﬂd
,

310 
	`°æí
(
waô_mesßge
)) == 0)

312 
c⁄åﬁ_found
 = 1;

313 
waô_mesßge
 = 
NULL
;

315 i‡(
waô_mesßge2
 !
NULL
 && 
	`°∫cmp
(waô_mesßge2, 
m
->
∑ylﬂd
,

316 
	`°æí
(
waô_mesßge2
)) == 0)

318 
c⁄åﬁ_found
 = 2;

319 
waô_mesßge2
 = 
NULL
;

322 
	`MQTTAsync_‰ì
(
t›icName
);

323 
	`MQTTAsync_‰ìMesßge
(&
m
);

325 
	}
}

329 
	$c⁄åﬁ_waô
(* 
mesßge
)

331 
cou¡
 = 0;

332 
buf
[120];

334 
c⁄åﬁ_found
 = 0;

335 
waô_mesßge
 = 
mesßge
;

337 
	`•rötf
(
buf
, "waôög f‹: %s", 
mesßge
);

338 
	`c⁄åﬁ_£nd
(
buf
);

340 
c⁄åﬁ_found
 =0 && 
°›pög
 == 0)

342 i‡(++
cou¡
 == 300)

344 
°›pög
 = 1;

345 
	`MyLog
(
LOGA_ALWAYS
, "FaûedÅÿª˚ivêmesßgê%s, st›pög ", 
mesßge
);

348 
	`mq¶ìp
(1);

350  
c⁄åﬁ_found
;

351 
	}
}

355 
	$c⁄åﬁ_which
(* 
mesßge1
, * 
mesßge2
)

357 
cou¡
 = 0;

358 
c⁄åﬁ_found
 = 0;

359 
waô_mesßge
 = 
mesßge1
;

360 
waô_mesßge2
 = 
mesßge2
;

362 
c⁄åﬁ_found
 == 0)

364 i‡(++
cou¡
 == 300)

366 
	`mq¶ìp
(1);

368  
c⁄åﬁ_found
;

369 
	}
}

372 
	$c⁄åﬁ_£nd
(* 
mesßge
)

374 
buf
[156];

375 
rc
 = 0;

376 
MQTTAsync_ª•⁄£O±i⁄s
 
r›ts
 = 
MQTTAsync_ª•⁄£O±i⁄s_öôülizî
;

378 
	`•rötf
(
buf
, "%s: %s", 
›ts
.
˛õ¡id
, 
mesßge
);

379 
rc
 = 
	`MQTTAsync_£nd
(
c⁄åﬁ_˛õ¡
, 
pub_t›ic
, 
	`°æí
(
buf
),

380 
buf
, 1, 0, &
r›ts
);

381 
	`MyLog
(
LOGA_DEBUG
, "C⁄åﬁ mesßgê£¡: %s", 
buf
);

383  
rc
;

384 
	}
}

386 
START_TIME_TYPE
 
	gglobÆ_°¨t_time
;

388 
	$mesßgeAºived
(* 
c⁄ãxt
, * 
t›icName
, 
t›icLí
,

389 
MQTTAsync_mesßge
* 
m
)

391 
£qno
 = -1;

392 * 
tokí
 = 
NULL
;

394 
tokí
 = 
	`°πok
(
m
->
∑ylﬂd
, " ");

395 
tokí
 = 
	`°πok
(
NULL
, " ");

396 
tokí
 = 
	`°πok
(
NULL
, " ");

398 i‡(
tokí
)

399 
£qno
 = 
	`©oi
(
tokí
);

400 i‡(
m
->
qos
 !
›ts
.qos)

402 
	`MyLog
(
LOGA_ALWAYS
, "Eº‹,Éx≥˘ög QoS %d buàgŸ %d", 
›ts
.
qos
,

403 
m
->
qos
);

404 
îr‹s
++;

405 } i‡(
£qno
 !
¨rivedCou¡
 + 1)

407 i‡(
m
->
qos
 =2 || (m->qo†=1 && 
£qno
 > 
¨rivedCou¡
 + 1))

409 i‡(
£qno
 == -1)

410 
	`MyLog
(
LOGA_ALWAYS
,

412 
¨rivedCou¡
 + 1, 
m
->
msgid
, m->
∑ylﬂdÀn
, m->
∑ylﬂd
);

414 
	`MyLog
(
LOGA_ALWAYS
,

416 
¨rivedCou¡
 + 1, 
£qno
, 
m
->
msgid
);

417 
îr‹s
++;

420 
¨rivedCou¡
++;

421 
	`MQTTAsync_‰ì
(
t›icName
);

422 
	`MQTTAsync_‰ìMesßge
(&
m
);

424 i‡(
mósurög
 && 
¨rivedCou¡
 =
ã°_cou¡
)

425 
roundåù_time
 = 
	`ñ≠£d
(
globÆ_°¨t_time
);

427 
	}
}

430 
	$˛õ¡_⁄Rec⁄√˘
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

432 
MQTTAsync
 
c
 = (MQTTAsync)
c⁄ãxt
;

434 
	`MyLog
(
LOGA_ALWAYS
, "SuccessfullyÑeconnected");

435 
	}
}

438 
	$˛õ¡_⁄Rec⁄√˘Faûuª
(* 
c⁄ãxt
, 
MQTTAsync_ÁûuªD©a
* 
ª•⁄£
)

440 
MQTTAsync
 
c
 = (MQTTAsync)
c⁄ãxt
;

441 
rc
;

443 
	`MyLog
(
LOGA_ALWAYS
, "FaûedÅÿªc⁄√˘ wôhÑëu∫ codê%d", (
ª•⁄£
Ë?Ñe•⁄£->
code
 : -9999);

445 
c⁄n_›ts
.
c⁄ãxt
 = context;

446 
c⁄n_›ts
.
kìpAliveI¡îvÆ
 = 10;

447 
c⁄n_›ts
.
u£∫ame
 = 
›ts
.username;

448 
c⁄n_›ts
.
∑ssw‹d
 = 
›ts
.password;

449 
c⁄n_›ts
.
˛ón£ssi⁄
 = 0;

450 
c⁄n_›ts
.
⁄Suc˚ss
 = 
˛õ¡_⁄Rec⁄√˘
;

451 
c⁄n_›ts
.
⁄Faûuª
 = 
˛õ¡_⁄Rec⁄√˘Faûuª
;

452 
rc
 = 
	`MQTTAsync_c⁄√˘
(
c
, &
c⁄n_›ts
);

453 i‡(
rc
 !
MQTTASYNC_SUCCESS
)

455 
	`MyLog
(
LOGA_ALWAYS
, "FaûedÅÿ°¨àªc⁄√˘ wôhÑëu∫ codê%d", 
rc
);

456 
°›pög
 = 1;

458 
	}
}

461 
	$c⁄√˘i⁄Lo°
(* 
c⁄ãxt
, * 
ˇu£
)

463 
MQTTAsync
 
c
 = (MQTTAsync)
c⁄ãxt
;

464 
rc
 = 0;

466 
	`MyLog
(
LOGA_ALWAYS
, "ConnectionÜost when %d messagesárrived out of %dÉxpected",

467 
¨rivedCou¡
, 
ex≥˘edCou¡
);

470 i‡(
›ts
.
≥rsi°í˚
)

471 
c⁄√˘i⁄_lo°
 = 1;

474 
c⁄n_›ts
.
c⁄ãxt
 = context;

475 
c⁄n_›ts
.
kìpAliveI¡îvÆ
 = 10;

476 
c⁄n_›ts
.
u£∫ame
 = 
›ts
.username;

477 
c⁄n_›ts
.
∑ssw‹d
 = 
›ts
.password;

478 
c⁄n_›ts
.
˛ón£ssi⁄
 = 0;

479 
c⁄n_›ts
.
⁄Suc˚ss
 = 
˛õ¡_⁄Rec⁄√˘
;

480 
c⁄n_›ts
.
⁄Faûuª
 = 
˛õ¡_⁄Rec⁄√˘Faûuª
;

481 i‡(
›ts
.
c⁄√˘i⁄s
)

483 
c⁄n_›ts
.
£rvîURIcou¡
 = 
›ts
.
c⁄√˘i⁄_cou¡
;

484 
c⁄n_›ts
.
£rvîURIs
 = 
›ts
.
c⁄√˘i⁄s
;

488 
c⁄n_›ts
.
£rvîURIcou¡
 = 0;

489 
c⁄n_›ts
.
£rvîURIs
 = 
NULL
;

491 
	`¥ötf
("ªc⁄√˘ögÅÿfú° sîvîURI %s\n", 
c⁄n_›ts
.
£rvîURIs
[0]);

492 
rc
 = 
	`MQTTAsync_c⁄√˘
(
c⁄ãxt
, &
c⁄n_›ts
);

493 i‡(
rc
 !
MQTTASYNC_SUCCESS
)

495 
	`MyLog
(
LOGA_ALWAYS
, "FaûedÅÿ°¨àªc⁄√˘ wôhÑëu∫ codê%d", 
rc
);

496 
°›pög
 = 1;

499 
	}
}

502 
	$ª¸óãRec⁄√˘
()

504 
rc
;

506 i‡(
ª¸óãd
 == 0)

508 
	`MyLog
(
LOGA_ALWAYS
, "Recreating client");

510 
	`MQTTAsync_de°roy
(&
˛õ¡
);

512 
rc
 = 
	`MQTTAsync_¸óã
(&
˛õ¡
, 
›ts
.
c⁄√˘i⁄
, o±s.
˛õ¡id
, 
MQTTCLIENT_PERSISTENCE_DEFAULT
, 
NULL
);

513 i‡(
rc
 !
MQTTASYNC_SUCCESS
)

515 
	`MyLog
(
LOGA_ALWAYS
, "MQTTAsync_¸óã faûed,Ñ¯%d", 
rc
);

516 
exô
;

519 i‡((
rc
 = 
	`MQTTAsync_£tCÆlbacks
(
˛õ¡
, clõ¡, 
c⁄√˘i⁄Lo°
,

520 
mesßgeAºived
, 
NULL
)Ë!
MQTTASYNC_SUCCESS
)

522 
	`MyLog
(
LOGA_ALWAYS
, "MQTTAsync_£tCÆlback†Áûed,Ñ¯%d", 
rc
);

523 
exô
;

525 
ª¸óãd
 = 1;

528 
	`MyLog
(
LOGA_ALWAYS
, "Reconnecting client");

529 
c⁄n_›ts
.
kìpAliveI¡îvÆ
 = 10;

530 
c⁄n_›ts
.
u£∫ame
 = 
›ts
.username;

531 
c⁄n_›ts
.
∑ssw‹d
 = 
›ts
.password;

532 
c⁄n_›ts
.
˛ón£ssi⁄
 = 0;

533 
c⁄n_›ts
.
c⁄ãxt
 = 
˛õ¡
;

534 
c⁄n_›ts
.
⁄Suc˚ss
 = 
˛õ¡_⁄Rec⁄√˘
;

535 
c⁄n_›ts
.
⁄Faûuª
 = 
˛õ¡_⁄Rec⁄√˘Faûuª
;

536 i‡((
rc
 = 
	`MQTTAsync_c⁄√˘
(
˛õ¡
, &
c⁄n_›ts
)Ë!
MQTTASYNC_SUCCESS
)

537 
	`MyLog
(
LOGA_ALWAYS
, "MQTTAsync_c⁄√˘ faûed,Ñ¯%d", 
rc
);

539 
c⁄√˘i⁄_lo°
 = 0;

541 
exô
:

542  
rc
;

543 
	}
}

546 
	$suc˚ss
(
cou¡
)

548 
rc
 = 1;

550 i‡(
îr‹s
)

552 
	`MyLog
(
LOGA_ALWAYS
, "WorkloadÅest failed becauseÅhe callback hadÉrrors");

553 
rc
 = 0;

555 i‡(
¨rivedCou¡
 !
cou¡
)

557 i‡(
›ts
.
qos
 =2 || (›ts.qo†=1 && 
¨rivedCou¡
 < 
cou¡
))

559 
	`MyLog
(
LOGA_ALWAYS
,

562 
¨rivedCou¡
, 
cou¡
);

563 
rc
 = 0;

566 i‡(
rc
 == 1)

567 
	`c⁄åﬁ_£nd
("verdict:Öass");

569 
	`c⁄åﬁ_£nd
("verdict: fail");

570  
rc
;

571 
	}
}

574 
	$waôF‹Com∂ëi⁄
(
START_TIME_TYPE
 
°¨t_time
)

576 
œ°ªp‹t
 = 0;

577 
waô_cou¡
 = 0;

578 
limô
 = 120;

580 
	`mq¶ìp
(1);

581 
¨rivedCou¡
 < 
ex≥˘edCou¡
)

583 i‡(
¨rivedCou¡
 > 
œ°ªp‹t
)

585 
	`MyLog
(
LOGA_ALWAYS
, "%d messagesárrived out of %dÉxpected, in %d seconds",

586 
¨rivedCou¡
, 
ex≥˘edCou¡
, 
	`ñ≠£d
(
°¨t_time
) / 1000);

587 
œ°ªp‹t
 = 
¨rivedCou¡
;

589 
	`mq¶ìp
(1);

590 i‡(
›ts
.
≥rsi°í˚
 && 
c⁄√˘i⁄_lo°
)

591 
	`ª¸óãRec⁄√˘
();

592 i‡(++
waô_cou¡
 > 
limô
 || 
°›pög
)

595 
œ°_com∂ëi⁄_time
 = 
	`ñ≠£d
(
°¨t_time
) / 1000;

596 
	`MyLog
(
LOGA_ALWAYS
, "Extra waitÅo see ifány duplicatesárrive");

597 
	`mq¶ìp
(10);

598 
	`MyLog
(
LOGA_ALWAYS
, "%d messagesárrived out of %dÉxpected, in %d seconds",

599 
¨rivedCou¡
, 
ex≥˘edCou¡
, 
	`ñ≠£d
(
°¨t_time
) / 1000);

600  
	`suc˚ss
(
ex≥˘edCou¡
);

601 
	}
}

603 
	gmesßgesSít
 = 0;

605 
	$mesßgeSít
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

607 
mesßgesSít
++;

608 
	}
}

611 
	$⁄e_ôî©i⁄
()

613 
öãrvÆ
 = 0;

614 
i
 = 0;

615 
£qno
 = 0;

616 
rc
 = 0;

617 
START_TIME_TYPE
 
°¨t_time
;

618 
œ°_ex≥˘ed_cou¡
 = 
ex≥˘edCou¡
;

619 
ã°_öãrvÆ
 = 30;

621 i‡(
	`c⁄åﬁ_waô
("start_measuring") == 0)

622 
exô
;

624 
c⁄√˘i⁄_lo°
 = 0;

625 
ª¸óãd
 = 0;

628 
	`MyLog
(
LOGA_INFO
, "Evaluating how many messagesÇeeded");

629 
ex≥˘edCou¡
 = 
¨rivedCou¡
 = 0;

630 
mósurög
 = 1;

631 
globÆ_°¨t_time
 = 
	`°¨t_˛ock
();

632 
i
 = 1; i <
ã°_cou¡
; ++i)

634 
∑ylﬂd
[128];

636 
	`•rötf
(
∑ylﬂd
, "mesßgênumbî %d", 
i
);

638 
rc
 = 
	`MQTTAsync_£nd
(
˛õ¡
, 
›ts
.
t›ic
, 
	`°æí
(
∑ylﬂd
)+1,Öayload,

639 
›ts
.
qos
, o±s.
ªèöed
, 
NULL
);

640 
rc
 !
MQTTASYNC_SUCCESS
)

642 i‡(
›ts
.
≥rsi°í˚
 && (
c⁄√˘i⁄_lo°
 || 
rc
 =
MQTTASYNC_DISCONNECTED
))

643 
	`ª¸óãRec⁄√˘
();

644 i‡(
°›pög
)

645 
exô
;

646 
	`mq¶ìp
(1);

647 
rc
 = 
	`MQTTAsync_£nd
(
˛õ¡
, 
›ts
.
t›ic
, 
	`°æí
(
∑ylﬂd
)+1,Öayload,

648 
›ts
.
qos
, o±s.
ªèöed
, 
NULL
);

651 
	`MyLog
(
LOGA_INFO
, "Messages sent... waiting forÉchoes");

652 
¨rivedCou¡
 < 
ã°_cou¡
)

654 i‡(
°›pög
)

655 
exô
;

656 
	`mq¶ìp
(1);

657 
	`¥ötf
("¨rivedCou¡ %d\n", 
¨rivedCou¡
);

659 
mósurög
 = 0;

662 i‡(
œ°_com∂ëi⁄_time
 == -1)

664 
	`MyLog
(
LOGA_ALWAYS
, "RoundÅrùÅimêf‹ %d mesßge†i†%d ms", 
ã°_cou¡
, 
roundåù_time
);

665 
ex≥˘edCou¡
 = 1000 * 
ã°_cou¡
 * 
ã°_öãrvÆ
 / 
roundåù_time
 / 2;

669 
	`MyLog
(
LOGA_ALWAYS
, "La°Åime, %d mesßge†took %d s.", 
œ°_ex≥˘ed_cou¡
, 
œ°_com∂ëi⁄_time
);

670 
ex≥˘edCou¡
 = 
œ°_ex≥˘ed_cou¡
 * 
ã°_öãrvÆ
 / 
œ°_com∂ëi⁄_time
;

672 
	`MyLog
(
LOGA_ALWAYS
, "Thîef‹ê%d mesßge†√eded f‹ 30 sec⁄ds", 
ex≥˘edCou¡
);

674 i‡(
	`c⁄åﬁ_waô
("start_test") == 0)

675 
exô
;

677 
	`MyLog
(
LOGA_ALWAYS
, "Sèπög 30 sec⁄dÅe°Ñu¿wôh %d mesßges", 
ex≥˘edCou¡
);

678 
¨rivedCou¡
 = 0;

679 
mesßgesSít
 = 0;

680 
°¨t_time
 = 
	`°¨t_˛ock
();

681 
£qno
 < 
ex≥˘edCou¡
)

683 
MQTTAsync_ª•⁄£O±i⁄s
 
r›ts
 = 
MQTTAsync_ª•⁄£O±i⁄s_öôülizî
;

684 
∑ylﬂd
[128];

686 
r›ts
.
⁄Suc˚ss
 = 
mesßgeSít
;

687 
£qno
++;

688 
	`•rötf
(
∑ylﬂd
, "mesßgênumbî %d", 
£qno
);

689 
rc
 = 
	`MQTTAsync_£nd
(
˛õ¡
, 
›ts
.
t›ic
, 
	`°æí
(
∑ylﬂd
)+1,Öayload,

690 
›ts
.
qos
, o±s.
ªèöed
, &
r›ts
);

691 
rc
 !
MQTTASYNC_SUCCESS
)

693 
	`MyLog
(
LOGA_DEBUG
, "R¯%d fromÖublish wôhÖaylﬂd %s,Ñëryög", 
rc
, 
∑ylﬂd
);

694 i‡(
›ts
.
≥rsi°í˚
 && (
c⁄√˘i⁄_lo°
 || 
rc
 =
MQTTASYNC_DISCONNECTED
))

695 
	`ª¸óãRec⁄√˘
();

696 i‡(
°›pög
)

697 
exô
;

698 
	`mq¶ìp
(1);

699 
rc
 = 
	`MQTTAsync_£nd
(
˛õ¡
, 
›ts
.
t›ic
, 
	`°æí
(
∑ylﬂd
)+1,Öayload,

700 
›ts
.
qos
, o±s.
ªèöed
, &
r›ts
);

703 
£qno
 - 
mesßgesSít
 > 2000)

704 
	`mq¶ìp
(1);

706 
	`MyLog
(
LOGA_ALWAYS
, "%d mesßge†£¡ i¿%d sec⁄ds", 
ex≥˘edCou¡
, 
	`ñ≠£d
(
°¨t_time
) / 1000);

708 
	`waôF‹Com∂ëi⁄
(
°¨t_time
);

709 
	`c⁄åﬁ_waô
("test finished");

710 
exô
:

712 
	}
}

715 
	g˛õ¡_subs¸ibed
 = 0;

717 
	$˛õ¡_⁄Subs¸ibe
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

719 
MQTTAsync
 
c
 = (MQTTAsync)
c⁄ãxt
;

721 
	`MyLog
(
LOGA_DEBUG
, "I¿˛õ¡ subs¸ibê⁄Suc˚s†ˇŒback %∞gø¡ed qo†%d", 
c
, 
ª•⁄£
->
Æt
.
qos
);

723 
˛õ¡_subs¸ibed
 = 1;

724 
	}
}

726 
	$˛õ¡_⁄Faûuª
(* 
c⁄ãxt
, 
MQTTAsync_ÁûuªD©a
* 
ª•⁄£
)

728 
MQTTAsync
 
c
 = (MQTTAsync)
c⁄ãxt
;

729 
	`MyLog
(
LOGA_DEBUG
, "In failure callback");

731 
˛õ¡_subs¸ibed
 = -1;

732 
	}
}

735 
	$˛õ¡_⁄C⁄√˘
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

737 
MQTTAsync
 
c
 = (MQTTAsync)
c⁄ãxt
;

738 
MQTTAsync_ª•⁄£O±i⁄s
 
r›ts
 = 
MQTTAsync_ª•⁄£O±i⁄s_öôülizî
;

739 
rc
;

741 
	`•rötf
(
sub_t›ic
, "%s/£nd", 
›ts
.
c⁄åﬁ_t›ic
);

742 
	`•rötf
(
pub_t›ic
, "%s/ª˚ive", 
›ts
.
c⁄åﬁ_t›ic
);

743 
r›ts
.
c⁄ãxt
 = context;

744 
r›ts
.
⁄Suc˚ss
 = 
˛õ¡_⁄Subs¸ibe
;

745 
r›ts
.
⁄Faûuª
 = 
˛õ¡_⁄Faûuª
;

746 
r›ts
.
c⁄ãxt
 = 
c
;

747 i‡((
rc
 = 
	`MQTTAsync_subs¸ibe
(
c
, 
›ts
.
t›ic
, o±s.
qos
, &
r›ts
)Ë!
MQTTASYNC_SUCCESS
)

749 
	`MyLog
(
LOGA_ALWAYS
, "˛õ¡ MQTTAsync_subs¸ibêÁûed,Ñ¯%d", 
rc
);

750 
˛õ¡_subs¸ibed
 = -1;

752 
	}
}

755 
	$˛õ¡_⁄CÀ™edDisc⁄√˘ed
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

757 
˛õ¡_˛ó√d
 = 1;

758 
	}
}

761 
	$˛õ¡_⁄CÀ™ed
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

763 
MQTTAsync
 
c
 = (MQTTAsync)
c⁄ãxt
;

764 
MQTTAsync_disc⁄√˘O±i⁄s
 
d›ts
 = 
MQTTAsync_disc⁄√˘O±i⁄s_öôülizî
;

765 
rc
;

767 
d›ts
.
c⁄ãxt
 = context;

768 
d›ts
.
⁄Suc˚ss
 = 
˛õ¡_⁄CÀ™edDisc⁄√˘ed
;

769 
d›ts
.
⁄Faûuª
 = 
˛õ¡_⁄Faûuª
;

770 
d›ts
.
c⁄ãxt
 = 
c
;

771 i‡((
rc
 = 
	`MQTTAsync_disc⁄√˘
(
c
, &
d›ts
)Ë!
MQTTASYNC_SUCCESS
)

773 
	`MyLog
(
LOGA_ALWAYS
, "˛õ¡ MQTTAsync_disc⁄√˘ faûed,Ñ¯%d", 
rc
);

774 
°›pög
 = 1;

776 
	}
}

779 
	$£ndAndRe˚ive
()

781 
rc
 = 0;

782 
≥rsi°í˚
 = 
MQTTCLIENT_PERSISTENCE_NONE
;

784 
	`MyLog
(
LOGA_ALWAYS
, "v3ásyn¯C clõ¡Å›i¯w‹klﬂd usög QoS %d", 
›ts
.
qos
);

785 
	`MyLog
(
LOGA_DEBUG
, "C⁄√˘ögÅÿ%s", 
›ts
.
c⁄√˘i⁄
);

787 i‡(
›ts
.
≥rsi°í˚
)

788 
≥rsi°í˚
 = 
MQTTCLIENT_PERSISTENCE_DEFAULT
;

790 
rc
 = 
	`MQTTAsync_¸óã
(&
˛õ¡
, 
›ts
.
c⁄√˘i⁄
, o±s.
˛õ¡id
, 
≥rsi°í˚
, 
NULL
);

791 i‡(
rc
 !
MQTTASYNC_SUCCESS
)

793 
	`MyLog
(
LOGA_ALWAYS
, "MQTTAsync_¸óã faûed,Ñ¯%d", 
rc
);

794 
rc
 = 99;

795 
exô
;

798 i‡((
rc
 = 
	`MQTTAsync_£tCÆlbacks
(
˛õ¡
, clõ¡, 
c⁄√˘i⁄Lo°
,

799 
mesßgeAºived
, 
NULL
)Ë!
MQTTASYNC_SUCCESS
)

801 
	`MyLog
(
LOGA_ALWAYS
, "MQTTAsync_£tCÆlback†Áûed,Ñ¯%d", 
rc
);

802 
rc
 = 99;

803 
de°roy_exô
;

807 
	`c⁄åﬁ_waô
("who isÑeady?");

810 
c⁄n_›ts
.
kìpAliveI¡îvÆ
 = 10;

811 
c⁄n_›ts
.
u£∫ame
 = 
›ts
.username;

812 
c⁄n_›ts
.
∑ssw‹d
 = 
›ts
.password;

813 
c⁄n_›ts
.
˛ón£ssi⁄
 = 1;

814 
c⁄n_›ts
.
c⁄ãxt
 = 
˛õ¡
;

815 
c⁄n_›ts
.
⁄Suc˚ss
 = 
˛õ¡_⁄CÀ™ed
;

816 
c⁄n_›ts
.
⁄Faûuª
 = 
˛õ¡_⁄Faûuª
;

817 i‡(
›ts
.
c⁄√˘i⁄s
)

819 
c⁄n_›ts
.
£rvîURIcou¡
 = 
›ts
.
c⁄√˘i⁄_cou¡
;

820 
c⁄n_›ts
.
£rvîURIs
 = 
›ts
.
c⁄√˘i⁄s
;

824 
c⁄n_›ts
.
£rvîURIcou¡
 = 0;

825 
c⁄n_›ts
.
£rvîURIs
 = 
NULL
;

827 i‡((
rc
 = 
	`MQTTAsync_c⁄√˘
(
˛õ¡
, &
c⁄n_›ts
)Ë!
MQTTASYNC_SUCCESS
)

829 
	`MyLog
(
LOGA_ALWAYS
, "MQTTAsync_c⁄√˘ faûed,Ñ¯%d", 
rc
);

830 
rc
 = 99;

831 
de°roy_exô
;

834 
˛õ¡_˛ó√d
 == 0)

835 
	`mq¶ìp
(1);

837 
	`MyLog
(
LOGA_ALWAYS
, "Client state cleaned up");

839 
c⁄n_›ts
.
˛ón£ssi⁄
 = 0;

840 
c⁄n_›ts
.
c⁄ãxt
 = 
˛õ¡
;

841 
c⁄n_›ts
.
⁄Suc˚ss
 = 
˛õ¡_⁄C⁄√˘
;

842 
c⁄n_›ts
.
⁄Faûuª
 = 
˛õ¡_⁄Faûuª
;

843 
c⁄n_›ts
.
ªåyI¡îvÆ
 = 1;

844 i‡((
rc
 = 
	`MQTTAsync_c⁄√˘
(
˛õ¡
, &
c⁄n_›ts
)Ë!
MQTTASYNC_SUCCESS
)

846 
	`MyLog
(
LOGA_ALWAYS
, "MQTTAsync_c⁄√˘ faûed,Ñ¯%d", 
rc
);

847 
rc
 = 99;

848 
de°roy_exô
;

852 
˛õ¡_subs¸ibed
 == 0)

853 
	`mq¶ìp
(1);

855 i‡(
˛õ¡_subs¸ibed
 != 1)

856 
disc⁄√˘_exô
;

860 
	`c⁄åﬁ_£nd
("Ready");

861 i‡(
	`c⁄åﬁ_which
("who isÑeady?", "continue") == 2)

863 
	`c⁄åﬁ_£nd
("Ready");

866 !
°›pög
)

868 
	`⁄e_ôî©i⁄
(
˛õ¡
);

871 
disc⁄√˘_exô
:

872 
	`MQTTAsync_disc⁄√˘
(
˛õ¡
, 0);

874 
de°roy_exô
:

875 
	`MQTTAsync_de°roy
(&
˛õ¡
);

877 
exô
:

878  
rc
;

879 
	}
}

882 
	gc⁄åﬁ_subs¸ibed
 = 0;

884 
	$c⁄åﬁ_⁄Subs¸ibe
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

886 
MQTTAsync
 
c
 = (MQTTAsync)
c⁄ãxt
;

888 
	`MyLog
(
LOGA_DEBUG
, "I¿c⁄åﬁ subs¸ibê⁄Suc˚s†ˇŒback %∞gø¡ed qo†%d", 
c
, 
ª•⁄£
->
Æt
.
qos
);

890 
c⁄åﬁ_subs¸ibed
 = 1;

891 
	}
}

893 
	$c⁄åﬁ_⁄Faûuª
(* 
c⁄ãxt
, 
MQTTAsync_ÁûuªD©a
* 
ª•⁄£
)

895 
MQTTAsync
 
c
 = (MQTTAsync)
c⁄ãxt
;

897 
c⁄åﬁ_subs¸ibed
 = -1;

898 
	}
}

901 
	$c⁄åﬁ_⁄C⁄√˘
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

903 
MQTTAsync
 
c
 = (MQTTAsync)
c⁄ãxt
;

904 
MQTTAsync_ª•⁄£O±i⁄s
 
r›ts
 = 
MQTTAsync_ª•⁄£O±i⁄s_öôülizî
;

905 
rc
;

907 
	`•rötf
(
sub_t›ic
, "%s/£nd", 
›ts
.
c⁄åﬁ_t›ic
);

908 
	`•rötf
(
pub_t›ic
, "%s/ª˚ive", 
›ts
.
c⁄åﬁ_t›ic
);

909 
r›ts
.
⁄Suc˚ss
 = 
c⁄åﬁ_⁄Subs¸ibe
;

910 
r›ts
.
⁄Faûuª
 = 
c⁄åﬁ_⁄Faûuª
;

911 
r›ts
.
c⁄ãxt
 = 
c
;

912 i‡((
rc
 = 
	`MQTTAsync_subs¸ibe
(
c
, 
sub_t›ic
, 2, &
r›ts
)Ë!
MQTTASYNC_SUCCESS
)

914 
	`MyLog
(
LOGA_ALWAYS
, "c⁄åﬁ MQTTAsync_subs¸ibêÁûed,Ñ¯%d", 
rc
);

915 
c⁄åﬁ_subs¸ibed
 = -1;

917 
	}
}

919 
	$åa˚_ˇŒback
(
MQTTASYNC_TRACE_LEVELS
 
Àvñ
, * 
mesßge
)

921 i‡(
Àvñ
 =
MQTTASYNC_TRACE_ERROR
 || 
	`°r°r
(
mesßge
, "Connect") || strstr(message, "failed"))

922 
	`¥ötf
("Tø˚ : %d, %s\n", 
Àvñ
, 
mesßge
);

923 
	}
}

925 
	$maö
(
¨gc
, ** 
¨gv
)

927 
MQTTAsync_c⁄√˘O±i⁄s
 
c⁄åﬁ_c⁄n_›ts
 = 
MQTTAsync_c⁄√˘O±i⁄s_öôülizî
;

928 
rc
 = 0;

929 
t›ic_buf
[200];

930 
˛õ¡id
[40];

932 #i‡!
	`deföed
(
WIN32
)

933 
	`sig«l
(
SIGPIPE
, 
SIG_IGN
);

936 
MQTTAsync_«meVÆue
* 
öfo
 = 
	`MQTTAsync_gëVîsi⁄Info
();

938 
öfo
->
«me
)

940 
	`MyLog
(
LOGA_ALWAYS
, "%s: %s\n", 
öfo
->
«me
, info->
vÆue
);

941 
öfo
++;

944 
	`gë›ts
(
¨gc
, 
¨gv
);

946 
	`•rötf
(
t›ic_buf
, "%s_%d", 
›ts
.
t›ic
, o±s.
¶Ÿ_no
);

947 
›ts
.
t›ic
 = 
t›ic_buf
;

949 
	`•rötf
(
˛õ¡id
, "%s_%d", 
›ts
.˛õ¡id, o±s.
¶Ÿ_no
);

950 
›ts
.
˛õ¡id
 = clientid;

952 
	`MyLog
(
LOGA_ALWAYS
, "Sèπög wôh clõ¡id %s", 
›ts
.
˛õ¡id
);

955 
	`MQTTAsync_£tTø˚CÆlback
(
åa˚_ˇŒback
);

957 
rc
 = 
	`MQTTAsync_¸óã
(&
c⁄åﬁ_˛õ¡
, 
›ts
.
c⁄åﬁ_c⁄√˘i⁄
,

958 
›ts
.
˛õ¡id
, 
MQTTCLIENT_PERSISTENCE_NONE
, 
NULL
);

959 i‡(
rc
 !
MQTTASYNC_SUCCESS
)

961 
	`MyLog
(
LOGA_ALWAYS
, "c⁄åﬁ MQTTAsync_¸óã faûed,Ñ¯%d", 
rc
);

962 
rc
 = 99;

963 
exô
;

966 i‡((
rc
 = 
	`MQTTAsync_£tCÆlbacks
(
c⁄åﬁ_˛õ¡
, c⁄åﬁ_˛õ¡, 
c⁄åﬁ_c⁄√˘i⁄Lo°
,

967 
c⁄åﬁ_mesßgeAºived
, 
NULL
)Ë!
MQTTASYNC_SUCCESS
)

969 
	`MyLog
(
LOGA_ALWAYS
, "c⁄åﬁ MQTTAsync_£tCÆlback†Áûed,Ñ¯%d", 
rc
);

970 
rc
 = 99;

971 
de°roy_exô
;

974 
c⁄åﬁ_subs¸ibed
 = 0;

975 
c⁄åﬁ_c⁄n_›ts
.
c⁄ãxt
 = 
c⁄åﬁ_˛õ¡
;

976 
c⁄åﬁ_c⁄n_›ts
.
kìpAliveI¡îvÆ
 = 10;

977 
c⁄åﬁ_c⁄n_›ts
.
⁄Suc˚ss
 = 
c⁄åﬁ_⁄C⁄√˘
;

978 
c⁄åﬁ_c⁄n_›ts
.
⁄Faûuª
 = 
c⁄åﬁ_⁄Faûuª
;

979 i‡((
rc
 = 
	`MQTTAsync_c⁄√˘
(
c⁄åﬁ_˛õ¡
, &
c⁄åﬁ_c⁄n_›ts
))

980 !
MQTTASYNC_SUCCESS
)

982 
	`MyLog
(
LOGA_ALWAYS
, "c⁄åﬁ MQTTAsync_c⁄√˘ faûed,Ñ¯%d", 
rc
);

983 
rc
 = 99;

984 
de°roy_exô
;

987 
c⁄åﬁ_subs¸ibed
 == 0)

988 
	`mq¶ìp
(1);

990 i‡(
c⁄åﬁ_subs¸ibed
 != 1)

991 
de°roy_exô
;

993 
	`£ndAndRe˚ive
();

995 
exô
:

996 
	`MQTTAsync_disc⁄√˘
(
c⁄åﬁ_˛õ¡
, 0);

998 
de°roy_exô
:

999 
	`MQTTAsync_de°roy
(&
c⁄åﬁ_˛õ¡
);

1002 
	}
}

	@paho-c/test/test8.c

26 
	~"MQTTAsync.h
"

27 
	~<°rög.h
>

28 
	~<°dlib.h
>

30 #i‡!
deföed
(
_WINDOWS
)

31 
	~<sys/time.h
>

32 
	~<sys/sockë.h
>

33 
	~<uni°d.h
>

34 
	~<î∫o.h
>

36 
	~<wösock2.h
>

37 
	~<ws2t˝ù.h
>

38 
	#MAXHOSTNAMELEN
 256

	)

39 
	#EAGAIN
 
WSAEWOULDBLOCK


	)

40 
	#EINTR
 
WSAEINTR


	)

41 
	#EINPROGRESS
 
WSAEINPROGRESS


	)

42 
	#EWOULDBLOCK
 
WSAEWOULDBLOCK


	)

43 
	#ENOTCONN
 
WSAENOTCONN


	)

44 
	#ECONNRESET
 
WSAECONNRESET


	)

47 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ ◊[0]))

	)

49 
	$ußge
()

51 
	`¥ötf
("help!!\n");

52 
	`exô
(-1);

53 
	}
}

55 
	sO±i⁄s


57 * 
	mc⁄√˘i⁄
;

58 
	mvîbo£
;

59 
	mã°_no
;

60 
	msize
;

61 } 
	g›ti⁄s
 =

69 
	$gë›ts
(
¨gc
, ** 
¨gv
)

71 
cou¡
 = 1;

73 
cou¡
 < 
¨gc
)

75 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--test_no") == 0)

77 i‡(++
cou¡
 < 
¨gc
)

78 
›ti⁄s
.
ã°_no
 = 
	`©oi
(
¨gv
[
cou¡
]);

80 
	`ußge
();

82 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--size") == 0)

84 i‡(++
cou¡
 < 
¨gc
)

85 
›ti⁄s
.
size
 = 
	`©oi
(
¨gv
[
cou¡
]);

87 
	`ußge
();

89 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--connection") == 0)

91 i‡(++
cou¡
 < 
¨gc
)

92 
›ti⁄s
.
c⁄√˘i⁄
 = 
¨gv
[
cou¡
];

94 
	`ußge
();

96 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--verbose") == 0)

97 
›ti⁄s
.
vîbo£
 = 1;

98 
cou¡
++;

100 
	}
}

103 
	~<logaX.h
>

104 
	#MyLog
 
logaLöe


	)

106 
	#LOGA_DEBUG
 0

	)

107 
	#LOGA_INFO
 1

	)

108 
	~<°d¨g.h
>

109 
	~<time.h
>

110 
	~<sys/timeb.h
>

111 
	$MyLog
(
LOGA_Àvñ
, * 
f‹m©
, ...)

113 
msg_buf
[256];

114 
va_li°
 
¨gs
;

115 
timeb
 
ts
;

117 
tm
 *
timeöfo
;

119 i‡(
LOGA_Àvñ
 =
LOGA_DEBUG
 && 
›ti⁄s
.
vîbo£
 == 0)

122 
	`·ime
(&
ts
);

123 
timeöfo
 = 
	`loˇ…ime
(&
ts
.
time
);

124 
	`°r·ime
(
msg_buf
, 80, "%Y%m%d %H%M%S", 
timeöfo
);

126 
	`•rötf
(&
msg_buf
[
	`°æí
(msg_buf)], ".%.3hu ", 
ts
.
mûlôm
);

128 
	`va_°¨t
(
¨gs
, 
f‹m©
);

129 
	`v¢¥ötf
(&
msg_buf
[
	`°æí
(msg_buf)], (msg_bufË- såÀn(msg_buf), 
f‹m©
, 
¨gs
);

130 
	`va_íd
(
¨gs
);

132 
	`¥ötf
("%s\n", 
msg_buf
);

133 
	`fÊush
(
°dout
);

134 
	}
}

138 #i‡
deföed
(
WIN32
Ë|| deföed(
_WINDOWS
)

139 
	#mq¶ìp
(
A
Ë
	`SÀï
(1000*A)

	)

140 
	#START_TIME_TYPE
 
DWORD


	)

141 
DWORD
 
	g°¨t_time
 = 0;

142 
START_TIME_TYPE
 
	$°¨t_˛ock
()

144  
	`GëTickCou¡
();

145 
	}
}

146 #ñi‡
deföed
(
AIX
)

147 
	#mq¶ìp
 
¶ìp


	)

148 
	#START_TIME_TYPE
 
time•ec


	)

149 
START_TIME_TYPE
 
	$°¨t_˛ock
()

151 
time•ec
 
°¨t
;

152 
	`˛ock_gëtime
(
CLOCK_REALTIME
, &
°¨t
);

153  
°¨t
;

154 
	}
}

156 
	#mq¶ìp
 
¶ìp


	)

157 
	#START_TIME_TYPE
 
timevÆ


	)

159 
START_TIME_TYPE
 
	$°¨t_˛ock
()

161 
timevÆ
 
°¨t_time
;

162 
	`gëtimeofday
(&
°¨t_time
, 
NULL
);

163  
°¨t_time
;

164 
	}
}

168 #i‡
deföed
(
WIN32
)

169 
	$ñ≠£d
(
START_TIME_TYPE
 
°¨t_time
)

171  
	`GëTickCou¡
(Ë- 
°¨t_time
;

172 
	}
}

173 #ñi‡
deföed
(
AIX
)

174 
	#as£π
(
a
)

	)

175 
	$ñ≠£d
(
time•ec
 
°¨t
)

177 
time•ec
 
now
, 
ªs
;

179 
	`˛ock_gëtime
(
CLOCK_REALTIME
, &
now
);

180 
	`¡imîsub
(
now
, 
°¨t
, 
ªs
);

181  (
ªs
.
tv_£c
)*1000L + (ªs.
tv_n£c
)/1000000L;

182 
	}
}

184 
	$ñ≠£d
(
START_TIME_TYPE
 
°¨t_time
)

186 
timevÆ
 
now
, 
ªs
;

188 
	`gëtimeofday
(&
now
, 
NULL
);

189 
	`timîsub
(&
now
, &
°¨t_time
, &
ªs
);

190  (
ªs
.
tv_£c
)*1000 + (ªs.
tv_u£c
)/1000;

191 
	}
}

195 
START_TIME_TYPE
 
	gglobÆ_°¨t_time
;

198 
	#as£π
(
a
, 
b
, 
c
, 
d
Ë
	`myas£π
(
__FILE__
, 
__LINE__
,á, b, c, d)

	)

199 
	#as£π1
(
a
, 
b
, 
c
, 
d
, 
e
Ë
	`myas£π
(
__FILE__
, 
__LINE__
,á, b, c, d,É)

	)

202 
	gã°s
 = 0;

203 
	gÁûuªs
 = 0;

206 
	$myas£π
(* 
fûíame
, 
löío
, * 
des¸ùti⁄
, 
vÆue
, * 
f‹m©
, ...)

208 ++
ã°s
;

209 i‡(!
vÆue
)

211 
va_li°
 
¨gs
;

213 ++
Áûuªs
;

214 
	`¥ötf
("As£πi⁄ faûed, fûê%s,Üöê%d, des¸ùti⁄: %s\n", 
fûíame
, 
löío
, 
des¸ùti⁄
);

216 
	`va_°¨t
(
¨gs
, 
f‹m©
);

217 
	`v¥ötf
(
f‹m©
, 
¨gs
);

218 
	`va_íd
(
¨gs
);

221 
	`MyLog
(
LOGA_DEBUG
, "As£πi⁄ suc˚eded, fûê%s,Üöê%d, des¸ùti⁄: %s", 
fûíame
, 
löío
, 
des¸ùti⁄
);

222 
	}
}

224 vﬁ©ûê
	gã°_föished
 = 0;

226 * 
	gã°_t›ic
 = "asyncÅestÅopic";

229 
	$ã°1_⁄Disc⁄√˘
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

231 
MQTTAsync
 
c
 = (MQTTAsync)
c⁄ãxt
;

232 
	`MyLog
(
LOGA_DEBUG
, "I¿⁄Disc⁄√˘ cÆlback %p", 
c
);

233 
ã°_föished
 = 1;

234 
	}
}

237 
	$ã°1_⁄Unsubs¸ibe
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

239 
MQTTAsync
 
c
 = (MQTTAsync)
c⁄ãxt
;

240 
MQTTAsync_disc⁄√˘O±i⁄s
 
›ts
 = 
MQTTAsync_disc⁄√˘O±i⁄s_öôülizî
;

241 
rc
;

243 
	`MyLog
(
LOGA_DEBUG
, "I¿⁄Unsubs¸ibê⁄Suc˚s†ˇŒback %p", 
c
);

244 
›ts
.
⁄Suc˚ss
 = 
ã°1_⁄Disc⁄√˘
;

245 
›ts
.
c⁄ãxt
 = 
c
;

247 
rc
 = 
	`MQTTAsync_disc⁄√˘
(
c
, &
›ts
);

248 
	`as£π
("Disc⁄√˘ suc˚ssful", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

249 
	}
}

252 
	$ã°1_mesßgeAºived
(* 
c⁄ãxt
, * 
t›icName
, 
t›icLí
, 
MQTTAsync_mesßge
* 
mesßge
)

254 
MQTTAsync
 
c
 = (MQTTAsync)
c⁄ãxt
;

255 
mesßge_cou¡
 = 0;

256 
rc
;

258 
	`MyLog
(
LOGA_DEBUG
, "I¿mesßgeAºived cÆlback %p", 
c
);

260 i‡(++
mesßge_cou¡
 == 1)

262 
MQTTAsync_mesßge
 
pubmsg
 = 
MQTTAsync_mesßge_öôülizî
;

263 
MQTTAsync_ª•⁄£O±i⁄s
 
›ts
 = 
MQTTAsync_ª•⁄£O±i⁄s_öôülizî
;

264 
pubmsg
.
∑ylﬂd
 = "a muchÜonger messageÅhat we can shortenÅoÅheÉxtentÅhat weÇeedÅoÖayload upÅo 11";

265 
pubmsg
.
∑ylﬂdÀn
 = 11;

266 
pubmsg
.
qos
 = 2;

267 
pubmsg
.
ªèöed
 = 0;

268 
rc
 = 
	`MQTTAsync_£ndMesßge
(
c
, 
ã°_t›ic
, &
pubmsg
, &
›ts
);

272 
MQTTAsync_ª•⁄£O±i⁄s
 
›ts
 = 
MQTTAsync_ª•⁄£O±i⁄s_öôülizî
;

274 
›ts
.
⁄Suc˚ss
 = 
ã°1_⁄Unsubs¸ibe
;

275 
›ts
.
c⁄ãxt
 = 
c
;

276 
rc
 = 
	`MQTTAsync_unsubs¸ibe
(
c
, 
ã°_t›ic
, &
›ts
);

277 
	`as£π
("Unsubs¸ibêsuc˚ssful", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

280 
	`MQTTAsync_‰ìMesßge
(&
mesßge
);

281 
	`MQTTAsync_‰ì
(
t›icName
);

284 
	}
}

286 
	$ã°1_⁄Subs¸ibe
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

288 
MQTTAsync
 
c
 = (MQTTAsync)
c⁄ãxt
;

289 
MQTTAsync_mesßge
 
pubmsg
 = 
MQTTAsync_mesßge_öôülizî
;

290 
rc
;

292 
	`MyLog
(
LOGA_DEBUG
, "I¿subs¸ibê⁄Suc˚s†ˇŒback %∞gø¡ed qo†%d", 
c
, 
ª•⁄£
->
Æt
.
qos
);

294 
pubmsg
.
∑ylﬂd
 = "a muchÜonger messageÅhat we can shortenÅoÅheÉxtentÅhat weÇeedÅoÖayload upÅo 11";

295 
pubmsg
.
∑ylﬂdÀn
 = 11;

296 
pubmsg
.
qos
 = 2;

297 
pubmsg
.
ªèöed
 = 0;

299 
rc
 = 
	`MQTTAsync_£nd
(
c
, 
ã°_t›ic
, 
pubmsg
.
∑ylﬂdÀn
,Öubmsg.
∑ylﬂd
,Öubmsg.
qos
,Öubmsg.
ªèöed
, 
NULL
);

300 
	}
}

303 
	$ã°1_⁄C⁄√˘
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

305 
MQTTAsync
 
c
 = (MQTTAsync)
c⁄ãxt
;

306 
MQTTAsync_ª•⁄£O±i⁄s
 
›ts
 = 
MQTTAsync_ª•⁄£O±i⁄s_öôülizî
;

307 
rc
;

309 
	`MyLog
(
LOGA_DEBUG
, "I¿c⁄√˘ onSuc˚s†ˇŒback, c⁄ãxà%p", 
c⁄ãxt
);

310 
›ts
.
⁄Suc˚ss
 = 
ã°1_⁄Subs¸ibe
;

311 
›ts
.
c⁄ãxt
 = 
c
;

313 
rc
 = 
	`MQTTAsync_subs¸ibe
(
c
, 
ã°_t›ic
, 2, &
›ts
);

314 
	`as£π
("GoodÑ¯‰om subs¸ibe", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

315 i‡(
rc
 !
MQTTASYNC_SUCCESS
)

316 
ã°_föished
 = 1;

317 
	}
}

320 
	$ã°1_⁄C⁄√˘Faûuª
(* 
c⁄ãxt
, 
MQTTAsync_ÁûuªD©a
* 
ª•⁄£
)

322 
MQTTAsync
 
c
 = (MQTTAsync)
c⁄ãxt
;

323 
MQTTAsync_ª•⁄£O±i⁄s
 
›ts
 = 
MQTTAsync_ª•⁄£O±i⁄s_öôülizî
;

324 
rc
;

326 
	`MyLog
(
LOGA_DEBUG
, "I¿c⁄√˘ onFaûuª cÆlback, c⁄ãxà%p", 
c⁄ãxt
);

328 
ã°_föished
 = 1;

329 
	}
}

337 
	$ã°1
(
O±i⁄s
 
›ti⁄s
)

339 
subsqos
 = 2;

340 
MQTTAsync
 
c
;

341 
MQTTAsync_c⁄√˘O±i⁄s
 
›ts
 = 
MQTTAsync_c⁄√˘O±i⁄s_öôülizî
;

342 
MQTTAsync_wûlO±i⁄s
 
w›ts
 = 
MQTTAsync_wûlO±i⁄s_öôülizî
;

343 
rc
 = 0;

344 * 
ã°_t›ic
 = "C clientÅest1";

345 * 
£rvîURIs
[2] = {"t˝://loˇlho°:1882", 
›ti⁄s
.
c⁄√˘i⁄
};

347 
Áûuªs
 = 0;

348 
	`MyLog
(
LOGA_INFO
, "StartingÅest 1 -ásynchronous connect");

350 
rc
 = 
	`MQTTAsync_¸óã
(&
c
, 
›ti⁄s
.
c⁄√˘i⁄
, "async_test",

351 
MQTTCLIENT_PERSISTENCE_DEFAULT
, 
NULL
);

352 
	`as£π
("goodÑ¯‰om cª©e", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d\n",Ñc);

353 i‡(
rc
 !
MQTTASYNC_SUCCESS
)

355 
	`MQTTAsync_de°roy
(&
c
);

356 
exô
;

359 
rc
 = 
	`MQTTAsync_£tCÆlbacks
(
c
, c, 
NULL
, 
ã°1_mesßgeAºived
, NULL);

360 
	`as£π
("GoodÑ¯‰om sëCÆlbacks", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

362 
›ts
.
kìpAliveI¡îvÆ
 = 20;

363 
›ts
.
˛ón£ssi⁄
 = 1;

364 
›ts
.
u£∫ame
 = "testuser";

365 
›ts
.
∑ssw‹d
 = "testpassword";

367 
›ts
.
wûl
 = &
w›ts
;

368 
›ts
.
wûl
->
mesßge
 = "will message";

369 
›ts
.
wûl
->
qos
 = 1;

370 
›ts
.
wûl
->
ªèöed
 = 0;

371 
›ts
.
wûl
->
t›icName
 = "willÅopic";

372 
›ts
.
wûl
 = 
NULL
;

373 
›ts
.
⁄Suc˚ss
 = 
ã°1_⁄C⁄√˘
;

374 
›ts
.
⁄Faûuª
 = 
ã°1_⁄C⁄√˘Faûuª
;

375 
›ts
.
c⁄ãxt
 = 
c
;

376 
›ts
.
£rvîURIcou¡
 = 2;

377 
›ts
.
£rvîURIs
 = serverURIs;

379 
	`MyLog
(
LOGA_DEBUG
, "Connecting");

380 
rc
 = 
	`MQTTAsync_c⁄√˘
(
c
, &
›ts
);

381 
rc
 = 0;

382 
	`as£π
("GoodÑ¯‰om c⁄√˘", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

383 i‡(
rc
 !
MQTTASYNC_SUCCESS
)

384 
exô
;

386 !
ã°_föished
)

387 #i‡
	`deföed
(
WIN32
)

388 
	`SÀï
(100);

390 
	`u¶ìp
(10000L);

393 
	`MQTTAsync_de°roy
(&
c
);

395 
exô
:

396 
	`MyLog
(
LOGA_INFO
, "TEST1:Åest %s. %dÅestsÑun, %d failures.",

397 (
Áûuªs
 =0Ë? "∑s£d" : "Áûed", 
ã°s
, failures);

399  
Áûuªs
;

400 
	}
}

402 
	gã°2_⁄Faûuª_ˇŒed
 = 0;

404 
	$ã°2_⁄Faûuª
(* 
c⁄ãxt
, 
MQTTAsync_ÁûuªD©a
* 
ª•⁄£
)

406 
	`MyLog
(
LOGA_DEBUG
, "I¿c⁄√˘ onFaûuª cÆlback, c⁄ãxà%p", 
c⁄ãxt
);

408 
ã°2_⁄Faûuª_ˇŒed
++;

409 
ã°_föished
 = 1;

410 
	}
}

413 
	$ã°2_⁄C⁄√˘
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

416 
	`MyLog
(
LOGA_DEBUG
, "I¿c⁄√˘ onSuc˚s†ˇŒback, c⁄ãxà%p\n", 
c⁄ãxt
);

418 
	`as£π
("Connect shouldÇot succeed", 0, "connect success callback was called", 0);

420 
ã°_föished
 = 1;

421 
	}
}

428 
	$ã°2
(
O±i⁄s
 
›ti⁄s
)

430 
subsqos
 = 2;

431 
MQTTAsync
 
c
;

432 
MQTTAsync_c⁄√˘O±i⁄s
 
›ts
 = 
MQTTAsync_c⁄√˘O±i⁄s_öôülizî
;

433 
MQTTAsync_wûlO±i⁄s
 
w›ts
 = 
MQTTAsync_wûlO±i⁄s_öôülizî
;

434 
rc
 = 0;

435 * 
ã°_t›ic
 = "C clientÅest2";

437 
ã°_föished
 = 0;

439 
	`MyLog
(
LOGA_INFO
, "StartingÅest 2 - connectÅimeout");

441 
rc
 = 
	`MQTTAsync_¸óã
(&
c
, "tcp://9.20.96.160:66", "connectÅimeout",

442 
MQTTCLIENT_PERSISTENCE_DEFAULT
, 
NULL
);

443 
	`as£π
("goodÑ¯‰om cª©e", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d\n",Ñc);

444 i‡(
rc
 !
MQTTASYNC_SUCCESS
)

446 
	`MQTTAsync_de°roy
(&
c
);

447 
exô
;

450 
rc
 = 
	`MQTTAsync_£tCÆlbacks
(
c
, c, 
NULL
, 
ã°1_mesßgeAºived
, NULL);

451 
	`as£π
("GoodÑ¯‰om sëCÆlbacks", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

453 
›ts
.
c⁄√˘Timeout
 = 5;

454 
›ts
.
kìpAliveI¡îvÆ
 = 20;

455 
›ts
.
˛ón£ssi⁄
 = 1;

456 
›ts
.
u£∫ame
 = "testuser";

457 
›ts
.
∑ssw‹d
 = "testpassword";

459 
›ts
.
wûl
 = &
w›ts
;

460 
›ts
.
wûl
->
mesßge
 = "will message";

461 
›ts
.
wûl
->
qos
 = 1;

462 
›ts
.
wûl
->
ªèöed
 = 0;

463 
›ts
.
wûl
->
t›icName
 = "willÅopic";

464 
›ts
.
wûl
 = 
NULL
;

465 
›ts
.
⁄Suc˚ss
 = 
ã°2_⁄C⁄√˘
;

466 
›ts
.
⁄Faûuª
 = 
ã°2_⁄Faûuª
;

467 
›ts
.
c⁄ãxt
 = 
c
;

469 
	`MyLog
(
LOGA_DEBUG
, "Connecting");

470 
rc
 = 
	`MQTTAsync_c⁄√˘
(
c
, &
›ts
);

471 
rc
 = 0;

472 
	`as£π
("GoodÑ¯‰om c⁄√˘", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

473 i‡(
rc
 !
MQTTASYNC_SUCCESS
)

474 
exô
;

476 !
ã°_föished
)

477 #i‡
	`deföed
(
WIN32
)

478 
	`SÀï
(100);

480 
	`u¶ìp
(10000L);

483 
	`MQTTAsync_de°roy
(&
c
);

485 
exô
:

486 
	`as£π
("C⁄√˘ onFaûuª should bêˇŒed on˚", 
ã°2_⁄Faûuª_ˇŒed
 == 1,

487 "c⁄√˘ onFaûuª wa†ˇŒed %dÅimes", 
ã°2_⁄Faûuª_ˇŒed
);

489 
	`MyLog
(
LOGA_INFO
, "TEST2:Åest %s. %dÅestsÑun, %d failures.",

490 (
Áûuªs
 =0Ë? "∑s£d" : "Áûed", 
ã°s
, failures);

492  
Áûuªs
;

493 
	}
}

498 
MQTTAsync
 
	mc
;

499 
	mödex
;

500 
	m˛õ¡id
[24];

501 
	mã°_t›ic
[100];

502 
	mmesßge_cou¡
;

503 } 
	t˛õ¡_d©a
;

506 
	$ã°3_⁄Disc⁄√˘
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

508 
˛õ¡_d©a
* 
cd
 = (˛õ¡_d©a*)
c⁄ãxt
;

509 
	`MyLog
(
LOGA_DEBUG
, "I¿⁄Disc⁄√˘ cÆlback f‹ clõ¡ \"%s\"", 
cd
->
˛õ¡id
);

510 
ã°_föished
++;

511 
	}
}

514 
	$ã°3_⁄Publish
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

516 
˛õ¡_d©a
* 
cd
 = (˛õ¡_d©a*)
c⁄ãxt
;

517 
	`MyLog
(
LOGA_DEBUG
, "I¿QoS 0 onPublish cÆlback f‹ clõ¡ \"%s\"", 
cd
->
˛õ¡id
);

518 
	}
}

521 
	$ã°3_⁄Unsubs¸ibe
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

523 
˛õ¡_d©a
* 
cd
 = (˛õ¡_d©a*)
c⁄ãxt
;

524 
MQTTAsync_disc⁄√˘O±i⁄s
 
›ts
 = 
MQTTAsync_disc⁄√˘O±i⁄s_öôülizî
;

525 
rc
;

527 
	`MyLog
(
LOGA_DEBUG
, "I¿⁄Unsubs¸ibê⁄Suc˚s†ˇŒback \"%s\"", 
cd
->
˛õ¡id
);

528 
›ts
.
⁄Suc˚ss
 = 
ã°3_⁄Disc⁄√˘
;

529 
›ts
.
c⁄ãxt
 = 
cd
;

531 
rc
 = 
	`MQTTAsync_disc⁄√˘
(
cd
->
c
, &
›ts
);

532 
	`as£π
("Disc⁄√˘ suc˚ssful", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

533 
	}
}

536 
	$ã°3_mesßgeAºived
(* 
c⁄ãxt
, * 
t›icName
, 
t›icLí
, 
MQTTAsync_mesßge
* 
mesßge
)

538 
˛õ¡_d©a
* 
cd
 = (˛õ¡_d©a*)
c⁄ãxt
;

539 
rc
;

541 
	`MyLog
(
LOGA_DEBUG
, "I¿mesßgeAºived cÆlback \"%s\" mesßgêcou¡ ", 
cd
->
˛õ¡id
);

543 i‡(++
cd
->
mesßge_cou¡
 == 1)

545 
MQTTAsync_mesßge
 
pubmsg
 = 
MQTTAsync_mesßge_öôülizî
;

546 
MQTTAsync_ª•⁄£O±i⁄s
 
›ts
 = 
MQTTAsync_ª•⁄£O±i⁄s_öôülizî
;

547 
pubmsg
.
∑ylﬂd
 = "a muchÜonger messageÅhat we can shortenÅoÅheÉxtentÅhat weÇeedÅoÖayload upÅo 11";

548 
pubmsg
.
∑ylﬂdÀn
 = 25;

549 
pubmsg
.
qos
 = 1;

550 
pubmsg
.
ªèöed
 = 0;

551 
rc
 = 
	`MQTTAsync_£ndMesßge
(
cd
->
c
, cd->
ã°_t›ic
, &
pubmsg
, &
›ts
);

552 
	`as£π
("GoodÑ¯‰omÖublish", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

554 i‡(
cd
->
mesßge_cou¡
 == 2)

556 
MQTTAsync_mesßge
 
pubmsg
 = 
MQTTAsync_mesßge_öôülizî
;

557 
MQTTAsync_ª•⁄£O±i⁄s
 
›ts
 = 
MQTTAsync_ª•⁄£O±i⁄s_öôülizî
;

558 
pubmsg
.
∑ylﬂd
 = "a QoS 0 messageÅhat we can shortenÅoÅheÉxtentÅhat weÇeedÅoÖayload upÅo 11";

559 
pubmsg
.
∑ylﬂdÀn
 = 29;

560 
pubmsg
.
qos
 = 0;

561 
pubmsg
.
ªèöed
 = 0;

562 
›ts
.
c⁄ãxt
 = 
cd
;

563 
›ts
.
⁄Suc˚ss
 = 
ã°3_⁄Publish
;

565 
rc
 = 
	`MQTTAsync_£ndMesßge
(
cd
->
c
, cd->
ã°_t›ic
, &
pubmsg
, &
›ts
);

566 
	`as£π
("GoodÑ¯‰omÖublish", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

570 
MQTTAsync_ª•⁄£O±i⁄s
 
›ts
 = 
MQTTAsync_ª•⁄£O±i⁄s_öôülizî
;

572 
›ts
.
⁄Suc˚ss
 = 
ã°3_⁄Unsubs¸ibe
;

573 
›ts
.
c⁄ãxt
 = 
cd
;

574 
rc
 = 
	`MQTTAsync_unsubs¸ibe
(
cd
->
c
, cd->
ã°_t›ic
, &
›ts
);

575 
	`as£π
("Unsubs¸ibêsuc˚ssful", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

577 
	`MQTTAsync_‰ìMesßge
(&
mesßge
);

578 
	`MQTTAsync_‰ì
(
t›icName
);

580 
	}
}

582 
	$ã°3_⁄Subs¸ibe
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

584 
˛õ¡_d©a
* 
cd
 = (˛õ¡_d©a*)
c⁄ãxt
;

585 
MQTTAsync_mesßge
 
pubmsg
 = 
MQTTAsync_mesßge_öôülizî
;

586 
rc
;

588 
	`MyLog
(
LOGA_DEBUG
, "I¿subs¸ibê⁄Suc˚s†ˇŒback \"%s\"", 
cd
->
˛õ¡id
);

590 
pubmsg
.
∑ylﬂd
 = "a muchÜonger messageÅhat we can shortenÅoÅheÉxtentÅhat weÇeedÅoÖayload upÅo 11";

591 
pubmsg
.
∑ylﬂdÀn
 = 11;

592 
pubmsg
.
qos
 = 2;

593 
pubmsg
.
ªèöed
 = 0;

595 
rc
 = 
	`MQTTAsync_£nd
(
cd
->
c
, cd->
ã°_t›ic
, 
pubmsg
.
∑ylﬂdÀn
,Öubmsg.
∑ylﬂd
,Öubmsg.
qos
,Öubmsg.
ªèöed
, 
NULL
);

596 
	`as£π
("GoodÑ¯‰omÖublish", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

597 
	}
}

600 
	$ã°3_⁄C⁄√˘
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

602 
˛õ¡_d©a
* 
cd
 = (˛õ¡_d©a*)
c⁄ãxt
;

603 
MQTTAsync_ª•⁄£O±i⁄s
 
›ts
 = 
MQTTAsync_ª•⁄£O±i⁄s_öôülizî
;

604 
rc
;

606 
	`MyLog
(
LOGA_DEBUG
, "I¿c⁄√˘ onSuc˚s†ˇŒback, \"%s\"", 
cd
->
˛õ¡id
);

607 
›ts
.
⁄Suc˚ss
 = 
ã°3_⁄Subs¸ibe
;

608 
›ts
.
c⁄ãxt
 = 
cd
;

610 
rc
 = 
	`MQTTAsync_subs¸ibe
(
cd
->
c
, cd->
ã°_t›ic
, 2, &
›ts
);

611 
	`as£π
("GoodÑ¯‰om subs¸ibe", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

612 i‡(
rc
 !
MQTTASYNC_SUCCESS
)

613 
ã°_föished
++;

614 
	}
}

617 
	$ã°3_⁄Faûuª
(* 
c⁄ãxt
, 
MQTTAsync_ÁûuªD©a
* 
ª•⁄£
)

619 
˛õ¡_d©a
* 
cd
 = (˛õ¡_d©a*)
c⁄ãxt
;

620 
MQTTAsync_ª•⁄£O±i⁄s
 
›ts
 = 
MQTTAsync_ª•⁄£O±i⁄s_öôülizî
;

622 
	`as£π
("Should havêc⁄√˘ed", 0, "ÁûedÅÿc⁄√˘", 
NULL
);

623 
	`MyLog
(
LOGA_DEBUG
, "I¿c⁄√˘ onFaûuª cÆlback, \"%s\"Ñ¯%d\n", 
cd
->
˛õ¡id
, 
ª•⁄£
->
code
);

624 i‡(
ª•⁄£
->
mesßge
)

625 
	`MyLog
(
LOGA_DEBUG
, "I¿c⁄√˘ onFaûuª cÆlback, \"%s\"\n", 
ª•⁄£
->
mesßge
);

627 
ã°_föished
++;

628 
	}
}

636 
	$ã°3
(
O±i⁄s
 
›ti⁄s
)

638 
	#TEST3_CLIENTS
 10

	)

639 
num_˛õ¡s
 = 
TEST3_CLIENTS
;

640 
subsqos
 = 2;

641 
MQTTAsync_c⁄√˘O±i⁄s
 
›ts
 = 
MQTTAsync_c⁄√˘O±i⁄s_öôülizî
;

642 
MQTTAsync_wûlO±i⁄s
 
w›ts
 = 
MQTTAsync_wûlO±i⁄s_öôülizî
;

643 
rc
 = 0;

644 
i
;

645 
˛õ¡_d©a
 
˛õ¡d©a
[
TEST3_CLIENTS
];

647 
ã°_föished
 = 0;

648 
	`MyLog
(
LOGA_INFO
, "StartingÅest 3 - multiple connections");

650 
i
 = 0; i < 
num_˛õ¡s
; ++i)

652 
	`•rötf
(
˛õ¡d©a
[
i
].
˛õ¡id
, "async_test3_num_%d", i);

653 
	`•rötf
(
˛õ¡d©a
[
i
].
ã°_t›ic
, "asyncÅest3ÅopicÇum %d", i);

654 
˛õ¡d©a
[
i
].
ödex
 = i;

655 
˛õ¡d©a
[
i
].
mesßge_cou¡
 = 0;

657 
rc
 = 
	`MQTTAsync_¸óã
(&(
˛õ¡d©a
[
i
].
c
), 
›ti⁄s
.
c⁄√˘i⁄
, clõ¡d©a[i].
˛õ¡id
,

658 
MQTTCLIENT_PERSISTENCE_NONE
, 
NULL
);

659 
	`as£π
("goodÑ¯‰om cª©e", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d\n",Ñc);

661 
rc
 = 
	`MQTTAsync_£tCÆlbacks
(
˛õ¡d©a
[
i
].
c
, &˛õ¡d©a[i], 
NULL
, 
ã°3_mesßgeAºived
, NULL);

662 
	`as£π
("GoodÑ¯‰om sëCÆlbacks", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

664 
›ts
.
kìpAliveI¡îvÆ
 = 20;

665 
›ts
.
˛ón£ssi⁄
 = 1;

666 
›ts
.
u£∫ame
 = "testuser";

667 
›ts
.
∑ssw‹d
 = "testpassword";

669 
›ts
.
wûl
 = &
w›ts
;

670 
›ts
.
wûl
->
mesßge
 = "will message";

671 
›ts
.
wûl
->
qos
 = 1;

672 
›ts
.
wûl
->
ªèöed
 = 0;

673 
›ts
.
wûl
->
t›icName
 = "willÅopic";

674 
›ts
.
⁄Suc˚ss
 = 
ã°3_⁄C⁄√˘
;

675 
›ts
.
⁄Faûuª
 = 
ã°3_⁄Faûuª
;

676 
›ts
.
c⁄ãxt
 = &
˛õ¡d©a
[
i
];

678 
	`MyLog
(
LOGA_DEBUG
, "Connecting");

679 
rc
 = 
	`MQTTAsync_c⁄√˘
(
˛õ¡d©a
[
i
].
c
, &
›ts
);

680 
	`as£π
("GoodÑ¯‰om c⁄√˘", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

683 
ã°_föished
 < 
num_˛õ¡s
)

685 
	`MyLog
(
LOGA_DEBUG
, "num_˛õ¡†%dÅe°_föished %d\n", 
num_˛õ¡s
, 
ã°_föished
);

686 #i‡
	`deföed
(
WIN32
)

687 
	`SÀï
(100);

689 
	`u¶ìp
(10000L);

693 
	`MyLog
(
LOGA_DEBUG
, "TEST3: destroying clients");

695 
i
 = 0; i < 
num_˛õ¡s
; ++i)

696 
	`MQTTAsync_de°roy
(&
˛õ¡d©a
[
i
].
c
);

698 
exô
:

699 
	`MyLog
(
LOGA_INFO
, "TEST3:Åest %s. %dÅestsÑun, %d failures.",

700 (
Áûuªs
 =0Ë? "∑s£d" : "Áûed", 
ã°s
, failures);

702  
Áûuªs
;

703 
	}
}

706 * 
	gã°4_∑ylﬂd
 = 
NULL
;

707 
	gã°4_∑ylﬂdÀn
 = 0;

709 
	$ã°4_⁄Publish
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

711 
MQTTAsync
 
c
 = (MQTTAsync)
c⁄ãxt
;

713 
	`MyLog
(
LOGA_DEBUG
, "I¿publish onSuc˚s†ˇŒback, c⁄ãxà%p", 
c⁄ãxt
);

714 
	}
}

716 
	$ã°4_mesßgeAºived
(* 
c⁄ãxt
, * 
t›icName
, 
t›icLí
, 
MQTTAsync_mesßge
* 
mesßge
)

718 
MQTTAsync
 
c
 = (MQTTAsync)
c⁄ãxt
;

719 
mesßge_cou¡
 = 0;

720 
rc
, 
i
;

722 
	`MyLog
(
LOGA_DEBUG
, "I¿mesßgeAºived cÆlback %p", 
c
);

724 
	`as£π
("Mesßgêsizêc‹ª˘", 
mesßge
->
∑ylﬂdÀn
 =
ã°4_∑ylﬂdÀn
,

725 "mesßgêsizêwa†%d", 
mesßge
->
∑ylﬂdÀn
);

727 
i
 = 0; i < 
›ti⁄s
.
size
; ++i)

729 i‡(((*)
ã°4_∑ylﬂd
)[
i
] !((*)
mesßge
->
∑ylﬂd
)[i])

731 
	`as£π
("Mesßgêc⁄ã¡†c‹ª˘", ((*)
ã°4_∑ylﬂd
)[
i
] !((*)
mesßge
->
∑ylﬂd
)[i],

732 "mesßgêc⁄ã¡ wa†%c", ((*)
mesßge
->
∑ylﬂd
)[
i
]);

737 i‡(++
mesßge_cou¡
 == 1)

739 
MQTTAsync_mesßge
 
pubmsg
 = 
MQTTAsync_mesßge_öôülizî
;

740 
MQTTAsync_ª•⁄£O±i⁄s
 
›ts
 = 
MQTTAsync_ª•⁄£O±i⁄s_öôülizî
;

742 
pubmsg
.
∑ylﬂd
 = 
ã°4_∑ylﬂd
;

743 
pubmsg
.
∑ylﬂdÀn
 = 
ã°4_∑ylﬂdÀn
;

744 
pubmsg
.
qos
 = 1;

745 
pubmsg
.
ªèöed
 = 0;

746 
›ts
.
⁄Suc˚ss
 = 
ã°4_⁄Publish
;

747 
›ts
.
c⁄ãxt
 = 
c
;

749 
rc
 = 
	`MQTTAsync_£ndMesßge
(
c
, 
ã°_t›ic
, &
pubmsg
, &
›ts
);

751 i‡(
mesßge_cou¡
 == 2)

753 
MQTTAsync_mesßge
 
pubmsg
 = 
MQTTAsync_mesßge_öôülizî
;

754 
MQTTAsync_ª•⁄£O±i⁄s
 
›ts
 = 
MQTTAsync_ª•⁄£O±i⁄s_öôülizî
;

756 
pubmsg
.
∑ylﬂd
 = 
ã°4_∑ylﬂd
;

757 
pubmsg
.
∑ylﬂdÀn
 = 
ã°4_∑ylﬂdÀn
;

758 
pubmsg
.
qos
 = 0;

759 
pubmsg
.
ªèöed
 = 0;

760 
›ts
.
⁄Suc˚ss
 = 
ã°4_⁄Publish
;

761 
›ts
.
c⁄ãxt
 = 
c
;

762 
rc
 = 
	`MQTTAsync_£ndMesßge
(
c
, 
ã°_t›ic
, &
pubmsg
, &
›ts
);

766 
MQTTAsync_ª•⁄£O±i⁄s
 
›ts
 = 
MQTTAsync_ª•⁄£O±i⁄s_öôülizî
;

768 
›ts
.
⁄Suc˚ss
 = 
ã°1_⁄Unsubs¸ibe
;

769 
›ts
.
c⁄ãxt
 = 
c
;

770 
rc
 = 
	`MQTTAsync_unsubs¸ibe
(
c
, 
ã°_t›ic
, &
›ts
);

771 
	`as£π
("Unsubs¸ibêsuc˚ssful", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

774 
	`MQTTAsync_‰ìMesßge
(&
mesßge
);

775 
	`MQTTAsync_‰ì
(
t›icName
);

778 
	}
}

781 
	$ã°4_⁄Subs¸ibe
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

783 
MQTTAsync
 
c
 = (MQTTAsync)
c⁄ãxt
;

784 
MQTTAsync_mesßge
 
pubmsg
 = 
MQTTAsync_mesßge_öôülizî
;

785 
rc
, 
i
;

787 
	`MyLog
(
LOGA_DEBUG
, "I¿subs¸ibê⁄Suc˚s†ˇŒback %p", 
c
);

789 
pubmsg
.
∑ylﬂd
 = 
ã°4_∑ylﬂd
 = 
	`mÆloc
(
›ti⁄s
.
size
);

790 
pubmsg
.
∑ylﬂdÀn
 = 
ã°4_∑ylﬂdÀn
 = 
›ti⁄s
.
size
;

792 
	`§™d
(33);

793 
i
 = 0; i < 
›ti⁄s
.
size
; ++i)

794 ((*)
pubmsg
.
∑ylﬂd
)[
i
] = 
	`ønd
() % 256;

796 
pubmsg
.
qos
 = 2;

797 
pubmsg
.
ªèöed
 = 0;

799 
rc
 = 
	`MQTTAsync_£nd
(
c
, 
ã°_t›ic
, 
pubmsg
.
∑ylﬂdÀn
,Öubmsg.
∑ylﬂd
,Öubmsg.
qos
,Öubmsg.
ªèöed
, 
NULL
);

800 
	}
}

803 
	$ã°4_⁄C⁄√˘
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

805 
MQTTAsync
 
c
 = (MQTTAsync)
c⁄ãxt
;

806 
MQTTAsync_ª•⁄£O±i⁄s
 
›ts
 = 
MQTTAsync_ª•⁄£O±i⁄s_öôülizî
;

807 
rc
;

809 
	`MyLog
(
LOGA_DEBUG
, "I¿c⁄√˘ onSuc˚s†ˇŒback, c⁄ãxà%p", 
c⁄ãxt
);

810 
›ts
.
⁄Suc˚ss
 = 
ã°4_⁄Subs¸ibe
;

811 
›ts
.
c⁄ãxt
 = 
c
;

813 
rc
 = 
	`MQTTAsync_subs¸ibe
(
c
, 
ã°_t›ic
, 2, &
›ts
);

814 
	`as£π
("GoodÑ¯‰om subs¸ibe", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

815 i‡(
rc
 !
MQTTASYNC_SUCCESS
)

816 
ã°_föished
 = 1;

817 
	}
}

825 
	$ã°4
(
O±i⁄s
 
›ti⁄s
)

827 
subsqos
 = 2;

828 
MQTTAsync
 
c
;

829 
MQTTAsync_c⁄√˘O±i⁄s
 
›ts
 = 
MQTTAsync_c⁄√˘O±i⁄s_öôülizî
;

830 
MQTTAsync_wûlO±i⁄s
 
w›ts
 = 
MQTTAsync_wûlO±i⁄s_öôülizî
;

831 
rc
 = 0;

832 * 
ã°_t›ic
 = "C clientÅest4";

834 
ã°_föished
 = 
Áûuªs
 = 0;

835 
	`MyLog
(
LOGA_INFO
, "StartingÅest 4 - big messages");

837 
rc
 = 
	`MQTTAsync_¸óã
(&
c
, 
›ti⁄s
.
c⁄√˘i⁄
, "async_test_4",

838 
MQTTCLIENT_PERSISTENCE_DEFAULT
, 
NULL
);

839 
	`as£π
("goodÑ¯‰om cª©e", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d\n",Ñc);

840 i‡(
rc
 !
MQTTASYNC_SUCCESS
)

842 
	`MQTTAsync_de°roy
(&
c
);

843 
exô
;

846 
rc
 = 
	`MQTTAsync_£tCÆlbacks
(
c
, c, 
NULL
, 
ã°4_mesßgeAºived
, NULL);

847 
	`as£π
("GoodÑ¯‰om sëCÆlbacks", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

849 
›ts
.
kìpAliveI¡îvÆ
 = 20;

850 
›ts
.
˛ón£ssi⁄
 = 1;

851 
›ts
.
u£∫ame
 = "testuser";

852 
›ts
.
∑ssw‹d
 = "testpassword";

854 
›ts
.
wûl
 = &
w›ts
;

855 
›ts
.
wûl
->
mesßge
 = "will message";

856 
›ts
.
wûl
->
qos
 = 1;

857 
›ts
.
wûl
->
ªèöed
 = 0;

858 
›ts
.
wûl
->
t›icName
 = "willÅopic";

859 
›ts
.
wûl
 = 
NULL
;

860 
›ts
.
⁄Suc˚ss
 = 
ã°4_⁄C⁄√˘
;

861 
›ts
.
⁄Faûuª
 = 
NULL
;

862 
›ts
.
c⁄ãxt
 = 
c
;

864 
	`MyLog
(
LOGA_DEBUG
, "Connecting");

865 
rc
 = 
	`MQTTAsync_c⁄√˘
(
c
, &
›ts
);

866 
rc
 = 0;

867 
	`as£π
("GoodÑ¯‰om c⁄√˘", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

868 i‡(
rc
 !
MQTTASYNC_SUCCESS
)

869 
exô
;

871 !
ã°_föished
)

872 #i‡
	`deföed
(
WIN32
)

873 
	`SÀï
(100);

875 
	`u¶ìp
(1000L);

878 
	`MQTTAsync_de°roy
(&
c
);

880 
exô
:

881 
	`MyLog
(
LOGA_INFO
, "TEST4:Åest %s. %dÅestsÑun, %d failures.",

882 (
Áûuªs
 =0Ë? "∑s£d" : "Áûed", 
ã°s
, failures);

884  
Áûuªs
;

885 
	}
}

888 
	$åa˚_ˇŒback
(
MQTTASYNC_TRACE_LEVELS
 
Àvñ
, * 
mesßge
)

890 i‡(
	`°r°r
(
mesßge
, "onnect") && !strstr(message, "isconnect"))

891 
	`¥ötf
("Tø˚ : %d, %s\n", 
Àvñ
, 
mesßge
);

892 
	}
}

895 
	$maö
(
¨gc
, ** 
¨gv
)

897 
rc
 = 0;

898 (*
ã°s
[])(Ë{
NULL
, 
ã°1
, 
ã°2
, 
ã°3
, 
ã°4
};

899 
MQTTAsync_«meVÆue
* 
öfo
;

901 
	`gë›ts
(
¨gc
, 
¨gv
);

903 
	`MQTTAsync_£tTø˚CÆlback
(
åa˚_ˇŒback
);

905 
öfo
 = 
	`MQTTAsync_gëVîsi⁄Info
();

907 
öfo
->
«me
)

909 
	`MyLog
(
LOGA_INFO
, "%s: %s", 
öfo
->
«me
, info->
vÆue
);

910 
öfo
++;

913 i‡(
›ti⁄s
.
ã°_no
 == -1)

915 
›ti⁄s
.
ã°_no
 = 1; o±i⁄s.ã°_nÿ< 
	`ARRAY_SIZE
(
ã°s
); ++options.test_no)

917 
Áûuªs
 = 0;

919 
rc
 +
ã°s
[
›ti⁄s
.
ã°_no
](options);

925 
rc
 = 
ã°s
[
›ti⁄s
.
ã°_no
](options);

928 i‡(
Áûuªs
 == 0)

929 
	`MyLog
(
LOGA_INFO
, "verdictÖass");

931 
	`MyLog
(
LOGA_INFO
, "verdict fail");

933  
rc
;

934 
	}
}

	@paho-c/test/test_mqtt4async.c

31 
	~"MQTTAsync.h
"

32 
	~<°rög.h
>

33 
	~<°dlib.h
>

35 #i‡!
deföed
(
_WINDOWS
)

36 
	~<sys/time.h
>

37 
	~<sys/sockë.h
>

38 
	~<uni°d.h
>

39 
	~<î∫o.h
>

41 
	~<wösock2.h
>

42 
	~<ws2t˝ù.h
>

43 
	#MAXHOSTNAMELEN
 256

	)

44 
	#EAGAIN
 
WSAEWOULDBLOCK


	)

45 
	#EINTR
 
WSAEINTR


	)

46 
	#EINPROGRESS
 
WSAEINPROGRESS


	)

47 
	#EWOULDBLOCK
 
WSAEWOULDBLOCK


	)

48 
	#ENOTCONN
 
WSAENOTCONN


	)

49 
	#ECONNRESET
 
WSAECONNRESET


	)

50 
	#£ãnv
(
a
, 
b
, 
c
Ë
	`_puãnv_s
◊, b)

	)

53 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ ◊[0]))

	)

55 
	$ußge
()

57 
	`¥ötf
("help!!\n");

58 
	`exô
(-1);

59 
	}
}

61 
	sO±i⁄s


63 * 
	mc⁄√˘i⁄
;

64 ** 
	mhac⁄√˘i⁄s
;

65 
	mhacou¡
;

66 
	mvîbo£
;

67 
	mã°_no
;

68 
	môî©i⁄s
;

69 } 
	g›ti⁄s
 =

72 
NULL
,

79 
	$gë›ts
(
¨gc
, ** 
¨gv
)

81 
cou¡
 = 1;

83 
cou¡
 < 
¨gc
)

85 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--test_no") == 0)

87 i‡(++
cou¡
 < 
¨gc
)

88 
›ti⁄s
.
ã°_no
 = 
	`©oi
(
¨gv
[
cou¡
]);

90 
	`ußge
();

92 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--connection") == 0)

94 i‡(++
cou¡
 < 
¨gc
)

96 
›ti⁄s
.
c⁄√˘i⁄
 = 
¨gv
[
cou¡
];

97 
	`¥ötf
("\nSëtög c⁄√˘i⁄Åÿ%s\n", 
›ti⁄s
.
c⁄√˘i⁄
);

100 
	`ußge
();

102 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--haconnections") == 0)

104 i‡(++
cou¡
 < 
¨gc
)

106 * 
tok
 = 
	`°πok
(
¨gv
[
cou¡
], " ");

107 
›ti⁄s
.
hacou¡
 = 0;

108 
›ti⁄s
.
hac⁄√˘i⁄s
 = 
	`mÆloc
((*) * 5);

109 
tok
)

111 
›ti⁄s
.
hac⁄√˘i⁄s
[›ti⁄s.
hacou¡
] = 
	`mÆloc
(
	`°æí
(
tok
) + 1);

112 
	`°r˝y
(
›ti⁄s
.
hac⁄√˘i⁄s
[›ti⁄s.
hacou¡
], 
tok
);

113 
›ti⁄s
.
hacou¡
++;

114 
tok
 = 
	`°πok
(
NULL
, " ");

118 
	`ußge
();

120 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--iterations") == 0)

122 i‡(++
cou¡
 < 
¨gc
)

123 
›ti⁄s
.
ôî©i⁄s
 = 
	`©oi
(
¨gv
[
cou¡
]);

125 
	`ußge
();

127 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--verbose") == 0)

129 
›ti⁄s
.
vîbo£
 = 1;

130 
	`¥ötf
("\nSetting verbose on\n");

132 
cou¡
++;

134 
	}
}

137 
	#LOGA_DEBUG
 0

	)

138 
	#LOGA_INFO
 1

	)

139 
	~<°d¨g.h
>

140 
	~<time.h
>

141 
	~<sys/timeb.h
>

142 
	$MyLog
(
LOGA_Àvñ
, * 
f‹m©
, ...)

144 
msg_buf
[256];

145 
va_li°
 
¨gs
;

146 
timeb
 
ts
;

148 
tm
 *
timeöfo
;

150 i‡(
LOGA_Àvñ
 =
LOGA_DEBUG
 && 
›ti⁄s
.
vîbo£
 == 0)

153 
	`·ime
(&
ts
);

154 
timeöfo
 = 
	`loˇ…ime
(&
ts
.
time
);

155 
	`°r·ime
(
msg_buf
, 80, "%Y%m%d %H%M%S", 
timeöfo
);

157 
	`•rötf
(&
msg_buf
[
	`°æí
(msg_buf)], ".%.3hu ", 
ts
.
mûlôm
);

159 
	`va_°¨t
(
¨gs
, 
f‹m©
);

160 
	`v¢¥ötf
(&
msg_buf
[
	`°æí
(msg_buf)], (msg_bufË- såÀn(msg_buf), 
f‹m©
, 
¨gs
);

161 
	`va_íd
(
¨gs
);

163 
	`¥ötf
("%s\n", 
msg_buf
);

164 
	`fÊush
(
°dout
);

165 
	}
}

168 #i‡
deföed
(
WIN32
Ë|| deföed(
_WINDOWS
)

169 
	#mq¶ìp
(
A
Ë
	`SÀï
(1000*A)

	)

170 
	#START_TIME_TYPE
 
DWORD


	)

171 
DWORD
 
	g°¨t_time
 = 0;

172 
START_TIME_TYPE
 
	$°¨t_˛ock
()

174  
	`GëTickCou¡
();

175 
	}
}

176 #ñi‡
deföed
(
AIX
)

177 
	#mq¶ìp
 
¶ìp


	)

178 
	#START_TIME_TYPE
 
time•ec


	)

179 
START_TIME_TYPE
 
	$°¨t_˛ock
()

181 
time•ec
 
°¨t
;

182 
	`˛ock_gëtime
(
CLOCK_REALTIME
, &
°¨t
);

183  
°¨t
;

184 
	}
}

186 
	#mq¶ìp
 
¶ìp


	)

187 
	#START_TIME_TYPE
 
timevÆ


	)

189 
START_TIME_TYPE
 
	$°¨t_˛ock
()

191 
timevÆ
 
°¨t_time
;

192 
	`gëtimeofday
(&
°¨t_time
, 
NULL
);

193  
°¨t_time
;

194 
	}
}

198 #i‡
deföed
(
WIN32
)

199 
	$ñ≠£d
(
START_TIME_TYPE
 
°¨t_time
)

201  
	`GëTickCou¡
(Ë- 
°¨t_time
;

202 
	}
}

203 #ñi‡
deföed
(
AIX
)

204 
	#as£π
(
a
)

	)

205 
	$ñ≠£d
(
time•ec
 
°¨t
)

207 
time•ec
 
now
, 
ªs
;

209 
	`˛ock_gëtime
(
CLOCK_REALTIME
, &
now
);

210 
	`¡imîsub
(
now
, 
°¨t
, 
ªs
);

211  (
ªs
.
tv_£c
)*1000L + (ªs.
tv_n£c
)/1000000L;

212 
	}
}

214 
	$ñ≠£d
(
START_TIME_TYPE
 
°¨t_time
)

216 
timevÆ
 
now
, 
ªs
;

218 
	`gëtimeofday
(&
now
, 
NULL
);

219 
	`timîsub
(&
now
, &
°¨t_time
, &
ªs
);

220  (
ªs
.
tv_£c
)*1000 + (ªs.
tv_u£c
)/1000;

221 
	}
}

225 
	#as£π
(
a
, 
b
, 
c
, 
d
Ë
	`myas£π
(
__FILE__
, 
__LINE__
,á, b, c, d)

	)

226 
	#as£π1
(
a
, 
b
, 
c
, 
d
, 
e
Ë
	`myas£π
(
__FILE__
, 
__LINE__
,á, b, c, d,É)

	)

228 
	gã°s
 = 0;

229 
	gÁûuªs
 = 0;

230 
FILE
* 
	gxml
;

231 
START_TIME_TYPE
 
	gglobÆ_°¨t_time
;

232 
	gouçut
[3000];

233 * 
	gcur_ouçut
 = 
ouçut
;

234 
	gã°_föished
 = 0;

237 
	$wrôe_ã°_ªsu…
()

239 
duøti⁄
 = 
	`ñ≠£d
(
globÆ_°¨t_time
);

241 
	`Ârötf
(
xml
, "Åime=\"%ld.%.3ld\" >\n", 
duøti⁄
 / 1000, duration % 1000);

242 i‡(
cur_ouçut
 !
ouçut
)

244 
	`Ârötf
(
xml
, "%s", 
ouçut
);

245 
cur_ouçut
 = 
ouçut
;

247 
	`Ârötf
(
xml
, "</testcase>\n");

248 
	}
}

251 
	$myas£π
(* 
fûíame
, 
löío
, * 
des¸ùti⁄
, 
vÆue
, * 
f‹m©
, ...)

253 ++
ã°s
;

254 i‡(!
vÆue
)

256 
va_li°
 
¨gs
;

258 ++
Áûuªs
;

259 
	`MyLog
(
LOGA_INFO
, "As£πi⁄ faûed, fûê%s,Üöê%d, des¸ùti⁄: %s\n", 
fûíame
, 
löío
, 
des¸ùti⁄
);

261 
	`va_°¨t
(
¨gs
, 
f‹m©
);

262 
	`v¥ötf
(
f‹m©
, 
¨gs
);

263 
	`va_íd
(
¨gs
);

265 
cur_ouçut
 +
	`•rötf
(cur_output, "<failureÅype=\"%s\">file %s,Üine %d </failure>\n",

266 
des¸ùti⁄
, 
fûíame
, 
löío
);

269 
	`MyLog
(
LOGA_DEBUG
, "As£πi⁄ suc˚eded, fûê%s,Üöê%d, des¸ùti⁄: %s", 
fûíame
, 
löío
, 
des¸ùti⁄
);

270 
	}
}

273 
	$ã°1_⁄Disc⁄√˘3
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

275 
MQTTAsync
 
c
 = (MQTTAsync)
c⁄ãxt
;

277 
	`MyLog
(
LOGA_DEBUG
, "I¿⁄Disc⁄√˘ cÆlback %p", 
c
);

278 
ã°_föished
 = 1;

279 
	}
}

282 
	$ã°1_⁄C⁄√˘3
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

284 
MQTTAsync
 
c
 = (MQTTAsync)
c⁄ãxt
;

285 
MQTTAsync_disc⁄√˘O±i⁄s
 
›ts
 = 
MQTTAsync_disc⁄√˘O±i⁄s_öôülizî
;

286 
rc
;

288 
	`MyLog
(
LOGA_DEBUG
, "I¿c⁄√˘ onSuc˚s†ˇŒback, c⁄ãxà%p", 
c⁄ãxt
);

289 
›ts
.
⁄Suc˚ss
 = 
ã°1_⁄Disc⁄√˘3
;

290 
›ts
.
c⁄ãxt
 = 
c
;

292 
	`as£π
("C‹ª˘ sîvîURIÑëu∫ed", 
	`°r°r
(
ª•⁄£
->
Æt
.
c⁄√˘
.
£rvîURI
, 
›ti⁄s
.
c⁄√˘i⁄
Ë!
NULL
,

293 "£rvîURI wa†%s", 
ª•⁄£
->
Æt
.
c⁄√˘
.
£rvîURI
);

294 
	`as£π
("C‹ª˘ MQTTVîsi⁄Ñëu∫ed", 
ª•⁄£
->
Æt
.
c⁄√˘
.
MQTTVîsi⁄
 == 4,

295 "MQTTVîsi⁄ wa†%d", 
ª•⁄£
->
Æt
.
c⁄√˘
.
MQTTVîsi⁄
);

296 
	`as£π
("C‹ª˘ sessi⁄Pª£¡Ñëu∫ed", 
ª•⁄£
->
Æt
.
c⁄√˘
.
£ssi⁄Pª£¡
 == 1,

297 "£ssi⁄Pª£¡ wa†%d", 
ª•⁄£
->
Æt
.
c⁄√˘
.
£ssi⁄Pª£¡
);

299 
rc
 = 
	`MQTTAsync_disc⁄√˘
(
c
, &
›ts
);

300 
	`as£π
("Disc⁄√˘ suc˚ssful", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

301 
	}
}

304 
	$ã°1_⁄Disc⁄√˘2
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

306 
MQTTAsync
 
c
 = (MQTTAsync)
c⁄ãxt
;

307 
MQTTAsync_c⁄√˘O±i⁄s
 
›ts
 = 
MQTTAsync_c⁄√˘O±i⁄s_öôülizî
;

308 
rc
;

310 
	`MyLog
(
LOGA_DEBUG
, "I¿⁄Disc⁄√˘ cÆlback %p", 
c
);

312 
›ts
.
MQTTVîsi⁄
 = 4;

313 
›ts
.
˛ón£ssi⁄
 = 0;

314 i‡(
›ti⁄s
.
hac⁄√˘i⁄s
 !
NULL
)

316 
›ts
.
£rvîURIs
 = 
›ti⁄s
.
hac⁄√˘i⁄s
;

317 
›ts
.
£rvîURIcou¡
 = 
›ti⁄s
.
hacou¡
;

319 
›ts
.
⁄Suc˚ss
 = 
ã°1_⁄C⁄√˘3
;

320 
›ts
.
⁄Faûuª
 = 
NULL
;

321 
›ts
.
c⁄ãxt
 = 
c
;

323 
›ts
.
˛ón£ssi⁄
 = 0;

324 
rc
 = 
	`MQTTAsync_c⁄√˘
(
c
, &
›ts
);

325 
	`as£π
("C⁄√˘ suc˚ssful", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

326 
	}
}

329 
	$ã°1_⁄C⁄√˘2
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

331 
MQTTAsync
 
c
 = (MQTTAsync)
c⁄ãxt
;

332 
MQTTAsync_disc⁄√˘O±i⁄s
 
›ts
 = 
MQTTAsync_disc⁄√˘O±i⁄s_öôülizî
;

333 
rc
;

335 
	`MyLog
(
LOGA_DEBUG
, "I¿c⁄√˘ onSuc˚s†ˇŒback, c⁄ãxà%p", 
c⁄ãxt
);

336 
›ts
.
⁄Suc˚ss
 = 
ã°1_⁄Disc⁄√˘2
;

337 
›ts
.
c⁄ãxt
 = 
c
;

339 
	`as£π
("C‹ª˘ sîvîURIÑëu∫ed", 
	`°rcmp
(
ª•⁄£
->
Æt
.
c⁄√˘
.
£rvîURI
, 
›ti⁄s
.
c⁄√˘i⁄
) == 0,

340 "£rvîURI wa†%s", 
ª•⁄£
->
Æt
.
c⁄√˘
.
£rvîURI
);

341 
	`as£π
("C‹ª˘ MQTTVîsi⁄Ñëu∫ed", 
ª•⁄£
->
Æt
.
c⁄√˘
.
MQTTVîsi⁄
 == 4,

342 "MQTTVîsi⁄ wa†%d", 
ª•⁄£
->
Æt
.
c⁄√˘
.
MQTTVîsi⁄
);

343 
	`as£π
("C‹ª˘ sessi⁄Pª£¡Ñëu∫ed", 
ª•⁄£
->
Æt
.
c⁄√˘
.
£ssi⁄Pª£¡
 == 0,

344 "£ssi⁄Pª£¡ wa†%d", 
ª•⁄£
->
Æt
.
c⁄√˘
.
£ssi⁄Pª£¡
);

346 
rc
 = 
	`MQTTAsync_disc⁄√˘
(
c
, &
›ts
);

347 
	`as£π
("Disc⁄√˘ suc˚ssful", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

348 
	}
}

351 
	$ã°1_⁄Disc⁄√˘1
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

353 
MQTTAsync
 
c
 = (MQTTAsync)
c⁄ãxt
;

354 
MQTTAsync_c⁄√˘O±i⁄s
 
›ts
 = 
MQTTAsync_c⁄√˘O±i⁄s_öôülizî
;

355 
rc
;

357 
	`MyLog
(
LOGA_DEBUG
, "I¿⁄Disc⁄√˘ cÆlback %p", 
c
);

359 
›ts
.
MQTTVîsi⁄
 = 4;

360 
›ts
.
˛ón£ssi⁄
 = 0;

361 i‡(
›ti⁄s
.
hac⁄√˘i⁄s
 !
NULL
)

363 
›ts
.
£rvîURIs
 = 
›ti⁄s
.
hac⁄√˘i⁄s
;

364 
›ts
.
£rvîURIcou¡
 = 
›ti⁄s
.
hacou¡
;

366 
›ts
.
⁄Suc˚ss
 = 
ã°1_⁄C⁄√˘2
;

367 
›ts
.
⁄Faûuª
 = 
NULL
;

368 
›ts
.
c⁄ãxt
 = 
c
;

370 
›ts
.
˛ón£ssi⁄
 = 0;

371 
rc
 = 
	`MQTTAsync_c⁄√˘
(
c
, &
›ts
);

372 
	`as£π
("C⁄√˘ suc˚ssful", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

373 
	}
}

376 
	$ã°1_⁄C⁄√˘1
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

378 
MQTTAsync
 
c
 = (MQTTAsync)
c⁄ãxt
;

379 
MQTTAsync_disc⁄√˘O±i⁄s
 
›ts
 = 
MQTTAsync_disc⁄√˘O±i⁄s_öôülizî
;

380 
rc
;

382 
	`MyLog
(
LOGA_DEBUG
, "I¿c⁄√˘ onSuc˚s†ˇŒback 1, c⁄ãxà%p", 
c⁄ãxt
);

383 
›ts
.
⁄Suc˚ss
 = 
ã°1_⁄Disc⁄√˘1
;

384 
›ts
.
c⁄ãxt
 = 
c
;

386 
	`as£π
("C‹ª˘ sîvîURIÑëu∫ed", 
	`°rcmp
(
ª•⁄£
->
Æt
.
c⁄√˘
.
£rvîURI
, 
›ti⁄s
.
c⁄√˘i⁄
) == 0,

387 "£rvîURI wa†%s", 
ª•⁄£
->
Æt
.
c⁄√˘
.
£rvîURI
);

388 
	`as£π
("C‹ª˘ MQTTVîsi⁄Ñëu∫ed", 
ª•⁄£
->
Æt
.
c⁄√˘
.
MQTTVîsi⁄
 == 4,

389 "MQTTVîsi⁄ wa†%d", 
ª•⁄£
->
Æt
.
c⁄√˘
.
MQTTVîsi⁄
);

390 
	`as£π
("C‹ª˘ sessi⁄Pª£¡Ñëu∫ed", 
ª•⁄£
->
Æt
.
c⁄√˘
.
£ssi⁄Pª£¡
 == 0,

391 "£ssi⁄Pª£¡ wa†%d", 
ª•⁄£
->
Æt
.
c⁄√˘
.
£ssi⁄Pª£¡
);

393 
rc
 = 
	`MQTTAsync_disc⁄√˘
(
c
, &
›ts
);

394 
	`as£π
("Disc⁄√˘ suc˚ssful", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

395 
	}
}

403 
	$ã°1
(
O±i⁄s
 
›ti⁄s
)

405 
MQTTAsync
 
c
;

406 
MQTTAsync_c⁄√˘O±i⁄s
 
›ts
 = 
MQTTAsync_c⁄√˘O±i⁄s_öôülizî
;

407 
rc
 = 0;

408 * 
ã°_t›ic
 = "C clientÅest1";

410 
	`Ârötf
(
xml
, "<testcase classname=\"test1\"Çame=\"sessionPresent\"");

411 
globÆ_°¨t_time
 = 
	`°¨t_˛ock
();

412 
ã°_föished
 = 
Áûuªs
 = 0;

413 
	`MyLog
(
LOGA_INFO
, "StartingÅest 1 - sessionPresent");

415 
rc
 = 
	`MQTTAsync_¸óã
(&
c
, 
›ti⁄s
.
c⁄√˘i⁄
, "sesssionPresent",

416 
MQTTCLIENT_PERSISTENCE_DEFAULT
, 
NULL
);

417 
	`as£π
("goodÑ¯‰om cª©e", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d\n",Ñc);

418 i‡(
rc
 !
MQTTASYNC_SUCCESS
)

420 
	`MQTTAsync_de°roy
(&
c
);

421 
exô
;

424 
›ts
.
MQTTVîsi⁄
 = 4;

425 i‡(
›ti⁄s
.
hac⁄√˘i⁄s
 !
NULL
)

427 
›ts
.
£rvîURIs
 = 
›ti⁄s
.
hac⁄√˘i⁄s
;

428 
›ts
.
£rvîURIcou¡
 = 
›ti⁄s
.
hacou¡
;

430 
›ts
.
⁄Suc˚ss
 = 
ã°1_⁄C⁄√˘1
;

431 
›ts
.
⁄Faûuª
 = 
NULL
;

432 
›ts
.
c⁄ãxt
 = 
c
;

435 
›ts
.
˛ón£ssi⁄
 = 1;

436 
	`MyLog
(
LOGA_DEBUG
, "Connecting");

437 
rc
 = 
	`MQTTAsync_c⁄√˘
(
c
, &
›ts
);

438 
	`as£π
("GoodÑ¯‰om c⁄√˘", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

439 i‡(
rc
 !
MQTTASYNC_SUCCESS
)

440 
exô
;

442 !
ã°_föished
)

443 #i‡
	`deföed
(
WIN32
)

444 
	`SÀï
(100);

446 
	`u¶ìp
(10000L);

449 
	`MQTTAsync_de°roy
(&
c
);

451 
exô
:

452 
	`MyLog
(
LOGA_INFO
, "TEST1:Åest %s. %dÅestsÑun, %d failures.",

453 (
Áûuªs
 =0Ë? "∑s£d" : "Áûed", 
ã°s
, failures);

454 
	`wrôe_ã°_ªsu…
();

455  
Áûuªs
;

456 
	}
}

459 
	$ã°2_⁄Disc⁄√˘
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

461 
MQTTAsync
 
c
 = (MQTTAsync)
c⁄ãxt
;

463 
	`MyLog
(
LOGA_DEBUG
, "I¿⁄Disc⁄√˘ cÆlback %p", 
c
);

464 
ã°_föished
 = 1;

465 
	}
}

468 
	$ã°2_⁄Subs¸ibe2
(* 
c⁄ãxt
, 
MQTTAsync_ÁûuªD©a
* 
ª•⁄£
)

470 
MQTTAsync
 
c
 = (MQTTAsync)
c⁄ãxt
;

471 
MQTTAsync_disc⁄√˘O±i⁄s
 
›ts
 = 
MQTTAsync_disc⁄√˘O±i⁄s_öôülizî
;

472 
rc
;

474 
	`MyLog
(
LOGA_DEBUG
, "I¿subs¸ibê⁄Faûuª cÆlback, c⁄ãxà%p", 
c⁄ãxt
);

476 
	`as£π
("C‹ª˘ subs¸ibêªtu∫ code", 
ª•⁄£
->
code
 =
MQTT_BAD_SUBSCRIBE
,

477 "qo†wa†%d", 
ª•⁄£
->
code
);

479 
›ts
.
⁄Suc˚ss
 = 
ã°2_⁄Disc⁄√˘
;

480 
rc
 = 
	`MQTTAsync_disc⁄√˘
(
c
, &
›ts
);

481 
	`as£π
("Disc⁄√˘ suc˚ssful", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

482 
	}
}

485 
	$ã°2_⁄Subs¸ibe1
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

487 
MQTTAsync
 
c
 = (MQTTAsync)
c⁄ãxt
;

488 
MQTTAsync_ª•⁄£O±i⁄s
 
›ts
 = 
MQTTAsync_ª•⁄£O±i⁄s_öôülizî
;

489 
rc
;

491 
	`MyLog
(
LOGA_DEBUG
, "I¿subs¸ibê⁄Suc˚s†ˇŒback, c⁄ãxà%p", 
c⁄ãxt
);

493 
	`as£π
("C‹ª˘ subs¸ibêªtu∫ code", 
ª•⁄£
->
Æt
.
qos
 == 2,

494 "qo†wa†%d", 
ª•⁄£
->
Æt
.
qos
);

495 
	}
}

498 
	$ã°2_⁄C⁄√˘1
(* 
c⁄ãxt
, 
MQTTAsync_suc˚ssD©a
* 
ª•⁄£
)

500 
MQTTAsync
 
c
 = (MQTTAsync)
c⁄ãxt
;

501 
MQTTAsync_ª•⁄£O±i⁄s
 
›ts
 = 
MQTTAsync_ª•⁄£O±i⁄s_öôülizî
;

502 
rc
;

504 
	`MyLog
(
LOGA_DEBUG
, "I¿c⁄√˘ onSuc˚s†ˇŒback 1, c⁄ãxà%p", 
c⁄ãxt
);

506 
	`as£π
("C‹ª˘ sîvîURIÑëu∫ed", 
	`°rcmp
(
ª•⁄£
->
Æt
.
c⁄√˘
.
£rvîURI
, 
›ti⁄s
.
c⁄√˘i⁄
) == 0,

507 "£rvîURI wa†%s", 
ª•⁄£
->
Æt
.
c⁄√˘
.
£rvîURI
);

508 
	`as£π
("C‹ª˘ MQTTVîsi⁄Ñëu∫ed", 
ª•⁄£
->
Æt
.
c⁄√˘
.
MQTTVîsi⁄
 == 4,

509 "MQTTVîsi⁄ wa†%d", 
ª•⁄£
->
Æt
.
c⁄√˘
.
MQTTVîsi⁄
);

510 
	`as£π
("C‹ª˘ sessi⁄Pª£¡Ñëu∫ed", 
ª•⁄£
->
Æt
.
c⁄√˘
.
£ssi⁄Pª£¡
 == 0,

511 "£ssi⁄Pª£¡ wa†%d", 
ª•⁄£
->
Æt
.
c⁄√˘
.
£ssi⁄Pª£¡
);

513 
	`MyLog
(
LOGA_DEBUG
, "I¿c⁄√˘ onSuc˚s†ˇŒback, c⁄ãxà%p", 
c⁄ãxt
);

514 
›ts
.
c⁄ãxt
 = 
c
;

516 
›ts
.
⁄Suc˚ss
 = 
ã°2_⁄Subs¸ibe1
;

517 
rc
 = 
	`MQTTAsync_subs¸ibe
(
c
, "®t›i¯I c™ subs¸ibêto", 2, &
›ts
);

518 
	`as£π
("GoodÑ¯‰om subs¸ibe", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

519 i‡(
rc
 !
MQTTASYNC_SUCCESS
)

520 
ã°_föished
 = 1;

522 
›ts
.
⁄Suc˚ss
 = 
NULL
;

523 
›ts
.
⁄Faûuª
 = 
ã°2_⁄Subs¸ibe2
;

524 
rc
 = 
	`MQTTAsync_subs¸ibe
(
c
, "nosubs¸ibe", 2, &
›ts
);

525 
	`as£π
("GoodÑ¯‰om subs¸ibe", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

526 i‡(
rc
 !
MQTTASYNC_SUCCESS
)

527 
ã°_föished
 = 1;

528 
	}
}

537 
	$ã°2
(
O±i⁄s
 
›ti⁄s
)

539 
MQTTAsync
 
c
;

540 
MQTTAsync_c⁄√˘O±i⁄s
 
›ts
 = 
MQTTAsync_c⁄√˘O±i⁄s_öôülizî
;

541 
rc
 = 0;

542 * 
ã°_t›ic
 = "C clientÅest1";

544 
	`Ârötf
(
xml
, "<testcase classname=\"test2\"Çame=\"bad subscribe\"");

545 
globÆ_°¨t_time
 = 
	`°¨t_˛ock
();

546 
ã°_föished
 = 
Áûuªs
 = 0;

547 
	`MyLog
(
LOGA_INFO
, "StartingÅest 2 - bad subscribe");

549 
rc
 = 
	`MQTTAsync_¸óã
(&
c
, 
›ti⁄s
.
c⁄√˘i⁄
, "badSubscribeÅest",

550 
MQTTCLIENT_PERSISTENCE_DEFAULT
, 
NULL
);

551 
	`as£π
("goodÑ¯‰om cª©e", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d\n",Ñc);

552 i‡(
rc
 !
MQTTASYNC_SUCCESS
)

554 
	`MQTTAsync_de°roy
(&
c
);

555 
exô
;

558 
›ts
.
MQTTVîsi⁄
 = 4;

559 i‡(
›ti⁄s
.
hac⁄√˘i⁄s
 !
NULL
)

561 
›ts
.
£rvîURIs
 = 
›ti⁄s
.
hac⁄√˘i⁄s
;

562 
›ts
.
£rvîURIcou¡
 = 
›ti⁄s
.
hacou¡
;

564 
›ts
.
⁄Suc˚ss
 = 
ã°2_⁄C⁄√˘1
;

565 
›ts
.
⁄Faûuª
 = 
NULL
;

566 
›ts
.
c⁄ãxt
 = 
c
;

569 
›ts
.
˛ón£ssi⁄
 = 1;

570 
	`MyLog
(
LOGA_DEBUG
, "Connecting");

571 
rc
 = 
	`MQTTAsync_c⁄√˘
(
c
, &
›ts
);

572 
	`as£π
("GoodÑ¯‰om c⁄√˘", 
rc
 =
MQTTASYNC_SUCCESS
, "rc was %d",Ñc);

573 i‡(
rc
 !
MQTTASYNC_SUCCESS
)

574 
exô
;

576 !
ã°_föished
)

577 #i‡
	`deföed
(
WIN32
)

578 
	`SÀï
(100);

580 
	`u¶ìp
(10000L);

583 
	`MQTTAsync_de°roy
(&
c
);

585 
exô
:

586 
	`MyLog
(
LOGA_INFO
, "TEST2:Åest %s. %dÅestsÑun, %d failures.",

587 (
Áûuªs
 =0Ë? "∑s£d" : "Áûed", 
ã°s
, failures);

588 
	`wrôe_ã°_ªsu…
();

589  
Áûuªs
;

590 
	}
}

595 
	$maö
(
¨gc
, ** 
¨gv
)

597 
rc
 = 0;

598 (*
ã°s
[])(Ë{
NULL
, 
ã°1
, 
ã°2
};

599 
i
;

601 
xml
 = 
	`f›í
("TEST-MQTT4sync.xml", "w");

602 
	`Ârötf
(
xml
, "<ã°suôê«me=\"ã°-mqâ4sync\"Åe°s=\"%d\">\n", ()(
	`ARRAY_SIZE
(
ã°s
) - 1));

604 
	`£ãnv
("MQTT_C_CLIENT_TRACE", "ON", 1);

605 
	`£ãnv
("MQTT_C_CLIENT_TRACE_LEVEL", "ERROR", 1);

607 
	`gë›ts
(
¨gc
, 
¨gv
);

609 
i
 = 0; i < 
›ti⁄s
.
ôî©i⁄s
; ++i)

611 i‡(
›ti⁄s
.
ã°_no
 == 0)

613 
›ti⁄s
.
ã°_no
 = 1; o±i⁄s.ã°_nÿ< 
	`ARRAY_SIZE
(
ã°s
); ++options.test_no)

614 
rc
 +
ã°s
[
›ti⁄s
.
ã°_no
](options);

617 
rc
 = 
ã°s
[
›ti⁄s
.
ã°_no
](options);

620 i‡(
rc
 == 0)

621 
	`MyLog
(
LOGA_INFO
, "verdictÖass");

623 
	`MyLog
(
LOGA_INFO
, "verdict fail");

625 
	`Ârötf
(
xml
, "</testsuite>\n");

626 
	`f˛o£
(
xml
);

627  
rc
;

628 
	}
}

	@paho-c/test/test_mqtt4sync.c

31 
	~"MQTTClõ¡.h
"

32 
	~<°rög.h
>

33 
	~<°dlib.h
>

35 #i‡!
deföed
(
_WINDOWS
)

36 
	~<sys/time.h
>

37 
	~<sys/sockë.h
>

38 
	~<uni°d.h
>

39 
	~<î∫o.h
>

41 
	~<wösock2.h
>

42 
	~<ws2t˝ù.h
>

43 
	#MAXHOSTNAMELEN
 256

	)

44 
	#EAGAIN
 
WSAEWOULDBLOCK


	)

45 
	#EINTR
 
WSAEINTR


	)

46 
	#EINPROGRESS
 
WSAEINPROGRESS


	)

47 
	#EWOULDBLOCK
 
WSAEWOULDBLOCK


	)

48 
	#ENOTCONN
 
WSAENOTCONN


	)

49 
	#ECONNRESET
 
WSAECONNRESET


	)

50 
	#£ãnv
(
a
, 
b
, 
c
Ë
	`_puãnv_s
◊, b)

	)

53 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ ◊[0]))

	)

55 
	$ußge
()

57 
	`¥ötf
("help!!\n");

58 
	`exô
(-1);

59 
	}
}

61 
	sO±i⁄s


63 * 
	mc⁄√˘i⁄
;

64 ** 
	mhac⁄√˘i⁄s
;

65 
	mhacou¡
;

66 
	mvîbo£
;

67 
	mã°_no
;

68 
	môî©i⁄s
;

69 } 
	g›ti⁄s
 =

72 
NULL
,

79 
	$gë›ts
(
¨gc
, ** 
¨gv
)

81 
cou¡
 = 1;

83 
cou¡
 < 
¨gc
)

85 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--test_no") == 0)

87 i‡(++
cou¡
 < 
¨gc
)

88 
›ti⁄s
.
ã°_no
 = 
	`©oi
(
¨gv
[
cou¡
]);

90 
	`ußge
();

92 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--connection") == 0)

94 i‡(++
cou¡
 < 
¨gc
)

96 
›ti⁄s
.
c⁄√˘i⁄
 = 
¨gv
[
cou¡
];

97 
	`¥ötf
("\nSëtög c⁄√˘i⁄Åÿ%s\n", 
›ti⁄s
.
c⁄√˘i⁄
);

100 
	`ußge
();

102 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--haconnections") == 0)

104 i‡(++
cou¡
 < 
¨gc
)

106 * 
tok
 = 
	`°πok
(
¨gv
[
cou¡
], " ");

107 
›ti⁄s
.
hacou¡
 = 0;

108 
›ti⁄s
.
hac⁄√˘i⁄s
 = 
	`mÆloc
((*) * 5);

109 
tok
)

111 
›ti⁄s
.
hac⁄√˘i⁄s
[›ti⁄s.
hacou¡
] = 
	`mÆloc
(
	`°æí
(
tok
) + 1);

112 
	`°r˝y
(
›ti⁄s
.
hac⁄√˘i⁄s
[›ti⁄s.
hacou¡
], 
tok
);

113 
›ti⁄s
.
hacou¡
++;

114 
tok
 = 
	`°πok
(
NULL
, " ");

118 
	`ußge
();

120 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--iterations") == 0)

122 i‡(++
cou¡
 < 
¨gc
)

123 
›ti⁄s
.
ôî©i⁄s
 = 
	`©oi
(
¨gv
[
cou¡
]);

125 
	`ußge
();

127 i‡(
	`°rcmp
(
¨gv
[
cou¡
], "--verbose") == 0)

129 
›ti⁄s
.
vîbo£
 = 1;

130 
	`¥ötf
("\nSetting verbose on\n");

132 
cou¡
++;

134 
	}
}

137 
	#LOGA_DEBUG
 0

	)

138 
	#LOGA_INFO
 1

	)

139 
	~<°d¨g.h
>

140 
	~<time.h
>

141 
	~<sys/timeb.h
>

142 
	$MyLog
(
LOGA_Àvñ
, * 
f‹m©
, ...)

144 
msg_buf
[256];

145 
va_li°
 
¨gs
;

146 
timeb
 
ts
;

148 
tm
 *
timeöfo
;

150 i‡(
LOGA_Àvñ
 =
LOGA_DEBUG
 && 
›ti⁄s
.
vîbo£
 == 0)

153 
	`·ime
(&
ts
);

154 
timeöfo
 = 
	`loˇ…ime
(&
ts
.
time
);

155 
	`°r·ime
(
msg_buf
, 80, "%Y%m%d %H%M%S", 
timeöfo
);

157 
	`•rötf
(&
msg_buf
[
	`°æí
(msg_buf)], ".%.3hu ", 
ts
.
mûlôm
);

159 
	`va_°¨t
(
¨gs
, 
f‹m©
);

160 
	`v¢¥ötf
(&
msg_buf
[
	`°æí
(msg_buf)], (msg_bufË- såÀn(msg_buf), 
f‹m©
, 
¨gs
);

161 
	`va_íd
(
¨gs
);

163 
	`¥ötf
("%s\n", 
msg_buf
);

164 
	`fÊush
(
°dout
);

165 
	}
}

168 #i‡
deföed
(
WIN32
Ë|| deföed(
_WINDOWS
)

169 
	#mq¶ìp
(
A
Ë
	`SÀï
(1000*A)

	)

170 
	#START_TIME_TYPE
 
DWORD


	)

171 
DWORD
 
	g°¨t_time
 = 0;

172 
START_TIME_TYPE
 
	$°¨t_˛ock
()

174  
	`GëTickCou¡
();

175 
	}
}

176 #ñi‡
deföed
(
AIX
)

177 
	#mq¶ìp
 
¶ìp


	)

178 
	#START_TIME_TYPE
 
time•ec


	)

179 
START_TIME_TYPE
 
	$°¨t_˛ock
()

181 
time•ec
 
°¨t
;

182 
	`˛ock_gëtime
(
CLOCK_REALTIME
, &
°¨t
);

183  
°¨t
;

184 
	}
}

186 
	#mq¶ìp
 
¶ìp


	)

187 
	#START_TIME_TYPE
 
timevÆ


	)

189 
START_TIME_TYPE
 
	$°¨t_˛ock
()

191 
timevÆ
 
°¨t_time
;

192 
	`gëtimeofday
(&
°¨t_time
, 
NULL
);

193  
°¨t_time
;

194 
	}
}

198 #i‡
deföed
(
WIN32
)

199 
	$ñ≠£d
(
START_TIME_TYPE
 
°¨t_time
)

201  
	`GëTickCou¡
(Ë- 
°¨t_time
;

202 
	}
}

203 #ñi‡
deföed
(
AIX
)

204 
	#as£π
(
a
)

	)

205 
	$ñ≠£d
(
time•ec
 
°¨t
)

207 
time•ec
 
now
, 
ªs
;

209 
	`˛ock_gëtime
(
CLOCK_REALTIME
, &
now
);

210 
	`¡imîsub
(
now
, 
°¨t
, 
ªs
);

211  (
ªs
.
tv_£c
)*1000L + (ªs.
tv_n£c
)/1000000L;

212 
	}
}

214 
	$ñ≠£d
(
START_TIME_TYPE
 
°¨t_time
)

216 
timevÆ
 
now
, 
ªs
;

218 
	`gëtimeofday
(&
now
, 
NULL
);

219 
	`timîsub
(&
now
, &
°¨t_time
, &
ªs
);

220  (
ªs
.
tv_£c
)*1000 + (ªs.
tv_u£c
)/1000;

221 
	}
}

225 
	#as£π
(
a
, 
b
, 
c
, 
d
Ë
	`myas£π
(
__FILE__
, 
__LINE__
,á, b, c, d)

	)

226 
	#as£π1
(
a
, 
b
, 
c
, 
d
, 
e
Ë
	`myas£π
(
__FILE__
, 
__LINE__
,á, b, c, d,É)

	)

228 
	gã°s
 = 0;

229 
	gÁûuªs
 = 0;

230 
FILE
* 
	gxml
;

231 
START_TIME_TYPE
 
	gglobÆ_°¨t_time
;

232 
	gouçut
[3000];

233 * 
	gcur_ouçut
 = 
ouçut
;

236 
	$wrôe_ã°_ªsu…
()

238 
duøti⁄
 = 
	`ñ≠£d
(
globÆ_°¨t_time
);

240 
	`Ârötf
(
xml
, "Åime=\"%ld.%.3ld\" >\n", 
duøti⁄
 / 1000, duration % 1000);

241 i‡(
cur_ouçut
 !
ouçut
)

243 
	`Ârötf
(
xml
, "%s", 
ouçut
);

244 
cur_ouçut
 = 
ouçut
;

246 
	`Ârötf
(
xml
, "</testcase>\n");

247 
	}
}

250 
	$myas£π
(* 
fûíame
, 
löío
, * 
des¸ùti⁄
, 
vÆue
, * 
f‹m©
, ...)

252 ++
ã°s
;

253 i‡(!
vÆue
)

255 
va_li°
 
¨gs
;

257 ++
Áûuªs
;

258 
	`MyLog
(
LOGA_INFO
, "As£πi⁄ faûed, fûê%s,Üöê%d, des¸ùti⁄: %s\n", 
fûíame
, 
löío
, 
des¸ùti⁄
);

260 
	`va_°¨t
(
¨gs
, 
f‹m©
);

261 
	`v¥ötf
(
f‹m©
, 
¨gs
);

262 
	`va_íd
(
¨gs
);

264 
cur_ouçut
 +
	`•rötf
(cur_output, "<failureÅype=\"%s\">file %s,Üine %d </failure>\n",

265 
des¸ùti⁄
, 
fûíame
, 
löío
);

268 
	`MyLog
(
LOGA_DEBUG
, "As£πi⁄ suc˚eded, fûê%s,Üöê%d, des¸ùti⁄: %s", 
fûíame
, 
löío
, 
des¸ùti⁄
);

269 
	}
}

277 
	$ã°1
(
O±i⁄s
 
›ti⁄s
)

279 
MQTTClõ¡
 
c
;

280 
MQTTClõ¡_c⁄√˘O±i⁄s
 
›ts
 = 
MQTTClõ¡_c⁄√˘O±i⁄s_öôülizî
;

281 
MQTTClõ¡_wûlO±i⁄s
 
w›ts
 = 
MQTTClõ¡_wûlO±i⁄s_öôülizî
;

282 
rc
 = 0;

283 * 
ã°_t›ic
 = "C clientÅest1";

285 
	`Ârötf
(
xml
, "<testcase classname=\"test1\"Çame=\"sessionPresent\"");

286 
globÆ_°¨t_time
 = 
	`°¨t_˛ock
();

287 
Áûuªs
 = 0;

288 
	`MyLog
(
LOGA_INFO
, "StartingÅest 1 - sessionPresent");

290 
rc
 = 
	`MQTTClõ¡_¸óã
(&
c
, 
›ti⁄s
.
c⁄√˘i⁄
, "sesssionPresent",

291 
MQTTCLIENT_PERSISTENCE_DEFAULT
, 
NULL
);

292 
	`as£π
("goodÑ¯‰om cª©e", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d\n",Ñc);

293 i‡(
rc
 !
MQTTCLIENT_SUCCESS
)

295 
	`MQTTClõ¡_de°roy
(&
c
);

296 
exô
;

299 
›ts
.
kìpAliveI¡îvÆ
 = 20;

300 
›ts
.
u£∫ame
 = "testuser";

301 
›ts
.
∑ssw‹d
 = "testpassword";

302 
›ts
.
MQTTVîsi⁄
 = 4;

303 i‡(
›ti⁄s
.
hac⁄√˘i⁄s
 !
NULL
)

305 
›ts
.
£rvîURIs
 = 
›ti⁄s
.
hac⁄√˘i⁄s
;

306 
›ts
.
£rvîURIcou¡
 = 
›ti⁄s
.
hacou¡
;

309 
›ts
.
wûl
 = &
w›ts
;

310 
›ts
.
wûl
->
mesßge
 = "will message";

311 
›ts
.
wûl
->
qos
 = 1;

312 
›ts
.
wûl
->
ªèöed
 = 0;

313 
›ts
.
wûl
->
t›icName
 = "willÅopic";

314 
›ts
.
wûl
 = 
NULL
;

317 
›ts
.
˛ón£ssi⁄
 = 1;

318 
	`MyLog
(
LOGA_DEBUG
, "Connecting");

319 
rc
 = 
	`MQTTClõ¡_c⁄√˘
(
c
, &
›ts
);

320 
	`as£π
("GoodÑ¯‰om c⁄√˘", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

321 i‡(
rc
 !
MQTTCLIENT_SUCCESS
)

322 
exô
;

324 
	`as£π
("C‹ª˘ sîvîURIÑëu∫ed", 
	`°rcmp
(
›ts
.
ªtu∫ed
.
£rvîURI
, 
›ti⁄s
.
c⁄√˘i⁄
) == 0, "serverURI was %s",

325 
›ts
.
ªtu∫ed
.
£rvîURI
);

326 
	`as£π
("C‹ª˘ MQTTVîsi⁄Ñëu∫ed", 
›ts
.
ªtu∫ed
.
MQTTVîsi⁄
 == 4, "MQTTVersion was %d",

327 
›ts
.
ªtu∫ed
.
MQTTVîsi⁄
);

328 
	`as£π
("C‹ª˘ sessi⁄Pª£¡Ñëu∫ed", 
›ts
.
ªtu∫ed
.
£ssi⁄Pª£¡
 == 0, "sessionPresent was %d",

329 
›ts
.
ªtu∫ed
.
£ssi⁄Pª£¡
);

331 
rc
 = 
	`MQTTClõ¡_disc⁄√˘
(
c
, 0);

332 
	`as£π
("Disc⁄√˘ suc˚ssful", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

335 
›ts
.
˛ón£ssi⁄
 = 0;

336 
rc
 = 
	`MQTTClõ¡_c⁄√˘
(
c
, &
›ts
);

337 
	`as£π
("C⁄√˘ suc˚ssful", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

339 
	`as£π
("C‹ª˘ sîvîURIÑëu∫ed", 
	`°rcmp
(
›ts
.
ªtu∫ed
.
£rvîURI
, 
›ti⁄s
.
c⁄√˘i⁄
) == 0, "serverURI was %s",

340 
›ts
.
ªtu∫ed
.
£rvîURI
);

341 
	`as£π
("C‹ª˘ MQTTVîsi⁄Ñëu∫ed", 
›ts
.
ªtu∫ed
.
MQTTVîsi⁄
 == 4, "MQTTVersion was %d",

342 
›ts
.
ªtu∫ed
.
MQTTVîsi⁄
);

343 
	`as£π
("C‹ª˘ sessi⁄Pª£¡Ñëu∫ed", 
›ts
.
ªtu∫ed
.
£ssi⁄Pª£¡
 == 0, "sessionPresent was %d",

344 
›ts
.
ªtu∫ed
.
£ssi⁄Pª£¡
);

346 
rc
 = 
	`MQTTClõ¡_disc⁄√˘
(
c
, 0);

347 
	`as£π
("Disc⁄√˘ suc˚ssful", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

350 
›ts
.
˛ón£ssi⁄
 = 0;

351 
rc
 = 
	`MQTTClõ¡_c⁄√˘
(
c
, &
›ts
);

352 
	`as£π
("C⁄√˘ suc˚ssful", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

353 
	`as£π
("C‹ª˘ sîvîURIÑëu∫ed", 
	`°rcmp
(
›ts
.
ªtu∫ed
.
£rvîURI
, 
›ti⁄s
.
c⁄√˘i⁄
) == 0, "serverURI was %s",

354 
›ts
.
ªtu∫ed
.
£rvîURI
);

355 
	`as£π
("C‹ª˘ MQTTVîsi⁄Ñëu∫ed", 
›ts
.
ªtu∫ed
.
MQTTVîsi⁄
 == 4, "MQTTVersion was %d",

356 
›ts
.
ªtu∫ed
.
MQTTVîsi⁄
);

357 
	`as£π
("C‹ª˘ sessi⁄Pª£¡Ñëu∫ed", 
›ts
.
ªtu∫ed
.
£ssi⁄Pª£¡
 == 1, "sessionPresent was %d",

358 
›ts
.
ªtu∫ed
.
£ssi⁄Pª£¡
);

359 
rc
 = 
	`MQTTClõ¡_disc⁄√˘
(
c
, 0);

360 
	`as£π
("Disc⁄√˘ suc˚ssful", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

362 
	`MQTTClõ¡_de°roy
(&
c
);

364 
exô
:

365 
	`MyLog
(
LOGA_INFO
, "TEST1:Åest %s. %dÅestsÑun, %d failures.",

366 (
Áûuªs
 =0Ë? "∑s£d" : "Áûed", 
ã°s
, failures);

367 
	`wrôe_ã°_ªsu…
();

368  
Áûuªs
;

369 
	}
}

377 vﬁ©ûê
	gã°2_¨rivedcou¡
 = 0;

378 
	gã°2_dñivîyCom∂ëed
 = 0;

379 
MQTTClõ¡_mesßge
 
	gã°2_pubmsg
 = 
MQTTClõ¡_mesßge_öôülizî
;

381 
	$ã°2_dñivîyCom∂ëe
(* 
c⁄ãxt
, 
MQTTClõ¡_dñivîyTokí
 
dt
)

383 ++
ã°2_dñivîyCom∂ëed
;

384 
	}
}

386 
	$ã°2_mesßgeAºived
(* 
c⁄ãxt
, * 
t›icName
, 
t›icLí
, 
MQTTClõ¡_mesßge
* 
m
)

388 ++
ã°2_¨rivedcou¡
;

389 
	`MyLog
(
LOGA_DEBUG
, "Callback: %d messageÑeceived onÅopic %s is %.*s.",

390 
ã°2_¨rivedcou¡
, 
t›icName
, 
m
->
∑ylﬂdÀn
, (*)(m->
∑ylﬂd
));

391 
	`MQTTClõ¡_‰ì
(
t›icName
);

392 
	`MQTTClõ¡_‰ìMesßge
(&
m
);

394 
	}
}

396 
	$ã°2
(
O±i⁄s
 
›ti⁄s
)

398 * 
ã°«me
 = "test2";

399 
subsqos
 = 2;

400 
MQTTClõ¡
 
c
;

401 
MQTTClõ¡_c⁄√˘O±i⁄s
 
›ts
 = 
MQTTClõ¡_c⁄√˘O±i⁄s_öôülizî
;

402 
rc
 = 0;

403 * 
ã°_t›ic
 = "C clientÅest2";

404 * 
t›ics
[2] = {"test_topic", "nosubscribe"};

405 
qoss
[2] = {2, 2};

407 
	`Ârötf
(
xml
, "<testcase classname=\"test1\"Çame=\"badÑeturn code from subscribe\"");

408 
	`MyLog
(
LOGA_INFO
, "StartingÅest 2 - badÑeturn code from subscribe");

409 
globÆ_°¨t_time
 = 
	`°¨t_˛ock
();

410 
Áûuªs
 = 0;

412 
	`MQTTClõ¡_¸óã
(&
c
, 
›ti⁄s
.
c⁄√˘i⁄
, "mu…i_thªaded_ßm∂e", 
MQTTCLIENT_PERSISTENCE_DEFAULT
, 
NULL
);

414 
›ts
.
kìpAliveI¡îvÆ
 = 20;

415 
›ts
.
˛ón£ssi⁄
 = 1;

416 
›ts
.
MQTTVîsi⁄
 = 4;

417 i‡(
›ti⁄s
.
hac⁄√˘i⁄s
 !
NULL
)

419 
›ts
.
£rvîURIs
 = 
›ti⁄s
.
hac⁄√˘i⁄s
;

420 
›ts
.
£rvîURIcou¡
 = 
›ti⁄s
.
hacou¡
;

423 
rc
 = 
	`MQTTClõ¡_£tCÆlbacks
(
c
, 
NULL
, NULL, 
ã°2_mesßgeAºived
, 
ã°2_dñivîyCom∂ëe
);

424 
	`as£π
("GoodÑ¯‰om sëCÆlbacks", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

426 
	`MyLog
(
LOGA_DEBUG
, "Connecting");

427 
rc
 = 
	`MQTTClõ¡_c⁄√˘
(
c
, &
›ts
);

428 
	`as£π
("GoodÑ¯‰om c⁄√˘", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

429 i‡(
rc
 !
MQTTCLIENT_SUCCESS
)

430 
exô
;

432 
	`as£π
("C‹ª˘ sîvîURIÑëu∫ed", 
	`°rcmp
(
›ts
.
ªtu∫ed
.
£rvîURI
, 
›ti⁄s
.
c⁄√˘i⁄
) == 0, "serverURI was %s",

433 
›ts
.
ªtu∫ed
.
£rvîURI
);

434 
	`as£π
("C‹ª˘ MQTTVîsi⁄Ñëu∫ed", 
›ts
.
ªtu∫ed
.
MQTTVîsi⁄
 == 4, "MQTTVersion was %d",

435 
›ts
.
ªtu∫ed
.
MQTTVîsi⁄
);

436 
	`as£π
("C‹ª˘ sessi⁄Pª£¡Ñëu∫ed", 
›ts
.
ªtu∫ed
.
£ssi⁄Pª£¡
 == 0, "sessionPresent was %d",

437 
›ts
.
ªtu∫ed
.
£ssi⁄Pª£¡
);

439 
rc
 = 
	`MQTTClõ¡_subs¸ibe
(
c
, 
ã°_t›ic
, 
subsqos
);

440 
	`as£π
("GoodÑ¯‰om subs¸ibe", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

442 
rc
 = 
	`MQTTClõ¡_subs¸ibe
(
c
, "nosubscribe", 2);

443 
	`as£π
("0x80 from subs¸ibe", 
rc
 == 0x80, "rc was %d",Ñc);

445 
rc
 = 
	`MQTTClõ¡_subs¸ibeM™y
(
c
, 2, 
t›ics
, 
qoss
);

446 
	`as£π
("GoodÑ¯‰om subs¸ibe", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

447 
	`as£π
("C‹ª˘Ñëu∫ed qo†‰om subs¸ibe", 
qoss
[0] == 2, "qos 0 was %d", qoss[0]);

448 
	`as£π
("C‹ª˘Ñëu∫ed qo†‰om subs¸ibe", 
qoss
[1] == 0x80, "qos 0 was %d", qoss[0]);

450 
rc
 = 
	`MQTTClõ¡_unsubs¸ibe
(
c
, 
ã°_t›ic
);

451 
	`as£π
("Unsubs¸ibêsuc˚ssful", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

452 
rc
 = 
	`MQTTClõ¡_disc⁄√˘
(
c
, 0);

453 
	`as£π
("Disc⁄√˘ suc˚ssful", 
rc
 =
MQTTCLIENT_SUCCESS
, "rc was %d",Ñc);

455 
	`MQTTClõ¡_de°roy
(&
c
);

457 
exô
:

458 
	`MyLog
(
LOGA_INFO
, "%s:Åest %s. %dÅestsÑun, %d failures.",

459 (
Áûuªs
 =0Ë? "∑s£d" : "Áûed", 
ã°«me
, 
ã°s
, failures);

460 
	`wrôe_ã°_ªsu…
();

461  
Áûuªs
;

462 
	}
}

465 
	$maö
(
¨gc
, ** 
¨gv
)

467 
rc
 = 0;

468 (*
ã°s
[])(Ë{
NULL
, 
ã°1
, 
ã°2
};

469 
i
;

471 
xml
 = 
	`f›í
("TEST-MQTT4sync.xml", "w");

472 
	`Ârötf
(
xml
, "<ã°suôê«me=\"ã°-mqâ4sync\"Åe°s=\"%d\">\n", ()(
	`ARRAY_SIZE
(
ã°s
) - 1));

474 
	`£ãnv
("MQTT_C_CLIENT_TRACE", "ON", 1);

475 
	`£ãnv
("MQTT_C_CLIENT_TRACE_LEVEL", "ERROR", 1);

477 
	`gë›ts
(
¨gc
, 
¨gv
);

479 
i
 = 0; i < 
›ti⁄s
.
ôî©i⁄s
; ++i)

481 i‡(
›ti⁄s
.
ã°_no
 == 0)

483 
›ti⁄s
.
ã°_no
 = 1; o±i⁄s.ã°_nÿ< 
	`ARRAY_SIZE
(
ã°s
); ++options.test_no)

484 
rc
 +
ã°s
[
›ti⁄s
.
ã°_no
](options);

487 
rc
 = 
ã°s
[
›ti⁄s
.
ã°_no
](options);

490 i‡(
rc
 == 0)

491 
	`MyLog
(
LOGA_INFO
, "verdictÖass");

493 
	`MyLog
(
LOGA_INFO
, "verdict fail");

495 
	`Ârötf
(
xml
, "</testsuite>\n");

496 
	`f˛o£
(
xml
);

497  
rc
;

498 
	}
}

	@queue.c

1 
	~<°dlib.h
>

2 
	~<°rög.h
>

3 
	~<î∫o.h
>

4 
	~<±hªad.h
>

5 
	~<sys/time.h
>

6 
	~"queue.h
"

8 
	#MSGPOOL_SIZE
 256

	)

10 
	smsgli°
 {

11 
msg
 
	mmsg
;

12 
msgli°
 *
	m√xt
;

15 
ölöe
 
msgli°
 *
	$gë_msgli°
(
queue
 *queue)

17 
msgli°
 *
tmp
;

19 if(
queue
->
msgpoﬁ
 !
NULL
) {

20 
tmp
 = 
queue
->
msgpoﬁ
;

21 
queue
->
msgpoﬁ
 = 
tmp
->
√xt
;

22 
queue
->
msgpoﬁ_Àngth
--;

24 
tmp
 = 
	`mÆloc
( *tmp);

27  
tmp
;

28 
	}
}

30 
ölöe
 
	$ªÀa£_msgli°
(
queue
 *queue, 
msgli°
 *
node
)

33 i‡(
queue
->
msgpoﬁ_Àngth
 > ( queue->
Àngth
/8 + 
MSGPOOL_SIZE
)) {

34 
	`‰ì
(
node
);

36 
node
->
msg
.
d©a
 = 
NULL
;

37 
node
->
msg
.
msgty≥
 = 0;

38 
node
->
√xt
 = 
queue
->
msgpoﬁ
;

39 
queue
->
msgpoﬁ
 = 
node
;

40 
queue
->
msgpoﬁ_Àngth
++;

42 i‡(
queue
->
msgpoﬁ_Àngth
 > (queue->
Àngth
/4 + 
MSGPOOL_SIZE
*10)) {

43 
msgli°
 *
tmp
 = 
queue
->
msgpoﬁ
;

44 
queue
->
msgpoﬁ
 = 
tmp
->
√xt
;

45 
	`‰ì
(
tmp
);

46 
queue
->
msgpoﬁ_Àngth
--;

48 
	}
}

50 
	$queue_öô
(
queue
 *queue)

52 
ªt
 = -1;

53 i‡(
queue
 =
NULL
) {

54  
ªt
;

56 
	`mem£t
(
queue
, 0, (queue));

57 
ªt
 = 
	`±hªad_c⁄d_öô
(&
queue
->
c⁄d
, 
NULL
);

58 i‡(
ªt
 != 0) {

59  
ªt
;

62 
ªt
 = 
	`±hªad_muãx_öô
(&
queue
->
muãx
, 
NULL
);

63 i‡(
ªt
 != 0) {

64 
	`±hªad_c⁄d_de°roy
(&
queue
->
c⁄d
);

65  
ªt
;

69 
	}
}

71 
	$queue_add
(
queue
 *queue, *
d©a
, 
msgty≥
)

73 
msgli°
 *
√wmsg
;

75 
	`±hªad_muãx_lock
(&
queue
->
muãx
);

76 
√wmsg
 = 
	`gë_msgli°
(
queue
);

77 i‡(
√wmsg
 =
NULL
) {

78 
	`±hªad_muãx_u∆ock
(&
queue
->
muãx
);

79  
ENOMEM
;

81 
√wmsg
->
msg
.
d©a
 = data;

82 
√wmsg
->
msg
.
msgty≥
 = msgtype;

84 
√wmsg
->
√xt
 = 
NULL
;

85 i‡(
queue
->
œ°
 =
NULL
) {

86 
queue
->
œ°
 = 
√wmsg
;

87 
queue
->
fú°
 = 
√wmsg
;

89 
queue
->
œ°
->
√xt
 = 
√wmsg
;

90 
queue
->
œ°
 = 
√wmsg
;

93 i‡(
queue
->
Àngth
 == 0)

94 
	`±hªad_c⁄d_brﬂdˇ°
(&
queue
->
c⁄d
);

95 
queue
->
Àngth
++;

96 
	`±hªad_muãx_u∆ock
(&
queue
->
muãx
);

99 
	}
}

101 
	$queue_gë
(
queue
 *queue, c⁄° 
time•ec
 *
timeout
, 
msg
 *msg)

103 
msgli°
 *
fú°ªc
;

104 
ªt
 = 0;

105 
time•ec
 
ab°imeout
;

107 i‡(
queue
 =
NULL
 || 
msg
 == NULL) {

108  
EINVAL
;

110 i‡(
timeout
) {

111 
timevÆ
 
now
;

113 
	`gëtimeofday
(&
now
, 
NULL
);

114 
ab°imeout
.
tv_£c
 = 
now
.tv_£¯+ 
timeout
->tv_sec;

115 
ab°imeout
.
tv_n£c
 = (
now
.
tv_u£c
 * 1000Ë+ 
timeout
->tv_nsec;

116 i‡(
ab°imeout
.
tv_n£c
 >= 1000000000) {

117 
ab°imeout
.
tv_£c
++;

118 
ab°imeout
.
tv_n£c
 -= 1000000000;

122 
	`±hªad_muãx_lock
(&
queue
->
muãx
);

125 
queue
->
fú°
 =
NULL
 && 
ªt
 !
ETIMEDOUT
) {

127 i‡(
timeout
) {

128 
ªt
 = 
	`±hªad_c⁄d_timedwaô
(&
queue
->
c⁄d
, &queue->
muãx
, &
ab°imeout
);

130 
	`±hªad_c⁄d_waô
(&
queue
->
c⁄d
, &queue->
muãx
);

135 i‡(
ªt
 =
ETIMEDOUT
) {

136 
	`±hªad_muãx_u∆ock
(&
queue
->
muãx
);

137  
ªt
;

140 
fú°ªc
 = 
queue
->
fú°
;

141 
queue
->
fú°
 = queue->fú°->
√xt
;

142 
queue
->
Àngth
--;

144 i‡(
queue
->
fú°
 =
NULL
) {

145 
queue
->
œ°
 = 
NULL
;

146 
queue
->
Àngth
 = 0;

149 
msg
->
d©a
 = 
fú°ªc
->msg.data;

150 
msg
->
msgty≥
 = 
fú°ªc
->msg.msgtype;

151 
msg
->
qÀngth
 = 
queue
->
Àngth
;

153 
	`ªÀa£_msgli°
(
queue
, 
fú°ªc
);

154 
	`±hªad_muãx_u∆ock
(&
queue
->
muãx
);

157 
	}
}

160 
	$queue_˛ónup
(
queue
 *queue, 
‰ìd©a
)

162 
msgli°
 *
ªc
;

163 
msgli°
 *
√xt
;

164 
msgli°
 *
ªcs
[2];

165 
ªt
,
i
;

167 i‡(
queue
 =
NULL
) {

168  
EINVAL
;

171 
	`±hªad_muãx_lock
(&
queue
->
muãx
);

172 
ªcs
[0] = 
queue
->
fú°
;

173 
ªcs
[1] = 
queue
->
msgpoﬁ
;

174 
i
 = 0; i < 2 ; i++) {

175 
ªc
 = 
ªcs
[
i
];

176 
ªc
) {

177 
√xt
 = 
ªc
->next;

178 i‡(
‰ìd©a
) {

179 
	`‰ì
(
ªc
->
msg
.
d©a
);

181 
	`‰ì
(
ªc
);

182 
ªc
 = 
√xt
;

186 
	`±hªad_muãx_u∆ock
(&
queue
->
muãx
);

187 
ªt
 = 
	`±hªad_muãx_de°roy
(&
queue
->
muãx
);

188 
	`±hªad_c⁄d_de°roy
(&
queue
->
c⁄d
);

190  
ªt
;

191 
	}
}

193 
	$queue_Àngth
(
queue
 *queue)

195 
cou¡î
;

198 
	`±hªad_muãx_lock
(&
queue
->
muãx
);

199 
cou¡î
 = 
queue
->
Àngth
;

200 
	`±hªad_muãx_u∆ock
(&
queue
->
muãx
);

202  
cou¡î
;

203 
	}
}

	@queue.h

1 #i‚de‡
QUEUE_H_


2 
	#QUEUE_H_


	)

4 
	~<±hªad.h
>

6 #ifde‡
__˝lu•lus


44 
	smsg
{

48 *
d©a
;

52 
msgty≥
;

56 
qÀngth
;

69 
	squeue
 {

74 
Àngth
;

78 
±hªad_muãx_t
 
muãx
;

82 
±hªad_c⁄d_t
 
c⁄d
;

86 
msgli°
 *
fú°
,*
œ°
;

90 
msgli°
 *
msgpoﬁ
;

94 
msgpoﬁ_Àngth
;

108 
queue_öô
(
queue
 *queue);

126 
queue_add
(
queue
 *queue, *
d©a
, 
msgty≥
);

152 
queue_gë
(
queue
 *queue, c⁄° 
time•ec
 *
timeout
, 
msg
 *msg);

165 
queue_Àngth
(
queue
 *queue);

184 
queue_˛ónup
(
queue
 *queue, 
‰ìd©a
);

186 #ifde‡
__˝lu•lus


	@rs232.c

1 
	~"rs232.h
"

3 
	gîr‹
;

5 
	$rs232_›í
(c⁄° *
u¨t
,

6 
•ìd
,

7 
Êow_˘æ
,

8 
d©abôs
,

9 
°›bôs
,

10 
∑rôy
)

12 
fd
 = -1;

13 
ãrmios
 
›ti⁄s
;

14 
i
;

15 
•ìd_¨r
[] = { 
B115200
, 
B19200
, 
B9600
, 
B4800
, 
B2400
, 
B1200
, 
B300
};

16 
«me_¨r
[] = {115200, 19200, 9600, 4800, 2400, 1200, 300};

17 
fd
 = 
	`›í
(
u¨t
, 
O_RDWR
|
O_NOCTTY
|
O_NDELAY
);

18 i‡(-1 =
fd
) {

19 
	`≥º‹
("Can't open serialÖort\n");

23 i‡(
	`f˙é
(
fd
, 
F_SETFL
, 0) < 0) {

24 
	`≥º‹
("fcntl failed!\n");

28 i‡(
	`tcgë©å
(
fd
, &
›ti⁄s
) != 0) {

29 
	`≥º‹
("getárrtrÉrror.\n");

33 
i
 = 0; i < (
•ìd_¨r
)/(); i++) {

34 i‡(
•ìd
 =
«me_¨r
[
i
]) {

35 
	`cf£ti•ìd
(&
›ti⁄s
, 
•ìd_¨r
[
i
]);

36 
	`cf£to•ìd
(&
›ti⁄s
, 
•ìd_¨r
[
i
]);

40 
›ti⁄s
.
c_cÊag
 |
CLOCAL
;

41 
›ti⁄s
.
c_cÊag
 |
CREAD
;

43 
Êow_˘æ
) {

45 
›ti⁄s
.
c_cÊag
 &~
CRTSCTS
;

49 
›ti⁄s
.
c_cÊag
 |
CRTSCTS
;

52 
›ti⁄s
.
c_cÊag
 |
IXON
 | 
IXOFF
 | 
IXANY
;

56 
›ti⁄s
.
c_cÊag
 &~
CSIZE
;

57 
d©abôs
) {

59 
›ti⁄s
.
c_cÊag
 |
CS5
;

62 
›ti⁄s
.
c_cÊag
 |
CS6
;

65 
›ti⁄s
.
c_cÊag
 |
CS7
;

68 
›ti⁄s
.
c_cÊag
 |
CS8
;

71 
	`Ârötf
(
°dîr
,"Unsupported data size\n");

75 
∑rôy
) {

78 
›ti⁄s
.
c_cÊag
 &~
PARENB
;

79 
›ti⁄s
.
c_iÊag
 &~
INPCK
;

83 
›ti⁄s
.
c_cÊag
 |(
PARODD
 | 
PARENB
);

84 
›ti⁄s
.
c_iÊag
 |
INPCK
;

88 
›ti⁄s
.
c_cÊag
 |
PARENB
;

89 
›ti⁄s
.
c_cÊag
 &~
PARODD
;

90 
›ti⁄s
.
c_iÊag
 |
INPCK
;

94 
›ti⁄s
.
c_cÊag
 &~
PARENB
;

95 
›ti⁄s
.
c_cÊag
 &~
CSTOPB
;

98 
	`Ârötf
(
°dîr
,"UnsupportedÖarity\n");

102 
°›bôs
) {

104 
›ti⁄s
.
c_cÊag
 &~
CSTOPB
;

107 
›ti⁄s
.
c_cÊag
 |
CSTOPB
;

110 
	`Ârötf
(
°dîr
,"Unsupported stop bits\n");

114 
›ti⁄s
.
c_oÊag
 &~
OPOST
;

116 
›ti⁄s
.
c_lÊag
 &~(
ICANON
 | 
ECHO
 | 
ECHOE
 | 
ISIG
);

118 
›ti⁄s
.
c_cc
[
VTIME
] = 5;

119 
›ti⁄s
.
c_cc
[
VMIN
] = 1;

121 
	`tcÊush
(
fd
, 
TCIFLUSH
);

123 i‡(
	`tc£èâr
(
fd
, 
TCSANOW
, &
›ti⁄s
) != 0) {

124 
	`≥º‹
("serialÖort setÉrror!\n");

128  (
fd
);

129 
	}
}

131 
	$rs232_ªad
(
fd
, *
buf
, 
size
)

133 
n
;

135 
n
 = 
	`ªad
(
fd
, 
buf
, 
size
);

137 (
n
);

138 
	}
}

140 
	$rs232_£nd_byã
(
fd
, 
byã
)

142 
n
;

144 
n
 = 
	`wrôe
(
fd
, &
byã
, 1);

145 i‡(
n
<0) (-1);

148 
	}
}

150 
	$rs232_£nd_buf
(
fd
, *
buf
, 
size
)

152 (
	`wrôe
(
fd
, 
buf
, 
size
));

153 
	}
}

155 
	$rs232_˛o£
(
fd
)

157 
°©us
;

159 i‡(
	`io˘l
(
fd
, 
TIOCMGET
, &
°©us
) == -1) {

160 
	`≥º‹
("unableÅo getÖortstatus");

163 
°©us
 &~
TIOCM_DTR
;

164 
°©us
 &~
TIOCM_RTS
;

166 i‡(
	`io˘l
(
fd
, 
TIOCMSET
, &
°©us
) == -1) {

167 
	`≥º‹
("unableÅo setÖortstatus");

170 
	`˛o£
(
fd
);

171 
	}
}

189 
	$rs232_IsDCDE«bÀd
(
fd
)

191 
°©us
;

193 
	`io˘l
(
fd
, 
TIOCMGET
, &
°©us
);

195 i‡(
°©us
&
TIOCM_CAR
) (1);

197 
	}
}

199 
	$rs232_IsCTSE«bÀd
(
fd
)

201 
°©us
;

203 
	`io˘l
(
fd
, 
TIOCMGET
, &
°©us
);

205 i‡(
°©us
&
TIOCM_CTS
) (1);

207 
	}
}

209 
	$rs232_IsDSRE«bÀd
(
fd
)

211 
°©us
;

213 
	`io˘l
(
fd
, 
TIOCMGET
, &
°©us
);

215 i‡(
°©us
&
TIOCM_DSR
) (1);

217 
	}
}

219 
	$rs232_íabÀDTR
(
fd
)

221 
°©us
;

223 i‡(
	`io˘l
(
fd
, 
TIOCMGET
, &
°©us
) == -1) {

224 
	`≥º‹
("unableÅo getÖortstatus");

227 
°©us
 |
TIOCM_DTR
;

229 i‡(
	`io˘l
(
fd
, 
TIOCMSET
, &
°©us
) == -1) {

230 
	`≥º‹
("unableÅo setÖortstatus");

232 
	}
}

234 
	$rs232_dißbÀDTR
(
fd
)

236 
°©us
;

238 i‡(
	`io˘l
(
fd
, 
TIOCMGET
, &
°©us
) == -1) {

239 
	`≥º‹
("unableÅo getÖortstatus");

242 
°©us
 &~
TIOCM_DTR
;

244 i‡(
	`io˘l
(
fd
, 
TIOCMSET
, &
°©us
) == -1) {

245 
	`≥º‹
("unableÅo setÖortstatus");

247 
	}
}

249 
	$rs232_íabÀRTS
(
fd
)

251 
°©us
;

253 i‡(
	`io˘l
(
fd
, 
TIOCMGET
, &
°©us
) == -1) {

254 
	`≥º‹
("unableÅo getÖortstatus");

257 
°©us
 |
TIOCM_RTS
;

259 i‡(
	`io˘l
(
fd
, 
TIOCMSET
, &
°©us
) == -1) {

260 
	`≥º‹
("unableÅo setÖortstatus");

262 
	}
}

264 
	$rs232_dißbÀRTS
(
fd
)

266 
°©us
;

268 i‡(
	`io˘l
(
fd
, 
TIOCMGET
, &
°©us
) == -1) {

269 
	`≥º‹
("unableÅo getÖortstatus");

272 
°©us
 &~
TIOCM_RTS
;

274 i‡(
	`io˘l
(
fd
, 
TIOCMSET
, &
°©us
) == -1) {

275 
	`≥º‹
("unableÅo setÖortstatus");

277 
	}
}

279 
	$rs232_˝uts
(
fd
, c⁄° *
ãxt
)

281 *
ãxt
 !0Ë
	`rs232_£nd_byã
(
fd
, *(text++));

282 
	}
}

	@rs232.h

1 #i‚de‡
RS232_H


2 
	#RS232_H


	)

4 #ifde‡
__˝lu•lus


8 
	~<°dio.h
>

9 
	~<°rög.h
>

11 
	~<ãrmios.h
>

12 
	~<sys/io˘l.h
>

13 
	~<uni°d.h
>

14 
	~<f˙é.h
>

15 
	~<sys/ty≥s.h
>

16 
	~<sys/°©.h
>

17 
	~<limôs.h
>

19 
rs232_›í
(c⁄° *
u¨t
,

20 
•ìd
,

21 
Êow_˘æ
,

22 
d©abôs
,

23 
°›bôs
,

24 
∑rôy
);

25 
rs232_ªad
(, *, );

26 
rs232_£nd_byã
(, );

27 
rs232_£nd_buf
(, *, );

28 
rs232_˛o£
();

29 
rs232_˝uts
(, const *);

30 
rs232_IsDCDE«bÀd
();

31 
rs232_IsCTSE«bÀd
();

32 
rs232_IsDSRE«bÀd
();

33 
rs232_íabÀDTR
();

34 
rs232_dißbÀDTR
();

35 
rs232_íabÀRTS
();

36 
rs232_dißbÀRTS
();

39 #ifde‡
__˝lu•lus


	@telnet.c

5 
	~<°dlib.h
>

6 
	~<°rög.h
>

7 
	~<°dio.h
>

8 
	~<î∫o.h
>

9 
	~<°rög.h
>

10 
	~<°d¨g.h
>

13 
	~"ã ë.h
"

16 #i‡
deföed
(
__GNUC__
Ë|| 
__STDC_VERSION__
 >= 199901L

17 
	#INLINE
 
__ölöe__


	)

19 
	#INLINE


	)

23 
	#Q_US
(
q
Ë((q).
°©e
 & 0x0F)

	)

24 
	#Q_HIM
(
q
Ë(((q).
°©e
 & 0xF0Ë>> 4)

	)

25 
	#Q_MAKE
(
us
,
him
Ë((usË| ((himË<< 4))

	)

28 
	#NEGOTIATE_EVENT
(
ã ë
,
cmd
,
›t
) \

29 
ev
.
ty≥
 = (
cmd
); \

30 
ev
.
√g
.
ãl›t
 = (
›t
); \

31 (
ã ë
)->
	`eh
(—ñ√t), &
ev
, (ã ë)->
ud
);

	)

34 
	eã ë_°©e_t
 {

35 
	mTELNET_STATE_DATA
 = 0,

36 
	mTELNET_STATE_IAC
,

37 
	mTELNET_STATE_WILL
,

38 
	mTELNET_STATE_WONT
,

39 
	mTELNET_STATE_DO
,

40 
	mTELNET_STATE_DONT
,

41 
	mTELNET_STATE_SB
,

42 
	mTELNET_STATE_SB_DATA
,

43 
	mTELNET_STATE_SB_DATA_IAC


45 
ã ë_°©e_t
 
	tã ë_°©e_t
;

48 
	sã ë_t
 {

50 *
	mud
;

52 c⁄° 
ã ë_ãl›t_t
 *
	mãl›ts
;

54 
ã ë_evít_h™dÀr_t
 
	meh
;

57 
ã ë_rfc1143_t
 *
	mq
;

59 *
	mbuf„r
;

61 
size_t
 
	mbuf„r_size
;

63 
size_t
 
	mbuf„r_pos
;

65 
ã ë_°©e_t
 
	m°©e
;

67 
	mÊags
;

69 
	msb_ãl›t
;

71 
	mq_size
;

75 
	sã ë_rfc1143_t
 {

76 
	mãl›t
;

77 
	m°©e
;

78 } 
	tã ë_rfc1143_t
;

81 
	#Q_NO
 0

	)

82 
	#Q_YES
 1

	)

83 
	#Q_WANTNO
 2

	)

84 
	#Q_WANTYES
 3

	)

85 
	#Q_WANTNO_OP
 4

	)

86 
	#Q_WANTYES_OP
 5

	)

89 c⁄° 
size_t
 
	g_buf„r_sizes
[] = { 0, 512, 2048, 8192, 16384, };

90 c⁄° 
size_t
 
	g_buf„r_sizes_cou¡
 = (
_buf„r_sizes
) /

91 (
_buf„r_sizes
[0]);

94 
ã ë_îr‹_t
 
	$_îr‹
(
ã ë_t
 *
ã ë
, 
löe
,

95 c⁄° * 
func
, 
ã ë_îr‹_t
 
îr
, 
Áèl
, c⁄° *
fmt
,

98 
ã ë_evít_t
 
ev
;

99 
buf„r
[512];

100 
va_li°
 
va
;

103 
	`va_°¨t
(
va
, 
fmt
);

104 
	`v¢¥ötf
(
buf„r
, (buf„r), 
fmt
, 
va
);

105 
	`va_íd
(
va
);

108 
ev
.
ty≥
 = 
Áèl
 ? 
TELNET_EV_ERROR
 : 
TELNET_EV_WARNING
;

109 
ev
.
îr‹
.
fûe
 = 
__FILE__
;

110 
ev
.
îr‹
.
func
 = func;

111 
ev
.
îr‹
.
löe
 =Üine;

112 
ev
.
îr‹
.
msg
 = 
buf„r
;

113 
ã ë
->
	`eh
—ñ√t, &
ev
,Åñ√t->
ud
);

115  
îr
;

116 
	}
}

119 
	$_£nd
(
ã ë_t
 *
ã ë
, c⁄° *
buf„r
,

120 
size_t
 
size
)

122 
ã ë_evít_t
 
ev
;

124 
ev
.
ty≥
 = 
TELNET_EV_SEND
;

125 
ev
.
d©a
.
buf„r
 = buffer;

126 
ev
.
d©a
.
size
 = size;

127 
ã ë
->
	`eh
—ñ√t, &
ev
,Åñ√t->
ud
);

128 
	}
}

131 
	#_£ndu
(
t
, 
d
, 
s
Ë
	`_£nd
(—), (c⁄° *)(d), (s))

	)

137 
INLINE
 
	$_check_ãl›t
(
ã ë_t
 *
ã ë
, 
ãl›t
,

138 
us
)

140 
i
;

143 i‡(
ã ë
->
ãl›ts
 == 0)

147 
i
 = 0; 
ã ë
->
ãl›ts
[i].
ãl›t
 != -1; ++i) {

148 i‡(
ã ë
->
ãl›ts
[
i
].
ãl›t
 ==Åelopt) {

149 i‡(
us
 && 
ã ë
->
ãl›ts
[
i
].u†=
TELNET_WILL
)

151 i‡(!
us
 && 
ã ë
->
ãl›ts
[
i
].
him
 =
TELNET_DO
)

160 
	}
}

163 
INLINE
 
ã ë_rfc1143_t
 
	$_gë_rfc1143
(
ã ë_t
 *
ã ë
,

164 
ãl›t
)

166 
ã ë_rfc1143_t
 
em±y
;

167 
i
;

170 
i
 = 0; i !
ã ë
->
q_size
; ++i) {

171 i‡(
ã ë
->
q
[
i
].
ãl›t
 ==Åelopt) {

172  
ã ë
->
q
[
i
];

177 
em±y
.
ãl›t
 =Åelopt;

178 
em±y
.
°©e
 = 0;

179  
em±y
;

180 
	}
}

183 
INLINE
 
	$_£t_rfc1143
(
ã ë_t
 *
ã ë
, 
ãl›t
,

184 
us
, 
him
)

186 
ã ë_rfc1143_t
 *
qtmp
;

187 
i
;

190 
i
 = 0; i !
ã ë
->
q_size
; ++i) {

191 i‡(
ã ë
->
q
[
i
].
ãl›t
 ==Åelopt) {

192 
ã ë
->
q
[
i
].
°©e
 = 
	`Q_MAKE
(
us
,
him
);

203 i‡((
qtmp
 = (
ã ë_rfc1143_t
 *)
	`ªÆloc
(
ã ë
->
q
,

204 (
ã ë_rfc1143_t
Ë* (
ã ë
->
q_size
 + 4))) == 0) {

205 
	`_îr‹
(
ã ë
, 
__LINE__
, 
__func__
, 
TELNET_ENOMEM
, 0,

206 "ªÆloc(ËÁûed: %s", 
	`°ªº‹
(
î∫o
));

209 
	`mem£t
(&
qtmp
[
ã ë
->
q_size
], 0, (
ã ë_rfc1143_t
) * 4);

210 
ã ë
->
q
 = 
qtmp
;

211 
ã ë
->
q
[ã ë->
q_size
].
ãl›t
 =Åelopt;

212 
ã ë
->
q
[ã ë->
q_size
].
°©e
 = 
	`Q_MAKE
(
us
, 
him
);

213 
ã ë
->
q_size
 += 4;

214 
	}
}

217 
INLINE
 
	$_£nd_√gŸüã
(
ã ë_t
 *
ã ë
, 
cmd
,

218 
ãl›t
)

220 
byãs
[3];

221 
byãs
[0] = 
TELNET_IAC
;

222 
byãs
[1] = 
cmd
;

223 
byãs
[2] = 
ãl›t
;

224 
	`_£ndu
(
ã ë
, 
byãs
, 3);

225 
	}
}

228 
	$_√gŸüã
(
ã ë_t
 *
ã ë
, 
ãl›t
)

230 
ã ë_evít_t
 
ev
;

231 
ã ë_rfc1143_t
 
q
;

234 i‡(
ã ë
->
Êags
 & 
TELNET_FLAG_PROXY
) {

235 ()
ã ë
->
°©e
) {

236 
TELNET_STATE_WILL
:

237 
	`NEGOTIATE_EVENT
(
ã ë
, 
TELNET_EV_WILL
, 
ãl›t
);

239 
TELNET_STATE_WONT
:

240 
	`NEGOTIATE_EVENT
(
ã ë
, 
TELNET_EV_WONT
, 
ãl›t
);

242 
TELNET_STATE_DO
:

243 
	`NEGOTIATE_EVENT
(
ã ë
, 
TELNET_EV_DO
, 
ãl›t
);

245 
TELNET_STATE_DONT
:

246 
	`NEGOTIATE_EVENT
(
ã ë
, 
TELNET_EV_DONT
, 
ãl›t
);

253 
q
 = 
	`_gë_rfc1143
(
ã ë
, 
ãl›t
);

256 ()
ã ë
->
°©e
) {

258 
TELNET_STATE_WILL
:

259 
	`Q_HIM
(
q
)) {

260 
Q_NO
:

261 i‡(
	`_check_ãl›t
(
ã ë
, 
ãl›t
, 0)) {

262 
	`_£t_rfc1143
(
ã ë
, 
ãl›t
, 
	`Q_US
(
q
), 
Q_YES
);

263 
	`_£nd_√gŸüã
(
ã ë
, 
TELNET_DO
, 
ãl›t
);

264 
	`NEGOTIATE_EVENT
(
ã ë
, 
TELNET_EV_WILL
, 
ãl›t
);

266 
	`_£nd_√gŸüã
(
ã ë
, 
TELNET_DONT
, 
ãl›t
);

268 
Q_WANTNO
:

269 
	`_£t_rfc1143
(
ã ë
, 
ãl›t
, 
	`Q_US
(
q
), 
Q_NO
);

270 
	`NEGOTIATE_EVENT
(
ã ë
, 
TELNET_EV_WONT
, 
ãl›t
);

271 
	`_îr‹
(
ã ë
, 
__LINE__
, 
__func__
, 
TELNET_EPROTOCOL
, 0,

274 
Q_WANTNO_OP
:

275 
	`_£t_rfc1143
(
ã ë
, 
ãl›t
, 
	`Q_US
(
q
), 
Q_YES
);

276 
	`NEGOTIATE_EVENT
(
ã ë
, 
TELNET_EV_WILL
, 
ãl›t
);

277 
	`_îr‹
(
ã ë
, 
__LINE__
, 
__func__
, 
TELNET_EPROTOCOL
, 0,

280 
Q_WANTYES
:

281 
	`_£t_rfc1143
(
ã ë
, 
ãl›t
, 
	`Q_US
(
q
), 
Q_YES
);

282 
	`NEGOTIATE_EVENT
(
ã ë
, 
TELNET_EV_WILL
, 
ãl›t
);

284 
Q_WANTYES_OP
:

285 
	`_£t_rfc1143
(
ã ë
, 
ãl›t
, 
	`Q_US
(
q
), 
Q_WANTNO
);

286 
	`_£nd_√gŸüã
(
ã ë
, 
TELNET_DONT
, 
ãl›t
);

287 
	`NEGOTIATE_EVENT
(
ã ë
, 
TELNET_EV_WILL
, 
ãl›t
);

293 
TELNET_STATE_WONT
:

294 
	`Q_HIM
(
q
)) {

295 
Q_YES
:

296 
	`_£t_rfc1143
(
ã ë
, 
ãl›t
, 
	`Q_US
(
q
), 
Q_NO
);

297 
	`_£nd_√gŸüã
(
ã ë
, 
TELNET_DONT
, 
ãl›t
);

298 
	`NEGOTIATE_EVENT
(
ã ë
, 
TELNET_EV_WONT
, 
ãl›t
);

300 
Q_WANTNO
:

301 
	`_£t_rfc1143
(
ã ë
, 
ãl›t
, 
	`Q_US
(
q
), 
Q_NO
);

302 
	`NEGOTIATE_EVENT
(
ã ë
, 
TELNET_EV_WONT
, 
ãl›t
);

304 
Q_WANTNO_OP
:

305 
	`_£t_rfc1143
(
ã ë
, 
ãl›t
, 
	`Q_US
(
q
), 
Q_WANTYES
);

306 
	`NEGOTIATE_EVENT
(
ã ë
, 
TELNET_EV_DO
, 
ãl›t
);

308 
Q_WANTYES
:

309 
Q_WANTYES_OP
:

310 
	`_£t_rfc1143
(
ã ë
, 
ãl›t
, 
	`Q_US
(
q
), 
Q_NO
);

316 
TELNET_STATE_DO
:

317 
	`Q_US
(
q
)) {

318 
Q_NO
:

319 i‡(
	`_check_ãl›t
(
ã ë
, 
ãl›t
, 1)) {

320 
	`_£t_rfc1143
(
ã ë
, 
ãl›t
, 
Q_YES
, 
	`Q_HIM
(
q
));

321 
	`_£nd_√gŸüã
(
ã ë
, 
TELNET_WILL
, 
ãl›t
);

322 
	`NEGOTIATE_EVENT
(
ã ë
, 
TELNET_EV_DO
, 
ãl›t
);

324 
	`_£nd_√gŸüã
(
ã ë
, 
TELNET_WONT
, 
ãl›t
);

326 
Q_WANTNO
:

327 
	`_£t_rfc1143
(
ã ë
, 
ãl›t
, 
Q_NO
, 
	`Q_HIM
(
q
));

328 
	`NEGOTIATE_EVENT
(
ã ë
, 
TELNET_EV_DONT
, 
ãl›t
);

329 
	`_îr‹
(
ã ë
, 
__LINE__
, 
__func__
, 
TELNET_EPROTOCOL
, 0,

332 
Q_WANTNO_OP
:

333 
	`_£t_rfc1143
(
ã ë
, 
ãl›t
, 
Q_YES
, 
	`Q_HIM
(
q
));

334 
	`NEGOTIATE_EVENT
(
ã ë
, 
TELNET_EV_DO
, 
ãl›t
);

335 
	`_îr‹
(
ã ë
, 
__LINE__
, 
__func__
, 
TELNET_EPROTOCOL
, 0,

338 
Q_WANTYES
:

339 
	`_£t_rfc1143
(
ã ë
, 
ãl›t
, 
Q_YES
, 
	`Q_HIM
(
q
));

340 
	`NEGOTIATE_EVENT
(
ã ë
, 
TELNET_EV_DO
, 
ãl›t
);

342 
Q_WANTYES_OP
:

343 
	`_£t_rfc1143
(
ã ë
, 
ãl›t
, 
Q_WANTNO
, 
	`Q_HIM
(
q
));

344 
	`_£nd_√gŸüã
(
ã ë
, 
TELNET_WONT
, 
ãl›t
);

345 
	`NEGOTIATE_EVENT
(
ã ë
, 
TELNET_EV_DO
, 
ãl›t
);

351 
TELNET_STATE_DONT
:

352 
	`Q_US
(
q
)) {

353 
Q_YES
:

354 
	`_£t_rfc1143
(
ã ë
, 
ãl›t
, 
Q_NO
, 
	`Q_HIM
(
q
));

355 
	`_£nd_√gŸüã
(
ã ë
, 
TELNET_WONT
, 
ãl›t
);

356 
	`NEGOTIATE_EVENT
(
ã ë
, 
TELNET_EV_DONT
, 
ãl›t
);

358 
Q_WANTNO
:

359 
	`_£t_rfc1143
(
ã ë
, 
ãl›t
, 
Q_NO
, 
	`Q_HIM
(
q
));

360 
	`NEGOTIATE_EVENT
(
ã ë
, 
TELNET_EV_WONT
, 
ãl›t
);

362 
Q_WANTNO_OP
:

363 
	`_£t_rfc1143
(
ã ë
, 
ãl›t
, 
Q_WANTYES
, 
	`Q_HIM
(
q
));

364 
	`_£nd_√gŸüã
(
ã ë
, 
TELNET_WILL
, 
ãl›t
);

365 
	`NEGOTIATE_EVENT
(
ã ë
, 
TELNET_EV_WILL
, 
ãl›t
);

367 
Q_WANTYES
:

368 
Q_WANTYES_OP
:

369 
	`_£t_rfc1143
(
ã ë
, 
ãl›t
, 
Q_NO
, 
	`Q_HIM
(
q
));

374 
	}
}

388 
	$_ívú⁄_ã ë
(
ã ë_t
 *
ã ë
, 
ty≥
,

389 * 
buf„r
, 
size_t
 
size
)

391 
ã ë_evít_t
 
ev
;

392 
ã ë_ívú⁄_t
 *
vÆues
 = 0;

393 *
c
, *
œ°
, *
out
;

394 
size_t
 
ödex
, 
cou¡
;

397 i‡(
size
 == 0) {

402 i‡(()
buf„r
[0] !
TELNET_ENVIRON_SEND
 &&

403 ()
buf„r
[0] !
TELNET_ENVIRON_IS
 &&

404 ()
buf„r
[0] !
TELNET_ENVIRON_INFO
) {

405 
	`_îr‹
(
ã ë
, 
__LINE__
, 
__func__
, 
TELNET_EPROTOCOL
, 0,

406 "ãl›à%d sub√g ha†övÆid comm™d", 
ty≥
);

411 
ev
.
ívú⁄
.
cmd
 = 
buf„r
[0];

414 i‡(
size
 == 1) {

416 
ev
.
ívú⁄
.
vÆues
 = 0;

417 
ev
.
ívú⁄
.
size
 = 0;

420 
ev
.
ty≥
 = 
TELNET_EV_ENVIRON
;

421 
ã ë
->
	`eh
—ñ√t, &
ev
,Åñ√t->
ud
);

427 i‡(()
buf„r
[1] !
TELNET_ENVIRON_VAR
 &&

428 ()
buf„r
[1] !
TELNET_ENVIRON_USERVAR
) {

429 
	`_îr‹
(
ã ë
, 
__LINE__
, 
__func__
, 
TELNET_EPROTOCOL
, 0,

430 "ãl›à%d sub√g missög v¨übÀÅy≥", 
ty≥
);

435 i‡(()
buf„r
[
size
 - 1] =
TELNET_ENVIRON_ESC
) {

436 
	`_îr‹
(
ã ë
, 
__LINE__
, 
__func__
, 
TELNET_EPROTOCOL
, 0,

437 "ãl›à%d sub√gÉnd†wôh ESC", 
ty≥
);

442 
cou¡
 = 0;

443 
c
 = 
buf„r
 + 1; c < buf„∏+ 
size
; ++c) {

444 i‡(*
c
 =
TELNET_ENVIRON_VAR
 || *¯=
TELNET_ENVIRON_USERVAR
) {

445 ++
cou¡
;

446 } i‡(*
c
 =
TELNET_ENVIRON_ESC
) {

448 ++
c
;

453 i‡((
vÆues
 = (
ã ë_ívú⁄_t
 *)
	`ˇŒoc
(
cou¡
,

454 (
ã ë_ívú⁄_t
))) == 0) {

455 
	`_îr‹
(
ã ë
, 
__LINE__
, 
__func__
, 
TELNET_ENOMEM
, 0,

456 "ˇŒoc(ËÁûed: %s", 
	`°ªº‹
(
î∫o
));

461 
out
 = 
buf„r
;

462 
c
 = 
buf„r
 + 1;

463 
ödex
 = 0; index !
cou¡
; ++index) {

465 
vÆues
[
ödex
].
ty≥
 = *
c
++;

469 
œ°
 = 
out
;

470 
c
 < 
buf„r
 + 
size
) {

472 i‡(()*
c
 =
TELNET_ENVIRON_VAR
 ||

473 ()*
c
 =
TELNET_ENVIRON_VALUE
 ||

474 ()*
c
 =
TELNET_ENVIRON_USERVAR
) {

479 i‡(*
c
 =
TELNET_ENVIRON_ESC
) {

480 ++
c
;

483 *
out
++ = *
c
++;

485 *
out
++ = '\0';

488 
vÆues
[
ödex
].
v¨
 = 
œ°
;

489 
vÆues
[
ödex
].
vÆue
 = "";

493 i‡(
c
 < 
buf„r
 + 
size
 && *¯=
TELNET_ENVIRON_VALUE
) {

494 ++
c
;

495 
œ°
 = 
out
;

496 
c
 < 
buf„r
 + 
size
) {

498 i‡(()*
c
 =
TELNET_ENVIRON_VAR
 ||

499 ()*
c
 =
TELNET_ENVIRON_USERVAR
) {

504 i‡(*
c
 =
TELNET_ENVIRON_ESC
) {

505 ++
c
;

508 *
out
++ = *
c
++;

510 *
out
++ = '\0';

513 
vÆues
[
ödex
].
vÆue
 = 
œ°
;

518 
ev
.
ívú⁄
.
vÆues
 = values;

519 
ev
.
ívú⁄
.
size
 = 
cou¡
;

522 
ev
.
ty≥
 = 
TELNET_EV_ENVIRON
;

523 
ã ë
->
	`eh
—ñ√t, &
ev
,Åñ√t->
ud
);

526 
	`‰ì
(
vÆues
);

528 
	}
}

531 
	$_ms•_ã ë
(
ã ë_t
 *
ã ë
, * 
buf„r
, 
size_t
 
size
) {

532 
ã ë_evít_t
 
ev
;

533 
ã ë_ívú⁄_t
 *
vÆues
;

534 *
v¨
 = 0;

535 *
c
, *
œ°
, *
out
;

536 
size_t
 
i
, 
cou¡
;

537 
√xt_ty≥
;

540 i‡(
size
 == 0) {

545 i‡(()
buf„r
[0] !
TELNET_MSSP_VAR
) {

546 
	`_îr‹
(
ã ë
, 
__LINE__
, 
__func__
, 
TELNET_EPROTOCOL
, 0,

552 
cou¡
 = 0, 
i
 = 0; i !
size
; ++i) {

553 i‡(()
buf„r
[
i
] =
TELNET_MSSP_VAL
) {

554 ++
cou¡
;

559 i‡((
vÆues
 = (
ã ë_ívú⁄_t
 *)
	`ˇŒoc
(
cou¡
,

560 (
ã ë_ívú⁄_t
))) == 0) {

561 
	`_îr‹
(
ã ë
, 
__LINE__
, 
__func__
, 
TELNET_ENOMEM
, 0,

562 "ˇŒoc(ËÁûed: %s", 
	`°ªº‹
(
î∫o
));

566 
ev
.
ms•
.
vÆues
 = values;

567 
ev
.
ms•
.
size
 = 
cou¡
;

570 
out
 = 
œ°
 = 
buf„r
;

571 
√xt_ty≥
 = 
buf„r
[0];

572 
i
 = 0, 
c
 = 
buf„r
 + 1; c < buf„∏+ 
size
;) {

574 
c
 < 
buf„r
 + 
size
 && ()*¯!
TELNET_MSSP_VAR
 &&

575 ()*
c
 !
TELNET_MSSP_VAL
) {

576 *
out
++ = *
c
++;

578 *
out
++ = '\0';

581 i‡(
√xt_ty≥
 =
TELNET_MSSP_VAR
) {

582 
v¨
 = 
œ°
;

583 } i‡(
√xt_ty≥
 =
TELNET_MSSP_VAL
 && 
v¨
 != 0) {

584 
vÆues
[
i
].
v¨
 = var;

585 
vÆues
[
i
].
vÆue
 = 
œ°
;

586 ++
i
;

588 
	`_îr‹
(
ã ë
, 
__LINE__
, 
__func__
, 
TELNET_EPROTOCOL
, 0,

590 
	`‰ì
(
vÆues
);

595 
œ°
 = 
out
;

596 
√xt_ty≥
 = *
c
++;

600 
ev
.
ty≥
 = 
TELNET_EV_MSSP
;

601 
ã ë
->
	`eh
—ñ√t, &
ev
,Åñ√t->
ud
);

604 
	`‰ì
(
vÆues
);

607 
	}
}

610 
	$_zmp_ã ë
(
ã ë_t
 *
ã ë
, c⁄° * 
buf„r
, 
size_t
 
size
)

612 
ã ë_evít_t
 
ev
;

613 **
¨gv
;

614 c⁄° *
c
;

615 
size_t
 
i
, 
¨gc
;

618 i‡(
size
 =0 || 
buf„r
[size - 1] != 0) {

619 
	`_îr‹
(
ã ë
, 
__LINE__
, 
__func__
, 
TELNET_EPROTOCOL
, 0,

625 
¨gc
 = 0, 
c
 = 
buf„r
; c !buf„∏+ 
size
; ++argc)

626 
c
 +
	`°æí
(c) + 1;

629 i‡((
¨gv
 = (**)
	`ˇŒoc
(
¨gc
, (*))) == 0) {

630 
	`_îr‹
(
ã ë
, 
__LINE__
, 
__func__
, 
TELNET_ENOMEM
, 0,

631 "ˇŒoc(ËÁûed: %s", 
	`°ªº‹
(
î∫o
));

636 
i
 = 0, 
c
 = 
buf„r
; i !
¨gc
; ++i) {

637 
¨gv
[
i
] = (*)
c
;

638 
c
 +
	`°æí
(c) + 1;

642 
ev
.
ty≥
 = 
TELNET_EV_ZMP
;

643 
ev
.
zmp
.
¨gv
 = (const **)argv;

644 
ev
.
zmp
.
¨gc
 =árgc;

645 
ã ë
->
	`eh
—ñ√t, &
ev
,Åñ√t->
ud
);

648 
	`‰ì
(
¨gv
);

650 
	}
}

653 
	$_ây≥_ã ë
(
ã ë_t
 *
ã ë
, c⁄° * 
buf„r
, 
size_t
 
size
)

655 
ã ë_evít_t
 
ev
;

658 i‡(
size
 == 0) {

659 
	`_îr‹
(
ã ë
, 
__LINE__
, 
__func__
, 
TELNET_EPROTOCOL
, 0,

665 i‡(
buf„r
[0] !
TELNET_TTYPE_IS
 &&

666 
buf„r
[0] !
TELNET_TTYPE_SEND
) {

667 
	`_îr‹
(
ã ë
, 
__LINE__
, 
__func__
, 
TELNET_EPROTOCOL
, 0,

673 i‡(
buf„r
[0] =
TELNET_TTYPE_IS
) {

674 *
«me
;

677 i‡((
«me
 = (*)
	`mÆloc
(
size
)) == 0) {

678 
	`_îr‹
(
ã ë
, 
__LINE__
, 
__func__
, 
TELNET_ENOMEM
, 0,

679 "mÆloc(ËÁûed: %s", 
	`°ªº‹
(
î∫o
));

682 
	`mem˝y
(
«me
, 
buf„r
 + 1, 
size
 - 1);

683 
«me
[
size
 - 1] = '\0';

685 
ev
.
ty≥
 = 
TELNET_EV_TTYPE
;

686 
ev
.
ây≥
.
cmd
 = 
TELNET_TTYPE_IS
;

687 
ev
.
ây≥
.
«me
 =Çame;

688 
ã ë
->
	`eh
—ñ√t, &
ev
,Åñ√t->
ud
);

691 
	`‰ì
(
«me
);

693 
ev
.
ty≥
 = 
TELNET_EV_TTYPE
;

694 
ev
.
ây≥
.
cmd
 = 
TELNET_TTYPE_SEND
;

695 
ev
.
ây≥
.
«me
 = 0;

696 
ã ë
->
	`eh
—ñ√t, &
ev
,Åñ√t->
ud
);

700 
	}
}

705 
	$_sub√gŸüã
(
ã ë_t
 *
ã ë
)

707 
ã ë_evít_t
 
ev
;

710 
ev
.
ty≥
 = 
TELNET_EV_SUBNEGOTIATION
;

711 
ev
.
sub
.
ãl›t
 = 
ã ë
->
sb_ãl›t
;

712 
ev
.
sub
.
buf„r
 = 
ã ë
->buffer;

713 
ev
.
sub
.
size
 = 
ã ë
->
buf„r_pos
;

714 
ã ë
->
	`eh
—ñ√t, &
ev
,Åñ√t->
ud
);

716 
ã ë
->
sb_ãl›t
) {

718 
TELNET_TELOPT_ZMP
:

719  
	`_zmp_ã ë
(
ã ë
,Åñ√t->
buf„r
,Åñ√t->
buf„r_pos
);

720 
TELNET_TELOPT_TTYPE
:

721  
	`_ây≥_ã ë
(
ã ë
,Åñ√t->
buf„r
,Åñ√t->
buf„r_pos
);

722 
TELNET_TELOPT_ENVIRON
:

723 
TELNET_TELOPT_NEW_ENVIRON
:

724  
	`_ívú⁄_ã ë
(
ã ë
,Åñ√t->
sb_ãl›t
,Åñ√t->
buf„r
,

725 
ã ë
->
buf„r_pos
);

726 
TELNET_TELOPT_MSSP
:

727  
	`_ms•_ã ë
(
ã ë
,Åñ√t->
buf„r
,Åñ√t->
buf„r_pos
);

731 
	}
}

734 
ã ë_t
 *
	$ã ë_öô
(c⁄° 
ã ë_ãl›t_t
 *
ãl›ts
,

735 
ã ë_evít_h™dÀr_t
 
eh
, 
Êags
, *
u£r_d©a
)

738 
ã ë_t
 *
ã ë
 = (ã ë_t*)
	`ˇŒoc
(1, (telnet_t));

739 i‡(
ã ë
 == 0)

743 
ã ë
->
ud
 = 
u£r_d©a
;

744 
ã ë
->
ãl›ts
 =Åelopts;

745 
ã ë
->
eh
 =Éh;

746 
ã ë
->
Êags
 = flags;

748  
ã ë
;

749 
	}
}

752 
	$ã ë_‰ì
(
ã ë_t
 *
ã ë
)

755 i‡(
ã ë
->
buf„r
 != 0) {

756 
	`‰ì
(
ã ë
->
buf„r
);

757 
ã ë
->
buf„r
 = 0;

758 
ã ë
->
buf„r_size
 = 0;

759 
ã ë
->
buf„r_pos
 = 0;

763 i‡(
ã ë
->
q
) {

764 
	`‰ì
(
ã ë
->
q
);

765 
ã ë
->
q
 = 0;

766 
ã ë
->
q_size
 = 0;

770 
	`‰ì
(
ã ë
);

771 
	}
}

774 
ã ë_îr‹_t
 
	$_buf„r_byã
(
ã ë_t
 *
ã ë
,

775 
byã
)

777 *
√w_buf„r
;

778 
size_t
 
i
;

781 i‡(
ã ë
->
buf„r_pos
 =ã ë->
buf„r_size
) {

783 
i
 = 0; i !
_buf„r_sizes_cou¡
; ++i) {

784 i‡(
_buf„r_sizes
[
i
] =
ã ë
->
buf„r_size
) {

790 i‡(
i
 >
_buf„r_sizes_cou¡
 - 1) {

791 
	`_îr‹
(
ã ë
, 
__LINE__
, 
__func__
, 
TELNET_EOVERFLOW
, 0,

793  
TELNET_EOVERFLOW
;

797 
√w_buf„r
 = (*)
	`ªÆloc
(
ã ë
->
buf„r
, 
_buf„r_sizes
[
i
 + 1]);

798 i‡(
√w_buf„r
 == 0) {

799 
	`_îr‹
(
ã ë
, 
__LINE__
, 
__func__
, 
TELNET_ENOMEM
, 0,

801  
TELNET_ENOMEM
;

804 
ã ë
->
buf„r
 = 
√w_buf„r
;

805 
ã ë
->
buf„r_size
 = 
_buf„r_sizes
[
i
 + 1];

809 
ã ë
->
buf„r
[ã ë->
buf„r_pos
++] = 
byã
;

810  
TELNET_EOK
;

811 
	}
}

813 
	$_¥o˚ss
(
ã ë_t
 *
ã ë
, c⁄° *
buf„r
, 
size_t
 
size
)

815 
ã ë_evít_t
 
ev
;

816 
byã
;

817 
size_t
 
i
, 
°¨t
;

818 
i
 = 
°¨t
 = 0; i !
size
; ++i) {

819 
byã
 = 
buf„r
[
i
];

820 
ã ë
->
°©e
) {

822 
TELNET_STATE_DATA
:

825 i‡(
byã
 =
TELNET_IAC
) {

826 i‡(
i
 !
°¨t
) {

827 
ev
.
ty≥
 = 
TELNET_EV_DATA
;

828 
ev
.
d©a
.
buf„r
 = buf„∏+ 
°¨t
;

829 
ev
.
d©a
.
size
 = 
i
 - 
°¨t
;

830 
ã ë
->
	`eh
—ñ√t, &
ev
,Åñ√t->
ud
);

832 
ã ë
->
°©e
 = 
TELNET_STATE_IAC
;

837 
TELNET_STATE_IAC
:

838 
byã
) {

840 
TELNET_SB
:

841 
ã ë
->
°©e
 = 
TELNET_STATE_SB
;

844 
TELNET_WILL
:

845 
ã ë
->
°©e
 = 
TELNET_STATE_WILL
;

847 
TELNET_WONT
:

848 
ã ë
->
°©e
 = 
TELNET_STATE_WONT
;

850 
TELNET_DO
:

851 
ã ë
->
°©e
 = 
TELNET_STATE_DO
;

853 
TELNET_DONT
:

854 
ã ë
->
°©e
 = 
TELNET_STATE_DONT
;

857 
TELNET_IAC
:

859 
ev
.
ty≥
 = 
TELNET_EV_DATA
;

860 
ev
.
d©a
.
buf„r
 = (*)&
byã
;

861 
ev
.
d©a
.
size
 = 1;

862 
ã ë
->
	`eh
—ñ√t, &
ev
,Åñ√t->
ud
);

865 
°¨t
 = 
i
 + 1;

866 
ã ë
->
°©e
 = 
TELNET_STATE_DATA
;

871 
ev
.
ty≥
 = 
TELNET_EV_IAC
;

872 
ev
.
üc
.
cmd
 = 
byã
;

873 
ã ë
->
	`eh
—ñ√t, &
ev
,Åñ√t->
ud
);

876 
°¨t
 = 
i
 + 1;

877 
ã ë
->
°©e
 = 
TELNET_STATE_DATA
;

882 
TELNET_STATE_WILL
:

883 
TELNET_STATE_WONT
:

884 
TELNET_STATE_DO
:

885 
TELNET_STATE_DONT
:

886 
	`_√gŸüã
(
ã ë
, 
byã
);

887 
°¨t
 = 
i
 + 1;

888 
ã ë
->
°©e
 = 
TELNET_STATE_DATA
;

892 
TELNET_STATE_SB
:

893 
ã ë
->
sb_ãl›t
 = 
byã
;

894 
ã ë
->
buf„r_pos
 = 0;

895 
ã ë
->
°©e
 = 
TELNET_STATE_SB_DATA
;

899 
TELNET_STATE_SB_DATA
:

901 i‡(
byã
 =
TELNET_IAC
) {

902 
ã ë
->
°©e
 = 
TELNET_STATE_SB_DATA_IAC
;

903 } i‡(
ã ë
->
sb_ãl›t
 =
TELNET_TELOPT_COMPRESS
 && 
byã
 =
TELNET_WILL
) {

910 
°¨t
 = 
i
 + 2;

911 
ã ë
->
°©e
 = 
TELNET_STATE_DATA
;

913 } i‡(
	`_buf„r_byã
(
ã ë
, 
byã
Ë!
TELNET_EOK
) {

914 
°¨t
 = 
i
 + 1;

915 
ã ë
->
°©e
 = 
TELNET_STATE_DATA
;

920 
TELNET_STATE_SB_DATA_IAC
:

921 
byã
) {

923 
TELNET_SE
:

925 
°¨t
 = 
i
 + 1;

926 
ã ë
->
°©e
 = 
TELNET_STATE_DATA
;

929 i‡(
	`_sub√gŸüã
(
ã ë
) != 0) {

936 
	`ã ë_ªcv
(
ã ë
, &
buf„r
[
°¨t
], 
size
 - start);

941 
TELNET_IAC
:

943 i‡(
	`_buf„r_byã
(
ã ë
, 
TELNET_IAC
) !=

944 
TELNET_EOK
) {

945 
°¨t
 = 
i
 + 1;

946 
ã ë
->
°©e
 = 
TELNET_STATE_DATA
;

948 
ã ë
->
°©e
 = 
TELNET_STATE_SB_DATA
;

956 
	`_îr‹
(
ã ë
, 
__LINE__
, 
__func__
, 
TELNET_EPROTOCOL
, 0,

958 
byã
);

961 
°¨t
 = 
i
 + 1;

962 
ã ë
->
°©e
 = 
TELNET_STATE_IAC
;

967 i‡(
	`_sub√gŸüã
(
ã ë
) != 0) {

968 
	`ã ë_ªcv
(
ã ë
, &
buf„r
[
°¨t
], 
size
 - start);

975 
	`_¥o˚ss
(
ã ë
, (*)&
byã
, 1);

984 i‡(
ã ë
->
°©e
 =
TELNET_STATE_DATA
 && 
i
 !
°¨t
) {

985 
ev
.
ty≥
 = 
TELNET_EV_DATA
;

986 
ev
.
d©a
.
buf„r
 = buf„∏+ 
°¨t
;

987 
ev
.
d©a
.
size
 = 
i
 - 
°¨t
;

988 
ã ë
->
	`eh
—ñ√t, &
ev
,Åñ√t->
ud
);

990 
	}
}

993 
	$ã ë_ªcv
(
ã ë_t
 *
ã ë
, c⁄° *
buf„r
,

994 
size_t
 
size
)

996 
	`_¥o˚ss
(
ã ë
, 
buf„r
, 
size
);

997 
	}
}

1000 
	$ã ë_üc
(
ã ë_t
 *
ã ë
, 
cmd
)

1002 
byãs
[2];

1003 
byãs
[0] = 
TELNET_IAC
;

1004 
byãs
[1] = 
cmd
;

1005 
	`_£ndu
(
ã ë
, 
byãs
, 2);

1006 
	}
}

1009 
	$ã ë_√gŸüã
(
ã ë_t
 *
ã ë
, 
cmd
,

1010 
ãl›t
)

1012 
ã ë_rfc1143_t
 
q
;

1015 i‡(
ã ë
->
Êags
 & 
TELNET_FLAG_PROXY
) {

1016 
byãs
[3];

1017 
byãs
[0] = 
TELNET_IAC
;

1018 
byãs
[1] = 
cmd
;

1019 
byãs
[2] = 
ãl›t
;

1020 
	`_£ndu
(
ã ë
, 
byãs
, 3);

1025 
q
 = 
	`_gë_rfc1143
(
ã ë
, 
ãl›t
);

1027 
cmd
) {

1029 
TELNET_WILL
:

1030 
	`Q_US
(
q
)) {

1031 
Q_NO
:

1032 
	`_£t_rfc1143
(
ã ë
, 
ãl›t
, 
Q_WANTYES
, 
	`Q_HIM
(
q
));

1033 
	`_£nd_√gŸüã
(
ã ë
, 
TELNET_WILL
, 
ãl›t
);

1035 
Q_WANTNO
:

1036 
	`_£t_rfc1143
(
ã ë
, 
ãl›t
, 
Q_WANTNO_OP
, 
	`Q_HIM
(
q
));

1038 
Q_WANTYES_OP
:

1039 
	`_£t_rfc1143
(
ã ë
, 
ãl›t
, 
Q_WANTYES
, 
	`Q_HIM
(
q
));

1045 
TELNET_WONT
:

1046 
	`Q_US
(
q
)) {

1047 
Q_YES
:

1048 
	`_£t_rfc1143
(
ã ë
, 
ãl›t
, 
Q_WANTNO
, 
	`Q_HIM
(
q
));

1049 
	`_£nd_√gŸüã
(
ã ë
, 
TELNET_WONT
, 
ãl›t
);

1051 
Q_WANTYES
:

1052 
	`_£t_rfc1143
(
ã ë
, 
ãl›t
, 
Q_WANTYES_OP
, 
	`Q_HIM
(
q
));

1054 
Q_WANTNO_OP
:

1055 
	`_£t_rfc1143
(
ã ë
, 
ãl›t
, 
Q_WANTNO
, 
	`Q_HIM
(
q
));

1061 
TELNET_DO
:

1062 
	`Q_HIM
(
q
)) {

1063 
Q_NO
:

1064 
	`_£t_rfc1143
(
ã ë
, 
ãl›t
, 
	`Q_US
(
q
), 
Q_WANTYES
);

1065 
	`_£nd_√gŸüã
(
ã ë
, 
TELNET_DO
, 
ãl›t
);

1067 
Q_WANTNO
:

1068 
	`_£t_rfc1143
(
ã ë
, 
ãl›t
, 
	`Q_US
(
q
), 
Q_WANTNO_OP
);

1070 
Q_WANTYES_OP
:

1071 
	`_£t_rfc1143
(
ã ë
, 
ãl›t
, 
	`Q_US
(
q
), 
Q_WANTYES
);

1077 
TELNET_DONT
:

1078 
	`Q_HIM
(
q
)) {

1079 
Q_YES
:

1080 
	`_£t_rfc1143
(
ã ë
, 
ãl›t
, 
	`Q_US
(
q
), 
Q_WANTNO
);

1081 
	`_£nd_√gŸüã
(
ã ë
, 
TELNET_DONT
, 
ãl›t
);

1083 
Q_WANTYES
:

1084 
	`_£t_rfc1143
(
ã ë
, 
ãl›t
, 
	`Q_US
(
q
), 
Q_WANTYES_OP
);

1086 
Q_WANTNO_OP
:

1087 
	`_£t_rfc1143
(
ã ë
, 
ãl›t
, 
	`Q_US
(
q
), 
Q_WANTNO
);

1092 
	}
}

1095 
	$ã ë_£nd
(
ã ë_t
 *
ã ë
, c⁄° *
buf„r
,

1096 
size_t
 
size
)

1098 
size_t
 
i
, 
l
;

1100 
l
 = 
i
 = 0; i !
size
; ++i) {

1102 i‡(
buf„r
[
i
] =()
TELNET_IAC
) {

1104 i‡(
i
 !
l
) {

1105 
	`_£nd
(
ã ë
, 
buf„r
 + 
l
, 
i
 -Ü);

1107 
l
 = 
i
 + 1;

1110 
	`ã ë_üc
(
ã ë
, 
TELNET_IAC
);

1115 i‡(
i
 !
l
) {

1116 
	`_£nd
(
ã ë
, 
buf„r
 + 
l
, 
i
 -Ü);

1118 
	}
}

1121 
	$ã ë_begö_sb
(
ã ë_t
 *
ã ë
, 
ãl›t
)

1123 
sb
[3];

1124 
sb
[0] = 
TELNET_IAC
;

1125 
sb
[1] = 
TELNET_SB
;

1126 
sb
[2] = 
ãl›t
;

1127 
	`_£ndu
(
ã ë
, 
sb
, 3);

1128 
	}
}

1132 
	$ã ë_sub√gŸüti⁄
(
ã ë_t
 *
ã ë
, 
ãl›t
,

1133 c⁄° *
buf„r
, 
size_t
 
size
)

1135 
byãs
[5];

1136 
byãs
[0] = 
TELNET_IAC
;

1137 
byãs
[1] = 
TELNET_SB
;

1138 
byãs
[2] = 
ãl›t
;

1139 
byãs
[3] = 
TELNET_IAC
;

1140 
byãs
[4] = 
TELNET_SE
;

1142 
	`_£ndu
(
ã ë
, 
byãs
, 3);

1143 
	`ã ë_£nd
(
ã ë
, 
buf„r
, 
size
);

1144 
	`_£ndu
(
ã ë
, 
byãs
 + 3, 2);

1146 
	}
}

1148 
	$ã ë_begö_com¥ess2
(
ã ë_t
 *
ã ë
)

1151 
	}
}

1154 
	$ã ë_v¥ötf
(
ã ë_t
 *
ã ë
, c⁄° *
fmt
, 
va_li°
 
va
)

1156 c⁄° 
CRLF
[] = { '\r', '\n' };

1157 c⁄° 
CRNUL
[] = { '\r', '\0' };

1158 
buf„r
[1024];

1159 *
ouçut
 = 
buf„r
;

1160 
rs
, 
i
, 
l
;

1163 
rs
 = 
	`v¢¥ötf
(
buf„r
, (buf„r), 
fmt
, 
va
);

1164 i‡(
rs
 >(
buf„r
)) {

1165 
ouçut
 = (*)
	`mÆloc
(
rs
 + 1);

1166 i‡(
ouçut
 == 0) {

1167 
	`_îr‹
(
ã ë
, 
__LINE__
, 
__func__
, 
TELNET_ENOMEM
, 0,

1168 "mÆloc(ËÁûed: %s", 
	`°ªº‹
(
î∫o
));

1171 
rs
 = 
	`v¢¥ötf
(
ouçut
,Ñ†+ 1, 
fmt
, 
va
);

1175 
l
 = 
i
 = 0; i !
rs
; ++i) {

1177 i‡(
ouçut
[
i
] =()
TELNET_IAC
 || output[i] == '\r' ||

1178 
ouçut
[
i
] == '\n') {

1180 i‡(
i
 !
l
)

1181 
	`_£nd
(
ã ë
, 
ouçut
 + 
l
, 
i
 -Ü);

1182 
l
 = 
i
 + 1;

1185 i‡(
ouçut
[
i
] =()
TELNET_IAC
)

1186 
	`ã ë_üc
(
ã ë
, 
TELNET_IAC
);

1188 i‡(
ouçut
[
i
] == '\r')

1189 
	`_£nd
(
ã ë
, 
CRNUL
, 2);

1191 i‡(
ouçut
[
i
] == '\n')

1192 
	`_£nd
(
ã ë
, 
CRLF
, 2);

1197 i‡(
i
 !
l
) {

1198 
	`_£nd
(
ã ë
, 
ouçut
 + 
l
, 
i
 -Ü);

1202 i‡(
ouçut
 !
buf„r
) {

1203 
	`‰ì
(
ouçut
);

1206  
rs
;

1207 
	}
}

1210 
	$ã ë_¥ötf
(
ã ë_t
 *
ã ë
, c⁄° *
fmt
, ...)

1212 
va_li°
 
va
;

1213 
rs
;

1215 
	`va_°¨t
(
va
, 
fmt
);

1216 
rs
 = 
	`ã ë_v¥ötf
(
ã ë
, 
fmt
, 
va
);

1217 
	`va_íd
(
va
);

1219  
rs
;

1220 
	}
}

1223 
	$ã ë_øw_v¥ötf
(
ã ë_t
 *
ã ë
, c⁄° *
fmt
, 
va_li°
 
va
)

1225 
buf„r
[1024];

1226 *
ouçut
 = 
buf„r
;

1227 
rs
;

1230 
rs
 = 
	`v¢¥ötf
(
buf„r
, (buf„r), 
fmt
, 
va
);

1231 i‡(
rs
 >(
buf„r
)) {

1232 
ouçut
 = (*)
	`mÆloc
(
rs
 + 1);

1233 i‡(
ouçut
 == 0) {

1234 
	`_îr‹
(
ã ë
, 
__LINE__
, 
__func__
, 
TELNET_ENOMEM
, 0,

1235 "mÆloc(ËÁûed: %s", 
	`°ªº‹
(
î∫o
));

1238 
rs
 = 
	`v¢¥ötf
(
ouçut
,Ñ†+ 1, 
fmt
, 
va
);

1242 
	`ã ë_£nd
(
ã ë
, 
ouçut
, 
rs
);

1245 i‡(
ouçut
 !
buf„r
) {

1246 
	`‰ì
(
ouçut
);

1249  
rs
;

1250 
	}
}

1253 
	$ã ë_øw_¥ötf
(
ã ë_t
 *
ã ë
, c⁄° *
fmt
, ...)

1255 
va_li°
 
va
;

1256 
rs
;

1258 
	`va_°¨t
(
va
, 
fmt
);

1259 
rs
 = 
	`ã ë_øw_v¥ötf
(
ã ë
, 
fmt
, 
va
);

1260 
	`va_íd
(
va
);

1262  
rs
;

1263 
	}
}

1266 
	$ã ë_begö_√wívú⁄
(
ã ë_t
 *
ã ë
, 
cmd
)

1268 
	`ã ë_begö_sb
(
ã ë
, 
TELNET_TELOPT_NEW_ENVIRON
);

1269 
	`ã ë_£nd
(
ã ë
, (c⁄° *)&
cmd
, 1);

1270 
	}
}

1273 
	$ã ë_√wívú⁄_vÆue
(
ã ë_t
 *
ã ë
, 
ty≥
,

1274 c⁄° *
°rög
)

1276 
	`ã ë_£nd
(
ã ë
, (c⁄° *)&
ty≥
, 1);

1278 i‡(
°rög
 != 0) {

1279 
	`ã ë_£nd
(
ã ë
, 
°rög
, 
	`°æí
(string));

1281 
	}
}

1284 
	$ã ë_ây≥_£nd
(
ã ë_t
 *
ã ë
)

1286 c⁄° 
SEND
[] = { 
TELNET_IAC
, 
TELNET_SB
,

1287 
TELNET_TELOPT_TTYPE
, 
TELNET_TTYPE_SEND
, 
TELNET_IAC
, 
TELNET_SE
 };

1288 
	`_£ndu
(
ã ë
, 
SEND
, (SEND));

1289 
	}
}

1292 
	$ã ë_ây≥_is
(
ã ë_t
 *
ã ë
, c⁄° * 
ây≥
)

1294 c⁄° 
IS
[] = { 
TELNET_IAC
, 
TELNET_SB
,

1295 
TELNET_TELOPT_TTYPE
, 
TELNET_TTYPE_IS
 };

1296 
	`_£ndu
(
ã ë
, 
IS
, (IS));

1297 
	`_£nd
(
ã ë
, 
ây≥
, 
	`°æí
(ttype));

1298 
	`ã ë_föish_sb
(
ã ë
);

1299 
	}
}

1302 
	$ã ë_£nd_zmp
(
ã ë_t
 *
ã ë
, 
size_t
 
¨gc
, c⁄° **
¨gv
)

1304 
size_t
 
i
;

1307 
	`ã ë_begö_zmp
(
ã ë
, 
¨gv
[0]);

1310 
i
 = 1; i !
¨gc
; ++i)

1311 
	`ã ë_zmp_¨g
(
ã ë
, 
¨gv
[
i
]);

1314 
	`ã ë_föish_zmp
(
ã ë
);

1315 
	}
}

1318 
	$ã ë_£nd_vzmpv
(
ã ë_t
 *
ã ë
, 
va_li°
 
va
)

1320 c⁄° * 
¨g
;

1323 
	`ã ë_begö_sb
(
ã ë
, 
TELNET_TELOPT_ZMP
);

1326 (
¨g
 = 
	`va_¨g
(
va
, const *)) != 0)

1327 
	`ã ë_zmp_¨g
(
ã ë
, 
¨g
);

1330 
	`ã ë_föish_zmp
(
ã ë
);

1331 
	}
}

1334 
	$ã ë_£nd_zmpv
(
ã ë_t
 *
ã ë
, ...)

1336 
va_li°
 
va
;

1338 
	`va_°¨t
(
va
, 
ã ë
);

1339 
	`ã ë_£nd_vzmpv
(
ã ë
, 
va
);

1340 
	`va_íd
(
va
);

1341 
	}
}

1344 
	$ã ë_begö_zmp
(
ã ë_t
 *
ã ë
, c⁄° *
cmd
)

1346 
	`ã ë_begö_sb
(
ã ë
, 
TELNET_TELOPT_ZMP
);

1347 
	`ã ë_zmp_¨g
(
ã ë
, 
cmd
);

1348 
	}
}

1351 
	$ã ë_zmp_¨g
(
ã ë_t
 *
ã ë
, c⁄° * 
¨g
)

1353 
	`ã ë_£nd
(
ã ë
, 
¨g
, 
	`°æí
(arg) + 1);

1354 
	}
}

	@telnet.h

1 #i‡!
deföed
(
TELNET_H
)

2 
	#TELNET_H
 1

	)

5 
	~<°d¨g.h
>

8 #i‡
deföed
(
__˝lu•lus
)

13 #i‡
__GNUC__


14 
	#TELNET_GNU_PRINTF
(
f
,
a
Ë
	`__©åibuã__
((
	`f‹m©
(
¥ötf
, f,á))Ë

	)

15 
	#TELNET_GNU_SENTINEL
 
	`__©åibuã__
((
£¡öñ
)Ë

	)

17 
	#TELNET_GNU_PRINTF
(
f
,
a
Ë

	)

18 
	#TELNET_GNU_SENTINEL


	)

22 
ã ë_t
 
	tã ë_t
;

25 
ã ë_evít_t
 
	tã ë_evít_t
;

28 
ã ë_ãl›t_t
 
	tã ë_ãl›t_t
;

33 
	#TELNET_IAC
 255

	)

34 
	#TELNET_DONT
 254

	)

35 
	#TELNET_DO
 253

	)

36 
	#TELNET_WONT
 252

	)

37 
	#TELNET_WILL
 251

	)

38 
	#TELNET_SB
 250

	)

39 
	#TELNET_GA
 249

	)

40 
	#TELNET_EL
 248

	)

41 
	#TELNET_EC
 247

	)

42 
	#TELNET_AYT
 246

	)

43 
	#TELNET_AO
 245

	)

44 
	#TELNET_IP
 244

	)

45 
	#TELNET_BREAK
 243

	)

46 
	#TELNET_DM
 242

	)

47 
	#TELNET_NOP
 241

	)

48 
	#TELNET_SE
 240

	)

49 
	#TELNET_EOR
 239

	)

50 
	#TELNET_ABORT
 238

	)

51 
	#TELNET_SUSP
 237

	)

52 
	#TELNET_EOF
 236

	)

58 
	#TELNET_TELOPT_BINARY
 0

	)

59 
	#TELNET_TELOPT_ECHO
 1

	)

60 
	#TELNET_TELOPT_RCP
 2

	)

61 
	#TELNET_TELOPT_SGA
 3

	)

62 
	#TELNET_TELOPT_NAMS
 4

	)

63 
	#TELNET_TELOPT_STATUS
 5

	)

64 
	#TELNET_TELOPT_TM
 6

	)

65 
	#TELNET_TELOPT_RCTE
 7

	)

66 
	#TELNET_TELOPT_NAOL
 8

	)

67 
	#TELNET_TELOPT_NAOP
 9

	)

68 
	#TELNET_TELOPT_NAOCRD
 10

	)

69 
	#TELNET_TELOPT_NAOHTS
 11

	)

70 
	#TELNET_TELOPT_NAOHTD
 12

	)

71 
	#TELNET_TELOPT_NAOFFD
 13

	)

72 
	#TELNET_TELOPT_NAOVTS
 14

	)

73 
	#TELNET_TELOPT_NAOVTD
 15

	)

74 
	#TELNET_TELOPT_NAOLFD
 16

	)

75 
	#TELNET_TELOPT_XASCII
 17

	)

76 
	#TELNET_TELOPT_LOGOUT
 18

	)

77 
	#TELNET_TELOPT_BM
 19

	)

78 
	#TELNET_TELOPT_DET
 20

	)

79 
	#TELNET_TELOPT_SUPDUP
 21

	)

80 
	#TELNET_TELOPT_SUPDUPOUTPUT
 22

	)

81 
	#TELNET_TELOPT_SNDLOC
 23

	)

82 
	#TELNET_TELOPT_TTYPE
 24

	)

83 
	#TELNET_TELOPT_EOR
 25

	)

84 
	#TELNET_TELOPT_TUID
 26

	)

85 
	#TELNET_TELOPT_OUTMRK
 27

	)

86 
	#TELNET_TELOPT_TTYLOC
 28

	)

87 
	#TELNET_TELOPT_3270REGIME
 29

	)

88 
	#TELNET_TELOPT_X3PAD
 30

	)

89 
	#TELNET_TELOPT_NAWS
 31

	)

90 
	#TELNET_TELOPT_TSPEED
 32

	)

91 
	#TELNET_TELOPT_LFLOW
 33

	)

92 
	#TELNET_TELOPT_LINEMODE
 34

	)

93 
	#TELNET_TELOPT_XDISPLOC
 35

	)

94 
	#TELNET_TELOPT_ENVIRON
 36

	)

95 
	#TELNET_TELOPT_AUTHENTICATION
 37

	)

96 
	#TELNET_TELOPT_ENCRYPT
 38

	)

97 
	#TELNET_TELOPT_NEW_ENVIRON
 39

	)

98 
	#TELNET_TELOPT_MSSP
 70

	)

99 
	#TELNET_TELOPT_COMPRESS
 85

	)

100 
	#TELNET_TELOPT_COMPRESS2
 86

	)

101 
	#TELNET_TELOPT_ZMP
 93

	)

102 
	#TELNET_TELOPT_EXOPL
 255

	)

104 
	#TELNET_TELOPT_MCCP2
 86

	)

110 
	#TELNET_TTYPE_IS
 0

	)

111 
	#TELNET_TTYPE_SEND
 1

	)

117 
	#TELNET_ENVIRON_IS
 0

	)

118 
	#TELNET_ENVIRON_SEND
 1

	)

119 
	#TELNET_ENVIRON_INFO
 2

	)

120 
	#TELNET_ENVIRON_VAR
 0

	)

121 
	#TELNET_ENVIRON_VALUE
 1

	)

122 
	#TELNET_ENVIRON_ESC
 2

	)

123 
	#TELNET_ENVIRON_USERVAR
 3

	)

129 
	#TELNET_MSSP_VAR
 1

	)

130 
	#TELNET_MSSP_VAL
 2

	)

136 
	#TELNET_FLAG_PROXY
 (1<<0)

	)

138 
	#TELNET_PFLAG_DEFLATE
 (1<<7)

	)

144 
	eã ë_îr‹_t
 {

145 
TELNET_EOK
 = 0,

146 
TELNET_EBADVAL
,

147 
TELNET_ENOMEM
,

148 
TELNET_EOVERFLOW
,

149 
TELNET_EPROTOCOL
,

150 
TELNET_ECOMPRESS


152 
ã ë_îr‹_t
 
	tã ë_îr‹_t
;

157 
	eã ë_evít_ty≥_t
 {

158 
TELNET_EV_DATA
 = 0,

159 
TELNET_EV_SEND
,

160 
TELNET_EV_IAC
,

161 
TELNET_EV_WILL
,

162 
TELNET_EV_WONT
,

163 
TELNET_EV_DO
,

164 
TELNET_EV_DONT
,

165 
TELNET_EV_SUBNEGOTIATION
,

166 
TELNET_EV_COMPRESS
,

167 
TELNET_EV_ZMP
,

168 
TELNET_EV_TTYPE
,

169 
TELNET_EV_ENVIRON
,

170 
TELNET_EV_MSSP
,

171 
TELNET_EV_WARNING
,

172 
TELNET_EV_ERROR


174 
ã ë_evít_ty≥_t
 
	tã ë_evít_ty≥_t
;

179 
	sã ë_ívú⁄_t
 {

180 
ty≥
;

181 *
v¨
;

182 *
vÆue
;

188 
	uã ë_evít_t
 {

197 
ã ë_evít_ty≥_t
 
ty≥
;

202 
	sd©a_t
 {

203 
ã ë_evít_ty≥_t
 
_ty≥
;

204 c⁄° *
buf„r
;

205 
size_t
 
size
;

206 } 
d©a
;

211 
	sîr‹_t
 {

212 
ã ë_evít_ty≥_t
 
_ty≥
;

213 c⁄° *
fûe
;

214 c⁄° *
func
;

215 c⁄° *
msg
;

216 
löe
;

217 
ã ë_îr‹_t
 
îrcode
;

218 } 
îr‹
;

223 
	süc_t
 {

224 
ã ë_evít_ty≥_t
 
_ty≥
;

225 
cmd
;

226 } 
üc
;

231 
	s√gŸüã_t
 {

232 
ã ë_evít_ty≥_t
 
_ty≥
;

233 
ãl›t
;

234 } 
√g
;

239 
	ssub√gŸüã_t
 {

240 
ã ë_evít_ty≥_t
 
_ty≥
;

241 c⁄° *
buf„r
;

242 
size_t
 
size
;

243 
ãl›t
;

244 } 
sub
;

249 
	szmp_t
 {

250 
ã ë_evít_ty≥_t
 
_ty≥
;

251 c⁄° **
¨gv
;

252 
size_t
 
¨gc
;

253 } 
zmp
;

258 
	sây≥_t
 {

259 
ã ë_evít_ty≥_t
 
_ty≥
;

260 
cmd
;

261 c⁄° * 
«me
;

262 } 
ây≥
;

267 
	scom¥ess_t
 {

268 
ã ë_evít_ty≥_t
 
_ty≥
;

269 
°©e
;

271 } 
com¥ess
;

276 
	sívú⁄_t
 {

277 
ã ë_evít_ty≥_t
 
_ty≥
;

278 c⁄° 
ã ë_ívú⁄_t
 *
vÆues
;

279 
size_t
 
size
;

280 
cmd
;

281 } 
ívú⁄
;

286 
	sms•_t
 {

287 
ã ë_evít_ty≥_t
 
_ty≥
;

288 c⁄° 
ã ë_ívú⁄_t
 *
vÆues
;

289 
size_t
 
size
;

290 } 
ms•
;

305 (*
ã ë_evít_h™dÀr_t
)(
	tã ë_t
 *
	tã ë
,

306 
	tã ë_evít_t
 *
	tevít
, *
	tu£r_d©a
);

311 
	sã ë_ãl›t_t
 {

312 
ãl›t
;

313 
us
;

314 
him
;

320 
ã ë_t
;

335 
ã ë_t
* 
ã ë_öô
(c⁄° 
ã ë_ãl›t_t
 *
ãl›ts
,

336 
ã ë_evít_h™dÀr_t
 
eh
, 
Êags
, *
u£r_d©a
);

347 
ã ë_‰ì
(
ã ë_t
 *
ã ë
);

361 
ã ë_ªcv
(
ã ë_t
 *
ã ë
, c⁄° *
buf„r
,

362 
size_t
 
size
);

370 
ã ë_üc
(
ã ë_t
 *
ã ë
, 
cmd
);

383 
ã ë_√gŸüã
(
ã ë_t
 *
ã ë
, 
cmd
,

384 
›t
);

393 
ã ë_£nd
(
ã ë_t
 *
ã ë
,

394 c⁄° *
buf„r
, 
size_t
 
size
);

406 
ã ë_begö_sb
(
ã ë_t
 *
ã ë
,

407 
ãl›t
);

417 
	#ã ë_föish_sb
(
ã ë
Ë
	`ã ë_üc
(—ñ√t), 
TELNET_SE
)

	)

432 
ã ë_sub√gŸüti⁄
(
ã ë_t
 *
ã ë
, 
ãl›t
,

433 c⁄° *
buf„r
, 
size_t
 
size
);

447 
ã ë_begö_com¥ess2
(
ã ë_t
 *
ã ë
);

463 
ã ë_¥ötf
(
ã ë_t
 *
ã ë
, c⁄° *
fmt
, ...)

464 
TELNET_GNU_PRINTF
(2, 3);

471 
ã ë_v¥ötf
(
ã ë_t
 *
ã ë
, c⁄° *
fmt
, 
va_li°
 
va
);

484 
ã ë_øw_¥ötf
(
ã ë_t
 *
ã ë
, c⁄° *
fmt
, ...)

485 
TELNET_GNU_PRINTF
(2, 3);

492 
ã ë_øw_v¥ötf
(
ã ë_t
 *
ã ë
, c⁄° *
fmt
, 
va_li°
 
va
);

507 
ã ë_begö_√wívú⁄
(
ã ë_t
 *
ã ë
, 
ty≥
);

520 
ã ë_√wívú⁄_vÆue
(
ã ë_t
* 
ã ë
, 
ty≥
,

521 c⁄° *
°rög
);

531 
	#ã ë_föish_√wívú⁄
(
ã ë
Ë
	`ã ë_föish_sb
(—ñ√t))

	)

540 
ã ë_ây≥_£nd
(
ã ë_t
 *
ã ë
);

572 
ã ë_ây≥_is
(
ã ë_t
 *
ã ë
, c⁄° * 
ây≥
);

581 
ã ë_£nd_zmp
(
ã ë_t
 *
ã ë
, 
size_t
 
¨gc
, c⁄° **
¨gv
);

591 
ã ë_£nd_zmpv
(
ã ë_t
 *
ã ë
, ...Ë
TELNET_GNU_SENTINEL
;

598 
ã ë_£nd_vzmpv
(
ã ë_t
 *
ã ë
, 
va_li°
 
va
);

606 
ã ë_begö_zmp
(
ã ë_t
 *
ã ë
, c⁄° *
cmd
);

614 
ã ë_zmp_¨g
(
ã ë_t
 *
ã ë
, c⁄° *
¨g
);

624 
	#ã ë_föish_zmp
(
ã ë
Ë
	`ã ë_föish_sb
(—ñ√t))

	)

627 #i‡
deföed
(
__˝lu•lus
)

	@/usr/include/arpa/inet.h

18 #i‚de‡
_ARPA_INET_H


19 
	#_ARPA_INET_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<√töë/ö.h
>

25 #i‚de‡
__sockÀn_t_deföed


26 
__sockÀn_t
 
	tsockÀn_t
;

27 
	#__sockÀn_t_deföed


	)

30 
__BEGIN_DECLS


34 
ö_addr_t
 
	$öë_addr
 (c⁄° *
__˝
Ë
__THROW
;

37 
ö_addr_t
 
	$öë_ aof
 (
ö_addr
 
__ö
Ë
__THROW
;

41 
ö_addr
 
	$öë_makóddr
 (
ö_addr_t
 
__√t
, in_addr_à
__ho°
)

42 
__THROW
;

45 
ö_addr_t
 
	$öë_√tof
 (
ö_addr
 
__ö
Ë
__THROW
;

49 
ö_addr_t
 
	$öë_√tw‹k
 (c⁄° *
__˝
Ë
__THROW
;

53 *
	$öë_¡ﬂ
 (
ö_addr
 
__ö
Ë
__THROW
;

58 
	$öë_±⁄
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

59 *
__ª°ri˘
 
__buf
Ë
__THROW
;

64 c⁄° *
	$öë_¡›
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

65 *
__ª°ri˘
 
__buf
, 
sockÀn_t
 
__Àn
)

66 
__THROW
;

70 #ifde‡
__USE_MISC


73 
	$öë_©⁄
 (c⁄° *
__˝
, 
ö_addr
 *
__öp
Ë
__THROW
;

77 *
	$öë_√è
 (
ö_addr_t
 
__√t
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

82 *
	$öë_√t_¡›
 (
__af
, c⁄° *
__˝
, 
__bôs
,

83 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

88 
	$öë_√t_±⁄
 (
__af
, c⁄° *
__˝
,

89 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

94 
	$öë_nßp_addr
 (c⁄° *
__˝
,

95 *
__buf
, 
__Àn
Ë
__THROW
;

99 *
	$öë_nßp_¡ﬂ
 (
__Àn
, c⁄° *
__˝
,

100 *
__buf
Ë
__THROW
;

103 
__END_DECLS


	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

104 
__BEGIN_NAMESPACE_STD


110 
__ex˘y≥
 (
iß um
);

111 
__ex˘y≥
 (
ißÕha
);

112 
__ex˘y≥
 (
is˙ål
);

113 
__ex˘y≥
 (
isdigô
);

114 
__ex˘y≥
 (
i¶owî
);

115 
__ex˘y≥
 (
isgøph
);

116 
__ex˘y≥
 (
i•röt
);

117 
__ex˘y≥
 (
i•un˘
);

118 
__ex˘y≥
 (
is•a˚
);

119 
__ex˘y≥
 (
isuµî
);

120 
__ex˘y≥
 (
isxdigô
);

124 
	$tﬁowî
 (
__c
Ë
__THROW
;

127 
	$touµî
 (
__c
Ë
__THROW
;

129 
__END_NAMESPACE_STD


133 #ifdef 
__USE_ISOC99


134 
__BEGIN_NAMESPACE_C99


136 
	`__ex˘y≥
 (
isbœnk
);

138 
__END_NAMESPACE_C99


141 #ifde‡
__USE_GNU


143 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

146 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


150 
	$ißscii
 (
__c
Ë
__THROW
;

154 
	$tﬂscii
 (
__c
Ë
__THROW
;

158 
	`__ex˘y≥
 (
_touµî
);

159 
	`__ex˘y≥
 (
_tﬁowî
);

163 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

164 (
__exãnsi⁄__
 \

165 ({ 
__ªs
; \

166 i‡( (
c
) > 1) \

168 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

170 
__c
 = (
c
); \

171 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

174 
__ªs
 = 
f
 
¨gs
; \

177 
__ªs
 = (
a
)[(Ë(
c
)]; \

178 
__ªs
; 
	}
}))

	)

180 #i‡!
deföed
 
__NO_CTYPE


181 #ifde‡
__is˘y≥_f


182 
	$__is˘y≥_f
 (
Ænum
)

183 
	$__is˘y≥_f
 (
Æpha
)

184 
	$__is˘y≥_f
 (
˙ål
)

185 
	$__is˘y≥_f
 (
digô
)

186 
	$__is˘y≥_f
 (
lowî
)

187 
	$__is˘y≥_f
 (
gøph
)

188 
	$__is˘y≥_f
 (
¥öt
)

189 
	$__is˘y≥_f
 (
pun˘
)

190 
	$__is˘y≥_f
 (
•a˚
)

191 
	$__is˘y≥_f
 (
uµî
)

192 
	$__is˘y≥_f
 (
xdigô
)

193 #ifde‡
__USE_ISOC99


194 
	$__is˘y≥_f
 (
bœnk
)

196 #ñi‡
deföed
 
__is˘y≥


197 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

198 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

199 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

200 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

201 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

202 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

203 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

204 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

205 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

206 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

207 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

208 #ifde‡
__USE_ISOC99


209 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

213 #ifde‡
__USE_EXTERN_INLINES


214 
__exã∫_ölöe
 

215 
	`__NTH
 (
	$tﬁowî
 (
__c
))

217  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

218 
	}
}

220 
__exã∫_ölöe
 

221 
__NTH
 (
	$touµî
 (
__c
))

223  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

224 
	}
}

227 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


228 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

229 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

232 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


233 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

234 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

236 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

237 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

243 #ifde‡
__USE_XOPEN2K8


257 
	~<xloˇÀ.h
>

261 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

262 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

264 
	#__ex˘y≥_l
(
«me
) \

265 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

271 
__ex˘y≥_l
 (
iß um_l
);

272 
__ex˘y≥_l
 (
ißÕha_l
);

273 
__ex˘y≥_l
 (
is˙ål_l
);

274 
__ex˘y≥_l
 (
isdigô_l
);

275 
__ex˘y≥_l
 (
i¶owî_l
);

276 
__ex˘y≥_l
 (
isgøph_l
);

277 
__ex˘y≥_l
 (
i•röt_l
);

278 
__ex˘y≥_l
 (
i•un˘_l
);

279 
__ex˘y≥_l
 (
is•a˚_l
);

280 
__ex˘y≥_l
 (
isuµî_l
);

281 
__ex˘y≥_l
 (
isxdigô_l
);

283 
__ex˘y≥_l
 (
isbœnk_l
);

287 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

288 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

291 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

292 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


295 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

296 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

297 
	#__touµî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

299 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

300 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

304 #i‚de‡
__NO_CTYPE


305 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

306 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

307 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

308 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

309 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

310 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

311 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

312 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

313 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

314 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

315 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

317 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


320 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

321 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

324 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

325 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

326 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

327 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

328 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

329 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

330 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

331 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

332 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

333 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

334 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

336 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

338 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


339 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

340 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

347 
__END_DECLS


	@/usr/include/dirent.h

22 #i‚def 
_DIRENT_H


23 
	#_DIRENT_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifde‡
__USE_XOPEN


32 #i‚de‡
__öo_t_deföed


33 #i‚de‡
__USE_FILE_OFFSET64


34 
__öo_t
 
	töo_t
;

36 
__öo64_t
 
	töo_t
;

38 
	#__öo_t_deföed


	)

40 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


41 
__öo64_t
 
	töo64_t
;

42 
	#__öo64_t_deföed


	)

61 
	~<bôs/dúít.h
>

63 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
Ë&& !deföed 
d_fûío


64 
	#d_öo
 
d_fûío


	)

81 #ifde‡
_DIRENT_HAVE_D_NAMLEN


82 
	#_D_EXACT_NAMLEN
(
d
Ë((d)->
d_«mÀn
)

	)

83 
	#_D_ALLOC_NAMLEN
(
d
Ë(
	`_D_EXACT_NAMLEN
 (dË+ 1)

	)

85 
	#_D_EXACT_NAMLEN
(
d
Ë(
	`°æí
 ((d)->
d_«me
))

	)

86 #ifde‡
_DIRENT_HAVE_D_RECLEN


87 
	#_D_ALLOC_NAMLEN
(
d
Ë(((*Ë(dË+ (d)->
d_ª˛í
Ë- &(d)->
d_«me
[0])

	)

89 
	#_D_ALLOC_NAMLEN
(
d
Ë( (d)->
d_«me
 > 1 ?  (d)->d_name : \

90 
	`_D_EXACT_NAMLEN
 (
d
Ë+ 1)

	)

95 #ifde‡
__USE_BSD


99 
	mDT_UNKNOWN
 = 0,

100 
	#DT_UNKNOWN
 
DT_UNKNOWN


	)

101 
	mDT_FIFO
 = 1,

102 
	#DT_FIFO
 
DT_FIFO


	)

103 
	mDT_CHR
 = 2,

104 
	#DT_CHR
 
DT_CHR


	)

105 
	mDT_DIR
 = 4,

106 
	#DT_DIR
 
DT_DIR


	)

107 
	mDT_BLK
 = 6,

108 
	#DT_BLK
 
DT_BLK


	)

109 
	mDT_REG
 = 8,

110 
	#DT_REG
 
DT_REG


	)

111 
	mDT_LNK
 = 10,

112 
	#DT_LNK
 
DT_LNK


	)

113 
	mDT_SOCK
 = 12,

114 
	#DT_SOCK
 
DT_SOCK


	)

115 
	mDT_WHT
 = 14

116 
	#DT_WHT
 
DT_WHT


	)

120 
	#IFTODT
(
mode
Ë(((modeË& 0170000Ë>> 12)

	)

121 
	#DTTOIF
(
dúty≥
Ë((dúty≥Ë<< 12)

	)

127 
__dú°ªam
 
	tDIR
;

134 
DIR
 *
	$›ídú
 (c⁄° *
__«me
Ë
	`__n⁄nuŒ
 ((1));

136 #ifde‡
__USE_XOPEN2K8


141 
DIR
 *
	`fd›ídú
 (
__fd
);

149 
	$˛o£dú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

161 #i‚de‡
__USE_FILE_OFFSET64


162 
dúít
 *
	$ªaddú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

164 #ifde‡
__REDIRECT


165 
dúít
 *
	`__REDIRECT
 (
ªaddú
, (
DIR
 *
__dúp
), 
ªaddú64
)

166 
	`__n⁄nuŒ
 ((1));

168 
	#ªaddú
 
ªaddú64


	)

172 #ifde‡
__USE_LARGEFILE64


173 
dúít64
 *
	$ªaddú64
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

176 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


182 #i‚de‡
__USE_FILE_OFFSET64


183 
	$ªaddú_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

184 
dúít
 *
__ª°ri˘
 
__íåy
,

185 
dúít
 **
__ª°ri˘
 
__ªsu…
)

186 
	`__n⁄nuŒ
 ((1, 2, 3));

188 #ifde‡
__REDIRECT


189 
	`__REDIRECT
 (
ªaddú_r
,

190 (
DIR
 *
__ª°ri˘
 
__dúp
,

191 
dúít
 *
__ª°ri˘
 
__íåy
,

192 
dúít
 **
__ª°ri˘
 
__ªsu…
),

193 
ªaddú64_r
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

195 
	#ªaddú_r
 
ªaddú64_r


	)

199 #ifde‡
__USE_LARGEFILE64


200 
	$ªaddú64_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

201 
dúít64
 *
__ª°ri˘
 
__íåy
,

202 
dúít64
 **
__ª°ri˘
 
__ªsu…
)

203 
	`__n⁄nuŒ
 ((1, 2, 3));

208 
	$ªwöddú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

210 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


211 
	~<bôs/ty≥s.h
>

214 
	$£ekdú
 (
DIR
 *
__dúp
, 
__pos
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
	$ãŒdú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

220 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


223 
	$dúfd
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 #i‡
deföed
 
__OPTIMIZE__
 && deföed 
_DIR_dúfd


226 
	#dúfd
(
dúp
Ë
	`_DIR_dúfd
 (dúp)

	)

229 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC


230 #i‚de‡
MAXNAMLEN


232 
	~<bôs/posix1_lim.h
>

235 #ifde‡
NAME_MAX


236 
	#MAXNAMLEN
 
NAME_MAX


	)

238 
	#MAXNAMLEN
 255

	)

243 
	#__√ed_size_t


	)

244 
	~<°ddef.h
>

253 #i‚de‡
__USE_FILE_OFFSET64


254 
	`sˇndú
 (c⁄° *
__ª°ri˘
 
__dú
,

255 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

256 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

257 (*
__cmp
Ë(c⁄° 
dúít
 **,

258 c⁄° 
dúít
 **))

259 
	`__n⁄nuŒ
 ((1, 2));

261 #ifde‡
__REDIRECT


262 
	`__REDIRECT
 (
sˇndú
,

263 (c⁄° *
__ª°ri˘
 
__dú
,

264 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

265 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

266 (*
__cmp
Ë(c⁄° 
dúít
 **,

267 c⁄° 
dúít
 **)),

268 
sˇndú64
Ë
	`__n⁄nuŒ
 ((1, 2));

270 
	#sˇndú
 
sˇndú64


	)

274 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


277 
	`sˇndú64
 (c⁄° *
__ª°ri˘
 
__dú
,

278 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

279 (*
__£À˘‹
Ë(c⁄° 
dúít64
 *),

280 (*
__cmp
Ë(c⁄° 
dúít64
 **,

281 c⁄° 
dúít64
 **))

282 
	`__n⁄nuŒ
 ((1, 2));

285 #ifde‡
__USE_GNU


291 #i‚de‡
__USE_FILE_OFFSET64


292 
	`sˇndú©
 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

293 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

294 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

295 (*
__cmp
Ë(c⁄° 
dúít
 **,

296 c⁄° 
dúít
 **))

297 
	`__n⁄nuŒ
 ((2, 3));

299 #ifde‡
__REDIRECT


300 
	`__REDIRECT
 (
sˇndú©
,

301 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

302 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

303 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

304 (*
__cmp
Ë(c⁄° 
dúít
 **,

305 c⁄° 
dúít
 **)),

306 
sˇndú©64
Ë
	`__n⁄nuŒ
 ((2, 3));

308 
	#sˇndú©
 
sˇndú©64


	)

314 
	`sˇndú©64
 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

315 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

316 (*
__£À˘‹
Ë(c⁄° 
dúít64
 *),

317 (*
__cmp
Ë(c⁄° 
dúít64
 **,

318 c⁄° 
dúít64
 **))

319 
	`__n⁄nuŒ
 ((2, 3));

323 #i‚de‡
__USE_FILE_OFFSET64


324 
	$Æphas‹t
 (c⁄° 
dúít
 **
__e1
,

325 c⁄° 
dúít
 **
__e2
)

326 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

328 #ifde‡
__REDIRECT


329 
	`__REDIRECT_NTH
 (
Æphas‹t
,

330 (c⁄° 
dúít
 **
__e1
,

331 c⁄° 
dúít
 **
__e2
),

332 
Æphas‹t64
Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

334 
	#Æphas‹t
 
Æphas‹t64


	)

338 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


339 
	$Æphas‹t64
 (c⁄° 
dúít64
 **
__e1
,

340 c⁄° 
dúít64
 **
__e2
)

341 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

346 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC


351 #i‚de‡
__USE_FILE_OFFSET64


352 
__ssize_t
 
	$gëdúíåõs
 (
__fd
, *
__ª°ri˘
 
__buf
,

353 
size_t
 
__nbyãs
,

354 
__off_t
 *
__ª°ri˘
 
__ba£p
)

355 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

357 #ifde‡
__REDIRECT


358 
__ssize_t
 
	`__REDIRECT_NTH
 (
gëdúíåõs
,

359 (
__fd
, *
__ª°ri˘
 
__buf
,

360 
size_t
 
__nbyãs
,

361 
__off64_t
 *
__ª°ri˘
 
__ba£p
),

362 
gëdúíåõs64
Ë
	`__n⁄nuŒ
 ((2, 4));

364 
	#gëdúíåõs
 
gëdúíåõs64


	)

368 #ifde‡
__USE_LARGEFILE64


369 
__ssize_t
 
	$gëdúíåõs64
 (
__fd
, *
__ª°ri˘
 
__buf
,

370 
size_t
 
__nbyãs
,

371 
__off64_t
 *
__ª°ri˘
 
__ba£p
)

372 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

376 #ifde‡
__USE_GNU


378 #i‚de‡
__USE_FILE_OFFSET64


379 
	$vîsi⁄s‹t
 (c⁄° 
dúít
 **
__e1
,

380 c⁄° 
dúít
 **
__e2
)

381 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

383 #ifde‡
__REDIRECT


384 
	`__REDIRECT_NTH
 (
vîsi⁄s‹t
,

385 (c⁄° 
dúít
 **
__e1
,

386 c⁄° 
dúít
 **
__e2
),

387 
vîsi⁄s‹t64
)

388 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

390 
	#vîsi⁄s‹t
 
vîsi⁄s‹t64


	)

394 #ifde‡
__USE_LARGEFILE64


395 
	$vîsi⁄s‹t64
 (c⁄° 
dúít64
 **
__e1
,

396 c⁄° 
dúít64
 **
__e2
)

397 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

401 
__END_DECLS


	@/usr/include/dlfcn.h

19 #i‚def 
_DLFCN_H


20 
	#_DLFCN_H
 1

	)

22 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

27 
	~<bôs/dlf˙.h
>

30 #ifde‡
__USE_GNU


35 
	#RTLD_NEXT
 ((*Ë-1l)

	)

40 
	#RTLD_DEFAULT
 ((*Ë0)

	)

44 
	tLmid_t
;

47 
	#LM_ID_BASE
 0

	)

48 
	#LM_ID_NEWLM
 -1

	)

52 
__BEGIN_DECLS


56 *
	$dl›í
 (c⁄° *
__fûe
, 
__mode
Ë
__THROWNL
;

60 
	$dl˛o£
 (*
__h™dÀ
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1));

64 *
	$dlsym
 (*
__ª°ri˘
 
__h™dÀ
,

65 c⁄° *
__ª°ri˘
 
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

67 #ifde‡
__USE_GNU


69 *
	$dlm›í
 (
Lmid_t
 
__nsid
, c⁄° *
__fûe
, 
__mode
Ë
__THROWNL
;

73 *
	$dlvsym
 (*
__ª°ri˘
 
__h™dÀ
,

74 c⁄° *
__ª°ri˘
 
__«me
,

75 c⁄° *
__ª°ri˘
 
__vîsi⁄
)

76 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

82 *
	$dÀº‹
 (Ë
__THROW
;

85 #ifde‡
__USE_GNU


90 c⁄° *
dli_‚ame
;

91 *
dli_fba£
;

92 c⁄° *
dli_¢ame
;

93 *
dli_ßddr
;

94 } 
	tDl_öfo
;

98 
	$dœddr
 (c⁄° *
__addªss
, 
Dl_öfo
 *
__öfo
)

99 
__THROW
 
	`__n⁄nuŒ
 ((2));

102 
	$dœddr1
 (c⁄° *
__addªss
, 
Dl_öfo
 *
__öfo
,

103 **
__exåa_öfo
, 
__Êags
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

111 
RTLD_DL_SYMENT
 = 1,

114 
RTLD_DL_LINKMAP
 = 2

123 
	$dlöfo
 (*
__ª°ri˘
 
__h™dÀ
,

124 
__ªque°
, *
__ª°ri˘
 
__¨g
)

125 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

131 
RTLD_DI_LMID
 = 1,

135 
RTLD_DI_LINKMAP
 = 2,

137 
RTLD_DI_CONFIGADDR
 = 3,

144 
RTLD_DI_SERINFO
 = 4,

145 
RTLD_DI_SERINFOSIZE
 = 5,

149 
RTLD_DI_ORIGIN
 = 6,

151 
RTLD_DI_PROFILENAME
 = 7,

152 
RTLD_DI_PROFILEOUT
 = 8,

157 
RTLD_DI_TLS_MODID
 = 9,

163 
RTLD_DI_TLS_DATA
 = 10,

165 
RTLD_DI_MAX
 = 10

173 *
dls_«me
;

174 
dls_Êags
;

175 } 
	tDl_£Ω©h
;

181 
size_t
 
dls_size
;

182 
dls_˙t
;

183 
Dl_£Ω©h
 
dls_£Ω©h
[1];

184 } 
	tDl_£röfo
;

188 
__END_DECLS


	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


26 #i‚def 
__√ed_Em©h


27 
	#_ERRNO_H
 1

	)

28 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


35 
	~<bôs/î∫o.h
>

36 #unde‡
__√ed_Em©h


38 #ifdef 
_ERRNO_H


45 #i‚def 
î∫o


46 
î∫o
;

49 #ifde‡
__USE_GNU


54 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

58 
	g__END_DECLS


66 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


67 #i‚de‡
__îr‹_t_deföed


68 
	tîr‹_t
;

69 
	#__îr‹_t_deföed
 1

	)

71 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

22 #i‚def 
_FCNTL_H


23 
	#_FCNTL_H
 1

	)

25 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

35 
	~<bôs/f˙é.h
>

40 #i‚de‡
__mode_t_deföed


41 
__mode_t
 
	tmode_t
;

42 
	#__mode_t_deföed


	)

45 #i‚de‡
__off_t_deföed


46 #i‚de‡
__USE_FILE_OFFSET64


47 
__off_t
 
	toff_t
;

49 
__off64_t
 
	toff_t
;

51 
	#__off_t_deföed


	)

54 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


55 
__off64_t
 
	toff64_t
;

56 
	#__off64_t_deföed


	)

59 #i‚de‡
__pid_t_deföed


60 
__pid_t
 
	tpid_t
;

61 
	#__pid_t_deföed


	)

65 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


66 
	#__√ed_time•ec


	)

67 
	~<time.h
>

68 
	~<bôs/°©.h
>

70 
	#S_IFMT
 
__S_IFMT


	)

71 
	#S_IFDIR
 
__S_IFDIR


	)

72 
	#S_IFCHR
 
__S_IFCHR


	)

73 
	#S_IFBLK
 
__S_IFBLK


	)

74 
	#S_IFREG
 
__S_IFREG


	)

75 #ifde‡
__S_IFIFO


76 
	#S_IFIFO
 
__S_IFIFO


	)

78 #ifde‡
__S_IFLNK


79 
	#S_IFLNK
 
__S_IFLNK


	)

81 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


82 
	#S_IFSOCK
 
__S_IFSOCK


	)

87 
	#S_ISUID
 
__S_ISUID


	)

88 
	#S_ISGID
 
__S_ISGID


	)

90 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


92 
	#S_ISVTX
 
__S_ISVTX


	)

95 
	#S_IRUSR
 
__S_IREAD


	)

96 
	#S_IWUSR
 
__S_IWRITE


	)

97 
	#S_IXUSR
 
__S_IEXEC


	)

99 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

101 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

102 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

103 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

105 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

107 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

108 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

109 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

111 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

114 #ifdef 
__USE_MISC


115 #i‚de‡
R_OK


118 
	#R_OK
 4

	)

119 
	#W_OK
 2

	)

120 
	#X_OK
 1

	)

121 
	#F_OK
 0

	)

126 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


127 
	#SEEK_SET
 0

	)

128 
	#SEEK_CUR
 1

	)

129 
	#SEEK_END
 2

	)

137 
f˙é
 (
__fd
, 
__cmd
, ...);

145 #i‚de‡
__USE_FILE_OFFSET64


146 
	$›í
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

148 #ifde‡
__REDIRECT


149 
	`__REDIRECT
 (
›í
, (c⁄° *
__fûe
, 
__oÊag
, ...), 
›í64
)

150 
	`__n⁄nuŒ
 ((1));

152 
	#›í
 
›í64


	)

155 #ifde‡
__USE_LARGEFILE64


156 
	$›í64
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

159 #ifde‡
__USE_ATFILE


169 #i‚de‡
__USE_FILE_OFFSET64


170 
	$›í©
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

171 
	`__n⁄nuŒ
 ((2));

173 #ifde‡
__REDIRECT


174 
	`__REDIRECT
 (
›í©
, (
__fd
, c⁄° *
__fûe
, 
__oÊag
,

175 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

177 
	#›í©
 
›í©64


	)

180 #ifde‡
__USE_LARGEFILE64


181 
	$›í©64
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

182 
	`__n⁄nuŒ
 ((2));

191 #i‚de‡
__USE_FILE_OFFSET64


192 
	$¸ót
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

194 #ifde‡
__REDIRECT


195 
	`__REDIRECT
 (
¸ót
, (c⁄° *
__fûe
, 
mode_t
 
__mode
),

196 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

198 
	#¸ót
 
¸ót64


	)

201 #ifde‡
__USE_LARGEFILE64


202 
	$¸ót64
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

205 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

206 && !
deföed
 
__USE_POSIX
))

215 
	#F_ULOCK
 0

	)

216 
	#F_LOCK
 1

	)

217 
	#F_TLOCK
 2

	)

218 
	#F_TEST
 3

	)

220 #i‚de‡
__USE_FILE_OFFSET64


221 
	`lockf
 (
__fd
, 
__cmd
, 
off_t
 
__Àn
);

223 #ifde‡
__REDIRECT


224 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

226 
	#lockf
 
lockf64


	)

229 #ifde‡
__USE_LARGEFILE64


230 
	`lockf64
 (
__fd
, 
__cmd
, 
off64_t
 
__Àn
);

234 #ifde‡
__USE_XOPEN2K


237 #i‚de‡
__USE_FILE_OFFSET64


238 
	$posix_Ádvi£
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
,

239 
__advi£
Ë
__THROW
;

241 #ifde‡
__REDIRECT_NTH


242 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

243 
__off64_t
 
__Àn
, 
__advi£
),

244 
posix_Ádvi£64
);

246 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

249 #ifde‡
__USE_LARGEFILE64


250 
	$posix_Ádvi£64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
,

251 
__advi£
Ë
__THROW
;

259 #i‚de‡
__USE_FILE_OFFSET64


260 
	`posix_ÁŒoˇã
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
);

262 #ifde‡
__REDIRECT


263 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

264 
__off64_t
 
__Àn
),

265 
posix_ÁŒoˇã64
);

267 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

270 #ifde‡
__USE_LARGEFILE64


271 
	`posix_ÁŒoˇã64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
);

277 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

278 && 
deföed
 
__va_¨g_∑ck_Àn


279 
	~<bôs/f˙é2.h
>

282 
__END_DECLS


	@/usr/include/limits.h

22 #i‚de‡
_LIBC_LIMITS_H_


23 
	#_LIBC_LIMITS_H_
 1

	)

25 
	~<„©uªs.h
>

31 
	#MB_LEN_MAX
 16

	)

36 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

41 #i‚de‡
_LIMITS_H


42 
	#_LIMITS_H
 1

	)

44 
	~<bôs/w‹dsize.h
>

53 
	#CHAR_BIT
 8

	)

56 
	#SCHAR_MIN
 (-128)

	)

57 
	#SCHAR_MAX
 127

	)

60 
	#UCHAR_MAX
 255

	)

63 #ifde‡
__CHAR_UNSIGNED__


64 
	#CHAR_MIN
 0

	)

65 
	#CHAR_MAX
 
UCHAR_MAX


	)

67 
	#CHAR_MIN
 
SCHAR_MIN


	)

68 
	#CHAR_MAX
 
SCHAR_MAX


	)

72 
	#SHRT_MIN
 (-32768)

	)

73 
	#SHRT_MAX
 32767

	)

76 
	#USHRT_MAX
 65535

	)

79 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

80 
	#INT_MAX
 2147483647

	)

83 
	#UINT_MAX
 4294967295U

	)

86 #i‡
__WORDSIZE
 == 64

87 
	#LONG_MAX
 9223372036854775807L

	)

89 
	#LONG_MAX
 2147483647L

	)

91 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

94 #i‡
__WORDSIZE
 == 64

95 
	#ULONG_MAX
 18446744073709551615UL

	)

97 
	#ULONG_MAX
 4294967295UL

	)

100 #ifde‡
__USE_ISOC99


103 
	#LLONG_MAX
 9223372036854775807LL

	)

104 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

107 
	#ULLONG_MAX
 18446744073709551615ULL

	)

121 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


123 #ö˛ude_√xà<
limôs
.
h
>

129 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


130 #i‚de‡
LLONG_MIN


131 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

133 #i‚de‡
LLONG_MAX


134 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

136 #i‚de‡
ULLONG_MAX


137 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

141 #ifdef 
__USE_POSIX


143 
	~<bôs/posix1_lim.h
>

146 #ifdef 
__USE_POSIX2


147 
	~<bôs/posix2_lim.h
>

150 #ifdef 
__USE_XOPEN


151 
	~<bôs/x›í_lim.h
>

	@/usr/include/memory.h

22 #i‚def 
_MEMORY_H


23 
	#_MEMORY_H
 1

	)

25 
	~<„©uªs.h
>

28 #i‚def 
_STRING_H


29 
	~<°rög.h
>

	@/usr/include/netdb.h

22 #i‚def 
_NETDB_H


23 
	#_NETDB_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<√töë/ö.h
>

28 
	~<°döt.h
>

29 #ifde‡
__USE_MISC


32 
	~<Ωc/√tdb.h
>

35 #ifde‡
__USE_GNU


36 
	#__√ed_sigevít_t


	)

37 
	~<bôs/sigöfo.h
>

38 
	#__√ed_time•ec


	)

39 
	~<time.h
>

42 
	~<bôs/√tdb.h
>

45 
	#_PATH_HEQUIV
 "/ëc/ho°s.equiv"

	)

46 
	#_PATH_HOSTS
 "/ëc/ho°s"

	)

47 
	#_PATH_NETWORKS
 "/ëc/√tw‹ks"

	)

48 
	#_PATH_NSSWITCH_CONF
 "/ëc/nsswôch.c⁄f"

	)

49 
	#_PATH_PROTOCOLS
 "/ëc/¥Ÿocﬁs"

	)

50 
	#_PATH_SERVICES
 "/ëc/£rvi˚s"

	)

53 
	g__BEGIN_DECLS


55 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


58 
	#h_î∫o
 (*
	`__h_î∫o_loˇti⁄
 ())

	)

61 *
	$__h_î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

65 
	#HOST_NOT_FOUND
 1

	)

66 
	#TRY_AGAIN
 2

	)

68 
	#NO_RECOVERY
 3

	)

70 
	#NO_DATA
 4

	)

73 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


74 
	#NETDB_INTERNAL
 -1

	)

75 
	#NETDB_SUCCESS
 0

	)

76 
	#NO_ADDRESS
 
NO_DATA


	)

79 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_XOPEN_EXTENDED


81 
	#IPPORT_RESERVED
 1024

	)

84 #ifde‡
__USE_GNU


86 
	#SCOPE_DELIMITER
 '%'

	)

89 #ifde‡
__USE_MISC


92 
	$hîr‹
 (c⁄° *
__°r
Ë
__THROW
;

95 c⁄° *
	$h°ªº‹
 (
__îr_num
Ë
__THROW
;

100 
	sho°ít


102 *
h_«me
;

103 **
h_Æü£s
;

104 
h_addπy≥
;

105 
h_Àngth
;

106 **
h_addr_li°
;

107 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


108 
	#h_addr
 
h_addr_li°
[0]

	)

117 
	`£tho°ít
 (
__°ay_›í
);

123 
	`ídho°ít
 ();

130 
ho°ít
 *
	`gëho°ít
 ();

137 
ho°ít
 *
	`gëho°byaddr
 (c⁄° *
__addr
, 
__sockÀn_t
 
__Àn
,

138 
__ty≥
);

144 
ho°ít
 *
	`gëho°by«me
 (c⁄° *
__«me
);

146 #ifde‡
__USE_MISC


155 
ho°ít
 *
	`gëho°by«me2
 (c⁄° *
__«me
, 
__af
);

167 
	`gëho°ít_r
 (
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

168 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

169 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

170 *
__ª°ri˘
 
__h_î∫›
);

172 
	`gëho°byaddr_r
 (c⁄° *
__ª°ri˘
 
__addr
, 
__sockÀn_t
 
__Àn
,

173 
__ty≥
,

174 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

175 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

176 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

177 *
__ª°ri˘
 
__h_î∫›
);

179 
	`gëho°by«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

180 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

181 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

182 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

183 *
__ª°ri˘
 
__h_î∫›
);

185 
	`gëho°by«me2_r
 (c⁄° *
__ª°ri˘
 
__«me
, 
__af
,

186 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

187 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

188 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

189 *
__ª°ri˘
 
__h_î∫›
);

198 
	`£äëít
 (
__°ay_›í
);

204 
	`íd√ã¡
 ();

211 
√ã¡
 *
	`gë√ã¡
 ();

218 
√ã¡
 *
	`gë√tbyaddr
 (
uöt32_t
 
__√t
, 
__ty≥
);

224 
√ã¡
 *
	`gë√tby«me
 (c⁄° *
__«me
);

226 #ifdef 
__USE_MISC


237 
	`gë√ã¡_r
 (
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

238 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

239 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

240 *
__ª°ri˘
 
__h_î∫›
);

242 
	`gë√tbyaddr_r
 (
uöt32_t
 
__√t
, 
__ty≥
,

243 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

244 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

245 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

246 *
__ª°ri˘
 
__h_î∫›
);

248 
	`gë√tby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

249 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

250 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

251 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

252 *
__ª°ri˘
 
__h_î∫›
);

257 
	s£rvít


259 *
s_«me
;

260 **
s_Æü£s
;

261 
s_p‹t
;

262 *
s_¥Ÿo
;

270 
	`£t£rvít
 (
__°ay_›í
);

276 
	`íd£rvít
 ();

283 
£rvít
 *
	`gë£rvít
 ();

290 
£rvít
 *
	`gë£rvby«me
 (c⁄° *
__«me
, c⁄° *
__¥Ÿo
);

297 
£rvít
 *
	`gë£rvbyp‹t
 (
__p‹t
, c⁄° *
__¥Ÿo
);

300 #ifdef 
__USE_MISC


308 
	`gë£rvít_r
 (
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

309 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

310 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

312 
	`gë£rvby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

313 c⁄° *
__ª°ri˘
 
__¥Ÿo
,

314 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

315 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

316 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

318 
	`gë£rvbyp‹t_r
 (
__p‹t
, c⁄° *
__ª°ri˘
 
__¥Ÿo
,

319 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

320 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

321 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

326 
	s¥Ÿ€¡


328 *
p_«me
;

329 **
p_Æü£s
;

330 
p_¥Ÿo
;

338 
	`£çrŸ€¡
 (
__°ay_›í
);

344 
	`íd¥Ÿ€¡
 ();

351 
¥Ÿ€¡
 *
	`gë¥Ÿ€¡
 ();

357 
¥Ÿ€¡
 *
	`gë¥Ÿoby«me
 (c⁄° *
__«me
);

363 
¥Ÿ€¡
 *
	`gë¥Ÿobynumbî
 (
__¥Ÿo
);

366 #ifdef 
__USE_MISC


374 
	`gë¥Ÿ€¡_r
 (
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

375 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

376 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

378 
	`gë¥Ÿoby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

379 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

380 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

381 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

383 
	`gë¥Ÿobynumbî_r
 (
__¥Ÿo
,

384 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

385 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

386 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

395 
	`£äëgª¡
 (c⁄° *
__√tgroup
);

403 
	`íd√tgª¡
 ();

412 
	`gë√tgª¡
 (**
__ª°ri˘
 
__ho°p
,

413 **
__ª°ri˘
 
__u£Ω
,

414 **
__ª°ri˘
 
__domaöp
);

423 
	`ö√tgr
 (c⁄° *
__√tgroup
, c⁄° *
__ho°
,

424 c⁄° *
__u£r
, c⁄° *
__domaö
);

432 
	`gë√tgª¡_r
 (**
__ª°ri˘
 
__ho°p
,

433 **
__ª°ri˘
 
__u£Ω
,

434 **
__ª°ri˘
 
__domaöp
,

435 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
);

439 #ifde‡
__USE_BSD


451 
	`rcmd
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

452 c⁄° *
__ª°ri˘
 
__locu£r
,

453 c⁄° *
__ª°ri˘
 
__ªmu£r
,

454 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

463 
	`rcmd_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

464 c⁄° *
__ª°ri˘
 
__locu£r
,

465 c⁄° *
__ª°ri˘
 
__ªmu£r
,

466 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

467 
ß_Ámûy_t
 
__af
);

479 
	`ªxec
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

480 c⁄° *
__ª°ri˘
 
__«me
,

481 c⁄° *
__ª°ri˘
 
__∑ss
,

482 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

491 
	`ªxec_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

492 c⁄° *
__ª°ri˘
 
__«me
,

493 c⁄° *
__ª°ri˘
 
__∑ss
,

494 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

495 
ß_Ámûy_t
 
__af
);

505 
	`ru£rok
 (c⁄° *
__rho°
, 
__su£r
,

506 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
);

515 
	`ru£rok_af
 (c⁄° *
__rho°
, 
__su£r
,

516 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
,

517 
ß_Ámûy_t
 
__af
);

528 
	`úu£rok
 (
uöt32_t
 
__øddr
, 
__su£r
,

529 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
);

539 
	`úu£rok_af
 (c⁄° *
__øddr
, 
__su£r
,

540 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
,

541 
ß_Ámûy_t
 
__af
);

551 
	`ºesvp‹t
 (*
__Æp‹t
);

560 
	`ºesvp‹t_af
 (*
__Æp‹t
, 
ß_Ámûy_t
 
__af
);

565 #ifdef 
__USE_POSIX


567 
	saddröfo


569 
ai_Êags
;

570 
ai_Ámûy
;

571 
ai_sockty≥
;

572 
ai_¥Ÿocﬁ
;

573 
sockÀn_t
 
ai_addæí
;

574 
sockaddr
 *
ai_addr
;

575 *
ai_ˇn⁄«me
;

576 
addröfo
 *
ai_√xt
;

579 #ifde‡
__USE_GNU


581 
	sgaicb


583 c⁄° *
¨_«me
;

584 c⁄° *
¨_£rvi˚
;

585 c⁄° 
addröfo
 *
¨_ªque°
;

586 
addröfo
 *
¨_ªsu…
;

588 
__ªtu∫
;

589 
__glibc_ª£rved
[5];

593 
	#GAI_WAIT
 0

	)

594 
	#GAI_NOWAIT
 1

	)

598 
	#AI_PASSIVE
 0x0001

	)

599 
	#AI_CANONNAME
 0x0002

	)

600 
	#AI_NUMERICHOST
 0x0004

	)

601 
	#AI_V4MAPPED
 0x0008

	)

602 
	#AI_ALL
 0x0010

	)

603 
	#AI_ADDRCONFIG
 0x0020

	)

605 #ifde‡
__USE_GNU


606 
	#AI_IDN
 0x0040

	)

609 
	#AI_CANONIDN
 0x0080

	)

610 
	#AI_IDN_ALLOW_UNASSIGNED
 0x0100

	)

612 
	#AI_IDN_USE_STD3_ASCII_RULES
 0x0200

	)

615 
	#AI_NUMERICSERV
 0x0400

	)

618 
	#EAI_BADFLAGS
 -1

	)

619 
	#EAI_NONAME
 -2

	)

620 
	#EAI_AGAIN
 -3

	)

621 
	#EAI_FAIL
 -4

	)

622 
	#EAI_FAMILY
 -6

	)

623 
	#EAI_SOCKTYPE
 -7

	)

624 
	#EAI_SERVICE
 -8

	)

625 
	#EAI_MEMORY
 -10

	)

626 
	#EAI_SYSTEM
 -11

	)

627 
	#EAI_OVERFLOW
 -12

	)

628 #ifde‡
__USE_GNU


629 
	#EAI_NODATA
 -5

	)

630 
	#EAI_ADDRFAMILY
 -9

	)

631 
	#EAI_INPROGRESS
 -100

	)

632 
	#EAI_CANCELED
 -101

	)

633 
	#EAI_NOTCANCELED
 -102

	)

634 
	#EAI_ALLDONE
 -103

	)

635 
	#EAI_INTR
 -104

	)

636 
	#EAI_IDN_ENCODE
 -105

	)

639 #ifde‡
__USE_MISC


640 
	#NI_MAXHOST
 1025

	)

641 
	#NI_MAXSERV
 32

	)

644 
	#NI_NUMERICHOST
 1

	)

645 
	#NI_NUMERICSERV
 2

	)

646 
	#NI_NOFQDN
 4

	)

647 
	#NI_NAMEREQD
 8

	)

648 
	#NI_DGRAM
 16

	)

649 #ifde‡
__USE_GNU


650 
	#NI_IDN
 32

	)

651 
	#NI_IDN_ALLOW_UNASSIGNED
 64

	)

653 
	#NI_IDN_USE_STD3_ASCII_RULES
 128

	)

662 
	`gëaddröfo
 (c⁄° *
__ª°ri˘
 
__«me
,

663 c⁄° *
__ª°ri˘
 
__£rvi˚
,

664 c⁄° 
addröfo
 *
__ª°ri˘
 
__ªq
,

665 
addröfo
 **
__ª°ri˘
 
__∑i
);

668 
	$‰ìaddröfo
 (
addröfo
 *
__ai
Ë
__THROW
;

671 c⁄° *
	$gai_°ªº‹
 (
__ecode
Ë
__THROW
;

677 
	`gë«meöfo
 (c⁄° 
sockaddr
 *
__ª°ri˘
 
__ß
,

678 
sockÀn_t
 
__ßÀn
, *
__ª°ri˘
 
__ho°
,

679 
sockÀn_t
 
__ho°Àn
, *
__ª°ri˘
 
__£rv
,

680 
sockÀn_t
 
__£rvÀn
, 
__Êags
);

683 #ifde‡
__USE_GNU


692 
	`gëaddröfo_a
 (
__mode
, 
gaicb
 *
__li°
[
__ª°ri˘_¨r
],

693 
__ít
, 
sigevít
 *
__ª°ri˘
 
__sig
);

703 
	`gai_su•íd
 (c⁄° 
gaicb
 *c⁄° 
__li°
[], 
__ít
,

704 c⁄° 
time•ec
 *
__timeout
);

707 
	$gai_îr‹
 (
gaicb
 *
__ªq
Ë
__THROW
;

710 
	$gai_ˇn˚l
 (
gaicb
 *
__gaicbp
Ë
__THROW
;

713 
__END_DECLS


	@/usr/include/netinet/in.h

18 #i‚def 
_NETINET_IN_H


19 
	#_NETINET_IN_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<°döt.h
>

23 
	~<sys/sockë.h
>

24 
	~<bôs/ty≥s.h
>

27 
__BEGIN_DECLS


30 
uöt32_t
 
	tö_addr_t
;

31 
	sö_addr


33 
ö_addr_t
 
	ms_addr
;

37 
	~<bôs/ö.h
>

42 
	mIPPROTO_IP
 = 0,

43 
	#IPPROTO_IP
 
IPPROTO_IP


	)

44 
	mIPPROTO_ICMP
 = 1,

45 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

46 
	mIPPROTO_IGMP
 = 2,

47 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

48 
	mIPPROTO_IPIP
 = 4,

49 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

50 
	mIPPROTO_TCP
 = 6,

51 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

52 
	mIPPROTO_EGP
 = 8,

53 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

54 
	mIPPROTO_PUP
 = 12,

55 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

56 
	mIPPROTO_UDP
 = 17,

57 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

58 
	mIPPROTO_IDP
 = 22,

59 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

60 
	mIPPROTO_TP
 = 29,

61 
	#IPPROTO_TP
 
IPPROTO_TP


	)

62 
	mIPPROTO_DCCP
 = 33,

63 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

64 
	mIPPROTO_IPV6
 = 41,

65 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

66 
	mIPPROTO_RSVP
 = 46,

67 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

68 
	mIPPROTO_GRE
 = 47,

69 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

70 
	mIPPROTO_ESP
 = 50,

71 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

72 
	mIPPROTO_AH
 = 51,

73 
	#IPPROTO_AH
 
IPPROTO_AH


	)

74 
	mIPPROTO_MTP
 = 92,

75 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

76 
	mIPPROTO_BEETPH
 = 94,

77 
	#IPPROTO_BEETPH
 
IPPROTO_BEETPH


	)

78 
	mIPPROTO_ENCAP
 = 98,

79 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

80 
	mIPPROTO_PIM
 = 103,

81 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

82 
	mIPPROTO_COMP
 = 108,

83 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

84 
	mIPPROTO_SCTP
 = 132,

85 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

86 
	mIPPROTO_UDPLITE
 = 136,

87 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

88 
	mIPPROTO_RAW
 = 255,

89 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

90 
	mIPPROTO_MAX


96 #i‚de‡
__USE_KERNEL_IPV6_DEFS


99 
	mIPPROTO_HOPOPTS
 = 0,

100 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

101 
	mIPPROTO_ROUTING
 = 43,

102 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

103 
	mIPPROTO_FRAGMENT
 = 44,

104 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

105 
	mIPPROTO_ICMPV6
 = 58,

106 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

107 
	mIPPROTO_NONE
 = 59,

108 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

109 
	mIPPROTO_DSTOPTS
 = 60,

110 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

111 
	mIPPROTO_MH
 = 135

112 
	#IPPROTO_MH
 
IPPROTO_MH


	)

117 
uöt16_t
 
	tö_p‹t_t
;

122 
	mIPPORT_ECHO
 = 7,

123 
	mIPPORT_DISCARD
 = 9,

124 
	mIPPORT_SYSTAT
 = 11,

125 
	mIPPORT_DAYTIME
 = 13,

126 
	mIPPORT_NETSTAT
 = 15,

127 
	mIPPORT_FTP
 = 21,

128 
	mIPPORT_TELNET
 = 23,

129 
	mIPPORT_SMTP
 = 25,

130 
	mIPPORT_TIMESERVER
 = 37,

131 
	mIPPORT_NAMESERVER
 = 42,

132 
	mIPPORT_WHOIS
 = 43,

133 
	mIPPORT_MTP
 = 57,

135 
	mIPPORT_TFTP
 = 69,

136 
	mIPPORT_RJE
 = 77,

137 
	mIPPORT_FINGER
 = 79,

138 
	mIPPORT_TTYLINK
 = 87,

139 
	mIPPORT_SUPDUP
 = 95,

142 
	mIPPORT_EXECSERVER
 = 512,

143 
	mIPPORT_LOGINSERVER
 = 513,

144 
	mIPPORT_CMDSERVER
 = 514,

145 
	mIPPORT_EFSSERVER
 = 520,

148 
	mIPPORT_BIFFUDP
 = 512,

149 
	mIPPORT_WHOSERVER
 = 513,

150 
	mIPPORT_ROUTESERVER
 = 520,

153 
	mIPPORT_RESERVED
 = 1024,

156 
	mIPPORT_USERRESERVED
 = 5000

164 
	#IN_CLASSA
(
a
Ë((((
ö_addr_t
)◊)Ë& 0x80000000Ë=0)

	)

165 
	#IN_CLASSA_NET
 0xff000000

	)

166 
	#IN_CLASSA_NSHIFT
 24

	)

167 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

168 
	#IN_CLASSA_MAX
 128

	)

170 
	#IN_CLASSB
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xc0000000Ë=0x80000000)

	)

171 
	#IN_CLASSB_NET
 0xffff0000

	)

172 
	#IN_CLASSB_NSHIFT
 16

	)

173 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

174 
	#IN_CLASSB_MAX
 65536

	)

176 
	#IN_CLASSC
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xc0000000)

	)

177 
	#IN_CLASSC_NET
 0xffffff00

	)

178 
	#IN_CLASSC_NSHIFT
 8

	)

179 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

181 
	#IN_CLASSD
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xe0000000)

	)

182 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

184 
	#IN_EXPERIMENTAL
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xe0000000)

	)

185 
	#IN_BADCLASS
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xf0000000)

	)

188 
	#INADDR_ANY
 ((
ö_addr_t
Ë0x00000000)

	)

190 
	#INADDR_BROADCAST
 ((
ö_addr_t
Ë0xffffffff)

	)

192 
	#INADDR_NONE
 ((
ö_addr_t
Ë0xffffffff)

	)

195 
	#IN_LOOPBACKNET
 127

	)

197 #i‚de‡
INADDR_LOOPBACK


198 
	#INADDR_LOOPBACK
 ((
ö_addr_t
Ë0x7f000001Ë

	)

202 
	#INADDR_UNSPEC_GROUP
 ((
ö_addr_t
Ë0xe0000000Ë

	)

203 
	#INADDR_ALLHOSTS_GROUP
 ((
ö_addr_t
Ë0xe0000001Ë

	)

204 
	#INADDR_ALLRTRS_GROUP
 ((
ö_addr_t
Ë0xe0000002Ë

	)

205 
	#INADDR_MAX_LOCAL_GROUP
 ((
ö_addr_t
Ë0xe00000ffË

	)

207 #i‚de‡
__USE_KERNEL_IPV6_DEFS


209 
	sö6_addr


213 
uöt8_t
 
	m__u6_addr8
[16];

214 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


215 
uöt16_t
 
	m__u6_addr16
[8];

216 
uöt32_t
 
	m__u6_addr32
[4];

218 } 
	m__ö6_u
;

219 
	#s6_addr
 
__ö6_u
.
__u6_addr8


	)

220 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


221 
	#s6_addr16
 
__ö6_u
.
__u6_addr16


	)

222 
	#s6_addr32
 
__ö6_u
.
__u6_addr32


	)

227 c⁄° 
ö6_addr
 
ö6addr_™y
;

228 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

229 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

230 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

232 
	#INET_ADDRSTRLEN
 16

	)

233 
	#INET6_ADDRSTRLEN
 46

	)

237 
	ssockaddr_ö


239 
__SOCKADDR_COMMON
 (
sö_
);

240 
ö_p‹t_t
 
	msö_p‹t
;

241 
ö_addr
 
	msö_addr
;

244 
	msö_zîo
[ (
sockaddr
) -

245 
__SOCKADDR_COMMON_SIZE
 -

246  (
ö_p‹t_t
) -

247  (
ö_addr
)];

250 #i‚de‡
__USE_KERNEL_IPV6_DEFS


252 
	ssockaddr_ö6


254 
__SOCKADDR_COMMON
 (
sö6_
);

255 
ö_p‹t_t
 
	msö6_p‹t
;

256 
uöt32_t
 
	msö6_Êowöfo
;

257 
ö6_addr
 
	msö6_addr
;

258 
uöt32_t
 
	msö6_sc›e_id
;

262 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


264 
	sù_mªq


267 
ö_addr
 
	mimr_mu…üddr
;

270 
ö_addr
 
	mimr_öãrÁ˚
;

273 
	sù_mªq_sour˚


276 
ö_addr
 
	mimr_mu…üddr
;

279 
ö_addr
 
	mimr_öãrÁ˚
;

282 
ö_addr
 
	mimr_sour˚addr
;

286 #i‚de‡
__USE_KERNEL_IPV6_DEFS


288 
	sùv6_mªq


291 
ö6_addr
 
	mùv6mr_mu…üddr
;

294 
	mùv6mr_öãrÁ˚
;

298 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


300 
	sgroup_ªq


303 
uöt32_t
 
	mgr_öãrÁ˚
;

306 
sockaddr_°‹age
 
	mgr_group
;

309 
	sgroup_sour˚_ªq


312 
uöt32_t
 
	mg§_öãrÁ˚
;

315 
sockaddr_°‹age
 
	mg§_group
;

318 
sockaddr_°‹age
 
	mg§_sour˚
;

323 
	sù_msfûãr


326 
ö_addr
 
	mimsf_mu…üddr
;

329 
ö_addr
 
	mimsf_öãrÁ˚
;

332 
uöt32_t
 
	mimsf_fmode
;

335 
uöt32_t
 
	mimsf_num§c
;

337 
ö_addr
 
	mimsf_¶i°
[1];

340 
	#IP_MSFILTER_SIZE
(
num§c
Ë( (
ù_msfûãr
) \

341 -  (
ö_addr
) \

342 + (
num§c
Ë*  (
ö_addr
))

	)

344 
	sgroup_fûãr


347 
uöt32_t
 
	mgf_öãrÁ˚
;

350 
sockaddr_°‹age
 
	mgf_group
;

353 
uöt32_t
 
	mgf_fmode
;

356 
uöt32_t
 
	mgf_num§c
;

358 
sockaddr_°‹age
 
	mgf_¶i°
[1];

361 
	#GROUP_FILTER_SIZE
(
num§c
Ë( (
group_fûãr
) \

362 -  (
sockaddr_°‹age
) \

363 + ((
num§c
) \

364 *  (
sockaddr_°‹age
)))

	)

374 
uöt32_t
 
	$¡ohl
 (
uöt32_t
 
__√é⁄g
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

375 
uöt16_t
 
	$¡ohs
 (
uöt16_t
 
__√tsh‹t
)

376 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

377 
uöt32_t
 
	$ht⁄l
 (
uöt32_t
 
__ho°l⁄g
)

378 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

379 
uöt16_t
 
	$ht⁄s
 (
uöt16_t
 
__ho°sh‹t
)

380 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

382 
	~<ídün.h
>

385 
	~<bôs/byãsw≠.h
>

387 #ifde‡
__OPTIMIZE__


391 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


394 
	#¡ohl
(
x
Ë(x)

	)

395 
	#¡ohs
(
x
Ë(x)

	)

396 
	#ht⁄l
(
x
Ë(x)

	)

397 
	#ht⁄s
(
x
Ë(x)

	)

399 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


400 
	#¡ohl
(
x
Ë
	`__bsw≠_32
 (x)

	)

401 
	#¡ohs
(
x
Ë
	`__bsw≠_16
 (x)

	)

402 
	#ht⁄l
(
x
Ë
	`__bsw≠_32
 (x)

	)

403 
	#ht⁄s
(
x
Ë
	`__bsw≠_16
 (x)

	)

408 #ifde‡
__GNUC__


409 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

410 (
__exãnsi⁄__
 \

411 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

412 
__a
->
s6_addr32
[0] == 0 \

413 && 
__a
->
s6_addr32
[1] == 0 \

414 && 
__a
->
s6_addr32
[2] == 0 \

415 && 
__a
->
s6_addr32
[3] =0; 
	}
}))

	)

417 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

418 (
__exãnsi⁄__
 \

419 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

420 
__a
->
s6_addr32
[0] == 0 \

421 && 
__a
->
s6_addr32
[1] == 0 \

422 && 
__a
->
s6_addr32
[2] == 0 \

423 && 
__a
->
s6_addr32
[3] =
	`ht⁄l
 (1); }))

	)

425 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

426 (
__exãnsi⁄__
 \

427 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

428 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„800000); }))

	)

430 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

431 (
__exãnsi⁄__
 \

432 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

433 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„c00000); }))

	)

435 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

436 (
__exãnsi⁄__
 \

437 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

438 
__a
->
s6_addr32
[0] == 0 \

439 && 
__a
->
s6_addr32
[1] == 0 \

440 && 
__a
->
s6_addr32
[2] =
	`ht⁄l
 (0xffff); }))

	)

442 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

443 (
__exãnsi⁄__
 \

444 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

445 
__a
->
s6_addr32
[0] == 0 \

446 && 
__a
->
s6_addr32
[1] == 0 \

447 && 
__a
->
s6_addr32
[2] == 0 \

448 && 
	`¡ohl
 (
__a
->
s6_addr32
[3]Ë> 1; }))

	)

450 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

451 (
__exãnsi⁄__
 \

452 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

453 c⁄° 
ö6_addr
 *
__b
 = (c⁄° ö6_add∏*Ë(
b
); \

454 
__a
->
s6_addr32
[0] =
__b
->s6_addr32[0] \

455 && 
__a
->
s6_addr32
[1] =
__b
->s6_addr32[1] \

456 && 
__a
->
s6_addr32
[2] =
__b
->s6_addr32[2] \

457 && 
__a
->
s6_addr32
[3] =
__b
->s6_addr32[3]; }))

	)

459 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

460 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

461 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

462 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

463 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =0)

	)

465 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

466 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

467 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

468 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

469 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =
	`ht⁄l
 (1))

	)

471 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

472 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

473 =
	`ht⁄l
 (0x„800000))

	)

475 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

476 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

477 =
	`ht⁄l
 (0x„c00000))

	)

479 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

480 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

481 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

482 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =
	`ht⁄l
 (0xffff)))

	)

484 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

485 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

486 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

487 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0) \

488 && (
	`¡ohl
 (((c⁄° 
uöt32_t
 *Ë(
a
))[3]Ë> 1))

	)

490 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

491 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] =((c⁄° uöt32_à*Ë(
b
))[0]) \

492 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] =((c⁄° uöt32_à*Ë(
b
))[1]) \

493 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =((c⁄° uöt32_à*Ë(
b
))[2]) \

494 && (((c⁄° 
uöt32_t
 *Ë(
a
))[3] =((c⁄° uöt32_à*Ë(
b
))[3]))

	)

497 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(((c⁄° 
uöt8_t
 *Ë◊))[0] =0xff)

	)

499 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


501 
	$bödªsvp‹t
 (
__sockfd
, 
sockaddr_ö
 *
__sock_ö
Ë
__THROW
;

504 
	$bödªsvp‹t6
 (
__sockfd
, 
sockaddr_ö6
 *
__sock_ö
)

505 
__THROW
;

509 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

510 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

511 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x1))

	)

513 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

514 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

515 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x2))

	)

517 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

518 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

519 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x5))

	)

521 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

522 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

523 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x8))

	)

525 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

526 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

527 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0xe))

	)

530 #ifde‡
__USE_GNU


531 
cmsghdr
;

534 
	sö6_pktöfo


536 
ö6_addr
 
ùi6_addr
;

537 
ùi6_ifödex
;

541 
	sù6_mtuöfo


543 
sockaddr_ö6
 
ù6m_addr
;

544 
uöt32_t
 
ù6m_mtu
;

549 
	$öë6_›ti⁄_•a˚
 (
__nbyãs
)

550 
__THROW
 
__©åibuã_dïªˇãd__
;

551 
	$öë6_›ti⁄_öô
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

552 
__ty≥
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

553 
	$öë6_›ti⁄_≠≥nd
 (
cmsghdr
 *
__cmsg
,

554 c⁄° 
uöt8_t
 *
__ty≥p
, 
__mu…x
,

555 
__∂usy
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

556 
uöt8_t
 *
	$öë6_›ti⁄_Æloc
 (
cmsghdr
 *
__cmsg
, 
__d©Æí
,

557 
__mu…x
, 
__∂usy
)

558 
__THROW
 
__©åibuã_dïªˇãd__
;

559 
	$öë6_›ti⁄_√xt
 (c⁄° 
cmsghdr
 *
__cmsg
,

560 
uöt8_t
 **
__çåp
)

561 
__THROW
 
__©åibuã_dïªˇãd__
;

562 
	$öë6_›ti⁄_föd
 (c⁄° 
cmsghdr
 *
__cmsg
,

563 
uöt8_t
 **
__çåp
, 
__ty≥
)

564 
__THROW
 
__©åibuã_dïªˇãd__
;

568 
	$öë6_›t_öô
 (*
__extbuf
, 
sockÀn_t
 
__exéí
Ë
__THROW
;

569 
	$öë6_›t_≠≥nd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

570 
uöt8_t
 
__ty≥
, 
sockÀn_t
 
__Àn
, uöt8_à
__Æign
,

571 **
__d©abuÂ
Ë
__THROW
;

572 
	$öë6_›t_föish
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
)

573 
__THROW
;

574 
	$öë6_›t_£t_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

575 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

576 
	$öë6_›t_√xt
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

577 
uöt8_t
 *
__ty≥p
, 
sockÀn_t
 *
__À≈
,

578 **
__d©abuÂ
Ë
__THROW
;

579 
	$öë6_›t_föd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

580 
uöt8_t
 
__ty≥
, 
sockÀn_t
 *
__À≈
,

581 **
__d©abuÂ
Ë
__THROW
;

582 
	$öë6_›t_gë_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

583 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

587 
sockÀn_t
 
	$öë6_πh_•a˚
 (
__ty≥
, 
__£gmíts
Ë
__THROW
;

588 *
	$öë6_πh_öô
 (*
__bp
, 
sockÀn_t
 
__bp_Àn
, 
__ty≥
,

589 
__£gmíts
Ë
__THROW
;

590 
	$öë6_πh_add
 (*
__bp
, c⁄° 
ö6_addr
 *
__addr
Ë
__THROW
;

591 
	$öë6_πh_ªvî£
 (c⁄° *
__ö
, *
__out
Ë
__THROW
;

592 
	$öë6_πh_£gmíts
 (c⁄° *
__bp
Ë
__THROW
;

593 
ö6_addr
 *
	$öë6_πh_gëaddr
 (c⁄° *
__bp
, 
__ödex
)

594 
__THROW
;

600 
	$gëùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

601 
ö_addr
 
__group
, 
uöt32_t
 *
__fmode
,

602 
uöt32_t
 *
__num§c
, 
ö_addr
 *
__¶i°
)

603 
__THROW
;

606 
	$£tùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

607 
ö_addr
 
__group
, 
uöt32_t
 
__fmode
,

608 
uöt32_t
 
__num§c
,

609 c⁄° 
ö_addr
 *
__¶i°
)

610 
__THROW
;

614 
	$gësour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

615 c⁄° 
sockaddr
 *
__group
,

616 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 *
__fmode
,

617 
uöt32_t
 *
__num§c
,

618 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

621 
	$£tsour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

622 c⁄° 
sockaddr
 *
__group
,

623 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 
__fmode
,

624 
uöt32_t
 
__num§c
,

625 c⁄° 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

628 
__END_DECLS


	@/usr/include/netinet/tcp.h

32 #i‚de‡
_NETINET_TCP_H


33 
	#_NETINET_TCP_H
 1

	)

35 
	~<„©uªs.h
>

40 
	#TCP_NODELAY
 1

	)

41 
	#TCP_MAXSEG
 2

	)

42 
	#TCP_CORK
 3

	)

43 
	#TCP_KEEPIDLE
 4

	)

44 
	#TCP_KEEPINTVL
 5

	)

45 
	#TCP_KEEPCNT
 6

	)

46 
	#TCP_SYNCNT
 7

	)

47 
	#TCP_LINGER2
 8

	)

48 
	#TCP_DEFER_ACCEPT
 9

	)

49 
	#TCP_WINDOW_CLAMP
 10

	)

50 
	#TCP_INFO
 11

	)

51 
	#TCP_QUICKACK
 12

	)

52 
	#TCP_CONGESTION
 13

	)

53 
	#TCP_MD5SIG
 14

	)

54 
	#TCP_COOKIE_TRANSACTIONS
 15

	)

55 
	#TCP_THIN_LINEAR_TIMEOUTS
 16

	)

56 
	#TCP_THIN_DUPACK
 17

	)

57 
	#TCP_USER_TIMEOUT
 18

	)

58 
	#TCP_REPAIR
 19

	)

59 
	#TCP_REPAIR_QUEUE
 20

	)

60 
	#TCP_QUEUE_SEQ
 21

	)

61 
	#TCP_REPAIR_OPTIONS
 22

	)

62 
	#TCP_FASTOPEN
 23

	)

63 
	#TCP_TIMESTAMP
 24

	)

65 #ifde‡
__USE_MISC


66 
	~<sys/ty≥s.h
>

67 
	~<sys/sockë.h
>

69 
u_öt32_t
 
	tt˝_£q
;

74 
	st˝hdr


76 
__exãnsi⁄__
 union

80 
u_öt16_t
 
	mth_•‹t
;

81 
u_öt16_t
 
	mth_dp‹t
;

82 
t˝_£q
 
	mth_£q
;

83 
t˝_£q
 
	mth_ack
;

84 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


85 
u_öt8_t
 
	mth_x2
:4;

86 
u_öt8_t
 
	mth_off
:4;

88 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


89 
u_öt8_t
 
	mth_off
:4;

90 
u_öt8_t
 
	mth_x2
:4;

92 
u_öt8_t
 
	mth_Êags
;

93 
	#TH_FIN
 0x01

	)

94 
	#TH_SYN
 0x02

	)

95 
	#TH_RST
 0x04

	)

96 
	#TH_PUSH
 0x08

	)

97 
	#TH_ACK
 0x10

	)

98 
	#TH_URG
 0x20

	)

99 
u_öt16_t
 
	mth_wö
;

100 
u_öt16_t
 
	mth_sum
;

101 
u_öt16_t
 
	mth_uΩ
;

105 
u_öt16_t
 
	msour˚
;

106 
u_öt16_t
 
	mde°
;

107 
u_öt32_t
 
	m£q
;

108 
u_öt32_t
 
	mack_£q
;

109 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


110 
u_öt16_t
 
	mªs1
:4;

111 
u_öt16_t
 
	mdoff
:4;

112 
u_öt16_t
 
	mfö
:1;

113 
u_öt16_t
 
	msyn
:1;

114 
u_öt16_t
 
	mr°
:1;

115 
u_öt16_t
 
	mpsh
:1;

116 
u_öt16_t
 
	mack
:1;

117 
u_öt16_t
 
	murg
:1;

118 
u_öt16_t
 
	mªs2
:2;

119 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


120 
u_öt16_t
 
	mdoff
:4;

121 
u_öt16_t
 
	mªs1
:4;

122 
u_öt16_t
 
	mªs2
:2;

123 
u_öt16_t
 
	murg
:1;

124 
u_öt16_t
 
	mack
:1;

125 
u_öt16_t
 
	mpsh
:1;

126 
u_öt16_t
 
	mr°
:1;

127 
u_öt16_t
 
	msyn
:1;

128 
u_öt16_t
 
	mfö
:1;

132 
u_öt16_t
 
	mwödow
;

133 
u_öt16_t
 
	mcheck
;

134 
u_öt16_t
 
	murg_±r
;

141 
	mTCP_ESTABLISHED
 = 1,

142 
	mTCP_SYN_SENT
,

143 
	mTCP_SYN_RECV
,

144 
	mTCP_FIN_WAIT1
,

145 
	mTCP_FIN_WAIT2
,

146 
	mTCP_TIME_WAIT
,

147 
	mTCP_CLOSE
,

148 
	mTCP_CLOSE_WAIT
,

149 
	mTCP_LAST_ACK
,

150 
	mTCP_LISTEN
,

151 
	mTCP_CLOSING


154 
	#TCPOPT_EOL
 0

	)

155 
	#TCPOPT_NOP
 1

	)

156 
	#TCPOPT_MAXSEG
 2

	)

157 
	#TCPOLEN_MAXSEG
 4

	)

158 
	#TCPOPT_WINDOW
 3

	)

159 
	#TCPOLEN_WINDOW
 3

	)

160 
	#TCPOPT_SACK_PERMITTED
 4

	)

161 
	#TCPOLEN_SACK_PERMITTED
 2

	)

162 
	#TCPOPT_SACK
 5

	)

163 
	#TCPOPT_TIMESTAMP
 8

	)

164 
	#TCPOLEN_TIMESTAMP
 10

	)

165 
	#TCPOLEN_TSTAMP_APPA
 (
TCPOLEN_TIMESTAMP
+2Ë

	)

167 
	#TCPOPT_TSTAMP_HDR
 \

168 (
TCPOPT_NOP
<<24|TCPOPT_NOP<<16|
TCPOPT_TIMESTAMP
<<8|
TCPOLEN_TIMESTAMP
)

	)

176 
	#TCP_MSS
 512

	)

178 
	#TCP_MAXWIN
 65535

	)

180 
	#TCP_MAX_WINSHIFT
 14

	)

182 
	#SOL_TCP
 6

	)

185 
	#TCPI_OPT_TIMESTAMPS
 1

	)

186 
	#TCPI_OPT_SACK
 2

	)

187 
	#TCPI_OPT_WSCALE
 4

	)

188 
	#TCPI_OPT_ECN
 8

	)

189 
	#TCPI_OPT_ECN_SEEN
 16

	)

190 
	#TCPI_OPT_SYN_DATA
 32

	)

193 
	et˝_ˇ_°©e


195 
	mTCP_CA_O≥n
 = 0,

196 
	mTCP_CA_Dis‹dî
 = 1,

197 
	mTCP_CA_CWR
 = 2,

198 
	mTCP_CA_Recovîy
 = 3,

199 
	mTCP_CA_Loss
 = 4

202 
	st˝_öfo


204 
u_öt8_t
 
	mt˝i_°©e
;

205 
u_öt8_t
 
	mt˝i_ˇ_°©e
;

206 
u_öt8_t
 
	mt˝i_ªå™smôs
;

207 
u_öt8_t
 
	mt˝i_¥obes
;

208 
u_öt8_t
 
	mt˝i_backoff
;

209 
u_öt8_t
 
	mt˝i_›ti⁄s
;

210 
u_öt8_t
 
	mt˝i_¢d_wsˇÀ
 : 4, 
	mt˝i_rcv_wsˇÀ
 : 4;

212 
u_öt32_t
 
	mt˝i_πo
;

213 
u_öt32_t
 
	mt˝i_©o
;

214 
u_öt32_t
 
	mt˝i_¢d_mss
;

215 
u_öt32_t
 
	mt˝i_rcv_mss
;

217 
u_öt32_t
 
	mt˝i_u«cked
;

218 
u_öt32_t
 
	mt˝i_ßcked
;

219 
u_öt32_t
 
	mt˝i_lo°
;

220 
u_öt32_t
 
	mt˝i_ªå™s
;

221 
u_öt32_t
 
	mt˝i_Áckës
;

224 
u_öt32_t
 
	mt˝i_œ°_d©a_£¡
;

225 
u_öt32_t
 
	mt˝i_œ°_ack_£¡
;

226 
u_öt32_t
 
	mt˝i_œ°_d©a_ªcv
;

227 
u_öt32_t
 
	mt˝i_œ°_ack_ªcv
;

230 
u_öt32_t
 
	mt˝i_pmtu
;

231 
u_öt32_t
 
	mt˝i_rcv_s°hªsh
;

232 
u_öt32_t
 
	mt˝i_πt
;

233 
u_öt32_t
 
	mt˝i_πtv¨
;

234 
u_öt32_t
 
	mt˝i_¢d_s°hªsh
;

235 
u_öt32_t
 
	mt˝i_¢d_cwnd
;

236 
u_öt32_t
 
	mt˝i_advmss
;

237 
u_öt32_t
 
	mt˝i_ª‹dîög
;

239 
u_öt32_t
 
	mt˝i_rcv_πt
;

240 
u_öt32_t
 
	mt˝i_rcv_•a˚
;

242 
u_öt32_t
 
	mt˝i_tŸÆ_ªå™s
;

247 
	#TCP_MD5SIG_MAXKEYLEN
 80

	)

249 
	st˝_md5sig


251 
sockaddr_°‹age
 
	mt˝m_addr
;

252 
u_öt16_t
 
	m__t˝m_∑d1
;

253 
u_öt16_t
 
	mt˝m_keyÀn
;

254 
u_öt32_t
 
	m__t˝m_∑d2
;

255 
u_öt8_t
 
	mt˝m_key
[
TCP_MD5SIG_MAXKEYLEN
];

259 
	st˝_ª∑ú_›t


261 
u_öt32_t
 
	m›t_code
;

262 
u_öt32_t
 
	m›t_vÆ
;

268 
	mTCP_NO_QUEUE
,

269 
	mTCP_RECV_QUEUE
,

270 
	mTCP_SEND_QUEUE
,

271 
	mTCP_QUEUES_NR
,

275 
	#TCP_COOKIE_MIN
 8

	)

276 
	#TCP_COOKIE_MAX
 16

	)

277 
	#TCP_COOKIE_PAIR_SIZE
 (2*
TCP_COOKIE_MAX
)

	)

280 
	#TCP_COOKIE_IN_ALWAYS
 (1 << 0Ë

	)

281 
	#TCP_COOKIE_OUT_NEVER
 (1 << 1Ë

	)

285 
	#TCP_S_DATA_IN
 (1 << 2Ë

	)

286 
	#TCP_S_DATA_OUT
 (1 << 3Ë

	)

288 
	#TCP_MSS_DEFAULT
 536U

	)

289 
	#TCP_MSS_DESIRED
 1220U

	)

291 
	st˝_cookõ_å™ß˘i⁄s


293 
u_öt16_t
 
	mt˝˘_Êags
;

294 
u_öt8_t
 
	m__t˝˘_∑d1
;

295 
u_öt8_t
 
	mt˝˘_cookõ_desúed
;

296 
u_öt16_t
 
	mt˝˘_s_d©a_desúed
;

297 
u_öt16_t
 
	mt˝˘_u£d
;

298 
u_öt8_t
 
	mt˝˘_vÆue
[
TCP_MSS_DEFAULT
];

	@/usr/include/openssl/crypto.h

117 #i‚de‡
HEADER_CRYPTO_H


118 
	#HEADER_CRYPTO_H


	)

120 
	~<°dlib.h
>

122 
	~<›ís¶/e_os2.h
>

124 #i‚de‡
OPENSSL_NO_FP_API


125 
	~<°dio.h
>

128 
	~<›ís¶/°ack.h
>

129 
	~<›ís¶/ß„°ack.h
>

130 
	~<›ís¶/›ís¶v.h
>

131 
	~<›ís¶/os¶_typ.h
>

133 #ifde‡
CHARSET_EBCDIC


134 
	~<›ís¶/ebcdic.h
>

139 
	~<›ís¶/symhacks.h
>

141 #ifde‡ 
__˝lu•lus


148 
	#SSLEAY_VERSION_NUMBER
 
OPENSSL_VERSION_NUMBER


	)

149 
	#SSLEAY_VERSION
 0

	)

151 
	#SSLEAY_CFLAGS
 2

	)

152 
	#SSLEAY_BUILT_ON
 3

	)

153 
	#SSLEAY_PLATFORM
 4

	)

154 
	#SSLEAY_DIR
 5

	)

158 
¸y±o_ex_d©a_°
 
	tCRYPTO_EX_DATA
;

160 
	tCRYPTO_EX_√w
(*
	t∑ª¡
, *
	t±r
, 
	tCRYPTO_EX_DATA
 *
	tad
,

161 
	tidx
, 
	t¨gl
, *
	t¨gp
);

163 
	tCRYPTO_EX_‰ì
(*
	t∑ª¡
, *
	t±r
, 
	tCRYPTO_EX_DATA
 *
	tad
,

164 
	tidx
, 
	t¨gl
, *
	t¨gp
);

166 
	tCRYPTO_EX_dup
(
	tCRYPTO_EX_DATA
 *
	tto
, CRYPTO_EX_DATA *
	t‰om
, *
	t‰om_d
,

167 
	tidx
, 
	t¨gl
, *
	t¨gp
);

171 
	s›ís¶_ôem_°


173 
code
;

174 *
vÆue
;

175 
size_t
 
vÆue_size
;

176 
size_t
 *
vÆue_Àngth
;

177 } 
	tOPENSSL_ITEM
;

184 
	#CRYPTO_LOCK_ERR
 1

	)

185 
	#CRYPTO_LOCK_EX_DATA
 2

	)

186 
	#CRYPTO_LOCK_X509
 3

	)

187 
	#CRYPTO_LOCK_X509_INFO
 4

	)

188 
	#CRYPTO_LOCK_X509_PKEY
 5

	)

189 
	#CRYPTO_LOCK_X509_CRL
 6

	)

190 
	#CRYPTO_LOCK_X509_REQ
 7

	)

191 
	#CRYPTO_LOCK_DSA
 8

	)

192 
	#CRYPTO_LOCK_RSA
 9

	)

193 
	#CRYPTO_LOCK_EVP_PKEY
 10

	)

194 
	#CRYPTO_LOCK_X509_STORE
 11

	)

195 
	#CRYPTO_LOCK_SSL_CTX
 12

	)

196 
	#CRYPTO_LOCK_SSL_CERT
 13

	)

197 
	#CRYPTO_LOCK_SSL_SESSION
 14

	)

198 
	#CRYPTO_LOCK_SSL_SESS_CERT
 15

	)

199 
	#CRYPTO_LOCK_SSL
 16

	)

200 
	#CRYPTO_LOCK_SSL_METHOD
 17

	)

201 
	#CRYPTO_LOCK_RAND
 18

	)

202 
	#CRYPTO_LOCK_RAND2
 19

	)

203 
	#CRYPTO_LOCK_MALLOC
 20

	)

204 
	#CRYPTO_LOCK_BIO
 21

	)

205 
	#CRYPTO_LOCK_GETHOSTBYNAME
 22

	)

206 
	#CRYPTO_LOCK_GETSERVBYNAME
 23

	)

207 
	#CRYPTO_LOCK_READDIR
 24

	)

208 
	#CRYPTO_LOCK_RSA_BLINDING
 25

	)

209 
	#CRYPTO_LOCK_DH
 26

	)

210 
	#CRYPTO_LOCK_MALLOC2
 27

	)

211 
	#CRYPTO_LOCK_DSO
 28

	)

212 
	#CRYPTO_LOCK_DYNLOCK
 29

	)

213 
	#CRYPTO_LOCK_ENGINE
 30

	)

214 
	#CRYPTO_LOCK_UI
 31

	)

215 
	#CRYPTO_LOCK_ECDSA
 32

	)

216 
	#CRYPTO_LOCK_EC
 33

	)

217 
	#CRYPTO_LOCK_ECDH
 34

	)

218 
	#CRYPTO_LOCK_BN
 35

	)

219 
	#CRYPTO_LOCK_EC_PRE_COMP
 36

	)

220 
	#CRYPTO_LOCK_STORE
 37

	)

221 
	#CRYPTO_LOCK_COMP
 38

	)

222 
	#CRYPTO_LOCK_FIPS
 39

	)

223 
	#CRYPTO_LOCK_FIPS2
 40

	)

224 
	#CRYPTO_NUM_LOCKS
 41

	)

226 
	#CRYPTO_LOCK
 1

	)

227 
	#CRYPTO_UNLOCK
 2

	)

228 
	#CRYPTO_READ
 4

	)

229 
	#CRYPTO_WRITE
 8

	)

231 #i‚de‡
OPENSSL_NO_LOCKING


232 #i‚de‡
CRYPTO_w_lock


233 
	#CRYPTO_w_lock
(
ty≥
) \

234 
	`CRYPTO_lock
(
CRYPTO_LOCK
|
CRYPTO_WRITE
,
ty≥
,
__FILE__
,
__LINE__
)

	)

235 
	#CRYPTO_w_u∆ock
(
ty≥
) \

236 
	`CRYPTO_lock
(
CRYPTO_UNLOCK
|
CRYPTO_WRITE
,
ty≥
,
__FILE__
,
__LINE__
)

	)

237 
	#CRYPTO_r_lock
(
ty≥
) \

238 
	`CRYPTO_lock
(
CRYPTO_LOCK
|
CRYPTO_READ
,
ty≥
,
__FILE__
,
__LINE__
)

	)

239 
	#CRYPTO_r_u∆ock
(
ty≥
) \

240 
	`CRYPTO_lock
(
CRYPTO_UNLOCK
|
CRYPTO_READ
,
ty≥
,
__FILE__
,
__LINE__
)

	)

241 
	#CRYPTO_add
(
addr
,
amou¡
,
ty≥
) \

242 
	`CRYPTO_add_lock
(
addr
,
amou¡
,
ty≥
,
__FILE__
,
__LINE__
)

	)

245 
	#CRYPTO_w_lock
(
a
)

	)

246 
	#CRYPTO_w_u∆ock
(
a
)

	)

247 
	#CRYPTO_r_lock
(
a
)

	)

248 
	#CRYPTO_r_u∆ock
(
a
)

	)

249 
	#CRYPTO_add
(
a
,
b
,
c
Ë((*◊))+=(b))

	)

258 
ª„ªn˚s
;

259 
CRYPTO_dy∆ock_vÆue
 *
d©a
;

260 } 
	tCRYPTO_dy∆ock
;

266 
	#CRYPTO_MEM_CHECK_OFF
 0x0

	)

267 
	#CRYPTO_MEM_CHECK_ON
 0x1

	)

268 
	#CRYPTO_MEM_CHECK_ENABLE
 0x2

	)

269 
	#CRYPTO_MEM_CHECK_DISABLE
 0x3

	)

275 
	#V_CRYPTO_MDEBUG_TIME
 0x1

	)

277 
	#V_CRYPTO_MDEBUG_THREAD
 0x2

	)

279 
	#V_CRYPTO_MDEBUG_ALL
 (
V_CRYPTO_MDEBUG_TIME
 | 
V_CRYPTO_MDEBUG_THREAD
)

	)

283 
bio_°
 
	tBIO_dummy
;

285 
	s¸y±o_ex_d©a_°


287 
STACK_OF
(Ë*
sk
;

288 
dummy
;

290 
DECLARE_STACK_OF
()

295 
	s¸y±o_ex_d©a_func_°


297 
¨gl
;

298 *
¨gp
;

299 
CRYPTO_EX_√w
 *
√w_func
;

300 
CRYPTO_EX_‰ì
 *
‰ì_func
;

301 
CRYPTO_EX_dup
 *
dup_func
;

302 } 
	tCRYPTO_EX_DATA_FUNCS
;

304 
DECLARE_STACK_OF
(
CRYPTO_EX_DATA_FUNCS
)

310 
	#CRYPTO_EX_INDEX_BIO
 0

	)

311 
	#CRYPTO_EX_INDEX_SSL
 1

	)

312 
	#CRYPTO_EX_INDEX_SSL_CTX
 2

	)

313 
	#CRYPTO_EX_INDEX_SSL_SESSION
 3

	)

314 
	#CRYPTO_EX_INDEX_X509_STORE
 4

	)

315 
	#CRYPTO_EX_INDEX_X509_STORE_CTX
 5

	)

316 
	#CRYPTO_EX_INDEX_RSA
 6

	)

317 
	#CRYPTO_EX_INDEX_DSA
 7

	)

318 
	#CRYPTO_EX_INDEX_DH
 8

	)

319 
	#CRYPTO_EX_INDEX_ENGINE
 9

	)

320 
	#CRYPTO_EX_INDEX_X509
 10

	)

321 
	#CRYPTO_EX_INDEX_UI
 11

	)

322 
	#CRYPTO_EX_INDEX_ECDSA
 12

	)

323 
	#CRYPTO_EX_INDEX_ECDH
 13

	)

324 
	#CRYPTO_EX_INDEX_COMP
 14

	)

325 
	#CRYPTO_EX_INDEX_STORE
 15

	)

329 
	#CRYPTO_EX_INDEX_USER
 100

	)

336 
	#CRYPTO_mÆloc_öô
(Ë
	`CRYPTO_£t_mem_fun˘i⁄s
(\

337 
mÆloc
, 
ªÆloc
, 
‰ì
)

	)

339 #i‡
deföed
 
CRYPTO_MDEBUG_ALL
 || deföed 
CRYPTO_MDEBUG_TIME
 || deföed 
CRYPTO_MDEBUG_THREAD


340 #i‚de‡
CRYPTO_MDEBUG


341 
	#CRYPTO_MDEBUG


	)

347 
	#CRYPTO_mÆloc_debug_öô
() do {\

348 
	`CRYPTO_£t_mem_debug_fun˘i⁄s
(\

349 
CRYPTO_dbg_mÆloc
,\

350 
CRYPTO_dbg_ªÆloc
,\

351 
CRYPTO_dbg_‰ì
,\

352 
CRYPTO_dbg_£t_›ti⁄s
,\

353 
CRYPTO_dbg_gë_›ti⁄s
);\

354 } 0)

	)

356 
CRYPTO_mem_˘æ
(
mode
);

357 
CRYPTO_is_mem_check_⁄
();

360 
	#MemCheck_°¨t
(Ë
	`CRYPTO_mem_˘æ
(
CRYPTO_MEM_CHECK_ON
)

	)

361 
	#MemCheck_°›
(Ë
	`CRYPTO_mem_˘æ
(
CRYPTO_MEM_CHECK_OFF
)

	)

364 
	#MemCheck_⁄
(Ë
	`CRYPTO_mem_˘æ
(
CRYPTO_MEM_CHECK_ENABLE
)

	)

365 
	#MemCheck_off
(Ë
	`CRYPTO_mem_˘æ
(
CRYPTO_MEM_CHECK_DISABLE
)

	)

366 
	#is_MemCheck_⁄
(Ë
	`CRYPTO_is_mem_check_⁄
()

	)

368 
	#OPENSSL_mÆloc
(
num
Ë
	`CRYPTO_mÆloc
((Íum,
__FILE__
,
__LINE__
)

	)

369 
	#OPENSSL_°rdup
(
°r
Ë
	`CRYPTO_°rdup
((°r),
__FILE__
,
__LINE__
)

	)

370 
	#OPENSSL_ªÆloc
(
addr
,
num
) \

371 
	`CRYPTO_ªÆloc
((*)
addr
,()
num
,
__FILE__
,
__LINE__
)

	)

372 
	#OPENSSL_ªÆloc_˛ón
(
addr
,
ﬁd_num
,
num
) \

373 
	`CRYPTO_ªÆloc_˛ón
(
addr
,
ﬁd_num
,
num
,
__FILE__
,
__LINE__
)

	)

374 
	#OPENSSL_ªmÆloc
(
addr
,
num
) \

375 
	`CRYPTO_ªmÆloc
((**)
addr
,()
num
,
__FILE__
,
__LINE__
)

	)

376 
	#OPENSSL_‰ìFunc
 
CRYPTO_‰ì


	)

377 
	#OPENSSL_‰ì
(
addr
Ë
	`CRYPTO_‰ì
◊ddr)

	)

379 
	#OPENSSL_mÆloc_locked
(
num
) \

380 
	`CRYPTO_mÆloc_locked
(()
num
,
__FILE__
,
__LINE__
)

	)

381 
	#OPENSSL_‰ì_locked
(
addr
Ë
	`CRYPTO_‰ì_locked
◊ddr)

	)

384 c⁄° *
SSLóy_vîsi⁄
(
ty≥
);

385 
SSLóy
();

387 
OPENSSL_is£tugid
();

390 
°_CRYPTO_EX_DATA_IMPL
 
	tCRYPTO_EX_DATA_IMPL
;

392 c⁄° 
CRYPTO_EX_DATA_IMPL
 *
CRYPTO_gë_ex_d©a_im∂emíèti⁄
();

394 
CRYPTO_£t_ex_d©a_im∂emíèti⁄
(c⁄° 
CRYPTO_EX_DATA_IMPL
 *
i
);

396 
CRYPTO_ex_d©a_√w_˛ass
();

398 
CRYPTO_gë_ex_√w_ödex
(
˛ass_ödex
, 
¨gl
, *
¨gp
,

399 
CRYPTO_EX_√w
 *
√w_func
, 
CRYPTO_EX_dup
 *
dup_func
,

400 
CRYPTO_EX_‰ì
 *
‰ì_func
);

403 
CRYPTO_√w_ex_d©a
(
˛ass_ödex
, *
obj
, 
CRYPTO_EX_DATA
 *
ad
);

404 
CRYPTO_dup_ex_d©a
(
˛ass_ödex
, 
CRYPTO_EX_DATA
 *
to
,

405 
CRYPTO_EX_DATA
 *
‰om
);

406 
CRYPTO_‰ì_ex_d©a
(
˛ass_ödex
, *
obj
, 
CRYPTO_EX_DATA
 *
ad
);

409 
CRYPTO_£t_ex_d©a
(
CRYPTO_EX_DATA
 *
ad
, 
idx
, *
vÆ
);

410 *
CRYPTO_gë_ex_d©a
(c⁄° 
CRYPTO_EX_DATA
 *
ad
,
idx
);

413 
CRYPTO_˛ónup_Æl_ex_d©a
();

415 
CRYPTO_gë_√w_lockid
(*
«me
);

417 
CRYPTO_num_locks
();

418 
CRYPTO_lock
(
mode
, 
ty≥
,c⁄° *
fûe
,
löe
);

419 
CRYPTO_£t_lockög_ˇŒback
((*
func
)(
mode
,
ty≥
,

420 c⁄° *
fûe
,
löe
));

421 (*
CRYPTO_gë_lockög_ˇŒback
())(
mode
,
ty≥
,c⁄° *
fûe
,

422 
löe
);

423 
CRYPTO_£t_add_lock_ˇŒback
((*
func
)(*
num
,
mou¡
,
ty≥
,

424 c⁄° *
fûe
, 
löe
));

425 (*
CRYPTO_gë_add_lock_ˇŒback
())(*
num
,
mou¡
,
ty≥
,

426 c⁄° *
fûe
,
löe
);

429 
	s¸y±o_thªadid_°


431 *
±r
;

432 
vÆ
;

433 } 
	tCRYPTO_THREADID
;

435 
CRYPTO_THREADID_£t_numîic
(
CRYPTO_THREADID
 *
id
, 
vÆ
);

436 
CRYPTO_THREADID_£t_poöãr
(
CRYPTO_THREADID
 *
id
, *
±r
);

437 
CRYPTO_THREADID_£t_ˇŒback
((*
thªadid_func
)(
CRYPTO_THREADID
 *));

438 (*
CRYPTO_THREADID_gë_ˇŒback
())(
CRYPTO_THREADID
 *);

439 
CRYPTO_THREADID_cuºít
(
CRYPTO_THREADID
 *
id
);

440 
CRYPTO_THREADID_cmp
(c⁄° 
CRYPTO_THREADID
 *
a
, c⁄° CRYPTO_THREADID *
b
);

441 
CRYPTO_THREADID_˝y
(
CRYPTO_THREADID
 *
de°
, c⁄° CRYPTO_THREADID *
§c
);

442 
CRYPTO_THREADID_hash
(c⁄° 
CRYPTO_THREADID
 *
id
);

443 #i‚de‡
OPENSSL_NO_DEPRECATED


444 
CRYPTO_£t_id_ˇŒback
((*
func
)());

445 (*
CRYPTO_gë_id_ˇŒback
())();

446 
CRYPTO_thªad_id
();

449 c⁄° *
CRYPTO_gë_lock_«me
(
ty≥
);

450 
CRYPTO_add_lock
(*
poöãr
,
amou¡
,
ty≥
, c⁄° *
fûe
,

451 
löe
);

453 
CRYPTO_gë_√w_dy∆ockid
();

454 
CRYPTO_de°roy_dy∆ockid
(
i
);

455 
CRYPTO_dy∆ock_vÆue
 *
CRYPTO_gë_dy∆ock_vÆue
(
i
);

456 
CRYPTO_£t_dy∆ock_¸óã_ˇŒback
(
CRYPTO_dy∆ock_vÆue
 *(*
dyn_¸óã_fun˘i⁄
)(c⁄° *
fûe
, 
löe
));

457 
CRYPTO_£t_dy∆ock_lock_ˇŒback
((*
dyn_lock_fun˘i⁄
)(
mode
, 
CRYPTO_dy∆ock_vÆue
 *
l
, c⁄° *
fûe
, 
löe
));

458 
CRYPTO_£t_dy∆ock_de°roy_ˇŒback
((*
dyn_de°roy_fun˘i⁄
)(
CRYPTO_dy∆ock_vÆue
 *
l
, c⁄° *
fûe
, 
löe
));

459 
CRYPTO_dy∆ock_vÆue
 *(*
CRYPTO_gë_dy∆ock_¸óã_ˇŒback
())(c⁄° *
fûe
,
löe
);

460 (*
CRYPTO_gë_dy∆ock_lock_ˇŒback
())(
mode
, 
CRYPTO_dy∆ock_vÆue
 *
l
, c⁄° *
fûe
,
löe
);

461 (*
CRYPTO_gë_dy∆ock_de°roy_ˇŒback
())(
CRYPTO_dy∆ock_vÆue
 *
l
, c⁄° *
fûe
,
löe
);

465 
CRYPTO_£t_mem_fun˘i⁄s
(*(*
m
)(
size_t
),*(*
r
)(*,size_t), (*
f
)(*));

466 
CRYPTO_£t_locked_mem_fun˘i⁄s
(*(*
m
)(
size_t
), (*
‰ì_func
)(*));

467 
CRYPTO_£t_mem_ex_fun˘i⁄s
(*(*
m
)(
size_t
,const *,),

468 *(*
r
)(*,
size_t
,const *,),

469 (*
f
)(*));

470 
CRYPTO_£t_locked_mem_ex_fun˘i⁄s
(*(*
m
)(
size_t
,const *,),

471 (*
‰ì_func
)(*));

472 
CRYPTO_£t_mem_debug_fun˘i⁄s
((*
m
)(*,,const *,,),

473 (*
r
)(*,*,,const *,,),

474 (*
f
)(*,),

475 (*
so
)(),

476 (*
go
)());

477 
CRYPTO_gë_mem_fun˘i⁄s
(*(**
m
)(
size_t
),*(**
r
)(*, size_t), (**
f
)(*));

478 
CRYPTO_gë_locked_mem_fun˘i⁄s
(*(**
m
)(
size_t
), (**
f
)(*));

479 
CRYPTO_gë_mem_ex_fun˘i⁄s
(*(**
m
)(
size_t
,const *,),

480 *(**
r
)(*, 
size_t
,const *,),

481 (**
f
)(*));

482 
CRYPTO_gë_locked_mem_ex_fun˘i⁄s
(*(**
m
)(
size_t
,const *,),

483 (**
f
)(*));

484 
CRYPTO_gë_mem_debug_fun˘i⁄s
((**
m
)(*,,const *,,),

485 (**
r
)(*,*,,const *,,),

486 (**
f
)(*,),

487 (**
so
)(),

488 (**
go
)());

490 *
CRYPTO_mÆloc_locked
(
num
, c⁄° *
fûe
, 
löe
);

491 
CRYPTO_‰ì_locked
(*
±r
);

492 *
CRYPTO_mÆloc
(
num
, c⁄° *
fûe
, 
löe
);

493 *
CRYPTO_°rdup
(c⁄° *
°r
, c⁄° *
fûe
, 
löe
);

494 
CRYPTO_‰ì
(*
±r
);

495 *
CRYPTO_ªÆloc
(*
addr
,
num
, c⁄° *
fûe
, 
löe
);

496 *
CRYPTO_ªÆloc_˛ón
(*
addr
,
ﬁd_num
,
num
,c⁄° *
fûe
,

497 
löe
);

498 *
CRYPTO_ªmÆloc
(*
addr
,
num
, c⁄° *
fûe
, 
löe
);

500 
OPENSSL_˛ón£
(*
±r
, 
size_t
 
Àn
);

502 
CRYPTO_£t_mem_debug_›ti⁄s
(
bôs
);

503 
CRYPTO_gë_mem_debug_›ti⁄s
();

505 
	#CRYPTO_push_öfo
(
öfo
) \

506 
	`CRYPTO_push_öfo_
(
öfo
, 
__FILE__
, 
__LINE__
);

	)

507 
CRYPTO_push_öfo_
(c⁄° *
öfo
, c⁄° *
fûe
, 
löe
);

508 
CRYPTO_p›_öfo
();

509 
CRYPTO_ªmove_Æl_öfo
();

519 
CRYPTO_dbg_mÆloc
(*
addr
,
num
,c⁄° *
fûe
,
löe
,
bef‹e_p
);

520 
CRYPTO_dbg_ªÆloc
(*
addr1
,*
addr2
,
num
,c⁄° *
fûe
,
löe
,
bef‹e_p
);

521 
CRYPTO_dbg_‰ì
(*
addr
,
bef‹e_p
);

530 
CRYPTO_dbg_£t_›ti⁄s
(
bôs
);

531 
CRYPTO_dbg_gë_›ti⁄s
();

534 #i‚de‡
OPENSSL_NO_FP_API


535 
CRYPTO_mem_Àaks_Â
(
FILE
 *);

537 
CRYPTO_mem_Àaks
(
bio_°
 *
bio
);

539 *
	tCRYPTO_MEM_LEAK_CB
(, const *, , , *);

540 
CRYPTO_mem_Àaks_cb
(
CRYPTO_MEM_LEAK_CB
 *
cb
);

543 
O≥nSSLDõ
(c⁄° *
fûe
,
löe
,c⁄° *
as£πi⁄
);

544 
	#OPENSSL_as£π
(
e
Ë()(”Ë? 0 : (
	`O≥nSSLDõ
(
__FILE__
, 
__LINE__
, #e),1))

	)

546 *
OPENSSL_ü32ˇp_loc
();

547 
	#OPENSSL_ü32ˇp
 (*(
	`OPENSSL_ü32ˇp_loc
()))

	)

548 
OPENSSL_is£rvi˚
();

550 
FIPS_mode
();

551 
FIPS_mode_£t
(
r
);

553 
OPENSSL_öô
();

555 
	#fùs_md_öô
(
Æg
Ë
	`fùs_md_öô_˘x
◊lg,álg)

	)

557 #ifde‡
OPENSSL_FIPS


558 
	#fùs_md_öô_˘x
(
Æg
, 
cx
) \

559 
Æg
##
	`_Inô
(
cx
##
_CTX
 *
c
) \

561 i‡(
	`FIPS_mode
()Ë
	`O≥nSSLDõ
(
__FILE__
, 
__LINE__
, \

563  
¥iv©e_
##
Æg
##
	`_Inô
(
c
); \

565 
¥iv©e_
##
Æg
##
	`_Inô
(
cx
##
_CTX
 *
c
)

	)

567 
	#fùs_cùhî_ab‹t
(
Æg
) \

568 i‡(
	`FIPS_mode
()Ë
	`O≥nSSLDõ
(
__FILE__
, 
__LINE__
, \

569 "LowÜevñ API cÆ»tÿcùhî " #Æg " f‹biddí i¿FIPS mode!")

	)

572 
	#fùs_md_öô_˘x
(
Æg
, 
cx
) \

573 
Æg
##
	`_Inô
(
cx
##
_CTX
 *
c
)

	)

574 
	#fùs_cùhî_ab‹t
(
Æg
Ë0)

	)

582 
CRYPTO_memcmp
(c⁄° *
a
, c⁄° *
b
, 
size_t
 
Àn
);

588 
ERR_lﬂd_CRYPTO_°rögs
();

593 
	#CRYPTO_F_CRYPTO_GET_EX_NEW_INDEX
 100

	)

594 
	#CRYPTO_F_CRYPTO_GET_NEW_DYNLOCKID
 103

	)

595 
	#CRYPTO_F_CRYPTO_GET_NEW_LOCKID
 101

	)

596 
	#CRYPTO_F_CRYPTO_SET_EX_DATA
 102

	)

597 
	#CRYPTO_F_DEF_ADD_INDEX
 104

	)

598 
	#CRYPTO_F_DEF_GET_CLASS
 105

	)

599 
	#CRYPTO_F_FIPS_MODE_SET
 109

	)

600 
	#CRYPTO_F_INT_DUP_EX_DATA
 106

	)

601 
	#CRYPTO_F_INT_FREE_EX_DATA
 107

	)

602 
	#CRYPTO_F_INT_NEW_EX_DATA
 108

	)

605 
	#CRYPTO_R_FIPS_MODE_NOT_SUPPORTED
 101

	)

606 
	#CRYPTO_R_NO_DYNLOCK_CREATE_CALLBACK
 100

	)

608 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/err.h

112 #i‚de‡
HEADER_ERR_H


113 
	#HEADER_ERR_H


	)

115 
	~<›ís¶/e_os2.h
>

117 #i‚de‡
OPENSSL_NO_FP_API


118 
	~<°dio.h
>

119 
	~<°dlib.h
>

122 
	~<›ís¶/os¶_typ.h
>

123 #i‚de‡
OPENSSL_NO_BIO


124 
	~<›ís¶/bio.h
>

126 #i‚de‡
OPENSSL_NO_LHASH


127 
	~<›ís¶/lhash.h
>

130 #ifdef 
__˝lu•lus


134 #i‚de‡
OPENSSL_NO_ERR


135 
	#ERR_PUT_îr‹
(
a
,
b
,
c
,
d
,
e
Ë
	`ERR_put_îr‹
◊,b,c,d,e)

	)

137 
	#ERR_PUT_îr‹
(
a
,
b
,
c
,
d
,
e
Ë
	`ERR_put_îr‹
◊,b,c,
NULL
,0)

	)

140 
	~<î∫o.h
>

142 
	#ERR_TXT_MALLOCED
 0x01

	)

143 
	#ERR_TXT_STRING
 0x02

	)

145 
	#ERR_FLAG_MARK
 0x01

	)

147 
	#ERR_NUM_ERRORS
 16

	)

148 
	sîr_°©e_°


150 
CRYPTO_THREADID
 
tid
;

151 
îr_Êags
[
ERR_NUM_ERRORS
];

152 
îr_buf„r
[
ERR_NUM_ERRORS
];

153 *
îr_d©a
[
ERR_NUM_ERRORS
];

154 
îr_d©a_Êags
[
ERR_NUM_ERRORS
];

155 c⁄° *
îr_fûe
[
ERR_NUM_ERRORS
];

156 
îr_löe
[
ERR_NUM_ERRORS
];

157 
t›
,
bŸtom
;

158 } 
	tERR_STATE
;

161 
	#ERR_LIB_NONE
 1

	)

162 
	#ERR_LIB_SYS
 2

	)

163 
	#ERR_LIB_BN
 3

	)

164 
	#ERR_LIB_RSA
 4

	)

165 
	#ERR_LIB_DH
 5

	)

166 
	#ERR_LIB_EVP
 6

	)

167 
	#ERR_LIB_BUF
 7

	)

168 
	#ERR_LIB_OBJ
 8

	)

169 
	#ERR_LIB_PEM
 9

	)

170 
	#ERR_LIB_DSA
 10

	)

171 
	#ERR_LIB_X509
 11

	)

173 
	#ERR_LIB_ASN1
 13

	)

174 
	#ERR_LIB_CONF
 14

	)

175 
	#ERR_LIB_CRYPTO
 15

	)

176 
	#ERR_LIB_EC
 16

	)

177 
	#ERR_LIB_SSL
 20

	)

183 
	#ERR_LIB_BIO
 32

	)

184 
	#ERR_LIB_PKCS7
 33

	)

185 
	#ERR_LIB_X509V3
 34

	)

186 
	#ERR_LIB_PKCS12
 35

	)

187 
	#ERR_LIB_RAND
 36

	)

188 
	#ERR_LIB_DSO
 37

	)

189 
	#ERR_LIB_ENGINE
 38

	)

190 
	#ERR_LIB_OCSP
 39

	)

191 
	#ERR_LIB_UI
 40

	)

192 
	#ERR_LIB_COMP
 41

	)

193 
	#ERR_LIB_ECDSA
 42

	)

194 
	#ERR_LIB_ECDH
 43

	)

195 
	#ERR_LIB_STORE
 44

	)

196 
	#ERR_LIB_FIPS
 45

	)

197 
	#ERR_LIB_CMS
 46

	)

198 
	#ERR_LIB_TS
 47

	)

199 
	#ERR_LIB_HMAC
 48

	)

200 
	#ERR_LIB_JPAKE
 49

	)

202 
	#ERR_LIB_USER
 128

	)

204 
	#SYSîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_SYS
,(f),‘),
__FILE__
,
__LINE__
)

	)

205 
	#BNîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_BN
,(f),‘),
__FILE__
,
__LINE__
)

	)

206 
	#RSAîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_RSA
,(f),‘),
__FILE__
,
__LINE__
)

	)

207 
	#DHîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_DH
,(f),‘),
__FILE__
,
__LINE__
)

	)

208 
	#EVPîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_EVP
,(f),‘),
__FILE__
,
__LINE__
)

	)

209 
	#BUFîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_BUF
,(f),‘),
__FILE__
,
__LINE__
)

	)

210 
	#OBJîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_OBJ
,(f),‘),
__FILE__
,
__LINE__
)

	)

211 
	#PEMîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_PEM
,(f),‘),
__FILE__
,
__LINE__
)

	)

212 
	#DSAîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_DSA
,(f),‘),
__FILE__
,
__LINE__
)

	)

213 
	#X509îr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_X509
,(f),‘),
__FILE__
,
__LINE__
)

	)

214 
	#ASN1îr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_ASN1
,(f),‘),
__FILE__
,
__LINE__
)

	)

215 
	#CONFîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_CONF
,(f),‘),
__FILE__
,
__LINE__
)

	)

216 
	#CRYPTOîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_CRYPTO
,(f),‘),
__FILE__
,
__LINE__
)

	)

217 
	#ECîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_EC
,(f),‘),
__FILE__
,
__LINE__
)

	)

218 
	#SSLîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_SSL
,(f),‘),
__FILE__
,
__LINE__
)

	)

219 
	#BIOîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_BIO
,(f),‘),
__FILE__
,
__LINE__
)

	)

220 
	#PKCS7îr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_PKCS7
,(f),‘),
__FILE__
,
__LINE__
)

	)

221 
	#X509V3îr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_X509V3
,(f),‘),
__FILE__
,
__LINE__
)

	)

222 
	#PKCS12îr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_PKCS12
,(f),‘),
__FILE__
,
__LINE__
)

	)

223 
	#RANDîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_RAND
,(f),‘),
__FILE__
,
__LINE__
)

	)

224 
	#DSOîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_DSO
,(f),‘),
__FILE__
,
__LINE__
)

	)

225 
	#ENGINEîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_ENGINE
,(f),‘),
__FILE__
,
__LINE__
)

	)

226 
	#OCSPîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_OCSP
,(f),‘),
__FILE__
,
__LINE__
)

	)

227 
	#UIîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_UI
,(f),‘),
__FILE__
,
__LINE__
)

	)

228 
	#COMPîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_COMP
,(f),‘),
__FILE__
,
__LINE__
)

	)

229 
	#ECDSAîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_ECDSA
,(f),‘),
__FILE__
,
__LINE__
)

	)

230 
	#ECDHîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_ECDH
,(f),‘),
__FILE__
,
__LINE__
)

	)

231 
	#STOREîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_STORE
,(f),‘),
__FILE__
,
__LINE__
)

	)

232 
	#FIPSîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_FIPS
,(f),‘),
__FILE__
,
__LINE__
)

	)

233 
	#CMSîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_CMS
,(f),‘),
__FILE__
,
__LINE__
)

	)

234 
	#TSîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_TS
,(f),‘),
__FILE__
,
__LINE__
)

	)

235 
	#HMACîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_HMAC
,(f),‘),
__FILE__
,
__LINE__
)

	)

236 
	#JPAKEîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_JPAKE
,(f),‘),
__FILE__
,
__LINE__
)

	)

240 
	#ERR_PACK
(
l
,
f
,
r
) ((((()l)&0xffL)*0x1000000)| \

241 (((()
f
)&0xfffL)*0x1000)| \

242 (((()
r
)&0xfffL)))

	)

243 
	#ERR_GET_LIB
(
l
Ë()((((Ó)>>24L)&0xffL)

	)

244 
	#ERR_GET_FUNC
(
l
Ë()((((Ó)>>12L)&0xfffL)

	)

245 
	#ERR_GET_REASON
(
l
Ë()(÷)&0xfffL)

	)

246 
	#ERR_FATAL_ERROR
(
l
Ë()(÷)&
ERR_R_FATAL
)

	)

250 
	#SYS_F_FOPEN
 1

	)

251 
	#SYS_F_CONNECT
 2

	)

252 
	#SYS_F_GETSERVBYNAME
 3

	)

253 
	#SYS_F_SOCKET
 4

	)

254 
	#SYS_F_IOCTLSOCKET
 5

	)

255 
	#SYS_F_BIND
 6

	)

256 
	#SYS_F_LISTEN
 7

	)

257 
	#SYS_F_ACCEPT
 8

	)

258 
	#SYS_F_WSASTARTUP
 9

	)

259 
	#SYS_F_OPENDIR
 10

	)

260 
	#SYS_F_FREAD
 11

	)

264 
	#ERR_R_SYS_LIB
 
ERR_LIB_SYS


	)

265 
	#ERR_R_BN_LIB
 
ERR_LIB_BN


	)

266 
	#ERR_R_RSA_LIB
 
ERR_LIB_RSA


	)

267 
	#ERR_R_DH_LIB
 
ERR_LIB_DH


	)

268 
	#ERR_R_EVP_LIB
 
ERR_LIB_EVP


	)

269 
	#ERR_R_BUF_LIB
 
ERR_LIB_BUF


	)

270 
	#ERR_R_OBJ_LIB
 
ERR_LIB_OBJ


	)

271 
	#ERR_R_PEM_LIB
 
ERR_LIB_PEM


	)

272 
	#ERR_R_DSA_LIB
 
ERR_LIB_DSA


	)

273 
	#ERR_R_X509_LIB
 
ERR_LIB_X509


	)

274 
	#ERR_R_ASN1_LIB
 
ERR_LIB_ASN1


	)

275 
	#ERR_R_CONF_LIB
 
ERR_LIB_CONF


	)

276 
	#ERR_R_CRYPTO_LIB
 
ERR_LIB_CRYPTO


	)

277 
	#ERR_R_EC_LIB
 
ERR_LIB_EC


	)

278 
	#ERR_R_SSL_LIB
 
ERR_LIB_SSL


	)

279 
	#ERR_R_BIO_LIB
 
ERR_LIB_BIO


	)

280 
	#ERR_R_PKCS7_LIB
 
ERR_LIB_PKCS7


	)

281 
	#ERR_R_X509V3_LIB
 
ERR_LIB_X509V3


	)

282 
	#ERR_R_PKCS12_LIB
 
ERR_LIB_PKCS12


	)

283 
	#ERR_R_RAND_LIB
 
ERR_LIB_RAND


	)

284 
	#ERR_R_DSO_LIB
 
ERR_LIB_DSO


	)

285 
	#ERR_R_ENGINE_LIB
 
ERR_LIB_ENGINE


	)

286 
	#ERR_R_OCSP_LIB
 
ERR_LIB_OCSP


	)

287 
	#ERR_R_UI_LIB
 
ERR_LIB_UI


	)

288 
	#ERR_R_COMP_LIB
 
ERR_LIB_COMP


	)

289 
	#ERR_R_ECDSA_LIB
 
ERR_LIB_ECDSA


	)

290 
	#ERR_R_ECDH_LIB
 
ERR_LIB_ECDH


	)

291 
	#ERR_R_STORE_LIB
 
ERR_LIB_STORE


	)

292 
	#ERR_R_TS_LIB
 
ERR_LIB_TS


	)

294 
	#ERR_R_NESTED_ASN1_ERROR
 58

	)

295 
	#ERR_R_BAD_ASN1_OBJECT_HEADER
 59

	)

296 
	#ERR_R_BAD_GET_ASN1_OBJECT_CALL
 60

	)

297 
	#ERR_R_EXPECTING_AN_ASN1_SEQUENCE
 61

	)

298 
	#ERR_R_ASN1_LENGTH_MISMATCH
 62

	)

299 
	#ERR_R_MISSING_ASN1_EOS
 63

	)

302 
	#ERR_R_FATAL
 64

	)

303 
	#ERR_R_MALLOC_FAILURE
 (1|
ERR_R_FATAL
)

	)

304 
	#ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED
 (2|
ERR_R_FATAL
)

	)

305 
	#ERR_R_PASSED_NULL_PARAMETER
 (3|
ERR_R_FATAL
)

	)

306 
	#ERR_R_INTERNAL_ERROR
 (4|
ERR_R_FATAL
)

	)

307 
	#ERR_R_DISABLED
 (5|
ERR_R_FATAL
)

	)

313 
	sERR_°rög_d©a_°


315 
îr‹
;

316 c⁄° *
°rög
;

317 } 
	tERR_STRING_DATA
;

319 
ERR_put_îr‹
(
lib
, 
func
,
ªas⁄
,c⁄° *
fûe
,
löe
);

320 
ERR_£t_îr‹_d©a
(*
d©a
,
Êags
);

322 
ERR_gë_îr‹
();

323 
ERR_gë_îr‹_löe
(c⁄° **
fûe
,*
löe
);

324 
ERR_gë_îr‹_löe_d©a
(c⁄° **
fûe
,*
löe
,

325 c⁄° **
d©a
, *
Êags
);

326 
ERR_≥ek_îr‹
();

327 
ERR_≥ek_îr‹_löe
(c⁄° **
fûe
,*
löe
);

328 
ERR_≥ek_îr‹_löe_d©a
(c⁄° **
fûe
,*
löe
,

329 c⁄° **
d©a
,*
Êags
);

330 
ERR_≥ek_œ°_îr‹
();

331 
ERR_≥ek_œ°_îr‹_löe
(c⁄° **
fûe
,*
löe
);

332 
ERR_≥ek_œ°_îr‹_löe_d©a
(c⁄° **
fûe
,*
löe
,

333 c⁄° **
d©a
,*
Êags
);

334 
ERR_˛ór_îr‹
();

335 *
ERR_îr‹_°rög
(
e
,*
buf
);

336 
ERR_îr‹_°rög_n
(
e
, *
buf
, 
size_t
 
Àn
);

337 c⁄° *
ERR_lib_îr‹_°rög
(
e
);

338 c⁄° *
ERR_func_îr‹_°rög
(
e
);

339 c⁄° *
ERR_ªas⁄_îr‹_°rög
(
e
);

340 
ERR_¥öt_îr‹s_cb
((*
cb
)(c⁄° *
°r
, 
size_t
 
Àn
, *
u
),

341 *
u
);

342 #i‚de‡
OPENSSL_NO_FP_API


343 
ERR_¥öt_îr‹s_Â
(
FILE
 *
Â
);

345 #i‚de‡
OPENSSL_NO_BIO


346 
ERR_¥öt_îr‹s
(
BIO
 *
bp
);

348 
ERR_add_îr‹_d©a
(
num
, ...);

349 
ERR_add_îr‹_vd©a
(
num
, 
va_li°
 
¨gs
);

350 
ERR_lﬂd_°rögs
(
lib
,
ERR_STRING_DATA
 
°r
[]);

351 
ERR_u∆ﬂd_°rögs
(
lib
,
ERR_STRING_DATA
 
°r
[]);

352 
ERR_lﬂd_ERR_°rögs
();

353 
ERR_lﬂd_¸y±o_°rögs
();

354 
ERR_‰ì_°rögs
();

356 
ERR_ªmove_thªad_°©e
(c⁄° 
CRYPTO_THREADID
 *
tid
);

357 #i‚de‡
OPENSSL_NO_DEPRECATED


358 
ERR_ªmove_°©e
(
pid
);

360 
ERR_STATE
 *
ERR_gë_°©e
();

362 #i‚de‡
OPENSSL_NO_LHASH


363 
LHASH_OF
(
ERR_STRING_DATA
Ë*
ERR_gë_°rög_èbÀ
();

364 
LHASH_OF
(
ERR_STATE
Ë*
ERR_gë_îr_°©e_èbÀ
();

365 
ERR_ªÀa£_îr_°©e_èbÀ
(
LHASH_OF
(
ERR_STATE
Ë**
hash
);

368 
ERR_gë_√xt_îr‹_libøry
();

370 
ERR_£t_m¨k
();

371 
ERR_p›_to_m¨k
();

377 c⁄° 
ERR_FNS
 *
ERR_gë_im∂emíèti⁄
();

380 
ERR_£t_im∂emíèti⁄
(c⁄° 
ERR_FNS
 *
‚s
);

382 #ifdef 
__˝lu•lus


	@/usr/include/openssl/ssl.h

143 #i‚de‡
HEADER_SSL_H


144 
	#HEADER_SSL_H


	)

146 
	~<›ís¶/e_os2.h
>

148 #i‚de‡
OPENSSL_NO_COMP


149 
	~<›ís¶/comp.h
>

151 #i‚de‡
OPENSSL_NO_BIO


152 
	~<›ís¶/bio.h
>

154 #i‚de‡
OPENSSL_NO_DEPRECATED


155 #i‚de‡
OPENSSL_NO_X509


156 
	~<›ís¶/x509.h
>

158 
	~<›ís¶/¸y±o.h
>

159 
	~<›ís¶/lhash.h
>

160 
	~<›ís¶/buf„r.h
>

162 
	~<›ís¶/≥m.h
>

163 
	~<›ís¶/hmac.h
>

165 
	~<›ís¶/ks¶.h
>

166 
	~<›ís¶/ß„°ack.h
>

167 
	~<›ís¶/symhacks.h
>

169 #ifde‡ 
__˝lu•lus


177 
	#SSL_SESSION_ASN1_VERSION
 0x0001

	)

180 
	#SSL_TXT_NULL_WITH_MD5
 
SSL2_TXT_NULL_WITH_MD5


	)

181 
	#SSL_TXT_RC4_128_WITH_MD5
 
SSL2_TXT_RC4_128_WITH_MD5


	)

182 
	#SSL_TXT_RC4_128_EXPORT40_WITH_MD5
 
SSL2_TXT_RC4_128_EXPORT40_WITH_MD5


	)

183 
	#SSL_TXT_RC2_128_CBC_WITH_MD5
 
SSL2_TXT_RC2_128_CBC_WITH_MD5


	)

184 
	#SSL_TXT_RC2_128_CBC_EXPORT40_WITH_MD5
 
SSL2_TXT_RC2_128_CBC_EXPORT40_WITH_MD5


	)

185 
	#SSL_TXT_IDEA_128_CBC_WITH_MD5
 
SSL2_TXT_IDEA_128_CBC_WITH_MD5


	)

186 
	#SSL_TXT_DES_64_CBC_WITH_MD5
 
SSL2_TXT_DES_64_CBC_WITH_MD5


	)

187 
	#SSL_TXT_DES_64_CBC_WITH_SHA
 
SSL2_TXT_DES_64_CBC_WITH_SHA


	)

188 
	#SSL_TXT_DES_192_EDE3_CBC_WITH_MD5
 
SSL2_TXT_DES_192_EDE3_CBC_WITH_MD5


	)

189 
	#SSL_TXT_DES_192_EDE3_CBC_WITH_SHA
 
SSL2_TXT_DES_192_EDE3_CBC_WITH_SHA


	)

193 
	#SSL_TXT_KRB5_DES_64_CBC_SHA
 
SSL3_TXT_KRB5_DES_64_CBC_SHA


	)

194 
	#SSL_TXT_KRB5_DES_192_CBC3_SHA
 
SSL3_TXT_KRB5_DES_192_CBC3_SHA


	)

195 
	#SSL_TXT_KRB5_RC4_128_SHA
 
SSL3_TXT_KRB5_RC4_128_SHA


	)

196 
	#SSL_TXT_KRB5_IDEA_128_CBC_SHA
 
SSL3_TXT_KRB5_IDEA_128_CBC_SHA


	)

197 
	#SSL_TXT_KRB5_DES_64_CBC_MD5
 
SSL3_TXT_KRB5_DES_64_CBC_MD5


	)

198 
	#SSL_TXT_KRB5_DES_192_CBC3_MD5
 
SSL3_TXT_KRB5_DES_192_CBC3_MD5


	)

199 
	#SSL_TXT_KRB5_RC4_128_MD5
 
SSL3_TXT_KRB5_RC4_128_MD5


	)

200 
	#SSL_TXT_KRB5_IDEA_128_CBC_MD5
 
SSL3_TXT_KRB5_IDEA_128_CBC_MD5


	)

202 
	#SSL_TXT_KRB5_DES_40_CBC_SHA
 
SSL3_TXT_KRB5_DES_40_CBC_SHA


	)

203 
	#SSL_TXT_KRB5_RC2_40_CBC_SHA
 
SSL3_TXT_KRB5_RC2_40_CBC_SHA


	)

204 
	#SSL_TXT_KRB5_RC4_40_SHA
 
SSL3_TXT_KRB5_RC4_40_SHA


	)

205 
	#SSL_TXT_KRB5_DES_40_CBC_MD5
 
SSL3_TXT_KRB5_DES_40_CBC_MD5


	)

206 
	#SSL_TXT_KRB5_RC2_40_CBC_MD5
 
SSL3_TXT_KRB5_RC2_40_CBC_MD5


	)

207 
	#SSL_TXT_KRB5_RC4_40_MD5
 
SSL3_TXT_KRB5_RC4_40_MD5


	)

209 
	#SSL_TXT_KRB5_DES_40_CBC_SHA
 
SSL3_TXT_KRB5_DES_40_CBC_SHA


	)

210 
	#SSL_TXT_KRB5_DES_40_CBC_MD5
 
SSL3_TXT_KRB5_DES_40_CBC_MD5


	)

211 
	#SSL_TXT_KRB5_DES_64_CBC_SHA
 
SSL3_TXT_KRB5_DES_64_CBC_SHA


	)

212 
	#SSL_TXT_KRB5_DES_64_CBC_MD5
 
SSL3_TXT_KRB5_DES_64_CBC_MD5


	)

213 
	#SSL_TXT_KRB5_DES_192_CBC3_SHA
 
SSL3_TXT_KRB5_DES_192_CBC3_SHA


	)

214 
	#SSL_TXT_KRB5_DES_192_CBC3_MD5
 
SSL3_TXT_KRB5_DES_192_CBC3_MD5


	)

215 
	#SSL_MAX_KRB5_PRINCIPAL_LENGTH
 256

	)

217 
	#SSL_MAX_SSL_SESSION_ID_LENGTH
 32

	)

218 
	#SSL_MAX_SID_CTX_LENGTH
 32

	)

220 
	#SSL_MIN_RSA_MODULUS_LENGTH_IN_BYTES
 (512/8)

	)

221 
	#SSL_MAX_KEY_ARG_LENGTH
 8

	)

222 
	#SSL_MAX_MASTER_KEY_LENGTH
 48

	)

227 
	#SSL_TXT_EXP40
 "EXPORT40"

	)

228 
	#SSL_TXT_EXP56
 "EXPORT56"

	)

229 
	#SSL_TXT_LOW
 "LOW"

	)

230 
	#SSL_TXT_MEDIUM
 "MEDIUM"

	)

231 
	#SSL_TXT_HIGH
 "HIGH"

	)

232 
	#SSL_TXT_FIPS
 "FIPS"

	)

234 
	#SSL_TXT_kFZA
 "kFZA"

	)

235 
	#SSL_TXT_aFZA
 "aFZA"

	)

236 
	#SSL_TXT_eFZA
 "eFZA"

	)

237 
	#SSL_TXT_FZA
 "FZA"

	)

239 
	#SSL_TXT_aNULL
 "aNULL"

	)

240 
	#SSL_TXT_eNULL
 "eNULL"

	)

241 
	#SSL_TXT_NULL
 "NULL"

	)

243 
	#SSL_TXT_kRSA
 "kRSA"

	)

244 
	#SSL_TXT_kDHr
 "kDHr"

	)

245 
	#SSL_TXT_kDHd
 "kDHd"

	)

246 
	#SSL_TXT_kDH
 "kDH"

	)

247 
	#SSL_TXT_kEDH
 "kEDH"

	)

248 
	#SSL_TXT_kKRB5
 "kKRB5"

	)

249 
	#SSL_TXT_kECDHr
 "kECDHr"

	)

250 
	#SSL_TXT_kECDHe
 "kECDHe"

	)

251 
	#SSL_TXT_kECDH
 "kECDH"

	)

252 
	#SSL_TXT_kEECDH
 "kEECDH"

	)

253 
	#SSL_TXT_kPSK
 "kPSK"

	)

254 
	#SSL_TXT_kGOST
 "kGOST"

	)

255 
	#SSL_TXT_kSRP
 "kSRP"

	)

257 
	#SSL_TXT_aRSA
 "aRSA"

	)

258 
	#SSL_TXT_aDSS
 "aDSS"

	)

259 
	#SSL_TXT_aDH
 "aDH"

	)

260 
	#SSL_TXT_aECDH
 "aECDH"

	)

261 
	#SSL_TXT_aKRB5
 "aKRB5"

	)

262 
	#SSL_TXT_aECDSA
 "aECDSA"

	)

263 
	#SSL_TXT_aPSK
 "aPSK"

	)

264 
	#SSL_TXT_aGOST94
 "aGOST94"

	)

265 
	#SSL_TXT_aGOST01
 "aGOST01"

	)

266 
	#SSL_TXT_aGOST
 "aGOST"

	)

267 
	#SSL_TXT_aSRP
 "aSRP"

	)

269 
	#SSL_TXT_DSS
 "DSS"

	)

270 
	#SSL_TXT_DH
 "DH"

	)

271 
	#SSL_TXT_EDH
 "EDH"

	)

272 
	#SSL_TXT_ADH
 "ADH"

	)

273 
	#SSL_TXT_RSA
 "RSA"

	)

274 
	#SSL_TXT_ECDH
 "ECDH"

	)

275 
	#SSL_TXT_EECDH
 "EECDH"

	)

276 
	#SSL_TXT_AECDH
 "AECDH"

	)

277 
	#SSL_TXT_ECDSA
 "ECDSA"

	)

278 
	#SSL_TXT_KRB5
 "KRB5"

	)

279 
	#SSL_TXT_PSK
 "PSK"

	)

280 
	#SSL_TXT_SRP
 "SRP"

	)

282 
	#SSL_TXT_DES
 "DES"

	)

283 
	#SSL_TXT_3DES
 "3DES"

	)

284 
	#SSL_TXT_RC4
 "RC4"

	)

285 
	#SSL_TXT_RC2
 "RC2"

	)

286 
	#SSL_TXT_IDEA
 "IDEA"

	)

287 
	#SSL_TXT_SEED
 "SEED"

	)

288 
	#SSL_TXT_AES128
 "AES128"

	)

289 
	#SSL_TXT_AES256
 "AES256"

	)

290 
	#SSL_TXT_AES
 "AES"

	)

291 
	#SSL_TXT_AES_GCM
 "AESGCM"

	)

292 
	#SSL_TXT_CAMELLIA128
 "CAMELLIA128"

	)

293 
	#SSL_TXT_CAMELLIA256
 "CAMELLIA256"

	)

294 
	#SSL_TXT_CAMELLIA
 "CAMELLIA"

	)

296 
	#SSL_TXT_MD5
 "MD5"

	)

297 
	#SSL_TXT_SHA1
 "SHA1"

	)

298 
	#SSL_TXT_SHA
 "SHA"

	)

299 
	#SSL_TXT_GOST94
 "GOST94"

	)

300 
	#SSL_TXT_GOST89MAC
 "GOST89MAC"

	)

301 
	#SSL_TXT_SHA256
 "SHA256"

	)

302 
	#SSL_TXT_SHA384
 "SHA384"

	)

304 
	#SSL_TXT_SSLV2
 "SSLv2"

	)

305 
	#SSL_TXT_SSLV3
 "SSLv3"

	)

306 
	#SSL_TXT_TLSV1
 "TLSv1"

	)

307 
	#SSL_TXT_TLSV1_1
 "TLSv1.1"

	)

308 
	#SSL_TXT_TLSV1_2
 "TLSv1.2"

	)

310 
	#SSL_TXT_EXP
 "EXP"

	)

311 
	#SSL_TXT_EXPORT
 "EXPORT"

	)

313 
	#SSL_TXT_ALL
 "ALL"

	)

329 
	#SSL_TXT_CMPALL
 "COMPLEMENTOFALL"

	)

330 
	#SSL_TXT_CMPDEF
 "COMPLEMENTOFDEFAULT"

	)

335 
	#SSL_DEFAULT_CIPHER_LIST
 "ALL:!EXPORT:!aNULL:!eNULL:!SSLv2"

	)

344 
	#SSL_SENT_SHUTDOWN
 1

	)

345 
	#SSL_RECEIVED_SHUTDOWN
 2

	)

347 #ifde‡
__˝lu•lus


351 #ifde‡ 
__˝lu•lus


355 #i‡(
deföed
(
OPENSSL_NO_RSA
Ë|| deföed(
OPENSSL_NO_MD5
)Ë&& !deföed(
OPENSSL_NO_SSL2
)

356 
	#OPENSSL_NO_SSL2


	)

359 
	#SSL_FILETYPE_ASN1
 
X509_FILETYPE_ASN1


	)

360 
	#SSL_FILETYPE_PEM
 
X509_FILETYPE_PEM


	)

365 
s¶_°
 *
	ts¶_¸ock_°
;

366 
és_£ssi⁄_tickë_ext_°
 
	tTLS_SESSION_TICKET_EXT
;

367 
s¶_mëhod_°
 
	tSSL_METHOD
;

368 
s¶_cùhî_°
 
	tSSL_CIPHER
;

369 
s¶_£ssi⁄_°
 
	tSSL_SESSION
;

371 
DECLARE_STACK_OF
(
SSL_CIPHER
)

374 
	s§ç_¥Ÿe˘i⁄_¥ofûe_°


376 c⁄° *
«me
;

377 
id
;

378 } 
	tSRTP_PROTECTION_PROFILE
;

380 
DECLARE_STACK_OF
(
SRTP_PROTECTION_PROFILE
)

382 (*
és_£ssi⁄_tickë_ext_cb_‚
)(
	tSSL
 *
	ts
, c⁄° *
	td©a
, 
	tÀn
, *
	t¨g
);

383 (*
és_£ssi⁄_£¸ë_cb_‚
)(
	tSSL
 *
	ts
, *
	t£¸ë
, *
	t£¸ë_Àn
, 
	tSTACK_OF
(
	tSSL_CIPHER
Ë*
	t≥î_cùhîs
, SSL_CIPHER **
	tcùhî
, *
	t¨g
);

386 #i‚de‡
OPENSSL_NO_SSL_INTERN


389 
	ss¶_cùhî_°


391 
vÆid
;

392 c⁄° *
«me
;

393 
id
;

396 
Æg‹ôhm_mkey
;

397 
Æg‹ôhm_auth
;

398 
Æg‹ôhm_íc
;

399 
Æg‹ôhm_mac
;

400 
Æg‹ôhm_s¶
;

402 
Ægo_°ªngth
;

403 
Æg‹ôhm2
;

404 
°ªngth_bôs
;

405 
Æg_bôs
;

410 
	ss¶_mëhod_°


412 
vîsi⁄
;

413 (*
s¶_√w
)(
SSL
 *
s
);

414 (*
s¶_˛ór
)(
SSL
 *
s
);

415 (*
s¶_‰ì
)(
SSL
 *
s
);

416 (*
s¶_ac˚±
)(
SSL
 *
s
);

417 (*
s¶_c⁄√˘
)(
SSL
 *
s
);

418 (*
s¶_ªad
)(
SSL
 *
s
,*
buf
,
Àn
);

419 (*
s¶_≥ek
)(
SSL
 *
s
,*
buf
,
Àn
);

420 (*
s¶_wrôe
)(
SSL
 *
s
,c⁄° *
buf
,
Àn
);

421 (*
s¶_shutdown
)(
SSL
 *
s
);

422 (*
s¶_ª√gŸüã
)(
SSL
 *
s
);

423 (*
s¶_ª√gŸüã_check
)(
SSL
 *
s
);

424 (*
s¶_gë_mesßge
)(
SSL
 *
s
, 
°1
, 
°n
, 
mt
, 

425 
max
, *
ok
);

426 (*
s¶_ªad_byãs
)(
SSL
 *
s
, 
ty≥
, *
buf
, 
Àn
,

427 
≥ek
);

428 (*
s¶_wrôe_byãs
)(
SSL
 *
s
, 
ty≥
, c⁄° *
buf_
, 
Àn
);

429 (*
s¶_di•©ch_Æît
)(
SSL
 *
s
);

430 (*
s¶_˘æ
)(
SSL
 *
s
,
cmd
,
œrg
,*
∑rg
);

431 (*
s¶_˘x_˘æ
)(
SSL_CTX
 *
˘x
,
cmd
,
œrg
,*
∑rg
);

432 c⁄° 
SSL_CIPHER
 *(*
gë_cùhî_by_ch¨
)(c⁄° *
±r
);

433 (*
put_cùhî_by_ch¨
)(c⁄° 
SSL_CIPHER
 *
cùhî
,*
±r
);

434 (*
s¶_≥ndög
)(c⁄° 
SSL
 *
s
);

435 (*
num_cùhîs
)();

436 c⁄° 
SSL_CIPHER
 *(*
gë_cùhî
)(
ncùhî
);

437 c⁄° 
s¶_mëhod_°
 *(*
gë_s¶_mëhod
)(
vîsi⁄
);

438 (*
gë_timeout
)();

439 
s¶3_íc_mëhod
 *
s¶3_íc
;

440 (*
s¶_vîsi⁄
)();

441 (*
s¶_ˇŒback_˘æ
)(
SSL
 *
s
, 
cb_id
, (*
Â
)());

442 (*
s¶_˘x_ˇŒback_˘æ
)(
SSL_CTX
 *
s
, 
cb_id
, (*
Â
)());

470 
	ss¶_£ssi⁄_°


472 
s¶_vîsi⁄
;

476 
key_¨g_Àngth
;

477 
key_¨g
[
SSL_MAX_KEY_ARG_LENGTH
];

478 
ma°î_key_Àngth
;

479 
ma°î_key
[
SSL_MAX_MASTER_KEY_LENGTH
];

481 
£ssi⁄_id_Àngth
;

482 
£ssi⁄_id
[
SSL_MAX_SSL_SESSION_ID_LENGTH
];

486 
sid_˘x_Àngth
;

487 
sid_˘x
[
SSL_MAX_SID_CTX_LENGTH
];

489 #i‚de‡
OPENSSL_NO_KRB5


490 
krb5_˛õ¡_¥öc_Àn
;

491 
krb5_˛õ¡_¥öc
[
SSL_MAX_KRB5_PRINCIPAL_LENGTH
];

493 #i‚de‡
OPENSSL_NO_PSK


494 *
psk_idítôy_höt
;

495 *
psk_idítôy
;

500 
nŸ_ªsumabÀ
;

503 
£ss_˚π_°
 *
£ss_˚π
;

509 
X509
 *
≥î
;

512 
vîify_ªsu…
;

514 
ª„ªn˚s
;

515 
timeout
;

516 
time
;

518 
com¥ess_mëh
;

520 c⁄° 
SSL_CIPHER
 *
cùhî
;

521 
cùhî_id
;

525 
STACK_OF
(
SSL_CIPHER
Ë*
cùhîs
;

527 
CRYPTO_EX_DATA
 
ex_d©a
;

531 
s¶_£ssi⁄_°
 *
¥ev
,*
√xt
;

532 #i‚de‡
OPENSSL_NO_TLSEXT


533 *
é£xt_ho°«me
;

534 #i‚de‡
OPENSSL_NO_EC


535 
size_t
 
é£xt_e˝oötf‹m©li°_Àngth
;

536 *
é£xt_e˝oötf‹m©li°
;

537 
size_t
 
é£xt_ñlùticcurvñi°_Àngth
;

538 *
é£xt_ñlùticcurvñi°
;

541 *
é£xt_tick
;

542 
size_t
 
é£xt_tickÀn
;

543 
é£xt_tick_li„time_höt
;

545 #i‚de‡
OPENSSL_NO_SRP


546 *
§p_u£∫ame
;

552 
	#SSL_OP_MICROSOFT_SESS_ID_BUG
 0x00000001L

	)

553 
	#SSL_OP_NETSCAPE_CHALLENGE_BUG
 0x00000002L

	)

555 
	#SSL_OP_LEGACY_SERVER_CONNECT
 0x00000004L

	)

556 
	#SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG
 0x00000008L

	)

557 
	#SSL_OP_TLSEXT_PADDING
 0x00000010L

	)

558 
	#SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER
 0x00000020L

	)

559 
	#SSL_OP_SAFARI_ECDHE_ECDSA_BUG
 0x00000040L

	)

560 
	#SSL_OP_SSLEAY_080_CLIENT_DH_BUG
 0x00000080L

	)

561 
	#SSL_OP_TLS_D5_BUG
 0x00000100L

	)

562 
	#SSL_OP_TLS_BLOCK_PADDING_BUG
 0x00000200L

	)

565 
	#SSL_OP_MSIE_SSLV2_RSA_PADDING
 0x0

	)

567 
	#SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG
 0x0

	)

574 
	#SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS
 0x00000800L

	)

578 
	#SSL_OP_ALL
 0x80000BFFL

	)

581 
	#SSL_OP_NO_QUERY_MTU
 0x00001000L

	)

583 
	#SSL_OP_COOKIE_EXCHANGE
 0x00002000L

	)

585 
	#SSL_OP_NO_TICKET
 0x00004000L

	)

587 
	#SSL_OP_CISCO_ANYCONNECT
 0x00008000L

	)

590 
	#SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION
 0x00010000L

	)

592 
	#SSL_OP_NO_COMPRESSION
 0x00020000L

	)

594 
	#SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION
 0x00040000L

	)

596 
	#SSL_OP_SINGLE_ECDH_USE
 0x00080000L

	)

598 
	#SSL_OP_SINGLE_DH_USE
 0x00100000L

	)

600 
	#SSL_OP_EPHEMERAL_RSA
 0x0

	)

603 
	#SSL_OP_CIPHER_SERVER_PREFERENCE
 0x00400000L

	)

608 
	#SSL_OP_TLS_ROLLBACK_BUG
 0x00800000L

	)

610 
	#SSL_OP_NO_SSLv2
 0x01000000L

	)

611 
	#SSL_OP_NO_SSLv3
 0x02000000L

	)

612 
	#SSL_OP_NO_TLSv1
 0x04000000L

	)

613 
	#SSL_OP_NO_TLSv1_2
 0x08000000L

	)

614 
	#SSL_OP_NO_TLSv1_1
 0x10000000L

	)

621 
	#SSL_OP_PKCS1_CHECK_1
 0x0

	)

622 
	#SSL_OP_PKCS1_CHECK_2
 0x0

	)

624 
	#SSL_OP_NETSCAPE_CA_DN_BUG
 0x20000000L

	)

625 
	#SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG
 0x40000000L

	)

630 
	#SSL_OP_CRYPTOPRO_TLSEXT_BUG
 0x80000000L

	)

634 
	#SSL_MODE_ENABLE_PARTIAL_WRITE
 0x00000001L

	)

639 
	#SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER
 0x00000002L

	)

642 
	#SSL_MODE_AUTO_RETRY
 0x00000004L

	)

644 
	#SSL_MODE_NO_AUTO_CHAIN
 0x00000008L

	)

648 
	#SSL_MODE_RELEASE_BUFFERS
 0x00000010L

	)

653 
	#SSL_MODE_SEND_CLIENTHELLO_TIME
 0x00000020L

	)

654 
	#SSL_MODE_SEND_SERVERHELLO_TIME
 0x00000040L

	)

663 
	#SSL_MODE_SEND_FALLBACK_SCSV
 0x00000080L

	)

668 
	#SSL_CTX_£t_›ti⁄s
(
˘x
,
›
) \

669 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_OPTIONS
,(
›
),
NULL
)

	)

670 
	#SSL_CTX_˛ór_›ti⁄s
(
˘x
,
›
) \

671 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_CLEAR_OPTIONS
,(
›
),
NULL
)

	)

672 
	#SSL_CTX_gë_›ti⁄s
(
˘x
) \

673 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_OPTIONS
,0,
NULL
)

	)

674 
	#SSL_£t_›ti⁄s
(
s¶
,
›
) \

675 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_OPTIONS
,(
›
),
NULL
)

	)

676 
	#SSL_˛ór_›ti⁄s
(
s¶
,
›
) \

677 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_CLEAR_OPTIONS
,(
›
),
NULL
)

	)

678 
	#SSL_gë_›ti⁄s
(
s¶
) \

679 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_OPTIONS
,0,
NULL
)

	)

681 
	#SSL_CTX_£t_mode
(
˘x
,
›
) \

682 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_MODE
,(
›
),
NULL
)

	)

683 
	#SSL_CTX_˛ór_mode
(
˘x
,
›
) \

684 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_CLEAR_MODE
,(
›
),
NULL
)

	)

685 
	#SSL_CTX_gë_mode
(
˘x
) \

686 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_MODE
,0,
NULL
)

	)

687 
	#SSL_˛ór_mode
(
s¶
,
›
) \

688 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_CLEAR_MODE
,(
›
),
NULL
)

	)

689 
	#SSL_£t_mode
(
s¶
,
›
) \

690 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_MODE
,(
›
),
NULL
)

	)

691 
	#SSL_gë_mode
(
s¶
) \

692 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_MODE
,0,
NULL
)

	)

693 
	#SSL_£t_mtu
(
s¶
, 
mtu
) \

694 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_SET_MTU
,(
mtu
),
NULL
)

	)

695 
	#DTLS_£t_lök_mtu
(
s¶
, 
mtu
) \

696 
	`SSL_˘æ
((
s¶
),
DTLS_CTRL_SET_LINK_MTU
,(
mtu
),
NULL
)

	)

697 
	#DTLS_gë_lök_mö_mtu
(
s¶
) \

698 
	`SSL_˘æ
((
s¶
),
DTLS_CTRL_GET_LINK_MIN_MTU
,0,
NULL
)

	)

700 
	#SSL_gë_£cuª_ª√gŸüti⁄_suµ‹t
(
s¶
) \

701 
	`SSL_˘æ
((
s¶
), 
SSL_CTRL_GET_RI_SUPPORT
, 0, 
NULL
)

	)

703 #i‚de‡
OPENSSL_NO_HEARTBEATS


704 
	#SSL_hóπbót
(
s¶
) \

705 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_TLS_EXT_SEND_HEARTBEAT
,0,
NULL
)

	)

708 
SSL_CTX_£t_msg_ˇŒback
(
SSL_CTX
 *
˘x
, (*
cb
)(
wrôe_p
, 
vîsi⁄
, 
c⁄ã¡_ty≥
, c⁄° *
buf
, 
size_t
 
Àn
, 
SSL
 *
s¶
, *
¨g
));

709 
SSL_£t_msg_ˇŒback
(
SSL
 *
s¶
, (*
cb
)(
wrôe_p
, 
vîsi⁄
, 
c⁄ã¡_ty≥
, c⁄° *
buf
, 
size_t
 
Àn
, SSL *s¶, *
¨g
));

710 
	#SSL_CTX_£t_msg_ˇŒback_¨g
(
˘x
, 
¨g
Ë
	`SSL_CTX_˘æ
((˘x), 
SSL_CTRL_SET_MSG_CALLBACK_ARG
, 0, (¨g))

	)

711 
	#SSL_£t_msg_ˇŒback_¨g
(
s¶
, 
¨g
Ë
	`SSL_˘æ
((s¶), 
SSL_CTRL_SET_MSG_CALLBACK_ARG
, 0, (¨g))

	)

713 #i‚de‡
OPENSSL_NO_SRP


715 #i‚de‡
OPENSSL_NO_SSL_INTERN


717 
	s§p_˘x_°


720 *
SRP_cb_¨g
;

722 (*
TLS_ext_§p_u£∫ame_ˇŒback
)(
SSL
 *, *, *);

724 (*
SRP_vîify_∑øm_ˇŒback
)(
SSL
 *, *);

726 *(*
SRP_give_§p_˛õ¡_pwd_ˇŒback
)(
SSL
 *, *);

728 *
logö
;

729 
BIGNUM
 *
N
,*
g
,*
s
,*
B
,*
A
;

730 
BIGNUM
 *
a
,*
b
,*
v
;

731 *
öfo
;

732 
°ªngth
;

734 
§p_Mask
;

735 } 
	tSRP_CTX
;

740 
SSL_SRP_CTX_öô
(
SSL
 *
s
);

741 
SSL_CTX_SRP_CTX_öô
(
SSL_CTX
 *
˘x
);

742 
SSL_SRP_CTX_‰ì
(
SSL
 *
˘x
);

743 
SSL_CTX_SRP_CTX_‰ì
(
SSL_CTX
 *
˘x
);

744 
SSL_§p_£rvî_∑øm_wôh_u£∫ame
(
SSL
 *
s
, *
ad
);

745 
SRP_gíî©e_£rvî_ma°î_£¸ë
(
SSL
 *
s
,*
ma°î_key
);

746 
SRP_CÆc_A_∑øm
(
SSL
 *
s
);

747 
SRP_gíî©e_˛õ¡_ma°î_£¸ë
(
SSL
 *
s
,*
ma°î_key
);

751 #i‡
deföed
(
OPENSSL_SYS_MSDOS
Ë&& !deföed(
OPENSSL_SYS_WIN32
)

752 
	#SSL_MAX_CERT_LIST_DEFAULT
 1024*30

	)

754 
	#SSL_MAX_CERT_LIST_DEFAULT
 1024*100

	)

757 
	#SSL_SESSION_CACHE_MAX_SIZE_DEFAULT
 (1024*20)

	)

772 (*
GEN_SESSION_CB
)(c⁄° 
	tSSL
 *
	ts¶
, *
	tid
,

773 *
	tid_Àn
);

775 
s¶_comp_°
 
	tSSL_COMP
;

777 #i‚de‡
OPENSSL_NO_SSL_INTERN


779 
	ss¶_comp_°


781 
id
;

782 c⁄° *
«me
;

783 #i‚de‡
OPENSSL_NO_COMP


784 
COMP_METHOD
 *
mëhod
;

786 *
mëhod
;

790 
DECLARE_STACK_OF
(
SSL_COMP
)

791 
DECLARE_LHASH_OF
(
SSL_SESSION
);

793 
	ss¶_˘x_°


795 c⁄° 
SSL_METHOD
 *
mëhod
;

797 
STACK_OF
(
SSL_CIPHER
Ë*
cùhî_li°
;

799 
STACK_OF
(
SSL_CIPHER
Ë*
cùhî_li°_by_id
;

801 
x509_°‹e_°
 *
˚π_°‹e
;

802 
LHASH_OF
(
SSL_SESSION
Ë*
£ssi⁄s
;

805 
£ssi⁄_ˇche_size
;

806 
s¶_£ssi⁄_°
 *
£ssi⁄_ˇche_hód
;

807 
s¶_£ssi⁄_°
 *
£ssi⁄_ˇche_èû
;

814 
£ssi⁄_ˇche_mode
;

819 
£ssi⁄_timeout
;

829 (*
√w_£ssi⁄_cb
)(
s¶_°
 *
s¶
,
SSL_SESSION
 *
£ss
);

830 (*
ªmove_£ssi⁄_cb
)(
s¶_˘x_°
 *
˘x
,
SSL_SESSION
 *
£ss
);

831 
SSL_SESSION
 *(*
gë_£ssi⁄_cb
)(
s¶_°
 *
s¶
,

832 *
d©a
,
Àn
,*
c›y
);

836 
£ss_c⁄√˘
;

837 
£ss_c⁄√˘_ª√gŸüã
;

838 
£ss_c⁄√˘_good
;

839 
£ss_ac˚±
;

840 
£ss_ac˚±_ª√gŸüã
;

841 
£ss_ac˚±_good
;

842 
£ss_miss
;

843 
£ss_timeout
;

844 
£ss_ˇche_fuŒ
;

845 
£ss_hô
;

846 
£ss_cb_hô
;

852 } 
°©s
;

854 
ª„ªn˚s
;

857 (*
≠p_vîify_ˇŒback
)(
X509_STORE_CTX
 *, *);

858 *
≠p_vîify_¨g
;

863 
≥m_∑ssw‹d_cb
 *
deÁu…_∑sswd_ˇŒback
;

866 *
deÁu…_∑sswd_ˇŒback_u£rd©a
;

869 (*
˛õ¡_˚π_cb
)(
SSL
 *
s¶
, 
X509
 **
x509
, 
EVP_PKEY
 **
pkey
);

872 (*
≠p_gí_cookõ_cb
)(
SSL
 *
s¶
, *
cookõ
,

873 *
cookõ_Àn
);

876 (*
≠p_vîify_cookõ_cb
)(
SSL
 *
s¶
, *
cookõ
,

877 
cookõ_Àn
);

879 
CRYPTO_EX_DATA
 
ex_d©a
;

881 c⁄° 
EVP_MD
 *
rß_md5
;

882 c⁄° 
EVP_MD
 *
md5
;

883 c⁄° 
EVP_MD
 *
sha1
;

885 
STACK_OF
(
X509
Ë*
exåa_˚πs
;

886 
STACK_OF
(
SSL_COMP
Ë*
comp_mëhods
;

891 (*
öfo_ˇŒback
)(c⁄° 
SSL
 *
s¶
,
ty≥
,
vÆ
);

894 
STACK_OF
(
X509_NAME
Ë*
˛õ¡_CA
;

899 
›ti⁄s
;

900 
mode
;

901 
max_˚π_li°
;

903 
˚π_°
 *
˚π
;

904 
ªad_ahód
;

907 (*
msg_ˇŒback
)(
wrôe_p
, 
vîsi⁄
, 
c⁄ã¡_ty≥
, c⁄° *
buf
, 
size_t
 
Àn
, 
SSL
 *
s¶
, *
¨g
);

908 *
msg_ˇŒback_¨g
;

910 
vîify_mode
;

911 
sid_˘x_Àngth
;

912 
sid_˘x
[
SSL_MAX_SID_CTX_LENGTH
];

913 (*
deÁu…_vîify_ˇŒback
)(
ok
,
X509_STORE_CTX
 *
˘x
);

916 
GEN_SESSION_CB
 
gíî©e_£ssi⁄_id
;

918 
X509_VERIFY_PARAM
 *
∑øm
;

921 
puΩo£
;

922 
åu°
;

925 
quõt_shutdown
;

931 
max_£nd_‰agmít
;

933 #i‚de‡
OPENSSL_NO_ENGINE


936 
ENGINE
 *
˛õ¡_˚π_ígöe
;

939 #i‚de‡
OPENSSL_NO_TLSEXT


941 (*
é£xt_£rvî«me_ˇŒback
)(
SSL
*, *, *);

942 *
é£xt_£rvî«me_¨g
;

944 
é£xt_tick_key_«me
[16];

945 
é£xt_tick_hmac_key
[16];

946 
é£xt_tick_´s_key
[16];

948 (*
é£xt_tickë_key_cb
)(
SSL
 *
s¶
,

949 *
«me
, *
iv
,

950 
EVP_CIPHER_CTX
 *
e˘x
,

951 
HMAC_CTX
 *
h˘x
, 
íc
);

955 (*
é£xt_°©us_cb
)(
SSL
 *
s¶
, *
¨g
);

956 *
é£xt_°©us_¨g
;

959 (*
é£xt_›aque_¥f_öput_ˇŒback
)(
SSL
 *, *
≥îöput
, 
size_t
 
Àn
, *
¨g
);

960 *
é£xt_›aque_¥f_öput_ˇŒback_¨g
;

963 #i‚de‡
OPENSSL_NO_PSK


964 *
psk_idítôy_höt
;

965 (*
psk_˛õ¡_ˇŒback
)(
SSL
 *
s¶
, c⁄° *
höt
, *
idítôy
,

966 
max_idítôy_Àn
, *
psk
,

967 
max_psk_Àn
);

968 (*
psk_£rvî_ˇŒback
)(
SSL
 *
s¶
, c⁄° *
idítôy
,

969 *
psk
, 
max_psk_Àn
);

972 #i‚de‡
OPENSSL_NO_BUF_FREELISTS


973 
	#SSL_MAX_BUF_FREELIST_LEN_DEFAULT
 32

	)

974 
‰ìli°_max_Àn
;

975 
s¶3_buf_‰ìli°_°
 *
wbuf_‰ìli°
;

976 
s¶3_buf_‰ìli°_°
 *
rbuf_‰ìli°
;

978 #i‚de‡
OPENSSL_NO_SRP


979 
SRP_CTX
 
§p_˘x
;

982 #i‚de‡
OPENSSL_NO_TLSEXT


984 #i‚de‡
OPENSSL_NO_NEXTPROTONEG


990 (*
√xt_¥Ÿos_advîti£d_cb
)(
SSL
 *
s
, c⁄° **
buf
,

991 *
Àn
, *
¨g
);

992 *
√xt_¥Ÿos_advîti£d_cb_¨g
;

995 (*
√xt_¥Ÿo_£À˘_cb
)(
SSL
 *
s
, **
out
,

996 *
ouéí
,

997 c⁄° *
ö
,

998 
öÀn
,

999 *
¨g
);

1000 *
√xt_¥Ÿo_£À˘_cb_¨g
;

1003 
STACK_OF
(
SRTP_PROTECTION_PROFILE
Ë*
§ç_¥ofûes
;

1009 
	#SSL_SESS_CACHE_OFF
 0x0000

	)

1010 
	#SSL_SESS_CACHE_CLIENT
 0x0001

	)

1011 
	#SSL_SESS_CACHE_SERVER
 0x0002

	)

1012 
	#SSL_SESS_CACHE_BOTH
 (
SSL_SESS_CACHE_CLIENT
|
SSL_SESS_CACHE_SERVER
)

	)

1013 
	#SSL_SESS_CACHE_NO_AUTO_CLEAR
 0x0080

	)

1015 
	#SSL_SESS_CACHE_NO_INTERNAL_LOOKUP
 0x0100

	)

1016 
	#SSL_SESS_CACHE_NO_INTERNAL_STORE
 0x0200

	)

1017 
	#SSL_SESS_CACHE_NO_INTERNAL
 \

1018 (
SSL_SESS_CACHE_NO_INTERNAL_LOOKUP
|
SSL_SESS_CACHE_NO_INTERNAL_STORE
)

	)

1020 
LHASH_OF
(
SSL_SESSION
Ë*
SSL_CTX_£ssi⁄s
(
SSL_CTX
 *
˘x
);

1021 
	#SSL_CTX_£ss_numbî
(
˘x
) \

1022 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_NUMBER
,0,
NULL
)

	)

1023 
	#SSL_CTX_£ss_c⁄√˘
(
˘x
) \

1024 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_CONNECT
,0,
NULL
)

	)

1025 
	#SSL_CTX_£ss_c⁄√˘_good
(
˘x
) \

1026 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_CONNECT_GOOD
,0,
NULL
)

	)

1027 
	#SSL_CTX_£ss_c⁄√˘_ª√gŸüã
(
˘x
) \

1028 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_CONNECT_RENEGOTIATE
,0,
NULL
)

	)

1029 
	#SSL_CTX_£ss_ac˚±
(
˘x
) \

1030 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_ACCEPT
,0,
NULL
)

	)

1031 
	#SSL_CTX_£ss_ac˚±_ª√gŸüã
(
˘x
) \

1032 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_ACCEPT_RENEGOTIATE
,0,
NULL
)

	)

1033 
	#SSL_CTX_£ss_ac˚±_good
(
˘x
) \

1034 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_ACCEPT_GOOD
,0,
NULL
)

	)

1035 
	#SSL_CTX_£ss_hôs
(
˘x
) \

1036 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_HIT
,0,
NULL
)

	)

1037 
	#SSL_CTX_£ss_cb_hôs
(
˘x
) \

1038 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_CB_HIT
,0,
NULL
)

	)

1039 
	#SSL_CTX_£ss_mis£s
(
˘x
) \

1040 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_MISSES
,0,
NULL
)

	)

1041 
	#SSL_CTX_£ss_timeouts
(
˘x
) \

1042 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_TIMEOUTS
,0,
NULL
)

	)

1043 
	#SSL_CTX_£ss_ˇche_fuŒ
(
˘x
) \

1044 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_CACHE_FULL
,0,
NULL
)

	)

1046 
SSL_CTX_£ss_£t_√w_cb
(
SSL_CTX
 *
˘x
, (*
√w_£ssi⁄_cb
)(
s¶_°
 *
s¶
,
SSL_SESSION
 *
£ss
));

1047 (*
SSL_CTX_£ss_gë_√w_cb
(
SSL_CTX
 *
˘x
))(
s¶_°
 *
s¶
, 
SSL_SESSION
 *
£ss
);

1048 
SSL_CTX_£ss_£t_ªmove_cb
(
SSL_CTX
 *
˘x
, (*
ªmove_£ssi⁄_cb
)(
s¶_˘x_°
 *˘x,
SSL_SESSION
 *
£ss
));

1049 (*
SSL_CTX_£ss_gë_ªmove_cb
(
SSL_CTX
 *
˘x
))(
s¶_˘x_°
 *˘x, 
SSL_SESSION
 *
£ss
);

1050 
SSL_CTX_£ss_£t_gë_cb
(
SSL_CTX
 *
˘x
, 
SSL_SESSION
 *(*
gë_£ssi⁄_cb
)(
s¶_°
 *
s¶
, *
d©a
,
Àn
,*
c›y
));

1051 
SSL_SESSION
 *(*
SSL_CTX_£ss_gë_gë_cb
(
SSL_CTX
 *
˘x
))(
s¶_°
 *
s¶
, *
D©a
, 
Àn
, *
c›y
);

1052 
SSL_CTX_£t_öfo_ˇŒback
(
SSL_CTX
 *
˘x
, (*
cb
)(c⁄° 
SSL
 *
s¶
,
ty≥
,
vÆ
));

1053 (*
SSL_CTX_gë_öfo_ˇŒback
(
SSL_CTX
 *
˘x
))(c⁄° 
SSL
 *
s¶
,
ty≥
,
vÆ
);

1054 
SSL_CTX_£t_˛õ¡_˚π_cb
(
SSL_CTX
 *
˘x
, (*
˛õ¡_˚π_cb
)(
SSL
 *
s¶
, 
X509
 **
x509
, 
EVP_PKEY
 **
pkey
));

1055 (*
SSL_CTX_gë_˛õ¡_˚π_cb
(
SSL_CTX
 *
˘x
))(
SSL
 *
s¶
, 
X509
 **
x509
, 
EVP_PKEY
 **
pkey
);

1056 #i‚de‡
OPENSSL_NO_ENGINE


1057 
SSL_CTX_£t_˛õ¡_˚π_ígöe
(
SSL_CTX
 *
˘x
, 
ENGINE
 *
e
);

1059 
SSL_CTX_£t_cookõ_gíî©e_cb
(
SSL_CTX
 *
˘x
, (*
≠p_gí_cookõ_cb
)(
SSL
 *
s¶
, *
cookõ
, *
cookõ_Àn
));

1060 
SSL_CTX_£t_cookõ_vîify_cb
(
SSL_CTX
 *
˘x
, (*
≠p_vîify_cookõ_cb
)(
SSL
 *
s¶
, *
cookõ
, 
cookõ_Àn
));

1061 #i‚de‡
OPENSSL_NO_NEXTPROTONEG


1062 
SSL_CTX_£t_√xt_¥Ÿos_advîti£d_cb
(
SSL_CTX
 *
s
,

1063 (*
cb
Ë(
SSL
 *
s¶
,

1064 c⁄° **
out
,

1065 *
ouéí
,

1066 *
¨g
),

1067 *
¨g
);

1068 
SSL_CTX_£t_√xt_¥Ÿo_£À˘_cb
(
SSL_CTX
 *
s
,

1069 (*
cb
Ë(
SSL
 *
s¶
,

1070 **
out
,

1071 *
ouéí
,

1072 c⁄° *
ö
,

1073 
öÀn
,

1074 *
¨g
),

1075 *
¨g
);

1077 
SSL_£À˘_√xt_¥Ÿo
(**
out
, *
ouéí
,

1078 c⁄° *
ö
, 
öÀn
,

1079 c⁄° *
˛õ¡
, 
˛õ¡_Àn
);

1080 
SSL_gë0_√xt_¥Ÿo_√gŸüãd
(c⁄° 
SSL
 *
s
,

1081 c⁄° **
d©a
, *
Àn
);

1083 
	#OPENSSL_NPN_UNSUPPORTED
 0

	)

1084 
	#OPENSSL_NPN_NEGOTIATED
 1

	)

1085 
	#OPENSSL_NPN_NO_OVERLAP
 2

	)

1088 #i‚de‡
OPENSSL_NO_PSK


1091 
	#PSK_MAX_IDENTITY_LEN
 128

	)

1092 
	#PSK_MAX_PSK_LEN
 256

	)

1093 
SSL_CTX_£t_psk_˛õ¡_ˇŒback
(
SSL_CTX
 *
˘x
,

1094 (*
psk_˛õ¡_ˇŒback
)(
SSL
 *
s¶
, c⁄° *
höt
,

1095 *
idítôy
, 
max_idítôy_Àn
, *
psk
,

1096 
max_psk_Àn
));

1097 
SSL_£t_psk_˛õ¡_ˇŒback
(
SSL
 *
s¶
,

1098 (*
psk_˛õ¡_ˇŒback
)(
SSL
 *
s¶
, c⁄° *
höt
,

1099 *
idítôy
, 
max_idítôy_Àn
, *
psk
,

1100 
max_psk_Àn
));

1101 
SSL_CTX_£t_psk_£rvî_ˇŒback
(
SSL_CTX
 *
˘x
,

1102 (*
psk_£rvî_ˇŒback
)(
SSL
 *
s¶
, c⁄° *
idítôy
,

1103 *
psk
, 
max_psk_Àn
));

1104 
SSL_£t_psk_£rvî_ˇŒback
(
SSL
 *
s¶
,

1105 (*
psk_£rvî_ˇŒback
)(
SSL
 *
s¶
, c⁄° *
idítôy
,

1106 *
psk
, 
max_psk_Àn
));

1107 
SSL_CTX_u£_psk_idítôy_höt
(
SSL_CTX
 *
˘x
, c⁄° *
idítôy_höt
);

1108 
SSL_u£_psk_idítôy_höt
(
SSL
 *
s
, c⁄° *
idítôy_höt
);

1109 c⁄° *
SSL_gë_psk_idítôy_höt
(c⁄° 
SSL
 *
s
);

1110 c⁄° *
SSL_gë_psk_idítôy
(c⁄° 
SSL
 *
s
);

1113 
	#SSL_NOTHING
 1

	)

1114 
	#SSL_WRITING
 2

	)

1115 
	#SSL_READING
 3

	)

1116 
	#SSL_X509_LOOKUP
 4

	)

1119 
	#SSL_w™t_nŸhög
(
s
Ë(
	`SSL_w™t
(sË=
SSL_NOTHING
)

	)

1120 
	#SSL_w™t_ªad
(
s
Ë(
	`SSL_w™t
(sË=
SSL_READING
)

	)

1121 
	#SSL_w™t_wrôe
(
s
Ë(
	`SSL_w™t
(sË=
SSL_WRITING
)

	)

1122 
	#SSL_w™t_x509_lookup
(
s
Ë(
	`SSL_w™t
(sË=
SSL_X509_LOOKUP
)

	)

1124 
	#SSL_MAC_FLAG_READ_MAC_STREAM
 1

	)

1125 
	#SSL_MAC_FLAG_WRITE_MAC_STREAM
 2

	)

1127 #i‚de‡
OPENSSL_NO_SSL_INTERN


1129 
	ss¶_°


1134 
vîsi⁄
;

1135 
ty≥
;

1137 c⁄° 
SSL_METHOD
 *
mëhod
;

1143 #i‚de‡
OPENSSL_NO_BIO


1144 
BIO
 *
rbio
;

1145 
BIO
 *
wbio
;

1146 
BIO
 *
bbio
;

1149 *
rbio
;

1150 *
wbio
;

1151 *
bbio
;

1157 
rw°©e
;

1160 
ö_h™dshake
;

1161 (*
h™dshake_func
)(
SSL
 *);

1171 
£rvî
;

1173 
√w_£ssi⁄
;

1177 
quõt_shutdown
;

1178 
shutdown
;

1180 
°©e
;

1181 
r°©e
;

1183 
BUF_MEM
 *
öô_buf
;

1184 *
öô_msg
;

1185 
öô_num
;

1186 
öô_off
;

1189 *
∑ckë
;

1190 
∑ckë_Àngth
;

1192 
s¶2_°©e_°
 *
s2
;

1193 
s¶3_°©e_°
 *
s3
;

1194 
dés1_°©e_°
 *
d1
;

1196 
ªad_ahód
;

1200 (*
msg_ˇŒback
)(
wrôe_p
, 
vîsi⁄
, 
c⁄ã¡_ty≥
, c⁄° *
buf
, 
size_t
 
Àn
, 
SSL
 *
s¶
, *
¨g
);

1201 *
msg_ˇŒback_¨g
;

1203 
hô
;

1205 
X509_VERIFY_PARAM
 *
∑øm
;

1208 
puΩo£
;

1209 
åu°
;

1213 
STACK_OF
(
SSL_CIPHER
Ë*
cùhî_li°
;

1214 
STACK_OF
(
SSL_CIPHER
Ë*
cùhî_li°_by_id
;

1218 
mac_Êags
;

1219 
EVP_CIPHER_CTX
 *
íc_ªad_˘x
;

1220 
EVP_MD_CTX
 *
ªad_hash
;

1221 #i‚de‡
OPENSSL_NO_COMP


1222 
COMP_CTX
 *
ex∑nd
;

1224 *
ex∑nd
;

1227 
EVP_CIPHER_CTX
 *
íc_wrôe_˘x
;

1228 
EVP_MD_CTX
 *
wrôe_hash
;

1229 #i‚de‡
OPENSSL_NO_COMP


1230 
COMP_CTX
 *
com¥ess
;

1232 *
com¥ess
;

1239 
˚π_°
 *
˚π
;

1243 
sid_˘x_Àngth
;

1244 
sid_˘x
[
SSL_MAX_SID_CTX_LENGTH
];

1247 
SSL_SESSION
 *
£ssi⁄
;

1250 
GEN_SESSION_CB
 
gíî©e_£ssi⁄_id
;

1253 
vîify_mode
;

1255 (*
vîify_ˇŒback
)(
ok
,
X509_STORE_CTX
 *
˘x
);

1257 (*
öfo_ˇŒback
)(c⁄° 
SSL
 *
s¶
,
ty≥
,
vÆ
);

1259 
îr‹
;

1260 
îr‹_code
;

1262 #i‚de‡
OPENSSL_NO_KRB5


1263 
KSSL_CTX
 *
ks¶_˘x
;

1266 #i‚de‡
OPENSSL_NO_PSK


1267 (*
psk_˛õ¡_ˇŒback
)(
SSL
 *
s¶
, c⁄° *
höt
, *
idítôy
,

1268 
max_idítôy_Àn
, *
psk
,

1269 
max_psk_Àn
);

1270 (*
psk_£rvî_ˇŒback
)(
SSL
 *
s¶
, c⁄° *
idítôy
,

1271 *
psk
, 
max_psk_Àn
);

1274 
SSL_CTX
 *
˘x
;

1277 
debug
;

1280 
vîify_ªsu…
;

1281 
CRYPTO_EX_DATA
 
ex_d©a
;

1284 
STACK_OF
(
X509_NAME
Ë*
˛õ¡_CA
;

1286 
ª„ªn˚s
;

1287 
›ti⁄s
;

1288 
mode
;

1289 
max_˚π_li°
;

1290 
fú°_∑ckë
;

1291 
˛õ¡_vîsi⁄
;

1293 
max_£nd_‰agmít
;

1294 #i‚de‡
OPENSSL_NO_TLSEXT


1296 (*
é£xt_debug_cb
)(
SSL
 *
s
, 
˛õ¡_£rvî
, 
ty≥
,

1297 *
d©a
, 
Àn
,

1298 *
¨g
);

1299 *
é£xt_debug_¨g
;

1300 *
é£xt_ho°«me
;

1301 
£rvî«me_d⁄e
;

1308 
é£xt_°©us_ty≥
;

1310 
é£xt_°©us_ex≥˘ed
;

1312 
STACK_OF
(
OCSP_RESPID
Ë*
é£xt_oc•_ids
;

1313 
X509_EXTENSIONS
 *
é£xt_oc•_exts
;

1315 *
é£xt_oc•_ª•
;

1316 
é£xt_oc•_ª•Àn
;

1319 
é£xt_tickë_ex≥˘ed
;

1320 #i‚de‡
OPENSSL_NO_EC


1321 
size_t
 
é£xt_e˝oötf‹m©li°_Àngth
;

1322 *
é£xt_e˝oötf‹m©li°
;

1323 
size_t
 
é£xt_ñlùticcurvñi°_Àngth
;

1324 *
é£xt_ñlùticcurvñi°
;

1328 *
é£xt_›aque_¥f_öput
;

1329 
size_t
 
é£xt_›aque_¥f_öput_Àn
;

1332 
TLS_SESSION_TICKET_EXT
 *
é£xt_£ssi⁄_tickë
;

1335 
és_£ssi⁄_tickë_ext_cb_‚
 
és_£ssi⁄_tickë_ext_cb
;

1336 *
és_£ssi⁄_tickë_ext_cb_¨g
;

1339 
és_£ssi⁄_£¸ë_cb_‚
 
és_£ssi⁄_£¸ë_cb
;

1340 *
és_£ssi⁄_£¸ë_cb_¨g
;

1342 
SSL_CTX
 * 
öôül_˘x
;

1344 #i‚de‡
OPENSSL_NO_NEXTPROTONEG


1352 *
√xt_¥Ÿo_√gŸüãd
;

1353 
√xt_¥Ÿo_√gŸüãd_Àn
;

1356 
	#£ssi⁄_˘x
 
öôül_˘x


	)

1358 
STACK_OF
(
SRTP_PROTECTION_PROFILE
Ë*
§ç_¥ofûes
;

1359 
SRTP_PROTECTION_PROFILE
 *
§ç_¥ofûe
;

1361 
é£xt_hóπbót
;

1366 
é£xt_hb_≥ndög
;

1367 
é£xt_hb_£q
;

1369 
	#£ssi⁄_˘x
 
˘x


	)

1372 
ª√gŸüã
;

1376 #i‚de‡
OPENSSL_NO_SRP


1377 
SRP_CTX
 
§p_˘x
;

1383 #ifde‡
__˝lu•lus


1387 
	~<›ís¶/s¶2.h
>

1388 
	~<›ís¶/s¶3.h
>

1389 
	~<›ís¶/és1.h
>

1390 
	~<›ís¶/dés1.h
>

1391 
	~<›ís¶/s¶23.h
>

1392 
	~<›ís¶/§ç.h
>

1394 #ifde‡ 
__˝lu•lus


1399 
	#SSL_£t_≠p_d©a
(
s
,
¨g
Ë(
	`SSL_£t_ex_d©a
(s,0,(*Ôrg))

	)

1400 
	#SSL_gë_≠p_d©a
(
s
Ë(
	`SSL_gë_ex_d©a
(s,0))

	)

1401 
	#SSL_SESSION_£t_≠p_d©a
(
s
,
a
Ë(
	`SSL_SESSION_£t_ex_d©a
(s,0,(*Ô))

	)

1402 
	#SSL_SESSION_gë_≠p_d©a
(
s
Ë(
	`SSL_SESSION_gë_ex_d©a
(s,0))

	)

1403 
	#SSL_CTX_gë_≠p_d©a
(
˘x
Ë(
	`SSL_CTX_gë_ex_d©a
(˘x,0))

	)

1404 
	#SSL_CTX_£t_≠p_d©a
(
˘x
,
¨g
Ë(
	`SSL_CTX_£t_ex_d©a
(˘x,0,(*Ôrg))

	)

1413 
	#SSL_ST_CONNECT
 0x1000

	)

1414 
	#SSL_ST_ACCEPT
 0x2000

	)

1415 
	#SSL_ST_MASK
 0x0FFF

	)

1416 
	#SSL_ST_INIT
 (
SSL_ST_CONNECT
|
SSL_ST_ACCEPT
)

	)

1417 
	#SSL_ST_BEFORE
 0x4000

	)

1418 
	#SSL_ST_OK
 0x03

	)

1419 
	#SSL_ST_RENEGOTIATE
 (0x04|
SSL_ST_INIT
)

	)

1421 
	#SSL_CB_LOOP
 0x01

	)

1422 
	#SSL_CB_EXIT
 0x02

	)

1423 
	#SSL_CB_READ
 0x04

	)

1424 
	#SSL_CB_WRITE
 0x08

	)

1425 
	#SSL_CB_ALERT
 0x4000

	)

1426 
	#SSL_CB_READ_ALERT
 (
SSL_CB_ALERT
|
SSL_CB_READ
)

	)

1427 
	#SSL_CB_WRITE_ALERT
 (
SSL_CB_ALERT
|
SSL_CB_WRITE
)

	)

1428 
	#SSL_CB_ACCEPT_LOOP
 (
SSL_ST_ACCEPT
|
SSL_CB_LOOP
)

	)

1429 
	#SSL_CB_ACCEPT_EXIT
 (
SSL_ST_ACCEPT
|
SSL_CB_EXIT
)

	)

1430 
	#SSL_CB_CONNECT_LOOP
 (
SSL_ST_CONNECT
|
SSL_CB_LOOP
)

	)

1431 
	#SSL_CB_CONNECT_EXIT
 (
SSL_ST_CONNECT
|
SSL_CB_EXIT
)

	)

1432 
	#SSL_CB_HANDSHAKE_START
 0x10

	)

1433 
	#SSL_CB_HANDSHAKE_DONE
 0x20

	)

1436 
	#SSL_gë_°©e
(
a
Ë
	`SSL_°©e
◊)

	)

1437 
	#SSL_is_öô_föished
(
a
Ë(
	`SSL_°©e
◊Ë=
SSL_ST_OK
)

	)

1438 
	#SSL_ö_öô
(
a
Ë(
	`SSL_°©e
◊)&
SSL_ST_INIT
)

	)

1439 
	#SSL_ö_bef‹e
(
a
Ë(
	`SSL_°©e
◊)&
SSL_ST_BEFORE
)

	)

1440 
	#SSL_ö_c⁄√˘_öô
(
a
Ë(
	`SSL_°©e
◊)&
SSL_ST_CONNECT
)

	)

1441 
	#SSL_ö_ac˚±_öô
(
a
Ë(
	`SSL_°©e
◊)&
SSL_ST_ACCEPT
)

	)

1445 
	#SSL_ST_READ_HEADER
 0xF0

	)

1446 
	#SSL_ST_READ_BODY
 0xF1

	)

1447 
	#SSL_ST_READ_DONE
 0xF2

	)

1453 
size_t
 
SSL_gë_föished
(c⁄° 
SSL
 *
s
, *
buf
, size_à
cou¡
);

1454 
size_t
 
SSL_gë_≥î_föished
(c⁄° 
SSL
 *
s
, *
buf
, size_à
cou¡
);

1458 
	#SSL_VERIFY_NONE
 0x00

	)

1459 
	#SSL_VERIFY_PEER
 0x01

	)

1460 
	#SSL_VERIFY_FAIL_IF_NO_PEER_CERT
 0x02

	)

1461 
	#SSL_VERIFY_CLIENT_ONCE
 0x04

	)

1463 
	#O≥nSSL_add_s¶_Æg‹ôhms
(Ë
	`SSL_libøry_öô
()

	)

1464 
	#SSLóy_add_s¶_Æg‹ôhms
(Ë
	`SSL_libøry_öô
()

	)

1468 
	#SSL_CTX_£t_deÁu…_vîify
(
a
,
b
,
c
Ë
	`SSL_CTX_£t_vîify
◊,b,c)

	)

1469 
	#SSL_£t_¥ef_cùhî
(
c
,
n
Ë
	`SSL_£t_cùhî_li°
(c,n)

	)

1470 
	#SSL_add_£ssi⁄
(
a
,
b
Ë
	`SSL_CTX_add_£ssi⁄
(◊),(b))

	)

1471 
	#SSL_ªmove_£ssi⁄
(
a
,
b
Ë
	`SSL_CTX_ªmove_£ssi⁄
(◊),(b))

	)

1472 
	#SSL_Êush_£ssi⁄s
(
a
,
b
Ë
	`SSL_CTX_Êush_£ssi⁄s
(◊),(b))

	)

1475 
	#SSL_gë_cùhî
(
s
) \

1476 
	`SSL_CIPHER_gë_«me
(
	`SSL_gë_cuºít_cùhî
(
s
))

	)

1477 
	#SSL_gë_cùhî_bôs
(
s
,
≈
) \

1478 
	`SSL_CIPHER_gë_bôs
(
	`SSL_gë_cuºít_cùhî
(
s
),
≈
)

	)

1479 
	#SSL_gë_cùhî_vîsi⁄
(
s
) \

1480 
	`SSL_CIPHER_gë_vîsi⁄
(
	`SSL_gë_cuºít_cùhî
(
s
))

	)

1481 
	#SSL_gë_cùhî_«me
(
s
) \

1482 
	`SSL_CIPHER_gë_«me
(
	`SSL_gë_cuºít_cùhî
(
s
))

	)

1483 
	#SSL_gë_time
(
a
Ë
	`SSL_SESSION_gë_time
◊)

	)

1484 
	#SSL_£t_time
(
a
,
b
Ë
	`SSL_SESSION_£t_time
(◊),(b))

	)

1485 
	#SSL_gë_timeout
(
a
Ë
	`SSL_SESSION_gë_timeout
◊)

	)

1486 
	#SSL_£t_timeout
(
a
,
b
Ë
	`SSL_SESSION_£t_timeout
(◊),(b))

	)

1488 
	#d2i_SSL_SESSION_bio
(
bp
,
s_id
Ë
	`ASN1_d2i_bio_of
(
SSL_SESSION
,
SSL_SESSION_√w
,
d2i_SSL_SESSION
,bp,s_id)

	)

1489 
	#i2d_SSL_SESSION_bio
(
bp
,
s_id
Ë
	`ASN1_i2d_bio_of
(
SSL_SESSION
,
i2d_SSL_SESSION
,bp,s_id)

	)

1491 
DECLARE_PEM_rw
(
SSL_SESSION
, SSL_SESSION)

1493 
	#SSL_AD_REASON_OFFSET
 1000

	)

1496 
	#SSL_AD_CLOSE_NOTIFY
 
SSL3_AD_CLOSE_NOTIFY


	)

1497 
	#SSL_AD_UNEXPECTED_MESSAGE
 
SSL3_AD_UNEXPECTED_MESSAGE


	)

1498 
	#SSL_AD_BAD_RECORD_MAC
 
SSL3_AD_BAD_RECORD_MAC


	)

1499 
	#SSL_AD_DECRYPTION_FAILED
 
TLS1_AD_DECRYPTION_FAILED


	)

1500 
	#SSL_AD_RECORD_OVERFLOW
 
TLS1_AD_RECORD_OVERFLOW


	)

1501 
	#SSL_AD_DECOMPRESSION_FAILURE
 
SSL3_AD_DECOMPRESSION_FAILURE


	)

1502 
	#SSL_AD_HANDSHAKE_FAILURE
 
SSL3_AD_HANDSHAKE_FAILURE


	)

1503 
	#SSL_AD_NO_CERTIFICATE
 
SSL3_AD_NO_CERTIFICATE


	)

1504 
	#SSL_AD_BAD_CERTIFICATE
 
SSL3_AD_BAD_CERTIFICATE


	)

1505 
	#SSL_AD_UNSUPPORTED_CERTIFICATE
 
SSL3_AD_UNSUPPORTED_CERTIFICATE


	)

1506 
	#SSL_AD_CERTIFICATE_REVOKED
 
SSL3_AD_CERTIFICATE_REVOKED


	)

1507 
	#SSL_AD_CERTIFICATE_EXPIRED
 
SSL3_AD_CERTIFICATE_EXPIRED


	)

1508 
	#SSL_AD_CERTIFICATE_UNKNOWN
 
SSL3_AD_CERTIFICATE_UNKNOWN


	)

1509 
	#SSL_AD_ILLEGAL_PARAMETER
 
SSL3_AD_ILLEGAL_PARAMETER


	)

1510 
	#SSL_AD_UNKNOWN_CA
 
TLS1_AD_UNKNOWN_CA


	)

1511 
	#SSL_AD_ACCESS_DENIED
 
TLS1_AD_ACCESS_DENIED


	)

1512 
	#SSL_AD_DECODE_ERROR
 
TLS1_AD_DECODE_ERROR


	)

1513 
	#SSL_AD_DECRYPT_ERROR
 
TLS1_AD_DECRYPT_ERROR


	)

1514 
	#SSL_AD_EXPORT_RESTRICTION
 
TLS1_AD_EXPORT_RESTRICTION


	)

1515 
	#SSL_AD_PROTOCOL_VERSION
 
TLS1_AD_PROTOCOL_VERSION


	)

1516 
	#SSL_AD_INSUFFICIENT_SECURITY
 
TLS1_AD_INSUFFICIENT_SECURITY


	)

1517 
	#SSL_AD_INTERNAL_ERROR
 
TLS1_AD_INTERNAL_ERROR


	)

1518 
	#SSL_AD_USER_CANCELLED
 
TLS1_AD_USER_CANCELLED


	)

1519 
	#SSL_AD_NO_RENEGOTIATION
 
TLS1_AD_NO_RENEGOTIATION


	)

1520 
	#SSL_AD_UNSUPPORTED_EXTENSION
 
TLS1_AD_UNSUPPORTED_EXTENSION


	)

1521 
	#SSL_AD_CERTIFICATE_UNOBTAINABLE
 
TLS1_AD_CERTIFICATE_UNOBTAINABLE


	)

1522 
	#SSL_AD_UNRECOGNIZED_NAME
 
TLS1_AD_UNRECOGNIZED_NAME


	)

1523 
	#SSL_AD_BAD_CERTIFICATE_STATUS_RESPONSE
 
TLS1_AD_BAD_CERTIFICATE_STATUS_RESPONSE


	)

1524 
	#SSL_AD_BAD_CERTIFICATE_HASH_VALUE
 
TLS1_AD_BAD_CERTIFICATE_HASH_VALUE


	)

1525 
	#SSL_AD_UNKNOWN_PSK_IDENTITY
 
TLS1_AD_UNKNOWN_PSK_IDENTITY


	)

1526 
	#SSL_AD_INAPPROPRIATE_FALLBACK
 
TLS1_AD_INAPPROPRIATE_FALLBACK


	)

1528 
	#SSL_ERROR_NONE
 0

	)

1529 
	#SSL_ERROR_SSL
 1

	)

1530 
	#SSL_ERROR_WANT_READ
 2

	)

1531 
	#SSL_ERROR_WANT_WRITE
 3

	)

1532 
	#SSL_ERROR_WANT_X509_LOOKUP
 4

	)

1533 
	#SSL_ERROR_SYSCALL
 5

	)

1534 
	#SSL_ERROR_ZERO_RETURN
 6

	)

1535 
	#SSL_ERROR_WANT_CONNECT
 7

	)

1536 
	#SSL_ERROR_WANT_ACCEPT
 8

	)

1538 
	#SSL_CTRL_NEED_TMP_RSA
 1

	)

1539 
	#SSL_CTRL_SET_TMP_RSA
 2

	)

1540 
	#SSL_CTRL_SET_TMP_DH
 3

	)

1541 
	#SSL_CTRL_SET_TMP_ECDH
 4

	)

1542 
	#SSL_CTRL_SET_TMP_RSA_CB
 5

	)

1543 
	#SSL_CTRL_SET_TMP_DH_CB
 6

	)

1544 
	#SSL_CTRL_SET_TMP_ECDH_CB
 7

	)

1546 
	#SSL_CTRL_GET_SESSION_REUSED
 8

	)

1547 
	#SSL_CTRL_GET_CLIENT_CERT_REQUEST
 9

	)

1548 
	#SSL_CTRL_GET_NUM_RENEGOTIATIONS
 10

	)

1549 
	#SSL_CTRL_CLEAR_NUM_RENEGOTIATIONS
 11

	)

1550 
	#SSL_CTRL_GET_TOTAL_RENEGOTIATIONS
 12

	)

1551 
	#SSL_CTRL_GET_FLAGS
 13

	)

1552 
	#SSL_CTRL_EXTRA_CHAIN_CERT
 14

	)

1554 
	#SSL_CTRL_SET_MSG_CALLBACK
 15

	)

1555 
	#SSL_CTRL_SET_MSG_CALLBACK_ARG
 16

	)

1558 
	#SSL_CTRL_SET_MTU
 17

	)

1560 
	#SSL_CTRL_SESS_NUMBER
 20

	)

1561 
	#SSL_CTRL_SESS_CONNECT
 21

	)

1562 
	#SSL_CTRL_SESS_CONNECT_GOOD
 22

	)

1563 
	#SSL_CTRL_SESS_CONNECT_RENEGOTIATE
 23

	)

1564 
	#SSL_CTRL_SESS_ACCEPT
 24

	)

1565 
	#SSL_CTRL_SESS_ACCEPT_GOOD
 25

	)

1566 
	#SSL_CTRL_SESS_ACCEPT_RENEGOTIATE
 26

	)

1567 
	#SSL_CTRL_SESS_HIT
 27

	)

1568 
	#SSL_CTRL_SESS_CB_HIT
 28

	)

1569 
	#SSL_CTRL_SESS_MISSES
 29

	)

1570 
	#SSL_CTRL_SESS_TIMEOUTS
 30

	)

1571 
	#SSL_CTRL_SESS_CACHE_FULL
 31

	)

1572 
	#SSL_CTRL_OPTIONS
 32

	)

1573 
	#SSL_CTRL_MODE
 33

	)

1575 
	#SSL_CTRL_GET_READ_AHEAD
 40

	)

1576 
	#SSL_CTRL_SET_READ_AHEAD
 41

	)

1577 
	#SSL_CTRL_SET_SESS_CACHE_SIZE
 42

	)

1578 
	#SSL_CTRL_GET_SESS_CACHE_SIZE
 43

	)

1579 
	#SSL_CTRL_SET_SESS_CACHE_MODE
 44

	)

1580 
	#SSL_CTRL_GET_SESS_CACHE_MODE
 45

	)

1582 
	#SSL_CTRL_GET_MAX_CERT_LIST
 50

	)

1583 
	#SSL_CTRL_SET_MAX_CERT_LIST
 51

	)

1585 
	#SSL_CTRL_SET_MAX_SEND_FRAGMENT
 52

	)

1588 #i‚de‡
OPENSSL_NO_TLSEXT


1589 
	#SSL_CTRL_SET_TLSEXT_SERVERNAME_CB
 53

	)

1590 
	#SSL_CTRL_SET_TLSEXT_SERVERNAME_ARG
 54

	)

1591 
	#SSL_CTRL_SET_TLSEXT_HOSTNAME
 55

	)

1592 
	#SSL_CTRL_SET_TLSEXT_DEBUG_CB
 56

	)

1593 
	#SSL_CTRL_SET_TLSEXT_DEBUG_ARG
 57

	)

1594 
	#SSL_CTRL_GET_TLSEXT_TICKET_KEYS
 58

	)

1595 
	#SSL_CTRL_SET_TLSEXT_TICKET_KEYS
 59

	)

1596 
	#SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT
 60

	)

1597 
	#SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT_CB
 61

	)

1598 
	#SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT_CB_ARG
 62

	)

1599 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB
 63

	)

1600 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB_ARG
 64

	)

1601 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_TYPE
 65

	)

1602 
	#SSL_CTRL_GET_TLSEXT_STATUS_REQ_EXTS
 66

	)

1603 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_EXTS
 67

	)

1604 
	#SSL_CTRL_GET_TLSEXT_STATUS_REQ_IDS
 68

	)

1605 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_IDS
 69

	)

1606 
	#SSL_CTRL_GET_TLSEXT_STATUS_REQ_OCSP_RESP
 70

	)

1607 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_OCSP_RESP
 71

	)

1609 
	#SSL_CTRL_SET_TLSEXT_TICKET_KEY_CB
 72

	)

1611 
	#SSL_CTRL_SET_TLS_EXT_SRP_USERNAME_CB
 75

	)

1612 
	#SSL_CTRL_SET_SRP_VERIFY_PARAM_CB
 76

	)

1613 
	#SSL_CTRL_SET_SRP_GIVE_CLIENT_PWD_CB
 77

	)

1615 
	#SSL_CTRL_SET_SRP_ARG
 78

	)

1616 
	#SSL_CTRL_SET_TLS_EXT_SRP_USERNAME
 79

	)

1617 
	#SSL_CTRL_SET_TLS_EXT_SRP_STRENGTH
 80

	)

1618 
	#SSL_CTRL_SET_TLS_EXT_SRP_PASSWORD
 81

	)

1619 #i‚de‡
OPENSSL_NO_HEARTBEATS


1620 
	#SSL_CTRL_TLS_EXT_SEND_HEARTBEAT
 85

	)

1621 
	#SSL_CTRL_GET_TLS_EXT_HEARTBEAT_PENDING
 86

	)

1622 
	#SSL_CTRL_SET_TLS_EXT_HEARTBEAT_NO_REQUESTS
 87

	)

1626 
	#DTLS_CTRL_GET_TIMEOUT
 73

	)

1627 
	#DTLS_CTRL_HANDLE_TIMEOUT
 74

	)

1628 
	#DTLS_CTRL_LISTEN
 75

	)

1630 
	#SSL_CTRL_GET_RI_SUPPORT
 76

	)

1631 
	#SSL_CTRL_CLEAR_OPTIONS
 77

	)

1632 
	#SSL_CTRL_CLEAR_MODE
 78

	)

1634 
	#SSL_CTRL_GET_EXTRA_CHAIN_CERTS
 82

	)

1635 
	#SSL_CTRL_CLEAR_EXTRA_CHAIN_CERTS
 83

	)

1637 
	#SSL_CTRL_CHECK_PROTO_VERSION
 119

	)

1638 
	#DTLS_CTRL_SET_LINK_MTU
 120

	)

1639 
	#DTLS_CTRL_GET_LINK_MIN_MTU
 121

	)

1641 
	#DTLSv1_gë_timeout
(
s¶
, 
¨g
) \

1642 
	`SSL_˘æ
(
s¶
,
DTLS_CTRL_GET_TIMEOUT
,0, (*)
¨g
)

	)

1643 
	#DTLSv1_h™dÀ_timeout
(
s¶
) \

1644 
	`SSL_˘æ
(
s¶
,
DTLS_CTRL_HANDLE_TIMEOUT
,0, 
NULL
)

	)

1645 
	#DTLSv1_li°í
(
s¶
, 
≥î
) \

1646 
	`SSL_˘æ
(
s¶
,
DTLS_CTRL_LISTEN
,0, (*)
≥î
)

	)

1648 
	#SSL_£ssi⁄_ªu£d
(
s¶
) \

1649 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_GET_SESSION_REUSED
,0,
NULL
)

	)

1650 
	#SSL_num_ª√gŸüti⁄s
(
s¶
) \

1651 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_GET_NUM_RENEGOTIATIONS
,0,
NULL
)

	)

1652 
	#SSL_˛ór_num_ª√gŸüti⁄s
(
s¶
) \

1653 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_CLEAR_NUM_RENEGOTIATIONS
,0,
NULL
)

	)

1654 
	#SSL_tŸÆ_ª√gŸüti⁄s
(
s¶
) \

1655 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_GET_TOTAL_RENEGOTIATIONS
,0,
NULL
)

	)

1657 
	#SSL_CTX_√ed_tmp_RSA
(
˘x
) \

1658 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_NEED_TMP_RSA
,0,
NULL
)

	)

1659 
	#SSL_CTX_£t_tmp_rß
(
˘x
,
rß
) \

1660 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_TMP_RSA
,0,(*)
rß
)

	)

1661 
	#SSL_CTX_£t_tmp_dh
(
˘x
,
dh
) \

1662 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_TMP_DH
,0,(*)
dh
)

	)

1663 
	#SSL_CTX_£t_tmp_ecdh
(
˘x
,
ecdh
) \

1664 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_TMP_ECDH
,0,(*)
ecdh
)

	)

1666 
	#SSL_√ed_tmp_RSA
(
s¶
) \

1667 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_NEED_TMP_RSA
,0,
NULL
)

	)

1668 
	#SSL_£t_tmp_rß
(
s¶
,
rß
) \

1669 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TMP_RSA
,0,(*)
rß
)

	)

1670 
	#SSL_£t_tmp_dh
(
s¶
,
dh
) \

1671 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TMP_DH
,0,(*)
dh
)

	)

1672 
	#SSL_£t_tmp_ecdh
(
s¶
,
ecdh
) \

1673 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TMP_ECDH
,0,(*)
ecdh
)

	)

1675 
	#SSL_CTX_add_exåa_chaö_˚π
(
˘x
,
x509
) \

1676 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_EXTRA_CHAIN_CERT
,0,(*)
x509
)

	)

1677 
	#SSL_CTX_gë_exåa_chaö_˚πs
(
˘x
,
px509
) \

1678 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_EXTRA_CHAIN_CERTS
,0,
px509
)

	)

1679 
	#SSL_CTX_˛ór_exåa_chaö_˚πs
(
˘x
) \

1680 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_CLEAR_EXTRA_CHAIN_CERTS
,0,
NULL
)

	)

1682 #i‚de‡
OPENSSL_NO_BIO


1683 
BIO_METHOD
 *
BIO_f_s¶
();

1684 
BIO
 *
BIO_√w_s¶
(
SSL_CTX
 *
˘x
,
˛õ¡
);

1685 
BIO
 *
BIO_√w_s¶_c⁄√˘
(
SSL_CTX
 *
˘x
);

1686 
BIO
 *
BIO_√w_buf„r_s¶_c⁄√˘
(
SSL_CTX
 *
˘x
);

1687 
BIO_s¶_c›y_£ssi⁄_id
(
BIO
 *
to
,BIO *
‰om
);

1688 
BIO_s¶_shutdown
(
BIO
 *
s¶_bio
);

1692 
SSL_CTX_£t_cùhî_li°
(
SSL_CTX
 *,c⁄° *
°r
);

1693 
SSL_CTX
 *
SSL_CTX_√w
(c⁄° 
SSL_METHOD
 *
mëh
);

1694 
SSL_CTX_‰ì
(
SSL_CTX
 *);

1695 
SSL_CTX_£t_timeout
(
SSL_CTX
 *
˘x
,
t
);

1696 
SSL_CTX_gë_timeout
(c⁄° 
SSL_CTX
 *
˘x
);

1697 
X509_STORE
 *
SSL_CTX_gë_˚π_°‹e
(c⁄° 
SSL_CTX
 *);

1698 
SSL_CTX_£t_˚π_°‹e
(
SSL_CTX
 *,
X509_STORE
 *);

1699 
SSL_w™t
(c⁄° 
SSL
 *
s
);

1700 
SSL_˛ór
(
SSL
 *
s
);

1702 
SSL_CTX_Êush_£ssi⁄s
(
SSL_CTX
 *
˘x
,
tm
);

1704 c⁄° 
SSL_CIPHER
 *
SSL_gë_cuºít_cùhî
(c⁄° 
SSL
 *
s
);

1705 
SSL_CIPHER_gë_bôs
(c⁄° 
SSL_CIPHER
 *
c
,*
Æg_bôs
);

1706 * 
SSL_CIPHER_gë_vîsi⁄
(c⁄° 
SSL_CIPHER
 *
c
);

1707 c⁄° * 
SSL_CIPHER_gë_«me
(c⁄° 
SSL_CIPHER
 *
c
);

1708 
SSL_CIPHER_gë_id
(c⁄° 
SSL_CIPHER
 *
c
);

1710 
SSL_gë_fd
(c⁄° 
SSL
 *
s
);

1711 
SSL_gë_rfd
(c⁄° 
SSL
 *
s
);

1712 
SSL_gë_wfd
(c⁄° 
SSL
 *
s
);

1713 c⁄° * 
SSL_gë_cùhî_li°
(c⁄° 
SSL
 *
s
,
n
);

1714 * 
SSL_gë_sh¨ed_cùhîs
(c⁄° 
SSL
 *
s
, *
buf
, 
Àn
);

1715 
SSL_gë_ªad_ahód
(c⁄° 
SSL
 * 
s
);

1716 
SSL_≥ndög
(c⁄° 
SSL
 *
s
);

1717 #i‚de‡
OPENSSL_NO_SOCK


1718 
SSL_£t_fd
(
SSL
 *
s
, 
fd
);

1719 
SSL_£t_rfd
(
SSL
 *
s
, 
fd
);

1720 
SSL_£t_wfd
(
SSL
 *
s
, 
fd
);

1722 #i‚de‡
OPENSSL_NO_BIO


1723 
SSL_£t_bio
(
SSL
 *
s
, 
BIO
 *
rbio
,BIO *
wbio
);

1724 
BIO
 * 
SSL_gë_rbio
(c⁄° 
SSL
 *
s
);

1725 
BIO
 * 
SSL_gë_wbio
(c⁄° 
SSL
 *
s
);

1727 
SSL_£t_cùhî_li°
(
SSL
 *
s
, c⁄° *
°r
);

1728 
SSL_£t_ªad_ahód
(
SSL
 *
s
, 
yes
);

1729 
SSL_gë_vîify_mode
(c⁄° 
SSL
 *
s
);

1730 
SSL_gë_vîify_dïth
(c⁄° 
SSL
 *
s
);

1731 (*
SSL_gë_vîify_ˇŒback
(c⁄° 
SSL
 *
s
))(,
X509_STORE_CTX
 *);

1732 
SSL_£t_vîify
(
SSL
 *
s
, 
mode
,

1733 (*
ˇŒback
)(
ok
,
X509_STORE_CTX
 *
˘x
));

1734 
SSL_£t_vîify_dïth
(
SSL
 *
s
, 
dïth
);

1735 #i‚de‡
OPENSSL_NO_RSA


1736 
SSL_u£_RSAPriv©eKey
(
SSL
 *
s¶
, 
RSA
 *
rß
);

1738 
SSL_u£_RSAPriv©eKey_ASN1
(
SSL
 *
s¶
, *
d
, 
Àn
);

1739 
SSL_u£_Priv©eKey
(
SSL
 *
s¶
, 
EVP_PKEY
 *
pkey
);

1740 
SSL_u£_Priv©eKey_ASN1
(
pk
,
SSL
 *
s¶
, c⁄° *
d
, 
Àn
);

1741 
SSL_u£_˚πifiˇã
(
SSL
 *
s¶
, 
X509
 *
x
);

1742 
SSL_u£_˚πifiˇã_ASN1
(
SSL
 *
s¶
, c⁄° *
d
, 
Àn
);

1744 #i‚de‡
OPENSSL_NO_STDIO


1745 
SSL_u£_RSAPriv©eKey_fûe
(
SSL
 *
s¶
, c⁄° *
fûe
, 
ty≥
);

1746 
SSL_u£_Priv©eKey_fûe
(
SSL
 *
s¶
, c⁄° *
fûe
, 
ty≥
);

1747 
SSL_u£_˚πifiˇã_fûe
(
SSL
 *
s¶
, c⁄° *
fûe
, 
ty≥
);

1748 
SSL_CTX_u£_RSAPriv©eKey_fûe
(
SSL_CTX
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

1749 
SSL_CTX_u£_Priv©eKey_fûe
(
SSL_CTX
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

1750 
SSL_CTX_u£_˚πifiˇã_fûe
(
SSL_CTX
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

1751 
SSL_CTX_u£_˚πifiˇã_chaö_fûe
(
SSL_CTX
 *
˘x
, c⁄° *
fûe
);

1752 
STACK_OF
(
X509_NAME
Ë*
SSL_lﬂd_˛õ¡_CA_fûe
(c⁄° *
fûe
);

1753 
SSL_add_fûe_˚π_subje˘s_to_°ack
(
STACK_OF
(
X509_NAME
Ë*
°ackCAs
,

1754 c⁄° *
fûe
);

1755 #i‚de‡
OPENSSL_SYS_VMS


1756 #i‚de‡
OPENSSL_SYS_MACINTOSH_CLASSIC


1757 
SSL_add_dú_˚π_subje˘s_to_°ack
(
STACK_OF
(
X509_NAME
Ë*
°ackCAs
,

1758 c⁄° *
dú
);

1764 
SSL_lﬂd_îr‹_°rögs
();

1765 c⁄° *
SSL_°©e_°rög
(c⁄° 
SSL
 *
s
);

1766 c⁄° *
SSL_r°©e_°rög
(c⁄° 
SSL
 *
s
);

1767 c⁄° *
SSL_°©e_°rög_l⁄g
(c⁄° 
SSL
 *
s
);

1768 c⁄° *
SSL_r°©e_°rög_l⁄g
(c⁄° 
SSL
 *
s
);

1769 
SSL_SESSION_gë_time
(c⁄° 
SSL_SESSION
 *
s
);

1770 
SSL_SESSION_£t_time
(
SSL_SESSION
 *
s
, 
t
);

1771 
SSL_SESSION_gë_timeout
(c⁄° 
SSL_SESSION
 *
s
);

1772 
SSL_SESSION_£t_timeout
(
SSL_SESSION
 *
s
, 
t
);

1773 
SSL_c›y_£ssi⁄_id
(
SSL
 *
to
,c⁄° SSL *
‰om
);

1774 
X509
 *
SSL_SESSION_gë0_≥î
(
SSL_SESSION
 *
s
);

1775 
SSL_SESSION_£t1_id_c⁄ãxt
(
SSL_SESSION
 *
s
,c⁄° *
sid_˘x
,

1776 
sid_˘x_Àn
);

1778 
SSL_SESSION
 *
SSL_SESSION_√w
();

1779 c⁄° *
SSL_SESSION_gë_id
(c⁄° 
SSL_SESSION
 *
s
,

1780 *
Àn
);

1781 
SSL_SESSION_gë_com¥ess_id
(c⁄° 
SSL_SESSION
 *
s
);

1782 #i‚de‡
OPENSSL_NO_FP_API


1783 
SSL_SESSION_¥öt_Â
(
FILE
 *
Â
,c⁄° 
SSL_SESSION
 *
£s
);

1785 #i‚de‡
OPENSSL_NO_BIO


1786 
SSL_SESSION_¥öt
(
BIO
 *
Â
,c⁄° 
SSL_SESSION
 *
£s
);

1788 
SSL_SESSION_‰ì
(
SSL_SESSION
 *
£s
);

1789 
i2d_SSL_SESSION
(
SSL_SESSION
 *
ö
,**
µ
);

1790 
SSL_£t_£ssi⁄
(
SSL
 *
to
, 
SSL_SESSION
 *
£ssi⁄
);

1791 
SSL_CTX_add_£ssi⁄
(
SSL_CTX
 *
s
, 
SSL_SESSION
 *
c
);

1792 
SSL_CTX_ªmove_£ssi⁄
(
SSL_CTX
 *,
SSL_SESSION
 *
c
);

1793 
SSL_CTX_£t_gíî©e_£ssi⁄_id
(
SSL_CTX
 *, 
GEN_SESSION_CB
);

1794 
SSL_£t_gíî©e_£ssi⁄_id
(
SSL
 *, 
GEN_SESSION_CB
);

1795 
SSL_has_m©chög_£ssi⁄_id
(c⁄° 
SSL
 *
s¶
, c⁄° *
id
,

1796 
id_Àn
);

1797 
SSL_SESSION
 *
d2i_SSL_SESSION
(SSL_SESSION **
a
,c⁄° **
µ
,

1798 
Àngth
);

1800 #ifde‡
HEADER_X509_H


1801 
X509
 * 
SSL_gë_≥î_˚πifiˇã
(c⁄° 
SSL
 *
s
);

1804 
STACK_OF
(
X509
Ë*
SSL_gë_≥î_˚π_chaö
(c⁄° 
SSL
 *
s
);

1806 
SSL_CTX_gë_vîify_mode
(c⁄° 
SSL_CTX
 *
˘x
);

1807 
SSL_CTX_gë_vîify_dïth
(c⁄° 
SSL_CTX
 *
˘x
);

1808 (*
SSL_CTX_gë_vîify_ˇŒback
(c⁄° 
SSL_CTX
 *
˘x
))(,
X509_STORE_CTX
 *);

1809 
SSL_CTX_£t_vîify
(
SSL_CTX
 *
˘x
,
mode
,

1810 (*
ˇŒback
)(, 
X509_STORE_CTX
 *));

1811 
SSL_CTX_£t_vîify_dïth
(
SSL_CTX
 *
˘x
,
dïth
);

1812 
SSL_CTX_£t_˚π_vîify_ˇŒback
(
SSL_CTX
 *
˘x
, (*
cb
)(
X509_STORE_CTX
 *,*), *
¨g
);

1813 #i‚de‡
OPENSSL_NO_RSA


1814 
SSL_CTX_u£_RSAPriv©eKey
(
SSL_CTX
 *
˘x
, 
RSA
 *
rß
);

1816 
SSL_CTX_u£_RSAPriv©eKey_ASN1
(
SSL_CTX
 *
˘x
, c⁄° *
d
, 
Àn
);

1817 
SSL_CTX_u£_Priv©eKey
(
SSL_CTX
 *
˘x
, 
EVP_PKEY
 *
pkey
);

1818 
SSL_CTX_u£_Priv©eKey_ASN1
(
pk
,
SSL_CTX
 *
˘x
,

1819 c⁄° *
d
, 
Àn
);

1820 
SSL_CTX_u£_˚πifiˇã
(
SSL_CTX
 *
˘x
, 
X509
 *
x
);

1821 
SSL_CTX_u£_˚πifiˇã_ASN1
(
SSL_CTX
 *
˘x
, 
Àn
, c⁄° *
d
);

1823 
SSL_CTX_£t_deÁu…_∑sswd_cb
(
SSL_CTX
 *
˘x
, 
≥m_∑ssw‹d_cb
 *
cb
);

1824 
SSL_CTX_£t_deÁu…_∑sswd_cb_u£rd©a
(
SSL_CTX
 *
˘x
, *
u
);

1826 
SSL_CTX_check_¥iv©e_key
(c⁄° 
SSL_CTX
 *
˘x
);

1827 
SSL_check_¥iv©e_key
(c⁄° 
SSL
 *
˘x
);

1829 
SSL_CTX_£t_£ssi⁄_id_c⁄ãxt
(
SSL_CTX
 *
˘x
,c⁄° *
sid_˘x
,

1830 
sid_˘x_Àn
);

1832 
SSL
 * 
SSL_√w
(
SSL_CTX
 *
˘x
);

1833 
SSL_£t_£ssi⁄_id_c⁄ãxt
(
SSL
 *
s¶
,c⁄° *
sid_˘x
,

1834 
sid_˘x_Àn
);

1836 
SSL_CTX_£t_puΩo£
(
SSL_CTX
 *
s
, 
puΩo£
);

1837 
SSL_£t_puΩo£
(
SSL
 *
s
, 
puΩo£
);

1838 
SSL_CTX_£t_åu°
(
SSL_CTX
 *
s
, 
åu°
);

1839 
SSL_£t_åu°
(
SSL
 *
s
, 
åu°
);

1841 
SSL_CTX_£t1_∑øm
(
SSL_CTX
 *
˘x
, 
X509_VERIFY_PARAM
 *
vpm
);

1842 
SSL_£t1_∑øm
(
SSL
 *
s¶
, 
X509_VERIFY_PARAM
 *
vpm
);

1844 #i‚de‡
OPENSSL_NO_SRP


1845 
SSL_CTX_£t_§p_u£∫ame
(
SSL_CTX
 *
˘x
,*
«me
);

1846 
SSL_CTX_£t_§p_∑ssw‹d
(
SSL_CTX
 *
˘x
,*
∑ssw‹d
);

1847 
SSL_CTX_£t_§p_°ªngth
(
SSL_CTX
 *
˘x
, 
°ªngth
);

1848 
SSL_CTX_£t_§p_˛õ¡_pwd_ˇŒback
(
SSL_CTX
 *
˘x
,

1849 *(*
cb
)(
SSL
 *,*));

1850 
SSL_CTX_£t_§p_vîify_∑øm_ˇŒback
(
SSL_CTX
 *
˘x
,

1851 (*
cb
)(
SSL
 *,*));

1852 
SSL_CTX_£t_§p_u£∫ame_ˇŒback
(
SSL_CTX
 *
˘x
,

1853 (*
cb
)(
SSL
 *,*,*));

1854 
SSL_CTX_£t_§p_cb_¨g
(
SSL_CTX
 *
˘x
, *
¨g
);

1856 
SSL_£t_§p_£rvî_∑øm
(
SSL
 *
s
, c⁄° 
BIGNUM
 *
N
, c⁄° BIGNUM *
g
,

1857 
BIGNUM
 *
ß
, BIGNUM *
v
, *
öfo
);

1858 
SSL_£t_§p_£rvî_∑øm_pw
(
SSL
 *
s
, c⁄° *
u£r
, c⁄° *
∑ss
,

1859 c⁄° *
gΩ
);

1861 
BIGNUM
 *
SSL_gë_§p_g
(
SSL
 *
s
);

1862 
BIGNUM
 *
SSL_gë_§p_N
(
SSL
 *
s
);

1864 *
SSL_gë_§p_u£∫ame
(
SSL
 *
s
);

1865 *
SSL_gë_§p_u£röfo
(
SSL
 *
s
);

1868 
SSL_‰ì
(
SSL
 *
s¶
);

1869 
SSL_ac˚±
(
SSL
 *
s¶
);

1870 
SSL_c⁄√˘
(
SSL
 *
s¶
);

1871 
SSL_ªad
(
SSL
 *
s¶
,*
buf
,
num
);

1872 
SSL_≥ek
(
SSL
 *
s¶
,*
buf
,
num
);

1873 
SSL_wrôe
(
SSL
 *
s¶
,c⁄° *
buf
,
num
);

1874 
SSL_˘æ
(
SSL
 *
s¶
,
cmd
, 
œrg
, *
∑rg
);

1875 
SSL_ˇŒback_˘æ
(
SSL
 *, , (*)());

1876 
SSL_CTX_˘æ
(
SSL_CTX
 *
˘x
,
cmd
, 
œrg
, *
∑rg
);

1877 
SSL_CTX_ˇŒback_˘æ
(
SSL_CTX
 *, , (*)());

1879 
SSL_gë_îr‹
(c⁄° 
SSL
 *
s
,
ªt_code
);

1880 c⁄° *
SSL_gë_vîsi⁄
(c⁄° 
SSL
 *
s
);

1883 
SSL_CTX_£t_s¶_vîsi⁄
(
SSL_CTX
 *
˘x
, c⁄° 
SSL_METHOD
 *
mëh
);

1885 #i‚de‡
OPENSSL_NO_SSL2


1886 c⁄° 
SSL_METHOD
 *
SSLv2_mëhod
();

1887 c⁄° 
SSL_METHOD
 *
SSLv2_£rvî_mëhod
();

1888 c⁄° 
SSL_METHOD
 *
SSLv2_˛õ¡_mëhod
();

1891 #i‚de‡
OPENSSL_NO_SSL3_METHOD


1892 c⁄° 
SSL_METHOD
 *
SSLv3_mëhod
();

1893 c⁄° 
SSL_METHOD
 *
SSLv3_£rvî_mëhod
();

1894 c⁄° 
SSL_METHOD
 *
SSLv3_˛õ¡_mëhod
();

1897 c⁄° 
SSL_METHOD
 *
SSLv23_mëhod
();

1898 c⁄° 
SSL_METHOD
 *
SSLv23_£rvî_mëhod
();

1899 c⁄° 
SSL_METHOD
 *
SSLv23_˛õ¡_mëhod
();

1901 c⁄° 
SSL_METHOD
 *
TLSv1_mëhod
();

1902 c⁄° 
SSL_METHOD
 *
TLSv1_£rvî_mëhod
();

1903 c⁄° 
SSL_METHOD
 *
TLSv1_˛õ¡_mëhod
();

1905 c⁄° 
SSL_METHOD
 *
TLSv1_1_mëhod
();

1906 c⁄° 
SSL_METHOD
 *
TLSv1_1_£rvî_mëhod
();

1907 c⁄° 
SSL_METHOD
 *
TLSv1_1_˛õ¡_mëhod
();

1909 c⁄° 
SSL_METHOD
 *
TLSv1_2_mëhod
();

1910 c⁄° 
SSL_METHOD
 *
TLSv1_2_£rvî_mëhod
();

1911 c⁄° 
SSL_METHOD
 *
TLSv1_2_˛õ¡_mëhod
();

1914 c⁄° 
SSL_METHOD
 *
DTLSv1_mëhod
();

1915 c⁄° 
SSL_METHOD
 *
DTLSv1_£rvî_mëhod
();

1916 c⁄° 
SSL_METHOD
 *
DTLSv1_˛õ¡_mëhod
();

1918 
STACK_OF
(
SSL_CIPHER
Ë*
SSL_gë_cùhîs
(c⁄° 
SSL
 *
s
);

1920 
SSL_do_h™dshake
(
SSL
 *
s
);

1921 
SSL_ª√gŸüã
(
SSL
 *
s
);

1922 
SSL_ª√gŸüã_abbªvüãd
(
SSL
 *
s
);

1923 
SSL_ª√gŸüã_≥ndög
(
SSL
 *
s
);

1924 
SSL_shutdown
(
SSL
 *
s
);

1926 c⁄° 
SSL_METHOD
 *
SSL_gë_s¶_mëhod
(
SSL
 *
s
);

1927 
SSL_£t_s¶_mëhod
(
SSL
 *
s
, c⁄° 
SSL_METHOD
 *
mëhod
);

1928 c⁄° *
SSL_Æît_ty≥_°rög_l⁄g
(
vÆue
);

1929 c⁄° *
SSL_Æît_ty≥_°rög
(
vÆue
);

1930 c⁄° *
SSL_Æît_desc_°rög_l⁄g
(
vÆue
);

1931 c⁄° *
SSL_Æît_desc_°rög
(
vÆue
);

1933 
SSL_£t_˛õ¡_CA_li°
(
SSL
 *
s
, 
STACK_OF
(
X509_NAME
Ë*
«me_li°
);

1934 
SSL_CTX_£t_˛õ¡_CA_li°
(
SSL_CTX
 *
˘x
, 
STACK_OF
(
X509_NAME
Ë*
«me_li°
);

1935 
STACK_OF
(
X509_NAME
Ë*
SSL_gë_˛õ¡_CA_li°
(c⁄° 
SSL
 *
s
);

1936 
STACK_OF
(
X509_NAME
Ë*
SSL_CTX_gë_˛õ¡_CA_li°
(c⁄° 
SSL_CTX
 *
s
);

1937 
SSL_add_˛õ¡_CA
(
SSL
 *
s¶
,
X509
 *
x
);

1938 
SSL_CTX_add_˛õ¡_CA
(
SSL_CTX
 *
˘x
,
X509
 *
x
);

1940 
SSL_£t_c⁄√˘_°©e
(
SSL
 *
s
);

1941 
SSL_£t_ac˚±_°©e
(
SSL
 *
s
);

1943 
SSL_gë_deÁu…_timeout
(c⁄° 
SSL
 *
s
);

1945 
SSL_libøry_öô
();

1947 *
SSL_CIPHER_des¸ùti⁄
(c⁄° 
SSL_CIPHER
 *,*
buf
,
size
);

1948 
STACK_OF
(
X509_NAME
Ë*
SSL_dup_CA_li°
(STACK_OF(X509_NAMEË*
sk
);

1950 
SSL
 *
SSL_dup
(SSL *
s¶
);

1952 
X509
 *
SSL_gë_˚πifiˇã
(c⁄° 
SSL
 *
s¶
);

1953  
evp_pkey_°
 *
SSL_gë_¥iv©ekey
(
SSL
 *
s¶
);

1955 
SSL_CTX_£t_quõt_shutdown
(
SSL_CTX
 *
˘x
,
mode
);

1956 
SSL_CTX_gë_quõt_shutdown
(c⁄° 
SSL_CTX
 *
˘x
);

1957 
SSL_£t_quõt_shutdown
(
SSL
 *
s¶
,
mode
);

1958 
SSL_gë_quõt_shutdown
(c⁄° 
SSL
 *
s¶
);

1959 
SSL_£t_shutdown
(
SSL
 *
s¶
,
mode
);

1960 
SSL_gë_shutdown
(c⁄° 
SSL
 *
s¶
);

1961 
SSL_vîsi⁄
(c⁄° 
SSL
 *
s¶
);

1962 
SSL_CTX_£t_deÁu…_vîify_∑ths
(
SSL_CTX
 *
˘x
);

1963 
SSL_CTX_lﬂd_vîify_loˇti⁄s
(
SSL_CTX
 *
˘x
, c⁄° *
CAfûe
,

1964 c⁄° *
CA∑th
);

1965 
	#SSL_gë0_£ssi⁄
 
SSL_gë_£ssi⁄


	)

1966 
SSL_SESSION
 *
SSL_gë_£ssi⁄
(c⁄° 
SSL
 *
s¶
);

1967 
SSL_SESSION
 *
SSL_gë1_£ssi⁄
(
SSL
 *
s¶
);

1968 
SSL_CTX
 *
SSL_gë_SSL_CTX
(c⁄° 
SSL
 *
s¶
);

1969 
SSL_CTX
 *
SSL_£t_SSL_CTX
(
SSL
 *
s¶
, SSL_CTX* 
˘x
);

1970 
SSL_£t_öfo_ˇŒback
(
SSL
 *
s¶
,

1971 (*
cb
)(c⁄° 
SSL
 *
s¶
,
ty≥
,
vÆ
));

1972 (*
SSL_gë_öfo_ˇŒback
(c⁄° 
SSL
 *
s¶
))(c⁄° SSL *s¶,
ty≥
,
vÆ
);

1973 
SSL_°©e
(c⁄° 
SSL
 *
s¶
);

1974 
SSL_£t_°©e
(
SSL
 *
s¶
, 
°©e
);

1976 
SSL_£t_vîify_ªsu…
(
SSL
 *
s¶
,
v
);

1977 
SSL_gë_vîify_ªsu…
(c⁄° 
SSL
 *
s¶
);

1979 
SSL_£t_ex_d©a
(
SSL
 *
s¶
,
idx
,*
d©a
);

1980 *
SSL_gë_ex_d©a
(c⁄° 
SSL
 *
s¶
,
idx
);

1981 
SSL_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

1982 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

1984 
SSL_SESSION_£t_ex_d©a
(
SSL_SESSION
 *
ss
,
idx
,*
d©a
);

1985 *
SSL_SESSION_gë_ex_d©a
(c⁄° 
SSL_SESSION
 *
ss
,
idx
);

1986 
SSL_SESSION_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

1987 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

1989 
SSL_CTX_£t_ex_d©a
(
SSL_CTX
 *
s¶
,
idx
,*
d©a
);

1990 *
SSL_CTX_gë_ex_d©a
(c⁄° 
SSL_CTX
 *
s¶
,
idx
);

1991 
SSL_CTX_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

1992 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

1994 
SSL_gë_ex_d©a_X509_STORE_CTX_idx
();

1996 
	#SSL_CTX_£ss_£t_ˇche_size
(
˘x
,
t
) \

1997 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_SESS_CACHE_SIZE
,
t
,
NULL
)

	)

1998 
	#SSL_CTX_£ss_gë_ˇche_size
(
˘x
) \

1999 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_SESS_CACHE_SIZE
,0,
NULL
)

	)

2000 
	#SSL_CTX_£t_£ssi⁄_ˇche_mode
(
˘x
,
m
) \

2001 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_SESS_CACHE_MODE
,
m
,
NULL
)

	)

2002 
	#SSL_CTX_gë_£ssi⁄_ˇche_mode
(
˘x
) \

2003 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_SESS_CACHE_MODE
,0,
NULL
)

	)

2005 
	#SSL_CTX_gë_deÁu…_ªad_ahód
(
˘x
Ë
	`SSL_CTX_gë_ªad_ahód
(˘x)

	)

2006 
	#SSL_CTX_£t_deÁu…_ªad_ahód
(
˘x
,
m
Ë
	`SSL_CTX_£t_ªad_ahód
(˘x,m)

	)

2007 
	#SSL_CTX_gë_ªad_ahód
(
˘x
) \

2008 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_READ_AHEAD
,0,
NULL
)

	)

2009 
	#SSL_CTX_£t_ªad_ahód
(
˘x
,
m
) \

2010 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_READ_AHEAD
,
m
,
NULL
)

	)

2011 
	#SSL_CTX_gë_max_˚π_li°
(
˘x
) \

2012 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_MAX_CERT_LIST
,0,
NULL
)

	)

2013 
	#SSL_CTX_£t_max_˚π_li°
(
˘x
,
m
) \

2014 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_MAX_CERT_LIST
,
m
,
NULL
)

	)

2015 
	#SSL_gë_max_˚π_li°
(
s¶
) \

2016 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_GET_MAX_CERT_LIST
,0,
NULL
)

	)

2017 
	#SSL_£t_max_˚π_li°
(
s¶
,
m
) \

2018 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_MAX_CERT_LIST
,
m
,
NULL
)

	)

2020 
	#SSL_CTX_£t_max_£nd_‰agmít
(
˘x
,
m
) \

2021 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_MAX_SEND_FRAGMENT
,
m
,
NULL
)

	)

2022 
	#SSL_£t_max_£nd_‰agmít
(
s¶
,
m
) \

2023 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_MAX_SEND_FRAGMENT
,
m
,
NULL
)

	)

2026 #i‚de‡
OPENSSL_NO_RSA


2027 
SSL_CTX_£t_tmp_rß_ˇŒback
(
SSL_CTX
 *
˘x
,

2028 
RSA
 *(*
cb
)(
SSL
 *
s¶
,
is_exp‹t
,

2029 
keyÀngth
));

2031 
SSL_£t_tmp_rß_ˇŒback
(
SSL
 *
s¶
,

2032 
RSA
 *(*
cb
)(
SSL
 *
s¶
,
is_exp‹t
,

2033 
keyÀngth
));

2035 #i‚de‡
OPENSSL_NO_DH


2036 
SSL_CTX_£t_tmp_dh_ˇŒback
(
SSL_CTX
 *
˘x
,

2037 
DH
 *(*
dh
)(
SSL
 *
s¶
,
is_exp‹t
,

2038 
keyÀngth
));

2039 
SSL_£t_tmp_dh_ˇŒback
(
SSL
 *
s¶
,

2040 
DH
 *(*
dh
)(
SSL
 *
s¶
,
is_exp‹t
,

2041 
keyÀngth
));

2043 #i‚de‡
OPENSSL_NO_ECDH


2044 
SSL_CTX_£t_tmp_ecdh_ˇŒback
(
SSL_CTX
 *
˘x
,

2045 
EC_KEY
 *(*
ecdh
)(
SSL
 *
s¶
,
is_exp‹t
,

2046 
keyÀngth
));

2047 
SSL_£t_tmp_ecdh_ˇŒback
(
SSL
 *
s¶
,

2048 
EC_KEY
 *(*
ecdh
)(
SSL
 *
s¶
,
is_exp‹t
,

2049 
keyÀngth
));

2052 #i‚de‡
OPENSSL_NO_COMP


2053 c⁄° 
COMP_METHOD
 *
SSL_gë_cuºít_com¥essi⁄
(
SSL
 *
s
);

2054 c⁄° 
COMP_METHOD
 *
SSL_gë_cuºít_ex∑nsi⁄
(
SSL
 *
s
);

2055 c⁄° *
SSL_COMP_gë_«me
(c⁄° 
COMP_METHOD
 *
comp
);

2056 
STACK_OF
(
SSL_COMP
Ë*
SSL_COMP_gë_com¥essi⁄_mëhods
();

2057 
SSL_COMP_add_com¥essi⁄_mëhod
(
id
,
COMP_METHOD
 *
cm
);

2059 c⁄° *
SSL_gë_cuºít_com¥essi⁄
(
SSL
 *
s
);

2060 c⁄° *
SSL_gë_cuºít_ex∑nsi⁄
(
SSL
 *
s
);

2061 c⁄° *
SSL_COMP_gë_«me
(c⁄° *
comp
);

2062 *
SSL_COMP_gë_com¥essi⁄_mëhods
();

2063 
SSL_COMP_add_com¥essi⁄_mëhod
(
id
,*
cm
);

2067 
SSL_£t_£ssi⁄_tickë_ext
(
SSL
 *
s
, *
ext_d©a
, 
ext_Àn
);

2069 
SSL_£t_£ssi⁄_tickë_ext_cb
(
SSL
 *
s
, 
és_£ssi⁄_tickë_ext_cb_‚
 
cb
,

2070 *
¨g
);

2073 
SSL_£t_£ssi⁄_£¸ë_cb
(
SSL
 *
s
, 
és_£ssi⁄_£¸ë_cb_‚
 
és_£ssi⁄_£¸ë_cb
, *
¨g
);

2075 
SSL_£t_debug
(
SSL
 *
s
, 
debug
);

2076 
SSL_ˇche_hô
(
SSL
 *
s
);

2078 #i‚de‡
OPENSSL_NO_UNIT_TEST


2079 c⁄° 
›ís¶_s¶_ã°_fun˘i⁄s
 *
SSL_ã°_fun˘i⁄s
();

2086 
ERR_lﬂd_SSL_°rögs
();

2091 
	#SSL_F_CLIENT_CERTIFICATE
 100

	)

2092 
	#SSL_F_CLIENT_FINISHED
 167

	)

2093 
	#SSL_F_CLIENT_HELLO
 101

	)

2094 
	#SSL_F_CLIENT_MASTER_KEY
 102

	)

2095 
	#SSL_F_D2I_SSL_SESSION
 103

	)

2096 
	#SSL_F_DO_DTLS1_WRITE
 245

	)

2097 
	#SSL_F_DO_SSL3_WRITE
 104

	)

2098 
	#SSL_F_DTLS1_ACCEPT
 246

	)

2099 
	#SSL_F_DTLS1_ADD_CERT_TO_BUF
 295

	)

2100 
	#SSL_F_DTLS1_BUFFER_RECORD
 247

	)

2101 
	#SSL_F_DTLS1_CHECK_TIMEOUT_NUM
 316

	)

2102 
	#SSL_F_DTLS1_CLIENT_HELLO
 248

	)

2103 
	#SSL_F_DTLS1_CONNECT
 249

	)

2104 
	#SSL_F_DTLS1_ENC
 250

	)

2105 
	#SSL_F_DTLS1_GET_HELLO_VERIFY
 251

	)

2106 
	#SSL_F_DTLS1_GET_MESSAGE
 252

	)

2107 
	#SSL_F_DTLS1_GET_MESSAGE_FRAGMENT
 253

	)

2108 
	#SSL_F_DTLS1_GET_RECORD
 254

	)

2109 
	#SSL_F_DTLS1_HANDLE_TIMEOUT
 297

	)

2110 
	#SSL_F_DTLS1_HEARTBEAT
 305

	)

2111 
	#SSL_F_DTLS1_OUTPUT_CERT_CHAIN
 255

	)

2112 
	#SSL_F_DTLS1_PREPROCESS_FRAGMENT
 288

	)

2113 
	#SSL_F_DTLS1_PROCESS_OUT_OF_SEQ_MESSAGE
 256

	)

2114 
	#SSL_F_DTLS1_PROCESS_RECORD
 257

	)

2115 
	#SSL_F_DTLS1_READ_BYTES
 258

	)

2116 
	#SSL_F_DTLS1_READ_FAILED
 259

	)

2117 
	#SSL_F_DTLS1_SEND_CERTIFICATE_REQUEST
 260

	)

2118 
	#SSL_F_DTLS1_SEND_CLIENT_CERTIFICATE
 261

	)

2119 
	#SSL_F_DTLS1_SEND_CLIENT_KEY_EXCHANGE
 262

	)

2120 
	#SSL_F_DTLS1_SEND_CLIENT_VERIFY
 263

	)

2121 
	#SSL_F_DTLS1_SEND_HELLO_VERIFY_REQUEST
 264

	)

2122 
	#SSL_F_DTLS1_SEND_SERVER_CERTIFICATE
 265

	)

2123 
	#SSL_F_DTLS1_SEND_SERVER_HELLO
 266

	)

2124 
	#SSL_F_DTLS1_SEND_SERVER_KEY_EXCHANGE
 267

	)

2125 
	#SSL_F_DTLS1_WRITE_APP_DATA_BYTES
 268

	)

2126 
	#SSL_F_GET_CLIENT_FINISHED
 105

	)

2127 
	#SSL_F_GET_CLIENT_HELLO
 106

	)

2128 
	#SSL_F_GET_CLIENT_MASTER_KEY
 107

	)

2129 
	#SSL_F_GET_SERVER_FINISHED
 108

	)

2130 
	#SSL_F_GET_SERVER_HELLO
 109

	)

2131 
	#SSL_F_GET_SERVER_VERIFY
 110

	)

2132 
	#SSL_F_I2D_SSL_SESSION
 111

	)

2133 
	#SSL_F_READ_N
 112

	)

2134 
	#SSL_F_REQUEST_CERTIFICATE
 113

	)

2135 
	#SSL_F_SERVER_FINISH
 239

	)

2136 
	#SSL_F_SERVER_HELLO
 114

	)

2137 
	#SSL_F_SERVER_VERIFY
 240

	)

2138 
	#SSL_F_SSL23_ACCEPT
 115

	)

2139 
	#SSL_F_SSL23_CLIENT_HELLO
 116

	)

2140 
	#SSL_F_SSL23_CONNECT
 117

	)

2141 
	#SSL_F_SSL23_GET_CLIENT_HELLO
 118

	)

2142 
	#SSL_F_SSL23_GET_SERVER_HELLO
 119

	)

2143 
	#SSL_F_SSL23_PEEK
 237

	)

2144 
	#SSL_F_SSL23_READ
 120

	)

2145 
	#SSL_F_SSL23_WRITE
 121

	)

2146 
	#SSL_F_SSL2_ACCEPT
 122

	)

2147 
	#SSL_F_SSL2_CONNECT
 123

	)

2148 
	#SSL_F_SSL2_ENC_INIT
 124

	)

2149 
	#SSL_F_SSL2_GENERATE_KEY_MATERIAL
 241

	)

2150 
	#SSL_F_SSL2_PEEK
 234

	)

2151 
	#SSL_F_SSL2_READ
 125

	)

2152 
	#SSL_F_SSL2_READ_INTERNAL
 236

	)

2153 
	#SSL_F_SSL2_SET_CERTIFICATE
 126

	)

2154 
	#SSL_F_SSL2_WRITE
 127

	)

2155 
	#SSL_F_SSL3_ACCEPT
 128

	)

2156 
	#SSL_F_SSL3_ADD_CERT_TO_BUF
 296

	)

2157 
	#SSL_F_SSL3_CALLBACK_CTRL
 233

	)

2158 
	#SSL_F_SSL3_CHANGE_CIPHER_STATE
 129

	)

2159 
	#SSL_F_SSL3_CHECK_CERT_AND_ALGORITHM
 130

	)

2160 
	#SSL_F_SSL3_CHECK_CLIENT_HELLO
 304

	)

2161 
	#SSL_F_SSL3_CLIENT_HELLO
 131

	)

2162 
	#SSL_F_SSL3_CONNECT
 132

	)

2163 
	#SSL_F_SSL3_CTRL
 213

	)

2164 
	#SSL_F_SSL3_CTX_CTRL
 133

	)

2165 
	#SSL_F_SSL3_DIGEST_CACHED_RECORDS
 293

	)

2166 
	#SSL_F_SSL3_DO_CHANGE_CIPHER_SPEC
 292

	)

2167 
	#SSL_F_SSL3_ENC
 134

	)

2168 
	#SSL_F_SSL3_GENERATE_KEY_BLOCK
 238

	)

2169 
	#SSL_F_SSL3_GET_CERTIFICATE_REQUEST
 135

	)

2170 
	#SSL_F_SSL3_GET_CERT_STATUS
 289

	)

2171 
	#SSL_F_SSL3_GET_CERT_VERIFY
 136

	)

2172 
	#SSL_F_SSL3_GET_CLIENT_CERTIFICATE
 137

	)

2173 
	#SSL_F_SSL3_GET_CLIENT_HELLO
 138

	)

2174 
	#SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE
 139

	)

2175 
	#SSL_F_SSL3_GET_FINISHED
 140

	)

2176 
	#SSL_F_SSL3_GET_KEY_EXCHANGE
 141

	)

2177 
	#SSL_F_SSL3_GET_MESSAGE
 142

	)

2178 
	#SSL_F_SSL3_GET_NEW_SESSION_TICKET
 283

	)

2179 
	#SSL_F_SSL3_GET_NEXT_PROTO
 306

	)

2180 
	#SSL_F_SSL3_GET_RECORD
 143

	)

2181 
	#SSL_F_SSL3_GET_SERVER_CERTIFICATE
 144

	)

2182 
	#SSL_F_SSL3_GET_SERVER_DONE
 145

	)

2183 
	#SSL_F_SSL3_GET_SERVER_HELLO
 146

	)

2184 
	#SSL_F_SSL3_HANDSHAKE_MAC
 285

	)

2185 
	#SSL_F_SSL3_NEW_SESSION_TICKET
 287

	)

2186 
	#SSL_F_SSL3_OUTPUT_CERT_CHAIN
 147

	)

2187 
	#SSL_F_SSL3_PEEK
 235

	)

2188 
	#SSL_F_SSL3_READ_BYTES
 148

	)

2189 
	#SSL_F_SSL3_READ_N
 149

	)

2190 
	#SSL_F_SSL3_SEND_CERTIFICATE_REQUEST
 150

	)

2191 
	#SSL_F_SSL3_SEND_CLIENT_CERTIFICATE
 151

	)

2192 
	#SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE
 152

	)

2193 
	#SSL_F_SSL3_SEND_CLIENT_VERIFY
 153

	)

2194 
	#SSL_F_SSL3_SEND_SERVER_CERTIFICATE
 154

	)

2195 
	#SSL_F_SSL3_SEND_SERVER_HELLO
 242

	)

2196 
	#SSL_F_SSL3_SEND_SERVER_KEY_EXCHANGE
 155

	)

2197 
	#SSL_F_SSL3_SETUP_KEY_BLOCK
 157

	)

2198 
	#SSL_F_SSL3_SETUP_READ_BUFFER
 156

	)

2199 
	#SSL_F_SSL3_SETUP_WRITE_BUFFER
 291

	)

2200 
	#SSL_F_SSL3_WRITE_BYTES
 158

	)

2201 
	#SSL_F_SSL3_WRITE_PENDING
 159

	)

2202 
	#SSL_F_SSL_ADD_CLIENTHELLO_RENEGOTIATE_EXT
 298

	)

2203 
	#SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT
 277

	)

2204 
	#SSL_F_SSL_ADD_CLIENTHELLO_USE_SRTP_EXT
 307

	)

2205 
	#SSL_F_SSL_ADD_DIR_CERT_SUBJECTS_TO_STACK
 215

	)

2206 
	#SSL_F_SSL_ADD_FILE_CERT_SUBJECTS_TO_STACK
 216

	)

2207 
	#SSL_F_SSL_ADD_SERVERHELLO_RENEGOTIATE_EXT
 299

	)

2208 
	#SSL_F_SSL_ADD_SERVERHELLO_TLSEXT
 278

	)

2209 
	#SSL_F_SSL_ADD_SERVERHELLO_USE_SRTP_EXT
 308

	)

2210 
	#SSL_F_SSL_BAD_METHOD
 160

	)

2211 
	#SSL_F_SSL_BYTES_TO_CIPHER_LIST
 161

	)

2212 
	#SSL_F_SSL_CERT_DUP
 221

	)

2213 
	#SSL_F_SSL_CERT_INST
 222

	)

2214 
	#SSL_F_SSL_CERT_INSTANTIATE
 214

	)

2215 
	#SSL_F_SSL_CERT_NEW
 162

	)

2216 
	#SSL_F_SSL_CHECK_PRIVATE_KEY
 163

	)

2217 
	#SSL_F_SSL_CHECK_SERVERHELLO_TLSEXT
 280

	)

2218 
	#SSL_F_SSL_CHECK_SRVR_ECC_CERT_AND_ALG
 279

	)

2219 
	#SSL_F_SSL_CIPHER_PROCESS_RULESTR
 230

	)

2220 
	#SSL_F_SSL_CIPHER_STRENGTH_SORT
 231

	)

2221 
	#SSL_F_SSL_CLEAR
 164

	)

2222 
	#SSL_F_SSL_COMP_ADD_COMPRESSION_METHOD
 165

	)

2223 
	#SSL_F_SSL_CREATE_CIPHER_LIST
 166

	)

2224 
	#SSL_F_SSL_CTRL
 232

	)

2225 
	#SSL_F_SSL_CTX_CHECK_PRIVATE_KEY
 168

	)

2226 
	#SSL_F_SSL_CTX_MAKE_PROFILES
 309

	)

2227 
	#SSL_F_SSL_CTX_NEW
 169

	)

2228 
	#SSL_F_SSL_CTX_SET_CIPHER_LIST
 269

	)

2229 
	#SSL_F_SSL_CTX_SET_CLIENT_CERT_ENGINE
 290

	)

2230 
	#SSL_F_SSL_CTX_SET_PURPOSE
 226

	)

2231 
	#SSL_F_SSL_CTX_SET_SESSION_ID_CONTEXT
 219

	)

2232 
	#SSL_F_SSL_CTX_SET_SSL_VERSION
 170

	)

2233 
	#SSL_F_SSL_CTX_SET_TRUST
 229

	)

2234 
	#SSL_F_SSL_CTX_USE_CERTIFICATE
 171

	)

2235 
	#SSL_F_SSL_CTX_USE_CERTIFICATE_ASN1
 172

	)

2236 
	#SSL_F_SSL_CTX_USE_CERTIFICATE_CHAIN_FILE
 220

	)

2237 
	#SSL_F_SSL_CTX_USE_CERTIFICATE_FILE
 173

	)

2238 
	#SSL_F_SSL_CTX_USE_PRIVATEKEY
 174

	)

2239 
	#SSL_F_SSL_CTX_USE_PRIVATEKEY_ASN1
 175

	)

2240 
	#SSL_F_SSL_CTX_USE_PRIVATEKEY_FILE
 176

	)

2241 
	#SSL_F_SSL_CTX_USE_PSK_IDENTITY_HINT
 272

	)

2242 
	#SSL_F_SSL_CTX_USE_RSAPRIVATEKEY
 177

	)

2243 
	#SSL_F_SSL_CTX_USE_RSAPRIVATEKEY_ASN1
 178

	)

2244 
	#SSL_F_SSL_CTX_USE_RSAPRIVATEKEY_FILE
 179

	)

2245 
	#SSL_F_SSL_DO_HANDSHAKE
 180

	)

2246 
	#SSL_F_SSL_GET_NEW_SESSION
 181

	)

2247 
	#SSL_F_SSL_GET_PREV_SESSION
 217

	)

2248 
	#SSL_F_SSL_GET_SERVER_SEND_CERT
 182

	)

2249 
	#SSL_F_SSL_GET_SERVER_SEND_PKEY
 317

	)

2250 
	#SSL_F_SSL_GET_SIGN_PKEY
 183

	)

2251 
	#SSL_F_SSL_INIT_WBIO_BUFFER
 184

	)

2252 
	#SSL_F_SSL_LOAD_CLIENT_CA_FILE
 185

	)

2253 
	#SSL_F_SSL_NEW
 186

	)

2254 
	#SSL_F_SSL_PARSE_CLIENTHELLO_RENEGOTIATE_EXT
 300

	)

2255 
	#SSL_F_SSL_PARSE_CLIENTHELLO_TLSEXT
 302

	)

2256 
	#SSL_F_SSL_PARSE_CLIENTHELLO_USE_SRTP_EXT
 310

	)

2257 
	#SSL_F_SSL_PARSE_SERVERHELLO_RENEGOTIATE_EXT
 301

	)

2258 
	#SSL_F_SSL_PARSE_SERVERHELLO_TLSEXT
 303

	)

2259 
	#SSL_F_SSL_PARSE_SERVERHELLO_USE_SRTP_EXT
 311

	)

2260 
	#SSL_F_SSL_PEEK
 270

	)

2261 
	#SSL_F_SSL_PREPARE_CLIENTHELLO_TLSEXT
 281

	)

2262 
	#SSL_F_SSL_PREPARE_SERVERHELLO_TLSEXT
 282

	)

2263 
	#SSL_F_SSL_READ
 223

	)

2264 
	#SSL_F_SSL_RSA_PRIVATE_DECRYPT
 187

	)

2265 
	#SSL_F_SSL_RSA_PUBLIC_ENCRYPT
 188

	)

2266 
	#SSL_F_SSL_SESSION_DUP
 348

	)

2267 
	#SSL_F_SSL_SESSION_NEW
 189

	)

2268 
	#SSL_F_SSL_SESSION_PRINT_FP
 190

	)

2269 
	#SSL_F_SSL_SESSION_SET1_ID_CONTEXT
 312

	)

2270 
	#SSL_F_SSL_SESS_CERT_NEW
 225

	)

2271 
	#SSL_F_SSL_SET_CERT
 191

	)

2272 
	#SSL_F_SSL_SET_CIPHER_LIST
 271

	)

2273 
	#SSL_F_SSL_SET_FD
 192

	)

2274 
	#SSL_F_SSL_SET_PKEY
 193

	)

2275 
	#SSL_F_SSL_SET_PURPOSE
 227

	)

2276 
	#SSL_F_SSL_SET_RFD
 194

	)

2277 
	#SSL_F_SSL_SET_SESSION
 195

	)

2278 
	#SSL_F_SSL_SET_SESSION_ID_CONTEXT
 218

	)

2279 
	#SSL_F_SSL_SET_SESSION_TICKET_EXT
 294

	)

2280 
	#SSL_F_SSL_SET_TRUST
 228

	)

2281 
	#SSL_F_SSL_SET_WFD
 196

	)

2282 
	#SSL_F_SSL_SHUTDOWN
 224

	)

2283 
	#SSL_F_SSL_SRP_CTX_INIT
 313

	)

2284 
	#SSL_F_SSL_UNDEFINED_CONST_FUNCTION
 243

	)

2285 
	#SSL_F_SSL_UNDEFINED_FUNCTION
 197

	)

2286 
	#SSL_F_SSL_UNDEFINED_VOID_FUNCTION
 244

	)

2287 
	#SSL_F_SSL_USE_CERTIFICATE
 198

	)

2288 
	#SSL_F_SSL_USE_CERTIFICATE_ASN1
 199

	)

2289 
	#SSL_F_SSL_USE_CERTIFICATE_FILE
 200

	)

2290 
	#SSL_F_SSL_USE_PRIVATEKEY
 201

	)

2291 
	#SSL_F_SSL_USE_PRIVATEKEY_ASN1
 202

	)

2292 
	#SSL_F_SSL_USE_PRIVATEKEY_FILE
 203

	)

2293 
	#SSL_F_SSL_USE_PSK_IDENTITY_HINT
 273

	)

2294 
	#SSL_F_SSL_USE_RSAPRIVATEKEY
 204

	)

2295 
	#SSL_F_SSL_USE_RSAPRIVATEKEY_ASN1
 205

	)

2296 
	#SSL_F_SSL_USE_RSAPRIVATEKEY_FILE
 206

	)

2297 
	#SSL_F_SSL_VERIFY_CERT_CHAIN
 207

	)

2298 
	#SSL_F_SSL_WRITE
 208

	)

2299 
	#SSL_F_TLS1_CERT_VERIFY_MAC
 286

	)

2300 
	#SSL_F_TLS1_CHANGE_CIPHER_STATE
 209

	)

2301 
	#SSL_F_TLS1_CHECK_SERVERHELLO_TLSEXT
 274

	)

2302 
	#SSL_F_TLS1_ENC
 210

	)

2303 
	#SSL_F_TLS1_EXPORT_KEYING_MATERIAL
 314

	)

2304 
	#SSL_F_TLS1_HEARTBEAT
 315

	)

2305 
	#SSL_F_TLS1_PREPARE_CLIENTHELLO_TLSEXT
 275

	)

2306 
	#SSL_F_TLS1_PREPARE_SERVERHELLO_TLSEXT
 276

	)

2307 
	#SSL_F_TLS1_PRF
 284

	)

2308 
	#SSL_F_TLS1_SETUP_KEY_BLOCK
 211

	)

2309 
	#SSL_F_WRITE_PENDING
 212

	)

2312 
	#SSL_R_APP_DATA_IN_HANDSHAKE
 100

	)

2313 
	#SSL_R_ATTEMPT_TO_REUSE_SESSION_IN_DIFFERENT_CONTEXT
 272

	)

2314 
	#SSL_R_BAD_ALERT_RECORD
 101

	)

2315 
	#SSL_R_BAD_AUTHENTICATION_TYPE
 102

	)

2316 
	#SSL_R_BAD_CHANGE_CIPHER_SPEC
 103

	)

2317 
	#SSL_R_BAD_CHECKSUM
 104

	)

2318 
	#SSL_R_BAD_DATA_RETURNED_BY_CALLBACK
 106

	)

2319 
	#SSL_R_BAD_DECOMPRESSION
 107

	)

2320 
	#SSL_R_BAD_DH_G_LENGTH
 108

	)

2321 
	#SSL_R_BAD_DH_PUB_KEY_LENGTH
 109

	)

2322 
	#SSL_R_BAD_DH_P_LENGTH
 110

	)

2323 
	#SSL_R_BAD_DIGEST_LENGTH
 111

	)

2324 
	#SSL_R_BAD_DSA_SIGNATURE
 112

	)

2325 
	#SSL_R_BAD_ECC_CERT
 304

	)

2326 
	#SSL_R_BAD_ECDSA_SIGNATURE
 305

	)

2327 
	#SSL_R_BAD_ECPOINT
 306

	)

2328 
	#SSL_R_BAD_HANDSHAKE_LENGTH
 332

	)

2329 
	#SSL_R_BAD_HELLO_REQUEST
 105

	)

2330 
	#SSL_R_BAD_LENGTH
 271

	)

2331 
	#SSL_R_BAD_MAC_DECODE
 113

	)

2332 
	#SSL_R_BAD_MAC_LENGTH
 333

	)

2333 
	#SSL_R_BAD_MESSAGE_TYPE
 114

	)

2334 
	#SSL_R_BAD_PACKET_LENGTH
 115

	)

2335 
	#SSL_R_BAD_PROTOCOL_VERSION_NUMBER
 116

	)

2336 
	#SSL_R_BAD_PSK_IDENTITY_HINT_LENGTH
 316

	)

2337 
	#SSL_R_BAD_RESPONSE_ARGUMENT
 117

	)

2338 
	#SSL_R_BAD_RSA_DECRYPT
 118

	)

2339 
	#SSL_R_BAD_RSA_ENCRYPT
 119

	)

2340 
	#SSL_R_BAD_RSA_E_LENGTH
 120

	)

2341 
	#SSL_R_BAD_RSA_MODULUS_LENGTH
 121

	)

2342 
	#SSL_R_BAD_RSA_SIGNATURE
 122

	)

2343 
	#SSL_R_BAD_SIGNATURE
 123

	)

2344 
	#SSL_R_BAD_SRP_A_LENGTH
 347

	)

2345 
	#SSL_R_BAD_SRP_B_LENGTH
 348

	)

2346 
	#SSL_R_BAD_SRP_G_LENGTH
 349

	)

2347 
	#SSL_R_BAD_SRP_N_LENGTH
 350

	)

2348 
	#SSL_R_BAD_SRP_PARAMETERS
 371

	)

2349 
	#SSL_R_BAD_SRP_S_LENGTH
 351

	)

2350 
	#SSL_R_BAD_SRTP_MKI_VALUE
 352

	)

2351 
	#SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST
 353

	)

2352 
	#SSL_R_BAD_SSL_FILETYPE
 124

	)

2353 
	#SSL_R_BAD_SSL_SESSION_ID_LENGTH
 125

	)

2354 
	#SSL_R_BAD_STATE
 126

	)

2355 
	#SSL_R_BAD_WRITE_RETRY
 127

	)

2356 
	#SSL_R_BIO_NOT_SET
 128

	)

2357 
	#SSL_R_BLOCK_CIPHER_PAD_IS_WRONG
 129

	)

2358 
	#SSL_R_BN_LIB
 130

	)

2359 
	#SSL_R_CA_DN_LENGTH_MISMATCH
 131

	)

2360 
	#SSL_R_CA_DN_TOO_LONG
 132

	)

2361 
	#SSL_R_CCS_RECEIVED_EARLY
 133

	)

2362 
	#SSL_R_CERTIFICATE_VERIFY_FAILED
 134

	)

2363 
	#SSL_R_CERT_LENGTH_MISMATCH
 135

	)

2364 
	#SSL_R_CHALLENGE_IS_DIFFERENT
 136

	)

2365 
	#SSL_R_CIPHER_CODE_WRONG_LENGTH
 137

	)

2366 
	#SSL_R_CIPHER_OR_HASH_UNAVAILABLE
 138

	)

2367 
	#SSL_R_CIPHER_TABLE_SRC_ERROR
 139

	)

2368 
	#SSL_R_CLIENTHELLO_TLSEXT
 226

	)

2369 
	#SSL_R_COMPRESSED_LENGTH_TOO_LONG
 140

	)

2370 
	#SSL_R_COMPRESSION_DISABLED
 343

	)

2371 
	#SSL_R_COMPRESSION_FAILURE
 141

	)

2372 
	#SSL_R_COMPRESSION_ID_NOT_WITHIN_PRIVATE_RANGE
 307

	)

2373 
	#SSL_R_COMPRESSION_LIBRARY_ERROR
 142

	)

2374 
	#SSL_R_CONNECTION_ID_IS_DIFFERENT
 143

	)

2375 
	#SSL_R_CONNECTION_TYPE_NOT_SET
 144

	)

2376 
	#SSL_R_COOKIE_MISMATCH
 308

	)

2377 
	#SSL_R_DATA_BETWEEN_CCS_AND_FINISHED
 145

	)

2378 
	#SSL_R_DATA_LENGTH_TOO_LONG
 146

	)

2379 
	#SSL_R_DECRYPTION_FAILED
 147

	)

2380 
	#SSL_R_DECRYPTION_FAILED_OR_BAD_RECORD_MAC
 281

	)

2381 
	#SSL_R_DH_KEY_TOO_SMALL
 372

	)

2382 
	#SSL_R_DH_PUBLIC_VALUE_LENGTH_IS_WRONG
 148

	)

2383 
	#SSL_R_DIGEST_CHECK_FAILED
 149

	)

2384 
	#SSL_R_DTLS_MESSAGE_TOO_BIG
 334

	)

2385 
	#SSL_R_DUPLICATE_COMPRESSION_ID
 309

	)

2386 
	#SSL_R_ECC_CERT_NOT_FOR_KEY_AGREEMENT
 317

	)

2387 
	#SSL_R_ECC_CERT_NOT_FOR_SIGNING
 318

	)

2388 
	#SSL_R_ECC_CERT_SHOULD_HAVE_RSA_SIGNATURE
 322

	)

2389 
	#SSL_R_ECC_CERT_SHOULD_HAVE_SHA1_SIGNATURE
 323

	)

2390 
	#SSL_R_ECGROUP_TOO_LARGE_FOR_CIPHER
 310

	)

2391 
	#SSL_R_EMPTY_SRTP_PROTECTION_PROFILE_LIST
 354

	)

2392 
	#SSL_R_ENCRYPTED_LENGTH_TOO_LONG
 150

	)

2393 
	#SSL_R_ERROR_GENERATING_TMP_RSA_KEY
 282

	)

2394 
	#SSL_R_ERROR_IN_RECEIVED_CIPHER_LIST
 151

	)

2395 
	#SSL_R_EXCESSIVE_MESSAGE_SIZE
 152

	)

2396 
	#SSL_R_EXTRA_DATA_IN_MESSAGE
 153

	)

2397 
	#SSL_R_GOT_A_FIN_BEFORE_A_CCS
 154

	)

2398 
	#SSL_R_GOT_NEXT_PROTO_BEFORE_A_CCS
 355

	)

2399 
	#SSL_R_GOT_NEXT_PROTO_WITHOUT_EXTENSION
 356

	)

2400 
	#SSL_R_HTTPS_PROXY_REQUEST
 155

	)

2401 
	#SSL_R_HTTP_REQUEST
 156

	)

2402 
	#SSL_R_ILLEGAL_PADDING
 283

	)

2403 
	#SSL_R_INAPPROPRIATE_FALLBACK
 373

	)

2404 
	#SSL_R_INCONSISTENT_COMPRESSION
 340

	)

2405 
	#SSL_R_INVALID_CHALLENGE_LENGTH
 158

	)

2406 
	#SSL_R_INVALID_COMMAND
 280

	)

2407 
	#SSL_R_INVALID_COMPRESSION_ALGORITHM
 341

	)

2408 
	#SSL_R_INVALID_PURPOSE
 278

	)

2409 
	#SSL_R_INVALID_SRP_USERNAME
 357

	)

2410 
	#SSL_R_INVALID_STATUS_RESPONSE
 328

	)

2411 
	#SSL_R_INVALID_TICKET_KEYS_LENGTH
 325

	)

2412 
	#SSL_R_INVALID_TRUST
 279

	)

2413 
	#SSL_R_KEY_ARG_TOO_LONG
 284

	)

2414 
	#SSL_R_KRB5
 285

	)

2415 
	#SSL_R_KRB5_C_CC_PRINC
 286

	)

2416 
	#SSL_R_KRB5_C_GET_CRED
 287

	)

2417 
	#SSL_R_KRB5_C_INIT
 288

	)

2418 
	#SSL_R_KRB5_C_MK_REQ
 289

	)

2419 
	#SSL_R_KRB5_S_BAD_TICKET
 290

	)

2420 
	#SSL_R_KRB5_S_INIT
 291

	)

2421 
	#SSL_R_KRB5_S_RD_REQ
 292

	)

2422 
	#SSL_R_KRB5_S_TKT_EXPIRED
 293

	)

2423 
	#SSL_R_KRB5_S_TKT_NYV
 294

	)

2424 
	#SSL_R_KRB5_S_TKT_SKEW
 295

	)

2425 
	#SSL_R_LENGTH_MISMATCH
 159

	)

2426 
	#SSL_R_LENGTH_TOO_SHORT
 160

	)

2427 
	#SSL_R_LIBRARY_BUG
 274

	)

2428 
	#SSL_R_LIBRARY_HAS_NO_CIPHERS
 161

	)

2429 
	#SSL_R_MESSAGE_TOO_LONG
 296

	)

2430 
	#SSL_R_MISSING_DH_DSA_CERT
 162

	)

2431 
	#SSL_R_MISSING_DH_KEY
 163

	)

2432 
	#SSL_R_MISSING_DH_RSA_CERT
 164

	)

2433 
	#SSL_R_MISSING_DSA_SIGNING_CERT
 165

	)

2434 
	#SSL_R_MISSING_EXPORT_TMP_DH_KEY
 166

	)

2435 
	#SSL_R_MISSING_EXPORT_TMP_RSA_KEY
 167

	)

2436 
	#SSL_R_MISSING_RSA_CERTIFICATE
 168

	)

2437 
	#SSL_R_MISSING_RSA_ENCRYPTING_CERT
 169

	)

2438 
	#SSL_R_MISSING_RSA_SIGNING_CERT
 170

	)

2439 
	#SSL_R_MISSING_SRP_PARAM
 358

	)

2440 
	#SSL_R_MISSING_TMP_DH_KEY
 171

	)

2441 
	#SSL_R_MISSING_TMP_ECDH_KEY
 311

	)

2442 
	#SSL_R_MISSING_TMP_RSA_KEY
 172

	)

2443 
	#SSL_R_MISSING_TMP_RSA_PKEY
 173

	)

2444 
	#SSL_R_MISSING_VERIFY_MESSAGE
 174

	)

2445 
	#SSL_R_MULTIPLE_SGC_RESTARTS
 346

	)

2446 
	#SSL_R_NON_SSLV2_INITIAL_PACKET
 175

	)

2447 
	#SSL_R_NO_CERTIFICATES_RETURNED
 176

	)

2448 
	#SSL_R_NO_CERTIFICATE_ASSIGNED
 177

	)

2449 
	#SSL_R_NO_CERTIFICATE_RETURNED
 178

	)

2450 
	#SSL_R_NO_CERTIFICATE_SET
 179

	)

2451 
	#SSL_R_NO_CERTIFICATE_SPECIFIED
 180

	)

2452 
	#SSL_R_NO_CIPHERS_AVAILABLE
 181

	)

2453 
	#SSL_R_NO_CIPHERS_PASSED
 182

	)

2454 
	#SSL_R_NO_CIPHERS_SPECIFIED
 183

	)

2455 
	#SSL_R_NO_CIPHER_LIST
 184

	)

2456 
	#SSL_R_NO_CIPHER_MATCH
 185

	)

2457 
	#SSL_R_NO_CLIENT_CERT_METHOD
 331

	)

2458 
	#SSL_R_NO_CLIENT_CERT_RECEIVED
 186

	)

2459 
	#SSL_R_NO_COMPRESSION_SPECIFIED
 187

	)

2460 
	#SSL_R_NO_GOST_CERTIFICATE_SENT_BY_PEER
 330

	)

2461 
	#SSL_R_NO_METHOD_SPECIFIED
 188

	)

2462 
	#SSL_R_NO_PRIVATEKEY
 189

	)

2463 
	#SSL_R_NO_PRIVATE_KEY_ASSIGNED
 190

	)

2464 
	#SSL_R_NO_PROTOCOLS_AVAILABLE
 191

	)

2465 
	#SSL_R_NO_PUBLICKEY
 192

	)

2466 
	#SSL_R_NO_RENEGOTIATION
 339

	)

2467 
	#SSL_R_NO_REQUIRED_DIGEST
 324

	)

2468 
	#SSL_R_NO_SHARED_CIPHER
 193

	)

2469 
	#SSL_R_NO_SRTP_PROFILES
 359

	)

2470 
	#SSL_R_NO_VERIFY_CALLBACK
 194

	)

2471 
	#SSL_R_NULL_SSL_CTX
 195

	)

2472 
	#SSL_R_NULL_SSL_METHOD_PASSED
 196

	)

2473 
	#SSL_R_OLD_SESSION_CIPHER_NOT_RETURNED
 197

	)

2474 
	#SSL_R_OLD_SESSION_COMPRESSION_ALGORITHM_NOT_RETURNED
 344

	)

2475 
	#SSL_R_ONLY_TLS_ALLOWED_IN_FIPS_MODE
 297

	)

2476 
	#SSL_R_OPAQUE_PRF_INPUT_TOO_LONG
 327

	)

2477 
	#SSL_R_PACKET_LENGTH_TOO_LONG
 198

	)

2478 
	#SSL_R_PARSE_TLSEXT
 227

	)

2479 
	#SSL_R_PATH_TOO_LONG
 270

	)

2480 
	#SSL_R_PEER_DID_NOT_RETURN_A_CERTIFICATE
 199

	)

2481 
	#SSL_R_PEER_ERROR
 200

	)

2482 
	#SSL_R_PEER_ERROR_CERTIFICATE
 201

	)

2483 
	#SSL_R_PEER_ERROR_NO_CERTIFICATE
 202

	)

2484 
	#SSL_R_PEER_ERROR_NO_CIPHER
 203

	)

2485 
	#SSL_R_PEER_ERROR_UNSUPPORTED_CERTIFICATE_TYPE
 204

	)

2486 
	#SSL_R_PRE_MAC_LENGTH_TOO_LONG
 205

	)

2487 
	#SSL_R_PROBLEMS_MAPPING_CIPHER_FUNCTIONS
 206

	)

2488 
	#SSL_R_PROTOCOL_IS_SHUTDOWN
 207

	)

2489 
	#SSL_R_PSK_IDENTITY_NOT_FOUND
 223

	)

2490 
	#SSL_R_PSK_NO_CLIENT_CB
 224

	)

2491 
	#SSL_R_PSK_NO_SERVER_CB
 225

	)

2492 
	#SSL_R_PUBLIC_KEY_ENCRYPT_ERROR
 208

	)

2493 
	#SSL_R_PUBLIC_KEY_IS_NOT_RSA
 209

	)

2494 
	#SSL_R_PUBLIC_KEY_NOT_RSA
 210

	)

2495 
	#SSL_R_READ_BIO_NOT_SET
 211

	)

2496 
	#SSL_R_READ_TIMEOUT_EXPIRED
 312

	)

2497 
	#SSL_R_READ_WRONG_PACKET_TYPE
 212

	)

2498 
	#SSL_R_RECORD_LENGTH_MISMATCH
 213

	)

2499 
	#SSL_R_RECORD_TOO_LARGE
 214

	)

2500 
	#SSL_R_RECORD_TOO_SMALL
 298

	)

2501 
	#SSL_R_RENEGOTIATE_EXT_TOO_LONG
 335

	)

2502 
	#SSL_R_RENEGOTIATION_ENCODING_ERR
 336

	)

2503 
	#SSL_R_RENEGOTIATION_MISMATCH
 337

	)

2504 
	#SSL_R_REQUIRED_CIPHER_MISSING
 215

	)

2505 
	#SSL_R_REQUIRED_COMPRESSSION_ALGORITHM_MISSING
 342

	)

2506 
	#SSL_R_REUSE_CERT_LENGTH_NOT_ZERO
 216

	)

2507 
	#SSL_R_REUSE_CERT_TYPE_NOT_ZERO
 217

	)

2508 
	#SSL_R_REUSE_CIPHER_LIST_NOT_ZERO
 218

	)

2509 
	#SSL_R_SCSV_RECEIVED_WHEN_RENEGOTIATING
 345

	)

2510 
	#SSL_R_SERVERHELLO_TLSEXT
 275

	)

2511 
	#SSL_R_SESSION_ID_CONTEXT_UNINITIALIZED
 277

	)

2512 
	#SSL_R_SHORT_READ
 219

	)

2513 
	#SSL_R_SIGNATURE_ALGORITHMS_ERROR
 360

	)

2514 
	#SSL_R_SIGNATURE_FOR_NON_SIGNING_CERTIFICATE
 220

	)

2515 
	#SSL_R_SRP_A_CALC
 361

	)

2516 
	#SSL_R_SRTP_COULD_NOT_ALLOCATE_PROFILES
 362

	)

2517 
	#SSL_R_SRTP_PROTECTION_PROFILE_LIST_TOO_LONG
 363

	)

2518 
	#SSL_R_SRTP_UNKNOWN_PROTECTION_PROFILE
 364

	)

2519 
	#SSL_R_SSL23_DOING_SESSION_ID_REUSE
 221

	)

2520 
	#SSL_R_SSL2_CONNECTION_ID_TOO_LONG
 299

	)

2521 
	#SSL_R_SSL3_EXT_INVALID_ECPOINTFORMAT
 321

	)

2522 
	#SSL_R_SSL3_EXT_INVALID_SERVERNAME
 319

	)

2523 
	#SSL_R_SSL3_EXT_INVALID_SERVERNAME_TYPE
 320

	)

2524 
	#SSL_R_SSL3_SESSION_ID_TOO_LONG
 300

	)

2525 
	#SSL_R_SSL3_SESSION_ID_TOO_SHORT
 222

	)

2526 
	#SSL_R_SSLV3_ALERT_BAD_CERTIFICATE
 1042

	)

2527 
	#SSL_R_SSLV3_ALERT_BAD_RECORD_MAC
 1020

	)

2528 
	#SSL_R_SSLV3_ALERT_CERTIFICATE_EXPIRED
 1045

	)

2529 
	#SSL_R_SSLV3_ALERT_CERTIFICATE_REVOKED
 1044

	)

2530 
	#SSL_R_SSLV3_ALERT_CERTIFICATE_UNKNOWN
 1046

	)

2531 
	#SSL_R_SSLV3_ALERT_DECOMPRESSION_FAILURE
 1030

	)

2532 
	#SSL_R_SSLV3_ALERT_HANDSHAKE_FAILURE
 1040

	)

2533 
	#SSL_R_SSLV3_ALERT_ILLEGAL_PARAMETER
 1047

	)

2534 
	#SSL_R_SSLV3_ALERT_NO_CERTIFICATE
 1041

	)

2535 
	#SSL_R_SSLV3_ALERT_UNEXPECTED_MESSAGE
 1010

	)

2536 
	#SSL_R_SSLV3_ALERT_UNSUPPORTED_CERTIFICATE
 1043

	)

2537 
	#SSL_R_SSL_CTX_HAS_NO_DEFAULT_SSL_VERSION
 228

	)

2538 
	#SSL_R_SSL_HANDSHAKE_FAILURE
 229

	)

2539 
	#SSL_R_SSL_LIBRARY_HAS_NO_CIPHERS
 230

	)

2540 
	#SSL_R_SSL_SESSION_ID_CALLBACK_FAILED
 301

	)

2541 
	#SSL_R_SSL_SESSION_ID_CONFLICT
 302

	)

2542 
	#SSL_R_SSL_SESSION_ID_CONTEXT_TOO_LONG
 273

	)

2543 
	#SSL_R_SSL_SESSION_ID_HAS_BAD_LENGTH
 303

	)

2544 
	#SSL_R_SSL_SESSION_ID_IS_DIFFERENT
 231

	)

2545 
	#SSL_R_TLSV1_ALERT_ACCESS_DENIED
 1049

	)

2546 
	#SSL_R_TLSV1_ALERT_DECODE_ERROR
 1050

	)

2547 
	#SSL_R_TLSV1_ALERT_DECRYPTION_FAILED
 1021

	)

2548 
	#SSL_R_TLSV1_ALERT_DECRYPT_ERROR
 1051

	)

2549 
	#SSL_R_TLSV1_ALERT_EXPORT_RESTRICTION
 1060

	)

2550 
	#SSL_R_TLSV1_ALERT_INAPPROPRIATE_FALLBACK
 1086

	)

2551 
	#SSL_R_TLSV1_ALERT_INSUFFICIENT_SECURITY
 1071

	)

2552 
	#SSL_R_TLSV1_ALERT_INTERNAL_ERROR
 1080

	)

2553 
	#SSL_R_TLSV1_ALERT_NO_RENEGOTIATION
 1100

	)

2554 
	#SSL_R_TLSV1_ALERT_PROTOCOL_VERSION
 1070

	)

2555 
	#SSL_R_TLSV1_ALERT_RECORD_OVERFLOW
 1022

	)

2556 
	#SSL_R_TLSV1_ALERT_UNKNOWN_CA
 1048

	)

2557 
	#SSL_R_TLSV1_ALERT_USER_CANCELLED
 1090

	)

2558 
	#SSL_R_TLSV1_BAD_CERTIFICATE_HASH_VALUE
 1114

	)

2559 
	#SSL_R_TLSV1_BAD_CERTIFICATE_STATUS_RESPONSE
 1113

	)

2560 
	#SSL_R_TLSV1_CERTIFICATE_UNOBTAINABLE
 1111

	)

2561 
	#SSL_R_TLSV1_UNRECOGNIZED_NAME
 1112

	)

2562 
	#SSL_R_TLSV1_UNSUPPORTED_EXTENSION
 1110

	)

2563 
	#SSL_R_TLS_CLIENT_CERT_REQ_WITH_ANON_CIPHER
 232

	)

2564 
	#SSL_R_TLS_HEARTBEAT_PEER_DOESNT_ACCEPT
 365

	)

2565 
	#SSL_R_TLS_HEARTBEAT_PENDING
 366

	)

2566 
	#SSL_R_TLS_ILLEGAL_EXPORTER_LABEL
 367

	)

2567 
	#SSL_R_TLS_INVALID_ECPOINTFORMAT_LIST
 157

	)

2568 
	#SSL_R_TLS_PEER_DID_NOT_RESPOND_WITH_CERTIFICATE_LIST
 233

	)

2569 
	#SSL_R_TLS_RSA_ENCRYPTED_VALUE_LENGTH_IS_WRONG
 234

	)

2570 
	#SSL_R_TRIED_TO_USE_UNSUPPORTED_CIPHER
 235

	)

2571 
	#SSL_R_UNABLE_TO_DECODE_DH_CERTS
 236

	)

2572 
	#SSL_R_UNABLE_TO_DECODE_ECDH_CERTS
 313

	)

2573 
	#SSL_R_UNABLE_TO_EXTRACT_PUBLIC_KEY
 237

	)

2574 
	#SSL_R_UNABLE_TO_FIND_DH_PARAMETERS
 238

	)

2575 
	#SSL_R_UNABLE_TO_FIND_ECDH_PARAMETERS
 314

	)

2576 
	#SSL_R_UNABLE_TO_FIND_PUBLIC_KEY_PARAMETERS
 239

	)

2577 
	#SSL_R_UNABLE_TO_FIND_SSL_METHOD
 240

	)

2578 
	#SSL_R_UNABLE_TO_LOAD_SSL2_MD5_ROUTINES
 241

	)

2579 
	#SSL_R_UNABLE_TO_LOAD_SSL3_MD5_ROUTINES
 242

	)

2580 
	#SSL_R_UNABLE_TO_LOAD_SSL3_SHA1_ROUTINES
 243

	)

2581 
	#SSL_R_UNEXPECTED_MESSAGE
 244

	)

2582 
	#SSL_R_UNEXPECTED_RECORD
 245

	)

2583 
	#SSL_R_UNINITIALIZED
 276

	)

2584 
	#SSL_R_UNKNOWN_ALERT_TYPE
 246

	)

2585 
	#SSL_R_UNKNOWN_CERTIFICATE_TYPE
 247

	)

2586 
	#SSL_R_UNKNOWN_CIPHER_RETURNED
 248

	)

2587 
	#SSL_R_UNKNOWN_CIPHER_TYPE
 249

	)

2588 
	#SSL_R_UNKNOWN_DIGEST
 368

	)

2589 
	#SSL_R_UNKNOWN_KEY_EXCHANGE_TYPE
 250

	)

2590 
	#SSL_R_UNKNOWN_PKEY_TYPE
 251

	)

2591 
	#SSL_R_UNKNOWN_PROTOCOL
 252

	)

2592 
	#SSL_R_UNKNOWN_REMOTE_ERROR_TYPE
 253

	)

2593 
	#SSL_R_UNKNOWN_SSL_VERSION
 254

	)

2594 
	#SSL_R_UNKNOWN_STATE
 255

	)

2595 
	#SSL_R_UNSAFE_LEGACY_RENEGOTIATION_DISABLED
 338

	)

2596 
	#SSL_R_UNSUPPORTED_CIPHER
 256

	)

2597 
	#SSL_R_UNSUPPORTED_COMPRESSION_ALGORITHM
 257

	)

2598 
	#SSL_R_UNSUPPORTED_DIGEST_TYPE
 326

	)

2599 
	#SSL_R_UNSUPPORTED_ELLIPTIC_CURVE
 315

	)

2600 
	#SSL_R_UNSUPPORTED_PROTOCOL
 258

	)

2601 
	#SSL_R_UNSUPPORTED_SSL_VERSION
 259

	)

2602 
	#SSL_R_UNSUPPORTED_STATUS_TYPE
 329

	)

2603 
	#SSL_R_USE_SRTP_NOT_NEGOTIATED
 369

	)

2604 
	#SSL_R_WRITE_BIO_NOT_SET
 260

	)

2605 
	#SSL_R_WRONG_CIPHER_RETURNED
 261

	)

2606 
	#SSL_R_WRONG_MESSAGE_TYPE
 262

	)

2607 
	#SSL_R_WRONG_NUMBER_OF_KEY_BITS
 263

	)

2608 
	#SSL_R_WRONG_SIGNATURE_LENGTH
 264

	)

2609 
	#SSL_R_WRONG_SIGNATURE_SIZE
 265

	)

2610 
	#SSL_R_WRONG_SIGNATURE_TYPE
 370

	)

2611 
	#SSL_R_WRONG_SSL_VERSION
 266

	)

2612 
	#SSL_R_WRONG_VERSION_NUMBER
 267

	)

2613 
	#SSL_R_X509_LIB
 268

	)

2614 
	#SSL_R_X509_VERIFICATION_SETUP_PROBLEMS
 269

	)

2616 #ifde‡ 
__˝lu•lus


	@/usr/include/poll.h

1 
	~<sys/pﬁl.h
>

	@/usr/include/pthread.h

18 #i‚de‡
_PTHREAD_H


19 
	#_PTHREAD_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<ídün.h
>

23 
	~<sched.h
>

24 
	~<time.h
>

26 
	~<bôs/±hªadty≥s.h
>

27 
	~<bôs/£tjmp.h
>

28 
	~<bôs/w‹dsize.h
>

34 
	mPTHREAD_CREATE_JOINABLE
,

35 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

36 
	mPTHREAD_CREATE_DETACHED


37 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

44 
	mPTHREAD_MUTEX_TIMED_NP
,

45 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

46 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

47 
	mPTHREAD_MUTEX_ADAPTIVE_NP


48 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


50 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

51 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

52 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

53 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


55 #ifde‡
__USE_GNU


57 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


62 #ifde‡
__USE_XOPEN2K


66 
	mPTHREAD_MUTEX_STALLED
,

67 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

68 
	mPTHREAD_MUTEX_ROBUST
,

69 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


74 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


78 
	mPTHREAD_PRIO_NONE
,

79 
	mPTHREAD_PRIO_INHERIT
,

80 
	mPTHREAD_PRIO_PROTECT


86 #i‡
__PTHREAD_MUTEX_HAVE_ELISION
 == 1

87 
	#__PTHREAD_SPINS
 0, 0

	)

88 #ñi‡
__PTHREAD_MUTEX_HAVE_ELISION
 == 2

89 
	#__PTHREAD_SPINS
 { 0, 0 }

	)

91 
	#__PTHREAD_SPINS
 0

	)

94 #ifde‡
__PTHREAD_MUTEX_HAVE_PREV


95 
	#PTHREAD_MUTEX_INITIALIZER
 \

96 { { 0, 0, 0, 0, 0, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

97 #ifde‡
__USE_GNU


98 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

99 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

100 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

101 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

102 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

103 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

104 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

105 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

109 
	#PTHREAD_MUTEX_INITIALIZER
 \

110 { { 0, 0, 0, 0, 0, { 
__PTHREAD_SPINS
 } } }

	)

111 #ifde‡
__USE_GNU


112 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

113 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

114 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

115 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

116 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

117 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

124 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


127 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

128 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

129 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

130 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


136 #i‚de‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


137 #i‡
__WORDSIZE
 == 64

138 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

143 
	#PTHREAD_RWLOCK_INITIALIZER
 \

144 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

145 #ifde‡
__USE_GNU


146 #ifde‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


147 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

149 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

151 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


152 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

153 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

154 0, 0, 0, 0 } }

	)

156 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

157 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

158 0 } }

	)

168 
	mPTHREAD_INHERIT_SCHED
,

169 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

170 
	mPTHREAD_EXPLICIT_SCHED


171 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

178 
	mPTHREAD_SCOPE_SYSTEM
,

179 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

180 
	mPTHREAD_SCOPE_PROCESS


181 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

188 
	mPTHREAD_PROCESS_PRIVATE
,

189 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

190 
	mPTHREAD_PROCESS_SHARED


191 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

197 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

201 
	s_±hªad_˛ónup_buf„r


203 (*
	m__routöe
) (*);

204 *
	m__¨g
;

205 
	m__ˇn˚…y≥
;

206 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

212 
	mPTHREAD_CANCEL_ENABLE
,

213 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

214 
	mPTHREAD_CANCEL_DISABLE


215 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

219 
	mPTHREAD_CANCEL_DEFERRED
,

220 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

221 
	mPTHREAD_CANCEL_ASYNCHRONOUS


222 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

224 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

228 
	#PTHREAD_ONCE_INIT
 0

	)

231 #ifde‡
__USE_XOPEN2K


235 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

239 
__BEGIN_DECLS


244 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

245 c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

246 *(*
__°¨t_routöe
) (*),

247 *
__ª°ri˘
 
__¨g
Ë
__THROWNL
 
__n⁄nuŒ
 ((1, 3));

253 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

261 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

263 #ifde‡
__USE_GNU


266 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

274 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

275 c⁄° 
time•ec
 *
__ab°ime
);

282 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

286 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

289 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
)

290 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

298 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

301 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

302 
__THROW
 
	`__n⁄nuŒ
 ((1));

305 
	$±hªad_©å_gëdëach°©e
 (c⁄° 
±hªad_©å_t
 *
__©å
,

306 *
__dëach°©e
)

307 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

310 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

311 
__dëach°©e
)

312 
__THROW
 
	`__n⁄nuŒ
 ((1));

316 
	$±hªad_©å_gëgu¨dsize
 (c⁄° 
±hªad_©å_t
 *
__©å
,

317 
size_t
 *
__gu¨dsize
)

318 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

321 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

322 
size_t
 
__gu¨dsize
)

323 
__THROW
 
	`__n⁄nuŒ
 ((1));

327 
	$±hªad_©å_gësched∑øm
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

328 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

332 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

333 c⁄° 
sched_∑øm
 *
__ª°ri˘


334 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

337 
	$±hªad_©å_gëschedpﬁicy
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


338 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

339 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

342 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

343 
__THROW
 
	`__n⁄nuŒ
 ((1));

346 
	$±hªad_©å_gëöhîôsched
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


347 
__©å
, *
__ª°ri˘
 
__öhîô
)

348 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

351 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

352 
__öhîô
)

353 
__THROW
 
	`__n⁄nuŒ
 ((1));

357 
	$±hªad_©å_gësc›e
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

358 *
__ª°ri˘
 
__sc›e
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

362 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

363 
__THROW
 
	`__n⁄nuŒ
 ((1));

366 
	$±hªad_©å_gë°ackaddr
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


367 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

368 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

374 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

375 *
__°ackaddr
)

376 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

379 
	$±hªad_©å_gë°acksize
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


380 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

381 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

386 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

387 
size_t
 
__°acksize
)

388 
__THROW
 
	`__n⁄nuŒ
 ((1));

390 #ifde‡
__USE_XOPEN2K


392 
	$±hªad_©å_gë°ack
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

393 **
__ª°ri˘
 
__°ackaddr
,

394 
size_t
 *
__ª°ri˘
 
__°acksize
)

395 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

400 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

401 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

404 #ifde‡
__USE_GNU


407 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

408 
size_t
 
__˝u£tsize
,

409 c⁄° 
˝u_£t_t
 *
__˝u£t
)

410 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

414 
	$±hªad_©å_gëafföôy_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
,

415 
size_t
 
__˝u£tsize
,

416 
˝u_£t_t
 *
__˝u£t
)

417 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

420 
	$±hªad_gë©å_deÁu…_≈
 (
±hªad_©å_t
 *
__©å
)

421 
__THROW
 
	`__n⁄nuŒ
 ((1));

425 
	$±hªad_£èâr_deÁu…_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
)

426 
__THROW
 
	`__n⁄nuŒ
 ((1));

431 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

440 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

441 c⁄° 
sched_∑øm
 *
__∑øm
)

442 
__THROW
 
	`__n⁄nuŒ
 ((3));

445 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

446 *
__ª°ri˘
 
__pﬁicy
,

447 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

448 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

451 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

452 
__THROW
;

455 #ifde‡
__USE_GNU


457 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

458 
size_t
 
__buÊí
)

459 
__THROW
 
	`__n⁄nuŒ
 ((2));

462 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, c⁄° *
__«me
)

463 
__THROW
 
	`__n⁄nuŒ
 ((2));

467 #ifde‡
__USE_UNIX98


469 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

472 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

475 #ifde‡
__USE_GNU


480 
	$±hªad_yõld
 (Ë
__THROW
;

485 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

486 c⁄° 
˝u_£t_t
 *
__˝u£t
)

487 
__THROW
 
	`__n⁄nuŒ
 ((3));

490 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

491 
˝u_£t_t
 *
__˝u£t
)

492 
__THROW
 
	`__n⁄nuŒ
 ((3));

505 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

506 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

517 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

521 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

524 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

529 
	`±hªad_ã°ˇn˚l
 ();

538 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

539 
__mask_was_ßved
;

540 } 
__ˇn˚l_jmp_buf
[1];

541 *
__∑d
[4];

542 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

545 #i‚de‡
__˛ónup_f˘_©åibuã


546 
	#__˛ónup_f˘_©åibuã


	)

551 
	s__±hªad_˛ónup_‰ame


553 (*
__ˇn˚l_routöe
) (*);

554 *
__ˇn˚l_¨g
;

555 
__do_ô
;

556 
__ˇn˚l_ty≥
;

559 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


560 #ifde‡
__˝lu•lus


562 ˛as†
	c__±hªad_˛ónup_˛ass


564 (*
__ˇn˚l_routöe
) (*);

565 *
__ˇn˚l_¨g
;

566 
__do_ô
;

567 
__ˇn˚l_ty≥
;

569 
public
:

570 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

571 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

572 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

573 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

574 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

575 &
__ˇn˚l_ty≥
); 
	}
}

576 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

586 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

588 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

592 
	#±hªad_˛ónup_p›
(
execuã
) \

593 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

594 } 0)

	)

596 #ifde‡
__USE_GNU


600 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

602 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

603 
__˛‰ame
.
	`__de„r
 ()

	)

608 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

609 
__˛‰ame
.
	`__ª°‹e
 (); \

610 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

611 } 0)

	)

618 
__exã∫_ölöe
 

619 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

621 i‡(
__‰ame
->
__do_ô
)

622 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

623 
	}
}

632 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

634 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

635 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

636 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

637 .
__do_ô
 = 1 };

	)

641 
	#±hªad_˛ónup_p›
(
execuã
) \

642 
__˛‰ame
.
__do_ô
 = (
execuã
); \

643 } 0)

	)

645 #ifde‡
__USE_GNU


649 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

651 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

652 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

653 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

654 .
__do_ô
 = 1 }; \

655 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

656 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

661 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

662 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

663 
__˛‰ame
.
__do_ô
 = (
execuã
); \

664 } 0)

	)

675 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

677 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

678 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

679 *
__ˇn˚l_¨g
 = (
¨g
); \

680 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

681 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

682 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

684 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

685 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

689 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

690 dÿ{

	)

691 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

692 
__˛ónup_f˘_©åibuã
;

696 
	#±hªad_˛ónup_p›
(
execuã
) \

699 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

700 i‡(
execuã
) \

701 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

702 } 0)

	)

703 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

704 
__˛ónup_f˘_©åibuã
;

706 #ifde‡
__USE_GNU


710 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

712 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

713 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

714 *
__ˇn˚l_¨g
 = (
¨g
); \

715 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

716 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

717 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

719 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

720 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

724 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

725 dÿ{

	)

726 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

727 
__˛ónup_f˘_©åibuã
;

732 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

735 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

736 i‡(
execuã
) \

737 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

738 
	}
} 0)

	)

739 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

740 
__˛ónup_f˘_©åibuã
;

744 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

745 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

746 #i‚de‡
SHARED


747 
	`__©åibuã__
 ((
__wók__
))

753 
__jmp_buf_èg
;

754 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROWNL
;

760 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

761 c⁄° 
±hªad_muãx©å_t
 *
__muãx©å
)

762 
__THROW
 
	`__n⁄nuŒ
 ((1));

765 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

766 
__THROW
 
	`__n⁄nuŒ
 ((1));

769 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

770 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

773 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

774 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

776 #ifde‡
__USE_XOPEN2K


778 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

779 c⁄° 
time•ec
 *
__ª°ri˘


780 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

784 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

785 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

789 
	$±hªad_muãx_gë¥io˚ûög
 (c⁄° 
±hªad_muãx_t
 *

790 
__ª°ri˘
 
__muãx
,

791 *
__ª°ri˘
 
__¥io˚ûög
)

792 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

796 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

797 
__¥io˚ûög
,

798 *
__ª°ri˘
 
__ﬁd_˚ûög
)

799 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

802 #ifde‡
__USE_XOPEN2K8


804 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

805 
__THROW
 
	`__n⁄nuŒ
 ((1));

806 #ifde‡
__USE_GNU


807 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

808 
__THROW
 
	`__n⁄nuŒ
 ((1));

817 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

818 
__THROW
 
	`__n⁄nuŒ
 ((1));

821 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

822 
__THROW
 
	`__n⁄nuŒ
 ((1));

825 
	$±hªad_muãx©å_gëpsh¨ed
 (c⁄° 
±hªad_muãx©å_t
 *

826 
__ª°ri˘
 
__©å
,

827 *
__ª°ri˘
 
__psh¨ed
)

828 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

831 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

832 
__psh¨ed
)

833 
__THROW
 
	`__n⁄nuŒ
 ((1));

835 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


837 
	$±hªad_muãx©å_gëty≥
 (c⁄° 
±hªad_muãx©å_t
 *
__ª°ri˘


838 
__©å
, *
__ª°ri˘
 
__köd
)

839 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

844 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

845 
__THROW
 
	`__n⁄nuŒ
 ((1));

849 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (c⁄° 
±hªad_muãx©å_t
 *

850 
__ª°ri˘
 
__©å
,

851 *
__ª°ri˘
 
__¥Ÿocﬁ
)

852 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

856 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

857 
__¥Ÿocﬁ
)

858 
__THROW
 
	`__n⁄nuŒ
 ((1));

861 
	$±hªad_muãx©å_gë¥io˚ûög
 (c⁄° 
±hªad_muãx©å_t
 *

862 
__ª°ri˘
 
__©å
,

863 *
__ª°ri˘
 
__¥io˚ûög
)

864 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

867 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

868 
__¥io˚ûög
)

869 
__THROW
 
	`__n⁄nuŒ
 ((1));

871 #ifde‡
__USE_XOPEN2K


873 
	$±hªad_muãx©å_gërobu°
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

874 *
__robu°√ss
)

875 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

876 #ifde‡
__USE_GNU


877 
	$±hªad_muãx©å_gërobu°_≈
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

878 *
__robu°√ss
)

879 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

883 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

884 
__robu°√ss
)

885 
__THROW
 
	`__n⁄nuŒ
 ((1));

886 #ifde‡
__USE_GNU


887 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

888 
__robu°√ss
)

889 
__THROW
 
	`__n⁄nuŒ
 ((1));

894 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


899 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

900 c⁄° 
±hªad_rwlock©å_t
 *
__ª°ri˘


901 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

904 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

905 
__THROW
 
	`__n⁄nuŒ
 ((1));

908 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

909 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

912 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

913 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

915 #ifde‡
__USE_XOPEN2K


917 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

918 c⁄° 
time•ec
 *
__ª°ri˘


919 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

923 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

924 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

927 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

928 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

930 #ifde‡
__USE_XOPEN2K


932 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

933 c⁄° 
time•ec
 *
__ª°ri˘


934 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

938 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

939 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

945 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

946 
__THROW
 
	`__n⁄nuŒ
 ((1));

949 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

950 
__THROW
 
	`__n⁄nuŒ
 ((1));

953 
	$±hªad_rwlock©å_gëpsh¨ed
 (c⁄° 
±hªad_rwlock©å_t
 *

954 
__ª°ri˘
 
__©å
,

955 *
__ª°ri˘
 
__psh¨ed
)

956 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

959 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

960 
__psh¨ed
)

961 
__THROW
 
	`__n⁄nuŒ
 ((1));

964 
	$±hªad_rwlock©å_gëköd_≈
 (c⁄° 
±hªad_rwlock©å_t
 *

965 
__ª°ri˘
 
__©å
,

966 *
__ª°ri˘
 
__¥ef
)

967 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

970 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

971 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

979 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

980 c⁄° 
±hªad_c⁄d©å_t
 *
__ª°ri˘
 
__c⁄d_©å
)

981 
__THROW
 
	`__n⁄nuŒ
 ((1));

984 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

985 
__THROW
 
	`__n⁄nuŒ
 ((1));

988 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

989 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

992 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

993 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1000 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1001 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

1002 
	`__n⁄nuŒ
 ((1, 2));

1011 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1012 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

1013 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

1014 
	`__n⁄nuŒ
 ((1, 2, 3));

1019 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

1020 
__THROW
 
	`__n⁄nuŒ
 ((1));

1023 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

1024 
__THROW
 
	`__n⁄nuŒ
 ((1));

1027 
	$±hªad_c⁄d©å_gëpsh¨ed
 (c⁄° 
±hªad_c⁄d©å_t
 *

1028 
__ª°ri˘
 
__©å
,

1029 *
__ª°ri˘
 
__psh¨ed
)

1030 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1033 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1034 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1036 #ifde‡
__USE_XOPEN2K


1038 
	$±hªad_c⁄d©å_gë˛ock
 (c⁄° 
±hªad_c⁄d©å_t
 *

1039 
__ª°ri˘
 
__©å
,

1040 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1041 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1044 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1045 
__˛ockid_t
 
__˛ock_id
)

1046 
__THROW
 
	`__n⁄nuŒ
 ((1));

1050 #ifde‡
__USE_XOPEN2K


1055 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1056 
__THROW
 
	`__n⁄nuŒ
 ((1));

1059 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1060 
__THROW
 
	`__n⁄nuŒ
 ((1));

1063 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1064 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1067 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1068 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1071 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1072 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1079 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1080 c⁄° 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1081 
__©å
, 
__cou¡
)

1082 
__THROW
 
	`__n⁄nuŒ
 ((1));

1085 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1086 
__THROW
 
	`__n⁄nuŒ
 ((1));

1089 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1090 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1094 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1095 
__THROW
 
	`__n⁄nuŒ
 ((1));

1098 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1099 
__THROW
 
	`__n⁄nuŒ
 ((1));

1102 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (c⁄° 
±hªad_b¨rõøâr_t
 *

1103 
__ª°ri˘
 
__©å
,

1104 *
__ª°ri˘
 
__psh¨ed
)

1105 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1108 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1109 
__psh¨ed
)

1110 
__THROW
 
	`__n⁄nuŒ
 ((1));

1122 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1123 (*
__de°r_fun˘i⁄
) (*))

1124 
__THROW
 
	`__n⁄nuŒ
 ((1));

1127 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1130 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1133 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1134 c⁄° *
__poöãr
Ë
__THROW
 ;

1137 #ifde‡
__USE_XOPEN2K


1139 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1140 
__˛ockid_t
 *
__˛ock_id
)

1141 
__THROW
 
	`__n⁄nuŒ
 ((2));

1156 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1157 (*
__∑ª¡
) (),

1158 (*
__chûd
Ë()Ë
__THROW
;

1161 #ifde‡
__USE_EXTERN_INLINES


1163 
__exã∫_ölöe
 

1164 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1166  
__thªad1
 =
__thªad2
;

1167 
	}
}

1170 
	g__END_DECLS


	@/usr/include/semaphore.h

18 #i‚de‡
_SEMAPHORE_H


19 
	#_SEMAPHORE_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sys/ty≥s.h
>

23 #ifde‡
__USE_XOPEN2K


24 
	#__√ed_time•ec


	)

25 
	~<time.h
>

29 
	~<bôs/£m≠h‹e.h
>

32 
__BEGIN_DECLS


36 
	$£m_öô
 (
£m_t
 *
__£m
, 
__psh¨ed
, 
__vÆue
)

37 
__THROW
;

39 
	$£m_de°roy
 (
£m_t
 *
__£m
Ë
__THROW
;

42 
£m_t
 *
	$£m_›í
 (c⁄° *
__«me
, 
__oÊag
, ...Ë
__THROW
;

45 
	$£m_˛o£
 (
£m_t
 *
__£m
Ë
__THROW
;

48 
	$£m_u∆ök
 (c⁄° *
__«me
Ë
__THROW
;

54 
	`£m_waô
 (
£m_t
 *
__£m
);

56 #ifde‡
__USE_XOPEN2K


61 
	`£m_timedwaô
 (
£m_t
 *
__ª°ri˘
 
__£m
,

62 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
);

66 
	$£m_åywaô
 (
£m_t
 *
__£m
Ë
__THROWNL
;

69 
	$£m_po°
 (
£m_t
 *
__£m
Ë
__THROWNL
;

72 
	$£m_gëvÆue
 (
£m_t
 *
__ª°ri˘
 
__£m
, *__ª°ri˘ 
__svÆ
)

73 
__THROW
;

76 
__END_DECLS


	@/usr/include/signal.h

22 #i‚def 
_SIGNAL_H


24 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


25 
	#_SIGNAL_H


	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	~<bôs/sig£t.h
>

36 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


37 #i‚de‡
__sig_©omic_t_deföed


38 
	#__sig_©omic_t_deföed


	)

39 
__BEGIN_NAMESPACE_STD


40 
__sig_©omic_t
 
	tsig_©omic_t
;

41 
	g__END_NAMESPACE_STD


43 #unde‡
__√ed_sig_©omic_t


46 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

47 #i‚de‡
__sig£t_t_deföed


48 
	#__sig£t_t_deföed


	)

49 
__sig£t_t
 
	tsig£t_t
;

51 #unde‡
__√ed_sig£t_t


54 #ifde‡
_SIGNAL_H


56 
	~<bôs/ty≥s.h
>

57 
	~<bôs/signum.h
>

59 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


60 #i‚de‡
__pid_t_deföed


61 
__pid_t
 
	tpid_t
;

62 
	#__pid_t_deföed


	)

64 #ifde‡
__USE_XOPEN


66 #i‚de‡
__uid_t_deföed


67 
__uid_t
 
	tuid_t
;

68 
	#__uid_t_deföed


	)

72 #ifde‡
__USE_POSIX199309


74 
	#__√ed_time•ec


	)

75 
	~<time.h
>

78 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


80 
	~<bôs/sigöfo.h
>

85 (*
	t__sigh™dÀr_t
) ();

90 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

91 
__THROW
;

92 #ifde‡
__USE_GNU


93 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

94 
__THROW
;

100 
__BEGIN_NAMESPACE_STD


101 #ifde‡
__USE_BSD


102 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

103 
__THROW
;

106 #ifde‡
__REDIRECT_NTH


107 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

108 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

109 
__sysv_sig«l
);

111 
	#sig«l
 
__sysv_sig«l


	)

114 
__END_NAMESPACE_STD


116 #ifde‡
__USE_XOPEN


119 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

120 
__THROW
;

126 #ifde‡
__USE_POSIX


127 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

130 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


134 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

137 
__BEGIN_NAMESPACE_STD


139 
	$øi£
 (
__sig
Ë
__THROW
;

140 
__END_NAMESPACE_STD


142 #ifde‡
__USE_SVID


144 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

145 
__THROW
;

146 
	$gsig«l
 (
__sig
Ë
__THROW
;

149 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K


151 
	`psig«l
 (
__sig
, c⁄° *
__s
);

154 #ifde‡
__USE_XOPEN2K


156 
	`psigöfo
 (c⁄° 
sigöfo_t
 *
__pöfo
, c⁄° *
__s
);

167 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

169 #ifde‡
__USE_XOPEN


170 #ifde‡
__GNUC__


171 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

174 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

179 #ifde‡
__USE_BSD


186 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

189 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

192 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

195 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

199 #ifde‡
__USE_MISC


200 
	#NSIG
 
_NSIG


	)

203 #ifde‡
__USE_GNU


204 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

208 #ifde‡
__USE_BSD


209 
__sigh™dÀr_t
 
	tsig_t
;

212 #ifde‡
__USE_POSIX


215 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

218 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

221 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

224 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

227 
	$sigismembî
 (c⁄° 
sig£t_t
 *
__£t
, 
__signo
)

228 
__THROW
 
	`__n⁄nuŒ
 ((1));

230 #ifde‡
__USE_GNU


232 
	$sigi£m±y£t
 (c⁄° 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

235 
	$sig™d£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

236 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

239 
	$sig‹£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

240 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

245 
	~<bôs/siga˘i⁄.h
>

248 
	$sig¥ocmask
 (
__how
, c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

249 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

256 
	$sigsu•íd
 (c⁄° 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

259 
	$siga˘i⁄
 (
__sig
, c⁄° 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

260 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

263 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

270 
	$sigwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

271 
	`__n⁄nuŒ
 ((1, 2));

273 #ifde‡
__USE_POSIX199309


278 
	$sigwaôöfo
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

279 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

286 
	$sigtimedwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

287 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

288 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

289 
	`__n⁄nuŒ
 ((1));

293 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, c⁄° 
sigvÆ
 
__vÆ
)

294 
__THROW
;

299 #ifde‡
__USE_BSD


303 c⁄° *c⁄° 
_sys_sigli°
[
_NSIG
];

304 c⁄° *c⁄° 
sys_sigli°
[
_NSIG
];

307 
	ssigvec


309 
__sigh™dÀr_t
 
sv_h™dÀr
;

310 
sv_mask
;

312 
sv_Êags
;

313 
	#sv_⁄°ack
 
sv_Êags


	)

317 
	#SV_ONSTACK
 (1 << 0)

	)

318 
	#SV_INTERRUPT
 (1 << 1)

	)

319 
	#SV_RESETHAND
 (1 << 2)

	)

327 
	$sigvec
 (
__sig
, c⁄° 
sigvec
 *
__vec
,

328 
sigvec
 *
__ovec
Ë
__THROW
;

332 
	~<bôs/sigc⁄ãxt.h
>

335 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

340 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


341 
	#__√ed_size_t


	)

342 
	~<°ddef.h
>

347 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

349 
	~<bôs/sig°ack.h
>

350 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


352 
	~<sys/uc⁄ãxt.h
>

358 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

359 
__THROW
 
__©åibuã_dïªˇãd__
;

363 
	$sigÆt°ack
 (c⁄° 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

364 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

368 #ifde‡
__USE_XOPEN_EXTENDED


372 
	$sighﬁd
 (
__sig
Ë
__THROW
;

375 
	$sigªl£
 (
__sig
Ë
__THROW
;

378 
	$sigign‹e
 (
__sig
Ë
__THROW
;

381 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

384 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


387 
	~<bôs/±hªadty≥s.h
>

388 
	~<bôs/sigthªad.h
>

395 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

397 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

401 
__END_DECLS


	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


25 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


26 
	#_STDIO_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	#__√ed_FILE


	)

37 
	#__√ed___FILE


	)

41 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


44 
	g_IO_FILE
;

46 
__BEGIN_NAMESPACE_STD


48 
_IO_FILE
 
	tFILE
;

49 
	g__END_NAMESPACE_STD


50 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

51 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

52 || 
deföed
 
__USE_POSIX2


53 
	$__USING_NAMESPACE_STD
(
FILE
)

56 
	#__FILE_deföed
 1

	)

58 #unde‡
__√ed_FILE


61 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


64 
_IO_FILE
 
	t__FILE
;

66 
	#____FILE_deföed
 1

	)

68 #unde‡
__√ed___FILE


71 #ifdef 
_STDIO_H


72 
	#_STDIO_USES_IOSTREAM


	)

74 
	~<libio.h
>

76 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


77 #ifde‡
__GNUC__


78 #i‚de‡
_VA_LIST_DEFINED


79 
_G_va_li°
 
	tva_li°
;

80 
	#_VA_LIST_DEFINED


	)

83 
	~<°d¨g.h
>

87 #ifde‡
__USE_XOPEN2K8


88 #i‚de‡
__off_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__off_t
 
	toff_t
;

92 
__off64_t
 
	toff_t
;

94 
	#__off_t_deföed


	)

96 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


97 
__off64_t
 
	toff64_t
;

98 
	#__off64_t_deföed


	)

101 #i‚de‡
__ssize_t_deföed


102 
__ssize_t
 
	tssize_t
;

103 
	#__ssize_t_deföed


	)

108 
__BEGIN_NAMESPACE_STD


109 #i‚de‡
__USE_FILE_OFFSET64


110 
_G_Âos_t
 
	tÂos_t
;

112 
_G_Âos64_t
 
	tÂos_t
;

114 
__END_NAMESPACE_STD


115 #ifde‡
__USE_LARGEFILE64


116 
_G_Âos64_t
 
	tÂos64_t
;

120 
	#_IOFBF
 0

	)

121 
	#_IOLBF
 1

	)

122 
	#_IONBF
 2

	)

126 #i‚de‡
BUFSIZ


127 
	#BUFSIZ
 
_IO_BUFSIZ


	)

133 #i‚de‡
EOF


134 
	#EOF
 (-1)

	)

140 
	#SEEK_SET
 0

	)

141 
	#SEEK_CUR
 1

	)

142 
	#SEEK_END
 2

	)

143 #ifde‡
__USE_GNU


144 
	#SEEK_DATA
 3

	)

145 
	#SEEK_HOLE
 4

	)

149 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


151 
	#P_tmpdú
 "/tmp"

	)

164 
	~<bôs/°dio_lim.h
>

168 
_IO_FILE
 *
°dö
;

169 
_IO_FILE
 *
°dout
;

170 
_IO_FILE
 *
°dîr
;

172 
	#°dö
 
°dö


	)

173 
	#°dout
 
°dout


	)

174 
	#°dîr
 
°dîr


	)

176 
__BEGIN_NAMESPACE_STD


178 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

180 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

181 
__END_NAMESPACE_STD


183 #ifde‡
__USE_ATFILE


185 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

186 c⁄° *
__√w
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


194 #i‚de‡
__USE_FILE_OFFSET64


195 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

197 #ifde‡
__REDIRECT


198 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

200 
	#tmpfûe
 
tmpfûe64


	)

204 #ifde‡
__USE_LARGEFILE64


205 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

209 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

210 
__END_NAMESPACE_STD


212 #ifde‡
__USE_MISC


215 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

219 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


227 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

228 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

232 
__BEGIN_NAMESPACE_STD


237 
	`f˛o£
 (
FILE
 *
__°ªam
);

242 
	`fÊush
 (
FILE
 *
__°ªam
);

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_MISC


252 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

255 #ifde‡
__USE_GNU


262 
	`f˛o£Æl
 ();

266 
__BEGIN_NAMESPACE_STD


267 #i‚de‡
__USE_FILE_OFFSET64


272 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

273 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

278 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

279 c⁄° *
__ª°ri˘
 
__modes
,

280 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

282 #ifde‡
__REDIRECT


283 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

284 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

285 
__wur
;

286 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

287 c⁄° *
__ª°ri˘
 
__modes
,

288 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

289 
__wur
;

291 
	#f›í
 
f›í64


	)

292 
	#‰e›í
 
‰e›í64


	)

295 
__END_NAMESPACE_STD


296 #ifde‡
__USE_LARGEFILE64


297 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

298 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

299 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

300 c⁄° *
__ª°ri˘
 
__modes
,

301 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

304 #ifdef 
__USE_POSIX


306 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

309 #ifdef 
__USE_GNU


312 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

313 c⁄° *
__ª°ri˘
 
__modes
,

314 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

317 #ifde‡
__USE_XOPEN2K8


319 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

320 
__THROW
 
__wur
;

325 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

329 
__BEGIN_NAMESPACE_STD


332 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

336 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

337 
__modes
, 
size_t
 
__n
Ë
__THROW
;

338 
__END_NAMESPACE_STD


340 #ifdef 
__USE_BSD


343 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

344 
size_t
 
__size
Ë
__THROW
;

347 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

351 
__BEGIN_NAMESPACE_STD


356 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

357 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

362 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

364 
	$•rötf
 (*
__ª°ri˘
 
__s
,

365 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

371 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

372 
_G_va_li°
 
__¨g
);

377 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

379 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

380 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

381 
__END_NAMESPACE_STD


383 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


384 
__BEGIN_NAMESPACE_C99


386 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

387 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

388 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

390 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

391 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

392 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

393 
__END_NAMESPACE_C99


396 #ifde‡
__USE_GNU


399 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

400 
_G_va_li°
 
__¨g
)

401 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

402 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

403 c⁄° *
__ª°ri˘
 
__fmt
, ...)

404 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

405 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

406 c⁄° *
__ª°ri˘
 
__fmt
, ...)

407 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

410 #ifde‡
__USE_XOPEN2K8


412 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

413 
_G_va_li°
 
__¨g
)

414 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

415 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

420 
__BEGIN_NAMESPACE_STD


425 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

426 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

431 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

434 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

436 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

437 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

438 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

439 #ifde‡
__REDIRECT


443 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

444 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

445 
__isoc99_fsˇnf
Ë
__wur
;

446 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_sˇnf
Ë
__wur
;

448 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

449 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

450 
__isoc99_ssˇnf
);

452 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

454 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

455 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

456 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

457 
	#fsˇnf
 
__isoc99_fsˇnf


	)

458 
	#sˇnf
 
__isoc99_sˇnf


	)

459 
	#ssˇnf
 
__isoc99_ssˇnf


	)

463 
__END_NAMESPACE_STD


465 #ifdef 
__USE_ISOC99


466 
__BEGIN_NAMESPACE_C99


471 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

472 
_G_va_li°
 
__¨g
)

473 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

479 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

480 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

483 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

484 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

485 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

487 #i‡!
deföed
 
__USE_GNU
 \

488 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

489 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

490 #ifde‡
__REDIRECT


494 
	`__REDIRECT
 (
vfsˇnf
,

495 (
FILE
 *
__ª°ri˘
 
__s
,

496 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

497 
__isoc99_vfsˇnf
)

498 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

499 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

500 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

501 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

502 
	`__REDIRECT_NTH
 (
vssˇnf
,

503 (c⁄° *
__ª°ri˘
 
__s
,

504 c⁄° *
__ª°ri˘
 
__f‹m©
,

505 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

506 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

508 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

509 c⁄° *
__ª°ri˘
 
__f‹m©
,

510 
_G_va_li°
 
__¨g
Ë
__wur
;

511 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

514 c⁄° *
__ª°ri˘
 
__f‹m©
,

515 
_G_va_li°
 
__¨g
Ë
__THROW
;

516 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

517 
	#vsˇnf
 
__isoc99_vsˇnf


	)

518 
	#vssˇnf
 
__isoc99_vssˇnf


	)

522 
__END_NAMESPACE_C99


526 
__BEGIN_NAMESPACE_STD


531 
	`fgëc
 (
FILE
 *
__°ªam
);

532 
	`gëc
 (
FILE
 *
__°ªam
);

538 
	`gëch¨
 ();

539 
__END_NAMESPACE_STD


543 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

545 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


550 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

551 
	`gëch¨_u∆ocked
 ();

554 #ifde‡
__USE_MISC


561 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

565 
__BEGIN_NAMESPACE_STD


573 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

574 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

580 
	`putch¨
 (
__c
);

581 
__END_NAMESPACE_STD


585 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

587 #ifde‡
__USE_MISC


594 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

597 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


602 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

603 
	`putch¨_u∆ocked
 (
__c
);

607 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

608 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

610 
	`gëw
 (
FILE
 *
__°ªam
);

613 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

617 
__BEGIN_NAMESPACE_STD


622 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

623 
__wur
;

625 #i‡!
deföed
 
__USE_ISOC11
 \

626 || (
deföed
 
__˝lu•lus
 && __cplusplus <= 201103L)

638 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

640 
__END_NAMESPACE_STD


642 #ifde‡
__USE_GNU


649 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

650 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

654 #ifdef 
__USE_XOPEN2K8


665 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

666 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

667 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

668 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

669 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

670 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

678 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

679 
size_t
 *
__ª°ri˘
 
__n
,

680 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

684 
__BEGIN_NAMESPACE_STD


689 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

695 
	`puts
 (c⁄° *
__s
);

702 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

709 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

710 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

715 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

716 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

717 
__END_NAMESPACE_STD


719 #ifde‡
__USE_GNU


726 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

727 
FILE
 *
__ª°ri˘
 
__°ªam
);

730 #ifde‡
__USE_MISC


737 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

738 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

739 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

740 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

744 
__BEGIN_NAMESPACE_STD


749 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

754 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

759 
	`ªwöd
 (
FILE
 *
__°ªam
);

760 
__END_NAMESPACE_STD


767 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


768 #i‚de‡
__USE_FILE_OFFSET64


773 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

778 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

780 #ifde‡
__REDIRECT


781 
	`__REDIRECT
 (
f£eko
,

782 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

783 
f£eko64
);

784 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

786 
	#f£eko
 
f£eko64


	)

787 
	#·ñlo
 
·ñlo64


	)

792 
__BEGIN_NAMESPACE_STD


793 #i‚de‡
__USE_FILE_OFFSET64


798 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

803 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

805 #ifde‡
__REDIRECT


806 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

807 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

808 
	`__REDIRECT
 (
f£ços
,

809 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

811 
	#fgëpos
 
fgëpos64


	)

812 
	#f£ços
 
f£ços64


	)

815 
__END_NAMESPACE_STD


817 #ifde‡
__USE_LARGEFILE64


818 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

819 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

820 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

821 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

824 
__BEGIN_NAMESPACE_STD


826 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

828 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

830 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

831 
__END_NAMESPACE_STD


833 #ifde‡
__USE_MISC


835 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

836 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

837 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

841 
__BEGIN_NAMESPACE_STD


846 
	`≥º‹
 (c⁄° *
__s
);

847 
__END_NAMESPACE_STD


853 
	~<bôs/sys_îæi°.h
>

856 #ifdef 
__USE_POSIX


858 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

861 #ifde‡
__USE_MISC


863 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

867 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

868 
deföed
 
__USE_MISC
)

873 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

879 
	`p˛o£
 (
FILE
 *
__°ªam
);

883 #ifdef 
__USE_POSIX


885 *
	$˘îmid
 (*
__s
Ë
__THROW
;

889 #ifde‡
__USE_XOPEN


891 *
	`cu£rid
 (*
__s
);

895 #ifdef 
__USE_GNU


896 
ob°ack
;

899 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

900 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

901 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

902 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

903 c⁄° *
__ª°ri˘
 
__f‹m©
,

904 
_G_va_li°
 
__¨gs
)

905 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

909 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


913 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

917 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

920 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

923 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


927 
	#__√ed_gë›t


	)

928 
	~<gë›t.h
>

933 #ifde‡
__USE_EXTERN_INLINES


934 
	~<bôs/°dio.h
>

936 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


937 
	~<bôs/°dio2.h
>

939 #ifde‡
__LDBL_COMPAT


940 
	~<bôs/°dio-ldbl.h
>

943 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


37 
	#_STDLIB_H
 1

	)

39 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


41 
	~<bôs/waôÊags.h
>

42 
	~<bôs/waô°©us.h
>

44 #ifde‡
__USE_BSD


49 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


50 
	#__WAIT_INT
(
°©us
) \

51 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

52 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

54 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

62 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


63 
	#__WAIT_STATUS
 *

	)

64 
	#__WAIT_STATUS_DEFN
 *

	)

69 
waô
 *
	m__u±r
;

70 *
	m__ùå
;

71 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

72 
	#__WAIT_STATUS_DEFN
 *

	)

77 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

78 
	#__WAIT_STATUS
 *

	)

79 
	#__WAIT_STATUS_DEFN
 *

	)

84 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

90 #ifde‡
__WIFCONTINUED


91 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

95 
__BEGIN_NAMESPACE_STD


99 
	mquŸ
;

100 
	mªm
;

101 } 
	tdiv_t
;

104 #i‚de‡
__ldiv_t_deföed


107 
	mquŸ
;

108 
	mªm
;

109 } 
	tldiv_t
;

110 
	#__ldiv_t_deföed
 1

	)

112 
	g__END_NAMESPACE_STD


114 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


115 
__BEGIN_NAMESPACE_C99


117 
__exãnsi⁄__
 struct

119 
	mquŸ
;

120 
	mªm
;

121 } 
	tŒdiv_t
;

122 
	#__Œdiv_t_deföed
 1

	)

123 
	g__END_NAMESPACE_C99


128 
	#RAND_MAX
 2147483647

	)

133 
	#EXIT_FAILURE
 1

	)

134 
	#EXIT_SUCCESS
 0

	)

138 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

139 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

142 
__BEGIN_NAMESPACE_STD


144 
	$©of
 (c⁄° *
__≈å
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

147 
	$©oi
 (c⁄° *
__≈å
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

150 
	$©ﬁ
 (c⁄° *
__≈å
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

152 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_MISC


155 
__BEGIN_NAMESPACE_C99


157 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

158 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

159 
__END_NAMESPACE_C99


162 
__BEGIN_NAMESPACE_STD


164 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

167 
__END_NAMESPACE_STD


169 #ifdef 
__USE_ISOC99


170 
__BEGIN_NAMESPACE_C99


172 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

173 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

175 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

176 **
__ª°ri˘
 
__íd±r
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

178 
__END_NAMESPACE_C99


181 
__BEGIN_NAMESPACE_STD


183 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

184 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

185 
__THROW
 
	`__n⁄nuŒ
 ((1));

187 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

190 
__END_NAMESPACE_STD


192 #ifde‡
__USE_BSD


194 
__exãnsi⁄__


195 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

196 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

197 
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
__exãnsi⁄__


200 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

205 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_MISC


206 
__BEGIN_NAMESPACE_C99


208 
__exãnsi⁄__


209 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

210 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

211 
__THROW
 
	`__n⁄nuŒ
 ((1));

213 
__exãnsi⁄__


214 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

215 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
__END_NAMESPACE_C99


221 #ifde‡
__USE_GNU


235 
	~<xloˇÀ.h
>

239 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

240 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

241 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

243 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

244 **
__ª°ri˘
 
__íd±r
,

245 
__ba£
, 
__loˇÀ_t
 
__loc
)

246 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

248 
__exãnsi⁄__


249 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

250 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

251 
__loˇÀ_t
 
__loc
)

252 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

254 
__exãnsi⁄__


255 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

256 **
__ª°ri˘
 
__íd±r
,

257 
__ba£
, 
__loˇÀ_t
 
__loc
)

258 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

260 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

261 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

262 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

264 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

265 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

266 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

268 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

269 **
__ª°ri˘
 
__íd±r
,

270 
__loˇÀ_t
 
__loc
)

271 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

275 #ifde‡
__USE_EXTERN_INLINES


276 
__BEGIN_NAMESPACE_STD


277 
__exã∫_ölöe
 

278 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

280  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

281 
	}
}

282 
__exã∫_ölöe
 

283 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

285  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

286 
	}
}

287 
	g__END_NAMESPACE_STD


289 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


290 
__BEGIN_NAMESPACE_C99


291 
__exãnsi⁄__
 
__exã∫_ölöe
 

292 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

294  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

295 
	}
}

296 
	g__END_NAMESPACE_C99


301 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


305 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

308 
	$a64l
 (c⁄° *
__s
)

309 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

313 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


314 
	~<sys/ty≥s.h
>

321 
	$øndom
 (Ë
__THROW
;

324 
	$§™dom
 (
__£ed
Ë
__THROW
;

330 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

331 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

335 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

338 #ifde‡
__USE_MISC


343 
	søndom_d©a


345 
öt32_t
 *
Âå
;

346 
öt32_t
 *
Ωå
;

347 
öt32_t
 *
°©e
;

348 
ønd_ty≥
;

349 
ønd_deg
;

350 
ønd_£p
;

351 
öt32_t
 *
íd_±r
;

354 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

355 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

357 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

360 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

361 
size_t
 
__°©ñí
,

362 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

363 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

365 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

366 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

367 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

372 
__BEGIN_NAMESPACE_STD


374 
	$ønd
 (Ë
__THROW
;

376 
	$§™d
 (
__£ed
Ë
__THROW
;

377 
__END_NAMESPACE_STD


379 #ifde‡
__USE_POSIX


381 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

385 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


389 
	$dønd48
 (Ë
__THROW
;

390 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 
	$Ã™d48
 (Ë
__THROW
;

394 
	$ƒ™d48
 (
__xsubi
[3])

395 
__THROW
 
	`__n⁄nuŒ
 ((1));

398 
	$mønd48
 (Ë
__THROW
;

399 
	$jønd48
 (
__xsubi
[3])

400 
__THROW
 
	`__n⁄nuŒ
 ((1));

403 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

404 *
	$£ed48
 (
__£ed16v
[3])

405 
__THROW
 
	`__n⁄nuŒ
 ((1));

406 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

408 #ifde‡
__USE_MISC


412 
	sdønd48_d©a


414 
__x
[3];

415 
__ﬁd_x
[3];

416 
__c
;

417 
__öô
;

418 
__exãnsi⁄__
 
__a
;

423 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

424 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

425 
	$î™d48_r
 (
__xsubi
[3],

426 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

427 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

431 *
__ª°ri˘
 
__ªsu…
)

432 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

433 
	$ƒ™d48_r
 (
__xsubi
[3],

434 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

435 *
__ª°ri˘
 
__ªsu…
)

436 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

439 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

442 
	$jønd48_r
 (
__xsubi
[3],

443 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

444 *
__ª°ri˘
 
__ªsu…
)

445 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

448 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

449 
__THROW
 
	`__n⁄nuŒ
 ((2));

451 
	$£ed48_r
 (
__£ed16v
[3],

452 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$lc⁄g48_r
 (
__∑øm
[7],

455 
dønd48_d©a
 *
__buf„r
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

462 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


463 
	#__mÆloc_™d_ˇŒoc_deföed


	)

464 
__BEGIN_NAMESPACE_STD


466 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

468 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

469 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

470 
__END_NAMESPACE_STD


473 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


474 
__BEGIN_NAMESPACE_STD


480 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

481 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

483 
	$‰ì
 (*
__±r
Ë
__THROW
;

484 
__END_NAMESPACE_STD


486 #ifdef 
__USE_MISC


488 
	$c‰ì
 (*
__±r
Ë
__THROW
;

491 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


492 
	~<Æloˇ.h
>

495 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

496 || 
deföed
 
__USE_BSD


498 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

501 #ifde‡
__USE_XOPEN2K


503 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

504 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

507 #ifde‡
__USE_ISOC11


509 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

510 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

513 
__BEGIN_NAMESPACE_STD


515 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

519 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

521 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


523 #ifde‡
__˝lu•lus


524 "C++" 
	`©_quick_exô
 ((*
__func
) ())

525 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

527 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

530 
__END_NAMESPACE_STD


532 #ifdef 
__USE_MISC


535 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

536 
__THROW
 
	`__n⁄nuŒ
 ((1));

539 
__BEGIN_NAMESPACE_STD


543 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

545 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


549 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

551 
__END_NAMESPACE_STD


553 #ifde‡
__USE_ISOC99


554 
__BEGIN_NAMESPACE_C99


557 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

558 
__END_NAMESPACE_C99


562 
__BEGIN_NAMESPACE_STD


564 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

565 
__END_NAMESPACE_STD


567 #ifde‡
__USE_GNU


570 *
	$£cuª_gëív
 (c⁄° *
__«me
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

574 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


578 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

581 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


584 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

585 
__THROW
 
	`__n⁄nuŒ
 ((2));

588 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 #ifdef 
__USE_MISC


595 
	$˛óªnv
 (Ë
__THROW
;

599 #i‡
deföed
 
__USE_MISC
 \

600 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

609 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

610 || 
deföed
 
__USE_XOPEN2K8


619 #i‚de‡
__USE_FILE_OFFSET64


620 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

622 #ifde‡
__REDIRECT


623 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

624 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 
	#mk°emp
 
mk°emp64


	)

629 #ifde‡
__USE_LARGEFILE64


630 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

634 #ifde‡
__USE_MISC


641 #i‚de‡
__USE_FILE_OFFSET64


642 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

644 #ifde‡
__REDIRECT


645 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

646 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

648 
	#mk°emps
 
mk°emps64


	)

651 #ifde‡
__USE_LARGEFILE64


652 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

653 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


663 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

666 #ifde‡
__USE_GNU


673 #i‚de‡
__USE_FILE_OFFSET64


674 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

676 #ifde‡
__REDIRECT


677 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

678 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

680 
	#mko°emp
 
mko°emp64


	)

683 #ifde‡
__USE_LARGEFILE64


684 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

693 #i‚de‡
__USE_FILE_OFFSET64


694 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 #ifde‡
__REDIRECT


698 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

699 
__Êags
), 
mko°emps64
)

700 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 
	#mko°emps
 
mko°emps64


	)

705 #ifde‡
__USE_LARGEFILE64


706 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

707 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 
__BEGIN_NAMESPACE_STD


717 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

718 
__END_NAMESPACE_STD


721 #ifdef 
__USE_GNU


724 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

728 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


734 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

735 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

740 #i‚de‡
__COMPAR_FN_T


741 
	#__COMPAR_FN_T


	)

742 (*
	t__com∑r_‚_t
) (const *, const *);

744 #ifdef 
__USE_GNU


745 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

748 #ifde‡
__USE_GNU


749 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

752 
__BEGIN_NAMESPACE_STD


755 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

756 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

757 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

759 #ifde‡
__USE_EXTERN_INLINES


760 
	~<bôs/°dlib-b£¨ch.h
>

765 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

766 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

767 #ifde‡
__USE_GNU


768 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

769 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

770 
	`__n⁄nuŒ
 ((1, 4));

775 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

776 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

777 
__END_NAMESPACE_STD


779 #ifde‡
__USE_ISOC99


780 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

781 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

785 
__BEGIN_NAMESPACE_STD


789 
div_t
 
	$div
 (
__numî
, 
__díom
)

790 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

791 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

792 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

793 
__END_NAMESPACE_STD


795 #ifde‡
__USE_ISOC99


796 
__BEGIN_NAMESPACE_C99


797 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

798 
__díom
)

799 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

800 
__END_NAMESPACE_C99


804 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

805 || 
deföed
 
__USE_SVID


812 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

813 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

818 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

819 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

824 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

825 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

828 #ifde‡
__USE_MISC


830 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

831 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

832 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

833 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

834 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

835 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

836 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

837 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

842 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

843 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

844 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

845 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

846 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

847 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

849 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

850 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

851 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

852 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

853 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

854 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

855 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

856 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

860 
__BEGIN_NAMESPACE_STD


863 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

866 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

867 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

870 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

874 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

875 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

877 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

878 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

879 
__THROW
;

880 
__END_NAMESPACE_STD


883 #ifde‡
__USE_SVID


888 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

892 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


899 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

900 *c⁄° *
__ª°ri˘
 
__tokís
,

901 **
__ª°ri˘
 
__vÆuï
)

902 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

906 #ifde‡
__USE_XOPEN


908 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

914 #ifde‡
__USE_XOPEN2KXSI


916 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

919 #ifde‡
__USE_XOPEN


924 
	$gø¡±
 (
__fd
Ë
__THROW
;

928 
	$u∆ock±
 (
__fd
Ë
__THROW
;

933 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

936 #ifde‡
__USE_GNU


940 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

941 
__THROW
 
	`__n⁄nuŒ
 ((2));

944 
	`gë±
 ();

947 #ifde‡
__USE_BSD


951 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

952 
__THROW
 
	`__n⁄nuŒ
 ((1));

955 
	~<bôs/°dlib-Êﬂt.h
>

958 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


959 
	~<bôs/°dlib.h
>

961 #ifde‡
__LDBL_COMPAT


962 
	~<bôs/°dlib-ldbl.h
>

966 #unde‡
__√ed_mÆloc_™d_ˇŒoc


968 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


30 
	#__√ed_size_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

39 #i‡
deföed
 
__˝lu•lus
 && (__˝lu•lu†>199711L || 
__GNUC_PREREQ
 (4, 4))

40 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

44 
__BEGIN_NAMESPACE_STD


46 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

47 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

50 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

51 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

52 
__END_NAMESPACE_STD


57 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


58 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

59 
__c
, 
size_t
 
__n
)

60 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

64 
__BEGIN_NAMESPACE_STD


66 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

69 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

70 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

73 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


76 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

77 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

78 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

79 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

81 #ifde‡
__OPTIMIZE__


82 
__exã∫_Æways_ölöe
 *

83 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


85  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

88 
__exã∫_Æways_ölöe
 const *

89 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


91  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

94 
	}
}

96 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

97 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

99 
__END_NAMESPACE_STD


101 #ifde‡
__USE_GNU


104 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


105 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

106 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

107 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

108 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

110 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

111 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

115 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


116 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

117 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

118 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

119 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

121 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

122 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

127 
__BEGIN_NAMESPACE_STD


129 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

132 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

133 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

137 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

138 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

140 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

141 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

144 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

151 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

154 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

155 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

156 
__THROW
 
	`__n⁄nuŒ
 ((2));

157 
__END_NAMESPACE_STD


159 #ifde‡
__USE_XOPEN2K8


163 
	~<xloˇÀ.h
>

166 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

167 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

169 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

170 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

173 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

174 || 
deföed
 
__USE_XOPEN2K8


176 *
	$°rdup
 (c⁄° *
__s
)

177 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

183 #i‡
deföed
 
__USE_XOPEN2K8


184 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

185 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

188 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


190 
	#°rdu∑
(
s
) \

191 (
__exãnsi⁄__
 \

193 c⁄° *
__ﬁd
 = (
s
); \

194 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

195 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

196 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

197 
	}
}))

	)

200 
	#°∫du∑
(
s
, 
n
) \

201 (
__exãnsi⁄__
 \

203 c⁄° *
__ﬁd
 = (
s
); \

204 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

205 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

206 
__√w
[
__Àn
] = '\0'; \

207 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

208 }))

	)

211 
	g__BEGIN_NAMESPACE_STD


213 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


216 *
°rchr
 (*
__s
, 
__c
)

217 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

218 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

219 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

221 #ifde‡
__OPTIMIZE__


222 
__exã∫_Æways_ölöe
 *

223 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


225  
__buûtö_°rchr
 (
__s
, 
__c
);

228 
__exã∫_Æways_ölöe
 const *

229 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


231  
__buûtö_°rchr
 (
__s
, 
__c
);

236 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

237 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

240 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


243 *
	`°ºchr
 (*
__s
, 
__c
)

244 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

245 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

246 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

248 #ifde‡
__OPTIMIZE__


249 
__exã∫_Æways_ölöe
 *

250 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


252  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

255 
__exã∫_Æways_ölöe
 const *

256 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


258  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

261 
	}
}

263 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

264 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

266 
__END_NAMESPACE_STD


268 #ifde‡
__USE_GNU


271 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


272 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

273 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

274 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

275 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

277 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

278 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

282 
__BEGIN_NAMESPACE_STD


285 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

286 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

289 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

290 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

292 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


295 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

296 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

297 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

298 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

300 #ifde‡
__OPTIMIZE__


301 
__exã∫_Æways_ölöe
 *

302 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


304  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

307 
__exã∫_Æways_ölöe
 const *

308 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


310  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

313 
	}
}

315 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

316 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

319 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


322 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

323 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

324 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

325 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__OPTIMIZE__


328 
__exã∫_Æways_ölöe
 *

329 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


331  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

334 
__exã∫_Æways_ölöe
 const *

335 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


337  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

340 
	}
}

342 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

349 
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
__END_NAMESPACE_STD


354 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

355 c⁄° *
__ª°ri˘
 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

358 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


359 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

360 **
__ª°ri˘
 
__ßve_±r
)

361 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

364 #ifde‡
__USE_GNU


366 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


367 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

368 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

370 c⁄° *
__√edÀ
)

371 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

374 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

378 #ifde‡
__USE_GNU


382 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

383 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

384 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

388 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

389 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

392 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

397 
__BEGIN_NAMESPACE_STD


399 
size_t
 
	$°æí
 (c⁄° *
__s
)

400 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

401 
__END_NAMESPACE_STD


403 #ifdef 
__USE_XOPEN2K8


406 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

407 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

411 
__BEGIN_NAMESPACE_STD


413 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

414 
__END_NAMESPACE_STD


415 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


423 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


426 #ifde‡
__REDIRECT_NTH


427 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

428 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

429 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

431 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

433 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

438 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

443 #ifde‡
__USE_XOPEN2K8


445 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

451 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

453 #ifde‡
__USE_BSD


455 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

462 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

463 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

466 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


469 *
	`ödex
 (*
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

471 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

472 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

474 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


475 
__exã∫_Æways_ölöe
 *

476 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


478  
	`__buûtö_ödex
 (
__s
, 
__c
);

481 
__exã∫_Æways_ölöe
 const *

482 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


484  
	`__buûtö_ödex
 (
__s
, 
__c
);

487 
	}
}

489 *
	$ödex
 (c⁄° *
__s
, 
__c
)

490 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


497 *
	`rödex
 (*
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

499 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

500 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

502 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


503 
__exã∫_Æways_ölöe
 *

504 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


506  
	`__buûtö_rödex
 (
__s
, 
__c
);

509 
__exã∫_Æways_ölöe
 const *

510 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


512  
	`__buûtö_rödex
 (
__s
, 
__c
);

515 
	}
}

517 *
	$rödex
 (c⁄° *
__s
, 
__c
)

518 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

523 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifdef 
__USE_GNU


528 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

530 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

534 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

535 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

538 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

539 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

542 #ifdef 
__USE_GNU


545 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

546 
__loˇÀ_t
 
__loc
)

547 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

549 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

550 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

551 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

554 #ifdef 
__USE_BSD


557 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

558 c⁄° *
__ª°ri˘
 
__dñim
)

559 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

562 #ifdef 
__USE_XOPEN2K8


564 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

567 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

568 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

574 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

575 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

576 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

577 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

578 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

582 #ifdef 
__USE_GNU


584 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

585 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

588 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 #i‚de‡
ba£«me


598 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


599 "C++" *
	$ba£«me
 (*
__fûíame
)

600 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

601 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

604 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

610 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

611 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

612 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


632 
	~<bôs/°rög.h
>

635 
	~<bôs/°rög2.h
>

638 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


640 
	~<bôs/°rög3.h
>

644 
__END_DECLS


	@/usr/include/sys/ioctl.h

18 #i‚def 
_SYS_IOCTL_H


19 
	#_SYS_IOCTL_H
 1

	)

21 
	~<„©uªs.h
>

23 
	g__BEGIN_DECLS


26 
	~<bôs/io˘ls.h
>

29 
	~<bôs/io˘l-ty≥s.h
>

36 
	~<sys/âydeÁu…s.h
>

41 
	$io˘l
 (
__fd
, 
__ªque°
, ...Ë
__THROW
;

43 
__END_DECLS


	@/usr/include/sys/mman.h

19 #i‚def 
_SYS_MMAN_H


20 
	#_SYS_MMAN_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<bôs/ty≥s.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 #i‚de‡
__off_t_deföed


28 #i‚de‡
__USE_FILE_OFFSET64


29 
__off_t
 
	toff_t
;

31 
__off64_t
 
	toff_t
;

33 
	#__off_t_deföed


	)

36 #i‚de‡
__mode_t_deföed


37 
__mode_t
 
	tmode_t
;

38 
	#__mode_t_deföed


	)

41 
	~<bôs/mm™.h
>

44 
	#MAP_FAILED
 ((*Ë-1)

	)

46 
	g__BEGIN_DECLS


56 #i‚de‡
__USE_FILE_OFFSET64


57 *
	$mm≠
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

58 
__Êags
, 
__fd
, 
__off_t
 
__off£t
Ë
__THROW
;

60 #ifde‡
__REDIRECT_NTH


61 * 
	`__REDIRECT_NTH
 (
mm≠
,

62 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

63 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
),

64 
mm≠64
);

66 
	#mm≠
 
mm≠64


	)

69 #ifde‡
__USE_LARGEFILE64


70 *
	$mm≠64
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

71 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
Ë
__THROW
;

76 
	$munm≠
 (*
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

81 
	$m¥Ÿe˘
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
Ë
__THROW
;

89 
	`msync
 (*
__addr
, 
size_t
 
__Àn
, 
__Êags
);

91 #ifde‡
__USE_BSD


94 
	$madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

96 #ifde‡
__USE_XOPEN2K


98 
	$posix_madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

103 
	$mlock
 (c⁄° *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

106 
	$mu∆ock
 (c⁄° *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

111 
	$mlockÆl
 (
__Êags
Ë
__THROW
;

115 
	$mu∆ockÆl
 (Ë
__THROW
;

117 #ifde‡
__USE_MISC


123 
	$möc‹e
 (*
__°¨t
, 
size_t
 
__Àn
, *
__vec
)

124 
__THROW
;

127 #ifde‡
__USE_GNU


133 *
	$mªm≠
 (*
__addr
, 
size_t
 
__ﬁd_Àn
, size_à
__√w_Àn
,

134 
__Êags
, ...Ë
__THROW
;

138 
	$ªm≠_fûe_∑ges
 (*
__°¨t
, 
size_t
 
__size
, 
__¥Ÿ
,

139 
size_t
 
__pgoff
, 
__Êags
Ë
__THROW
;

144 
	`shm_›í
 (c⁄° *
__«me
, 
__oÊag
, 
mode_t
 
__mode
);

147 
	`shm_u∆ök
 (c⁄° *
__«me
);

149 
__END_DECLS


	@/usr/include/sys/param.h

19 #i‚de‡
_SYS_PARAM_H


20 
	#_SYS_PARAM_H
 1

	)

22 
	#__√ed_NULL


	)

23 
	~<°ddef.h
>

25 
	~<sys/ty≥s.h
>

26 
	~<limôs.h
>

27 
	~<ídün.h
>

28 
	~<sig«l.h
>

31 
	~<bôs/∑øm.h
>

36 
	#NBBY
 
CHAR_BIT


	)

38 #i‡!
deföed
 
NGROUPS
 && deföed 
NGROUPS_MAX


39 
	#NGROUPS
 
NGROUPS_MAX


	)

41 #i‡!
deföed
 
MAXSYMLINKS
 && deföed 
SYMLOOP_MAX


42 
	#MAXSYMLINKS
 
SYMLOOP_MAX


	)

44 #i‡!
deföed
 
CANBSIZ
 && deföed 
MAX_CANON


45 
	#CANBSIZ
 
MAX_CANON


	)

47 #i‡!
deföed
 
MAXPATHLEN
 && deföed 
PATH_MAX


48 
	#MAXPATHLEN
 
PATH_MAX


	)

50 #i‡!
deföed
 
NOFILE
 && deföed 
OPEN_MAX


51 
	#NOFILE
 
OPEN_MAX


	)

53 #i‚de‡
NCARGS


54 #ifde‡
ARG_MAX


55 
	#NCARGS
 
ARG_MAX


	)

59 
	#NCARGS
 
INT_MAX


	)

65 #i‚de‡
NOGROUP


66 
	#NOGROUP
 65535

	)

68 #i‚de‡
NODEV


69 
	#NODEV
 ((
dev_t
Ë-1Ë

	)

74 #i‚de‡
DEV_BSIZE


75 
	#DEV_BSIZE
 512

	)

80 
	#£tbô
(
a
,
i
Ë(◊)[(i)/
NBBY
] |1<<((i)%NBBY))

	)

81 
	#˛rbô
(
a
,
i
Ë(◊)[(i)/
NBBY
] &~(1<<((i)%NBBY)))

	)

82 
	#is£t
(
a
,
i
Ë(◊)[(i)/
NBBY
] & (1<<((i)%NBBY)))

	)

83 
	#is˛r
(
a
,
i
Ë((◊)[(i)/
NBBY
] & (1<<((i)%NBBY))Ë=0)

	)

86 #i‚de‡
howm™y


87 
	#howm™y
(
x
, 
y
Ë(((xË+ ((yË- 1)Ë/ (y))

	)

89 #ifde‡
__GNUC__


90 
	#roundup
(
x
, 
y
Ë(
	`__buûtö_c⁄°™t_p
 (yË&& 
	`powîof2
 (y) \

91 ? (((
x
Ë+ (
y
) - 1) & ~((y) - 1)) \

92 : ((((
x
Ë+ ((
y
Ë- 1)Ë/ (y)Ë* (y)))

	)

94 
	#roundup
(
x
, 
y
Ë((((xË+ ((yË- 1)Ë/ (y)Ë* (y))

	)

96 
	#powîof2
(
x
Ë((((xË- 1Ë& (x)Ë=0)

	)

99 
	#MIN
(
a
,
b
Ë((◊)<(b))?◊):(b))

	)

100 
	#MAX
(
a
,
b
Ë((◊)>(b))?◊):(b))

	)

	@/usr/include/sys/select.h

21 #i‚de‡
_SYS_SELECT_H


22 
	#_SYS_SELECT_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

30 
	~<bôs/£À˘.h
>

33 
	~<bôs/sig£t.h
>

35 #i‚de‡
__sig£t_t_deföed


36 
	#__sig£t_t_deföed


	)

37 
__sig£t_t
 
	tsig£t_t
;

41 
	#__√ed_time_t


	)

42 
	#__√ed_time•ec


	)

43 
	~<time.h
>

44 
	#__√ed_timevÆ


	)

45 
	~<bôs/time.h
>

47 #i‚de‡
__su£c⁄ds_t_deföed


48 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

49 
	#__su£c⁄ds_t_deföed


	)

54 
	t__fd_mask
;

57 #unde‡
__NFDBITS


59 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

60 
	#__FD_ELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

61 
	#__FD_MASK
(
d
Ë((
__fd_mask
Ë1 << ((dË% 
__NFDBITS
))

	)

68 #ifde‡
__USE_XOPEN


69 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

70 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

72 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

75 } 
	tfd_£t
;

78 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

80 #ifde‡
__USE_MISC


82 
__fd_mask
 
	tfd_mask
;

85 
	#NFDBITS
 
__NFDBITS


	)

90 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

91 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

92 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

93 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

96 
__BEGIN_DECLS


106 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

107 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

108 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

109 
timevÆ
 *
__ª°ri˘
 
__timeout
);

111 #ifde‡
__USE_XOPEN2K


118 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

119 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

120 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

121 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

122 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

127 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__GNUC__


128 
	~<bôs/£À˘2.h
>

131 
	g__END_DECLS


	@/usr/include/sys/socket.h

19 #i‚def 
_SYS_SOCKET_H


20 
	#_SYS_SOCKET_H
 1

	)

22 
	~<„©uªs.h
>

24 
	g__BEGIN_DECLS


26 
	~<sys/uio.h
>

27 
	#__√ed_size_t


	)

28 
	~<°ddef.h
>

29 #ifde‡
__USE_GNU


31 
	~<bôs/sig£t.h
>

38 
	~<bôs/sockë.h
>

40 #ifde‡
__USE_BSD


43 
	sosockaddr


45 
	mß_Ámûy
;

46 
	mß_d©a
[14];

54 
	mSHUT_RD
 = 0,

55 
	#SHUT_RD
 
SHUT_RD


	)

56 
	mSHUT_WR
,

57 
	#SHUT_WR
 
SHUT_WR


	)

58 
	mSHUT_RDWR


59 
	#SHUT_RDWR
 
SHUT_RDWR


	)

68 #i‡
deföed
 
__˝lu•lus
 || !
__GNUC_PREREQ
 (2, 7Ë|| !deföed 
__USE_GNU


69 
	#__SOCKADDR_ARG
 
sockaddr
 *
__ª°ri˘


	)

70 
	#__CONST_SOCKADDR_ARG
 c⁄° 
sockaddr
 *

	)

74 
	#__SOCKADDR_ALLTYPES
 \

75 
	`__SOCKADDR_ONETYPE
 (
sockaddr
) \

76 
	`__SOCKADDR_ONETYPE
 (
sockaddr_©
) \

77 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ax25
) \

78 
	`__SOCKADDR_ONETYPE
 (
sockaddr_dl
) \

79 
	`__SOCKADDR_ONETYPE
 (
sockaddr_e⁄
) \

80 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö
) \

81 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö6
) \

82 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö¨p
) \

83 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ùx
) \

84 
	`__SOCKADDR_ONETYPE
 (
sockaddr_iso
) \

85 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ns
) \

86 
	`__SOCKADDR_ONETYPE
 (
sockaddr_un
) \

87 
	`__SOCKADDR_ONETYPE
 (
sockaddr_x25
)

	)

89 
	#__SOCKADDR_ONETYPE
(
ty≥
Ëty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

90 uni⁄ { 
	m__SOCKADDR_ALLTYPES


91 } 
	t__SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

92 #unde‡
__SOCKADDR_ONETYPE


93 
	#__SOCKADDR_ONETYPE
(
ty≥
Ëc⁄° ty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

94 uni⁄ { 
	m__SOCKADDR_ALLTYPES


95 } 
	t__CONST_SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

96 #unde‡
__SOCKADDR_ONETYPE


99 #ifde‡
__USE_GNU


101 
	smmsghdr


103 
msghdr
 
	mmsg_hdr
;

104 
	mmsg_Àn
;

113 
	$sockë
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
Ë
__THROW
;

119 
	$sockë∑ú
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
,

120 
__fds
[2]Ë
__THROW
;

123 
	$böd
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
)

124 
__THROW
;

127 
	$gësock«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

128 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

137 
	`c⁄√˘
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
);

141 
	$gë≥î«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

142 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

149 
ssize_t
 
	`£nd
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
, 
__Êags
);

156 
ssize_t
 
	`ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
);

163 
ssize_t
 
	`£ndto
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

164 
__Êags
, 
__CONST_SOCKADDR_ARG
 
__addr
,

165 
sockÀn_t
 
__addr_Àn
);

174 
ssize_t
 
	`ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

175 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

176 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

184 
ssize_t
 
	`£ndmsg
 (
__fd
, c⁄° 
msghdr
 *
__mesßge
,

185 
__Êags
);

187 #ifde‡
__USE_GNU


193 
	`£ndmmsg
 (
__fd
, 
mmsghdr
 *
__vmesßges
,

194 
__vÀn
, 
__Êags
);

202 
ssize_t
 
	`ªcvmsg
 (
__fd
, 
msghdr
 *
__mesßge
, 
__Êags
);

204 #ifde‡
__USE_GNU


210 
	`ªcvmmsg
 (
__fd
, 
mmsghdr
 *
__vmesßges
,

211 
__vÀn
, 
__Êags
,

212 c⁄° 
time•ec
 *
__tmo
);

219 
	$gësock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

220 *
__ª°ri˘
 
__›tvÆ
,

221 
sockÀn_t
 *
__ª°ri˘
 
__›éí
Ë
__THROW
;

226 
	$£tsock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

227 c⁄° *
__›tvÆ
, 
sockÀn_t
 
__›éí
Ë
__THROW
;

233 
	$li°í
 (
__fd
, 
__n
Ë
__THROW
;

243 
	`ac˚±
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

244 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

246 #ifde‡
__USE_GNU


251 
	`ac˚±4
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

252 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
, 
__Êags
);

261 
	$shutdown
 (
__fd
, 
__how
Ë
__THROW
;

264 #ifde‡
__USE_XOPEN2K


266 
	$sock©m¨k
 (
__fd
Ë
__THROW
;

270 #ifde‡
__USE_MISC


274 
	$isfdty≥
 (
__fd
, 
__fdty≥
Ë
__THROW
;

279 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


280 
	~<bôs/sockë2.h
>

283 
__END_DECLS


	@/usr/include/sys/stat.h

22 #i‚def 
_SYS_STAT_H


23 
	#_SYS_STAT_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K
 || deföed 
__USE_MISC
 \

30 || 
deföed
 
	g__USE_ATFILE


31 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


32 
	#__√ed_time_t


	)

34 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ATFILE


35 
	#__√ed_time•ec


	)

37 
	~<time.h
>

40 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


43 #i‚de‡
__dev_t_deföed


44 
__dev_t
 
	tdev_t
;

45 
	#__dev_t_deföed


	)

48 #i‚de‡
__gid_t_deföed


49 
__gid_t
 
	tgid_t
;

50 
	#__gid_t_deföed


	)

53 #i‚de‡
__öo_t_deföed


54 #i‚de‡
__USE_FILE_OFFSET64


55 
__öo_t
 
	töo_t
;

57 
__öo64_t
 
	töo_t
;

59 
	#__öo_t_deföed


	)

62 #i‚de‡
__mode_t_deföed


63 
__mode_t
 
	tmode_t
;

64 
	#__mode_t_deföed


	)

67 #i‚de‡
__∆ök_t_deföed


68 
__∆ök_t
 
	t∆ök_t
;

69 
	#__∆ök_t_deföed


	)

72 #i‚de‡
__off_t_deföed


73 #i‚de‡
__USE_FILE_OFFSET64


74 
__off_t
 
	toff_t
;

76 
__off64_t
 
	toff_t
;

78 
	#__off_t_deföed


	)

81 #i‚de‡
__uid_t_deföed


82 
__uid_t
 
	tuid_t
;

83 
	#__uid_t_deföed


	)

87 #ifde‡
__USE_UNIX98


88 #i‚de‡
__blk˙t_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__blk˙t_t
 
	tblk˙t_t
;

92 
__blk˙t64_t
 
	tblk˙t_t
;

94 
	#__blk˙t_t_deföed


	)

97 #i‚de‡
__blksize_t_deföed


98 
__blksize_t
 
	tblksize_t
;

99 
	#__blksize_t_deföed


	)

103 
	g__BEGIN_DECLS


105 
	~<bôs/°©.h
>

107 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


108 
	#S_IFMT
 
__S_IFMT


	)

109 
	#S_IFDIR
 
__S_IFDIR


	)

110 
	#S_IFCHR
 
__S_IFCHR


	)

111 
	#S_IFBLK
 
__S_IFBLK


	)

112 
	#S_IFREG
 
__S_IFREG


	)

113 #ifde‡
__S_IFIFO


114 
	#S_IFIFO
 
__S_IFIFO


	)

116 #ifde‡
__S_IFLNK


117 
	#S_IFLNK
 
__S_IFLNK


	)

119 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_UNIX98
) \

120 && 
deföed
 
	g__S_IFSOCK


121 
	#S_IFSOCK
 
__S_IFSOCK


	)

127 
	#__S_ISTYPE
(
mode
, 
mask
Ë(((modeË& 
__S_IFMT
Ë=(mask))

	)

129 
	#S_ISDIR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFDIR
)

	)

130 
	#S_ISCHR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFCHR
)

	)

131 
	#S_ISBLK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFBLK
)

	)

132 
	#S_ISREG
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFREG
)

	)

133 #ifde‡
__S_IFIFO


134 
	#S_ISFIFO
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFIFO
)

	)

136 #ifde‡
__S_IFLNK


137 
	#S_ISLNK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFLNK
)

	)

140 #i‡
deföed
 
__USE_BSD
 && !deföed 
__S_IFLNK


141 
	#S_ISLNK
(
mode
Ë0

	)

144 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K
) \

145 && 
deföed
 
	g__S_IFSOCK


146 
	#S_ISSOCK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFSOCK
)

	)

147 #ñi‡
deföed
 
__USE_XOPEN2K


148 
	#S_ISSOCK
(
mode
Ë0

	)

155 #ifdef 
__USE_POSIX199309


156 
	#S_TYPEISMQ
(
buf
Ë
	`__S_TYPEISMQ
(buf)

	)

157 
	#S_TYPEISSEM
(
buf
Ë
	`__S_TYPEISSEM
(buf)

	)

158 
	#S_TYPEISSHM
(
buf
Ë
	`__S_TYPEISSHM
(buf)

	)

164 
	#S_ISUID
 
__S_ISUID


	)

165 
	#S_ISGID
 
__S_ISGID


	)

167 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


169 
	#S_ISVTX
 
__S_ISVTX


	)

172 
	#S_IRUSR
 
__S_IREAD


	)

173 
	#S_IWUSR
 
__S_IWRITE


	)

174 
	#S_IXUSR
 
__S_IEXEC


	)

176 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

178 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_BSD


179 
	#S_IREAD
 
S_IRUSR


	)

180 
	#S_IWRITE
 
S_IWUSR


	)

181 
	#S_IEXEC
 
S_IXUSR


	)

184 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

185 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

186 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

188 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

190 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

191 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

192 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

194 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

197 #ifdef 
__USE_BSD


199 
	#ACCESSPERMS
 (
S_IRWXU
|
S_IRWXG
|
S_IRWXO
Ë

	)

200 
	#ALLPERMS
 (
S_ISUID
|
S_ISGID
|
S_ISVTX
|
S_IRWXU
|
S_IRWXG
|
S_IRWXO
)

	)

201 
	#DEFFILEMODE
 (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
)

	)

203 
	#S_BLKSIZE
 512

	)

207 #i‚de‡
__USE_FILE_OFFSET64


209 
	$°©
 (c⁄° *
__ª°ri˘
 
__fûe
,

210 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

214 
	$f°©
 (
__fd
, 
°©
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

216 #ifde‡
__REDIRECT_NTH


217 
	`__REDIRECT_NTH
 (
°©
, (c⁄° *
__ª°ri˘
 
__fûe
,

218 
°©
 *
__ª°ri˘
 
__buf
), 
°©64
)

219 
	`__n⁄nuŒ
 ((1, 2));

220 
	`__REDIRECT_NTH
 (
f°©
, (
__fd
, 
°©
 *
__buf
), 
f°©64
)

221 
	`__n⁄nuŒ
 ((2));

223 
	#°©
 
°©64


	)

224 
	#f°©
 
f°©64


	)

227 #ifde‡
__USE_LARGEFILE64


228 
	$°©64
 (c⁄° *
__ª°ri˘
 
__fûe
,

229 
°©64
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

230 
	$f°©64
 (
__fd
, 
°©64
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

233 #ifde‡
__USE_ATFILE


237 #i‚de‡
__USE_FILE_OFFSET64


238 
	$f°©©
 (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

239 
°©
 *
__ª°ri˘
 
__buf
, 
__Êag
)

240 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

242 #ifde‡
__REDIRECT_NTH


243 
	`__REDIRECT_NTH
 (
f°©©
, (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

244 
°©
 *
__ª°ri˘
 
__buf
,

245 
__Êag
),

246 
f°©©64
Ë
	`__n⁄nuŒ
 ((2, 3));

248 
	#f°©©
 
f°©©64


	)

252 #ifde‡
__USE_LARGEFILE64


253 
	$f°©©64
 (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

254 
°©64
 *
__ª°ri˘
 
__buf
, 
__Êag
)

255 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

259 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


260 #i‚de‡
__USE_FILE_OFFSET64


263 
	$l°©
 (c⁄° *
__ª°ri˘
 
__fûe
,

264 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

266 #ifde‡
__REDIRECT_NTH


267 
	`__REDIRECT_NTH
 (
l°©
,

268 (c⁄° *
__ª°ri˘
 
__fûe
,

269 
°©
 *
__ª°ri˘
 
__buf
), 
l°©64
)

270 
	`__n⁄nuŒ
 ((1, 2));

272 
	#l°©
 
l°©64


	)

275 #ifde‡
__USE_LARGEFILE64


276 
	$l°©64
 (c⁄° *
__ª°ri˘
 
__fûe
,

277 
°©64
 *
__ª°ri˘
 
__buf
)

278 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

284 
	$chmod
 (c⁄° *
__fûe
, 
__mode_t
 
__mode
)

285 
__THROW
 
	`__n⁄nuŒ
 ((1));

287 #ifde‡
__USE_BSD


291 
	$lchmod
 (c⁄° *
__fûe
, 
__mode_t
 
__mode
)

292 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_POSIX


297 
	$fchmod
 (
__fd
, 
__mode_t
 
__mode
Ë
__THROW
;

300 #ifde‡
__USE_ATFILE


303 
	$fchmod©
 (
__fd
, c⁄° *
__fûe
, 
__mode_t
 
__mode
,

304 
__Êag
)

305 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

312 
__mode_t
 
	$umask
 (
__mode_t
 
__mask
Ë
__THROW
;

314 #ifdef 
__USE_GNU


317 
__mode_t
 
	$gëumask
 (Ë
__THROW
;

321 
	$mkdú
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
)

322 
__THROW
 
	`__n⁄nuŒ
 ((1));

324 #ifde‡
__USE_ATFILE


328 
	$mkdú©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
)

329 
__THROW
 
	`__n⁄nuŒ
 ((2));

335 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


336 
	$mknod
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
)

337 
__THROW
 
	`__n⁄nuŒ
 ((1));

339 #ifde‡
__USE_ATFILE


343 
	$mknod©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

344 
__dev_t
 
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
	$mkfifo
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
)

351 
__THROW
 
	`__n⁄nuŒ
 ((1));

353 #ifde‡
__USE_ATFILE


357 
	$mkfifﬂt
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

361 #ifde‡
__USE_ATFILE


364 
	$utimíßt
 (
__fd
, c⁄° *
__∑th
,

365 c⁄° 
time•ec
 
__times
[2],

366 
__Êags
)

367 
__THROW
 
	`__n⁄nuŒ
 ((2));

370 #ifde‡
__USE_XOPEN2K8


372 
	$futimís
 (
__fd
, c⁄° 
time•ec
 
__times
[2]Ë
__THROW
;

390 #i‚de‡
_STAT_VER


391 
	#_STAT_VER
 0

	)

393 #i‚de‡
_MKNOD_VER


394 
	#_MKNOD_VER
 0

	)

398 #i‚de‡
__USE_FILE_OFFSET64


399 
	$__fx°©
 (
__vî
, 
__fûdes
, 
°©
 *
__°©_buf
)

400 
__THROW
 
	`__n⁄nuŒ
 ((3));

401 
	$__x°©
 (
__vî
, c⁄° *
__fûíame
,

402 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

403 
	$__lx°©
 (
__vî
, c⁄° *
__fûíame
,

404 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

405 
	$__fx°©©
 (
__vî
, 
__fûdes
, c⁄° *
__fûíame
,

406 
°©
 *
__°©_buf
, 
__Êag
)

407 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

409 #ifde‡
__REDIRECT_NTH


410 
	`__REDIRECT_NTH
 (
__fx°©
, (
__vî
, 
__fûdes
,

411 
°©
 *
__°©_buf
), 
__fx°©64
)

412 
	`__n⁄nuŒ
 ((3));

413 
	`__REDIRECT_NTH
 (
__x°©
, (
__vî
, c⁄° *
__fûíame
,

414 
°©
 *
__°©_buf
), 
__x°©64
)

415 
	`__n⁄nuŒ
 ((2, 3));

416 
	`__REDIRECT_NTH
 (
__lx°©
, (
__vî
, c⁄° *
__fûíame
,

417 
°©
 *
__°©_buf
), 
__lx°©64
)

418 
	`__n⁄nuŒ
 ((2, 3));

419 
	`__REDIRECT_NTH
 (
__fx°©©
, (
__vî
, 
__fûdes
,

420 c⁄° *
__fûíame
,

421 
°©
 *
__°©_buf
, 
__Êag
),

422 
__fx°©©64
Ë
	`__n⁄nuŒ
 ((3, 4));

425 
	#__fx°©
 
__fx°©64


	)

426 
	#__x°©
 
__x°©64


	)

427 
	#__lx°©
 
__lx°©64


	)

431 #ifde‡
__USE_LARGEFILE64


432 
	$__fx°©64
 (
__vî
, 
__fûdes
, 
°©64
 *
__°©_buf
)

433 
__THROW
 
	`__n⁄nuŒ
 ((3));

434 
	$__x°©64
 (
__vî
, c⁄° *
__fûíame
,

435 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

436 
	$__lx°©64
 (
__vî
, c⁄° *
__fûíame
,

437 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

438 
	$__fx°©©64
 (
__vî
, 
__fûdes
, c⁄° *
__fûíame
,

439 
°©64
 *
__°©_buf
, 
__Êag
)

440 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

442 
	$__xmknod
 (
__vî
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

443 
__dev_t
 *
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

445 
	$__xmknod©
 (
__vî
, 
__fd
, c⁄° *
__∑th
,

446 
__mode_t
 
__mode
, 
__dev_t
 *
__dev
)

447 
__THROW
 
	`__n⁄nuŒ
 ((3, 5));

449 #ifde‡
__USE_EXTERN_INLINES


452 
__exã∫_ölöe
 

453 
	`__NTH
 (
	$°©
 (c⁄° *
__∑th
, 
°©
 *
__°©buf
))

455  
	`__x°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

456 
	}
}

458 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


459 
__exã∫_ölöe
 

460 
__NTH
 (
	$l°©
 (c⁄° *
__∑th
, 
°©
 *
__°©buf
))

462  
	`__lx°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

463 
	}
}

466 
__exã∫_ölöe
 

467 
__NTH
 (
	$f°©
 (
__fd
, 
°©
 *
__°©buf
))

469  
	`__fx°©
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

470 
	}
}

472 #ifde‡
__USE_ATFILE


473 
__exã∫_ölöe
 

474 
__NTH
 (
	$f°©©
 (
__fd
, c⁄° *
__fûíame
, 
°©
 *
__°©buf
,

475 
__Êag
))

477  
	`__fx°©©
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

478 
	}
}

481 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD


482 
__exã∫_ölöe
 

483 
__NTH
 (
	$mknod
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
))

485  
	`__xmknod
 (
_MKNOD_VER
, 
__∑th
, 
__mode
, &
__dev
);

486 
	}
}

489 #ifde‡
__USE_ATFILE


490 
__exã∫_ölöe
 

491 
__NTH
 (
	$mknod©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

492 
__dev_t
 
__dev
))

494  
	`__xmknod©
 (
_MKNOD_VER
, 
__fd
, 
__∑th
, 
__mode
, &
__dev
);

495 
	}
}

498 #i‡
deföed
 
__USE_LARGEFILE64
 \

499 && (! 
deföed
 
	g__USE_FILE_OFFSET64
 \

500 || (
deföed
 
	g__REDIRECT_NTH
 && deföed 
	g__OPTIMIZE__
))

501 
__exã∫_ölöe
 

502 
__NTH
 (
	$°©64
 (c⁄° *
__∑th
, 
°©64
 *
__°©buf
))

504  
	`__x°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

505 
	}
}

507 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


508 
__exã∫_ölöe
 

509 
__NTH
 (
	$l°©64
 (c⁄° *
__∑th
, 
°©64
 *
__°©buf
))

511  
	`__lx°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

512 
	}
}

515 
__exã∫_ölöe
 

516 
__NTH
 (
	$f°©64
 (
__fd
, 
°©64
 *
__°©buf
))

518  
	`__fx°©64
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

519 
	}
}

521 #ifde‡
__USE_ATFILE


522 
__exã∫_ölöe
 

523 
__NTH
 (
	$f°©©64
 (
__fd
, c⁄° *
__fûíame
, 
°©64
 *
__°©buf
,

524 
__Êag
))

526  
	`__fx°©©64
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

527 
	}
}

534 
	g__END_DECLS


	@/usr/include/sys/time.h

18 #i‚de‡
_SYS_TIME_H


19 
	#_SYS_TIME_H
 1

	)

21 
	~<„©uªs.h
>

23 
	~<bôs/ty≥s.h
>

24 
	#__√ed_time_t


	)

25 
	~<time.h
>

26 
	#__√ed_timevÆ


	)

27 
	~<bôs/time.h
>

29 
	~<sys/£À˘.h
>

31 #i‚de‡
__su£c⁄ds_t_deföed


32 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

33 
	#__su£c⁄ds_t_deföed


	)

37 
	g__BEGIN_DECLS


39 #ifde‡
__USE_GNU


41 
	#TIMEVAL_TO_TIMESPEC
(
tv
, 
ts
) { \

42 (
ts
)->
tv_£c
 = (
tv
)->tv_sec; \

43 (
ts
)->
tv_n£c
 = (
tv
)->
tv_u£c
 * 1000; \

44 }

	)

45 
	#TIMESPEC_TO_TIMEVAL
(
tv
, 
ts
) { \

46 (
tv
)->
tv_£c
 = (
ts
)->tv_sec; \

47 (
tv
)->
tv_u£c
 = (
ts
)->
tv_n£c
 / 1000; \

48 }

	)

52 #ifde‡
__USE_BSD


55 
	stimez⁄e


57 
	mtz_möuãswe°
;

58 
	mtz_d°time
;

61 
timez⁄e
 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

63 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

71 
	$gëtimeofday
 (
timevÆ
 *
__ª°ri˘
 
__tv
,

72 
__timez⁄e_±r_t
 
__tz
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

74 #ifde‡
__USE_BSD


77 
	$£âimeofday
 (c⁄° 
timevÆ
 *
__tv
,

78 c⁄° 
timez⁄e
 *
__tz
)

79 
__THROW
;

85 
	$adjtime
 (c⁄° 
timevÆ
 *
__dñè
,

86 
timevÆ
 *
__ﬁddñè
Ë
__THROW
;

91 
	e__ôimî_which


94 
ITIMER_REAL
 = 0,

95 
	#ITIMER_REAL
 
ITIMER_REAL


	)

97 
ITIMER_VIRTUAL
 = 1,

98 
	#ITIMER_VIRTUAL
 
ITIMER_VIRTUAL


	)

101 
ITIMER_PROF
 = 2

102 
	#ITIMER_PROF
 
ITIMER_PROF


	)

107 
	sôimîvÆ


110 
timevÆ
 
ô_öãrvÆ
;

112 
timevÆ
 
ô_vÆue
;

115 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


118 
__ôimî_which
 
	t__ôimî_which_t
;

120 
	t__ôimî_which_t
;

125 
	$gëôimî
 (
__ôimî_which_t
 
__which
,

126 
ôimîvÆ
 *
__vÆue
Ë
__THROW
;

131 
	$£tôimî
 (
__ôimî_which_t
 
__which
,

132 c⁄° 
ôimîvÆ
 *
__ª°ri˘
 
__√w
,

133 
ôimîvÆ
 *
__ª°ri˘
 
__ﬁd
Ë
__THROW
;

138 
	$utimes
 (c⁄° *
__fûe
, c⁄° 
timevÆ
 
__tvp
[2])

139 
__THROW
 
	`__n⁄nuŒ
 ((1));

141 #ifde‡
__USE_BSD


143 
	$lutimes
 (c⁄° *
__fûe
, c⁄° 
timevÆ
 
__tvp
[2])

144 
__THROW
 
	`__n⁄nuŒ
 ((1));

147 
	$futimes
 (
__fd
, c⁄° 
timevÆ
 
__tvp
[2]Ë
__THROW
;

150 #ifde‡
__USE_GNU


154 
	$futimeßt
 (
__fd
, c⁄° *
__fûe
,

155 c⁄° 
timevÆ
 
__tvp
[2]Ë
__THROW
;

159 #ifde‡
__USE_BSD


162 
	#timîis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

163 
	#timî˛ór
(
tvp
Ë(—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0)

	)

164 
	#timîcmp
(
a
, 
b
, 
CMP
) \

165 (((
a
)->
tv_£c
 =(
b
)->tv_sec) ? \

166 ((
a
)->
tv_u£c
 
	`CMP
 (
b
)->tv_usec) : \

167 ((
a
)->
tv_£c
 
	`CMP
 (
b
)->tv_£c))

	)

168 
	#timîadd
(
a
, 
b
, 
ªsu…
) \

170 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯+ (
b
)->tv_sec; \

171 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯+ (
b
)->tv_usec; \

172 i‡((
ªsu…
)->
tv_u£c
 >= 1000000) \

174 ++(
ªsu…
)->
tv_£c
; \

175 (
ªsu…
)->
tv_u£c
 -= 1000000; \

177 
	}
} 0)

	)

178 
	#timîsub
(
a
, 
b
, 
ªsu…
) \

180 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯- (
b
)->tv_sec; \

181 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯- (
b
)->tv_usec; \

182 i‡((
ªsu…
)->
tv_u£c
 < 0) { \

183 --(
ªsu…
)->
tv_£c
; \

184 (
ªsu…
)->
tv_u£c
 += 1000000; \

186 } 0)

	)

189 
	g__END_DECLS


	@/usr/include/sys/timeb.h

18 #i‚de‡
_SYS_TIMEB_H


19 
	#_SYS_TIMEB_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_time_t


	)

24 
	~<time.h
>

27 
__BEGIN_DECLS


31 
	stimeb


33 
time_t
 
	mtime
;

34 
	mmûlôm
;

35 
	mtimez⁄e
;

36 
	md°Êag
;

41 
·ime
 (
timeb
 *
__timebuf
);

43 
	g__END_DECLS


	@/usr/include/sys/types.h

22 #i‚def 
_SYS_TYPES_H


23 
	#_SYS_TYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifdef 
__USE_BSD


32 #i‚de‡
__u_ch¨_deföed


33 
__u_ch¨
 
	tu_ch¨
;

34 
__u_sh‹t
 
	tu_sh‹t
;

35 
__u_öt
 
	tu_öt
;

36 
__u_l⁄g
 
	tu_l⁄g
;

37 
__quad_t
 
	tquad_t
;

38 
__u_quad_t
 
	tu_quad_t
;

39 
__fsid_t
 
	tfsid_t
;

40 
	#__u_ch¨_deföed


	)

44 
__loff_t
 
	tloff_t
;

46 #i‚de‡
__öo_t_deföed


47 #i‚de‡
__USE_FILE_OFFSET64


48 
__öo_t
 
	töo_t
;

50 
__öo64_t
 
	töo_t
;

52 
	#__öo_t_deföed


	)

54 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


55 
__öo64_t
 
	töo64_t
;

56 
	#__öo64_t_deföed


	)

59 #i‚de‡
__dev_t_deföed


60 
__dev_t
 
	tdev_t
;

61 
	#__dev_t_deföed


	)

64 #i‚de‡
__gid_t_deföed


65 
__gid_t
 
	tgid_t
;

66 
	#__gid_t_deföed


	)

69 #i‚de‡
__mode_t_deföed


70 
__mode_t
 
	tmode_t
;

71 
	#__mode_t_deföed


	)

74 #i‚de‡
__∆ök_t_deföed


75 
__∆ök_t
 
	t∆ök_t
;

76 
	#__∆ök_t_deföed


	)

79 #i‚de‡
__uid_t_deföed


80 
__uid_t
 
	tuid_t
;

81 
	#__uid_t_deföed


	)

84 #i‚de‡
__off_t_deföed


85 #i‚de‡
__USE_FILE_OFFSET64


86 
__off_t
 
	toff_t
;

88 
__off64_t
 
	toff_t
;

90 
	#__off_t_deföed


	)

92 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


93 
__off64_t
 
	toff64_t
;

94 
	#__off64_t_deföed


	)

97 #i‚de‡
__pid_t_deföed


98 
__pid_t
 
	tpid_t
;

99 
	#__pid_t_deföed


	)

102 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

103 && !
deföed
 
__id_t_deföed


104 
__id_t
 
	tid_t
;

105 
	#__id_t_deföed


	)

108 #i‚de‡
__ssize_t_deföed


109 
__ssize_t
 
	tssize_t
;

110 
	#__ssize_t_deföed


	)

113 #ifdef 
__USE_BSD


114 #i‚de‡
__daddr_t_deföed


115 
__daddr_t
 
	tdaddr_t
;

116 
__ˇddr_t
 
	tˇddr_t
;

117 
	#__daddr_t_deföed


	)

121 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


122 
__key_t
 
	tkey_t
;

123 
	#__key_t_deföed


	)

126 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


127 
	#__√ed_˛ock_t


	)

129 
	#__√ed_time_t


	)

130 
	#__√ed_timî_t


	)

131 
	#__√ed_˛ockid_t


	)

132 
	~<time.h
>

134 #ifde‡
__USE_XOPEN


135 #i‚de‡
__u£c⁄ds_t_deföed


136 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

137 
	#__u£c⁄ds_t_deföed


	)

139 #i‚de‡
__su£c⁄ds_t_deföed


140 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

141 
	#__su£c⁄ds_t_deföed


	)

145 
	#__√ed_size_t


	)

146 
	~<°ddef.h
>

148 #ifde‡
__USE_MISC


150 
	tul⁄g
;

151 
	tush‹t
;

152 
	tuöt
;

157 #i‡!
__GNUC_PREREQ
 (2, 7)

160 #i‚de‡
__öt8_t_deföed


161 
	#__öt8_t_deföed


	)

162 
	töt8_t
;

163 
	töt16_t
;

164 
	töt32_t
;

165 #i‡
__WORDSIZE
 == 64

166 
	töt64_t
;

168 
__exãnsi⁄__
 
	töt64_t
;

173 
	tu_öt8_t
;

174 
	tu_öt16_t
;

175 
	tu_öt32_t
;

176 #i‡
__WORDSIZE
 == 64

177 
	tu_öt64_t
;

179 
__exãnsi⁄__
 
	tu_öt64_t
;

182 
	tªgi°î_t
;

187 
	#__ötN_t
(
N
, 
MODE
) \

188 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

189 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

190 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

192 #i‚de‡
	t__öt8_t_deföed


193 
	t__öt8_t_deföed


	)

194 
	t__ötN_t
 (8, 
	t__QI__
);

195 
__ötN_t
 (16, 
__HI__
);

196 
__ötN_t
 (32, 
__SI__
);

197 
__ötN_t
 (64, 
__DI__
);

200 
__u_ötN_t
 (8, 
__QI__
);

201 
__u_ötN_t
 (16, 
__HI__
);

202 
__u_ötN_t
 (32, 
__SI__
);

203 
__u_ötN_t
 (64, 
__DI__
);

205 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

211 
	#__BIT_TYPES_DEFINED__
 1

	)

214 #ifdef 
__USE_BSD


216 
	~<ídün.h
>

219 
	~<sys/£À˘.h
>

222 
	~<sys/sysma¸os.h
>

226 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

227 && !
deföed
 
__blksize_t_deföed


228 
__blksize_t
 
	tblksize_t
;

229 
	#__blksize_t_deföed


	)

233 #i‚de‡
__USE_FILE_OFFSET64


234 #i‚de‡
__blk˙t_t_deföed


235 
__blk˙t_t
 
	tblk˙t_t
;

236 
	#__blk˙t_t_deföed


	)

238 #i‚de‡
__fsblk˙t_t_deföed


239 
__fsblk˙t_t
 
	tfsblk˙t_t
;

240 
	#__fsblk˙t_t_deföed


	)

242 #i‚de‡
__fsfû˙t_t_deföed


243 
__fsfû˙t_t
 
	tfsfû˙t_t
;

244 
	#__fsfû˙t_t_deföed


	)

247 #i‚de‡
__blk˙t_t_deföed


248 
__blk˙t64_t
 
	tblk˙t_t
;

249 
	#__blk˙t_t_deföed


	)

251 #i‚de‡
__fsblk˙t_t_deföed


252 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

253 
	#__fsblk˙t_t_deföed


	)

255 #i‚de‡
__fsfû˙t_t_deföed


256 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

257 
	#__fsfû˙t_t_deföed


	)

261 #ifde‡
__USE_LARGEFILE64


262 
__blk˙t64_t
 
	tblk˙t64_t
;

263 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

264 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

269 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


270 
	~<bôs/±hªadty≥s.h
>

273 
	g__END_DECLS


	@/usr/include/sys/uio.h

18 #i‚de‡
_SYS_UIO_H


19 
	#_SYS_UIO_H
 1

	)

21 
	~<„©uªs.h
>

23 
	~<sys/ty≥s.h
>

25 
	g__BEGIN_DECLS


28 
	~<bôs/uio.h
>

39 
ssize_t
 
	$ªadv
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
)

40 
__wur
;

50 
ssize_t
 
	$wrôev
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
)

51 
__wur
;

54 #ifde‡
__USE_BSD


55 #i‚de‡
__USE_FILE_OFFSET64


65 
ssize_t
 
	$¥ódv
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
,

66 
__off_t
 
__off£t
Ë
__wur
;

77 
ssize_t
 
	$pwrôev
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
,

78 
__off_t
 
__off£t
Ë
__wur
;

80 #ifde‡
__REDIRECT


81 
ssize_t
 
	`__REDIRECT
 (
¥ódv
, (
__fd
, c⁄° 
iovec
 *
__iovec
,

82 
__cou¡
, 
__off64_t
 
__off£t
),

83 
¥ódv64
Ë
__wur
;

84 
ssize_t
 
	`__REDIRECT
 (
pwrôev
, (
__fd
, c⁄° 
iovec
 *
__iovec
,

85 
__cou¡
, 
__off64_t
 
__off£t
),

86 
pwrôev64
Ë
__wur
;

88 
	#¥ódv
 
¥ódv64


	)

89 
	#pwrôev
 
pwrôev64


	)

93 #ifde‡
__USE_LARGEFILE64


103 
ssize_t
 
	$¥ódv64
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
,

104 
__off64_t
 
__off£t
Ë
__wur
;

115 
ssize_t
 
	$pwrôev64
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
,

116 
__off64_t
 
__off£t
Ë
__wur
;

120 
__END_DECLS


	@/usr/include/syslog.h

1 
	~<sys/sy¶og.h
>

	@/usr/include/termios.h

22 #i‚def 
_TERMIOS_H


23 
	#_TERMIOS_H
 1

	)

25 
	~<„©uªs.h
>

26 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


28 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__pid_t_deföed


30 
__pid_t
 
	tpid_t
;

31 
	#__pid_t_deföed


	)

35 
	g__BEGIN_DECLS


39 
	~<bôs/ãrmios.h
>

41 #ifde‡
__USE_BSD


44 
	#CCEQ
(
vÆ
, 
c
Ë((cË=(vÆË&& (vÆË!
_POSIX_VDISABLE
)

	)

48 
•ìd_t
 
	$cfgëo•ìd
 (c⁄° 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

51 
•ìd_t
 
	$cfgëi•ìd
 (c⁄° 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

54 
	$cf£to•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

57 
	$cf£ti•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

59 #ifdef 
__USE_BSD


61 
	$cf£t•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

66 
	$tcgë©å
 (
__fd
, 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

70 
	$tc£èâr
 (
__fd
, 
__›ti⁄Æ_a˘i⁄s
,

71 c⁄° 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

74 #ifdef 
__USE_BSD


76 
	$cfmakîaw
 (
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

80 
	$tc£ndbªak
 (
__fd
, 
__duøti⁄
Ë
__THROW
;

86 
	`tcdøö
 (
__fd
);

90 
	$tcÊush
 (
__fd
, 
__queue_£À˘‹
Ë
__THROW
;

94 
	$tcÊow
 (
__fd
, 
__a˘i⁄
Ë
__THROW
;

97 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


99 
__pid_t
 
	$tcgësid
 (
__fd
Ë
__THROW
;

103 #ifde‡
__USE_BSD


104 
	~<sys/âydeÁu…s.h
>

107 
__END_DECLS


	@/usr/include/time.h

22 #i‚def 
_TIME_H


24 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

25 ! 
deföed
 
	g__√ed_time•ec
)

26 
	#_TIME_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__√ed_size_t


	)

36 
	#__√ed_NULL


	)

37 
	~<°ddef.h
>

41 
	~<bôs/time.h
>

44 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


45 #i‚de‡
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

53 
	#__˛ock_t_deföed
 1

	)

55 
	~<bôs/ty≥s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__˛ock_t
 
	t˛ock_t
;

60 
	g__END_NAMESPACE_STD


61 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


62 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

66 #unde‡
__√ed_˛ock_t


68 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

69 
	#__time_t_deföed
 1

	)

71 
	~<bôs/ty≥s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #unde‡
__√ed_time_t


84 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

85 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

86 
	#__˛ockid_t_deföed
 1

	)

88 
	~<bôs/ty≥s.h
>

91 
__˛ockid_t
 
	t˛ockid_t
;

94 #unde‡
__˛ockid_time_t


96 #i‡!
deföed
 
__timî_t_deföed
 && \

97 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

98 
	#__timî_t_deföed
 1

	)

100 
	~<bôs/ty≥s.h
>

103 
__timî_t
 
	ttimî_t
;

106 #unde‡
__√ed_timî_t


109 #i‡(!
deföed
 
__time•ec_deföed
 \

110 && ((
deföed
 
_TIME_H
 \

111 && (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
 \

112 || 
deföed
 
__USE_ISOC11
)) \

113 || 
deföed
 
__√ed_time•ec
))

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 c⁄° *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 c⁄° *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 #ifde‡
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

195 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

196 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

199 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

205 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

206 c⁄° *
__ª°ri˘
 
__f‹m©
,

207 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifde‡
__USE_XOPEN


213 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

214 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

215 
__THROW
;

218 #ifde‡
__USE_XOPEN2K8


221 
	~<xloˇÀ.h
>

223 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

224 c⁄° *
__ª°ri˘
 
__f‹m©
,

225 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 #ifde‡
__USE_GNU


230 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

231 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

232 
__loˇÀ_t
 
__loc
Ë
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

243 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

244 
__END_NAMESPACE_STD


246 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


249 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

250 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

254 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

255 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

264 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

265 
__END_NAMESPACE_STD


267 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


272 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

273 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

277 *
__ª°ri˘
 
__buf
Ë
__THROW
;

282 *
__tz«me
[2];

283 
__daylight
;

284 
__timez⁄e
;

287 #ifdef 
__USE_POSIX


289 *
tz«me
[2];

293 
	$tz£t
 (Ë
__THROW
;

296 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


297 
daylight
;

298 
timez⁄e
;

301 #ifde‡
__USE_SVID


304 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

310 
	#__i¶óp
(
yór
) \

311 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

314 #ifde‡
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

322 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

325 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

329 #ifde‡
__USE_POSIX199309


334 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

335 
time•ec
 *
__ªmaöög
);

339 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

342 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

345 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

346 
__THROW
;

348 #ifde‡
__USE_XOPEN2K


353 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

354 c⁄° 
time•ec
 *
__ªq
,

355 
time•ec
 *
__ªm
);

358 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

363 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

364 
sigevít
 *
__ª°ri˘
 
__evp
,

365 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

368 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

371 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

372 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

373 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

376 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

377 
__THROW
;

380 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

384 #ifde‡
__USE_ISOC11


386 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_XOPEN_EXTENDED


403 
gëd©e_îr
;

412 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

415 #ifde‡
__USE_GNU


426 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

427 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

430 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

71 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

75 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

79 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

83 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

86 #ifde‡
__USE_XOPEN2K8


87 
	#_XOPEN_VERSION
 700

	)

88 #ñi‡
deföed
 
__USE_XOPEN2K


89 
	#_XOPEN_VERSION
 600

	)

90 #ñi‡
deföed
 
__USE_UNIX98


91 
	#_XOPEN_VERSION
 500

	)

93 
	#_XOPEN_VERSION
 4

	)

97 
	#_XOPEN_XCU_VERSION
 4

	)

100 
	#_XOPEN_XPG2
 1

	)

101 
	#_XOPEN_XPG3
 1

	)

102 
	#_XOPEN_XPG4
 1

	)

105 
	#_XOPEN_UNIX
 1

	)

108 
	#_XOPEN_CRYPT
 1

	)

112 
	#_XOPEN_ENH_I18N
 1

	)

115 
	#_XOPEN_LEGACY
 1

	)

202 
	~<bôs/posix_›t.h
>

205 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


206 
	~<bôs/ívú⁄míts.h
>

210 
	#STDIN_FILENO
 0

	)

211 
	#STDOUT_FILENO
 1

	)

212 
	#STDERR_FILENO
 2

	)

217 
	~<bôs/ty≥s.h
>

219 #i‚def 
__ssize_t_deföed


220 
__ssize_t
 
	tssize_t
;

221 
	#__ssize_t_deföed


	)

224 
	#__√ed_size_t


	)

225 
	#__√ed_NULL


	)

226 
	~<°ddef.h
>

228 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


231 #i‚de‡
__gid_t_deföed


232 
__gid_t
 
	tgid_t
;

233 
	#__gid_t_deföed


	)

236 #i‚de‡
__uid_t_deföed


237 
__uid_t
 
	tuid_t
;

238 
	#__uid_t_deföed


	)

241 #i‚de‡
__off_t_deföed


242 #i‚de‡
__USE_FILE_OFFSET64


243 
__off_t
 
	toff_t
;

245 
__off64_t
 
	toff_t
;

247 
	#__off_t_deföed


	)

249 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


250 
__off64_t
 
	toff64_t
;

251 
	#__off64_t_deföed


	)

254 #i‚de‡
__u£c⁄ds_t_deföed


255 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

256 
	#__u£c⁄ds_t_deföed


	)

259 #i‚de‡
__pid_t_deföed


260 
__pid_t
 
	tpid_t
;

261 
	#__pid_t_deföed


	)

265 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


266 #i‚de‡
__öçå_t_deföed


267 
__öçå_t
 
	töçå_t
;

268 
	#__öçå_t_deföed


	)

272 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


273 #i‚de‡
__sockÀn_t_deföed


274 
__sockÀn_t
 
	tsockÀn_t
;

275 
	#__sockÀn_t_deföed


	)

281 
	#R_OK
 4

	)

282 
	#W_OK
 2

	)

283 
	#X_OK
 1

	)

284 
	#F_OK
 0

	)

287 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

289 #ifde‡
__USE_GNU


292 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1));

300 #ifde‡
__USE_ATFILE


304 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

305 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

310 #i‚def 
_STDIO_H


311 
	#SEEK_SET
 0

	)

312 
	#SEEK_CUR
 1

	)

313 
	#SEEK_END
 2

	)

314 #ifde‡
__USE_GNU


315 
	#SEEK_DATA
 3

	)

316 
	#SEEK_HOLE
 4

	)

320 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


322 
	#L_SET
 
SEEK_SET


	)

323 
	#L_INCR
 
SEEK_CUR


	)

324 
	#L_XTND
 
SEEK_END


	)

333 #i‚de‡
__USE_FILE_OFFSET64


334 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

336 #ifde‡
__REDIRECT_NTH


337 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

338 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

339 
l£ek64
);

341 
	#l£ek
 
l£ek64


	)

344 #ifde‡
__USE_LARGEFILE64


345 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

346 
__THROW
;

353 
	`˛o£
 (
__fd
);

360 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

366 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

368 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


369 #i‚de‡
__USE_FILE_OFFSET64


376 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

377 
__off_t
 
__off£t
Ë
__wur
;

384 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

385 
__off_t
 
__off£t
Ë
__wur
;

387 #ifde‡
__REDIRECT


388 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

389 
__off64_t
 
__off£t
),

390 
¥ód64
Ë
__wur
;

391 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

392 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

393 
pwrôe64
Ë
__wur
;

395 
	#¥ód
 
¥ód64


	)

396 
	#pwrôe
 
pwrôe64


	)

400 #ifde‡
__USE_LARGEFILE64


404 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

405 
__off64_t
 
__off£t
Ë
__wur
;

408 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

409 
__off64_t
 
__off£t
Ë
__wur
;

417 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

419 #ifde‡
__USE_GNU


422 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

432 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

444 
	`¶ìp
 (
__£c⁄ds
);

446 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

447 || 
deföed
 
__USE_BSD


452 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

453 
__THROW
;

460 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

469 
	`∑u£
 ();

473 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

474 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

476 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


478 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

483 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

484 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

488 #ifde‡
__USE_ATFILE


491 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

492 
__gid_t
 
__group
, 
__Êag
)

493 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

497 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

499 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


501 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

511 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

513 #ifdef 
__USE_GNU


517 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

520 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

521 || 
deföed
 
__USE_BSD


525 *
	$gëwd
 (*
__buf
)

526 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

531 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

534 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

536 #ifde‡
__USE_GNU


539 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

543 **
__ívú⁄
;

544 #ifde‡
__USE_GNU


545 **
ívú⁄
;

551 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

552 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

554 #ifde‡
__USE_XOPEN2K8


557 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

558 
__THROW
 
	`__n⁄nuŒ
 ((2));

563 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

564 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

568 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

569 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

573 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

578 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

585 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 #ifde‡
__USE_GNU


590 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

591 *c⁄° 
__ívp
[])

592 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

596 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


598 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

603 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

609 
	~<bôs/c⁄‚ame.h
>

612 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

613 
__THROW
 
	`__n⁄nuŒ
 ((1));

616 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

619 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

621 #ifdef 
__USE_POSIX2


623 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

628 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

631 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

634 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

637 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

638 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


639 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

646 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

648 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


660 
	$£çgΩ
 (Ë
__THROW
;

667 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

669 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


671 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

675 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

678 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

681 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

684 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

689 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

691 #ifdef 
__USE_GNU


693 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

700 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

702 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


705 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

708 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


710 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

717 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

719 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


722 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

725 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


727 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

730 #ifde‡
__USE_GNU


733 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

734 
__THROW
;

738 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

739 
__THROW
;

743 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

744 
__THROW
 
__wur
;

748 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

749 
__THROW
 
__wur
;

756 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

758 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

759 || 
deföed
 
__USE_BSD


764 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

770 *
	$ây«me
 (
__fd
Ë
__THROW
;

774 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

775 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

779 
	$ißây
 (
__fd
Ë
__THROW
;

781 #i‡
deföed
 
__USE_BSD
 \

782 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

785 
	$ây¶Ÿ
 (Ë
__THROW
;

790 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

791 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

793 #ifde‡
__USE_ATFILE


796 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

797 c⁄° *
__to
, 
__Êags
)

798 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

801 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


803 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

804 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

809 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

810 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

811 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

814 #ifde‡
__USE_ATFILE


816 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

817 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

820 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

821 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

822 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

826 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

828 #ifde‡
__USE_ATFILE


830 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

831 
__THROW
 
	`__n⁄nuŒ
 ((2));

835 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

839 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

842 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

849 *
	`gëlogö
 ();

850 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


857 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

860 #ifdef 
__USE_BSD


862 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

866 #ifdef 
__USE_POSIX2


870 
	#__√ed_gë›t


	)

871 
	~<gë›t.h
>

875 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


879 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

883 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

886 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

887 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

891 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

897 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

898 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

899 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

900 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

906 
	$vh™gup
 (Ë
__THROW
;

909 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

917 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

918 
size_t
 
__off£t
, 
__sˇÀ
)

919 
__THROW
 
	`__n⁄nuŒ
 ((1));

925 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

929 *
	$gëu£rshñl
 (Ë
__THROW
;

930 
	$ídu£rshñl
 (Ë
__THROW
;

931 
	$£tu£rshñl
 (Ë
__THROW
;

937 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

941 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

944 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

948 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

956 
	`fsync
 (
__fd
);

959 #ifde‡
__USE_GNU


962 
	$syncfs
 (
__fd
Ë
__THROW
;

966 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


969 
	`gëho°id
 ();

972 
	$sync
 (Ë
__THROW
;

975 #i‡
deföed
 
__USE_BSD
 || !deföed 
__USE_XOPEN2K


978 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

983 
	$gëdèbÀsize
 (Ë
__THROW
;

989 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


992 #i‚de‡
__USE_FILE_OFFSET64


993 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

994 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

996 #ifde‡
__REDIRECT_NTH


997 
	`__REDIRECT_NTH
 (
åunˇã
,

998 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

999 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1001 
	#åunˇã
 
åunˇã64


	)

1004 #ifde‡
__USE_LARGEFILE64


1005 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1006 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1011 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_POSIX199309
 \

1012 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1015 #i‚de‡
__USE_FILE_OFFSET64


1016 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1018 #ifde‡
__REDIRECT_NTH


1019 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1020 
·runˇã64
Ë
__wur
;

1022 
	#·runˇã
 
·runˇã64


	)

1025 #ifde‡
__USE_LARGEFILE64


1026 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1032 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1033 || 
deföed
 
__USE_MISC


1037 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1043 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1047 #ifde‡
__USE_MISC


1058 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1063 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1075 
	#F_ULOCK
 0

	)

1076 
	#F_LOCK
 1

	)

1077 
	#F_TLOCK
 2

	)

1078 
	#F_TEST
 3

	)

1080 #i‚de‡
__USE_FILE_OFFSET64


1081 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1083 #ifde‡
__REDIRECT


1084 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1085 
lockf64
Ë
__wur
;

1087 
	#lockf
 
lockf64


	)

1090 #ifde‡
__USE_LARGEFILE64


1091 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1096 #ifde‡
__USE_GNU


1101 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1102 (
__exãnsi⁄__
 \

1103 ({ 
__ªsu…
; \

1104 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1105 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1106 
__ªsu…
; 
	}
}))

	)

1109 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1112 
fd©async
 (
__fûdes
);

1118 #ifdef 
__USE_XOPEN


1120 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1121 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1125 
	$í¸y±
 (*
__glibc_block
, 
__edÊag
)

1126 
__THROW
 
	`__n⁄nuŒ
 ((1));

1133 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1134 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1140 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1142 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1147 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1148 
	~<bôs/uni°d.h
>

1151 
__END_DECLS


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/bits/byteswap.h

19 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


23 #i‚de‡
_BITS_BYTESWAP_H


24 
	#_BITS_BYTESWAP_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

35 
	~<bôs/byãsw≠-16.h
>

38 
	#__bsw≠_c⁄°™t_32
(
x
) \

39 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

40 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

42 #ifde‡
__GNUC__


43 #i‡
__GNUC_PREREQ
 (4, 3)

44 
__ölöe
 

45 
	$__bsw≠_32
 (
__bsx
)

47  
	`__buûtö_bsw≠32
 (
__bsx
);

48 
	}
}

49 #ñi‡
__GNUC__
 >= 2

50 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

51 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

52 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

53 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

54 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

55 || 
deföed
 
	g__amdÁm10__
)

58 
	#__bsw≠_32
(
x
) \

59 (
__exãnsi⁄__
 \

60 ({ 
__v
, 
__x
 = (
x
); \

61 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

62 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

64 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

65 
__v
; }))

	)

67 
	#__bsw≠_32
(
x
) \

68 (
__exãnsi⁄__
 \

69 ({ 
__v
, 
__x
 = (
x
); \

70 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

71 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

73 
	`__asm__
 ("rorw $8, %w0;" \

76 : "Ù" (
__v
) \

77 : "0" (
__x
) \

79 
__v
; }))

	)

82 
	#__bsw≠_32
(
x
) \

83 (
__exãnsi⁄__
 \

84 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

87 
__ölöe
 

88 
	$__bsw≠_32
 (
__bsx
)

90  
	`__bsw≠_c⁄°™t_32
 (
__bsx
);

91 
	}
}

95 #i‡
__GNUC_PREREQ
 (2, 0)

97 
	#__bsw≠_c⁄°™t_64
(
x
) \

98 (
	`__exãnsi⁄__
 ((((
x
) & 0xff00000000000000ull) >> 56) \

99 | (((
x
) & 0x00ff000000000000ull) >> 40) \

100 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

101 | (((
x
) & 0x000000ff00000000ull) >> 8) \

102 | (((
x
) & 0x00000000ff000000ull) << 8) \

103 | (((
x
) & 0x0000000000ff0000ull) << 24) \

104 | (((
x
) & 0x000000000000ff00ull) << 40) \

105 | (((
x
Ë& 0x00000000000000ffuŒË<< 56)))

	)

107 #i‡
__GNUC_PREREQ
 (4, 3)

108 
__ölöe
 
__uöt64_t


109 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

111  
	`__buûtö_bsw≠64
 (
__bsx
);

112 
	}
}

113 #ñi‡
__WORDSIZE
 == 64

114 
	#__bsw≠_64
(
x
) \

115 (
__exãnsi⁄__
 \

116 ({ 
__uöt64_t
 
__v
, 
__x
 = (
x
); \

117 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

118 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

120 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

121 
__v
; }))

	)

123 
	#__bsw≠_64
(
x
) \

124 (
__exãnsi⁄__
 \

125 ({ uni⁄ { 
__exãnsi⁄__
 
__uöt64_t
 
__Œ
; \

126 
__l
[2]; } 
__w
, 
__r
; \

127 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

128 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

131 
__w
.
__Œ
 = (
x
); \

132 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

133 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

135 
__r
.
__Œ
; }))

	)

138 
	#__bsw≠_c⁄°™t_64
(
x
) \

139 ((((
x
) & 0xff00000000000000ull) >> 56) \

140 | (((
x
) & 0x00ff000000000000ull) >> 40) \

141 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

142 | (((
x
) & 0x000000ff00000000ull) >> 8) \

143 | (((
x
) & 0x00000000ff000000ull) << 8) \

144 | (((
x
) & 0x0000000000ff0000ull) << 24) \

145 | (((
x
) & 0x000000000000ff00ull) << 40) \

146 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

148 
__ölöe
 
__uöt64_t


149 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

151  
	`__bsw≠_c⁄°™t_64
 (
__bsx
);

152 
	}
}

	@/usr/include/bits/confname.h

19 #i‚de‡
_UNISTD_H


26 
	m_PC_LINK_MAX
,

27 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

28 
	m_PC_MAX_CANON
,

29 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

30 
	m_PC_MAX_INPUT
,

31 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

32 
	m_PC_NAME_MAX
,

33 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

34 
	m_PC_PATH_MAX
,

35 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

36 
	m_PC_PIPE_BUF
,

37 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

38 
	m_PC_CHOWN_RESTRICTED
,

39 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

40 
	m_PC_NO_TRUNC
,

41 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

42 
	m_PC_VDISABLE
,

43 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

44 
	m_PC_SYNC_IO
,

45 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

46 
	m_PC_ASYNC_IO
,

47 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

48 
	m_PC_PRIO_IO
,

49 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

50 
	m_PC_SOCK_MAXBUF
,

51 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

52 
	m_PC_FILESIZEBITS
,

53 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

54 
	m_PC_REC_INCR_XFER_SIZE
,

55 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

56 
	m_PC_REC_MAX_XFER_SIZE
,

57 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

58 
	m_PC_REC_MIN_XFER_SIZE
,

59 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

60 
	m_PC_REC_XFER_ALIGN
,

61 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

62 
	m_PC_ALLOC_SIZE_MIN
,

63 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

64 
	m_PC_SYMLINK_MAX
,

65 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

66 
	m_PC_2_SYMLINKS


67 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

73 
	m_SC_ARG_MAX
,

74 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

75 
	m_SC_CHILD_MAX
,

76 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

77 
	m_SC_CLK_TCK
,

78 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

79 
	m_SC_NGROUPS_MAX
,

80 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

81 
	m_SC_OPEN_MAX
,

82 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

83 
	m_SC_STREAM_MAX
,

84 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

85 
	m_SC_TZNAME_MAX
,

86 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

87 
	m_SC_JOB_CONTROL
,

88 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

89 
	m_SC_SAVED_IDS
,

90 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

91 
	m_SC_REALTIME_SIGNALS
,

92 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

93 
	m_SC_PRIORITY_SCHEDULING
,

94 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

95 
	m_SC_TIMERS
,

96 
	#_SC_TIMERS
 
_SC_TIMERS


	)

97 
	m_SC_ASYNCHRONOUS_IO
,

98 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

99 
	m_SC_PRIORITIZED_IO
,

100 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

101 
	m_SC_SYNCHRONIZED_IO
,

102 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

103 
	m_SC_FSYNC
,

104 
	#_SC_FSYNC
 
_SC_FSYNC


	)

105 
	m_SC_MAPPED_FILES
,

106 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

107 
	m_SC_MEMLOCK
,

108 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

109 
	m_SC_MEMLOCK_RANGE
,

110 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

111 
	m_SC_MEMORY_PROTECTION
,

112 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

113 
	m_SC_MESSAGE_PASSING
,

114 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

115 
	m_SC_SEMAPHORES
,

116 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

117 
	m_SC_SHARED_MEMORY_OBJECTS
,

118 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

119 
	m_SC_AIO_LISTIO_MAX
,

120 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

121 
	m_SC_AIO_MAX
,

122 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

123 
	m_SC_AIO_PRIO_DELTA_MAX
,

124 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

125 
	m_SC_DELAYTIMER_MAX
,

126 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

127 
	m_SC_MQ_OPEN_MAX
,

128 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

129 
	m_SC_MQ_PRIO_MAX
,

130 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

131 
	m_SC_VERSION
,

132 
	#_SC_VERSION
 
_SC_VERSION


	)

133 
	m_SC_PAGESIZE
,

134 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

135 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

136 
	m_SC_RTSIG_MAX
,

137 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

138 
	m_SC_SEM_NSEMS_MAX
,

139 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

140 
	m_SC_SEM_VALUE_MAX
,

141 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

142 
	m_SC_SIGQUEUE_MAX
,

143 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

144 
	m_SC_TIMER_MAX
,

145 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

149 
	m_SC_BC_BASE_MAX
,

150 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

151 
	m_SC_BC_DIM_MAX
,

152 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

153 
	m_SC_BC_SCALE_MAX
,

154 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

155 
	m_SC_BC_STRING_MAX
,

156 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

157 
	m_SC_COLL_WEIGHTS_MAX
,

158 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

159 
	m_SC_EQUIV_CLASS_MAX
,

160 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

161 
	m_SC_EXPR_NEST_MAX
,

162 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

163 
	m_SC_LINE_MAX
,

164 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

165 
	m_SC_RE_DUP_MAX
,

166 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

167 
	m_SC_CHARCLASS_NAME_MAX
,

168 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

170 
	m_SC_2_VERSION
,

171 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

172 
	m_SC_2_C_BIND
,

173 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

174 
	m_SC_2_C_DEV
,

175 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

176 
	m_SC_2_FORT_DEV
,

177 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

178 
	m_SC_2_FORT_RUN
,

179 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

180 
	m_SC_2_SW_DEV
,

181 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

182 
	m_SC_2_LOCALEDEF
,

183 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

185 
	m_SC_PII
,

186 
	#_SC_PII
 
_SC_PII


	)

187 
	m_SC_PII_XTI
,

188 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

189 
	m_SC_PII_SOCKET
,

190 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

191 
	m_SC_PII_INTERNET
,

192 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

193 
	m_SC_PII_OSI
,

194 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

195 
	m_SC_POLL
,

196 
	#_SC_POLL
 
_SC_POLL


	)

197 
	m_SC_SELECT
,

198 
	#_SC_SELECT
 
_SC_SELECT


	)

199 
	m_SC_UIO_MAXIOV
,

200 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

201 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

202 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

203 
	m_SC_PII_INTERNET_STREAM
,

204 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

205 
	m_SC_PII_INTERNET_DGRAM
,

206 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

207 
	m_SC_PII_OSI_COTS
,

208 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

209 
	m_SC_PII_OSI_CLTS
,

210 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

211 
	m_SC_PII_OSI_M
,

212 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

213 
	m_SC_T_IOV_MAX
,

214 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

217 
	m_SC_THREADS
,

218 
	#_SC_THREADS
 
_SC_THREADS


	)

219 
	m_SC_THREAD_SAFE_FUNCTIONS
,

220 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

221 
	m_SC_GETGR_R_SIZE_MAX
,

222 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

223 
	m_SC_GETPW_R_SIZE_MAX
,

224 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

225 
	m_SC_LOGIN_NAME_MAX
,

226 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

227 
	m_SC_TTY_NAME_MAX
,

228 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

229 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

230 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

231 
	m_SC_THREAD_KEYS_MAX
,

232 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

233 
	m_SC_THREAD_STACK_MIN
,

234 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

235 
	m_SC_THREAD_THREADS_MAX
,

236 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

237 
	m_SC_THREAD_ATTR_STACKADDR
,

238 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

239 
	m_SC_THREAD_ATTR_STACKSIZE
,

240 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

241 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

242 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

243 
	m_SC_THREAD_PRIO_INHERIT
,

244 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

245 
	m_SC_THREAD_PRIO_PROTECT
,

246 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

247 
	m_SC_THREAD_PROCESS_SHARED
,

248 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

250 
	m_SC_NPROCESSORS_CONF
,

251 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

252 
	m_SC_NPROCESSORS_ONLN
,

253 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

254 
	m_SC_PHYS_PAGES
,

255 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

256 
	m_SC_AVPHYS_PAGES
,

257 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

258 
	m_SC_ATEXIT_MAX
,

259 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

260 
	m_SC_PASS_MAX
,

261 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

263 
	m_SC_XOPEN_VERSION
,

264 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

265 
	m_SC_XOPEN_XCU_VERSION
,

266 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

267 
	m_SC_XOPEN_UNIX
,

268 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

269 
	m_SC_XOPEN_CRYPT
,

270 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

271 
	m_SC_XOPEN_ENH_I18N
,

272 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

273 
	m_SC_XOPEN_SHM
,

274 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

276 
	m_SC_2_CHAR_TERM
,

277 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

278 
	m_SC_2_C_VERSION
,

279 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

280 
	m_SC_2_UPE
,

281 
	#_SC_2_UPE
 
_SC_2_UPE


	)

283 
	m_SC_XOPEN_XPG2
,

284 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

285 
	m_SC_XOPEN_XPG3
,

286 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

287 
	m_SC_XOPEN_XPG4
,

288 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

290 
	m_SC_CHAR_BIT
,

291 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

292 
	m_SC_CHAR_MAX
,

293 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

294 
	m_SC_CHAR_MIN
,

295 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

296 
	m_SC_INT_MAX
,

297 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

298 
	m_SC_INT_MIN
,

299 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

300 
	m_SC_LONG_BIT
,

301 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

302 
	m_SC_WORD_BIT
,

303 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

304 
	m_SC_MB_LEN_MAX
,

305 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

306 
	m_SC_NZERO
,

307 
	#_SC_NZERO
 
_SC_NZERO


	)

308 
	m_SC_SSIZE_MAX
,

309 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

310 
	m_SC_SCHAR_MAX
,

311 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

312 
	m_SC_SCHAR_MIN
,

313 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

314 
	m_SC_SHRT_MAX
,

315 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

316 
	m_SC_SHRT_MIN
,

317 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

318 
	m_SC_UCHAR_MAX
,

319 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

320 
	m_SC_UINT_MAX
,

321 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

322 
	m_SC_ULONG_MAX
,

323 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

324 
	m_SC_USHRT_MAX
,

325 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

327 
	m_SC_NL_ARGMAX
,

328 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

329 
	m_SC_NL_LANGMAX
,

330 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

331 
	m_SC_NL_MSGMAX
,

332 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

333 
	m_SC_NL_NMAX
,

334 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

335 
	m_SC_NL_SETMAX
,

336 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

337 
	m_SC_NL_TEXTMAX
,

338 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

340 
	m_SC_XBS5_ILP32_OFF32
,

341 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

342 
	m_SC_XBS5_ILP32_OFFBIG
,

343 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

344 
	m_SC_XBS5_LP64_OFF64
,

345 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

346 
	m_SC_XBS5_LPBIG_OFFBIG
,

347 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

349 
	m_SC_XOPEN_LEGACY
,

350 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

351 
	m_SC_XOPEN_REALTIME
,

352 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

353 
	m_SC_XOPEN_REALTIME_THREADS
,

354 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

356 
	m_SC_ADVISORY_INFO
,

357 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

358 
	m_SC_BARRIERS
,

359 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

360 
	m_SC_BASE
,

361 
	#_SC_BASE
 
_SC_BASE


	)

362 
	m_SC_C_LANG_SUPPORT
,

363 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

364 
	m_SC_C_LANG_SUPPORT_R
,

365 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

366 
	m_SC_CLOCK_SELECTION
,

367 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

368 
	m_SC_CPUTIME
,

369 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

370 
	m_SC_THREAD_CPUTIME
,

371 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

372 
	m_SC_DEVICE_IO
,

373 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

374 
	m_SC_DEVICE_SPECIFIC
,

375 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

376 
	m_SC_DEVICE_SPECIFIC_R
,

377 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

378 
	m_SC_FD_MGMT
,

379 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

380 
	m_SC_FIFO
,

381 
	#_SC_FIFO
 
_SC_FIFO


	)

382 
	m_SC_PIPE
,

383 
	#_SC_PIPE
 
_SC_PIPE


	)

384 
	m_SC_FILE_ATTRIBUTES
,

385 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

386 
	m_SC_FILE_LOCKING
,

387 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

388 
	m_SC_FILE_SYSTEM
,

389 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

390 
	m_SC_MONOTONIC_CLOCK
,

391 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

392 
	m_SC_MULTI_PROCESS
,

393 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

394 
	m_SC_SINGLE_PROCESS
,

395 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

396 
	m_SC_NETWORKING
,

397 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

398 
	m_SC_READER_WRITER_LOCKS
,

399 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

400 
	m_SC_SPIN_LOCKS
,

401 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

402 
	m_SC_REGEXP
,

403 
	#_SC_REGEXP
 
_SC_REGEXP


	)

404 
	m_SC_REGEX_VERSION
,

405 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

406 
	m_SC_SHELL
,

407 
	#_SC_SHELL
 
_SC_SHELL


	)

408 
	m_SC_SIGNALS
,

409 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

410 
	m_SC_SPAWN
,

411 
	#_SC_SPAWN
 
_SC_SPAWN


	)

412 
	m_SC_SPORADIC_SERVER
,

413 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

414 
	m_SC_THREAD_SPORADIC_SERVER
,

415 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

416 
	m_SC_SYSTEM_DATABASE
,

417 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

418 
	m_SC_SYSTEM_DATABASE_R
,

419 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

420 
	m_SC_TIMEOUTS
,

421 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

422 
	m_SC_TYPED_MEMORY_OBJECTS
,

423 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

424 
	m_SC_USER_GROUPS
,

425 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

426 
	m_SC_USER_GROUPS_R
,

427 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

428 
	m_SC_2_PBS
,

429 
	#_SC_2_PBS
 
_SC_2_PBS


	)

430 
	m_SC_2_PBS_ACCOUNTING
,

431 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

432 
	m_SC_2_PBS_LOCATE
,

433 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

434 
	m_SC_2_PBS_MESSAGE
,

435 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

436 
	m_SC_2_PBS_TRACK
,

437 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

438 
	m_SC_SYMLOOP_MAX
,

439 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

440 
	m_SC_STREAMS
,

441 
	#_SC_STREAMS
 
_SC_STREAMS


	)

442 
	m_SC_2_PBS_CHECKPOINT
,

443 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

445 
	m_SC_V6_ILP32_OFF32
,

446 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

447 
	m_SC_V6_ILP32_OFFBIG
,

448 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

449 
	m_SC_V6_LP64_OFF64
,

450 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

451 
	m_SC_V6_LPBIG_OFFBIG
,

452 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

454 
	m_SC_HOST_NAME_MAX
,

455 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

456 
	m_SC_TRACE
,

457 
	#_SC_TRACE
 
_SC_TRACE


	)

458 
	m_SC_TRACE_EVENT_FILTER
,

459 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

460 
	m_SC_TRACE_INHERIT
,

461 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

462 
	m_SC_TRACE_LOG
,

463 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

465 
	m_SC_LEVEL1_ICACHE_SIZE
,

466 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

467 
	m_SC_LEVEL1_ICACHE_ASSOC
,

468 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

469 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

470 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

471 
	m_SC_LEVEL1_DCACHE_SIZE
,

472 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

473 
	m_SC_LEVEL1_DCACHE_ASSOC
,

474 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

475 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

476 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

477 
	m_SC_LEVEL2_CACHE_SIZE
,

478 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

479 
	m_SC_LEVEL2_CACHE_ASSOC
,

480 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

481 
	m_SC_LEVEL2_CACHE_LINESIZE
,

482 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

483 
	m_SC_LEVEL3_CACHE_SIZE
,

484 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

485 
	m_SC_LEVEL3_CACHE_ASSOC
,

486 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

487 
	m_SC_LEVEL3_CACHE_LINESIZE
,

488 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

489 
	m_SC_LEVEL4_CACHE_SIZE
,

490 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

491 
	m_SC_LEVEL4_CACHE_ASSOC
,

492 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

493 
	m_SC_LEVEL4_CACHE_LINESIZE
,

494 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

497 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

498 
	#_SC_IPV6
 
_SC_IPV6


	)

499 
	m_SC_RAW_SOCKETS
,

500 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

502 
	m_SC_V7_ILP32_OFF32
,

503 
	#_SC_V7_ILP32_OFF32
 
_SC_V7_ILP32_OFF32


	)

504 
	m_SC_V7_ILP32_OFFBIG
,

505 
	#_SC_V7_ILP32_OFFBIG
 
_SC_V7_ILP32_OFFBIG


	)

506 
	m_SC_V7_LP64_OFF64
,

507 
	#_SC_V7_LP64_OFF64
 
_SC_V7_LP64_OFF64


	)

508 
	m_SC_V7_LPBIG_OFFBIG
,

509 
	#_SC_V7_LPBIG_OFFBIG
 
_SC_V7_LPBIG_OFFBIG


	)

511 
	m_SC_SS_REPL_MAX
,

512 
	#_SC_SS_REPL_MAX
 
_SC_SS_REPL_MAX


	)

514 
	m_SC_TRACE_EVENT_NAME_MAX
,

515 
	#_SC_TRACE_EVENT_NAME_MAX
 
_SC_TRACE_EVENT_NAME_MAX


	)

516 
	m_SC_TRACE_NAME_MAX
,

517 
	#_SC_TRACE_NAME_MAX
 
_SC_TRACE_NAME_MAX


	)

518 
	m_SC_TRACE_SYS_MAX
,

519 
	#_SC_TRACE_SYS_MAX
 
_SC_TRACE_SYS_MAX


	)

520 
	m_SC_TRACE_USER_EVENT_MAX
,

521 
	#_SC_TRACE_USER_EVENT_MAX
 
_SC_TRACE_USER_EVENT_MAX


	)

523 
	m_SC_XOPEN_STREAMS
,

524 
	#_SC_XOPEN_STREAMS
 
_SC_XOPEN_STREAMS


	)

526 
	m_SC_THREAD_ROBUST_PRIO_INHERIT
,

527 
	#_SC_THREAD_ROBUST_PRIO_INHERIT
 
_SC_THREAD_ROBUST_PRIO_INHERIT


	)

528 
	m_SC_THREAD_ROBUST_PRIO_PROTECT


529 
	#_SC_THREAD_ROBUST_PRIO_PROTECT
 
_SC_THREAD_ROBUST_PRIO_PROTECT


	)

535 
	m_CS_PATH
,

536 
	#_CS_PATH
 
_CS_PATH


	)

538 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

539 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

540 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

542 
	m_CS_GNU_LIBC_VERSION
,

543 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

544 
	m_CS_GNU_LIBPTHREAD_VERSION
,

545 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

547 
	m_CS_V5_WIDTH_RESTRICTED_ENVS
,

548 
	#_CS_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

549 
	#_CS_POSIX_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

551 
	m_CS_V7_WIDTH_RESTRICTED_ENVS
,

552 
	#_CS_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

553 
	#_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

555 
	m_CS_LFS_CFLAGS
 = 1000,

556 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

557 
	m_CS_LFS_LDFLAGS
,

558 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

559 
	m_CS_LFS_LIBS
,

560 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

561 
	m_CS_LFS_LINTFLAGS
,

562 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

563 
	m_CS_LFS64_CFLAGS
,

564 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

565 
	m_CS_LFS64_LDFLAGS
,

566 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

567 
	m_CS_LFS64_LIBS
,

568 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

569 
	m_CS_LFS64_LINTFLAGS
,

570 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

572 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

573 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

574 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

575 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

576 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

577 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

578 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

579 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

580 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

581 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

582 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

583 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

584 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

585 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

586 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

587 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

588 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

589 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

590 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

591 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

592 
	m_CS_XBS5_LP64_OFF64_LIBS
,

593 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

594 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

595 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

596 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

597 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

598 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

599 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

600 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

601 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

602 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

603 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

605 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

606 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

607 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

608 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

609 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

610 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

611 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

612 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

613 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

614 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

615 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

616 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

617 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

618 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

619 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

620 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

621 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

622 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

623 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

624 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

625 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

626 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

627 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

628 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

629 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

630 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

631 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

632 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

633 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

634 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

635 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
,

636 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

638 
	m_CS_POSIX_V7_ILP32_OFF32_CFLAGS
,

639 
	#_CS_POSIX_V7_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_CFLAGS


	)

640 
	m_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
,

641 
	#_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS


	)

642 
	m_CS_POSIX_V7_ILP32_OFF32_LIBS
,

643 
	#_CS_POSIX_V7_ILP32_OFF32_LIBS
 
_CS_POSIX_V7_ILP32_OFF32_LIBS


	)

644 
	m_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
,

645 
	#_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS


	)

646 
	m_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
,

647 
	#_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS


	)

648 
	m_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
,

649 
	#_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS


	)

650 
	m_CS_POSIX_V7_ILP32_OFFBIG_LIBS
,

651 
	#_CS_POSIX_V7_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V7_ILP32_OFFBIG_LIBS


	)

652 
	m_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
,

653 
	#_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS


	)

654 
	m_CS_POSIX_V7_LP64_OFF64_CFLAGS
,

655 
	#_CS_POSIX_V7_LP64_OFF64_CFLAGS
 
_CS_POSIX_V7_LP64_OFF64_CFLAGS


	)

656 
	m_CS_POSIX_V7_LP64_OFF64_LDFLAGS
,

657 
	#_CS_POSIX_V7_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LDFLAGS


	)

658 
	m_CS_POSIX_V7_LP64_OFF64_LIBS
,

659 
	#_CS_POSIX_V7_LP64_OFF64_LIBS
 
_CS_POSIX_V7_LP64_OFF64_LIBS


	)

660 
	m_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
,

661 
	#_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS


	)

662 
	m_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
,

663 
	#_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS


	)

664 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
,

665 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS


	)

666 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
,

667 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS


	)

668 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
,

669 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


	)

671 
	m_CS_V6_ENV
,

672 
	#_CS_V6_ENV
 
_CS_V6_ENV


	)

673 
	m_CS_V7_ENV


674 
	#_CS_V7_ENV
 
_CS_V7_ENV


	)

	@/usr/include/bits/dirent.h

18 #i‚de‡
_DIRENT_H


22 
	sdúít


24 #i‚de‡
__USE_FILE_OFFSET64


25 
__öo_t
 
	md_öo
;

26 
__off_t
 
	md_off
;

28 
__öo64_t
 
	md_öo
;

29 
__off64_t
 
	md_off
;

31 
	md_ª˛í
;

32 
	md_ty≥
;

33 
	md_«me
[256];

36 #ifde‡
__USE_LARGEFILE64


37 
	sdúít64


39 
__öo64_t
 
	md_öo
;

40 
__off64_t
 
	md_off
;

41 
	md_ª˛í
;

42 
	md_ty≥
;

43 
	md_«me
[256];

47 
	#d_fûío
 
d_öo


	)

49 #unde‡
_DIRENT_HAVE_D_NAMLEN


50 
	#_DIRENT_HAVE_D_RECLEN


	)

51 
	#_DIRENT_HAVE_D_OFF


	)

52 
	#_DIRENT_HAVE_D_TYPE


	)

54 #i‡
deföed
 
__OFF_T_MATCHES_OFF64_T
 && deföed 
__INO_T_MATCHES_INO64_T


56 
	#_DIRENT_MATCHES_DIRENT64
 1

	)

	@/usr/include/bits/dlfcn.h

19 #i‚de‡
_DLFCN_H


24 
	#RTLD_LAZY
 0x00001

	)

25 
	#RTLD_NOW
 0x00002

	)

26 
	#RTLD_BINDING_MASK
 0x3

	)

27 
	#RTLD_NOLOAD
 0x00004

	)

28 
	#RTLD_DEEPBIND
 0x00008

	)

33 
	#RTLD_GLOBAL
 0x00100

	)

38 
	#RTLD_LOCAL
 0

	)

41 
	#RTLD_NODELETE
 0x01000

	)

43 #ifde‡
__USE_GNU


54 
	#DL_CALL_FCT
(
f˘p
, 
¨gs
) \

55 (
	`_dl_mcou¡_wøµî_check
 ((*Ë(
f˘p
)), (*(f˘p)Ë
¨gs
)

	)

57 
__BEGIN_DECLS


60 
	$_dl_mcou¡_wøµî_check
 (*
__£lÂc
Ë
__THROW
;

62 
__END_DECLS


	@/usr/include/bits/environments.h

18 #i‚de‡
_UNISTD_H


22 
	~<bôs/w‹dsize.h
>

42 #i‡
__WORDSIZE
 == 64

56 
	#_POSIX_V7_LPBIG_OFFBIG
 -1

	)

57 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

58 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

61 
	#_POSIX_V7_LP64_OFF64
 1

	)

62 
	#_POSIX_V6_LP64_OFF64
 1

	)

63 
	#_XBS5_LP64_OFF64
 1

	)

69 
	#_POSIX_V7_ILP32_OFFBIG
 1

	)

70 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

71 
	#_XBS5_ILP32_OFFBIG
 1

	)

73 #i‚de‡
__x86_64__


75 
	#_POSIX_V7_ILP32_OFF32
 1

	)

76 
	#_POSIX_V6_ILP32_OFF32
 1

	)

77 
	#_XBS5_ILP32_OFF32
 1

	)

95 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

96 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

97 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


98 
	#__ILP32_OFFBIG_CFLAGS
 "-mx32"

	)

99 
	#__ILP32_OFFBIG_LDFLAGS
 "-mx32"

	)

101 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

102 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

104 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

105 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/errno.h

19 #ifde‡
_ERRNO_H


21 #unde‡
EDOM


22 #unde‡
EILSEQ


23 #unde‡
ERANGE


24 
	~<löux/î∫o.h
>

27 
	#ENOTSUP
 
EOPNOTSUPP


	)

30 #i‚de‡
ECANCELED


31 
	#ECANCELED
 125

	)

35 #i‚de‡
EOWNERDEAD


36 
	#EOWNERDEAD
 130

	)

37 
	#ENOTRECOVERABLE
 131

	)

40 #i‚de‡
ERFKILL


41 
	#ERFKILL
 132

	)

44 #i‚de‡
EHWPOISON


45 
	#EHWPOISON
 133

	)

48 #i‚de‡
__ASSEMBLER__


50 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

52 #i‡!
deföed
 
_LIBC
 || deföed 
_LIBC_REENTRANT


54 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

59 #i‡!
deföed
 
_ERRNO_H
 && deföed 
__√ed_Em©h


63 
	#EDOM
 33

	)

64 
	#EILSEQ
 84

	)

65 
	#ERANGE
 34

	)

	@/usr/include/bits/fcntl.h

19 #i‚de‡
_FCNTL_H


23 #ifde‡
__x86_64__


24 
	#__O_LARGEFILE
 0

	)

27 #ifde‡
__x86_64__


29 
	#F_GETLK64
 5

	)

30 
	#F_SETLK64
 6

	)

31 
	#F_SETLKW64
 7

	)

35 
	sÊock


37 
	ml_ty≥
;

38 
	ml_whí˚
;

39 #i‚de‡
__USE_FILE_OFFSET64


40 
__off_t
 
	ml_°¨t
;

41 
__off_t
 
	ml_Àn
;

43 
__off64_t
 
	ml_°¨t
;

44 
__off64_t
 
	ml_Àn
;

46 
__pid_t
 
	ml_pid
;

49 #ifde‡
__USE_LARGEFILE64


50 
	sÊock64


52 
	ml_ty≥
;

53 
	ml_whí˚
;

54 
__off64_t
 
	ml_°¨t
;

55 
__off64_t
 
	ml_Àn
;

56 
__pid_t
 
	ml_pid
;

61 
	~<bôs/f˙é-löux.h
>

	@/usr/include/bits/fcntl2.h

19 #i‚def 
_FCNTL_H


25 #i‚de‡
__USE_FILE_OFFSET64


26 
	$__›í_2
 (c⁄° *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

27 
	`__REDIRECT
 (
__›í_Æüs
, (c⁄° *
__∑th
, 
__oÊag
, ...),

28 
›í
Ë
	`__n⁄nuŒ
 ((1));

30 
	`__REDIRECT
 (
__›í_2
, (c⁄° *
__∑th
, 
__oÊag
),

31 
__›í64_2
Ë
	`__n⁄nuŒ
 ((1));

32 
	`__REDIRECT
 (
__›í_Æüs
, (c⁄° *
__∑th
, 
__oÊag
, ...),

33 
›í64
Ë
	`__n⁄nuŒ
 ((1));

35 
	`__îr‹de˛
 (
__›í_too_m™y_¨gs
,

37 
	`__îr‹de˛
 (
__›í_missög_mode
,

40 
__f‹tify_fun˘i⁄
 

41 
	$›í
 (c⁄° *
__∑th
, 
__oÊag
, ...)

43 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

44 
	`__›í_too_m™y_¨gs
 ();

46 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

48 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

50 
	`__›í_missög_mode
 ();

51  
	`__›í_2
 (
__∑th
, 
__oÊag
);

53  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

56 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

57  
	`__›í_2
 (
__∑th
, 
__oÊag
);

59  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

60 
	}
}

63 #ifde‡
__USE_LARGEFILE64


64 
	$__›í64_2
 (c⁄° *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

65 
	`__REDIRECT
 (
__›í64_Æüs
, (c⁄° *
__∑th
, 
__oÊag
,

66 ...), 
›í64
Ë
	`__n⁄nuŒ
 ((1));

67 
	`__îr‹de˛
 (
__›í64_too_m™y_¨gs
,

69 
	`__îr‹de˛
 (
__›í64_missög_mode
,

72 
__f‹tify_fun˘i⁄
 

73 
	$›í64
 (c⁄° *
__∑th
, 
__oÊag
, ...)

75 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

76 
	`__›í64_too_m™y_¨gs
 ();

78 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

80 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

82 
	`__›í64_missög_mode
 ();

83  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

85  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

88 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

89  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

91  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

92 
	}
}

96 #ifde‡
__USE_ATFILE


97 #i‚de‡
__USE_FILE_OFFSET64


98 
	$__›í©_2
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
)

99 
	`__n⁄nuŒ
 ((2));

100 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, c⁄° *
__∑th
,

101 
__oÊag
, ...), 
›í©
)

102 
	`__n⁄nuŒ
 ((2));

104 
	`__REDIRECT
 (
__›í©_2
, (
__fd
, c⁄° *
__∑th
,

105 
__oÊag
), 
__›í©64_2
)

106 
	`__n⁄nuŒ
 ((2));

107 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, c⁄° *
__∑th
,

108 
__oÊag
, ...), 
›í©64
)

109 
	`__n⁄nuŒ
 ((2));

111 
	`__îr‹de˛
 (
__›í©_too_m™y_¨gs
,

113 
	`__îr‹de˛
 (
__›í©_missög_mode
,

116 
__f‹tify_fun˘i⁄
 

117 
	$›í©
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
, ...)

119 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

120 
	`__›í©_too_m™y_¨gs
 ();

122 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

124 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

126 
	`__›í©_missög_mode
 ();

127  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

129  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

132 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

133  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

135  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

136 
	}
}

139 #ifde‡
__USE_LARGEFILE64


140 
	$__›í©64_2
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
)

141 
	`__n⁄nuŒ
 ((2));

142 
	`__REDIRECT
 (
__›í©64_Æüs
, (
__fd
, c⁄° *
__∑th
,

143 
__oÊag
, ...), 
›í©64
)

144 
	`__n⁄nuŒ
 ((2));

145 
	`__îr‹de˛
 (
__›í©64_too_m™y_¨gs
,

147 
	`__îr‹de˛
 (
__›í©64_missög_mode
,

150 
__f‹tify_fun˘i⁄
 

151 
	$›í©64
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
, ...)

153 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

154 
	`__›í©64_too_m™y_¨gs
 ();

156 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

158 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

160 
	`__›í©64_missög_mode
 ();

161  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

163  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

166 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

167  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

169  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

170 
	}
}

	@/usr/include/bits/in.h

20 #i‚de‡
_NETINET_IN_H


29 #ifde‡
_UAPI_LINUX_IN6_H


33 
	#__USE_KERNEL_IPV6_DEFS


	)

39 
	#IP_OPTIONS
 4

	)

40 
	#IP_HDRINCL
 3

	)

41 
	#IP_TOS
 1

	)

42 
	#IP_TTL
 2

	)

43 
	#IP_RECVOPTS
 6

	)

45 
	#IP_RECVRETOPTS
 
IP_RETOPTS


	)

46 
	#IP_RETOPTS
 7

	)

47 
	#IP_MULTICAST_IF
 32

	)

48 
	#IP_MULTICAST_TTL
 33

	)

49 
	#IP_MULTICAST_LOOP
 34

	)

50 
	#IP_ADD_MEMBERSHIP
 35

	)

51 
	#IP_DROP_MEMBERSHIP
 36

	)

52 
	#IP_UNBLOCK_SOURCE
 37

	)

53 
	#IP_BLOCK_SOURCE
 38

	)

54 
	#IP_ADD_SOURCE_MEMBERSHIP
 39

	)

55 
	#IP_DROP_SOURCE_MEMBERSHIP
 40

	)

56 
	#IP_MSFILTER
 41

	)

57 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


58 
	#MCAST_JOIN_GROUP
 42

	)

59 
	#MCAST_BLOCK_SOURCE
 43

	)

60 
	#MCAST_UNBLOCK_SOURCE
 44

	)

61 
	#MCAST_LEAVE_GROUP
 45

	)

62 
	#MCAST_JOIN_SOURCE_GROUP
 46

	)

63 
	#MCAST_LEAVE_SOURCE_GROUP
 47

	)

64 
	#MCAST_MSFILTER
 48

	)

65 
	#IP_MULTICAST_ALL
 49

	)

66 
	#IP_UNICAST_IF
 50

	)

68 
	#MCAST_EXCLUDE
 0

	)

69 
	#MCAST_INCLUDE
 1

	)

72 
	#IP_ROUTER_ALERT
 5

	)

73 
	#IP_PKTINFO
 8

	)

74 
	#IP_PKTOPTIONS
 9

	)

75 
	#IP_PMTUDISC
 10

	)

76 
	#IP_MTU_DISCOVER
 10

	)

77 
	#IP_RECVERR
 11

	)

78 
	#IP_RECVTTL
 12

	)

79 
	#IP_RECVTOS
 13

	)

80 
	#IP_MTU
 14

	)

81 
	#IP_FREEBIND
 15

	)

82 
	#IP_IPSEC_POLICY
 16

	)

83 
	#IP_XFRM_POLICY
 17

	)

84 
	#IP_PASSSEC
 18

	)

85 
	#IP_TRANSPARENT
 19

	)

86 
	#IP_MULTICAST_ALL
 49

	)

89 
	#IP_ORIGDSTADDR
 20

	)

90 
	#IP_RECVORIGDSTADDR
 
IP_ORIGDSTADDR


	)

92 
	#IP_MINTTL
 21

	)

96 
	#IP_PMTUDISC_DONT
 0

	)

97 
	#IP_PMTUDISC_WANT
 1

	)

98 
	#IP_PMTUDISC_DO
 2

	)

99 
	#IP_PMTUDISC_PROBE
 3

	)

102 
	#SOL_IP
 0

	)

104 
	#IP_DEFAULT_MULTICAST_TTL
 1

	)

105 
	#IP_DEFAULT_MULTICAST_LOOP
 1

	)

106 
	#IP_MAX_MEMBERSHIPS
 20

	)

108 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


112 
	sù_›ts


114 
ö_addr
 
	mù_d°
;

115 
	mù_›ts
[40];

119 
	sù_mªqn


121 
ö_addr
 
	mimr_mu…üddr
;

122 
ö_addr
 
	mimr_addªss
;

123 
	mimr_ifödex
;

127 
	sö_pktöfo


129 
	mùi_ifödex
;

130 
ö_addr
 
	mùi_•ec_d°
;

131 
ö_addr
 
	mùi_addr
;

138 
	#IPV6_ADDRFORM
 1

	)

139 
	#IPV6_2292PKTINFO
 2

	)

140 
	#IPV6_2292HOPOPTS
 3

	)

141 
	#IPV6_2292DSTOPTS
 4

	)

142 
	#IPV6_2292RTHDR
 5

	)

143 
	#IPV6_2292PKTOPTIONS
 6

	)

144 
	#IPV6_CHECKSUM
 7

	)

145 
	#IPV6_2292HOPLIMIT
 8

	)

147 
	#SCM_SRCRT
 
IPV6_RXSRCRT


	)

149 
	#IPV6_NEXTHOP
 9

	)

150 
	#IPV6_AUTHHDR
 10

	)

151 
	#IPV6_UNICAST_HOPS
 16

	)

152 
	#IPV6_MULTICAST_IF
 17

	)

153 
	#IPV6_MULTICAST_HOPS
 18

	)

154 
	#IPV6_MULTICAST_LOOP
 19

	)

155 
	#IPV6_JOIN_GROUP
 20

	)

156 
	#IPV6_LEAVE_GROUP
 21

	)

157 
	#IPV6_ROUTER_ALERT
 22

	)

158 
	#IPV6_MTU_DISCOVER
 23

	)

159 
	#IPV6_MTU
 24

	)

160 
	#IPV6_RECVERR
 25

	)

161 
	#IPV6_V6ONLY
 26

	)

162 
	#IPV6_JOIN_ANYCAST
 27

	)

163 
	#IPV6_LEAVE_ANYCAST
 28

	)

164 
	#IPV6_IPSEC_POLICY
 34

	)

165 
	#IPV6_XFRM_POLICY
 35

	)

167 
	#IPV6_RECVPKTINFO
 49

	)

168 
	#IPV6_PKTINFO
 50

	)

169 
	#IPV6_RECVHOPLIMIT
 51

	)

170 
	#IPV6_HOPLIMIT
 52

	)

171 
	#IPV6_RECVHOPOPTS
 53

	)

172 
	#IPV6_HOPOPTS
 54

	)

173 
	#IPV6_RTHDRDSTOPTS
 55

	)

174 
	#IPV6_RECVRTHDR
 56

	)

175 
	#IPV6_RTHDR
 57

	)

176 
	#IPV6_RECVDSTOPTS
 58

	)

177 
	#IPV6_DSTOPTS
 59

	)

179 
	#IPV6_RECVTCLASS
 66

	)

180 
	#IPV6_TCLASS
 67

	)

183 
	#IPV6_ADD_MEMBERSHIP
 
IPV6_JOIN_GROUP


	)

184 
	#IPV6_DROP_MEMBERSHIP
 
IPV6_LEAVE_GROUP


	)

185 
	#IPV6_RXHOPOPTS
 
IPV6_HOPOPTS


	)

186 
	#IPV6_RXDSTOPTS
 
IPV6_DSTOPTS


	)

189 
	#IPV6_PMTUDISC_DONT
 0

	)

190 
	#IPV6_PMTUDISC_WANT
 1

	)

191 
	#IPV6_PMTUDISC_DO
 2

	)

192 
	#IPV6_PMTUDISC_PROBE
 3

	)

195 
	#SOL_IPV6
 41

	)

196 
	#SOL_ICMPV6
 58

	)

199 
	#IPV6_RTHDR_LOOSE
 0

	)

200 
	#IPV6_RTHDR_STRICT
 1

	)

202 
	#IPV6_RTHDR_TYPE_0
 0

	)

	@/usr/include/bits/ioctl-types.h

19 #i‚de‡
_SYS_IOCTL_H


24 
	~<asm/io˘ls.h
>

27 
	swösize


29 
	mws_row
;

30 
	mws_cﬁ
;

31 
	mws_xpixñ
;

32 
	mws_ypixñ
;

35 
	#NCC
 8

	)

36 
	sãrmio


38 
	mc_iÊag
;

39 
	mc_oÊag
;

40 
	mc_cÊag
;

41 
	mc_lÊag
;

42 
	mc_löe
;

43 
	mc_cc
[
NCC
];

47 
	#TIOCM_LE
 0x001

	)

48 
	#TIOCM_DTR
 0x002

	)

49 
	#TIOCM_RTS
 0x004

	)

50 
	#TIOCM_ST
 0x008

	)

51 
	#TIOCM_SR
 0x010

	)

52 
	#TIOCM_CTS
 0x020

	)

53 
	#TIOCM_CAR
 0x040

	)

54 
	#TIOCM_RNG
 0x080

	)

55 
	#TIOCM_DSR
 0x100

	)

56 
	#TIOCM_CD
 
TIOCM_CAR


	)

57 
	#TIOCM_RI
 
TIOCM_RNG


	)

62 
	#N_TTY
 0

	)

63 
	#N_SLIP
 1

	)

64 
	#N_MOUSE
 2

	)

65 
	#N_PPP
 3

	)

66 
	#N_STRIP
 4

	)

67 
	#N_AX25
 5

	)

68 
	#N_X25
 6

	)

69 
	#N_6PACK
 7

	)

70 
	#N_MASC
 8

	)

71 
	#N_R3964
 9

	)

72 
	#N_PROFIBUS_FDL
 10

	)

73 
	#N_IRDA
 11

	)

74 
	#N_SMSBLOCK
 12

	)

75 
	#N_HDLC
 13

	)

76 
	#N_SYNC_PPP
 14

	)

77 
	#N_HCI
 15

	)

	@/usr/include/bits/ioctls.h

18 #i‚de‡
_SYS_IOCTL_H


23 
	~<asm/io˘ls.h
>

26 
	#SIOCADDRT
 0x890B

	)

27 
	#SIOCDELRT
 0x890C

	)

28 
	#SIOCRTMSG
 0x890D

	)

31 
	#SIOCGIFNAME
 0x8910

	)

32 
	#SIOCSIFLINK
 0x8911

	)

33 
	#SIOCGIFCONF
 0x8912

	)

34 
	#SIOCGIFFLAGS
 0x8913

	)

35 
	#SIOCSIFFLAGS
 0x8914

	)

36 
	#SIOCGIFADDR
 0x8915

	)

37 
	#SIOCSIFADDR
 0x8916

	)

38 
	#SIOCGIFDSTADDR
 0x8917

	)

39 
	#SIOCSIFDSTADDR
 0x8918

	)

40 
	#SIOCGIFBRDADDR
 0x8919

	)

41 
	#SIOCSIFBRDADDR
 0x891®

	)

42 
	#SIOCGIFNETMASK
 0x891b

	)

43 
	#SIOCSIFNETMASK
 0x891¯

	)

44 
	#SIOCGIFMETRIC
 0x891d

	)

45 
	#SIOCSIFMETRIC
 0x891ê

	)

46 
	#SIOCGIFMEM
 0x891‡

	)

47 
	#SIOCSIFMEM
 0x8920

	)

48 
	#SIOCGIFMTU
 0x8921

	)

49 
	#SIOCSIFMTU
 0x8922

	)

50 
	#SIOCSIFNAME
 0x8923

	)

51 
	#SIOCSIFHWADDR
 0x8924

	)

52 
	#SIOCGIFENCAP
 0x8925

	)

53 
	#SIOCSIFENCAP
 0x8926

	)

54 
	#SIOCGIFHWADDR
 0x8927

	)

55 
	#SIOCGIFSLAVE
 0x8929

	)

56 
	#SIOCSIFSLAVE
 0x8930

	)

57 
	#SIOCADDMULTI
 0x8931

	)

58 
	#SIOCDELMULTI
 0x8932

	)

59 
	#SIOCGIFINDEX
 0x8933

	)

60 
	#SIOGIFINDEX
 
SIOCGIFINDEX


	)

61 
	#SIOCSIFPFLAGS
 0x8934

	)

62 
	#SIOCGIFPFLAGS
 0x8935

	)

63 
	#SIOCDIFADDR
 0x8936

	)

64 
	#SIOCSIFHWBROADCAST
 0x8937

	)

65 
	#SIOCGIFCOUNT
 0x8938

	)

67 
	#SIOCGIFBR
 0x8940

	)

68 
	#SIOCSIFBR
 0x8941

	)

70 
	#SIOCGIFTXQLEN
 0x8942

	)

71 
	#SIOCSIFTXQLEN
 0x8943

	)

76 
	#SIOCDARP
 0x8953

	)

77 
	#SIOCGARP
 0x8954

	)

78 
	#SIOCSARP
 0x8955

	)

81 
	#SIOCDRARP
 0x8960

	)

82 
	#SIOCGRARP
 0x8961

	)

83 
	#SIOCSRARP
 0x8962

	)

87 
	#SIOCGIFMAP
 0x8970

	)

88 
	#SIOCSIFMAP
 0x8971

	)

92 
	#SIOCADDDLCI
 0x8980

	)

93 
	#SIOCDELDLCI
 0x8981

	)

102 
	#SIOCDEVPRIVATE
 0x89F0

	)

108 
	#SIOCPROTOPRIVATE
 0x89E0

	)

	@/usr/include/bits/mman.h

19 #i‚de‡
_SYS_MMAN_H


27 #ifde‡
__USE_MISC


28 
	#MAP_32BIT
 0x40

	)

32 #ifde‡
__USE_MISC


33 
	#MAP_GROWSDOWN
 0x00100

	)

34 
	#MAP_DENYWRITE
 0x00800

	)

35 
	#MAP_EXECUTABLE
 0x01000

	)

36 
	#MAP_LOCKED
 0x02000

	)

37 
	#MAP_NORESERVE
 0x04000

	)

38 
	#MAP_POPULATE
 0x08000

	)

39 
	#MAP_NONBLOCK
 0x10000

	)

40 
	#MAP_STACK
 0x20000

	)

41 
	#MAP_HUGETLB
 0x40000

	)

45 
	~<bôs/mm™-löux.h
>

	@/usr/include/bits/netdb.h

18 #i‚de‡
_NETDB_H


26 
	s√ã¡


28 *
	mn_«me
;

29 **
	mn_Æü£s
;

30 
	mn_addπy≥
;

31 
uöt32_t
 
	mn_√t
;

	@/usr/include/bits/param.h

19 #i‚de‡
_SYS_PARAM_H


23 #i‚de‡
ARG_MAX


24 
	#__undef_ARG_MAX


	)

27 
	~<löux/limôs.h
>

28 
	~<löux/∑øm.h
>

31 #ifde‡
__undef_ARG_MAX


32 #unde‡
ARG_MAX


33 #unde‡
__undef_ARG_MAX


36 
	#MAXSYMLINKS
 20

	)

41 
	#NOFILE
 256

	)

42 
	#NCARGS
 131072

	)

	@/usr/include/bits/posix1_lim.h

24 #i‚def 
_BITS_POSIX1_LIM_H


25 
	#_BITS_POSIX1_LIM_H
 1

	)

31 
	#_POSIX_AIO_LISTIO_MAX
 2

	)

34 
	#_POSIX_AIO_MAX
 1

	)

37 
	#_POSIX_ARG_MAX
 4096

	)

40 #ifde‡
__USE_XOPEN2K


41 
	#_POSIX_CHILD_MAX
 25

	)

43 
	#_POSIX_CHILD_MAX
 6

	)

47 
	#_POSIX_DELAYTIMER_MAX
 32

	)

51 
	#_POSIX_HOST_NAME_MAX
 255

	)

54 
	#_POSIX_LINK_MAX
 8

	)

57 
	#_POSIX_LOGIN_NAME_MAX
 9

	)

60 
	#_POSIX_MAX_CANON
 255

	)

64 
	#_POSIX_MAX_INPUT
 255

	)

67 
	#_POSIX_MQ_OPEN_MAX
 8

	)

70 
	#_POSIX_MQ_PRIO_MAX
 32

	)

73 
	#_POSIX_NAME_MAX
 14

	)

76 #ifde‡
__USE_XOPEN2K


77 
	#_POSIX_NGROUPS_MAX
 8

	)

79 
	#_POSIX_NGROUPS_MAX
 0

	)

83 #ifde‡
__USE_XOPEN2K


84 
	#_POSIX_OPEN_MAX
 20

	)

86 
	#_POSIX_OPEN_MAX
 16

	)

89 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


92 
	#_POSIX_FD_SETSIZE
 
_POSIX_OPEN_MAX


	)

96 
	#_POSIX_PATH_MAX
 256

	)

99 
	#_POSIX_PIPE_BUF
 512

	)

103 
	#_POSIX_RE_DUP_MAX
 255

	)

106 
	#_POSIX_RTSIG_MAX
 8

	)

109 
	#_POSIX_SEM_NSEMS_MAX
 256

	)

112 
	#_POSIX_SEM_VALUE_MAX
 32767

	)

115 
	#_POSIX_SIGQUEUE_MAX
 32

	)

118 
	#_POSIX_SSIZE_MAX
 32767

	)

121 
	#_POSIX_STREAM_MAX
 8

	)

124 
	#_POSIX_SYMLINK_MAX
 255

	)

128 
	#_POSIX_SYMLOOP_MAX
 8

	)

131 
	#_POSIX_TIMER_MAX
 32

	)

134 
	#_POSIX_TTY_NAME_MAX
 9

	)

137 #ifde‡
__USE_XOPEN2K


138 
	#_POSIX_TZNAME_MAX
 6

	)

140 
	#_POSIX_TZNAME_MAX
 3

	)

143 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


145 
	#_POSIX_QLIMIT
 1

	)

149 
	#_POSIX_HIWAT
 
_POSIX_PIPE_BUF


	)

152 
	#_POSIX_UIO_MAXIOV
 16

	)

156 
	#_POSIX_CLOCKRES_MIN
 20000000

	)

160 
	~<bôs/loˇl_lim.h
>

163 #i‚def 
SSIZE_MAX


164 
	#SSIZE_MAX
 
LONG_MAX


	)

171 #i‚def 
NGROUPS_MAX


172 
	#NGROUPS_MAX
 8

	)

	@/usr/include/bits/posix2_lim.h

22 #i‚def 
_BITS_POSIX2_LIM_H


23 
	#_BITS_POSIX2_LIM_H
 1

	)

27 
	#_POSIX2_BC_BASE_MAX
 99

	)

30 
	#_POSIX2_BC_DIM_MAX
 2048

	)

33 
	#_POSIX2_BC_SCALE_MAX
 99

	)

36 
	#_POSIX2_BC_STRING_MAX
 1000

	)

40 
	#_POSIX2_COLL_WEIGHTS_MAX
 2

	)

44 
	#_POSIX2_EXPR_NEST_MAX
 32

	)

47 
	#_POSIX2_LINE_MAX
 2048

	)

51 
	#_POSIX2_RE_DUP_MAX
 255

	)

55 
	#_POSIX2_CHARCLASS_NAME_MAX
 14

	)

62 #i‚def 
BC_BASE_MAX


63 
	#BC_BASE_MAX
 
_POSIX2_BC_BASE_MAX


	)

65 #i‚def 
BC_DIM_MAX


66 
	#BC_DIM_MAX
 
_POSIX2_BC_DIM_MAX


	)

68 #i‚def 
BC_SCALE_MAX


69 
	#BC_SCALE_MAX
 
_POSIX2_BC_SCALE_MAX


	)

71 #i‚def 
BC_STRING_MAX


72 
	#BC_STRING_MAX
 
_POSIX2_BC_STRING_MAX


	)

74 #i‚def 
COLL_WEIGHTS_MAX


75 
	#COLL_WEIGHTS_MAX
 255

	)

77 #i‚def 
EXPR_NEST_MAX


78 
	#EXPR_NEST_MAX
 
_POSIX2_EXPR_NEST_MAX


	)

80 #i‚def 
LINE_MAX


81 
	#LINE_MAX
 
_POSIX2_LINE_MAX


	)

83 #i‚def 
CHARCLASS_NAME_MAX


84 
	#CHARCLASS_NAME_MAX
 2048

	)

88 
	#RE_DUP_MAX
 (0x7fff)

	)

	@/usr/include/bits/posix_opt.h

19 #i‚def 
_BITS_POSIX_OPT_H


20 
	#_BITS_POSIX_OPT_H
 1

	)

23 
	#_POSIX_JOB_CONTROL
 1

	)

26 
	#_POSIX_SAVED_IDS
 1

	)

29 
	#_POSIX_PRIORITY_SCHEDULING
 200809L

	)

32 
	#_POSIX_SYNCHRONIZED_IO
 200809L

	)

35 
	#_POSIX_FSYNC
 200809L

	)

38 
	#_POSIX_MAPPED_FILES
 200809L

	)

41 
	#_POSIX_MEMLOCK
 200809L

	)

44 
	#_POSIX_MEMLOCK_RANGE
 200809L

	)

47 
	#_POSIX_MEMORY_PROTECTION
 200809L

	)

50 
	#_POSIX_CHOWN_RESTRICTED
 0

	)

54 
	#_POSIX_VDISABLE
 '\0'

	)

57 
	#_POSIX_NO_TRUNC
 1

	)

60 
	#_XOPEN_REALTIME
 1

	)

63 
	#_XOPEN_REALTIME_THREADS
 1

	)

66 
	#_XOPEN_SHM
 1

	)

69 
	#_POSIX_THREADS
 200809L

	)

72 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

73 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200809L

	)

76 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200809L

	)

79 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200809L

	)

82 
	#_POSIX_THREAD_ATTR_STACKADDR
 200809L

	)

85 
	#_POSIX_THREAD_PRIO_INHERIT
 200809L

	)

89 
	#_POSIX_THREAD_PRIO_PROTECT
 200809L

	)

91 #ifde‡
__USE_XOPEN2K8


93 
	#_POSIX_THREAD_ROBUST_PRIO_INHERIT
 200809L

	)

96 
	#_POSIX_THREAD_ROBUST_PRIO_PROTECT
 -1

	)

100 
	#_POSIX_SEMAPHORES
 200809L

	)

103 
	#_POSIX_REALTIME_SIGNALS
 200809L

	)

106 
	#_POSIX_ASYNCHRONOUS_IO
 200809L

	)

107 
	#_POSIX_ASYNC_IO
 1

	)

109 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

111 
	#_POSIX_PRIORITIZED_IO
 200809L

	)

114 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

117 
	#_LFS_LARGEFILE
 1

	)

118 
	#_LFS64_LARGEFILE
 1

	)

119 
	#_LFS64_STDIO
 1

	)

122 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200809L

	)

125 
	#_POSIX_CPUTIME
 0

	)

128 
	#_POSIX_THREAD_CPUTIME
 0

	)

131 
	#_POSIX_REGEXP
 1

	)

134 
	#_POSIX_READER_WRITER_LOCKS
 200809L

	)

137 
	#_POSIX_SHELL
 1

	)

140 
	#_POSIX_TIMEOUTS
 200809L

	)

143 
	#_POSIX_SPIN_LOCKS
 200809L

	)

146 
	#_POSIX_SPAWN
 200809L

	)

149 
	#_POSIX_TIMERS
 200809L

	)

152 
	#_POSIX_BARRIERS
 200809L

	)

155 
	#_POSIX_MESSAGE_PASSING
 200809L

	)

158 
	#_POSIX_THREAD_PROCESS_SHARED
 200809L

	)

161 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

164 
	#_POSIX_CLOCK_SELECTION
 200809L

	)

167 
	#_POSIX_ADVISORY_INFO
 200809L

	)

170 
	#_POSIX_IPV6
 200809L

	)

173 
	#_POSIX_RAW_SOCKETS
 200809L

	)

176 
	#_POSIX2_CHAR_TERM
 200809L

	)

179 
	#_POSIX_SPORADIC_SERVER
 -1

	)

180 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

183 
	#_POSIX_TRACE
 -1

	)

184 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

185 
	#_POSIX_TRACE_INHERIT
 -1

	)

186 
	#_POSIX_TRACE_LOG
 -1

	)

189 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

	@/usr/include/bits/pthreadtypes.h

18 #i‚de‡
_BITS_PTHREADTYPES_H


19 
	#_BITS_PTHREADTYPES_H
 1

	)

21 
	~<bôs/w‹dsize.h
>

23 #ifde‡
__x86_64__


24 #i‡
__WORDSIZE
 == 64

25 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

26 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

27 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

28 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

29 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

30 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

31 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

32 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

33 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

35 
	#__SIZEOF_PTHREAD_ATTR_T
 32

	)

36 
	#__SIZEOF_PTHREAD_MUTEX_T
 32

	)

37 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

38 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

39 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

40 
	#__SIZEOF_PTHREAD_RWLOCK_T
 44

	)

41 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

42 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

43 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

46 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

47 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

48 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

49 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

50 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

51 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

52 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

53 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

54 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

60 
	t±hªad_t
;

63 
	u±hªad_©å_t


65 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

66 
	m__Æign
;

68 #i‚de‡
__have_±hªad_©å_t


69 
±hªad_©å_t
 
	t±hªad_©å_t
;

70 
	#__have_±hªad_©å_t
 1

	)

74 #ifde‡
__x86_64__


75 
	s__±hªad_öã∫Æ_li°


77 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

78 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

79 } 
	t__±hªad_li°_t
;

81 
	s__±hªad_öã∫Æ_¶i°


83 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

84 } 
	t__±hªad_¶i°_t
;

92 
	s__±hªad_muãx_s


94 
	m__lock
;

95 
	m__cou¡
;

96 
	m__ow√r
;

97 #ifde‡
__x86_64__


98 
	m__nu£rs
;

102 
	m__köd
;

103 #ifde‡
__x86_64__


104 
	m__•ös
;

105 
	m__ñisi⁄
;

106 
__±hªad_li°_t
 
	m__li°
;

107 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

108 
	#__PTHREAD_MUTEX_HAVE_ELISION
 1

	)

110 
	m__nu£rs
;

111 
__exãnsi⁄__
 union

115 
	m__e•ös
;

116 
	m__ñisi⁄
;

117 
	#__•ös
 
d
.
__e•ös


	)

118 
	#__ñisi⁄
 
d
.
__ñisi⁄


	)

119 
	#__PTHREAD_MUTEX_HAVE_ELISION
 2

	)

120 } 
	md
;

121 
__±hªad_¶i°_t
 
	m__li°
;

124 } 
	m__d©a
;

125 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

126 
	m__Æign
;

127 } 
	t±hªad_muãx_t
;

131 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

132 
	m__Æign
;

133 } 
	t±hªad_muãx©å_t
;

142 
	m__lock
;

143 
	m__fuãx
;

144 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

145 
__exãnsi⁄__
 
	m__wakeup_£q
;

146 
__exãnsi⁄__
 
	m__wokí_£q
;

147 *
	m__muãx
;

148 
	m__nwaôîs
;

149 
	m__brﬂdˇ°_£q
;

150 } 
	m__d©a
;

151 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

152 
__exãnsi⁄__
 
	m__Æign
;

153 } 
	t±hªad_c⁄d_t
;

157 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

158 
	m__Æign
;

159 } 
	t±hªad_c⁄d©å_t
;

163 
	t±hªad_key_t
;

167 
	t±hªad_⁄˚_t
;

170 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


175 #ifde‡
__x86_64__


178 
	m__lock
;

179 
	m__ƒ_ªadîs
;

180 
	m__ªadîs_wakeup
;

181 
	m__wrôî_wakeup
;

182 
	m__ƒ_ªadîs_queued
;

183 
	m__ƒ_wrôîs_queued
;

184 
	m__wrôî
;

185 
	m__sh¨ed
;

186 
	m__∑d1
;

187 
	m__∑d2
;

190 
	m__Êags
;

191 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

192 } 
	m__d©a
;

196 
	m__lock
;

197 
	m__ƒ_ªadîs
;

198 
	m__ªadîs_wakeup
;

199 
	m__wrôî_wakeup
;

200 
	m__ƒ_ªadîs_queued
;

201 
	m__ƒ_wrôîs_queued
;

204 
	m__Êags
;

205 
	m__sh¨ed
;

206 
	m__∑d1
;

207 
	m__∑d2
;

208 
	m__wrôî
;

209 } 
	m__d©a
;

211 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

212 
	m__Æign
;

213 } 
	t±hªad_rwlock_t
;

217 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

218 
	m__Æign
;

219 } 
	t±hªad_rwlock©å_t
;

223 #ifde‡
__USE_XOPEN2K


225 vﬁ©ûê
	t±hªad_•ölock_t
;

232 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

233 
	m__Æign
;

234 } 
	t±hªad_b¨rõr_t
;

238 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

239 
	m__Æign
;

240 } 
	t±hªad_b¨rõøâr_t
;

244 #i‚de‡
__x86_64__


246 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/select.h

18 #i‚de‡
_SYS_SELECT_H


22 
	~<bôs/w‹dsize.h
>

25 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

27 #i‡
__WORDSIZE
 == 64

28 
	#__FD_ZERO_STOS
 "°osq"

	)

30 
	#__FD_ZERO_STOS
 "°o¶"

	)

33 
	#__FD_ZERO
(
fd•
) \

35 
__d0
, 
__d1
; \

36 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

37 : "=c" (
__d0
), "=D" (
__d1
) \

38 : "a" (0), "0" ( (
fd_£t
) \

39 /  (
__fd_mask
)), \

40 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

42 } 0)

	)

48 
	#__FD_ZERO
(
£t
) \

50 
__i
; \

51 
fd_£t
 *
__¨r
 = (
£t
); \

52 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

53 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

54 } 0)

	)

58 
	#__FD_SET
(
d
, 
£t
) \

59 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] |
	`__FD_MASK
 (d)))

	)

60 
	#__FD_CLR
(
d
, 
£t
) \

61 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] &~
	`__FD_MASK
 (d)))

	)

62 
	#__FD_ISSET
(
d
, 
£t
) \

63 ((
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] & 
	`__FD_MASK
 (d)Ë!0)

	)

	@/usr/include/bits/select2.h

19 #i‚de‡
_SYS_SELECT_H


24 
__fdñt_chk
 (
__d
);

25 
	$__fdñt_w¨n
 (
__d
)

26 
	`__w¨«âr
 ("bit outside of fd_set selected");

27 #unde‡
__FD_ELT


28 
	#__FD_ELT
(
d
) \

29 
__exãnsi⁄__
 \

30 ({ 
__d
 = (
d
); \

31 (
	`__buûtö_c⁄°™t_p
 (
__d
) \

32 ? (0 <
__d
 && __d < 
__FD_SETSIZE
 \

33 ? (
__d
 / 
__NFDBITS
) \

34 : 
	`__fdñt_w¨n
 (
__d
)) \

35 : 
	`__fdñt_chk
 (
__d
)); 
	}
})

	)

	@/usr/include/bits/semaphore.h

19 #i‚de‡
_SEMAPHORE_H


23 
	~<bôs/w‹dsize.h
>

25 #i‡
__WORDSIZE
 == 64

26 
	#__SIZEOF_SEM_T
 32

	)

28 
	#__SIZEOF_SEM_T
 16

	)

33 
	#SEM_FAILED
 ((
£m_t
 *Ë0)

	)

38 
	m__size
[
__SIZEOF_SEM_T
];

39 
	m__Æign
;

40 } 
	t£m_t
;

	@/usr/include/bits/setjmp.h

19 #i‚de‡
_BITS_SETJMP_H


20 
	#_BITS_SETJMP_H
 1

	)

22 #i‡!
deföed
 
_SETJMP_H
 && !deföed 
_PTHREAD_H


26 
	~<bôs/w‹dsize.h
>

28 #i‚de‡
_ASM


30 #i‡
__WORDSIZE
 == 64

31 
	t__jmp_buf
[8];

32 #ñi‡
deföed
 
__x86_64__


33 
__exãnsi⁄__
 
	t__jmp_buf
[8];

35 
	t__jmp_buf
[6];

	@/usr/include/bits/sigaction.h

19 #i‚de‡
_SIGNAL_H


24 
	ssiga˘i⁄


27 #ifde‡
__USE_POSIX199309


31 
__sigh™dÀr_t
 
	mß_h™dÀr
;

33 (*
	mß_siga˘i⁄
Ë(, 
	msigöfo_t
 *, *);

35 
	m__siga˘i⁄_h™dÀr
;

36 
	#ß_h™dÀr
 
__siga˘i⁄_h™dÀr
.
ß_h™dÀr


	)

37 
	#ß_siga˘i⁄
 
__siga˘i⁄_h™dÀr
.
ß_siga˘i⁄


	)

39 
__sigh™dÀr_t
 
	mß_h™dÀr
;

43 
__sig£t_t
 
	mß_mask
;

46 
	mß_Êags
;

49 (*
	mß_ª°‹î
) ();

53 
	#SA_NOCLDSTOP
 1

	)

54 
	#SA_NOCLDWAIT
 2

	)

55 
	#SA_SIGINFO
 4

	)

57 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC


58 
	#SA_ONSTACK
 0x08000000

	)

60 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


61 
	#SA_RESTART
 0x10000000

	)

62 
	#SA_NODEFER
 0x40000000

	)

64 
	#SA_RESETHAND
 0x80000000

	)

66 #ifde‡
__USE_MISC


67 
	#SA_INTERRUPT
 0x20000000

	)

70 
	#SA_NOMASK
 
SA_NODEFER


	)

71 
	#SA_ONESHOT
 
SA_RESETHAND


	)

72 
	#SA_STACK
 
SA_ONSTACK


	)

76 
	#SIG_BLOCK
 0

	)

77 
	#SIG_UNBLOCK
 1

	)

78 
	#SIG_SETMASK
 2

	)

	@/usr/include/bits/sigcontext.h

18 #i‚de‡
_BITS_SIGCONTEXT_H


19 
	#_BITS_SIGCONTEXT_H
 1

	)

21 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


25 
	#FP_XSTATE_MAGIC1
 0x46505853U

	)

26 
	#FP_XSTATE_MAGIC2
 0x46505845U

	)

27 
	#FP_XSTATE_MAGIC2_SIZE
 (
FP_XSTATE_MAGIC2
)

	)

29 
	s_Âx_sw_byãs


31 
__uöt32_t
 
	mmagic1
;

32 
__uöt32_t
 
	mexãnded_size
;

33 
__uöt64_t
 
	mx°©e_bv
;

34 
__uöt32_t
 
	mx°©e_size
;

35 
__uöt32_t
 
	m∑ddög
[7];

38 
	s_Âªg


40 
	msignifiˇnd
[4];

41 
	mexp⁄ít
;

44 
	s_Âxªg


46 
	msignifiˇnd
[4];

47 
	mexp⁄ít
;

48 
	m∑ddög
[3];

51 
	s_xmmªg


53 
__uöt32_t
 
	mñemít
[4];

58 #i‚de‡
__x86_64__


60 
	s_Â°©e


63 
__uöt32_t
 
	mcw
;

64 
__uöt32_t
 
	msw
;

65 
__uöt32_t
 
	mèg
;

66 
__uöt32_t
 
	mùoff
;

67 
__uöt32_t
 
	mcs£l
;

68 
__uöt32_t
 
	md©aoff
;

69 
__uöt32_t
 
	md©a£l
;

70 
_Âªg
 
	m_°
[8];

71 
	m°©us
;

72 
	mmagic
;

75 
__uöt32_t
 
	m_fx§_ív
[6];

76 
__uöt32_t
 
	mmxc§
;

77 
__uöt32_t
 
	mª£rved
;

78 
_Âxªg
 
	m_fx§_°
[8];

79 
_xmmªg
 
	m_xmm
[8];

80 
__uöt32_t
 
	m∑ddög
[56];

83 #i‚de‡
sigc⁄ãxt_°ru˘


88 
	#sigc⁄ãxt_°ru˘
 
sigc⁄ãxt


	)

91 
	#X86_FXSR_MAGIC
 0x0000

	)

93 
	ssigc⁄ãxt


95 
	mgs
, 
	m__gsh
;

96 
	mfs
, 
	m__fsh
;

97 
	mes
, 
	m__esh
;

98 
	mds
, 
	m__dsh
;

99 
	medi
;

100 
	mesi
;

101 
	mebp
;

102 
	me•
;

103 
	mebx
;

104 
	medx
;

105 
	mecx
;

106 
	móx
;

107 
	må≠no
;

108 
	mîr
;

109 
	meù
;

110 
	mcs
, 
	m__csh
;

111 
	meÊags
;

112 
	me•_©_sig«l
;

113 
	mss
, 
	m__ssh
;

114 
_Â°©e
 * 
	mÂ°©e
;

115 
	mﬁdmask
;

116 
	m¸2
;

121 
	s_Â°©e


124 
__uöt16_t
 
	mcwd
;

125 
__uöt16_t
 
	mswd
;

126 
__uöt16_t
 
	m·w
;

127 
__uöt16_t
 
	mf›
;

128 
__uöt64_t
 
	mrù
;

129 
__uöt64_t
 
	mrdp
;

130 
__uöt32_t
 
	mmxc§
;

131 
__uöt32_t
 
	mmx¸_mask
;

132 
_Âxªg
 
	m_°
[8];

133 
_xmmªg
 
	m_xmm
[16];

134 
__uöt32_t
 
	m∑ddög
[24];

137 
	ssigc⁄ãxt


139 
__uöt64_t
 
	mr8
;

140 
__uöt64_t
 
	mr9
;

141 
__uöt64_t
 
	mr10
;

142 
__uöt64_t
 
	mr11
;

143 
__uöt64_t
 
	mr12
;

144 
__uöt64_t
 
	mr13
;

145 
__uöt64_t
 
	mr14
;

146 
__uöt64_t
 
	mr15
;

147 
__uöt64_t
 
	mrdi
;

148 
__uöt64_t
 
	mrsi
;

149 
__uöt64_t
 
	mrbp
;

150 
__uöt64_t
 
	mrbx
;

151 
__uöt64_t
 
	mrdx
;

152 
__uöt64_t
 
	møx
;

153 
__uöt64_t
 
	mrcx
;

154 
__uöt64_t
 
	mr•
;

155 
__uöt64_t
 
	mrù
;

156 
__uöt64_t
 
	meÊags
;

157 
	mcs
;

158 
	mgs
;

159 
	mfs
;

160 
	m__∑d0
;

161 
__uöt64_t
 
	mîr
;

162 
__uöt64_t
 
	må≠no
;

163 
__uöt64_t
 
	mﬁdmask
;

164 
__uöt64_t
 
	m¸2
;

165 
__exãnsi⁄__
 union

167 
_Â°©e
 * 
	mÂ°©e
;

168 
__uöt64_t
 
	m__Â°©e_w‹d
;

170 
__uöt64_t
 
	m__ª£rved1
 [8];

175 
	s_xßve_hdr


177 
__uöt64_t
 
	mx°©e_bv
;

178 
__uöt64_t
 
	mª£rved1
[2];

179 
__uöt64_t
 
	mª£rved2
[5];

182 
	s_ymmh_°©e


184 
__uöt32_t
 
	mymmh_•a˚
[64];

187 
	s_x°©e


189 
_Â°©e
 
	mÂ°©e
;

190 
_xßve_hdr
 
	mx°©e_hdr
;

191 
_ymmh_°©e
 
	mymmh
;

	@/usr/include/bits/siginfo.h

19 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
__√ed_sigöfo_t
 \

20 && !
deföed
 
	g__√ed_sigevít_t


24 
	~<bôs/w‹dsize.h
>

26 #i‡(!
deföed
 
__have_sigvÆ_t
 \

27 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
 \

28 || 
deföed
 
	g__√ed_sigevít_t
))

29 
	#__have_sigvÆ_t
 1

	)

32 
	usigvÆ


34 
	msivÆ_öt
;

35 *
	msivÆ_±r
;

36 } 
	tsigvÆ_t
;

39 #i‡(!
deföed
 
__have_sigöfo_t
 \

40 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
))

41 
	#__have_sigöfo_t
 1

	)

43 
	#__SI_MAX_SIZE
 128

	)

44 #i‡
__WORDSIZE
 == 64

45 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 4)

	)

47 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 3)

	)

50 #i‡
deföed
 
__x86_64__
 && 
__WORDSIZE
 == 32

55 
__˛ock_t
 
	t__©åibuã__
 ((
	t__Æig√d__
 (4))Ë
	t__sigchld_˛ock_t
;

56 
	#__SI_ALIGNMENT
 
	`__©åibuã__
 ((
	`__Æig√d__
 (8)))

	)

58 
__˛ock_t
 
	t__sigchld_˛ock_t
;

59 
	#__SI_ALIGNMENT


	)

64 
si_signo
;

65 
si_î∫o
;

67 
si_code
;

71 
_∑d
[
__SI_PAD_SIZE
];

76 
__pid_t
 
si_pid
;

77 
__uid_t
 
si_uid
;

78 } 
_kûl
;

83 
si_tid
;

84 
si_ovîrun
;

85 
sigvÆ_t
 
si_sigvÆ
;

86 } 
_timî
;

91 
__pid_t
 
si_pid
;

92 
__uid_t
 
si_uid
;

93 
sigvÆ_t
 
si_sigvÆ
;

94 } 
_π
;

99 
__pid_t
 
si_pid
;

100 
__uid_t
 
si_uid
;

101 
si_°©us
;

102 
__sigchld_˛ock_t
 
si_utime
;

103 
__sigchld_˛ock_t
 
si_°ime
;

104 } 
_sigchld
;

109 *
si_addr
;

110 
si_addr_lsb
;

111 } 
_sigÁu…
;

116 
si_b™d
;

117 
si_fd
;

118 } 
_sigpﬁl
;

123 *
_ˇŒ_addr
;

124 
_sysˇŒ
;

125 
_¨ch
;

126 } 
_sigsys
;

127 } 
_sifõlds
;

128 } 
	tsigöfo_t
 
	t__SI_ALIGNMENT
;

132 
	#si_pid
 
_sifõlds
.
_kûl
.
si_pid


	)

133 
	#si_uid
 
_sifõlds
.
_kûl
.
si_uid


	)

134 
	#si_timîid
 
_sifõlds
.
_timî
.
si_tid


	)

135 
	#si_ovîrun
 
_sifõlds
.
_timî
.
si_ovîrun


	)

136 
	#si_°©us
 
_sifõlds
.
_sigchld
.
si_°©us


	)

137 
	#si_utime
 
_sifõlds
.
_sigchld
.
si_utime


	)

138 
	#si_°ime
 
_sifõlds
.
_sigchld
.
si_°ime


	)

139 
	#si_vÆue
 
_sifõlds
.
_π
.
si_sigvÆ


	)

140 
	#si_öt
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_öt


	)

141 
	#si_±r
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_±r


	)

142 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
si_addr


	)

143 
	#si_addr_lsb
 
_sifõlds
.
_sigÁu…
.
si_addr_lsb


	)

144 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
si_b™d


	)

145 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
si_fd


	)

146 
	#si_ˇŒ_addr
 
_sifõlds
.
_sigsys
.
_ˇŒ_addr


	)

147 
	#si_sysˇŒ
 
_sifõlds
.
_sigsys
.
_sysˇŒ


	)

148 
	#si_¨ch
 
_sifõlds
.
_sigsys
.
_¨ch


	)

155 
SI_ASYNCNL
 = -60,

156 
	#SI_ASYNCNL
 
SI_ASYNCNL


	)

157 
SI_TKILL
 = -6,

158 
	#SI_TKILL
 
SI_TKILL


	)

159 
SI_SIGIO
,

160 
	#SI_SIGIO
 
SI_SIGIO


	)

161 
SI_ASYNCIO
,

162 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

163 
SI_MESGQ
,

164 
	#SI_MESGQ
 
SI_MESGQ


	)

165 
SI_TIMER
,

166 
	#SI_TIMER
 
SI_TIMER


	)

167 
SI_QUEUE
,

168 
	#SI_QUEUE
 
SI_QUEUE


	)

169 
SI_USER
,

170 
	#SI_USER
 
SI_USER


	)

171 
SI_KERNEL
 = 0x80

172 
	#SI_KERNEL
 
SI_KERNEL


	)

179 
ILL_ILLOPC
 = 1,

180 
	#ILL_ILLOPC
 
ILL_ILLOPC


	)

181 
ILL_ILLOPN
,

182 
	#ILL_ILLOPN
 
ILL_ILLOPN


	)

183 
ILL_ILLADR
,

184 
	#ILL_ILLADR
 
ILL_ILLADR


	)

185 
ILL_ILLTRP
,

186 
	#ILL_ILLTRP
 
ILL_ILLTRP


	)

187 
ILL_PRVOPC
,

188 
	#ILL_PRVOPC
 
ILL_PRVOPC


	)

189 
ILL_PRVREG
,

190 
	#ILL_PRVREG
 
ILL_PRVREG


	)

191 
ILL_COPROC
,

192 
	#ILL_COPROC
 
ILL_COPROC


	)

193 
ILL_BADSTK


194 
	#ILL_BADSTK
 
ILL_BADSTK


	)

200 
FPE_INTDIV
 = 1,

201 
	#FPE_INTDIV
 
FPE_INTDIV


	)

202 
FPE_INTOVF
,

203 
	#FPE_INTOVF
 
FPE_INTOVF


	)

204 
FPE_FLTDIV
,

205 
	#FPE_FLTDIV
 
FPE_FLTDIV


	)

206 
FPE_FLTOVF
,

207 
	#FPE_FLTOVF
 
FPE_FLTOVF


	)

208 
FPE_FLTUND
,

209 
	#FPE_FLTUND
 
FPE_FLTUND


	)

210 
FPE_FLTRES
,

211 
	#FPE_FLTRES
 
FPE_FLTRES


	)

212 
FPE_FLTINV
,

213 
	#FPE_FLTINV
 
FPE_FLTINV


	)

214 
FPE_FLTSUB


215 
	#FPE_FLTSUB
 
FPE_FLTSUB


	)

221 
SEGV_MAPERR
 = 1,

222 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

223 
SEGV_ACCERR


224 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

230 
BUS_ADRALN
 = 1,

231 
	#BUS_ADRALN
 
BUS_ADRALN


	)

232 
BUS_ADRERR
,

233 
	#BUS_ADRERR
 
BUS_ADRERR


	)

234 
BUS_OBJERR
,

235 
	#BUS_OBJERR
 
BUS_OBJERR


	)

236 
BUS_MCEERR_AR
,

237 
	#BUS_MCEERR_AR
 
BUS_MCEERR_AR


	)

238 
BUS_MCEERR_AO


239 
	#BUS_MCEERR_AO
 
BUS_MCEERR_AO


	)

245 
TRAP_BRKPT
 = 1,

246 
	#TRAP_BRKPT
 
TRAP_BRKPT


	)

247 
TRAP_TRACE


248 
	#TRAP_TRACE
 
TRAP_TRACE


	)

254 
CLD_EXITED
 = 1,

255 
	#CLD_EXITED
 
CLD_EXITED


	)

256 
CLD_KILLED
,

257 
	#CLD_KILLED
 
CLD_KILLED


	)

258 
CLD_DUMPED
,

259 
	#CLD_DUMPED
 
CLD_DUMPED


	)

260 
CLD_TRAPPED
,

261 
	#CLD_TRAPPED
 
CLD_TRAPPED


	)

262 
CLD_STOPPED
,

263 
	#CLD_STOPPED
 
CLD_STOPPED


	)

264 
CLD_CONTINUED


265 
	#CLD_CONTINUED
 
CLD_CONTINUED


	)

271 
POLL_IN
 = 1,

272 
	#POLL_IN
 
POLL_IN


	)

273 
POLL_OUT
,

274 
	#POLL_OUT
 
POLL_OUT


	)

275 
POLL_MSG
,

276 
	#POLL_MSG
 
POLL_MSG


	)

277 
POLL_ERR
,

278 
	#POLL_ERR
 
POLL_ERR


	)

279 
POLL_PRI
,

280 
	#POLL_PRI
 
POLL_PRI


	)

281 
POLL_HUP


282 
	#POLL_HUP
 
POLL_HUP


	)

285 #unde‡
__√ed_sigöfo_t


289 #i‡(
deföed
 
_SIGNAL_H
 || deföed 
__√ed_sigevít_t
) \

290 && !
deföed
 
__have_sigevít_t


291 
	#__have_sigevít_t
 1

	)

294 
	#__SIGEV_MAX_SIZE
 64

	)

295 #i‡
__WORDSIZE
 == 64

296 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 4)

	)

298 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 3)

	)

302 #i‚de‡
__have_±hªad_©å_t


303 
±hªad_©å_t
 
	t±hªad_©å_t
;

304 
	#__have_±hªad_©å_t
 1

	)

307 
	ssigevít


309 
sigvÆ_t
 
sigev_vÆue
;

310 
sigev_signo
;

311 
sigev_nŸify
;

315 
_∑d
[
__SIGEV_PAD_SIZE
];

319 
__pid_t
 
_tid
;

323 (*
_fun˘i⁄
Ë(
sigvÆ_t
);

324 
±hªad_©å_t
 *
_©åibuã
;

325 } 
_sigev_thªad
;

326 } 
_sigev_un
;

327 } 
	tsigevít_t
;

330 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

331 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

336 
SIGEV_SIGNAL
 = 0,

337 
	#SIGEV_SIGNAL
 
SIGEV_SIGNAL


	)

338 
SIGEV_NONE
,

339 
	#SIGEV_NONE
 
SIGEV_NONE


	)

340 
SIGEV_THREAD
,

341 
	#SIGEV_THREAD
 
SIGEV_THREAD


	)

343 
SIGEV_THREAD_ID
 = 4

344 
	#SIGEV_THREAD_ID
 
SIGEV_THREAD_ID


	)

	@/usr/include/bits/signum.h

19 #ifdef 
_SIGNAL_H


22 
	#SIG_ERR
 ((
__sigh™dÀr_t
Ë-1Ë

	)

23 
	#SIG_DFL
 ((
__sigh™dÀr_t
Ë0Ë

	)

24 
	#SIG_IGN
 ((
__sigh™dÀr_t
Ë1Ë

	)

26 #ifde‡
__USE_UNIX98


27 
	#SIG_HOLD
 ((
__sigh™dÀr_t
Ë2Ë

	)

32 
	#SIGHUP
 1

	)

33 
	#SIGINT
 2

	)

34 
	#SIGQUIT
 3

	)

35 
	#SIGILL
 4

	)

36 
	#SIGTRAP
 5

	)

37 
	#SIGABRT
 6

	)

38 
	#SIGIOT
 6

	)

39 
	#SIGBUS
 7

	)

40 
	#SIGFPE
 8

	)

41 
	#SIGKILL
 9

	)

42 
	#SIGUSR1
 10

	)

43 
	#SIGSEGV
 11

	)

44 
	#SIGUSR2
 12

	)

45 
	#SIGPIPE
 13

	)

46 
	#SIGALRM
 14

	)

47 
	#SIGTERM
 15

	)

48 
	#SIGSTKFLT
 16

	)

49 
	#SIGCLD
 
SIGCHLD


	)

50 
	#SIGCHLD
 17

	)

51 
	#SIGCONT
 18

	)

52 
	#SIGSTOP
 19

	)

53 
	#SIGTSTP
 20

	)

54 
	#SIGTTIN
 21

	)

55 
	#SIGTTOU
 22

	)

56 
	#SIGURG
 23

	)

57 
	#SIGXCPU
 24

	)

58 
	#SIGXFSZ
 25

	)

59 
	#SIGVTALRM
 26

	)

60 
	#SIGPROF
 27

	)

61 
	#SIGWINCH
 28

	)

62 
	#SIGPOLL
 
SIGIO


	)

63 
	#SIGIO
 29

	)

64 
	#SIGPWR
 30

	)

65 
	#SIGSYS
 31

	)

66 
	#SIGUNUSED
 31

	)

68 
	#_NSIG
 65

	)

71 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

72 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

76 
	#__SIGRTMIN
 32

	)

77 
	#__SIGRTMAX
 (
_NSIG
 - 1)

	)

	@/usr/include/bits/sigset.h

19 #i‚def 
_SIGSET_H_ty≥s


20 
	#_SIGSET_H_ty≥s
 1

	)

22 
	t__sig_©omic_t
;

26 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

29 
	m__vÆ
[
_SIGSET_NWORDS
];

30 } 
	t__sig£t_t
;

41 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


42 
	#_SIGSET_H_‚s
 1

	)

44 #i‚de‡
_EXTERN_INLINE


45 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

49 
	#__sigmask
(
sig
) \

50 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

53 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

55 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

56 
	#__sigem±y£t
(
£t
) \

57 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

58 
sig£t_t
 *
__£t
 = (
£t
); \

59 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

60 0; }))

	)

61 
	#__sigfûl£t
(
£t
) \

62 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

63 
sig£t_t
 *
__£t
 = (
£t
); \

64 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

65 0; }))

	)

67 #ifde‡
__USE_GNU


71 
	#__sigi£m±y£t
(
£t
) \

72 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

73 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

74 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

75 !
__ªt
 && --
__˙t
 >= 0) \

76 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

77 
__ªt
 =0; }))

	)

78 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

79 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

80 
sig£t_t
 *
__de°
 = (
de°
); \

81 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

82 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

83 --
__˙t
 >= 0) \

84 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

85 & 
__right
->
__vÆ
[
__˙t
]); \

86 0; }))

	)

87 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

88 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

89 
sig£t_t
 *
__de°
 = (
de°
); \

90 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

91 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

92 --
__˙t
 >= 0) \

93 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

94 | 
__right
->
__vÆ
[
__˙t
]); \

95 0; }))

	)

102 
__sigismembî
 (c⁄° 
__sig£t_t
 *, );

103 
__sigadd£t
 (
__sig£t_t
 *, );

104 
__sigdñ£t
 (
__sig£t_t
 *, );

106 #ifde‡
__USE_EXTERN_INLINES


107 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

108 
_EXTERN_INLINE
 \

109 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

111 
__mask
 = 
	`__sigmask
 (
__sig
); \

112 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

113  
BODY
; \

114 }

	)

116 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
) ? 1 : 0, const)

117 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

118 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

120 #unde‡
__SIGSETFN


	@/usr/include/bits/sigstack.h

19 #i‚de‡
_SIGNAL_H


25 
	ssig°ack


27 *
	mss_•
;

28 
	mss_⁄°ack
;

35 
	mSS_ONSTACK
 = 1,

36 
	#SS_ONSTACK
 
SS_ONSTACK


	)

37 
	mSS_DISABLE


38 
	#SS_DISABLE
 
SS_DISABLE


	)

42 
	#MINSIGSTKSZ
 2048

	)

45 
	#SIGSTKSZ
 8192

	)

49 
	ssigÆt°ack


51 *
	mss_•
;

52 
	mss_Êags
;

53 
size_t
 
	mss_size
;

54 } 
	t°ack_t
;

	@/usr/include/bits/sigthread.h

19 #i‚de‡
_BITS_SIGTHREAD_H


20 
	#_BITS_SIGTHREAD_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_PTHREAD_H


30 
	$±hªad_sigmask
 (
__how
,

31 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__√wmask
,

32 
__sig£t_t
 *
__ª°ri˘
 
__ﬁdmask
)
__THROW
;

35 
	$±hªad_kûl
 (
±hªad_t
 
__thªadid
, 
__signo
Ë
__THROW
;

37 #ifde‡
__USE_GNU


39 
	$±hªad_sigqueue
 (
±hªad_t
 
__thªadid
, 
__signo
,

40 c⁄° 
sigvÆ
 
__vÆue
Ë
__THROW
;

	@/usr/include/bits/socket.h

19 #i‚de‡
__BITS_SOCKET_H


20 
	#__BITS_SOCKET_H


	)

22 #i‚de‡
_SYS_SOCKET_H


26 
	#__√ed_size_t


	)

27 
	~<°ddef.h
>

29 
	~<sys/ty≥s.h
>

32 #i‚de‡
__sockÀn_t_deföed


33 
__sockÀn_t
 
	tsockÀn_t
;

34 
	#__sockÀn_t_deföed


	)

38 
	~<bôs/sockë_ty≥.h
>

41 
	#PF_UNSPEC
 0

	)

42 
	#PF_LOCAL
 1

	)

43 
	#PF_UNIX
 
PF_LOCAL


	)

44 
	#PF_FILE
 
PF_LOCAL


	)

45 
	#PF_INET
 2

	)

46 
	#PF_AX25
 3

	)

47 
	#PF_IPX
 4

	)

48 
	#PF_APPLETALK
 5

	)

49 
	#PF_NETROM
 6

	)

50 
	#PF_BRIDGE
 7

	)

51 
	#PF_ATMPVC
 8

	)

52 
	#PF_X25
 9

	)

53 
	#PF_INET6
 10

	)

54 
	#PF_ROSE
 11

	)

55 
	#PF_DEC√t
 12

	)

56 
	#PF_NETBEUI
 13

	)

57 
	#PF_SECURITY
 14

	)

58 
	#PF_KEY
 15

	)

59 
	#PF_NETLINK
 16

	)

60 
	#PF_ROUTE
 
PF_NETLINK


	)

61 
	#PF_PACKET
 17

	)

62 
	#PF_ASH
 18

	)

63 
	#PF_ECONET
 19

	)

64 
	#PF_ATMSVC
 20

	)

65 
	#PF_RDS
 21

	)

66 
	#PF_SNA
 22

	)

67 
	#PF_IRDA
 23

	)

68 
	#PF_PPPOX
 24

	)

69 
	#PF_WANPIPE
 25

	)

70 
	#PF_LLC
 26

	)

71 
	#PF_CAN
 29

	)

72 
	#PF_TIPC
 30

	)

73 
	#PF_BLUETOOTH
 31

	)

74 
	#PF_IUCV
 32

	)

75 
	#PF_RXRPC
 33

	)

76 
	#PF_ISDN
 34

	)

77 
	#PF_PHONET
 35

	)

78 
	#PF_IEEE802154
 36

	)

79 
	#PF_CAIF
 37

	)

80 
	#PF_ALG
 38

	)

81 
	#PF_NFC
 39

	)

82 
	#PF_VSOCK
 40

	)

83 
	#PF_MAX
 41

	)

86 
	#AF_UNSPEC
 
PF_UNSPEC


	)

87 
	#AF_LOCAL
 
PF_LOCAL


	)

88 
	#AF_UNIX
 
PF_UNIX


	)

89 
	#AF_FILE
 
PF_FILE


	)

90 
	#AF_INET
 
PF_INET


	)

91 
	#AF_AX25
 
PF_AX25


	)

92 
	#AF_IPX
 
PF_IPX


	)

93 
	#AF_APPLETALK
 
PF_APPLETALK


	)

94 
	#AF_NETROM
 
PF_NETROM


	)

95 
	#AF_BRIDGE
 
PF_BRIDGE


	)

96 
	#AF_ATMPVC
 
PF_ATMPVC


	)

97 
	#AF_X25
 
PF_X25


	)

98 
	#AF_INET6
 
PF_INET6


	)

99 
	#AF_ROSE
 
PF_ROSE


	)

100 
	#AF_DEC√t
 
PF_DEC√t


	)

101 
	#AF_NETBEUI
 
PF_NETBEUI


	)

102 
	#AF_SECURITY
 
PF_SECURITY


	)

103 
	#AF_KEY
 
PF_KEY


	)

104 
	#AF_NETLINK
 
PF_NETLINK


	)

105 
	#AF_ROUTE
 
PF_ROUTE


	)

106 
	#AF_PACKET
 
PF_PACKET


	)

107 
	#AF_ASH
 
PF_ASH


	)

108 
	#AF_ECONET
 
PF_ECONET


	)

109 
	#AF_ATMSVC
 
PF_ATMSVC


	)

110 
	#AF_RDS
 
PF_RDS


	)

111 
	#AF_SNA
 
PF_SNA


	)

112 
	#AF_IRDA
 
PF_IRDA


	)

113 
	#AF_PPPOX
 
PF_PPPOX


	)

114 
	#AF_WANPIPE
 
PF_WANPIPE


	)

115 
	#AF_LLC
 
PF_LLC


	)

116 
	#AF_CAN
 
PF_CAN


	)

117 
	#AF_TIPC
 
PF_TIPC


	)

118 
	#AF_BLUETOOTH
 
PF_BLUETOOTH


	)

119 
	#AF_IUCV
 
PF_IUCV


	)

120 
	#AF_RXRPC
 
PF_RXRPC


	)

121 
	#AF_ISDN
 
PF_ISDN


	)

122 
	#AF_PHONET
 
PF_PHONET


	)

123 
	#AF_IEEE802154
 
PF_IEEE802154


	)

124 
	#AF_CAIF
 
PF_CAIF


	)

125 
	#AF_ALG
 
PF_ALG


	)

126 
	#AF_NFC
 
PF_NFC


	)

127 
	#AF_VSOCK
 
PF_VSOCK


	)

128 
	#AF_MAX
 
PF_MAX


	)

134 
	#SOL_RAW
 255

	)

135 
	#SOL_DECNET
 261

	)

136 
	#SOL_X25
 262

	)

137 
	#SOL_PACKET
 263

	)

138 
	#SOL_ATM
 264

	)

139 
	#SOL_AAL
 265

	)

140 
	#SOL_IRDA
 266

	)

143 
	#SOMAXCONN
 128

	)

146 
	~<bôs/sockaddr.h
>

149 
	ssockaddr


151 
__SOCKADDR_COMMON
 (
ß_
);

152 
	mß_d©a
[14];

158 
	#__ss_Æig¡y≥
 

	)

159 
	#_SS_SIZE
 128

	)

160 
	#_SS_PADSIZE
 (
_SS_SIZE
 - (2 *  (
__ss_Æig¡y≥
)))

	)

162 
	ssockaddr_°‹age


164 
__SOCKADDR_COMMON
 (
ss_
);

165 
__ss_Æig¡y≥
 
	m__ss_Æign
;

166 
	m__ss_∑ddög
[
_SS_PADSIZE
];

173 
	mMSG_OOB
 = 0x01,

174 
	#MSG_OOB
 
MSG_OOB


	)

175 
	mMSG_PEEK
 = 0x02,

176 
	#MSG_PEEK
 
MSG_PEEK


	)

177 
	mMSG_DONTROUTE
 = 0x04,

178 
	#MSG_DONTROUTE
 
MSG_DONTROUTE


	)

179 #ifde‡
__USE_GNU


181 
	mMSG_TRYHARD
 = 
MSG_DONTROUTE
,

182 
	#MSG_TRYHARD
 
MSG_DONTROUTE


	)

184 
	mMSG_CTRUNC
 = 0x08,

185 
	#MSG_CTRUNC
 
MSG_CTRUNC


	)

186 
	mMSG_PROXY
 = 0x10,

187 
	#MSG_PROXY
 
MSG_PROXY


	)

188 
	mMSG_TRUNC
 = 0x20,

189 
	#MSG_TRUNC
 
MSG_TRUNC


	)

190 
	mMSG_DONTWAIT
 = 0x40,

191 
	#MSG_DONTWAIT
 
MSG_DONTWAIT


	)

192 
	mMSG_EOR
 = 0x80,

193 
	#MSG_EOR
 
MSG_EOR


	)

194 
	mMSG_WAITALL
 = 0x100,

195 
	#MSG_WAITALL
 
MSG_WAITALL


	)

196 
	mMSG_FIN
 = 0x200,

197 
	#MSG_FIN
 
MSG_FIN


	)

198 
	mMSG_SYN
 = 0x400,

199 
	#MSG_SYN
 
MSG_SYN


	)

200 
	mMSG_CONFIRM
 = 0x800,

201 
	#MSG_CONFIRM
 
MSG_CONFIRM


	)

202 
	mMSG_RST
 = 0x1000,

203 
	#MSG_RST
 
MSG_RST


	)

204 
	mMSG_ERRQUEUE
 = 0x2000,

205 
	#MSG_ERRQUEUE
 
MSG_ERRQUEUE


	)

206 
	mMSG_NOSIGNAL
 = 0x4000,

207 
	#MSG_NOSIGNAL
 
MSG_NOSIGNAL


	)

208 
	mMSG_MORE
 = 0x8000,

209 
	#MSG_MORE
 
MSG_MORE


	)

210 
	mMSG_WAITFORONE
 = 0x10000,

211 
	#MSG_WAITFORONE
 
MSG_WAITFORONE


	)

212 
	mMSG_FASTOPEN
 = 0x20000000,

213 
	#MSG_FASTOPEN
 
MSG_FASTOPEN


	)

215 
	mMSG_CMSG_CLOEXEC
 = 0x40000000

218 
	#MSG_CMSG_CLOEXEC
 
MSG_CMSG_CLOEXEC


	)

224 
	smsghdr


226 *
	mmsg_«me
;

227 
sockÀn_t
 
	mmsg_«mñí
;

229 
iovec
 *
	mmsg_iov
;

230 
size_t
 
	mmsg_iovÀn
;

232 *
	mmsg_c⁄åﬁ
;

233 
size_t
 
	mmsg_c⁄åﬁÀn
;

238 
	mmsg_Êags
;

242 
	scmsghdr


244 
size_t
 
	mcmsg_Àn
;

249 
	mcmsg_Àvñ
;

250 
	mcmsg_ty≥
;

251 #i‡(!
deföed
 
__STRICT_ANSI__
 && 
__GNUC__
 >2Ë|| 
__STDC_VERSION__
 >= 199901L

252 
__exãnsi⁄__
 
__cmsg_d©a
 
	m__Êex¨r
;

257 #i‡(!
deföed
 
__STRICT_ANSI__
 && 
__GNUC__
 >2Ë|| 
__STDC_VERSION__
 >= 199901L

258 
	#CMSG_DATA
(
cmsg
Ë((cmsg)->
__cmsg_d©a
)

	)

260 
	#CMSG_DATA
(
cmsg
Ë((*Ë((
cmsghdr
 *Ë(cmsgË+ 1))

	)

262 
	#CMSG_NXTHDR
(
mhdr
, 
cmsg
Ë
	`__cmsg_nxthdr
 (mhdr, cmsg)

	)

263 
	#CMSG_FIRSTHDR
(
mhdr
) \

264 ((
size_t
Ë(
mhdr
)->
msg_c⁄åﬁÀn
 > (
cmsghdr
) \

265 ? (
cmsghdr
 *Ë(
mhdr
)->
msg_c⁄åﬁ
 : (cmsghd∏*Ë0)

	)

266 
	#CMSG_ALIGN
(
Àn
Ë((÷íË+  (
size_t
) - 1) \

267 & (
size_t
Ë~( (size_tË- 1))

	)

268 
	#CMSG_SPACE
(
Àn
Ë(
	`CMSG_ALIGN
 (len) \

269 + 
	`CMSG_ALIGN
 ( (
cmsghdr
)))

	)

270 
	#CMSG_LEN
(
Àn
Ë(
	`CMSG_ALIGN
 ( (
cmsghdr
)Ë+ (Àn))

	)

272 
cmsghdr
 *
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
,

273 
cmsghdr
 *
__cmsg
Ë
__THROW
;

274 #ifde‡
__USE_EXTERN_INLINES


275 #i‚de‡
_EXTERN_INLINE


276 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

278 
_EXTERN_INLINE
 
cmsghdr
 *

279 
	`__NTH
 (
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
, 
cmsghdr
 *
__cmsg
))

281 i‡((
size_t
Ë
__cmsg
->
cmsg_Àn
 <  (
cmsghdr
))

283  (
cmsghdr
 *) 0;

285 
__cmsg
 = (
cmsghdr
 *) ((*) __cmsg

286 + 
	`CMSG_ALIGN
 (
__cmsg
->
cmsg_Àn
));

287 i‡((*Ë(
__cmsg
 + 1Ë> ((*Ë
__mhdr
->
msg_c⁄åﬁ


288 + 
__mhdr
->
msg_c⁄åﬁÀn
)

289 || ((*Ë
__cmsg
 + 
	`CMSG_ALIGN
 (__cmsg->
cmsg_Àn
)

290 > ((*Ë
__mhdr
->
msg_c⁄åﬁ
 + __mhdr->
msg_c⁄åﬁÀn
)))

292  (
cmsghdr
 *) 0;

293  
__cmsg
;

294 
	}
}

301 
	mSCM_RIGHTS
 = 0x01

302 
	#SCM_RIGHTS
 
SCM_RIGHTS


	)

303 #ifde‡
__USE_GNU


304 , 
	mSCM_CREDENTIALS
 = 0x02

305 
	#SCM_CREDENTIALS
 
SCM_CREDENTIALS


	)

309 #ifde‡
__USE_GNU


311 
	su¸ed


313 
pid_t
 
	mpid
;

314 
uid_t
 
	muid
;

315 
gid_t
 
	mgid
;

320 #i‡!
deföed
 
__USE_MISC
 && !deföed 
__USE_GNU


321 #i‚de‡
FIOGETOWN


322 
	#__SYS_SOCKET_H_undef_FIOGETOWN


	)

324 #i‚de‡
FIOSETOWN


325 
	#__SYS_SOCKET_H_undef_FIOSETOWN


	)

327 #i‚de‡
SIOCATMARK


328 
	#__SYS_SOCKET_H_undef_SIOCATMARK


	)

330 #i‚de‡
SIOCGPGRP


331 
	#__SYS_SOCKET_H_undef_SIOCGPGRP


	)

333 #i‚de‡
SIOCGSTAMP


334 
	#__SYS_SOCKET_H_undef_SIOCGSTAMP


	)

336 #i‚de‡
SIOCGSTAMPNS


337 
	#__SYS_SOCKET_H_undef_SIOCGSTAMPNS


	)

339 #i‚de‡
SIOCSPGRP


340 
	#__SYS_SOCKET_H_undef_SIOCSPGRP


	)

345 
	~<asm/sockë.h
>

347 #i‡!
deföed
 
__USE_MISC
 && !deföed 
__USE_GNU


348 #ifde‡
__SYS_SOCKET_H_undef_FIOGETOWN


349 #unde‡
__SYS_SOCKET_H_undef_FIOGETOWN


350 #unde‡
FIOGETOWN


352 #ifde‡
__SYS_SOCKET_H_undef_FIOSETOWN


353 #unde‡
__SYS_SOCKET_H_undef_FIOSETOWN


354 #unde‡
FIOSETOWN


356 #ifde‡
__SYS_SOCKET_H_undef_SIOCATMARK


357 #unde‡
__SYS_SOCKET_H_undef_SIOCATMARK


358 #unde‡
SIOCATMARK


360 #ifde‡
__SYS_SOCKET_H_undef_SIOCGPGRP


361 #unde‡
__SYS_SOCKET_H_undef_SIOCGPGRP


362 #unde‡
SIOCGPGRP


364 #ifde‡
__SYS_SOCKET_H_undef_SIOCGSTAMP


365 #unde‡
__SYS_SOCKET_H_undef_SIOCGSTAMP


366 #unde‡
SIOCGSTAMP


368 #ifde‡
__SYS_SOCKET_H_undef_SIOCGSTAMPNS


369 #unde‡
__SYS_SOCKET_H_undef_SIOCGSTAMPNS


370 #unde‡
SIOCGSTAMPNS


372 #ifde‡
__SYS_SOCKET_H_undef_SIOCSPGRP


373 #unde‡
__SYS_SOCKET_H_undef_SIOCSPGRP


374 #unde‡
SIOCSPGRP


379 
	slögî


381 
	ml_⁄off
;

382 
	ml_lögî
;

	@/usr/include/bits/socket2.h

19 #i‚de‡
_SYS_SOCKET_H


23 
ssize_t
 
__ªcv_chk
 (
__fd
, *
__buf
, 
size_t
 
__n
, size_à
__buÊí
,

24 
__Êags
);

25 
ssize_t
 
__REDIRECT
 (
__ªcv_Æüs
, (
__fd
, *
__buf
, 
size_t
 
__n
,

26 
__Êags
), 
ªcv
);

27 
ssize_t
 
__REDIRECT
 (
__ªcv_chk_w¨n
,

28 (
__fd
, *
__buf
, 
size_t
 
__n
, size_à
__buÊí
,

29 
__Êags
), 
__ªcv_chk
)

30 
__w¨«âr
 ("recv called with biggerÜengthÅhan size of destination "

33 
__f‹tify_fun˘i⁄
 
ssize_t


34 
	$ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
)

36 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

38 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

39  
	`__ªcv_chk
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
);

41 i‡(
__n
 > 
	`__bos0
 (
__buf
))

42  
	`__ªcv_chk_w¨n
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
);

44  
	`__ªcv_Æüs
 (
__fd
, 
__buf
, 
__n
, 
__Êags
);

45 
	}
}

47 
ssize_t
 
__ªcv‰om_chk
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

48 
size_t
 
__buÊí
, 
__Êags
,

49 
__SOCKADDR_ARG
 
__addr
,

50 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

51 
ssize_t
 
__REDIRECT
 (
__ªcv‰om_Æüs
,

52 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

53 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

54 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
), 
ªcv‰om
);

55 
ssize_t
 
__REDIRECT
 (
__ªcv‰om_chk_w¨n
,

56 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

57 
size_t
 
__buÊí
, 
__Êags
,

58 
__SOCKADDR_ARG
 
__addr
,

59 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
), 
__ªcv‰om_chk
)

60 
__w¨«âr
 ("recvfrom called with biggerÜengthÅhan size of "

63 
__f‹tify_fun˘i⁄
 
ssize_t


64 
	$ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
, 
__Êags
,

65 
__SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
)

67 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

69 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

70  
	`__ªcv‰om_chk
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
,

71 
__addr
, 
__addr_Àn
);

72 i‡(
__n
 > 
	`__bos0
 (
__buf
))

73  
	`__ªcv‰om_chk_w¨n
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
,

74 
__addr
, 
__addr_Àn
);

76  
	`__ªcv‰om_Æüs
 (
__fd
, 
__buf
, 
__n
, 
__Êags
, 
__addr
, 
__addr_Àn
);

77 
	}
}

	@/usr/include/bits/stat.h

18 #i‡!
deföed
 
_SYS_STAT_H
 && !deföed 
_FCNTL_H


22 #i‚de‡
_BITS_STAT_H


23 
	#_BITS_STAT_H
 1

	)

26 #i‚de‡
__x86_64__


27 
	#_STAT_VER_LINUX_OLD
 1

	)

28 
	#_STAT_VER_KERNEL
 1

	)

29 
	#_STAT_VER_SVR4
 2

	)

30 
	#_STAT_VER_LINUX
 3

	)

33 
	#_MKNOD_VER_LINUX
 1

	)

34 
	#_MKNOD_VER_SVR4
 2

	)

35 
	#_MKNOD_VER
 
_MKNOD_VER_LINUX


	)

37 
	#_STAT_VER_KERNEL
 0

	)

38 
	#_STAT_VER_LINUX
 1

	)

41 
	#_MKNOD_VER_LINUX
 0

	)

44 
	#_STAT_VER
 
_STAT_VER_LINUX


	)

46 
	s°©


48 
__dev_t
 
	m°_dev
;

49 #i‚de‡
__x86_64__


50 
	m__∑d1
;

52 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


53 
__öo_t
 
	m°_öo
;

55 
__öo_t
 
	m__°_öo
;

57 #i‚de‡
__x86_64__


58 
__mode_t
 
	m°_mode
;

59 
__∆ök_t
 
	m°_∆ök
;

61 
__∆ök_t
 
	m°_∆ök
;

62 
__mode_t
 
	m°_mode
;

64 
__uid_t
 
	m°_uid
;

65 
__gid_t
 
	m°_gid
;

66 #ifde‡
__x86_64__


67 
	m__∑d0
;

69 
__dev_t
 
	m°_rdev
;

70 #i‚de‡
__x86_64__


71 
	m__∑d2
;

73 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


74 
__off_t
 
	m°_size
;

76 
__off64_t
 
	m°_size
;

78 
__blksize_t
 
	m°_blksize
;

79 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


80 
__blk˙t_t
 
	m°_blocks
;

82 
__blk˙t64_t
 
	m°_blocks
;

84 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


91 
time•ec
 
	m°_©im
;

92 
time•ec
 
	m°_mtim
;

93 
time•ec
 
	m°_˘im
;

94 
	#°_©ime
 
°_©im
.
tv_£c


	)

95 
	#°_mtime
 
°_mtim
.
tv_£c


	)

96 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

98 
__time_t
 
	m°_©ime
;

99 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

100 
__time_t
 
	m°_mtime
;

101 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

102 
__time_t
 
	m°_˘ime
;

103 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

105 #ifde‡
__x86_64__


106 
__sysˇŒ_¶⁄g_t
 
	m__glibc_ª£rved
[3];

108 #i‚de‡
__USE_FILE_OFFSET64


109 
	m__glibc_ª£rved4
;

110 
	m__glibc_ª£rved5
;

112 
__öo64_t
 
	m°_öo
;

117 #ifde‡
__USE_LARGEFILE64


119 
	s°©64


121 
__dev_t
 
	m°_dev
;

122 #ifde‡
__x86_64__


123 
__öo64_t
 
	m°_öo
;

124 
__∆ök_t
 
	m°_∆ök
;

125 
__mode_t
 
	m°_mode
;

127 
	m__∑d1
;

128 
__öo_t
 
	m__°_öo
;

129 
__mode_t
 
	m°_mode
;

130 
__∆ök_t
 
	m°_∆ök
;

132 
__uid_t
 
	m°_uid
;

133 
__gid_t
 
	m°_gid
;

134 #ifde‡
__x86_64__


135 
	m__∑d0
;

136 
__dev_t
 
	m°_rdev
;

137 
__off_t
 
	m°_size
;

139 
__dev_t
 
	m°_rdev
;

140 
	m__∑d2
;

141 
__off64_t
 
	m°_size
;

143 
__blksize_t
 
	m°_blksize
;

144 
__blk˙t64_t
 
	m°_blocks
;

145 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


152 
time•ec
 
	m°_©im
;

153 
time•ec
 
	m°_mtim
;

154 
time•ec
 
	m°_˘im
;

156 
__time_t
 
	m°_©ime
;

157 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

158 
__time_t
 
	m°_mtime
;

159 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

160 
__time_t
 
	m°_˘ime
;

161 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

163 #ifde‡
__x86_64__


164 
__sysˇŒ_¶⁄g_t
 
	m__glibc_ª£rved
[3];

166 
__öo64_t
 
	m°_öo
;

172 
	#_STATBUF_ST_BLKSIZE


	)

173 
	#_STATBUF_ST_RDEV


	)

175 
	#_STATBUF_ST_NSEC


	)

179 
	#__S_IFMT
 0170000

	)

182 
	#__S_IFDIR
 0040000

	)

183 
	#__S_IFCHR
 0020000

	)

184 
	#__S_IFBLK
 0060000

	)

185 
	#__S_IFREG
 0100000

	)

186 
	#__S_IFIFO
 0010000

	)

187 
	#__S_IFLNK
 0120000

	)

188 
	#__S_IFSOCK
 0140000

	)

192 
	#__S_TYPEISMQ
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

193 
	#__S_TYPEISSEM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

194 
	#__S_TYPEISSHM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

198 
	#__S_ISUID
 04000

	)

199 
	#__S_ISGID
 02000

	)

200 
	#__S_ISVTX
 01000

	)

201 
	#__S_IREAD
 0400

	)

202 
	#__S_IWRITE
 0200

	)

203 
	#__S_IEXEC
 0100

	)

205 #ifde‡
__USE_ATFILE


206 
	#UTIME_NOW
 ((1»<< 30Ë- 1l)

	)

207 
	#UTIME_OMIT
 ((1»<< 30Ë- 2l)

	)

	@/usr/include/bits/stdio-ldbl.h

19 #i‚de‡
_STDIO_H


23 
__BEGIN_NAMESPACE_STD


24 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

25 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

26 
	$__LDBL_REDIR_DECL
 (
•rötf
)

27 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

28 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

29 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

30 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

31 && !
deföed
 
__REDIRECT
 \

32 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

33 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

34 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

37 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

38 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

39 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

41 
__END_NAMESPACE_STD


43 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


44 
__BEGIN_NAMESPACE_C99


45 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

46 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

47 
__END_NAMESPACE_C99


50 #ifdef 
__USE_ISOC99


51 
__BEGIN_NAMESPACE_C99


52 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

53 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

54 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

55 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

56 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

58 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

59 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

60 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

62 
__END_NAMESPACE_C99


65 #ifde‡
__USE_XOPEN2K8


66 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

67 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

70 #ifde‡
__USE_GNU


71 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

72 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

73 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

74 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

75 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

78 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


79 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

80 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

81 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


82 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

83 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

85 #i‡
__USE_FORTIFY_LEVEL
 > 1

86 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

88 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

89 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

90 #ifde‡
__USE_XOPEN2K8


91 
	$__LDBL_REDIR_DECL
 (
__d¥ötf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__vd¥ötf_chk
)

94 #ifde‡
__USE_GNU


95 
	$__LDBL_REDIR_DECL
 (
__a•rötf_chk
)

96 
	$__LDBL_REDIR_DECL
 (
__va•rötf_chk
)

97 
	$__LDBL_REDIR_DECL
 (
__ob°ack_¥ötf_chk
)

98 
	$__LDBL_REDIR_DECL
 (
__ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

19 #i‚de‡
_STDIO_H


23 #i‚de‡
__exã∫_ölöe


24 
	#__STDIO_INLINE
 
ölöe


	)

26 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

30 #ifde‡
__USE_EXTERN_INLINES


33 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
)

35 
__STDIO_INLINE
 

36 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

38  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

39 
	}
}

43 
__STDIO_INLINE
 

44 
	$gëch¨
 ()

46  
	`_IO_gëc
 (
°dö
);

47 
	}
}

50 #ifde‡
__USE_MISC


52 
__STDIO_INLINE
 

53 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

55  
	`_IO_gëc_u∆ocked
 (
__Â
);

56 
	}
}

60 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


62 
__STDIO_INLINE
 

63 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

65  
	`_IO_gëc_u∆ocked
 (
__Â
);

66 
	}
}

69 
__STDIO_INLINE
 

70 
	$gëch¨_u∆ocked
 ()

72  
	`_IO_gëc_u∆ocked
 (
°dö
);

73 
	}
}

78 
__STDIO_INLINE
 

79 
	$putch¨
 (
__c
)

81  
	`_IO_putc
 (
__c
, 
°dout
);

82 
	}
}

85 #ifde‡
__USE_MISC


87 
__STDIO_INLINE
 

88 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

90  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

91 
	}
}

95 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


97 
__STDIO_INLINE
 

98 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

100  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

101 
	}
}

104 
__STDIO_INLINE
 

105 
	$putch¨_u∆ocked
 (
__c
)

107  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

108 
	}
}

112 #ifdef 
__USE_GNU


114 
__STDIO_INLINE
 
_IO_ssize_t


115 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

117  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

118 
	}
}

122 #ifde‡
__USE_MISC


124 
__STDIO_INLINE
 

125 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

127  
	`_IO_„of_u∆ocked
 (
__°ªam
);

128 
	}
}

131 
__STDIO_INLINE
 

132 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

134  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

135 
	}
}

141 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

142 && !
deföed
 
	g__˝lu•lus


144 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

145 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

146 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

147 && (
size_t
Ë(
size
) != 0) \

148 ? ({ *
__±r
 = (*Ë(
±r
); \

149 
FILE
 *
__°ªam
 = (
°ªam
); \

150 
size_t
 
__˙t
; \

151 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

152 
__˙t
 > 0; --__cnt) \

154 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

155 i‡(
__c
 =
EOF
) \

157 *
__±r
++ = 
__c
; \

159 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

160 / (
size_t
Ë(
size
); }) \

161 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

162 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

164 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

165 (Ë(
n
), (
size_t
) 0) \

166 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

168 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

169 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

170 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

171 && (
size_t
Ë(
size
) != 0) \

172 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

173 
FILE
 *
__°ªam
 = (
°ªam
); \

174 
size_t
 
__˙t
; \

175 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

176 
__˙t
 > 0; --__cnt) \

177 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

179 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

180 / (
size_t
Ë(
size
); }) \

181 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

182 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

184 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

185 (Ë(
n
), (
size_t
) 0) \

186 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

190 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

19 #i‚de‡
_STDIO_H


23 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

24 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

25 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

26 c⁄° *
__ª°ri˘
 
__f‹m©
,

27 
_G_va_li°
 
__≠
Ë
__THROW
;

29 #ifde‡
__va_¨g_∑ck


30 
__f‹tify_fun˘i⁄
 

31 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
, ...))

33  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

34 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

35 
	}
}

36 #ñi‡!
deföed
 
__˝lu•lus


37 
	#•rötf
(
°r
, ...) \

38 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

39 
__VA_ARGS__
)

	)

42 
__f‹tify_fun˘i⁄
 

43 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
,

44 
_G_va_li°
 
__≠
))

46  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

47 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

48 
	}
}

50 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


52 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

53 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

54 ...Ë
__THROW
;

55 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

56 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

57 
_G_va_li°
 
__≠
Ë
__THROW
;

59 #ifde‡
__va_¨g_∑ck


60 
__f‹tify_fun˘i⁄
 

61 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

62 c⁄° *
__ª°ri˘
 
__fmt
, ...))

64  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

65 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

66 
	}
}

67 #ñi‡!
deföed
 
__˝lu•lus


68 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

69 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

70 
__VA_ARGS__
)

	)

73 
__f‹tify_fun˘i⁄
 

74 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

75 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

77  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

78 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

79 
	}
}

83 #i‡
__USE_FORTIFY_LEVEL
 > 1

85 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

86 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

87 
__¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

88 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

89 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

90 
__v¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

91 
_G_va_li°
 
__≠
);

93 #ifde‡
__va_¨g_∑ck


94 
__f‹tify_fun˘i⁄
 

95 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° *__ª°ri˘ 
__fmt
, ...)

97  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

98 
	`__va_¨g_∑ck
 ());

99 
	}
}

101 
__f‹tify_fun˘i⁄
 

102 
	$¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, ...)

104  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

105 
	}
}

106 #ñi‡!
deföed
 
__˝lu•lus


107 
	#¥ötf
(...) \

108 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

109 
	#Ârötf
(
°ªam
, ...) \

110 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

113 
__f‹tify_fun˘i⁄
 

114 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

116 #ifde‡
__USE_EXTERN_INLINES


117  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

119  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

121 
	}
}

123 
__f‹tify_fun˘i⁄
 

124 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

125 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

127  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

128 
	}
}

130 #ifde‡
__USE_XOPEN2K8


131 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, c⁄° *
__ª°ri˘
 
__fmt
,

132 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

133 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

134 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

135 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

137 #ifde‡
__va_¨g_∑ck


138 
__f‹tify_fun˘i⁄
 

139 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

141  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

142 
	`__va_¨g_∑ck
 ());

143 
	}
}

144 #ñi‡!
deföed
 
__˝lu•lus


145 
	#d¥ötf
(
fd
, ...) \

146 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

149 
__f‹tify_fun˘i⁄
 

150 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

152  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

153 
	}
}

156 #ifde‡
__USE_GNU


158 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

159 c⁄° *
__ª°ri˘
 
__fmt
, ...)

160 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

161 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

162 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

163 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

164 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

165 
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

167 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

168 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

169 
__Êag
,

170 c⁄° *
__ª°ri˘
 
__f‹m©
,

171 
_G_va_li°
 
__¨gs
)

172 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

174 #ifde‡
__va_¨g_∑ck


175 
__f‹tify_fun˘i⁄
 

176 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
, ...))

178  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

179 
	`__va_¨g_∑ck
 ());

180 
	}
}

182 
__f‹tify_fun˘i⁄
 

183 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

186  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

187 
	`__va_¨g_∑ck
 ());

188 
	}
}

190 
__f‹tify_fun˘i⁄
 

191 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

192 c⁄° *
__ª°ri˘
 
__fmt
, ...))

194  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

195 
	`__va_¨g_∑ck
 ());

196 
	}
}

197 #ñi‡!
deföed
 
__˝lu•lus


198 
	#a•rötf
(
±r
, ...) \

199 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

200 
	#__a•rötf
(
±r
, ...) \

201 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

202 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

203 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

206 
__f‹tify_fun˘i⁄
 

207 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

208 
_G_va_li°
 
__≠
))

210  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

211 
	}
}

213 
__f‹tify_fun˘i⁄
 

214 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

215 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

217  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

218 
__≠
);

219 
	}
}

225 #i‡!
deföed
 
__USE_ISOC11
 \

226 || (
deföed
 
	g__˝lu•lus
 && __˝lu•lu†<201103L && !deföed 
__USE_GNU
)

227 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

228 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

229 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

232 
__f‹tify_fun˘i⁄
 
__wur
 *

233 
	$gës
 (*
__°r
)

235 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

236  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

237  
	`__gës_w¨n
 (
__°r
);

238 
	}
}

241 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

242 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

243 *
	`__REDIRECT
 (
__fgës_Æüs
,

244 (*
__ª°ri˘
 
__s
, 
__n
,

245 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

246 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

247 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

248 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

249 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

252 
__f‹tify_fun˘i⁄
 
__wur
 *

253 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

255 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

257 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

258  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

260 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

261  
	`__fgës_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

263  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

264 
	}
}

266 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

267 
size_t
 
__size
, size_à
__n
,

268 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

269 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

270 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

271 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

272 
‰ód
Ë
__wur
;

273 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

274 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

275 
size_t
 
__size
, size_à
__n
,

276 
FILE
 *
__ª°ri˘
 
__°ªam
),

277 
__‰ód_chk
)

278 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

281 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


282 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

283 
FILE
 *
__ª°ri˘
 
__°ªam
)

285 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

287 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

288 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

289 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

290  
	`__‰ód_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

292 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

293  
	`__‰ód_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

295  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

296 
	}
}

298 #ifde‡
__USE_GNU


299 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

300 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

301 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

302 (*
__ª°ri˘
 
__s
, 
__n
,

303 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

304 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

305 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

306 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

307 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

310 
__f‹tify_fun˘i⁄
 
__wur
 *

311 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

313 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

315 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

316  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

318 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

319  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

321  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

322 
	}
}

325 #ifde‡
__USE_MISC


326 #unde‡
‰ód_u∆ocked


327 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

328 
size_t
 
__size
, size_à
__n
,

329 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

330 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

331 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

332 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

333 
‰ód_u∆ocked
Ë
__wur
;

334 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

335 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

336 
size_t
 
__size
, size_à
__n
,

337 
FILE
 *
__ª°ri˘
 
__°ªam
),

338 
__‰ód_u∆ocked_chk
)

339 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

342 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


343 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

344 
FILE
 *
__ª°ri˘
 
__°ªam
)

346 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

348 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

349 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

350 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

351  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

352 
__°ªam
);

354 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

355  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

356 
__°ªam
);

359 #ifde‡
__USE_EXTERN_INLINES


360 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

361 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

362 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

363 && 
__size
 * 
__n
 <= 8)

365 
size_t
 
__˙t
 = 
__size
 * 
__n
;

366 *
__˝å
 = (*Ë
__±r
;

367 i‡(
__˙t
 == 0)

370 ; 
__˙t
 > 0; --__cnt)

372 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
);

373 i‡(
__c
 =
EOF
)

375 *
__˝å
++ = 
__c
;

377  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

380  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

381 
	}
}

	@/usr/include/bits/stdio_lim.h

18 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


22 #ifde‡
_STDIO_H


23 
	#L_tm≤am
 20

	)

24 
	#TMP_MAX
 238328

	)

25 
	#FILENAME_MAX
 4096

	)

27 #ifde‡
__USE_POSIX


28 
	#L_˘îmid
 9

	)

29 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


30 
	#L_cu£rid
 9

	)

35 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


36 #unde‡
FOPEN_MAX


37 
	#FOPEN_MAX
 16

	)

40 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


41 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/stdlib-bsearch.h

19 
__exã∫_ölöe
 *

20 
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

21 
__com∑r_‚_t
 
__com∑r
)

23 
size_t
 
__l
, 
__u
, 
__idx
;

24 c⁄° *
__p
;

25 
__com∑ris⁄
;

27 
__l
 = 0;

28 
__u
 = 
__nmemb
;

29 
__l
 < 
__u
)

31 
__idx
 = (
__l
 + 
__u
) / 2;

32 
__p
 = (*Ë(((c⁄° *Ë
__ba£
Ë+ (
__idx
 * 
__size
));

33 
__com∑ris⁄
 = (*
__com∑r
Ë(
__key
, 
__p
);

34 i‡(
__com∑ris⁄
 < 0)

35 
__u
 = 
__idx
;

36 i‡(
__com∑ris⁄
 > 0)

37 
__l
 = 
__idx
 + 1;

39  (*Ë
__p
;

42  
NULL
;

43 
	}
}

	@/usr/include/bits/stdlib-float.h

19 #i‚de‡
_STDLIB_H


23 #ifde‡
__USE_EXTERN_INLINES


24 
__BEGIN_NAMESPACE_STD


25 
__exã∫_ölöe
 

26 
__NTH
 (
	$©of
 (c⁄° *
__≈å
))

28  
	`°πod
 (
__≈å
, (**Ë
NULL
);

29 
	}
}

30 
	g__END_NAMESPACE_STD


	@/usr/include/bits/stdlib-ldbl.h

19 #i‚de‡
_STDLIB_H


23 #ifdef 
__USE_ISOC99


24 
__BEGIN_NAMESPACE_C99


25 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

26 
__END_NAMESPACE_C99


29 #ifde‡
__USE_GNU


30 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

33 #ifde‡
__USE_MISC


34 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

35 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

36 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

38 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

19 #i‚de‡
_STDLIB_H


23 *
	$__ªÆ∑th_chk
 (c⁄° *
__ª°ri˘
 
__«me
,

24 *
__ª°ri˘
 
__ªsﬁved
,

25 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

26 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

27 (c⁄° *
__ª°ri˘
 
__«me
,

28 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

29 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

30 (c⁄° *
__ª°ri˘
 
__«me
,

31 *
__ª°ri˘
 
__ªsﬁved
,

32 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


33 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

36 
__f‹tify_fun˘i⁄
 
__wur
 *

37 
	`__NTH
 (
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

39 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

41 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


42 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

43  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

45  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

48  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

49 
	}
}

52 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

53 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

54 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

55 
size_t
 
__buÊí
), 
±¢ame_r
)

56 
	`__n⁄nuŒ
 ((2));

57 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

58 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

59 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

60 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

63 
__f‹tify_fun˘i⁄
 

64 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

66 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

68 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

69  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

70 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

71  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

73  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

74 
	}
}

77 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

78 
__THROW
 
__wur
;

79 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

80 
w˘omb
Ë
__wur
;

82 
__f‹tify_fun˘i⁄
 
__wur
 

83 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

88 
	#__STDLIB_MB_LEN_MAX
 16

	)

89 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


92 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

93  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

94  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

95 
	}
}

98 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

99 c⁄° *
__ª°ri˘
 
__§c
,

100 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

101 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

102 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

103 c⁄° *
__ª°ri˘
 
__§c
,

104 
size_t
 
__Àn
), 
mb°owcs
);

105 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

106 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

107 c⁄° *
__ª°ri˘
 
__§c
,

108 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

109 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

112 
__f‹tify_fun˘i⁄
 
size_t


113 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° *__ª°ri˘ 
__§c
,

114 
size_t
 
__Àn
))

116 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

118 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

119  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

120 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

122 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

123  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

124 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

126  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

127 
	}
}

130 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

131 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

132 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

133 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

134 (*
__ª°ri˘
 
__d°
,

135 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

136 
size_t
 
__Àn
), 
wc°ombs
);

137 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

138 (*
__ª°ri˘
 
__d°
,

139 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

140 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

141 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

143 
__f‹tify_fun˘i⁄
 
size_t


144 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__§c
,

145 
size_t
 
__Àn
))

147 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

149 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

150  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

151 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

152  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

154  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

155 
	}
}

	@/usr/include/bits/string.h

19 #i‚de‡
_STRING_H


24 
	#_STRING_ARCH_u«lig√d
 1

	)

28 #i‡!
deföed
 
__x86_64__
 && (deföed 
__i486__
 || deföed 
__≥¡ium__
 \

29 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

30 || 
deföed
 
	g__noc⁄a__
 || deföed 
	g__©om__
 \

31 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__c‹ei7__
 \

32 || 
deföed
 
	g__k6__
 || deföed 
	g__geode__
 \

33 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

34 || 
deföed
 
	g__amdÁm10__
)

38 #i‡!
deföed
 
__NO_STRING_INLINES
 && deföed 
__USE_STRING_INLINES
 \

39 && 
deföed
 
	g__GNUC__
 && __GNUC__ >= 2

41 #i‚de‡
__STRING_INLINE


42 #i‚de‡
__exã∫_ölöe


43 
	#__STRING_INLINE
 
ölöe


	)

45 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

50 
	#__STRING_SMALL_GET16
(
§c
, 
idx
) \

51 ((((c⁄° *Ë(
§c
))[
idx
 + 1] << 8) \

52 | ((c⁄° *Ë(
§c
))[
idx
])

	)

53 
	#__STRING_SMALL_GET32
(
§c
, 
idx
) \

54 (((((c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

55 | ((c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

56 | ((c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

57 | ((c⁄° *Ë(
§c
))[
idx
])

	)

61 
	#_HAVE_STRING_ARCH_mem˝y
 1

	)

62 
	#mem˝y
(
de°
, 
§c
, 
n
) \

63 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

64 ? 
	`__mem˝y_c
 ((
de°
), (
§c
), (
n
)) \

65 : 
	`__mem˝y_g
 ((
de°
), (
§c
), (
n
))))

	)

66 
	#__mem˝y_c
(
de°
, 
§c
, 
n
) \

67 ((
n
) == 0 \

68 ? (
de°
) \

69 : (((
n
) % 4 == 0) \

70 ? 
	`__mem˝y_by4
 (
de°
, 
§c
, 
n
) \

71 : (((
n
) % 2 == 0) \

72 ? 
	`__mem˝y_by2
 (
de°
, 
§c
, 
n
) \

73 : 
	`__mem˝y_g
 (
de°
, 
§c
, 
n
))))

	)

75 
__STRING_INLINE
 *
__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
,

76 
size_t
 
__n
);

78 
__STRING_INLINE
 *

79 
	$__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

81 
__d0
, 
__d1
;

82 *
__tmp
 = 
__de°
;

83 
__asm__
 
__vﬁ©ûe__


91 : "=&r" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

92 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 4)

94  
__de°
;

95 
	}
}

97 
__STRING_INLINE
 *
__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
,

98 
size_t
 
__n
);

100 
__STRING_INLINE
 *

101 
	$__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

103 
__d0
, 
__d1
;

104 *
__tmp
 = 
__de°
;

105 
__asm__
 
__vﬁ©ûe__


118 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

119 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 2)

121  
__de°
;

122 
	}
}

124 
__STRING_INLINE
 *
__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
);

126 
__STRING_INLINE
 *

127 
	$__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

129 
__d0
, 
__d1
, 
__d2
;

130 *
__tmp
 = 
__de°
;

131 
__asm__
 
__vﬁ©ûe__


142 : "=&c" (
__d0
), "=&D" (
__d1
), "=&S" (
__d2
),

143 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

144 : "0" (
__n
), "1" (
__tmp
), "2" (
__§c
),

145 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
)

147  
__de°
;

148 
	}
}

150 
	#_HAVE_STRING_ARCH_memmove
 1

	)

151 #i‚de‡
_FORCE_INLINES


154 
	#memmove
(
de°
, 
§c
, 
n
Ë
	`__memmove_g
 (de°, src,Ç)

	)

156 
__STRING_INLINE
 *
	$__memmove_g
 (*, c⁄° *, 
size_t
)

157 
	`__asm__
 ("memmove");

159 
__STRING_INLINE
 *

160 
	$__memmove_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

162 
__d0
, 
__d1
, 
__d2
;

163 *
__tmp
 = 
__de°
;

164 i‡(
__de°
 < 
__§c
)

165 
__asm__
 
__vﬁ©ûe__


168 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

169 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

170 : "0" (
__n
), "1" (
__§c
), "2" (
__tmp
),

171 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

173 
__asm__
 
__vﬁ©ûe__


177 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

178 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

179 : "0" (
__n
), "1" (__¿- 1 + (c⁄° *Ë
__§c
),

180 "2" (
__n
 - 1 + (*Ë
__tmp
),

181 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

182  
__de°
;

183 
	}
}

187 
	#_HAVE_STRING_ARCH_memcmp
 1

	)

188 #i‚de‡
_FORCE_INLINES


189 #i‚de‡
__PIC__


191 
__STRING_INLINE
 

192 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

194 
__d0
, 
__d1
, 
__d2
;

195 
__ªs
;

196 
__asm__
 
__vﬁ©ûe__


204 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

205 : "0" (0), "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

206 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

207 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

209  
__ªs
;

210 
	}
}

215 
	#_HAVE_STRING_ARCH_mem£t
 1

	)

216 
	#_USE_STRING_ARCH_mem£t
 1

	)

217 
	#mem£t
(
s
, 
c
, 
n
) \

218 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

219 ? ((
n
) == 1 \

220 ? 
	`__mem£t_c1
 ((
s
), (
c
)) \

221 : 
	`__mem£t_gc
 ((
s
), (
c
), (
n
))) \

222 : (
	`__buûtö_c⁄°™t_p
 (
c
) \

223 ? (
	`__buûtö_c⁄°™t_p
 (
n
) \

224 ? 
	`__mem£t_c˙
 ((
s
), (
c
), (
n
)) \

225 : 
	`mem£t
 ((
s
), (
c
), (
n
))) \

226 : (
	`__buûtö_c⁄°™t_p
 (
n
) \

227 ? 
	`__mem£t_g˙
 ((
s
), (
c
), (
n
)) \

228 : 
	`mem£t
 ((
s
), (
c
), (
n
))))))

	)

230 
	#__mem£t_c1
(
s
, 
c
Ë({ *
__s
 = (s); \

231 *((*Ë
__s
Ë(Ë(
c
); \

232 
__s
; })

	)

234 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

235 ({ *
__s
 = (
s
); \

237 
__ui
; \

238 
__usi
; \

239 
__uc
; \

240 } *
__u
 = 
__s
; \

241 
__c
 = ((Ë((Ë(
c
))) * 0x01010101; \

247 i‡((
n
) == 3 || (n) >= 5) \

248 
__asm__
 
	`__vﬁ©ûe__
 ("" : "Ù" (
__c
) : "0" (__c)); \

251 
n
) \

254 
__u
->
__ui
 = 
__c
; \

255 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

257 
__u
->
__ui
 = 
__c
; \

258 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

260 
__u
->
__ui
 = 
__c
; \

261 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

263 
__u
->
__usi
 = (Ë
__c
; \

264 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

265 
__u
->
__uc
 = (Ë
__c
; \

269 
__u
->
__ui
 = 
__c
; \

270 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

272 
__u
->
__ui
 = 
__c
; \

273 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

275 
__u
->
__ui
 = 
__c
; \

276 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

278 
__u
->
__usi
 = (Ë
__c
; \

282 
__u
->
__ui
 = 
__c
; \

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

285 
__u
->
__ui
 = 
__c
; \

286 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

288 
__u
->
__ui
 = 
__c
; \

289 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

291 
__u
->
__uc
 = (Ë
__c
; \

295 
__u
->
__ui
 = 
__c
; \

296 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

298 
__u
->
__ui
 = 
__c
; \

299 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

301 
__u
->
__ui
 = 
__c
; \

302 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

304 
__u
->
__ui
 = 
__c
; \

309 
__s
; })

	)

311 
	#__mem£t_c˙
(
s
, 
c
, 
n
) \

312 (((
n
) % 4 == 0) \

313 ? 
	`__mem£t_c˙_by4
 (
s
, ((Ë((Ë(
c
))) * 0x01010101,\

314 
n
) \

315 : (((
n
) % 2 == 0) \

316 ? 
	`__mem£t_c˙_by2
 (
s
, \

317 ((Ë((Ë(
c
))) * 0x01010101,\

318 
n
) \

319 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

321 
__STRING_INLINE
 *
__mem£t_c˙_by4
 (*
__s
, 
__c
,

322 
size_t
 
__n
);

324 
__STRING_INLINE
 *

325 
	$__mem£t_c˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

327 *
__tmp
 = 
__s
;

328 
__d0
;

329 #ifde‡
__i686__


330 
__asm__
 
__vﬁ©ûe__


333 : "=&a" (
__c
), "=&D" (
__tmp
), "=&c" (
__d0
),

334 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

335 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

338 
__asm__
 
__vﬁ©ûe__


344 : "=&r" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

345 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

346 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

349  
__s
;

350 
	}
}

352 
__STRING_INLINE
 *
__mem£t_c˙_by2
 (*
__s
, 
__c
,

353 
size_t
 
__n
);

355 
__STRING_INLINE
 *

356 
	$__mem£t_c˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

358 
__d0
, 
__d1
;

359 *
__tmp
 = 
__s
;

360 #ifde‡
__i686__


361 
__asm__
 
__vﬁ©ûe__


365 : "=&a" (
__d0
), "=&D" (
__tmp
), "=&c" (
__d1
),

366 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

367 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

370 
__asm__
 
__vﬁ©ûe__


376 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

377 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

378 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

381  
__s
;

382 
	}
}

384 
	#__mem£t_g˙
(
s
, 
c
, 
n
) \

385 (((
n
) % 4 == 0) \

386 ? 
	`__mem£t_g˙_by4
 (
s
, 
c
, 
n
) \

387 : (((
n
) % 2 == 0) \

388 ? 
	`__mem£t_g˙_by2
 (
s
, 
c
, 
n
) \

389 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

391 
__STRING_INLINE
 *
__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
);

393 
__STRING_INLINE
 *

394 
	$__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

396 *
__tmp
 = 
__s
;

397 
__d0
;

398 
__asm__
 
__vﬁ©ûe__


408 : "=&q" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

409 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

410 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

412  
__s
;

413 
	}
}

415 
__STRING_INLINE
 *
__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
);

417 
__STRING_INLINE
 *

418 
	$__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

420 
__d0
, 
__d1
;

421 *
__tmp
 = 
__s
;

422 
__asm__
 
__vﬁ©ûe__


433 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

434 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

435 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

437  
__s
;

438 
	}
}

442 
	#_HAVE_STRING_ARCH_memchr
 1

	)

443 #i‚de‡
_FORCE_INLINES


444 
__STRING_INLINE
 *

445 
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

447 
__d0
;

448 #ifde‡
__i686__


449 
__d1
;

451 *
__ªs
;

452 i‡(
__n
 == 0)

453  
NULL
;

454 #ifde‡
__i686__


455 
__asm__
 
__vﬁ©ûe__


459 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

460 : "a" (
__c
), "0" (
__s
), "1" (
__n
), "2" (1),

461 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

464 
__asm__
 
__vﬁ©ûe__


470 : "=D" (
__ªs
), "=&c" (
__d0
)

471 : "a" (
__c
), "0" (
__s
), "1" (
__n
),

472 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

475  
__ªs
 - 1;

476 
	}
}

479 
	#_HAVE_STRING_ARCH_memrchr
 1

	)

480 #i‚de‡
_FORCE_INLINES


481 
__STRING_INLINE
 *
__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
);

483 
__STRING_INLINE
 *

484 
	$__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

486 
__d0
;

487 #ifde‡
__i686__


488 
__d1
;

490 *
__ªs
;

491 i‡(
__n
 == 0)

492  
NULL
;

493 #ifde‡
__i686__


494 
__asm__
 
__vﬁ©ûe__


500 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

501 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n), "2" (-1),

502 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

505 
__asm__
 
__vﬁ©ûe__


512 : "=D" (
__ªs
), "=&c" (
__d0
)

513 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n),

514 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

517  
__ªs
;

518 
	}
}

519 #ifde‡
__USE_GNU


520 
	#memrchr
(
s
, 
c
, 
n
Ë
	`__memrchr
 ((s), (c), (n))

	)

525 
	#_HAVE_STRING_ARCH_øwmemchr
 1

	)

526 
__STRING_INLINE
 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

528 #i‚de‡
_FORCE_INLINES


529 
__STRING_INLINE
 *

530 
	$__øwmemchr
 (c⁄° *
__s
, 
__c
)

532 
__d0
;

533 *
__ªs
;

534 
__asm__
 
__vﬁ©ûe__


537 : "=D" (
__ªs
), "=&c" (
__d0
)

538 : "a" (
__c
), "0" (
__s
), "1" (0xffffffff),

539 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

541  
__ªs
 - 1;

542 
	}
}

543 #ifde‡
__USE_GNU


544 
__STRING_INLINE
 *

545 
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

547  
	`__øwmemchr
 (
__s
, 
__c
);

548 
	}
}

554 
	#_HAVE_STRING_ARCH_°æí
 1

	)

555 
	#°æí
(
°r
) \

556 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
°r
) \

557 ? 
	`__buûtö_°æí
 (
°r
) \

558 : 
	`__°æí_g
 (
°r
)))

	)

559 
__STRING_INLINE
 
size_t
 
__°æí_g
 (c⁄° *
__°r
);

561 
__STRING_INLINE
 
size_t


562 
	$__°æí_g
 (c⁄° *
__°r
)

564 
__dummy
;

565 c⁄° *
__tmp
 = 
__°r
;

566 
__asm__
 
__vﬁ©ûe__


572 : "Ù" (
__tmp
), "=&q" (
__dummy
)

573 : "0" (
__°r
),

574 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__°r
)

576  
__tmp
 - 
__°r
 - 1;

577 
	}
}

581 
	#_HAVE_STRING_ARCH_°r˝y
 1

	)

582 
	#°r˝y
(
de°
, 
§c
) \

583 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

584 ? ( ((
§c
)[0]Ë=1 && 
	`°æí
 (src) + 1 <= 8 \

585 ? 
	`__°r˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

586 : (*Ë
	`mem˝y
 ((*Ë(
de°
), \

587 (c⁄° *Ë(
§c
), \

588 
	`°æí
 (
§c
) + 1)) \

589 : 
	`__°r˝y_g
 ((
de°
), (
§c
))))

	)

591 
	#__°r˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

592 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

594 
__ui
; \

595 
__usi
; \

596 
__uc
; \

597 
__c
; \

598 } *
__u
 = (*Ë
__de°
; \

599 
§˛í
) \

602 
__u
->
__uc
 = '\0'; \

605 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

608 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

609 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

610 
__u
->
__uc
 = '\0'; \

613 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

616 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

617 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

618 
__u
->
__uc
 = '\0'; \

621 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

622 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

623 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

626 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

627 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

628 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

629 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

630 
__u
->
__uc
 = '\0'; \

633 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

634 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

635 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

638 (*Ë
__de°
; }))

	)

640 
__STRING_INLINE
 *
__°r˝y_g
 (*
__de°
, c⁄° *
__§c
);

642 
__STRING_INLINE
 *

643 
	$__°r˝y_g
 (*
__de°
, c⁄° *
__§c
)

645 *
__tmp
 = 
__de°
;

646 
__dummy
;

647 
__asm__
 
__vﬁ©ûe__


656 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
),

657 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

658 : "0" (
__§c
), "1" (
__tmp
),

659 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

661  
__de°
;

662 
	}
}

665 #ifde‡
__USE_GNU


666 
	#_HAVE_STRING_ARCH_°p˝y
 1

	)

668 
	#__°p˝y
(
de°
, 
§c
) \

669 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

670 ? (
	`°æí
 (
§c
) + 1 <= 8 \

671 ? 
	`__°p˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

672 : 
	`__°p˝y_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1)) \

673 : 
	`__°p˝y_g
 ((
de°
), (
§c
))))

	)

674 
	#__°p˝y_c
(
de°
, 
§c
, 
§˛í
) \

675 ((
§˛í
) % 4 == 0 \

676 ? 
	`__memp˝y_by4
 (
de°
, 
§c
, 
§˛í
) - 1 \

677 : ((
§˛í
) % 2 == 0 \

678 ? 
	`__memp˝y_by2
 (
de°
, 
§c
, 
§˛í
) - 1 \

679 : 
	`__memp˝y_byn
 (
de°
, 
§c
, 
§˛í
Ë- 1))

	)

682 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 ((de°), (§c))

	)

684 
	#__°p˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

685 (
	`__exãnsi⁄__
 ({ union { \

686 
__ui
; \

687 
__usi
; \

688 
__uc
; \

689 
__c
; \

690 } *
__u
 = (*Ë(
de°
); \

691 
§˛í
) \

694 
__u
->
__uc
 = '\0'; \

697 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

698 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

701 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

702 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

703 
__u
->
__uc
 = '\0'; \

706 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

707 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

710 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

711 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

712 
__u
->
__uc
 = '\0'; \

715 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

716 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

717 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

718 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

721 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

722 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

723 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

724 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

725 
__u
->
__uc
 = '\0'; \

728 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

729 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

730 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

731 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

734 (*Ë
__u
; }))

	)

736 
__STRING_INLINE
 *
__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
,

737 
size_t
 
__§˛í
);

739 
__STRING_INLINE
 *

740 
	$__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

742 *
__tmp
 = 
__de°
;

743 
__d0
, 
__d1
;

744 
__asm__
 
__vﬁ©ûe__


752 : "=&r" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

753 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4)

755  
__tmp
;

756 
	}
}

758 
__STRING_INLINE
 *
__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
,

759 
size_t
 
__§˛í
);

761 
__STRING_INLINE
 *

762 
	$__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

764 *
__tmp
 = 
__de°
;

765 
__d0
, 
__d1
;

766 
__asm__
 
__vﬁ©ûe__


779 : "=&q" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
),

780 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

781 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

782 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

784  
__tmp
 + 2;

785 
	}
}

787 
__STRING_INLINE
 *
__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
,

788 
size_t
 
__§˛í
);

790 
__STRING_INLINE
 *

791 
	$__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

793 
__d0
, 
__d1
;

794 *
__tmp
 = 
__de°
;

795 
__asm__
 
__vﬁ©ûe__


806 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

807 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

808 : "0" (
__tmp
), "1" (
__§˛í
), "2" (
__§c
),

809 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

811  
__tmp
;

812 
	}
}

814 
__STRING_INLINE
 *
__°p˝y_g
 (*
__de°
, c⁄° *
__§c
);

816 
__STRING_INLINE
 *

817 
	$__°p˝y_g
 (*
__de°
, c⁄° *
__§c
)

819 *
__tmp
 = 
__de°
;

820 
__dummy
;

821 
__asm__
 
__vﬁ©ûe__


830 : "=&r" (
__§c
), "Ù" (
__tmp
), "=&q" (
__dummy
),

831 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

832 : "0" (
__§c
), "1" (
__tmp
),

833 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

835  
__tmp
 - 1;

836 
	}
}

841 
	#_HAVE_STRING_ARCH_°∫˝y
 1

	)

842 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

843 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

844 ? ((
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

845 ? (*Ë
	`mem˝y
 ((*Ë(
de°
), \

846 (c⁄° *Ë(
§c
), 
n
) \

847 : 
	`__°∫˝y_cg
 ((
de°
), (
§c
), 
	`°æí
 (§cË+ 1, 
n
))) \

848 : 
	`__°∫˝y_gg
 ((
de°
), (
§c
), 
n
)))

	)

849 
	#__°∫˝y_cg
(
de°
, 
§c
, 
§˛í
, 
n
) \

850 (((
§˛í
) % 4 == 0) \

851 ? 
	`__°∫˝y_by4
 (
de°
, 
§c
, 
§˛í
, 
n
) \

852 : (((
§˛í
) % 2 == 0) \

853 ? 
	`__°∫˝y_by2
 (
de°
, 
§c
, 
§˛í
, 
n
) \

854 : 
	`__°∫˝y_byn
 (
de°
, 
§c
, 
§˛í
, 
n
)))

	)

856 
__STRING_INLINE
 *
__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[],

857 
size_t
 
__§˛í
, size_à
__n
);

859 
__STRING_INLINE
 *

860 
	$__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

862 *
__tmp
 = 
__de°
;

863 
__dummy1
, 
__dummy2
;

864 
__asm__
 
__vﬁ©ûe__


872 : "=&r" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

873 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

874 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4),

875 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

877 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

878  
__de°
;

879 
	}
}

881 
__STRING_INLINE
 *
__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[],

882 
size_t
 
__§˛í
, size_à
__n
);

884 
__STRING_INLINE
 *

885 
	$__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

887 *
__tmp
 = 
__de°
;

888 
__dummy1
, 
__dummy2
;

889 
__asm__
 
__vﬁ©ûe__


902 : "=&q" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

903 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

904 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

905 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

907 (Ë
	`mem£t
 (
__tmp
 + 2, '\0', 
__n
 - 
__§˛í
);

908  
__de°
;

909 
	}
}

911 
__STRING_INLINE
 *
__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[],

912 
size_t
 
__§˛í
, size_à
__n
);

914 
__STRING_INLINE
 *

915 
	$__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

917 
__d0
, 
__d1
;

918 *
__tmp
 = 
__de°
;

919 
__asm__
 
__vﬁ©ûe__


930 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

931 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

932 : "1" (
__§˛í
), "0" (
__tmp
),"2" (
__§c
),

933 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

935 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

936  
__de°
;

937 
	}
}

939 
__STRING_INLINE
 *
__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
,

940 
size_t
 
__n
);

942 
__STRING_INLINE
 *

943 
	$__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

945 *
__tmp
 = 
__de°
;

946 
__dummy
;

947 i‡(
__n
 > 0)

948 
__asm__
 
__vﬁ©ûe__


964 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
), "=&r" (
__n
)

965 : "0" (
__§c
), "1" (
__tmp
), "3" (
__n
)

968  
__de°
;

969 
	}
}

973 
	#_HAVE_STRING_ARCH_°rˇt
 1

	)

974 
	#°rˇt
(
de°
, 
§c
) \

975 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

976 ? 
	`__°rˇt_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

977 : 
	`__°rˇt_g
 ((
de°
), (
§c
))))

	)

979 
__STRING_INLINE
 *
__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[],

980 
size_t
 
__§˛í
);

982 
__STRING_INLINE
 *

983 
	$__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
)

985 #ifde‡
__i686__


986 
__d0
;

987 *
__tmp
;

988 
__asm__
 
__vﬁ©ûe__


990 : "=D" (
__tmp
), "=&c" (
__d0
),

991 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

992 : "0" (
__de°
), "1" (0xffffffff), "a" (0),

993 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

995 --
__tmp
;

997 *
__tmp
 = 
__de°
 - 1;

998 
__asm__
 
__vﬁ©ûe__


1003 : "Ù" (
__tmp
),

1004 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1005 : "0" (
__tmp
),

1006 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

1009 (Ë
	`mem˝y
 (
__tmp
, 
__§c
, 
__§˛í
);

1010  
__de°
;

1011 
	}
}

1013 
__STRING_INLINE
 *
__°rˇt_g
 (*
__de°
, c⁄° *
__§c
);

1015 
__STRING_INLINE
 *

1016 
	$__°rˇt_g
 (*
__de°
, c⁄° *
__§c
)

1018 *
__tmp
 = 
__de°
 - 1;

1019 
__dummy
;

1020 
__asm__
 
__vﬁ©ûe__


1032 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
),

1033 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1034 : "1" (
__tmp
), "2" (
__§c
),

1035 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

1037  
__de°
;

1038 
	}
}

1042 
	#_HAVE_STRING_ARCH_°∫ˇt
 1

	)

1043 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

1044 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

1045 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

1046 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

1047 ? 
	`°rˇt
 (
__de°
, (
§c
)) \

1048 : (*(*)
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

1049 (c⁄° *Ë(
§c
), \

1050 (
n
)Ë0, 
__de°
)) \

1051 : 
	`__°∫ˇt_g
 (
__de°
, (
§c
), (
n
)); }))

	)

1053 
__STRING_INLINE
 *
__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[],

1054 
size_t
 
__n
);

1056 
__STRING_INLINE
 *

1057 
	$__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__n
)

1059 *
__tmp
 = 
__de°
;

1060 
__dummy
;

1061 #ifde‡
__i686__


1062 
__asm__
 
__vﬁ©ûe__


1076 : "=&a" (
__dummy
), "=&D" (
__tmp
), "=&S" (
__§c
), "=&c" (
__n
)

1077 : "g" (
__n
), "0" (0), "1" (
__tmp
), "2" (
__§c
), "3" (0xffffffff)

1080 --
__tmp
;

1081 
__asm__
 
__vﬁ©ûe__


1098 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__n
)

1099 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
)

1102  
__de°
;

1103 
	}
}

1107 
	#_HAVE_STRING_ARCH_°rcmp
 1

	)

1108 
	#°rcmp
(
s1
, 
s2
) \

1109 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

1110 && ( ((
s1
)[0]Ë!1 || 
	`°æí
 (s1) >= 4) \

1111 && ( ((
s2
)[0]Ë!1 || 
	`°æí
 (s2) >= 4) \

1112 ? 
	`memcmp
 ((c⁄° *Ë(
s1
), (c⁄° *Ë(
s2
), \

1113 (
	`°æí
 (
s1
Ë< såÀ¿(
s2
) \

1114 ? 
	`°æí
 (
s1
Ë: såÀ¿(
s2
)) + 1) \

1115 : (
	`__buûtö_c⁄°™t_p
 (
s1
) &&  ((s1)[0]) == 1 \

1116 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (
s1
) < 4 \

1117 ? (
	`__buûtö_c⁄°™t_p
 (
s2
) &&  ((s2)[0]) == 1 \

1118 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1119 (c⁄° *Ë(
s2
), \

1120 
	`°æí
 (
s1
)) \

1121 : 
	`__°rcmp_cg
 ((c⁄° *Ë(
s1
), \

1122 (c⁄° *Ë(
s2
), \

1123 
	`°æí
 (
s1
))) \

1124 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&&  ((
s1
)[0]) == 1 \

1125 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (s2) < 4 \

1126 ? (
	`__buûtö_c⁄°™t_p
 (
s1
) \

1127 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1128 (c⁄° *Ë(
s2
), \

1129 
	`°æí
 (
s2
)) \

1130 : 
	`__°rcmp_gc
 ((c⁄° *Ë(
s1
), \

1131 (c⁄° *Ë(
s2
), \

1132 
	`°æí
 (
s2
))) \

1133 : 
	`__°rcmp_gg
 ((
s1
), (
s2
))))))

	)

1135 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

1136 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = (
s1
)[0] - (
s2
)[0]; \

1137 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

1139 
__ªsu…
 = (
s1
)[1] - (
s2
)[1]; \

1140 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

1142 
__ªsu…
 = (
s1
)[2] - (
s2
)[2]; \

1143 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

1144 
__ªsu…
 = (
s1
)[3] - (
s2
)[3]; \

1147 
__ªsu…
; }))

	)

1149 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

1150 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = (
s2
); \

1151 
__ªsu…
 = (
s1
)[0] - 
__s2
[0]; \

1152 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

1154 
__ªsu…
 = (
s1
)[1] - 
__s2
[1]; \

1155 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

1157 
__ªsu…
 = (
s1
)[2] - 
__s2
[2]; \

1158 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

1159 
__ªsu…
 = (
s1
)[3] - 
__s2
[3]; \

1162 
__ªsu…
; }))

	)

1164 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

1165 (
	`__exãnsi⁄__
 ({ c⁄° *
__s1
 = (
s1
); \

1166 
__ªsu…
 = 
__s1
[0] - (
s2
)[0]; \

1167 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

1169 
__ªsu…
 = 
__s1
[1] - (
s2
)[1]; \

1170 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

1172 
__ªsu…
 = 
__s1
[2] - (
s2
)[2]; \

1173 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

1174 
__ªsu…
 = 
__s1
[3] - (
s2
)[3]; \

1177 
__ªsu…
; }))

	)

1179 
__STRING_INLINE
 
__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
);

1181 
__STRING_INLINE
 

1182 
	$__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
)

1184 
__ªs
;

1185 
__asm__
 
__vﬁ©ûe__


1201 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
)

1202 : "1" (
__s1
), "2" (
__s2
),

1203 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s1
),

1204 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s2
)

1206  
__ªs
;

1207 
	}
}

1211 
	#_HAVE_STRING_ARCH_°∫cmp
 1

	)

1212 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

1213 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`°æí
 (s1Ë< ((
size_t
Ë(
n
)) \

1214 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1215 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`°æí
 (s2Ë< ((
size_t
Ë(
n
))\

1216 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1217 : 
	`__°∫cmp_g
 ((
s1
), (
s2
), (
n
)))))

	)

1219 
__STRING_INLINE
 
__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
,

1220 
size_t
 
__n
);

1222 
__STRING_INLINE
 

1223 
	$__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

1225 
__ªs
;

1226 
__asm__
 
__vﬁ©ûe__


1245 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
), "=&r" (
__n
)

1246 : "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

1247 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

1248 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

1250  
__ªs
;

1251 
	}
}

1255 
	#_HAVE_STRING_ARCH_°rchr
 1

	)

1256 
	#_USE_STRING_ARCH_°rchr
 1

	)

1257 
	#°rchr
(
s
, 
c
) \

1258 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1259 ? ((
c
) == '\0' \

1260 ? (*Ë
	`__øwmemchr
 ((
s
), (
c
)) \

1261 : 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1262 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1264 
__STRING_INLINE
 *
__°rchr_c
 (c⁄° *
__s
, 
__c
);

1266 
__STRING_INLINE
 *

1267 
	$__°rchr_c
 (c⁄° *
__s
, 
__c
)

1269 
__d0
;

1270 *
__ªs
;

1271 
__asm__
 
__vﬁ©ûe__


1281 : "Ù" (
__ªs
), "=&a" (
__d0
)

1282 : "0" (
__s
), "1" (
__c
),

1283 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1285  
__ªs
;

1286 
	}
}

1288 
__STRING_INLINE
 *
__°rchr_g
 (c⁄° *
__s
, 
__c
);

1290 
__STRING_INLINE
 *

1291 
	$__°rchr_g
 (c⁄° *
__s
, 
__c
)

1293 
__d0
;

1294 *
__ªs
;

1295 
__asm__
 
__vﬁ©ûe__


1306 : "Ù" (
__ªs
), "=&a" (
__d0
)

1307 : "0" (
__s
), "1" (
__c
),

1308 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1310  
__ªs
;

1311 
	}
}

1315 
	#_HAVE_STRING_ARCH_°rch∫ul
 1

	)

1316 
	#__°rch∫ul
(
s
, 
c
) \

1317 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1318 ? ((
c
) == '\0' \

1319 ? (*Ë
	`__øwmemchr
 ((
s
), 
c
) \

1320 : 
	`__°rch∫ul_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1321 : 
	`__°rch∫ul_g
 ((
s
), 
c
)))

	)

1323 
__STRING_INLINE
 *
__°rch∫ul_c
 (c⁄° *
__s
, 
__c
);

1325 
__STRING_INLINE
 *

1326 
	$__°rch∫ul_c
 (c⁄° *
__s
, 
__c
)

1328 
__d0
;

1329 *
__ªs
;

1330 
__asm__
 
__vﬁ©ûe__


1340 : "Ù" (
__ªs
), "=&a" (
__d0
)

1341 : "0" (
__s
), "1" (
__c
),

1342 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1344  
__ªs
;

1345 
	}
}

1347 
__STRING_INLINE
 *
__°rch∫ul_g
 (c⁄° *
__s
, 
__c
);

1349 
__STRING_INLINE
 *

1350 
	$__°rch∫ul_g
 (c⁄° *
__s
, 
__c
)

1352 
__d0
;

1353 *
__ªs
;

1354 
__asm__
 
__vﬁ©ûe__


1365 : "Ù" (
__ªs
), "=&a" (
__d0
)

1366 : "0" (
__s
), "1" (
__c
),

1367 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1369  
__ªs
;

1370 
	}
}

1371 #ifde‡
__USE_GNU


1372 
	#°rch∫ul
(
s
, 
c
Ë
	`__°rch∫ul
 ((s), (c))

	)

1376 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1378 
	#_HAVE_STRING_ARCH_ödex
 1

	)

1379 
	#ödex
(
s
, 
c
) \

1380 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1381 ? 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1382 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1387 
	#_HAVE_STRING_ARCH_°ºchr
 1

	)

1388 
	#°ºchr
(
s
, 
c
) \

1389 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1390 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1391 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1393 #ifde‡
__i686__


1394 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1396 
__STRING_INLINE
 *

1397 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1399 
__d0
, 
__d1
;

1400 *
__ªs
;

1401 
__asm__
 
__vﬁ©ûe__


1409 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1410 : "0" (1), "1" (
__s
), "2" (
__c
),

1411 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1413  
__ªs
 - 1;

1414 
	}
}

1416 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1418 
__STRING_INLINE
 *

1419 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1421 
__d0
, 
__d1
;

1422 *
__ªs
;

1423 
__asm__
 
__vﬁ©ûe__


1432 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1433 : "0" (1), "1" (
__s
), "2" (
__c
),

1434 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1436  
__ªs
 - 1;

1437 
	}
}

1439 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1441 
__STRING_INLINE
 *

1442 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1444 
__d0
, 
__d1
;

1445 *
__ªs
;

1446 
__asm__
 
__vﬁ©ûe__


1456 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1457 : "0" (0), "1" (
__s
), "2" (
__c
),

1458 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1460  
__ªs
;

1461 
	}
}

1463 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1465 
__STRING_INLINE
 *

1466 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1468 
__d0
, 
__d1
;

1469 *
__ªs
;

1470 
__asm__
 
__vﬁ©ûe__


1481 : "Ù" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1482 : "0" (0), "1" (
__s
), "2" (
__c
),

1483 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1485  
__ªs
;

1486 
	}
}

1490 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1492 
	#_HAVE_STRING_ARCH_rödex
 1

	)

1493 
	#rödex
(
s
, 
c
) \

1494 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1495 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1496 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1502 
	#_HAVE_STRING_ARCH_°rc•n
 1

	)

1503 
	#°rc•n
(
s
, 
ªje˘
) \

1504 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
) &&  ((reject)[0]) == 1 \

1505 ? ((
ªje˘
)[0] == '\0' \

1506 ? 
	`°æí
 (
s
) \

1507 : ((
ªje˘
)[1] == '\0' \

1508 ? 
	`__°rc•n_c1
 ((
s
), (((
ªje˘
)[0] << 8) & 0xff00)) \

1509 : 
	`__°rc•n_cg
 ((
s
), (
ªje˘
), 
	`°æí
 (reject)))) \

1510 : 
	`__°rc•n_g
 ((
s
), (
ªje˘
))))

	)

1512 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
);

1514 #i‚de‡
_FORCE_INLINES


1515 
__STRING_INLINE
 
size_t


1516 
	$__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
)

1518 
__d0
;

1519 *
__ªs
;

1520 
__asm__
 
__vﬁ©ûe__


1529 : "Ù" (
__ªs
), "=&a" (
__d0
)

1530 : "0" (
__s
), "1" (
__ªje˘
),

1531 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1533  (
__ªs
 - 1Ë- 
__s
;

1534 
	}
}

1537 
__STRING_INLINE
 
size_t
 
__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[],

1538 
size_t
 
__ªje˘_Àn
);

1540 
__STRING_INLINE
 
size_t


1541 
	$__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[], 
size_t
 
__ªje˘_Àn
)

1543 
__d0
, 
__d1
, 
__d2
;

1544 c⁄° *
__ªs
;

1545 
__asm__
 
__vﬁ©ûe__


1556 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1557 : "0" (
__s
), "d" (
__ªje˘
), "g" (
__ªje˘_Àn
)

1559  (
__ªs
 - 1Ë- 
__s
;

1560 
	}
}

1562 
__STRING_INLINE
 
size_t
 
__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
);

1563 #ifde‡
__PIC__


1565 
__STRING_INLINE
 
size_t


1566 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1568 
__d0
, 
__d1
, 
__d2
;

1569 c⁄° *
__ªs
;

1570 
__asm__
 
__vﬁ©ûe__


1587 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1588 : "r" (
__ªje˘
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1590  (
__ªs
 - 1Ë- 
__s
;

1591 
	}
}

1593 
__STRING_INLINE
 
size_t


1594 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1596 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1597 c⁄° *
__ªs
;

1598 
__asm__
 
__vﬁ©ûe__


1612 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1613 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ªje˘
), "b" (__reject)

1616  (
__ªs
 - 1Ë- 
__s
;

1617 
	}
}

1623 
	#_HAVE_STRING_ARCH_°r•n
 1

	)

1624 
	#°r•n
(
s
, 
ac˚±
) \

1625 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1626 ? ((
ac˚±
)[0] == '\0' \

1627 ? ((Ë(
s
), 0) \

1628 : ((
ac˚±
)[1] == '\0' \

1629 ? 
	`__°r•n_c1
 ((
s
), (((
ac˚±
)[0] << 8 ) & 0xff00)) \

1630 : 
	`__°r•n_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1631 : 
	`__°r•n_g
 ((
s
), (
ac˚±
))))

	)

1633 #i‚de‡
_FORCE_INLINES


1634 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
);

1636 
__STRING_INLINE
 
size_t


1637 
	$__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
)

1639 
__d0
;

1640 *
__ªs
;

1642 
__asm__
 
__vﬁ©ûe__


1648 : "Ù" (
__ªs
), "=&q" (
__d0
)

1649 : "0" (
__s
), "1" (
__ac˚±
),

1650 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1652  (
__ªs
 - 1Ë- 
__s
;

1653 
	}
}

1656 
__STRING_INLINE
 
size_t
 
__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1657 
size_t
 
__ac˚±_Àn
);

1659 
__STRING_INLINE
 
size_t


1660 
	$__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1662 
__d0
, 
__d1
, 
__d2
;

1663 c⁄° *
__ªs
;

1664 
__asm__
 
__vﬁ©ûe__


1675 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1676 : "0" (
__s
), "g" (
__ac˚±
), "g" (
__ac˚±_Àn
),

1679 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
),

1680 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__ac˚±_Àn
]; } *)
__ac˚±
)

1682  (
__ªs
 - 1Ë- 
__s
;

1683 
	}
}

1685 
__STRING_INLINE
 
size_t
 
__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1686 #ifde‡
__PIC__


1688 
__STRING_INLINE
 
size_t


1689 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1691 
__d0
, 
__d1
, 
__d2
;

1692 c⁄° *
__ªs
;

1693 
__asm__
 
__vﬁ©ûe__


1709 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1710 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (__accept)

1712  (
__ªs
 - 1Ë- 
__s
;

1713 
	}
}

1715 
__STRING_INLINE
 
size_t


1716 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1718 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1719 c⁄° *
__ªs
;

1720 
__asm__
 
__vﬁ©ûe__


1734 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1735 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ac˚±
), "b" (__accept)

1737  (
__ªs
 - 1Ë- 
__s
;

1738 
	}
}

1743 
	#_HAVE_STRING_ARCH_°Ωbrk
 1

	)

1744 
	#°Ωbrk
(
s
, 
ac˚±
) \

1745 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1746 ? ((
ac˚±
)[0] == '\0' \

1747 ? ((Ë(
s
), (*) 0) \

1748 : ((
ac˚±
)[1] == '\0' \

1749 ? 
	`°rchr
 ((
s
), (
ac˚±
)[0]) \

1750 : 
	`__°Ωbrk_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1751 : 
	`__°Ωbrk_g
 ((
s
), (
ac˚±
))))

	)

1753 
__STRING_INLINE
 *
__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1754 
size_t
 
__ac˚±_Àn
);

1756 
__STRING_INLINE
 *

1757 
	$__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1759 
__d0
, 
__d1
, 
__d2
;

1760 *
__ªs
;

1761 
__asm__
 
__vﬁ©ûe__


1776 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1777 : "0" (
__s
), "d" (
__ac˚±
), "g" (
__ac˚±_Àn
)

1779  
__ªs
;

1780 
	}
}

1782 
__STRING_INLINE
 *
__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1783 #ifde‡
__PIC__


1785 
__STRING_INLINE
 *

1786 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1788 
__d0
, 
__d1
, 
__d2
;

1789 *
__ªs
;

1790 
__asm__
 
__vﬁ©ûe__


1811 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1812 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1814  
__ªs
;

1815 
	}
}

1817 
__STRING_INLINE
 *

1818 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1820 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1821 *
__ªs
;

1822 
__asm__
 
__vﬁ©ûe__


1841 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&d" (
__d2
), "=&D" (
__d3
)

1842 : "0" (
__s
), "1" (0), "2" (0xffffffff), "b" (
__ac˚±
)

1844  
__ªs
;

1845 
	}
}

1850 
	#_HAVE_STRING_ARCH_°r°r
 1

	)

1851 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1852 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
) &&  ((needle)[0]) == 1 \

1853 ? ((
√edÀ
)[0] == '\0' \

1854 ? (
hay°ack
) \

1855 : ((
√edÀ
)[1] == '\0' \

1856 ? 
	`°rchr
 ((
hay°ack
), (
√edÀ
)[0]) \

1857 : 
	`__°r°r_cg
 ((
hay°ack
), (
√edÀ
), \

1858 
	`°æí
 (
√edÀ
)))) \

1859 : 
	`__°r°r_g
 ((
hay°ack
), (
√edÀ
))))

	)

1863 
__STRING_INLINE
 *
__°r°r_cg
 (c⁄° *
__hay°ack
,

1864 c⁄° 
__√edÀ
[],

1865 
size_t
 
__√edÀ_Àn
);

1867 
__STRING_INLINE
 *

1868 
	$__°r°r_cg
 (c⁄° *
__hay°ack
, c⁄° 
__√edÀ
[],

1869 
size_t
 
__√edÀ_Àn
)

1871 
__d0
, 
__d1
, 
__d2
;

1872 *
__ªs
;

1873 
__asm__
 
__vﬁ©ûe__


1886 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

1887 : "g" (
__√edÀ_Àn
), "1" (
__hay°ack
), "d" (
__√edÀ
)

1889  
__ªs
;

1890 
	}
}

1892 
__STRING_INLINE
 *
__°r°r_g
 (c⁄° *
__hay°ack
,

1893 c⁄° *
__√edÀ
);

1894 #ifde‡
__PIC__


1896 
__STRING_INLINE
 *

1897 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1899 
__d0
, 
__d1
, 
__d2
;

1900 *
__ªs
;

1901 
__asm__
 
__vﬁ©ûe__


1920 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
)

1921 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1922 "d" (
__√edÀ
)

1924  
__ªs
;

1925 
	}
}

1927 
__STRING_INLINE
 *

1928 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1930 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1931 *
__ªs
;

1932 
__asm__
 
__vﬁ©ûe__


1949 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1950 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1951 "b" (
__√edÀ
)

1953  
__ªs
;

1954 
	}
}

1960 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1961 #ifde‡
__i686__


1962 
	#_HAVE_STRING_ARCH_ffs
 1

	)

1963 
	#ffs
(
w‹d
Ë(
	`__buûtö_c⁄°™t_p
 (word) \

1964 ? 
	`__buûtö_ffs
 (
w‹d
) \

1965 : ({ 
__˙t
, 
__tmp
; \

1966 
__asm__
 
__vﬁ©ûe__
 \

1969 : "=&r" (
__˙t
), "Ù" (
__tmp
) \

1970 : "rm" (
w‹d
), "1" (-1)); \

1971 
__˙t
 + 1; }))

	)

1973 #i‚de‡
ff¶


1974 
	#ff¶
(
w‹d
Ë
	`ffs
(w‹d)

	)

1979 #i‚de‡
_FORCE_INLINES


1980 #unde‡
__STRING_INLINE


	@/usr/include/bits/string2.h

20 #i‚de‡
_STRING_H


24 #i‚de‡
__NO_STRING_INLINES


41 #i‚de‡
__STRING_INLINE


42 #ifde‡
__˝lu•lus


43 
	#__STRING_INLINE
 
ölöe


	)

45 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

49 #i‡
_STRING_ARCH_u«lig√d


51 
	~<ídün.h
>

52 
	~<bôs/ty≥s.h
>

54 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


55 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

56 (((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

57 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
])

	)

58 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

59 (((((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

60 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

61 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

62 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
])

	)

64 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

65 (((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
] << 8 \

66 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1])

	)

67 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

68 (((((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
] << 8 \

69 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

70 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

71 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 3])

	)

76 
	#__STRING2_COPY_TYPE
(
N
) \

77 °ru˘ { 
__¨r
[
N
]; } \

78 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

79 
	t__STRING2_COPY_TYPE
 (2);

80 
__STRING2_COPY_TYPE
 (3);

81 
__STRING2_COPY_TYPE
 (4);

82 
__STRING2_COPY_TYPE
 (5);

83 
__STRING2_COPY_TYPE
 (6);

84 
__STRING2_COPY_TYPE
 (7);

85 
__STRING2_COPY_TYPE
 (8);

86 #unde‡
__STRING2_COPY_TYPE


92 
	#__°rög2_1b±r_p
(
__x
) \

93 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

96 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


97 #i‡!
__GNUC_PREREQ
 (3, 0)

98 #i‡
_STRING_ARCH_u«lig√d


99 
	#mem£t
(
s
, 
c
, 
n
) \

100 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

101 ? ((
n
) == 1 \

102 ? 
	`__mem£t_1
 (
s
, 
c
) \

103 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

104 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

105 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

106 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

108 
	#__mem£t_1
(
s
, 
c
Ë({ *
__s
 = (s); \

109 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË
c
; __s; })

	)

111 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

112 ({ *
__s
 = (
s
); \

114 
__ui
; \

115 
__usi
; \

116 
__uc
; \

117 } *
__u
 = 
__s
; \

118 
__uöt8_t
 
__c
 = (__uöt8_tË(
c
); \

121 (Ë(
n
)) \

124 
__u
->
__ui
 = 
__c
 * 0x01010101; \

125 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

127 
__u
->
__ui
 = 
__c
 * 0x01010101; \

128 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

130 
__u
->
__ui
 = 
__c
 * 0x01010101; \

131 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

133 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

134 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

135 
__u
->
__uc
 = (Ë
__c
; \

139 
__u
->
__ui
 = 
__c
 * 0x01010101; \

140 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

142 
__u
->
__ui
 = 
__c
 * 0x01010101; \

143 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

145 
__u
->
__ui
 = 
__c
 * 0x01010101; \

146 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

148 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

152 
__u
->
__ui
 = 
__c
 * 0x01010101; \

153 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

155 
__u
->
__ui
 = 
__c
 * 0x01010101; \

156 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

158 
__u
->
__ui
 = 
__c
 * 0x01010101; \

159 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

161 
__u
->
__uc
 = (Ë
__c
; \

165 
__u
->
__ui
 = 
__c
 * 0x01010101; \

166 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

168 
__u
->
__ui
 = 
__c
 * 0x01010101; \

169 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

171 
__u
->
__ui
 = 
__c
 * 0x01010101; \

172 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

174 
__u
->
__ui
 = 
__c
 * 0x01010101; \

179 
__s
; })

	)

181 
	#mem£t
(
s
, 
c
, 
n
) \

182 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

183 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

184 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

193 #i‡
__GNUC_PREREQ
 (2, 91)

194 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

202 #ifde‡
__USE_GNU


203 #i‡!
deföed
 
_HAVE_STRING_ARCH_memp˝y
 || deföed 
_FORCE_INLINES


204 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


205 #i‡
__GNUC_PREREQ
 (3, 4)

206 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_memp˝y
 (de°, src,Ç)

	)

207 #ñi‡
__GNUC_PREREQ
 (3, 0)

208 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

209 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

210 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

211 ? 
	`__buûtö_mem˝y
 (
de°
, 
§c
, 
n
) + (n) \

212 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

214 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

215 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

216 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

217 ? 
	`__memp˝y_smÆl
 (
de°
, 
	`__memp˝y_¨gs
 (
§c
), 
n
) \

218 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

222 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

225 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


226 #i‡
_STRING_ARCH_u«lig√d


227 #i‚de‡
_FORCE_INLINES


228 
	#__memp˝y_¨gs
(
§c
) \

229 ((c⁄° *Ë(
§c
))[0], ((const *) (src))[2], \

230 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[6], \

231 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

232 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

233 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

234 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

236 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

237 
__uöt16_t
, __uöt16_t, 
__uöt32_t
,

238 
__uöt32_t
, 
size_t
);

239 
__STRING_INLINE
 *

240 
	$__memp˝y_smÆl
 (*
__de°1
,

241 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

242 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

243 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

244 
size_t
 
__§˛í
)

247 
__uöt32_t
 
__ui
;

248 
__uöt16_t
 
__usi
;

249 
__uc
;

250 
__c
;

251 } *
__u
 = 
__de°1
;

252 (Ë
__§˛í
)

255 
__u
->
__c
 = 
__§c0_1
;

256 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

259 
__u
->
__usi
 = 
__§c0_2
;

260 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

263 
__u
->
__usi
 = 
__§c0_2
;

264 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

265 
__u
->
__c
 = 
__§c2_1
;

266 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

269 
__u
->
__ui
 = 
__§c0_4
;

270 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

273 
__u
->
__ui
 = 
__§c0_4
;

274 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

275 
__u
->
__c
 = 
__§c4_1
;

276 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

279 
__u
->
__ui
 = 
__§c0_4
;

280 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

281 
__u
->
__usi
 = 
__§c4_2
;

282 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

285 
__u
->
__ui
 = 
__§c0_4
;

286 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

287 
__u
->
__usi
 = 
__§c4_2
;

288 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

289 
__u
->
__c
 = 
__§c6_1
;

290 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

293 
__u
->
__ui
 = 
__§c0_4
;

294 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

295 
__u
->
__ui
 = 
__§c4_4
;

296 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

299  (*Ë
__u
;

300 
	}
}

302 #i‚de‡
_FORCE_INLINES


303 
	#__memp˝y_¨gs
(
§c
) \

304 ((c⁄° *Ë(
§c
))[0], \

305 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

306 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1] } }), \

307 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

308 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

309 ((c⁄° *Ë(
§c
))[2] } }), \

310 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

311 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

312 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3] } }), \

313 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

314 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

315 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

316 ((c⁄° *Ë(
§c
))[4] } }), \

317 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

318 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

319 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

320 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5] } }), \

321 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

322 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

323 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

324 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

325 ((c⁄° *Ë(
§c
))[6] } }), \

326 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

327 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

328 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

329 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

330 ((c⁄° *Ë(
§c
))[6], ((c⁄° *Ë(§c))[7] } })

	)

332 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , 
__STRING2_COPY_ARR2
,

333 
__STRING2_COPY_ARR3
,

334 
__STRING2_COPY_ARR4
,

335 
__STRING2_COPY_ARR5
,

336 
__STRING2_COPY_ARR6
,

337 
__STRING2_COPY_ARR7
,

338 
__STRING2_COPY_ARR8
, 
size_t
);

339 
__STRING_INLINE
 *

340 
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

341 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

342 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

343 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

344 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

347 
__c
;

348 
__STRING2_COPY_ARR2
 
__sˇ2
;

349 
__STRING2_COPY_ARR3
 
__sˇ3
;

350 
__STRING2_COPY_ARR4
 
__sˇ4
;

351 
__STRING2_COPY_ARR5
 
__sˇ5
;

352 
__STRING2_COPY_ARR6
 
__sˇ6
;

353 
__STRING2_COPY_ARR7
 
__sˇ7
;

354 
__STRING2_COPY_ARR8
 
__sˇ8
;

355 } *
__u
 = 
__de°
;

356 (Ë
__§˛í
)

359 
__u
->
__c
 = 
__§c1
;

362 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

365 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

368 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

371 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

374 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

377 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

380 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

383  
	`__exãnsi⁄__
 ((*Ë
__u
 + 
__§˛í
);

384 
	}
}

392 #i‚de‡
_HAVE_STRING_ARCH_°rchr


393 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

394 #i‡
__GNUC_PREREQ
 (3, 2)

395 
	#°rchr
(
s
, 
c
) \

396 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

397 && (
c
) == '\0' \

398 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

399 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

401 
	#°rchr
(
s
, 
c
) \

402 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

403 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

404 : 
	`°rchr
 (
s
, 
c
)))

	)

410 #i‡(!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

411 || 
deföed
 
	g_FORCE_INLINES


412 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

413 
	#°r˝y
(
de°
, 
§c
) \

414 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

415 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

416 ? 
	`__°r˝y_smÆl
 (
de°
, 
	`__°r˝y_¨gs
 (
§c
), \

417 
	`°æí
 (
§c
) + 1) \

418 : (*Ë
	`mem˝y
 (
de°
, 
§c
, 
	`°æí
 (src) + 1)) \

419 : 
	`°r˝y
 (
de°
, 
§c
)))

	)

422 #i‡
_STRING_ARCH_u«lig√d


423 #i‚de‡
_FORCE_INLINES


424 
	#__°r˝y_¨gs
(
§c
) \

425 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

426 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

427 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

428 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

430 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

431 
__uöt32_t
, __uöt32_t, 
size_t
);

432 
__STRING_INLINE
 *

433 
	$__°r˝y_smÆl
 (*
__de°
,

434 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

435 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

436 
size_t
 
__§˛í
)

439 
__uöt32_t
 
__ui
;

440 
__uöt16_t
 
__usi
;

441 
__uc
;

442 } *
__u
 = (*Ë
__de°
;

443 (Ë
__§˛í
)

446 
__u
->
__uc
 = '\0';

449 
__u
->
__usi
 = 
__§c0_2
;

452 
__u
->
__usi
 = 
__§c0_2
;

453 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

454 
__u
->
__uc
 = '\0';

457 
__u
->
__ui
 = 
__§c0_4
;

460 
__u
->
__ui
 = 
__§c0_4
;

461 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

462 
__u
->
__uc
 = '\0';

465 
__u
->
__ui
 = 
__§c0_4
;

466 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

467 
__u
->
__usi
 = 
__§c4_2
;

470 
__u
->
__ui
 = 
__§c0_4
;

471 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

472 
__u
->
__usi
 = 
__§c4_2
;

473 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

474 
__u
->
__uc
 = '\0';

477 
__u
->
__ui
 = 
__§c0_4
;

478 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

479 
__u
->
__ui
 = 
__§c4_4
;

482  
__de°
;

483 
	}
}

485 #i‚de‡
_FORCE_INLINES


486 
	#__°r˝y_¨gs
(
§c
) \

487 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

488 { { ((c⁄° *Ë(
§c
))[0], '\0' } }), \

489 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

490 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

492 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

493 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

494 ((c⁄° *Ë(
§c
))[2], '\0' } }), \

495 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

496 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

497 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

499 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

500 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

501 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

502 ((c⁄° *Ë(
§c
))[4], '\0' } }), \

503 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

504 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

505 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

506 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

508 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

509 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

510 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

511 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

512 ((c⁄° *Ë(
§c
))[6], '\0' } })

	)

514 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

515 
__STRING2_COPY_ARR3
,

516 
__STRING2_COPY_ARR4
,

517 
__STRING2_COPY_ARR5
,

518 
__STRING2_COPY_ARR6
,

519 
__STRING2_COPY_ARR7
,

520 
__STRING2_COPY_ARR8
, 
size_t
);

521 
__STRING_INLINE
 *

522 
	$__°r˝y_smÆl
 (*
__de°
,

523 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

524 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

525 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

526 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

529 
__c
;

530 
__STRING2_COPY_ARR2
 
__sˇ2
;

531 
__STRING2_COPY_ARR3
 
__sˇ3
;

532 
__STRING2_COPY_ARR4
 
__sˇ4
;

533 
__STRING2_COPY_ARR5
 
__sˇ5
;

534 
__STRING2_COPY_ARR6
 
__sˇ6
;

535 
__STRING2_COPY_ARR7
 
__sˇ7
;

536 
__STRING2_COPY_ARR8
 
__sˇ8
;

537 } *
__u
 = (*Ë
__de°
;

538 (Ë
__§˛í
)

541 
__u
->
__c
 = '\0';

544 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

547 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

550 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

553 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

556 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

559 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

562 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

565  
__de°
;

566 
	}
}

572 #ifde‡
__USE_GNU


573 #i‡!
deföed
 
_HAVE_STRING_ARCH_°p˝y
 || deföed 
_FORCE_INLINES


574 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


575 #i‡
__GNUC_PREREQ
 (3, 4)

576 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

577 #ñi‡
__GNUC_PREREQ
 (3, 0)

578 
	#__°p˝y
(
de°
, 
§c
) \

579 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

580 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

581 ? 
	`__buûtö_°r˝y
 (
de°
, 
§c
Ë+ 
	`°æí
 (src) \

582 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

584 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

586 
	#__°p˝y
(
de°
, 
§c
) \

587 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

588 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

589 ? 
	`__°p˝y_smÆl
 (
de°
, 
	`__°p˝y_¨gs
 (
§c
), \

590 
	`°æí
 (
§c
) + 1) \

591 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

593 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

597 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

600 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


601 #i‡
_STRING_ARCH_u«lig√d


602 #i‚de‡
_FORCE_INLINES


603 
	#__°p˝y_¨gs
(
§c
) \

604 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

605 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

606 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

607 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

609 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

610 
__uöt32_t
, __uöt32_t, 
size_t
);

611 
__STRING_INLINE
 *

612 
	$__°p˝y_smÆl
 (*
__de°
,

613 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

614 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

615 
size_t
 
__§˛í
)

618 
__ui
;

619 
__usi
;

620 
__uc
;

621 
__c
;

622 } *
__u
 = (*Ë
__de°
;

623 (Ë
__§˛í
)

626 
__u
->
__uc
 = '\0';

629 
__u
->
__usi
 = 
__§c0_2
;

630 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

633 
__u
->
__usi
 = 
__§c0_2
;

634 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

635 
__u
->
__uc
 = '\0';

638 
__u
->
__ui
 = 
__§c0_4
;

639 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

642 
__u
->
__ui
 = 
__§c0_4
;

643 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

644 
__u
->
__uc
 = '\0';

647 
__u
->
__ui
 = 
__§c0_4
;

648 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

649 
__u
->
__usi
 = 
__§c4_2
;

650 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

653 
__u
->
__ui
 = 
__§c0_4
;

654 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

655 
__u
->
__usi
 = 
__§c4_2
;

656 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

657 
__u
->
__uc
 = '\0';

660 
__u
->
__ui
 = 
__§c0_4
;

661 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

662 
__u
->
__ui
 = 
__§c4_4
;

663 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

666  &
__u
->
__c
;

667 
	}
}

669 #i‚de‡
_FORCE_INLINES


670 
	#__°p˝y_¨gs
(
§c
) \

671 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

672 { { ((c⁄° *Ë(
§c
))[0], '\0' } }), \

673 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

674 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

676 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

677 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

678 ((c⁄° *Ë(
§c
))[2], '\0' } }), \

679 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

680 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

681 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

683 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

684 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

685 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

686 ((c⁄° *Ë(
§c
))[4], '\0' } }), \

687 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

688 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

689 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

690 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

692 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

693 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

694 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

695 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

696 ((c⁄° *Ë(
§c
))[6], '\0' } })

	)

698 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

699 
__STRING2_COPY_ARR3
,

700 
__STRING2_COPY_ARR4
,

701 
__STRING2_COPY_ARR5
,

702 
__STRING2_COPY_ARR6
,

703 
__STRING2_COPY_ARR7
,

704 
__STRING2_COPY_ARR8
, 
size_t
);

705 
__STRING_INLINE
 *

706 
	$__°p˝y_smÆl
 (*
__de°
,

707 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

708 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

709 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

710 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

713 
__c
;

714 
__STRING2_COPY_ARR2
 
__sˇ2
;

715 
__STRING2_COPY_ARR3
 
__sˇ3
;

716 
__STRING2_COPY_ARR4
 
__sˇ4
;

717 
__STRING2_COPY_ARR5
 
__sˇ5
;

718 
__STRING2_COPY_ARR6
 
__sˇ6
;

719 
__STRING2_COPY_ARR7
 
__sˇ7
;

720 
__STRING2_COPY_ARR8
 
__sˇ8
;

721 } *
__u
 = (*Ë
__de°
;

722 (Ë
__§˛í
)

725 
__u
->
__c
 = '\0';

728 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

731 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

734 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

737 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

740 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

743 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

746 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

749  
__de°
 + 
__§˛í
 - 1;

750 
	}
}

758 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


759 #i‡
__GNUC_PREREQ
 (3, 2)

760 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

762 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

763 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

764 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

765 ? (*Ë
	`mem˝y
 (
de°
, 
§c
, 
n
) \

766 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)) \

767 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)))

	)

773 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


774 #ifde‡
_USE_STRING_ARCH_°rchr


775 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

776 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

777 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

778 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

779 ? 
	`°rˇt
 (
__de°
, 
§c
) \

780 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

781 
§c
, 
n
)Ë'\0', 
__de°
)) \

782 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

783 #ñi‡
__GNUC_PREREQ
 (3, 2)

784 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

786 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

787 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

788 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

789 ? 
	`°rˇt
 (
de°
, 
§c
) \

790 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)) \

791 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)))

	)

797 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


798 #i‡
__GNUC_PREREQ
 (3, 2)

799 
	#°rcmp
(
s1
, 
s2
) \

800 
__exãnsi⁄__
 \

801 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

802 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

803 && (
__s1_Àn
 = 
	`__buûtö_°æí
 (
s1
), 
__s2_Àn
 = __buûtö_°æí (
s2
), \

804 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

805 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

806 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

807 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

808 && (
__s1_Àn
 = 
	`__buûtö_°æí
 (
s1
), __s1_len < 4) \

809 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

810 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

811 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

812 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

813 && (
__s2_Àn
 = 
	`__buûtö_°æí
 (
s2
), __s2_len < 4) \

814 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

815 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

816 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

817 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

819 
	#°rcmp
(
s1
, 
s2
) \

820 
__exãnsi⁄__
 \

821 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

822 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

823 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

824 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

825 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

826 ? 
	`memcmp
 ((c⁄° *Ë(
s1
), (c⁄° *Ë(
s2
), \

827 (
__s1_Àn
 < 
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

828 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

829 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

830 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

831 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Àn
) \

832 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

833 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

834 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

835 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

836 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Àn
) \

837 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

838 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

841 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

842 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

843 (((c⁄° *Ë(c⁄° *Ë(
s1
))[0] \

844 - ((c⁄° *Ë(c⁄° *)(
s2
))[0]); \

845 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

847 
__ªsu…
 = (((const *) \

848 (c⁄° *Ë(
s1
))[1] \

850 (c⁄° *Ë(
s2
))[1]); \

851 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

853 
__ªsu…
 = \

855 (c⁄° *Ë(
s1
))[2] \

857 (c⁄° *Ë(
s2
))[2]); \

858 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

859 
__ªsu…
 = \

861 (c⁄° *Ë(
s1
))[3] \

863 (c⁄° *Ë(
s2
))[3]); \

866 
__ªsu…
; }))

	)

868 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

869 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = \

870 (c⁄° *Ë(c⁄° *Ë(
s2
); \

871 
__ªsu…
 = \

872 (((c⁄° *Ë(c⁄° *Ë(
s1
))[0] \

873 - 
__s2
[0]); \

874 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

876 
__ªsu…
 = (((const *) \

877 (c⁄° *Ë(
s1
))[1] - 
__s2
[1]); \

878 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

880 
__ªsu…
 = (((const *) \

881 (c⁄° *Ë(
s1
))[2] - 
__s2
[2]); \

882 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

883 
__ªsu…
 = (((const *) \

884 (c⁄° *Ë(
s1
))[3] \

885 - 
__s2
[3]); \

888 
__ªsu…
; }))

	)

890 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
Ë(- 
	`__°rcmp_cg
 (s2, s1,Ü2))

	)

895 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


896 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

897 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

898 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

899 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

900 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

901 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

902 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

908 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rc•n
 || deföed 
_FORCE_INLINES


909 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


910 #i‡
__GNUC_PREREQ
 (3, 2)

911 
	#°rc•n
(
s
, 
ªje˘
) \

912 
__exãnsi⁄__
 \

913 ({ 
__r0
, 
__r1
, 
__r2
; \

914 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

915 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

916 ? 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
) \

917 : ((
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], __r0 == '\0') \

918 ? 
	`°æí
 (
s
) \

919 : ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], __r1 == '\0') \

920 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

921 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

922 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

923 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

924 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

925 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)))))) \

926 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)); })

	)

928 
	#°rc•n
(
s
, 
ªje˘
) \

929 
__exãnsi⁄__
 \

930 ({ 
__r0
, 
__r1
, 
__r2
; \

931 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

932 ? ((
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], __r0 == '\0') \

933 ? 
	`°æí
 (
s
) \

934 : ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], __r1 == '\0') \

935 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

936 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

937 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

938 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

939 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

940 : 
	`°rc•n
 (
s
, 
ªje˘
))))) \

941 : 
	`°rc•n
 (
s
, 
ªje˘
)); })

	)

945 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
);

946 
__STRING_INLINE
 
size_t


947 
	$__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
)

949 
size_t
 
__ªsu…
 = 0;

950 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

951 ++
__ªsu…
;

952  
__ªsu…
;

953 
	}
}

955 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (c⁄° *
__s
, 
__ªje˘1
,

956 
__ªje˘2
);

957 
__STRING_INLINE
 
size_t


958 
	$__°rc•n_c2
 (c⁄° *
__s
, 
__ªje˘1
, 
__ªje˘2
)

960 
size_t
 
__ªsu…
 = 0;

961 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


962 && 
__s
[
__ªsu…
] !
__ªje˘2
)

963 ++
__ªsu…
;

964  
__ªsu…
;

965 
	}
}

967 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (c⁄° *
__s
, 
__ªje˘1
,

968 
__ªje˘2
, 
__ªje˘3
);

969 
__STRING_INLINE
 
size_t


970 
	$__°rc•n_c3
 (c⁄° *
__s
, 
__ªje˘1
, 
__ªje˘2
,

971 
__ªje˘3
)

973 
size_t
 
__ªsu…
 = 0;

974 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


975 && 
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

976 ++
__ªsu…
;

977  
__ªsu…
;

978 
	}
}

984 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r•n
 || deföed 
_FORCE_INLINES


985 #i‚de‡
_HAVE_STRING_ARCH_°r•n


986 #i‡
__GNUC_PREREQ
 (3, 2)

987 
	#°r•n
(
s
, 
ac˚±
) \

988 
__exãnsi⁄__
 \

989 ({ 
__a0
, 
__a1
, 
__a2
; \

990 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

991 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

992 ? 
	`__buûtö_°r•n
 (
s
, 
ac˚±
) \

993 : ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

994 ? ((Ë(
s
), (
size_t
) 0) \

995 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

996 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

997 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

998 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

999 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1000 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1001 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)))))) \

1002 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)); })

	)

1004 
	#°r•n
(
s
, 
ac˚±
) \

1005 
__exãnsi⁄__
 \

1006 ({ 
__a0
, 
__a1
, 
__a2
; \

1007 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1008 ? ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1009 ? ((Ë(
s
), (
size_t
) 0) \

1010 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1011 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1012 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1013 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1014 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1015 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1016 : 
	`°r•n
 (
s
, 
ac˚±
))))) \

1017 : 
	`°r•n
 (
s
, 
ac˚±
)); })

	)

1021 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
);

1022 
__STRING_INLINE
 
size_t


1023 
	$__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
)

1025 
size_t
 
__ªsu…
 = 0;

1027 
__s
[
__ªsu…
] =
__ac˚±
)

1028 ++
__ªsu…
;

1029  
__ªsu…
;

1030 
	}
}

1032 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (c⁄° *
__s
, 
__ac˚±1
,

1033 
__ac˚±2
);

1034 
__STRING_INLINE
 
size_t


1035 
	$__°r•n_c2
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1037 
size_t
 
__ªsu…
 = 0;

1039 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

1040 ++
__ªsu…
;

1041  
__ªsu…
;

1042 
	}
}

1044 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (c⁄° *
__s
, 
__ac˚±1
,

1045 
__ac˚±2
, 
__ac˚±3
);

1046 
__STRING_INLINE
 
size_t


1047 
	$__°r•n_c3
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1049 
size_t
 
__ªsu…
 = 0;

1051 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1052 || 
__s
[
__ªsu…
] =
__ac˚±3
)

1053 ++
__ªsu…
;

1054  
__ªsu…
;

1055 
	}
}

1060 #i‡!
deföed
 
_HAVE_STRING_ARCH_°Ωbrk
 || deföed 
_FORCE_INLINES


1061 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1062 #i‡
__GNUC_PREREQ
 (3, 2)

1063 
	#°Ωbrk
(
s
, 
ac˚±
) \

1064 
__exãnsi⁄__
 \

1065 ({ 
__a0
, 
__a1
, 
__a2
; \

1066 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1067 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1068 ? 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
) \

1069 : ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1070 ? ((Ë(
s
), (*Ë
NULL
) \

1071 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1072 ? 
	`__buûtö_°rchr
 (
s
, 
__a0
) \

1073 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1074 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1075 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1076 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1077 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)))))) \

1078 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1080 
	#°Ωbrk
(
s
, 
ac˚±
) \

1081 
__exãnsi⁄__
 \

1082 ({ 
__a0
, 
__a1
, 
__a2
; \

1083 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1084 ? ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1085 ? ((Ë(
s
), (*Ë
NULL
) \

1086 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1087 ? 
	`°rchr
 (
s
, 
__a0
) \

1088 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1089 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1090 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1091 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1092 : 
	`°Ωbrk
 (
s
, 
ac˚±
))))) \

1093 : 
	`°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1097 
__STRING_INLINE
 *
__°Ωbrk_c2
 (c⁄° *
__s
, 
__ac˚±1
,

1098 
__ac˚±2
);

1099 
__STRING_INLINE
 *

1100 
	$__°Ωbrk_c2
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1103 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1104 ++
__s
;

1105  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1106 
	}
}

1108 
__STRING_INLINE
 *
__°Ωbrk_c3
 (c⁄° *
__s
, 
__ac˚±1
,

1109 
__ac˚±2
, 
__ac˚±3
);

1110 
__STRING_INLINE
 *

1111 
	$__°Ωbrk_c3
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1114 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1115 && *
__s
 !
__ac˚±3
)

1116 ++
__s
;

1117  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1118 
	}
}

1124 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1125 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1126 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&& 
	`__°rög2_1b±r_p
 (needle) \

1127 ? (((c⁄° *Ë(
√edÀ
))[0] == '\0' \

1128 ? (*Ë(
size_t
Ë(
hay°ack
) \

1129 : (((c⁄° *Ë(
√edÀ
))[1] == '\0' \

1130 ? 
	`°rchr
 (
hay°ack
, \

1131 ((c⁄° *Ë(
√edÀ
))[0]) \

1132 : 
	`°r°r
 (
hay°ack
, 
√edÀ
))) \

1133 : 
	`°r°r
 (
hay°ack
, 
√edÀ
)))

	)

1137 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


1138 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1139 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

1140 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

1141 && ((c⁄° *Ë(
£p
))[0] != '\0' \

1142 && ((c⁄° *Ë(
£p
))[1] == '\0' \

1143 ? 
	`__°πok_r_1c
 (
s
, ((c⁄° *Ë(
£p
))[0], 
√xç
) \

1144 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

1147 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1148 
__STRING_INLINE
 *

1149 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1151 *
__ªsu…
;

1152 i‡(
__s
 =
NULL
)

1153 
__s
 = *
__√xç
;

1154 *
__s
 =
__£p
)

1155 ++
__s
;

1156 
__ªsu…
 = 
NULL
;

1157 i‡(*
__s
 != '\0')

1159 
__ªsu…
 = 
__s
++;

1160 *
__s
 != '\0')

1161 i‡(*
__s
++ =
__£p
)

1163 
__s
[-1] = '\0';

1167 *
__√xç
 = 
__s
;

1168  
__ªsu…
;

1169 
	}
}

1170 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


1171 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1176 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


1177 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1179 *
__°r£p_g
 (**
__°rögp
, c⁄° *
__dñim
);

1180 
	#__°r£p
(
s
, 
ªje˘
) \

1181 
__exãnsi⁄__
 \

1182 ({ 
__r0
, 
__r1
, 
__r2
; \

1183 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

1184 && (
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], \

1185 ((c⁄° *Ë(
ªje˘
))[0] != '\0') \

1186 ? ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], \

1187 ((c⁄° *Ë(
ªje˘
))[1] == '\0') \

1188 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1189 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

1190 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1191 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

1192 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1193 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

1194 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

1197 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1198 
__STRING_INLINE
 *

1199 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1201 *
__ªtvÆ
 = *
__s
;

1202 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

1203 *(*
__s
)++ = '\0';

1204  
__ªtvÆ
;

1205 
	}
}

1207 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1208 
__STRING_INLINE
 *

1209 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1211 *
__ªtvÆ
 = *
__s
;

1212 i‡(
__ªtvÆ
 !
NULL
)

1214 *
__˝
 = 
__ªtvÆ
;

1217 i‡(*
__˝
 == '\0')

1219 
__˝
 = 
NULL
;

1222 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1224 *
__˝
++ = '\0';

1227 ++
__˝
;

1229 *
__s
 = 
__˝
;

1231  
__ªtvÆ
;

1232 
	}
}

1234 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1235 
__ªje˘3
);

1236 
__STRING_INLINE
 *

1237 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1239 *
__ªtvÆ
 = *
__s
;

1240 i‡(
__ªtvÆ
 !
NULL
)

1242 *
__˝
 = 
__ªtvÆ
;

1245 i‡(*
__˝
 == '\0')

1247 
__˝
 = 
NULL
;

1250 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1252 *
__˝
++ = '\0';

1255 ++
__˝
;

1257 *
__s
 = 
__˝
;

1259  
__ªtvÆ
;

1260 
	}
}

1261 #ifde‡
__USE_BSD


1262 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1269 #ifde‡
__USE_MISC


1271 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


1272 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1273 
	~<°dlib.h
>

1276 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1278 *
	$__°rdup
 (c⁄° *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

1279 
	#__°rdup
(
s
) \

1280 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1281 ? (((c⁄° *Ë(
s
))[0] == '\0' \

1282 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1283 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1284 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1285 i‡(
__ªtvÆ
 !
NULL
) \

1286 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

1287 
__ªtvÆ
; 
	}
})) \

1288 : 
	`__°rdup
 (
s
)))

	)

1290 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1291 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1295 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1297 *
	$__°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

1298 
__THROW
 
__©åibuã_mÆloc__
;

1299 
	#__°∫dup
(
s
, 
n
) \

1300 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1301 ? (((c⁄° *Ë(
s
))[0] == '\0' \

1302 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1303 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1304 
size_t
 
__n
 = (
n
); \

1305 *
__ªtvÆ
; \

1306 i‡(
__n
 < 
__Àn
) \

1307 
__Àn
 = 
__n
 + 1; \

1308 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1309 i‡(
__ªtvÆ
 !
NULL
) \

1311 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1312 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

1313 
__Àn
 - 1); \

1315 
__ªtvÆ
; 
	}
})) \

1316 : 
	`__°∫dup
 (
s
, 
n
)))

	)

1318 #ifde‡
__USE_GNU


1319 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

1325 #i‚de‡
_FORCE_INLINES


1326 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

18 #i‚de‡
_STRING_H


22 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

25 #i‚de‡
__˝lu•lus


29 #unde‡
mem˝y


30 #unde‡
memmove


31 #unde‡
mem£t


32 #unde‡
°rˇt


33 #unde‡
°r˝y


34 #unde‡
°∫ˇt


35 #unde‡
°∫˝y


36 #ifde‡
__USE_GNU


37 #unde‡
memp˝y


38 #unde‡
°p˝y


40 #ifde‡
__USE_BSD


41 #unde‡
bc›y


42 #unde‡
bzîo


47 
__f‹tify_fun˘i⁄
 *

48 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

49 
size_t
 
__Àn
))

51  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

52 
	}
}

54 
__f‹tify_fun˘i⁄
 *

55 
__NTH
 (
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__Àn
))

57  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

58 
	}
}

60 #ifde‡
__USE_GNU


61 
__f‹tify_fun˘i⁄
 *

62 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

63 
size_t
 
__Àn
))

65  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

66 
	}
}

75 
__f‹tify_fun˘i⁄
 *

76 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

78 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0

79 && (!
	`__buûtö_c⁄°™t_p
 (
__ch
) || __ch != 0))

81 
	`__w¨n_mem£t_zîo_Àn
 ();

82  
__de°
;

84  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

85 
	}
}

87 #ifde‡
__USE_BSD


88 
__f‹tify_fun˘i⁄
 

89 
__NTH
 (
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__Àn
))

91 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

92 
	}
}

94 
__f‹tify_fun˘i⁄
 

95 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

97 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

98 
	}
}

101 
__f‹tify_fun˘i⁄
 *

102 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

104  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

105 
	}
}

107 #ifde‡
__USE_GNU


108 
__f‹tify_fun˘i⁄
 *

109 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

111  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

112 
	}
}

116 
__f‹tify_fun˘i⁄
 *

117 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

118 
size_t
 
__Àn
))

120  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

121 
	}
}

124 *
	$__°≤˝y_chk
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

125 
size_t
 
__de°Àn
Ë
__THROW
;

126 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
, c⁄° *
__§c
,

127 
size_t
 
__n
), 
°≤˝y
);

129 
__f‹tify_fun˘i⁄
 *

130 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
))

132 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

133 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿<
	`__bos
 (
__de°
)))

134  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

135  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

136 
	}
}

139 
__f‹tify_fun˘i⁄
 *

140 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

142  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

143 
	}
}

146 
__f‹tify_fun˘i⁄
 *

147 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

148 
size_t
 
__Àn
))

150  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

151 
	}
}

	@/usr/include/bits/sys_errlist.h

19 #i‚de‡
_STDIO_H


25 #ifde‡ 
__USE_BSD


26 
sys_√º
;

27 c⁄° *c⁄° 
sys_îæi°
[];

29 #ifde‡ 
__USE_GNU


30 
_sys_√º
;

31 c⁄° *c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/termios.h

19 #i‚de‡
_TERMIOS_H


23 
	tcc_t
;

24 
	t•ìd_t
;

25 
	ttcÊag_t
;

27 
	#NCCS
 32

	)

28 
	sãrmios


30 
tcÊag_t
 
	mc_iÊag
;

31 
tcÊag_t
 
	mc_oÊag
;

32 
tcÊag_t
 
	mc_cÊag
;

33 
tcÊag_t
 
	mc_lÊag
;

34 
cc_t
 
	mc_löe
;

35 
cc_t
 
	mc_cc
[
NCCS
];

36 
•ìd_t
 
	mc_i•ìd
;

37 
•ìd_t
 
	mc_o•ìd
;

38 
	#_HAVE_STRUCT_TERMIOS_C_ISPEED
 1

	)

39 
	#_HAVE_STRUCT_TERMIOS_C_OSPEED
 1

	)

43 
	#VINTR
 0

	)

44 
	#VQUIT
 1

	)

45 
	#VERASE
 2

	)

46 
	#VKILL
 3

	)

47 
	#VEOF
 4

	)

48 
	#VTIME
 5

	)

49 
	#VMIN
 6

	)

50 
	#VSWTC
 7

	)

51 
	#VSTART
 8

	)

52 
	#VSTOP
 9

	)

53 
	#VSUSP
 10

	)

54 
	#VEOL
 11

	)

55 
	#VREPRINT
 12

	)

56 
	#VDISCARD
 13

	)

57 
	#VWERASE
 14

	)

58 
	#VLNEXT
 15

	)

59 
	#VEOL2
 16

	)

62 
	#IGNBRK
 0000001

	)

63 
	#BRKINT
 0000002

	)

64 
	#IGNPAR
 0000004

	)

65 
	#PARMRK
 0000010

	)

66 
	#INPCK
 0000020

	)

67 
	#ISTRIP
 0000040

	)

68 
	#INLCR
 0000100

	)

69 
	#IGNCR
 0000200

	)

70 
	#ICRNL
 0000400

	)

71 
	#IUCLC
 0001000

	)

72 
	#IXON
 0002000

	)

73 
	#IXANY
 0004000

	)

74 
	#IXOFF
 0010000

	)

75 
	#IMAXBEL
 0020000

	)

76 
	#IUTF8
 0040000

	)

79 
	#OPOST
 0000001

	)

80 
	#OLCUC
 0000002

	)

81 
	#ONLCR
 0000004

	)

82 
	#OCRNL
 0000010

	)

83 
	#ONOCR
 0000020

	)

84 
	#ONLRET
 0000040

	)

85 
	#OFILL
 0000100

	)

86 
	#OFDEL
 0000200

	)

87 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


88 
	#NLDLY
 0000400

	)

89 
	#NL0
 0000000

	)

90 
	#NL1
 0000400

	)

91 
	#CRDLY
 0003000

	)

92 
	#CR0
 0000000

	)

93 
	#CR1
 0001000

	)

94 
	#CR2
 0002000

	)

95 
	#CR3
 0003000

	)

96 
	#TABDLY
 0014000

	)

97 
	#TAB0
 0000000

	)

98 
	#TAB1
 0004000

	)

99 
	#TAB2
 0010000

	)

100 
	#TAB3
 0014000

	)

101 
	#BSDLY
 0020000

	)

102 
	#BS0
 0000000

	)

103 
	#BS1
 0020000

	)

104 
	#FFDLY
 0100000

	)

105 
	#FF0
 0000000

	)

106 
	#FF1
 0100000

	)

109 
	#VTDLY
 0040000

	)

110 
	#VT0
 0000000

	)

111 
	#VT1
 0040000

	)

113 #ifde‡
__USE_MISC


114 
	#XTABS
 0014000

	)

118 #ifde‡
__USE_MISC


119 
	#CBAUD
 0010017

	)

121 
	#B0
 0000000

	)

122 
	#B50
 0000001

	)

123 
	#B75
 0000002

	)

124 
	#B110
 0000003

	)

125 
	#B134
 0000004

	)

126 
	#B150
 0000005

	)

127 
	#B200
 0000006

	)

128 
	#B300
 0000007

	)

129 
	#B600
 0000010

	)

130 
	#B1200
 0000011

	)

131 
	#B1800
 0000012

	)

132 
	#B2400
 0000013

	)

133 
	#B4800
 0000014

	)

134 
	#B9600
 0000015

	)

135 
	#B19200
 0000016

	)

136 
	#B38400
 0000017

	)

137 #ifde‡
__USE_MISC


138 
	#EXTA
 
B19200


	)

139 
	#EXTB
 
B38400


	)

141 
	#CSIZE
 0000060

	)

142 
	#CS5
 0000000

	)

143 
	#CS6
 0000020

	)

144 
	#CS7
 0000040

	)

145 
	#CS8
 0000060

	)

146 
	#CSTOPB
 0000100

	)

147 
	#CREAD
 0000200

	)

148 
	#PARENB
 0000400

	)

149 
	#PARODD
 0001000

	)

150 
	#HUPCL
 0002000

	)

151 
	#CLOCAL
 0004000

	)

152 #ifde‡
__USE_MISC


153 
	#CBAUDEX
 0010000

	)

155 
	#B57600
 0010001

	)

156 
	#B115200
 0010002

	)

157 
	#B230400
 0010003

	)

158 
	#B460800
 0010004

	)

159 
	#B500000
 0010005

	)

160 
	#B576000
 0010006

	)

161 
	#B921600
 0010007

	)

162 
	#B1000000
 0010010

	)

163 
	#B1152000
 0010011

	)

164 
	#B1500000
 0010012

	)

165 
	#B2000000
 0010013

	)

166 
	#B2500000
 0010014

	)

167 
	#B3000000
 0010015

	)

168 
	#B3500000
 0010016

	)

169 
	#B4000000
 0010017

	)

170 
	#__MAX_BAUD
 
B4000000


	)

171 #ifde‡
__USE_MISC


172 
	#CIBAUD
 002003600000

	)

173 
	#CMSPAR
 010000000000

	)

174 
	#CRTSCTS
 020000000000

	)

178 
	#ISIG
 0000001

	)

179 
	#ICANON
 0000002

	)

180 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


181 
	#XCASE
 0000004

	)

183 
	#ECHO
 0000010

	)

184 
	#ECHOE
 0000020

	)

185 
	#ECHOK
 0000040

	)

186 
	#ECHONL
 0000100

	)

187 
	#NOFLSH
 0000200

	)

188 
	#TOSTOP
 0000400

	)

189 #ifde‡
__USE_MISC


190 
	#ECHOCTL
 0001000

	)

191 
	#ECHOPRT
 0002000

	)

192 
	#ECHOKE
 0004000

	)

193 
	#FLUSHO
 0010000

	)

194 
	#PENDIN
 0040000

	)

196 
	#IEXTEN
 0100000

	)

197 #ifde‡
__USE_BSD


198 
	#EXTPROC
 0200000

	)

202 
	#TCOOFF
 0

	)

203 
	#TCOON
 1

	)

204 
	#TCIOFF
 2

	)

205 
	#TCION
 3

	)

208 
	#TCIFLUSH
 0

	)

209 
	#TCOFLUSH
 1

	)

210 
	#TCIOFLUSH
 2

	)

213 
	#TCSANOW
 0

	)

214 
	#TCSADRAIN
 1

	)

215 
	#TCSAFLUSH
 2

	)

218 
	#_IOT_ãrmios
 \

219 
	`_IOT
 (
	`_IOTS
 (
cÊag_t
), 4, _IOTS (
cc_t
), 
NCCS
, _IOTS (
•ìd_t
), 2)

	)

	@/usr/include/bits/time.h

23 #i‡
deföed
 
__√ed_timevÆ
 || deföed 
__USE_GNU


24 #i‚de‡
_STRUCT_TIMEVAL


25 
	#_STRUCT_TIMEVAL
 1

	)

26 
	~<bôs/ty≥s.h
>

30 
	stimevÆ


32 
__time_t
 
	mtv_£c
;

33 
__su£c⁄ds_t
 
	mtv_u£c
;

38 #i‚de‡
__√ed_timevÆ


39 #i‚de‡
_BITS_TIME_H


40 
	#_BITS_TIME_H
 1

	)

48 
	#CLOCKS_PER_SEC
 1000000l

	)

50 #i‡(!
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_POSIX
) \

51 && !
deföed
 
	g__USE_XOPEN2K


54 
	~<bôs/ty≥s.h
>

55 
__sysc⁄f
 ();

56 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

59 #ifde‡
__USE_POSIX199309


61 
	#CLOCK_REALTIME
 0

	)

63 
	#CLOCK_MONOTONIC
 1

	)

65 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

67 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

69 
	#CLOCK_MONOTONIC_RAW
 4

	)

71 
	#CLOCK_REALTIME_COARSE
 5

	)

73 
	#CLOCK_MONOTONIC_COARSE
 6

	)

75 
	#CLOCK_BOOTTIME
 7

	)

77 
	#CLOCK_REALTIME_ALARM
 8

	)

79 
	#CLOCK_BOOTTIME_ALARM
 9

	)

82 
	#TIMER_ABSTIME
 1

	)

85 #ifde‡
__USE_GNU


86 
	~<bôs/timex.h
>

88 
__BEGIN_DECLS


91 
	$˛ock_adjtime
 (
__˛ockid_t
 
__˛ock_id
, 
timex
 *
__utx
Ë
__THROW
;

93 
__END_DECLS


99 #unde‡
__√ed_timevÆ


	@/usr/include/bits/types.h

23 #i‚def 
_BITS_TYPES_H


24 
	#_BITS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/w‹dsize.h
>

30 
	t__u_ch¨
;

31 
	t__u_sh‹t
;

32 
	t__u_öt
;

33 
	t__u_l⁄g
;

36 sig√d 
	t__öt8_t
;

37 
	t__uöt8_t
;

38 sig√d 
	t__öt16_t
;

39 
	t__uöt16_t
;

40 sig√d 
	t__öt32_t
;

41 
	t__uöt32_t
;

42 #i‡
__WORDSIZE
 == 64

43 sig√d 
	t__öt64_t
;

44 
	t__uöt64_t
;

46 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

47 
__exãnsi⁄__
 
	t__uöt64_t
;

51 #i‡
__WORDSIZE
 == 64

52 
	t__quad_t
;

53 
	t__u_quad_t
;

55 
__exãnsi⁄__
 
	t__quad_t
;

56 
__exãnsi⁄__
 
	t__u_quad_t
;

89 
	#__S16_TYPE
 

	)

90 
	#__U16_TYPE
 

	)

91 
	#__S32_TYPE
 

	)

92 
	#__U32_TYPE
 

	)

93 
	#__SLONGWORD_TYPE
 

	)

94 
	#__ULONGWORD_TYPE
 

	)

95 #i‡
__WORDSIZE
 == 32

96 
	#__SQUAD_TYPE
 
__quad_t


	)

97 
	#__UQUAD_TYPE
 
__u_quad_t


	)

98 
	#__SWORD_TYPE
 

	)

99 
	#__UWORD_TYPE
 

	)

100 
	#__SLONG32_TYPE
 

	)

101 
	#__ULONG32_TYPE
 

	)

102 
	#__S64_TYPE
 
__quad_t


	)

103 
	#__U64_TYPE
 
__u_quad_t


	)

106 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

107 #ñi‡
__WORDSIZE
 == 64

108 
	t__SQUAD_TYPE
 

	)

109 
	t__UQUAD_TYPE
 

	)

110 
	t__SWORD_TYPE
 

	)

111 
	t__UWORD_TYPE
 

	)

112 
	t__SLONG32_TYPE
 

	)

113 
	t__ULONG32_TYPE
 

	)

114 
	t__S64_TYPE
 

	)

115 
	t__U64_TYPE
 

	)

117 
	t__STD_TYPE
 

	)

121 
	~<bôs/ty≥sizes.h
>

124 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

125 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

126 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

127 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

128 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

129 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

130 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

131 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

132 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

133 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

134 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

135 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

136 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

137 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

138 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

139 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

140 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

141 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

143 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

144 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

147 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

150 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

153 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

158 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

159 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

162 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

163 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

166 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

167 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

170 
__STD_TYPE
 
__FSWORD_T_TYPE
 
	g__fsw‹d_t
;

172 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

175 
__STD_TYPE
 
__SYSCALL_SLONG_TYPE
 
	g__sysˇŒ_¶⁄g_t
;

177 
__STD_TYPE
 
__SYSCALL_ULONG_TYPE
 
	g__sysˇŒ_ul⁄g_t
;

181 
__off64_t
 
	t__loff_t
;

182 
__quad_t
 *
	t__qaddr_t
;

183 *
	t__ˇddr_t
;

186 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

189 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

192 #unde‡
__STD_TYPE


	@/usr/include/bits/uio.h

18 #i‡!
deföed
 
_SYS_UIO_H
 && !deföed 
_FCNTL_H


22 #i‚de‡
_BITS_UIO_H


23 
	#_BITS_UIO_H
 1

	)

25 
	~<sys/ty≥s.h
>

39 
	#UIO_MAXIOV
 1024

	)

43 
	siovec


45 *
	miov_ba£
;

46 
size_t
 
	miov_Àn
;

52 #ifde‡
__USE_GNU


53 #i‡
deföed
 
_SYS_UIO_H
 && !deföed 
_BITS_UIO_H_FOR_SYS_UIO_H


54 
	#_BITS_UIO_H_FOR_SYS_UIO_H
 1

	)

56 
__BEGIN_DECLS


59 
ssize_t
 
	$¥o˚ss_vm_ªadv
 (
pid_t
 
__pid
, c⁄° 
iovec
 *
__lvec
,

60 
__liov˙t
,

61 c⁄° 
iovec
 *
__rvec
,

62 
__riov˙t
,

63 
__Êags
)

64 
__THROW
;

67 
ssize_t
 
	$¥o˚ss_vm_wrôev
 (
pid_t
 
__pid
, c⁄° 
iovec
 *
__lvec
,

68 
__liov˙t
,

69 c⁄° 
iovec
 *
__rvec
,

70 
__riov˙t
,

71 
__Êags
)

72 
__THROW
;

74 
__END_DECLS


	@/usr/include/bits/unistd.h

19 #i‚de‡
_UNISTD_H


23 
ssize_t
 
	$__ªad_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

24 
size_t
 
__buÊí
Ë
__wur
;

25 
ssize_t
 
	`__REDIRECT
 (
__ªad_Æüs
, (
__fd
, *
__buf
,

26 
size_t
 
__nbyãs
), 
ªad
Ë
__wur
;

27 
ssize_t
 
	`__REDIRECT
 (
__ªad_chk_w¨n
,

28 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

29 
size_t
 
__buÊí
), 
__ªad_chk
)

30 
__wur
 
	`__w¨«âr
 ("read called with biggerÜengthÅhan size of "

33 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


34 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
)

36 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

38 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

39  
	`__ªad_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

41 i‡(
__nbyãs
 > 
	`__bos0
 (
__buf
))

42  
	`__ªad_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

44  
	`__ªad_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
);

45 
	}
}

47 #ifde‡
__USE_UNIX98


48 
ssize_t
 
	$__¥ód_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

49 
__off_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

50 
ssize_t
 
	$__¥ód64_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

51 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

52 
ssize_t
 
	`__REDIRECT
 (
__¥ód_Æüs
,

53 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

54 
__off_t
 
__off£t
), 
¥ód
Ë
__wur
;

55 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_Æüs
,

56 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

57 
__off64_t
 
__off£t
), 
¥ód64
Ë
__wur
;

58 
ssize_t
 
	`__REDIRECT
 (
__¥ód_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

60 
__off_t
 
__off£t
, 
size_t
 
__bufsize
), 
__¥ód_chk
)

61 
__wur
 
	`__w¨«âr
 ("pread called with biggerÜengthÅhan size of "

63 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_chk_w¨n
,

64 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

65 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
),

66 
__¥ód64_chk
)

67 
__wur
 
	`__w¨«âr
 ("pread64 called with biggerÜengthÅhan size of "

70 #i‚de‡
__USE_FILE_OFFSET64


71 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


72 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off_t
 
__off£t
)

74 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

76 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

77  
	`__¥ód_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

79 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

80  
	`__¥ód_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

81 
	`__bos0
 (
__buf
));

83  
	`__¥ód_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

84 
	}
}

86 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


87 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

89 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

91 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

92  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

94 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

95  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

96 
	`__bos0
 (
__buf
));

99  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

100 
	}
}

103 #ifde‡
__USE_LARGEFILE64


104 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


105 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

107 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

109 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

110  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

112 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

113  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

114 
	`__bos0
 (
__buf
));

117  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

118 
	}
}

122 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


123 
ssize_t
 
	$__ªadlök_chk
 (c⁄° *
__ª°ri˘
 
__∑th
,

124 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

125 
size_t
 
__buÊí
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

127 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_Æüs
,

128 (c⁄° *
__ª°ri˘
 
__∑th
,

129 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
), 
ªadlök
)

130 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

131 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_chk_w¨n
,

132 (c⁄° *
__ª°ri˘
 
__∑th
,

133 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

134 
size_t
 
__buÊí
), 
__ªadlök_chk
)

135 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
	`__w¨«âr
 ("readlink called with biggerÜength "

138 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
ssize_t


139 
	`__NTH
 (
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
, *__ª°ri˘ 
__buf
,

140 
size_t
 
__Àn
))

142 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

144 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

145  
	`__ªadlök_chk
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

147 i‡–
__Àn
 > 
	`__bos
 (
__buf
))

148  
	`__ªadlök_chk_w¨n
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

150  
	`__ªadlök_Æüs
 (
__∑th
, 
__buf
, 
__Àn
);

151 
	}
}

154 #ifde‡
__USE_ATFILE


155 
ssize_t
 
	$__ªadlök©_chk
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

156 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

157 
size_t
 
__buÊí
)

158 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

159 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_Æüs
,

160 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

161 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
),

162 
ªadlök©
)

163 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

164 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_chk_w¨n
,

165 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

166 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

167 
size_t
 
__buÊí
), 
__ªadlök©_chk
)

168 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
	`__w¨«âr
 ("readlinkat called with bigger "

172 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
ssize_t


173 
	`__NTH
 (
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

174 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
))

176 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

178 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

179  
	`__ªadlök©_chk
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

181 i‡(
__Àn
 > 
	`__bos
 (
__buf
))

182  
	`__ªadlök©_chk_w¨n
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
,

183 
	`__bos
 (
__buf
));

185  
	`__ªadlök©_Æüs
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
);

186 
	}
}

189 *
	$__gëcwd_chk
 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
)

190 
__THROW
 
__wur
;

191 *
	`__REDIRECT_NTH
 (
__gëcwd_Æüs
,

192 (*
__buf
, 
size_t
 
__size
), 
gëcwd
Ë
__wur
;

193 *
	`__REDIRECT_NTH
 (
__gëcwd_chk_w¨n
,

194 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
),

195 
__gëcwd_chk
)

196 
__wur
 
	`__w¨«âr
 ("getcwd caller with biggerÜengthÅhan size of "

199 
__f‹tify_fun˘i⁄
 
__wur
 *

200 
	`__NTH
 (
	$gëcwd
 (*
__buf
, 
size_t
 
__size
))

202 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

204 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
))

205  
	`__gëcwd_chk
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

207 i‡(
__size
 > 
	`__bos
 (
__buf
))

208  
	`__gëcwd_chk_w¨n
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

210  
	`__gëcwd_Æüs
 (
__buf
, 
__size
);

211 
	}
}

213 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


214 *
	$__gëwd_chk
 (*
__buf
, 
size_t
 
buÊí
)

215 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

216 *
	`__REDIRECT_NTH
 (
__gëwd_w¨n
, (*
__buf
), 
gëwd
)

217 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("please use getcwd instead,ás getwd "

220 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
 *

221 
	`__NTH
 (
	$gëwd
 (*
__buf
))

223 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

224  
	`__gëwd_chk
 (
__buf
, 
	`__bos
 (__buf));

225  
	`__gëwd_w¨n
 (
__buf
);

226 
	}
}

229 
size_t
 
	$__c⁄f°r_chk
 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

230 
size_t
 
__buÊí
Ë
__THROW
;

231 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_Æüs
, (
__«me
, *
__buf
,

232 
size_t
 
__Àn
), 
c⁄f°r
);

233 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_chk_w¨n
,

234 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

235 
size_t
 
__buÊí
), 
__c⁄f°r_chk
)

236 
	`__w¨«âr
 ("confstr called with biggerÜengthÅhan size of destination "

239 
__f‹tify_fun˘i⁄
 
size_t


240 
	`__NTH
 (
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
))

242 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

244 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

245  
	`__c⁄f°r_chk
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

247 i‡(
	`__bos
 (
__buf
Ë< 
__Àn
)

248  
	`__c⁄f°r_chk_w¨n
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

250  
	`__c⁄f°r_Æüs
 (
__«me
, 
__buf
, 
__Àn
);

251 
	}
}

254 
	$__gëgroups_chk
 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
)

255 
__THROW
 
__wur
;

256 
	`__REDIRECT_NTH
 (
__gëgroups_Æüs
, (
__size
, 
__gid_t
 
__li°
[]),

257 
gëgroups
Ë
__wur
;

258 
	`__REDIRECT_NTH
 (
__gëgroups_chk_w¨n
,

259 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
),

260 
__gëgroups_chk
)

261 
__wur
 
	`__w¨«âr
 ("getgroups called with bigger group countÅhan what "

264 
__f‹tify_fun˘i⁄
 

265 
	`__NTH
 (
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]))

267 i‡(
	`__bos
 (
__li°
Ë!(
size_t
) -1)

269 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
) || __size < 0)

270  
	`__gëgroups_chk
 (
__size
, 
__li°
, 
	`__bos
 (__list));

272 i‡(
__size
 *  (
__gid_t
Ë> 
	`__bos
 (
__li°
))

273  
	`__gëgroups_chk_w¨n
 (
__size
, 
__li°
, 
	`__bos
 (__list));

275  
	`__gëgroups_Æüs
 (
__size
, 
__li°
);

276 
	}
}

279 
	$__ây«me_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

280 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

281 
	`__REDIRECT_NTH
 (
__ây«me_r_Æüs
, (
__fd
, *
__buf
,

282 
size_t
 
__buÊí
), 
ây«me_r
)

283 
	`__n⁄nuŒ
 ((2));

284 
	`__REDIRECT_NTH
 (
__ây«me_r_chk_w¨n
,

285 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

286 
size_t
 
__ƒól
), 
__ây«me_r_chk
)

287 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ttyname_r called with bigger buflenÅhan "

290 
__f‹tify_fun˘i⁄
 

291 
	`__NTH
 (
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

293 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

295 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

296  
	`__ây«me_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

298 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

299  
	`__ây«me_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

301  
	`__ây«me_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

302 
	}
}

305 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


306 
	$__gëlogö_r_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

307 
	`__n⁄nuŒ
 ((1));

308 
	`__REDIRECT
 (
__gëlogö_r_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

309 
gëlogö_r
Ë
	`__n⁄nuŒ
 ((1));

310 
	`__REDIRECT
 (
__gëlogö_r_chk_w¨n
,

311 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

312 
__gëlogö_r_chk
)

313 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("getlogin_r called with bigger buflenÅhan "

316 
__f‹tify_fun˘i⁄
 

317 
	$gëlogö_r
 (*
__buf
, 
size_t
 
__buÊí
)

319 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

321 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

322  
	`__gëlogö_r_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

324 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

325  
	`__gëlogö_r_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

327  
	`__gëlogö_r_Æüs
 (
__buf
, 
__buÊí
);

328 
	}
}

332 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


333 
	$__gëho°«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

335 
	`__REDIRECT_NTH
 (
__gëho°«me_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

336 
gëho°«me
Ë
	`__n⁄nuŒ
 ((1));

337 
	`__REDIRECT_NTH
 (
__gëho°«me_chk_w¨n
,

338 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

339 
__gëho°«me_chk
)

340 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("gethostname called with bigger buflenÅhan "

343 
__f‹tify_fun˘i⁄
 

344 
	`__NTH
 (
	$gëho°«me
 (*
__buf
, 
size_t
 
__buÊí
))

346 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

348 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

349  
	`__gëho°«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

351 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

352  
	`__gëho°«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

354  
	`__gëho°«me_Æüs
 (
__buf
, 
__buÊí
);

355 
	}
}

359 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

360 
	$__gëdomaö«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

361 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

362 
	`__REDIRECT_NTH
 (
__gëdomaö«me_Æüs
, (*
__buf
,

363 
size_t
 
__buÊí
),

364 
gëdomaö«me
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

365 
	`__REDIRECT_NTH
 (
__gëdomaö«me_chk_w¨n
,

366 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

367 
__gëdomaö«me_chk
)

368 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("getdomainname called with bigger "

372 
__f‹tify_fun˘i⁄
 

373 
	`__NTH
 (
	$gëdomaö«me
 (*
__buf
, 
size_t
 
__buÊí
))

375 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

377 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

378  
	`__gëdomaö«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

380 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

381  
	`__gëdomaö«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

383  
	`__gëdomaö«me_Æüs
 (
__buf
, 
__buÊí
);

384 
	}
}

	@/usr/include/bits/waitflags.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


25 
	#WNOHANG
 1

	)

26 
	#WUNTRACED
 2

	)

29 
	#WSTOPPED
 2

	)

30 
	#WEXITED
 4

	)

31 
	#WCONTINUED
 8

	)

32 
	#WNOWAIT
 0x01000000

	)

34 
	#__WNOTHREAD
 0x20000000

	)

36 
	#__WALL
 0x40000000

	)

37 
	#__WCLONE
 0x80000000

	)

40 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


41 #i‚de‡
__ENUM_IDTYPE_T


42 
	#__ENUM_IDTYPE_T
 1

	)

46 #unde‡
P_ALL


47 #unde‡
P_PID


48 #unde‡
P_PGID


52 
	mP_ALL
,

53 
	mP_PID
,

54 
	mP_PGID


55 } 
	tidty≥_t
;

	@/usr/include/bits/waitstatus.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


28 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

31 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

34 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

37 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

40 
	#__WIFSIGNALED
(
°©us
) \

41 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

44 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

48 #ifde‡
WCONTINUED


49 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

53 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

56 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

57 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

58 
	#__W_CONTINUED
 0xffff

	)

59 
	#__WCOREFLAG
 0x80

	)

62 #ifdef 
__USE_BSD


64 
	~<ídün.h
>

66 
	uwaô


68 
	mw_°©us
;

71 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


72 
	m__w_ãrmsig
:7;

73 
	m__w_c‹edump
:1;

74 
	m__w_ªtcode
:8;

77 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


79 
	m__w_ªtcode
:8;

80 
	m__w_c‹edump
:1;

81 
	m__w_ãrmsig
:7;

83 } 
	m__waô_ãrmö©ed
;

86 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


87 
	m__w_°›vÆ
:8;

88 
	m__w_°›sig
:8;

91 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


93 
	m__w_°›sig
:8;

94 
	m__w_°›vÆ
:8;

96 } 
	m__waô_°›≥d
;

99 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

100 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

101 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

102 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

103 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__
 && !deföed 
__ILP32__


4 
	#__WORDSIZE
 64

	)

6 
	#__WORDSIZE
 32

	)

9 #ifde‡
__x86_64__


10 
	#__WORDSIZE_TIME64_COMPAT32
 1

	)

12 
	#__SYSCALL_WORDSIZE
 64

	)

	@/usr/include/bits/xopen_lim.h

29 #i‚de‡
_XOPEN_LIM_H


30 
	#_XOPEN_LIM_H
 1

	)

32 
	#__√ed_IOV_MAX


	)

33 
	~<bôs/°dio_lim.h
>

65 
	#_XOPEN_IOV_MAX
 
_POSIX_UIO_MAXIOV


	)

70 
	#NL_ARGMAX
 
_POSIX_ARG_MAX


	)

73 
	#NL_LANGMAX
 
_POSIX2_LINE_MAX


	)

76 
	#NL_MSGMAX
 
INT_MAX


	)

80 
	#NL_NMAX
 
INT_MAX


	)

83 
	#NL_SETMAX
 
INT_MAX


	)

86 
	#NL_TEXTMAX
 
INT_MAX


	)

89 
	#NZERO
 20

	)

93 #ifde‡
INT_MAX


94 #i‡
INT_MAX
 == 32767

95 
	#WORD_BIT
 16

	)

97 #i‡
INT_MAX
 == 2147483647

98 
	#WORD_BIT
 32

	)

101 
	#WORD_BIT
 64

	)

104 #ñi‡
deföed
 
__INT_MAX__


105 #i‡
__INT_MAX__
 == 32767

106 
	#WORD_BIT
 16

	)

108 #i‡
__INT_MAX__
 == 2147483647

109 
	#WORD_BIT
 32

	)

112 
	#WORD_BIT
 64

	)

116 
	#WORD_BIT
 32

	)

120 #ifde‡
LONG_MAX


121 #i‡
LONG_MAX
 == 2147483647

122 
	#LONG_BIT
 32

	)

125 
	#LONG_BIT
 64

	)

127 #ñi‡
deföed
 
__LONG_MAX__


128 #i‡
__LONG_MAX__
 == 2147483647

129 
	#LONG_BIT
 32

	)

132 
	#LONG_BIT
 64

	)

135 
	~<bôs/w‹dsize.h
>

136 #i‡
__WORDSIZE
 == 64

137 
	#LONG_BIT
 64

	)

139 
	#LONG_BIT
 32

	)

	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_BSD


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_BSD
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

74 
	#htﬁe64
(
x
Ë(x)

	)

75 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

76 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

101 #unde‡
__USE_ISOC11


102 #unde‡
__USE_ISOC99


103 #unde‡
__USE_ISOC95


104 #unde‡
__USE_ISOCXX11


105 #unde‡
__USE_POSIX


106 #unde‡
__USE_POSIX2


107 #unde‡
__USE_POSIX199309


108 #unde‡
__USE_POSIX199506


109 #unde‡
__USE_XOPEN


110 #unde‡
__USE_XOPEN_EXTENDED


111 #unde‡
__USE_UNIX98


112 #unde‡
__USE_XOPEN2K


113 #unde‡
__USE_XOPEN2KXSI


114 #unde‡
__USE_XOPEN2K8


115 #unde‡
__USE_XOPEN2K8XSI


116 #unde‡
__USE_LARGEFILE


117 #unde‡
__USE_LARGEFILE64


118 #unde‡
__USE_FILE_OFFSET64


119 #unde‡
__USE_BSD


120 #unde‡
__USE_SVID


121 #unde‡
__USE_MISC


122 #unde‡
__USE_ATFILE


123 #unde‡
__USE_GNU


124 #unde‡
__USE_REENTRANT


125 #unde‡
__USE_FORTIFY_LEVEL


126 #unde‡
__KERNEL_STRICT_NAMES


130 #i‚de‡
_LOOSE_KERNEL_NAMES


131 
	#__KERNEL_STRICT_NAMES


	)

141 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


142 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

143 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

145 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

150 #ifde‡
_GNU_SOURCE


151 #unde‡
_ISOC95_SOURCE


152 
	#_ISOC95_SOURCE
 1

	)

153 #unde‡
_ISOC99_SOURCE


154 
	#_ISOC99_SOURCE
 1

	)

155 #unde‡
_ISOC11_SOURCE


156 
	#_ISOC11_SOURCE
 1

	)

157 #unde‡
_POSIX_SOURCE


158 
	#_POSIX_SOURCE
 1

	)

159 #unde‡
_POSIX_C_SOURCE


160 
	#_POSIX_C_SOURCE
 200809L

	)

161 #unde‡
_XOPEN_SOURCE


162 
	#_XOPEN_SOURCE
 700

	)

163 #unde‡
_XOPEN_SOURCE_EXTENDED


164 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

165 #unde‡
_LARGEFILE64_SOURCE


166 
	#_LARGEFILE64_SOURCE
 1

	)

167 #unde‡
_DEFAULT_SOURCE


168 
	#_DEFAULT_SOURCE
 1

	)

169 #unde‡
_BSD_SOURCE


170 
	#_BSD_SOURCE
 1

	)

171 #unde‡
_SVID_SOURCE


172 
	#_SVID_SOURCE
 1

	)

173 #unde‡
_ATFILE_SOURCE


174 
	#_ATFILE_SOURCE
 1

	)

179 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

180 || (!
deföed
 
	g__STRICT_ANSI__
 \

181 && !
deföed
 
	g_ISOC99_SOURCE
 \

182 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

183 && !
deföed
 
	g_XOPEN_SOURCE
 \

184 && !
deföed
 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
))

185 #unde‡
_DEFAULT_SOURCE


186 
	#_DEFAULT_SOURCE
 1

	)

187 #unde‡
_BSD_SOURCE


188 
	#_BSD_SOURCE
 1

	)

189 #unde‡
_SVID_SOURCE


190 
	#_SVID_SOURCE
 1

	)

194 #i‡(
deföed
 
_ISOC11_SOURCE
 \

195 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

196 
	#__USE_ISOC11
 1

	)

200 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

201 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

202 
	#__USE_ISOC99
 1

	)

206 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

207 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

208 
	#__USE_ISOC95
 1

	)

215 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

216 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

217 
	#__USE_ISOCXX11
 1

	)

223 #ifde‡
_DEFAULT_SOURCE


224 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


225 
	#__USE_POSIX_IMPLICITLY
 1

	)

227 #unde‡
_POSIX_SOURCE


228 
	#_POSIX_SOURCE
 1

	)

229 #unde‡
_POSIX_C_SOURCE


230 
	#_POSIX_C_SOURCE
 200809L

	)

232 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

233 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

234 
	#_POSIX_SOURCE
 1

	)

235 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

236 
	#_POSIX_C_SOURCE
 2

	)

237 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

238 
	#_POSIX_C_SOURCE
 199506L

	)

239 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

240 
	#_POSIX_C_SOURCE
 200112L

	)

242 
	#_POSIX_C_SOURCE
 200809L

	)

244 
	#__USE_POSIX_IMPLICITLY
 1

	)

247 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


248 
	#__USE_POSIX
 1

	)

251 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


252 
	#__USE_POSIX2
 1

	)

255 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

256 
	#__USE_POSIX199309
 1

	)

259 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

260 
	#__USE_POSIX199506
 1

	)

263 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

264 
	#__USE_XOPEN2K
 1

	)

265 #unde‡
__USE_ISOC95


266 
	#__USE_ISOC95
 1

	)

267 #unde‡
__USE_ISOC99


268 
	#__USE_ISOC99
 1

	)

271 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

272 
	#__USE_XOPEN2K8
 1

	)

273 #unde‡
_ATFILE_SOURCE


274 
	#_ATFILE_SOURCE
 1

	)

277 #ifdef 
_XOPEN_SOURCE


278 
	#__USE_XOPEN
 1

	)

279 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

280 
	#__USE_XOPEN_EXTENDED
 1

	)

281 
	#__USE_UNIX98
 1

	)

282 #unde‡
_LARGEFILE_SOURCE


283 
	#_LARGEFILE_SOURCE
 1

	)

284 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

285 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

286 
	#__USE_XOPEN2K8
 1

	)

287 
	#__USE_XOPEN2K8XSI
 1

	)

289 
	#__USE_XOPEN2K
 1

	)

290 
	#__USE_XOPEN2KXSI
 1

	)

291 #unde‡
__USE_ISOC95


292 
	#__USE_ISOC95
 1

	)

293 #unde‡
__USE_ISOC99


294 
	#__USE_ISOC99
 1

	)

297 #ifde‡
_XOPEN_SOURCE_EXTENDED


298 
	#__USE_XOPEN_EXTENDED
 1

	)

303 #ifde‡
_LARGEFILE_SOURCE


304 
	#__USE_LARGEFILE
 1

	)

307 #ifde‡
_LARGEFILE64_SOURCE


308 
	#__USE_LARGEFILE64
 1

	)

311 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

312 
	#__USE_FILE_OFFSET64
 1

	)

315 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


316 
	#__USE_MISC
 1

	)

319 #ifdef 
_BSD_SOURCE


320 
	#__USE_BSD
 1

	)

323 #ifdef 
_SVID_SOURCE


324 
	#__USE_SVID
 1

	)

327 #ifdef 
_ATFILE_SOURCE


328 
	#__USE_ATFILE
 1

	)

331 #ifdef 
_GNU_SOURCE


332 
	#__USE_GNU
 1

	)

335 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


336 
	#__USE_REENTRANT
 1

	)

339 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

340 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

341 #i‡
_FORTIFY_SOURCE
 > 1

342 
	#__USE_FORTIFY_LEVEL
 2

	)

344 
	#__USE_FORTIFY_LEVEL
 1

	)

347 
	#__USE_FORTIFY_LEVEL
 0

	)

352 
	~<°dc-¥edef.h
>

360 #unde‡
__GNU_LIBRARY__


361 
	#__GNU_LIBRARY__
 6

	)

365 
	#__GLIBC__
 2

	)

366 
	#__GLIBC_MINOR__
 19

	)

368 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

369 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

372 #i‚de‡
__ASSEMBLER__


373 #i‚de‡
_SYS_CDEFS_H


374 
	~<sys/cdefs.h
>

379 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


380 
	#__USE_LARGEFILE
 1

	)

381 
	#__USE_LARGEFILE64
 1

	)

387 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

388 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

389 && 
deföed
 
	g__exã∫_ölöe


390 
	#__USE_EXTERN_INLINES
 1

	)

398 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

19 #i‚de‡
_GETOPT_H


21 #i‚de‡
__√ed_gë›t


22 
	#_GETOPT_H
 1

	)

32 #i‡!
deföed
 
__GNU_LIBRARY__


33 
	~<˘y≥.h
>

36 #i‚de‡
__THROW


37 #i‚de‡
__GNUC_PREREQ


38 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

40 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

41 
	#__THROW
 
	`throw
 ()

	)

43 
	#__THROW


	)

47 #ifdef 
__˝lu•lus


57 *
›èrg
;

71 
›töd
;

76 
›ãº
;

80 
›t›t
;

82 #i‚de‡
__√ed_gë›t


104 
	s›ti⁄


106 c⁄° *
	g«me
;

109 
	ghas_¨g
;

110 *
	gÊag
;

111 
	gvÆ
;

116 
	#no_¨gumít
 0

	)

117 
	#ªquúed_¨gumít
 1

	)

118 
	#›ti⁄Æ_¨gumít
 2

	)

146 #ifde‡
__GNU_LIBRARY__


150 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

151 
__THROW
;

153 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

154 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


158 #ifde‡
__REDIRECT


159 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

160 c⁄° *
__sh‹t›ts
),

161 
__posix_gë›t
);

163 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

164 c⁄° *
__sh‹t›ts
Ë
__THROW
;

165 
	#gë›t
 
__posix_gë›t


	)

169 
gë›t
 ();

172 #i‚de‡
__√ed_gë›t


173 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

174 c⁄° *
__sh‹t›ts
,

175 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

176 
__THROW
;

177 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

178 c⁄° *
__sh‹t›ts
,

179 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

180 
__THROW
;

184 #ifdef 
__˝lu•lus


189 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

28 #i‚de‡
_IO_STDIO_H


29 
	#_IO_STDIO_H


	)

31 
	~<_G_c⁄fig.h
>

33 
	#_IO_Âos_t
 
_G_Âos_t


	)

34 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

35 
	#_IO_size_t
 
size_t


	)

36 
	#_IO_ssize_t
 
__ssize_t


	)

37 
	#_IO_off_t
 
__off_t


	)

38 
	#_IO_off64_t
 
__off64_t


	)

39 
	#_IO_pid_t
 
__pid_t


	)

40 
	#_IO_uid_t
 
__uid_t


	)

41 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

42 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

43 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

44 
	#_IO_va_li°
 
_G_va_li°


	)

45 
	#_IO_wöt_t
 
wöt_t


	)

48 
	#__√ed___va_li°


	)

49 
	~<°d¨g.h
>

50 #ifde‡
__GNUC_VA_LIST


51 #unde‡
_IO_va_li°


52 
	#_IO_va_li°
 
__gnuc_va_li°


	)

55 #i‚de‡
__P


56 
	~<sys/cdefs.h
>

59 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

61 #i‚de‡
EOF


62 
	#EOF
 (-1)

	)

64 #i‚de‡
NULL


65 #i‡
deföed
 
__GNUG__
 && \

66 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

67 
	#NULL
 (
__nuŒ
)

	)

69 #i‡!
deföed
(
__˝lu•lus
)

70 
	#NULL
 ((*)0)

	)

72 
	#NULL
 (0)

	)

77 
	#_IOS_INPUT
 1

	)

78 
	#_IOS_OUTPUT
 2

	)

79 
	#_IOS_ATEND
 4

	)

80 
	#_IOS_APPEND
 8

	)

81 
	#_IOS_TRUNC
 16

	)

82 
	#_IOS_NOCREATE
 32

	)

83 
	#_IOS_NOREPLACE
 64

	)

84 
	#_IOS_BIN
 128

	)

92 
	#_IO_MAGIC
 0xFBAD0000

	)

93 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

94 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

95 
	#_IO_USER_BUF
 1

	)

96 
	#_IO_UNBUFFERED
 2

	)

97 
	#_IO_NO_READS
 4

	)

98 
	#_IO_NO_WRITES
 8

	)

99 
	#_IO_EOF_SEEN
 0x10

	)

100 
	#_IO_ERR_SEEN
 0x20

	)

101 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

102 
	#_IO_LINKED
 0x80

	)

103 
	#_IO_IN_BACKUP
 0x100

	)

104 
	#_IO_LINE_BUF
 0x200

	)

105 
	#_IO_TIED_PUT_GET
 0x400

	)

106 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

107 
	#_IO_IS_APPENDING
 0x1000

	)

108 
	#_IO_IS_FILEBUF
 0x2000

	)

109 
	#_IO_BAD_SEEN
 0x4000

	)

110 
	#_IO_USER_LOCK
 0x8000

	)

112 
	#_IO_FLAGS2_MMAP
 1

	)

113 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

114 #ifde‡
_LIBC


115 
	#_IO_FLAGS2_FORTIFY
 4

	)

117 
	#_IO_FLAGS2_USER_WBUF
 8

	)

118 #ifde‡
_LIBC


119 
	#_IO_FLAGS2_SCANF_STD
 16

	)

120 
	#_IO_FLAGS2_NOCLOSE
 32

	)

121 
	#_IO_FLAGS2_CLOEXEC
 64

	)

125 
	#_IO_SKIPWS
 01

	)

126 
	#_IO_LEFT
 02

	)

127 
	#_IO_RIGHT
 04

	)

128 
	#_IO_INTERNAL
 010

	)

129 
	#_IO_DEC
 020

	)

130 
	#_IO_OCT
 040

	)

131 
	#_IO_HEX
 0100

	)

132 
	#_IO_SHOWBASE
 0200

	)

133 
	#_IO_SHOWPOINT
 0400

	)

134 
	#_IO_UPPERCASE
 01000

	)

135 
	#_IO_SHOWPOS
 02000

	)

136 
	#_IO_SCIENTIFIC
 04000

	)

137 
	#_IO_FIXED
 010000

	)

138 
	#_IO_UNITBUF
 020000

	)

139 
	#_IO_STDIO
 040000

	)

140 
	#_IO_DONT_CLOSE
 0100000

	)

141 
	#_IO_BOOLALPHA
 0200000

	)

144 
_IO_jump_t
; 
	g_IO_FILE
;

147 #ifde‡
_IO_MTSAFE_IO


148 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

149 
	~<bôs/°dio-lock.h
>

154 
	t_IO_lock_t
;

160 
	s_IO_m¨kî
 {

161 
_IO_m¨kî
 *
	m_√xt
;

162 
_IO_FILE
 *
	m_sbuf
;

166 
	m_pos
;

168 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

169 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

170 
	mpublic
:

171 
°ªamm¨kî
(
°ªambuf
 *
sb
);

172 ~
°ªamm¨kî
();

173 
ßvög
(Ë{  
	m_•os
 == -2; }

174 
dñè
(
°ªamm¨kî
&);

175 
dñè
();

180 
	e__codecvt_ªsu…


182 
	m__codecvt_ok
,

183 
	m__codecvt_∑πül
,

184 
	m__codecvt_îr‹
,

185 
	m__codecvt_noc⁄v


188 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


191 
	s_IO_codecvt


193 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

194 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

195 
	m__mb°©e_t
 *,

196 c⁄° 
	mwch¨_t
 *,

197 c⁄° 
	mwch¨_t
 *,

198 c⁄° 
	mwch¨_t
 **, *,

200 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

201 
	m__mb°©e_t
 *, *,

203 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

204 
	m__mb°©e_t
 *,

206 c⁄° **, 
	mwch¨_t
 *,

207 
	mwch¨_t
 *, wchar_t **);

208 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

209 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

210 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

211 c⁄° *, c⁄° *, 
	m_IO_size_t
);

212 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

214 
_IO_ic⁄v_t
 
	m__cd_ö
;

215 
_IO_ic⁄v_t
 
	m__cd_out
;

219 
	s_IO_wide_d©a


221 
wch¨_t
 *
	m_IO_ªad_±r
;

222 
wch¨_t
 *
	m_IO_ªad_íd
;

223 
wch¨_t
 *
	m_IO_ªad_ba£
;

224 
wch¨_t
 *
	m_IO_wrôe_ba£
;

225 
wch¨_t
 *
	m_IO_wrôe_±r
;

226 
wch¨_t
 *
	m_IO_wrôe_íd
;

227 
wch¨_t
 *
	m_IO_buf_ba£
;

228 
wch¨_t
 *
	m_IO_buf_íd
;

230 
wch¨_t
 *
	m_IO_ßve_ba£
;

231 
wch¨_t
 *
	m_IO_backup_ba£
;

233 
wch¨_t
 *
	m_IO_ßve_íd
;

235 
__mb°©e_t
 
	m_IO_°©e
;

236 
__mb°©e_t
 
	m_IO_œ°_°©e
;

237 
_IO_codecvt
 
	m_codecvt
;

239 
wch¨_t
 
	m_sh‹tbuf
[1];

241 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

245 
	s_IO_FILE
 {

246 
	m_Êags
;

247 
	#_IO_fûe_Êags
 
_Êags


	)

251 * 
	m_IO_ªad_±r
;

252 * 
	m_IO_ªad_íd
;

253 * 
	m_IO_ªad_ba£
;

254 * 
	m_IO_wrôe_ba£
;

255 * 
	m_IO_wrôe_±r
;

256 * 
	m_IO_wrôe_íd
;

257 * 
	m_IO_buf_ba£
;

258 * 
	m_IO_buf_íd
;

260 *
	m_IO_ßve_ba£
;

261 *
	m_IO_backup_ba£
;

262 *
	m_IO_ßve_íd
;

264 
_IO_m¨kî
 *
	m_m¨kîs
;

266 
_IO_FILE
 *
	m_chaö
;

268 
	m_fûío
;

270 
	m_blksize
;

272 
	m_Êags2
;

274 
_IO_off_t
 
	m_ﬁd_off£t
;

276 
	#__HAVE_COLUMN


	)

278 
	m_cur_cﬁumn
;

279 sig√d 
	m_vèbÀ_off£t
;

280 
	m_sh‹tbuf
[1];

284 
_IO_lock_t
 *
	m_lock
;

285 #ifde‡
_IO_USE_OLD_IO_FILE


288 
	s_IO_FILE_com∂ëe


290 
_IO_FILE
 
	m_fûe
;

292 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

293 
_IO_off64_t
 
	m_off£t
;

294 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


296 
_IO_codecvt
 *
	m_codecvt
;

297 
_IO_wide_d©a
 *
	m_wide_d©a
;

298 
_IO_FILE
 *
	m_‰ìªs_li°
;

299 *
	m_‰ìªs_buf
;

300 
size_t
 
	m_‰ìªs_size
;

302 *
	m__∑d1
;

303 *
	m__∑d2
;

304 *
	m__∑d3
;

305 *
	m__∑d4
;

306 
size_t
 
	m__∑d5
;

308 
	m_mode
;

310 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

314 #i‚de‡
__˝lu•lus


315 
_IO_FILE
 
	t_IO_FILE
;

318 
	g_IO_FILE_∂us
;

320 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

321 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

322 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

323 #i‚de‡
_LIBC


324 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

325 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

326 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

328 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

329 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

330 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

338 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

346 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, c⁄° *
	t__buf
,

347 
	tsize_t
 
	t__n
);

355 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

358 
	t__io_˛o£_‚
 (*
	t__cookõ
);

361 #ifde‡
_GNU_SOURCE


363 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

364 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

365 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

366 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

371 
__io_ªad_‚
 *
	mªad
;

372 
__io_wrôe_‚
 *
	mwrôe
;

373 
__io_£ek_‚
 *
	m£ek
;

374 
__io_˛o£_‚
 *
	m˛o£
;

375 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

376 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

378 
	g_IO_cookõ_fûe
;

381 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

382 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

386 #ifde‡
__˝lu•lus


390 
__undîÊow
 (
_IO_FILE
 *);

391 
__uÊow
 (
_IO_FILE
 *);

392 
__ovîÊow
 (
_IO_FILE
 *, );

393 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


394 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

395 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

396 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

399 #i‡ 
__GNUC__
 >= 3

400 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

402 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

405 
	#_IO_gëc_u∆ocked
(
_Â
) \

406 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

407 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

408 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

409 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

410 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

411 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

412 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

413 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

414 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

415 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

417 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


418 
	#_IO_gëwc_u∆ocked
(
_Â
) \

419 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

420 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

421 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

422 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

423 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

424 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

425 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

426 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

427 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

428 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

431 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

432 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

434 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

435 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

436 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

437 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

439 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

442 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

443 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

445 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

446 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

447 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

449 #ifde‡
_IO_MTSAFE_IO


450 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

451 
	#_IO_Êockfûe
(
_Â
) \

452 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

453 
	#_IO_fu∆ockfûe
(
_Â
) \

454 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

456 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

457 
	#_IO_Êockfûe
(
_Â
Ë

	)

458 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

459 
	#_IO_·rylockfûe
(
_Â
Ë

	)

460 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

461 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

464 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

465 
_IO_va_li°
, *
__ª°ri˘
);

466 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

467 
_IO_va_li°
);

468 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

469 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

471 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

472 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

474 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

476 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


477 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

478 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

479 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

480 #i‡
__GNUC__
 >= 2

483 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


484 
	~<shlib-com∑t.h
>

485 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

486 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

487 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

488 c⁄° 
_IO_°dö_u£d
;

489 
wók_exã∫
 (
_IO_°dö_u£d
);

492 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


493 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

497 
	#_IO_fwide
(
__Â
, 
__mode
) \

498 ({ 
__ªsu…
 = (
__mode
); \

499 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

501 i‡((
__Â
)->
_mode
 == 0) \

503 (
__Â
)->
_mode
 = -1; \

504 
__ªsu…
 = (
__Â
)->
_mode
; \

506 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

507 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

509 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

510 
__ªsu…
; })

	)

513 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

514 
_IO_va_li°
, *
__ª°ri˘
);

515 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

516 
_IO_va_li°
);

517 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

518 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

521 #ifde‡
__LDBL_COMPAT


522 
	~<bôs/libio-ldbl.h
>

525 #ifde‡
__˝lu•lus


	@/usr/include/openssl/bio.h

59 #i‚de‡
HEADER_BIO_H


60 
	#HEADER_BIO_H


	)

62 
	~<›ís¶/e_os2.h
>

64 #i‚de‡
OPENSSL_NO_FP_API


65 
	~<°dio.h
>

67 
	~<°d¨g.h
>

69 
	~<›ís¶/¸y±o.h
>

71 #i‚de‡
OPENSSL_NO_SCTP


72 #i‚de‡
OPENSSL_SYS_VMS


73 
	~<°döt.h
>

75 
	~<öây≥s.h
>

79 #ifde‡ 
__˝lu•lus


84 
	#BIO_TYPE_NONE
 0

	)

85 
	#BIO_TYPE_MEM
 (1|0x0400)

	)

86 
	#BIO_TYPE_FILE
 (2|0x0400)

	)

88 
	#BIO_TYPE_FD
 (4|0x0400|0x0100)

	)

89 
	#BIO_TYPE_SOCKET
 (5|0x0400|0x0100)

	)

90 
	#BIO_TYPE_NULL
 (6|0x0400)

	)

91 
	#BIO_TYPE_SSL
 (7|0x0200)

	)

92 
	#BIO_TYPE_MD
 (8|0x0200Ë

	)

93 
	#BIO_TYPE_BUFFER
 (9|0x0200Ë

	)

94 
	#BIO_TYPE_CIPHER
 (10|0x0200Ë

	)

95 
	#BIO_TYPE_BASE64
 (11|0x0200Ë

	)

96 
	#BIO_TYPE_CONNECT
 (12|0x0400|0x0100Ë

	)

97 
	#BIO_TYPE_ACCEPT
 (13|0x0400|0x0100Ë

	)

98 
	#BIO_TYPE_PROXY_CLIENT
 (14|0x0200Ë

	)

99 
	#BIO_TYPE_PROXY_SERVER
 (15|0x0200Ë

	)

100 
	#BIO_TYPE_NBIO_TEST
 (16|0x0200Ë

	)

101 
	#BIO_TYPE_NULL_FILTER
 (17|0x0200)

	)

102 
	#BIO_TYPE_BER
 (18|0x0200Ë

	)

103 
	#BIO_TYPE_BIO
 (19|0x0400Ë

	)

104 
	#BIO_TYPE_LINEBUFFER
 (20|0x0200Ë

	)

105 
	#BIO_TYPE_DGRAM
 (21|0x0400|0x0100)

	)

106 #i‚de‡
OPENSSL_NO_SCTP


107 
	#BIO_TYPE_DGRAM_SCTP
 (24|0x0400|0x0100)

	)

109 
	#BIO_TYPE_ASN1
 (22|0x0200Ë

	)

110 
	#BIO_TYPE_COMP
 (23|0x0200Ë

	)

112 
	#BIO_TYPE_DESCRIPTOR
 0x0100

	)

113 
	#BIO_TYPE_FILTER
 0x0200

	)

114 
	#BIO_TYPE_SOURCE_SINK
 0x0400

	)

118 
	#BIO_NOCLOSE
 0x00

	)

119 
	#BIO_CLOSE
 0x01

	)

123 
	#BIO_CTRL_RESET
 1

	)

124 
	#BIO_CTRL_EOF
 2

	)

125 
	#BIO_CTRL_INFO
 3

	)

126 
	#BIO_CTRL_SET
 4

	)

127 
	#BIO_CTRL_GET
 5

	)

128 
	#BIO_CTRL_PUSH
 6

	)

129 
	#BIO_CTRL_POP
 7

	)

130 
	#BIO_CTRL_GET_CLOSE
 8

	)

131 
	#BIO_CTRL_SET_CLOSE
 9

	)

132 
	#BIO_CTRL_PENDING
 10

	)

133 
	#BIO_CTRL_FLUSH
 11

	)

134 
	#BIO_CTRL_DUP
 12

	)

135 
	#BIO_CTRL_WPENDING
 13

	)

137 
	#BIO_CTRL_SET_CALLBACK
 14

	)

138 
	#BIO_CTRL_GET_CALLBACK
 15

	)

140 
	#BIO_CTRL_SET_FILENAME
 30

	)

143 
	#BIO_CTRL_DGRAM_CONNECT
 31

	)

144 
	#BIO_CTRL_DGRAM_SET_CONNECTED
 32

	)

147 
	#BIO_CTRL_DGRAM_SET_RECV_TIMEOUT
 33

	)

148 
	#BIO_CTRL_DGRAM_GET_RECV_TIMEOUT
 34

	)

149 
	#BIO_CTRL_DGRAM_SET_SEND_TIMEOUT
 35

	)

150 
	#BIO_CTRL_DGRAM_GET_SEND_TIMEOUT
 36

	)

152 
	#BIO_CTRL_DGRAM_GET_RECV_TIMER_EXP
 37

	)

153 
	#BIO_CTRL_DGRAM_GET_SEND_TIMER_EXP
 38

	)

156 
	#BIO_CTRL_DGRAM_MTU_DISCOVER
 39

	)

159 
	#BIO_CTRL_DGRAM_QUERY_MTU
 40

	)

160 
	#BIO_CTRL_DGRAM_GET_FALLBACK_MTU
 47

	)

161 
	#BIO_CTRL_DGRAM_GET_MTU
 41

	)

162 
	#BIO_CTRL_DGRAM_SET_MTU
 42

	)

167 
	#BIO_CTRL_DGRAM_MTU_EXCEEDED
 43

	)

172 
	#BIO_CTRL_DGRAM_GET_PEER
 46

	)

173 
	#BIO_CTRL_DGRAM_SET_PEER
 44

	)

175 
	#BIO_CTRL_DGRAM_SET_NEXT_TIMEOUT
 45

	)

178 
	#BIO_CTRL_DGRAM_GET_MTU_OVERHEAD
 49

	)

180 #i‚de‡
OPENSSL_NO_SCTP


182 
	#BIO_CTRL_DGRAM_SCTP_SET_IN_HANDSHAKE
 50

	)

183 
	#BIO_CTRL_DGRAM_SCTP_ADD_AUTH_KEY
 51

	)

184 
	#BIO_CTRL_DGRAM_SCTP_NEXT_AUTH_KEY
 52

	)

185 
	#BIO_CTRL_DGRAM_SCTP_AUTH_CCS_RCVD
 53

	)

186 
	#BIO_CTRL_DGRAM_SCTP_GET_SNDINFO
 60

	)

187 
	#BIO_CTRL_DGRAM_SCTP_SET_SNDINFO
 61

	)

188 
	#BIO_CTRL_DGRAM_SCTP_GET_RCVINFO
 62

	)

189 
	#BIO_CTRL_DGRAM_SCTP_SET_RCVINFO
 63

	)

190 
	#BIO_CTRL_DGRAM_SCTP_GET_PRINFO
 64

	)

191 
	#BIO_CTRL_DGRAM_SCTP_SET_PRINFO
 65

	)

192 
	#BIO_CTRL_DGRAM_SCTP_SAVE_SHUTDOWN
 70

	)

196 
	#BIO_FP_READ
 0x02

	)

197 
	#BIO_FP_WRITE
 0x04

	)

198 
	#BIO_FP_APPEND
 0x08

	)

199 
	#BIO_FP_TEXT
 0x10

	)

201 
	#BIO_FLAGS_READ
 0x01

	)

202 
	#BIO_FLAGS_WRITE
 0x02

	)

203 
	#BIO_FLAGS_IO_SPECIAL
 0x04

	)

204 
	#BIO_FLAGS_RWS
 (
BIO_FLAGS_READ
|
BIO_FLAGS_WRITE
|
BIO_FLAGS_IO_SPECIAL
)

	)

205 
	#BIO_FLAGS_SHOULD_RETRY
 0x08

	)

206 #i‚def 
BIO_FLAGS_UPLINK


209 
	#BIO_FLAGS_UPLINK
 0

	)

213 
	#BIO_GHBN_CTRL_HITS
 1

	)

214 
	#BIO_GHBN_CTRL_MISSES
 2

	)

215 
	#BIO_GHBN_CTRL_CACHE_SIZE
 3

	)

216 
	#BIO_GHBN_CTRL_GET_ENTRY
 4

	)

217 
	#BIO_GHBN_CTRL_FLUSH
 5

	)

226 
	#BIO_FLAGS_BASE64_NO_NL
 0x100

	)

231 
	#BIO_FLAGS_MEM_RDONLY
 0x200

	)

233 
bio_°
 
	tBIO
;

235 
BIO_£t_Êags
(
BIO
 *
b
, 
Êags
);

236 
BIO_ã°_Êags
(c⁄° 
BIO
 *
b
, 
Êags
);

237 
BIO_˛ór_Êags
(
BIO
 *
b
, 
Êags
);

239 
	#BIO_gë_Êags
(
b
Ë
	`BIO_ã°_Êags
(b, ~(0x0))

	)

240 
	#BIO_£t_ªåy_•ecül
(
b
) \

241 
	`BIO_£t_Êags
(
b
, (
BIO_FLAGS_IO_SPECIAL
|
BIO_FLAGS_SHOULD_RETRY
))

	)

242 
	#BIO_£t_ªåy_ªad
(
b
) \

243 
	`BIO_£t_Êags
(
b
, (
BIO_FLAGS_READ
|
BIO_FLAGS_SHOULD_RETRY
))

	)

244 
	#BIO_£t_ªåy_wrôe
(
b
) \

245 
	`BIO_£t_Êags
(
b
, (
BIO_FLAGS_WRITE
|
BIO_FLAGS_SHOULD_RETRY
))

	)

248 
	#BIO_˛ór_ªåy_Êags
(
b
) \

249 
	`BIO_˛ór_Êags
(
b
, (
BIO_FLAGS_RWS
|
BIO_FLAGS_SHOULD_RETRY
))

	)

250 
	#BIO_gë_ªåy_Êags
(
b
) \

251 
	`BIO_ã°_Êags
(
b
, (
BIO_FLAGS_RWS
|
BIO_FLAGS_SHOULD_RETRY
))

	)

254 
	#BIO_should_ªad
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_READ
)

	)

255 
	#BIO_should_wrôe
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_WRITE
)

	)

256 
	#BIO_should_io_•ecül
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_IO_SPECIAL
)

	)

257 
	#BIO_ªåy_ty≥
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_RWS
)

	)

258 
	#BIO_should_ªåy
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_SHOULD_RETRY
)

	)

266 
	#BIO_RR_SSL_X509_LOOKUP
 0x01

	)

268 
	#BIO_RR_CONNECT
 0x02

	)

270 
	#BIO_RR_ACCEPT
 0x03

	)

273 
	#BIO_CB_FREE
 0x01

	)

274 
	#BIO_CB_READ
 0x02

	)

275 
	#BIO_CB_WRITE
 0x03

	)

276 
	#BIO_CB_PUTS
 0x04

	)

277 
	#BIO_CB_GETS
 0x05

	)

278 
	#BIO_CB_CTRL
 0x06

	)

282 
	#BIO_CB_RETURN
 0x80

	)

283 
	#BIO_CB_ªtu∫
(
a
Ë(◊)|
BIO_CB_RETURN
))

	)

284 
	#BIO_cb_¥e
(
a
Ë(!(◊)&
BIO_CB_RETURN
))

	)

285 
	#BIO_cb_po°
(
a
Ë(◊)&
BIO_CB_RETURN
)

	)

287 (*
BIO_gë_ˇŒback
(c⁄° 
BIO
 *
b
)Ë(
bio_°
 *,,const *,, ,);

288 
BIO_£t_ˇŒback
(
BIO
 *
b
,

289 (*
ˇŒback
)(
bio_°
 *,,const *,, ,));

290 *
BIO_gë_ˇŒback_¨g
(c⁄° 
BIO
 *
b
);

291 
BIO_£t_ˇŒback_¨g
(
BIO
 *
b
, *
¨g
);

293 c⁄° * 
BIO_mëhod_«me
(c⁄° 
BIO
 *
b
);

294 
BIO_mëhod_ty≥
(c⁄° 
BIO
 *
b
);

296 
	tbio_öfo_cb
(
	tbio_°
 *, , const *, , , );

298 
	sbio_mëhod_°


300 
ty≥
;

301 c⁄° *
«me
;

302 (*
bwrôe
)(
BIO
 *, const *, );

303 (*
bªad
)(
BIO
 *, *, );

304 (*
bputs
)(
BIO
 *, const *);

305 (*
bgës
)(
BIO
 *, *, );

306 (*
˘æ
)(
BIO
 *, , , *);

307 (*
¸óã
)(
BIO
 *);

308 (*
de°roy
)(
BIO
 *);

309 (*
ˇŒback_˘æ
)(
BIO
 *, , 
bio_öfo_cb
 *);

310 } 
	tBIO_METHOD
;

312 
	sbio_°


314 
BIO_METHOD
 *
mëhod
;

316 (*
ˇŒback
)(
bio_°
 *,,const *,, ,);

317 *
cb_¨g
;

319 
öô
;

320 
shutdown
;

321 
Êags
;

322 
ªåy_ªas⁄
;

323 
num
;

324 *
±r
;

325 
bio_°
 *
√xt_bio
;

326 
bio_°
 *
¥ev_bio
;

327 
ª„ªn˚s
;

328 
num_ªad
;

329 
num_wrôe
;

331 
CRYPTO_EX_DATA
 
ex_d©a
;

334 
DECLARE_STACK_OF
(
BIO
)

336 
	sbio_f_buf„r_˘x_°ru˘


348 
ibuf_size
;

349 
obuf_size
;

351 *
ibuf
;

352 
ibuf_Àn
;

353 
ibuf_off
;

355 *
obuf
;

356 
obuf_Àn
;

357 
obuf_off
;

358 } 
	tBIO_F_BUFFER_CTX
;

361 
	ta¢1_ps_func
(
	tBIO
 *
	tb
, **
	tpbuf
, *
	t∂í
, *
	t∑rg
);

363 #i‚de‡
OPENSSL_NO_SCTP


365 
	sbio_dgøm_s˘p_¢döfo


367 
uöt16_t
 
¢d_sid
;

368 
uöt16_t
 
¢d_Êags
;

369 
uöt32_t
 
¢d_µid
;

370 
uöt32_t
 
¢d_c⁄ãxt
;

373 
	sbio_dgøm_s˘p_rcvöfo


375 
uöt16_t
 
rcv_sid
;

376 
uöt16_t
 
rcv_s¢
;

377 
uöt16_t
 
rcv_Êags
;

378 
uöt32_t
 
rcv_µid
;

379 
uöt32_t
 
rcv_t¢
;

380 
uöt32_t
 
rcv_cumt¢
;

381 
uöt32_t
 
rcv_c⁄ãxt
;

384 
	sbio_dgøm_s˘p_¥öfo


386 
uöt16_t
 
¥_pﬁicy
;

387 
uöt32_t
 
¥_vÆue
;

392 
	#BIO_CONN_S_BEFORE
 1

	)

393 
	#BIO_CONN_S_GET_IP
 2

	)

394 
	#BIO_CONN_S_GET_PORT
 3

	)

395 
	#BIO_CONN_S_CREATE_SOCKET
 4

	)

396 
	#BIO_CONN_S_CONNECT
 5

	)

397 
	#BIO_CONN_S_OK
 6

	)

398 
	#BIO_CONN_S_BLOCKED_CONNECT
 7

	)

399 
	#BIO_CONN_S_NBIO
 8

	)

402 
	#BIO_C_SET_CONNECT
 100

	)

403 
	#BIO_C_DO_STATE_MACHINE
 101

	)

404 
	#BIO_C_SET_NBIO
 102

	)

405 
	#BIO_C_SET_PROXY_PARAM
 103

	)

406 
	#BIO_C_SET_FD
 104

	)

407 
	#BIO_C_GET_FD
 105

	)

408 
	#BIO_C_SET_FILE_PTR
 106

	)

409 
	#BIO_C_GET_FILE_PTR
 107

	)

410 
	#BIO_C_SET_FILENAME
 108

	)

411 
	#BIO_C_SET_SSL
 109

	)

412 
	#BIO_C_GET_SSL
 110

	)

413 
	#BIO_C_SET_MD
 111

	)

414 
	#BIO_C_GET_MD
 112

	)

415 
	#BIO_C_GET_CIPHER_STATUS
 113

	)

416 
	#BIO_C_SET_BUF_MEM
 114

	)

417 
	#BIO_C_GET_BUF_MEM_PTR
 115

	)

418 
	#BIO_C_GET_BUFF_NUM_LINES
 116

	)

419 
	#BIO_C_SET_BUFF_SIZE
 117

	)

420 
	#BIO_C_SET_ACCEPT
 118

	)

421 
	#BIO_C_SSL_MODE
 119

	)

422 
	#BIO_C_GET_MD_CTX
 120

	)

423 
	#BIO_C_GET_PROXY_PARAM
 121

	)

424 
	#BIO_C_SET_BUFF_READ_DATA
 122

	)

425 
	#BIO_C_GET_CONNECT
 123

	)

426 
	#BIO_C_GET_ACCEPT
 124

	)

427 
	#BIO_C_SET_SSL_RENEGOTIATE_BYTES
 125

	)

428 
	#BIO_C_GET_SSL_NUM_RENEGOTIATES
 126

	)

429 
	#BIO_C_SET_SSL_RENEGOTIATE_TIMEOUT
 127

	)

430 
	#BIO_C_FILE_SEEK
 128

	)

431 
	#BIO_C_GET_CIPHER_CTX
 129

	)

432 
	#BIO_C_SET_BUF_MEM_EOF_RETURN
 130

	)

433 
	#BIO_C_SET_BIND_MODE
 131

	)

434 
	#BIO_C_GET_BIND_MODE
 132

	)

435 
	#BIO_C_FILE_TELL
 133

	)

436 
	#BIO_C_GET_SOCKS
 134

	)

437 
	#BIO_C_SET_SOCKS
 135

	)

439 
	#BIO_C_SET_WRITE_BUF_SIZE
 136

	)

440 
	#BIO_C_GET_WRITE_BUF_SIZE
 137

	)

441 
	#BIO_C_MAKE_BIO_PAIR
 138

	)

442 
	#BIO_C_DESTROY_BIO_PAIR
 139

	)

443 
	#BIO_C_GET_WRITE_GUARANTEE
 140

	)

444 
	#BIO_C_GET_READ_REQUEST
 141

	)

445 
	#BIO_C_SHUTDOWN_WR
 142

	)

446 
	#BIO_C_NREAD0
 143

	)

447 
	#BIO_C_NREAD
 144

	)

448 
	#BIO_C_NWRITE0
 145

	)

449 
	#BIO_C_NWRITE
 146

	)

450 
	#BIO_C_RESET_READ_REQUEST
 147

	)

451 
	#BIO_C_SET_MD_CTX
 148

	)

453 
	#BIO_C_SET_PREFIX
 149

	)

454 
	#BIO_C_GET_PREFIX
 150

	)

455 
	#BIO_C_SET_SUFFIX
 151

	)

456 
	#BIO_C_GET_SUFFIX
 152

	)

458 
	#BIO_C_SET_EX_ARG
 153

	)

459 
	#BIO_C_GET_EX_ARG
 154

	)

461 
	#BIO_£t_≠p_d©a
(
s
,
¨g
Ë
	`BIO_£t_ex_d©a
(s,0,¨g)

	)

462 
	#BIO_gë_≠p_d©a
(
s
Ë
	`BIO_gë_ex_d©a
(s,0)

	)

465 
	#BIO_£t_c⁄n_ho°«me
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_CONNECT
,0,(*Íame)

	)

466 
	#BIO_£t_c⁄n_p‹t
(
b
,
p‹t
Ë
	`BIO_˘æ
(b,
BIO_C_SET_CONNECT
,1,(*Ì‹t)

	)

467 
	#BIO_£t_c⁄n_ù
(
b
,
ù
Ë
	`BIO_˘æ
(b,
BIO_C_SET_CONNECT
,2,(*)ù)

	)

468 
	#BIO_£t_c⁄n_öt_p‹t
(
b
,
p‹t
Ë
	`BIO_˘æ
(b,
BIO_C_SET_CONNECT
,3,(*Ì‹t)

	)

469 
	#BIO_gë_c⁄n_ho°«me
(
b
Ë
	`BIO_±r_˘æ
(b,
BIO_C_GET_CONNECT
,0)

	)

470 
	#BIO_gë_c⁄n_p‹t
(
b
Ë
	`BIO_±r_˘æ
(b,
BIO_C_GET_CONNECT
,1)

	)

471 
	#BIO_gë_c⁄n_ù
(
b
Ë
	`BIO_±r_˘æ
(b,
BIO_C_GET_CONNECT
,2)

	)

472 
	#BIO_gë_c⁄n_öt_p‹t
(
b
Ë
	`BIO_öt_˘æ
(b,
BIO_C_GET_CONNECT
,3,0)

	)

475 
	#BIO_£t_nbio
(
b
,
n
Ë
	`BIO_˘æ
(b,
BIO_C_SET_NBIO
,“),
NULL
)

	)

478 
	#BIO_£t_ac˚±_p‹t
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_ACCEPT
,0,(*Íame)

	)

479 
	#BIO_gë_ac˚±_p‹t
(
b
Ë
	`BIO_±r_˘æ
(b,
BIO_C_GET_ACCEPT
,0)

	)

481 
	#BIO_£t_nbio_ac˚±
(
b
,
n
Ë
	`BIO_˘æ
(b,
BIO_C_SET_ACCEPT
,1,“)?(*)"a":
NULL
)

	)

482 
	#BIO_£t_ac˚±_bios
(
b
,
bio
Ë
	`BIO_˘æ
(b,
BIO_C_SET_ACCEPT
,2,(*)bio)

	)

484 
	#BIO_BIND_NORMAL
 0

	)

485 
	#BIO_BIND_REUSEADDR_IF_UNUSED
 1

	)

486 
	#BIO_BIND_REUSEADDR
 2

	)

487 
	#BIO_£t_böd_mode
(
b
,
mode
Ë
	`BIO_˘æ
(b,
BIO_C_SET_BIND_MODE
,mode,
NULL
)

	)

488 
	#BIO_gë_böd_mode
(
b
,
mode
Ë
	`BIO_˘æ
(b,
BIO_C_GET_BIND_MODE
,0,
NULL
)

	)

490 
	#BIO_do_c⁄√˘
(
b
Ë
	`BIO_do_h™dshake
(b)

	)

491 
	#BIO_do_ac˚±
(
b
Ë
	`BIO_do_h™dshake
(b)

	)

492 
	#BIO_do_h™dshake
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_DO_STATE_MACHINE
,0,
NULL
)

	)

495 
	#BIO_£t_uæ
(
b
,
uæ
Ë
	`BIO_˘æ
(b,
BIO_C_SET_PROXY_PARAM
,0,(*)(uæ))

	)

496 
	#BIO_£t_¥oxõs
(
b
,
p
Ë
	`BIO_˘æ
(b,
BIO_C_SET_PROXY_PARAM
,1,(*)’))

	)

498 
	#BIO_£t_fûãr_bio
(
b
,
s
Ë
	`BIO_˘æ
(b,
BIO_C_SET_PROXY_PARAM
,2,(*)(s))

	)

500 
	#BIO_£t_¥oxy_cb
(
b
,
cb
Ë
	`BIO_ˇŒback_˘æ
(b,
BIO_C_SET_PROXY_PARAM
,3,(*(*cb)()))

	)

501 
	#BIO_£t_¥oxy_hódî
(
b
,
sk
Ë
	`BIO_˘æ
(b,
BIO_C_SET_PROXY_PARAM
,4,(*)sk)

	)

502 
	#BIO_£t_no_c⁄√˘_ªtu∫
(
b
,
boﬁ
Ë
	`BIO_öt_˘æ
(b,
BIO_C_SET_PROXY_PARAM
,5,boﬁ)

	)

504 
	#BIO_gë_¥oxy_hódî
(
b
,
skp
Ë
	`BIO_˘æ
(b,
BIO_C_GET_PROXY_PARAM
,0,(*)skp)

	)

505 
	#BIO_gë_¥oxõs
(
b
,
pxy_p
Ë
	`BIO_˘æ
(b,
BIO_C_GET_PROXY_PARAM
,1,(*)’xy_p))

	)

506 
	#BIO_gë_uæ
(
b
,
uæ
Ë
	`BIO_˘æ
(b,
BIO_C_GET_PROXY_PARAM
,2,(*)(uæ))

	)

507 
	#BIO_gë_no_c⁄√˘_ªtu∫
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_GET_PROXY_PARAM
,5,
NULL
)

	)

509 
	#BIO_£t_fd
(
b
,
fd
,
c
Ë
	`BIO_öt_˘æ
(b,
BIO_C_SET_FD
,c,fd)

	)

510 
	#BIO_gë_fd
(
b
,
c
Ë
	`BIO_˘æ
(b,
BIO_C_GET_FD
,0,(*)c)

	)

512 
	#BIO_£t_Â
(
b
,
Â
,
c
Ë
	`BIO_˘æ
(b,
BIO_C_SET_FILE_PTR
,c,(*)Â)

	)

513 
	#BIO_gë_Â
(
b
,
Âp
Ë
	`BIO_˘æ
(b,
BIO_C_GET_FILE_PTR
,0,(*)Âp)

	)

515 
	#BIO_£ek
(
b
,
ofs
Ë()
	`BIO_˘æ
(b,
BIO_C_FILE_SEEK
,ofs,
NULL
)

	)

516 
	#BIO_ãŒ
(
b
Ë()
	`BIO_˘æ
(b,
BIO_C_FILE_TELL
,0,
NULL
)

	)

520 #ifde‡
CONST_STRICT


524 
BIO_ªad_fûíame
(
BIO
 *
b
,c⁄° *
«me
);

526 
	#BIO_ªad_fûíame
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_FILENAME
, \

527 
BIO_CLOSE
|
BIO_FP_READ
,(*)
«me
)

	)

529 
	#BIO_wrôe_fûíame
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_FILENAME
, \

530 
BIO_CLOSE
|
BIO_FP_WRITE
,
«me
)

	)

531 
	#BIO_≠≥nd_fûíame
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_FILENAME
, \

532 
BIO_CLOSE
|
BIO_FP_APPEND
,
«me
)

	)

533 
	#BIO_rw_fûíame
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_FILENAME
, \

534 
BIO_CLOSE
|
BIO_FP_READ
|
BIO_FP_WRITE
,
«me
)

	)

540 
	#BIO_£t_s¶
(
b
,
s¶
,
c
Ë
	`BIO_˘æ
(b,
BIO_C_SET_SSL
,c,(*)s¶)

	)

541 
	#BIO_gë_s¶
(
b
,
s¶p
Ë
	`BIO_˘æ
(b,
BIO_C_GET_SSL
,0,(*)s¶p)

	)

542 
	#BIO_£t_s¶_mode
(
b
,
˛õ¡
Ë
	`BIO_˘æ
(b,
BIO_C_SSL_MODE
,˛õ¡,
NULL
)

	)

543 
	#BIO_£t_s¶_ª√gŸüã_byãs
(
b
,
num
) \

544 
	`BIO_˘æ
(
b
,
BIO_C_SET_SSL_RENEGOTIATE_BYTES
,
num
,
NULL
);

	)

545 
	#BIO_gë_num_ª√gŸüãs
(
b
) \

546 
	`BIO_˘æ
(
b
,
BIO_C_GET_SSL_NUM_RENEGOTIATES
,0,
NULL
);

	)

547 
	#BIO_£t_s¶_ª√gŸüã_timeout
(
b
,
£c⁄ds
) \

548 
	`BIO_˘æ
(
b
,
BIO_C_SET_SSL_RENEGOTIATE_TIMEOUT
,
£c⁄ds
,
NULL
);

	)

553 
	#BIO_gë_mem_d©a
(
b
,
µ
Ë
	`BIO_˘æ
(b,
BIO_CTRL_INFO
,0,(*Ìp)

	)

554 
	#BIO_£t_mem_buf
(
b
,
bm
,
c
Ë
	`BIO_˘æ
(b,
BIO_C_SET_BUF_MEM
,c,(*)bm)

	)

555 
	#BIO_gë_mem_±r
(
b
,
µ
Ë
	`BIO_˘æ
(b,
BIO_C_GET_BUF_MEM_PTR
,0,(*Ìp)

	)

556 
	#BIO_£t_mem_eof_ªtu∫
(
b
,
v
) \

557 
	`BIO_˘æ
(
b
,
BIO_C_SET_BUF_MEM_EOF_RETURN
,
v
,
NULL
)

	)

560 
	#BIO_gë_buf„r_num_löes
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_GET_BUFF_NUM_LINES
,0,
NULL
)

	)

561 
	#BIO_£t_buf„r_size
(
b
,
size
Ë
	`BIO_˘æ
(b,
BIO_C_SET_BUFF_SIZE
,size,
NULL
)

	)

562 
	#BIO_£t_ªad_buf„r_size
(
b
,
size
Ë
	`BIO_öt_˘æ
(b,
BIO_C_SET_BUFF_SIZE
,size,0)

	)

563 
	#BIO_£t_wrôe_buf„r_size
(
b
,
size
Ë
	`BIO_öt_˘æ
(b,
BIO_C_SET_BUFF_SIZE
,size,1)

	)

564 
	#BIO_£t_buf„r_ªad_d©a
(
b
,
buf
,
num
Ë
	`BIO_˘æ
(b,
BIO_C_SET_BUFF_READ_DATA
,num,buf)

	)

567 
	#BIO_dup_°©e
(
b
,
ªt
Ë
	`BIO_˘æ
(b,
BIO_CTRL_DUP
,0,(*)‘ë))

	)

569 
	#BIO_ª£t
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_RESET
,0,
NULL
)

	)

570 
	#BIO_eof
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_EOF
,0,
NULL
)

	)

571 
	#BIO_£t_˛o£
(
b
,
c
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_SET_CLOSE
,(c),
NULL
)

	)

572 
	#BIO_gë_˛o£
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_GET_CLOSE
,0,
NULL
)

	)

573 
	#BIO_≥ndög
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_PENDING
,0,
NULL
)

	)

574 
	#BIO_w≥ndög
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_WPENDING
,0,
NULL
)

	)

576 
size_t
 
BIO_˘æ_≥ndög
(
BIO
 *
b
);

577 
size_t
 
BIO_˘æ_w≥ndög
(
BIO
 *
b
);

578 
	#BIO_Êush
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_FLUSH
,0,
NULL
)

	)

579 
	#BIO_gë_öfo_ˇŒback
(
b
,
cbp
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_GET_CALLBACK
,0, \

580 
cbp
)

	)

581 
	#BIO_£t_öfo_ˇŒback
(
b
,
cb
Ë()
	`BIO_ˇŒback_˘æ
(b,
BIO_CTRL_SET_CALLBACK
,cb)

	)

584 
	#BIO_buf„r_gë_num_löes
(
b
Ë
	`BIO_˘æ
(b,
BIO_CTRL_GET
,0,
NULL
)

	)

587 
	#BIO_£t_wrôe_buf_size
(
b
,
size
Ë()
	`BIO_˘æ
(b,
BIO_C_SET_WRITE_BUF_SIZE
,size,
NULL
)

	)

588 
	#BIO_gë_wrôe_buf_size
(
b
,
size
Ë(
size_t
)
	`BIO_˘æ
(b,
BIO_C_GET_WRITE_BUF_SIZE
,size,
NULL
)

	)

589 
	#BIO_make_bio_∑ú
(
b1
,
b2
Ë()
	`BIO_˘æ
(b1,
BIO_C_MAKE_BIO_PAIR
,0,b2)

	)

590 
	#BIO_de°roy_bio_∑ú
(
b
Ë()
	`BIO_˘æ
(b,
BIO_C_DESTROY_BIO_PAIR
,0,
NULL
)

	)

591 
	#BIO_shutdown_wr
(
b
Ë()
	`BIO_˘æ
(b, 
BIO_C_SHUTDOWN_WR
, 0, 
NULL
)

	)

593 
	#BIO_gë_wrôe_gu¨™ãe
(
b
Ë()
	`BIO_˘æ
(b,
BIO_C_GET_WRITE_GUARANTEE
,0,
NULL
)

	)

594 
	#BIO_gë_ªad_ªque°
(
b
Ë()
	`BIO_˘æ
(b,
BIO_C_GET_READ_REQUEST
,0,
NULL
)

	)

595 
size_t
 
BIO_˘æ_gë_wrôe_gu¨™ãe
(
BIO
 *
b
);

596 
size_t
 
BIO_˘æ_gë_ªad_ªque°
(
BIO
 *
b
);

597 
BIO_˘æ_ª£t_ªad_ªque°
(
BIO
 *
b
);

600 
	#BIO_˘æ_dgøm_c⁄√˘
(
b
,
≥î
) \

601 ()
	`BIO_˘æ
(
b
,
BIO_CTRL_DGRAM_CONNECT
,0, (*)
≥î
)

	)

602 
	#BIO_˘æ_£t_c⁄√˘ed
(
b
, 
°©e
, 
≥î
) \

603 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_SET_CONNECTED
, 
°©e
, (*)
≥î
)

	)

604 
	#BIO_dgøm_ªcv_timedout
(
b
) \

605 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_GET_RECV_TIMER_EXP
, 0, 
NULL
)

	)

606 
	#BIO_dgøm_£nd_timedout
(
b
) \

607 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_GET_SEND_TIMER_EXP
, 0, 
NULL
)

	)

608 
	#BIO_dgøm_gë_≥î
(
b
,
≥î
) \

609 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_GET_PEER
, 0, (*)
≥î
)

	)

610 
	#BIO_dgøm_£t_≥î
(
b
,
≥î
) \

611 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_SET_PEER
, 0, (*)
≥î
)

	)

612 
	#BIO_dgøm_gë_mtu_ovîhód
(
b
) \

613 ()
	`BIO_˘æ
((
b
), 
BIO_CTRL_DGRAM_GET_MTU_OVERHEAD
, 0, 
NULL
)

	)

618 
BIO_£t_ex_d©a
(
BIO
 *
bio
,
idx
,*
d©a
);

619 *
BIO_gë_ex_d©a
(
BIO
 *
bio
,
idx
);

620 
BIO_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

621 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

622 
BIO_numbî_ªad
(
BIO
 *
bio
);

623 
BIO_numbî_wrôãn
(
BIO
 *
bio
);

626 
BIO_a¢1_£t_¥efix
(
BIO
 *
b
, 
a¢1_ps_func
 *
¥efix
,

627 
a¢1_ps_func
 *
¥efix_‰ì
);

628 
BIO_a¢1_gë_¥efix
(
BIO
 *
b
, 
a¢1_ps_func
 **
µªfix
,

629 
a¢1_ps_func
 **
µªfix_‰ì
);

630 
BIO_a¢1_£t_suffix
(
BIO
 *
b
, 
a¢1_ps_func
 *
suffix
,

631 
a¢1_ps_func
 *
suffix_‰ì
);

632 
BIO_a¢1_gë_suffix
(
BIO
 *
b
, 
a¢1_ps_func
 **
psuffix
,

633 
a¢1_ps_func
 **
psuffix_‰ì
);

635 #i‚de‡
OPENSSL_NO_FP_API


636 
BIO_METHOD
 *
BIO_s_fûe
();

637 
BIO
 *
BIO_√w_fûe
(c⁄° *
fûíame
, c⁄° *
mode
);

638 
BIO
 *
BIO_√w_Â
(
FILE
 *
°ªam
, 
˛o£_Êag
);

639 
	#BIO_s_fûe_öã∫Æ
 
BIO_s_fûe


	)

641 
BIO
 * 
BIO_√w
(
BIO_METHOD
 *
ty≥
);

642 
BIO_£t
(
BIO
 *
a
,
BIO_METHOD
 *
ty≥
);

643 
BIO_‰ì
(
BIO
 *
a
);

644 
BIO_v‰ì
(
BIO
 *
a
);

645 
BIO_ªad
(
BIO
 *
b
, *
d©a
, 
Àn
);

646 
BIO_gës
(
BIO
 *
bp
,*
buf
, 
size
);

647 
BIO_wrôe
(
BIO
 *
b
, c⁄° *
d©a
, 
Àn
);

648 
BIO_puts
(
BIO
 *
bp
,c⁄° *
buf
);

649 
BIO_ödít
(
BIO
 *
b
,
ödít
,
max
);

650 
BIO_˘æ
(
BIO
 *
bp
,
cmd
,
œrg
,*
∑rg
);

651 
BIO_ˇŒback_˘æ
(
BIO
 *
b
, 
cmd
, (*
Â
)(
bio_°
 *, , const *, , , ));

652 * 
BIO_±r_˘æ
(
BIO
 *
bp
,
cmd
,
œrg
);

653 
BIO_öt_˘æ
(
BIO
 *
bp
,
cmd
,
œrg
,
ürg
);

654 
BIO
 * 
BIO_push
(BIO *
b
,BIO *
≠≥nd
);

655 
BIO
 * 
BIO_p›
(BIO *
b
);

656 
BIO_‰ì_Æl
(
BIO
 *
a
);

657 
BIO
 * 
BIO_föd_ty≥
(BIO *
b
,
bio_ty≥
);

658 
BIO
 * 
BIO_√xt
(BIO *
b
);

659 
BIO
 * 
BIO_gë_ªåy_BIO
(BIO *
bio
, *
ªas⁄
);

660 
BIO_gë_ªåy_ªas⁄
(
BIO
 *
bio
);

661 
BIO
 * 
BIO_dup_chaö
(BIO *
ö
);

663 
BIO_ƒód0
(
BIO
 *
bio
, **
buf
);

664 
BIO_ƒód
(
BIO
 *
bio
, **
buf
, 
num
);

665 
BIO_nwrôe0
(
BIO
 *
bio
, **
buf
);

666 
BIO_nwrôe
(
BIO
 *
bio
, **
buf
, 
num
);

668 
BIO_debug_ˇŒback
(
BIO
 *
bio
,
cmd
,c⁄° *
¨gp
,
¨gi
,

669 
¨gl
,
ªt
);

671 
BIO_METHOD
 *
BIO_s_mem
();

672 
BIO
 *
BIO_√w_mem_buf
(*
buf
, 
Àn
);

673 
BIO_METHOD
 *
BIO_s_sockë
();

674 
BIO_METHOD
 *
BIO_s_c⁄√˘
();

675 
BIO_METHOD
 *
BIO_s_ac˚±
();

676 
BIO_METHOD
 *
BIO_s_fd
();

677 #i‚de‡
OPENSSL_SYS_OS2


678 
BIO_METHOD
 *
BIO_s_log
();

680 
BIO_METHOD
 *
BIO_s_bio
();

681 
BIO_METHOD
 *
BIO_s_nuŒ
();

682 
BIO_METHOD
 *
BIO_f_nuŒ
();

683 
BIO_METHOD
 *
BIO_f_buf„r
();

684 #ifde‡
OPENSSL_SYS_VMS


685 
BIO_METHOD
 *
BIO_f_löebuf„r
();

687 
BIO_METHOD
 *
BIO_f_nbio_ã°
();

688 #i‚de‡
OPENSSL_NO_DGRAM


689 
BIO_METHOD
 *
BIO_s_d©agøm
();

690 #i‚de‡
OPENSSL_NO_SCTP


691 
BIO_METHOD
 *
BIO_s_d©agøm_s˘p
();

697 
BIO_sock_should_ªåy
(
i
);

698 
BIO_sock_n⁄_Áèl_îr‹
(
îr‹
);

699 
BIO_dgøm_n⁄_Áèl_îr‹
(
îr‹
);

701 
BIO_fd_should_ªåy
(
i
);

702 
BIO_fd_n⁄_Áèl_îr‹
(
îr‹
);

703 
BIO_dump_cb
((*
cb
)(c⁄° *
d©a
, 
size_t
 
Àn
, *
u
),

704 *
u
, c⁄° *
s
, 
Àn
);

705 
BIO_dump_ödít_cb
((*
cb
)(c⁄° *
d©a
, 
size_t
 
Àn
, *
u
),

706 *
u
, c⁄° *
s
, 
Àn
, 
ödít
);

707 
BIO_dump
(
BIO
 *
b
,c⁄° *
byãs
,
Àn
);

708 
BIO_dump_ödít
(
BIO
 *
b
,c⁄° *
byãs
,
Àn
,
ödít
);

709 #i‚de‡
OPENSSL_NO_FP_API


710 
BIO_dump_Â
(
FILE
 *
Â
, c⁄° *
s
, 
Àn
);

711 
BIO_dump_ödít_Â
(
FILE
 *
Â
, c⁄° *
s
, 
Àn
, 
ödít
);

713 
ho°ít
 *
BIO_gëho°by«me
(c⁄° *
«me
);

722 
BIO_sock_îr‹
(
sock
);

723 
BIO_sockë_io˘l
(
fd
, 
ty≥
, *
¨g
);

724 
BIO_sockë_nbio
(
fd
,
mode
);

725 
BIO_gë_p‹t
(c⁄° *
°r
, *
p‹t_±r
);

726 
BIO_gë_ho°_ù
(c⁄° *
°r
, *
ù
);

727 
BIO_gë_ac˚±_sockë
(*
ho°_p‹t
,
mode
);

728 
BIO_ac˚±
(
sock
,**
ù_p‹t
);

729 
BIO_sock_öô
();

730 
BIO_sock_˛ónup
();

731 
BIO_£t_t˝_ndñay
(
sock
,
tu∫_⁄
);

733 
BIO
 *
BIO_√w_sockë
(
sock
, 
˛o£_Êag
);

734 
BIO
 *
BIO_√w_dgøm
(
fd
, 
˛o£_Êag
);

735 #i‚de‡
OPENSSL_NO_SCTP


736 
BIO
 *
BIO_√w_dgøm_s˘p
(
fd
, 
˛o£_Êag
);

737 
BIO_dgøm_is_s˘p
(
BIO
 *
bio
);

738 
BIO_dgøm_s˘p_nŸifiˇti⁄_cb
(
BIO
 *
b
,

739 (*
h™dÀ_nŸifiˇti⁄s
)(
BIO
 *
bio
, *
c⁄ãxt
, *
buf
),

740 *
c⁄ãxt
);

741 
BIO_dgøm_s˘p_waô_f‹_dry
(
BIO
 *
b
);

742 
BIO_dgøm_s˘p_msg_waôög
(
BIO
 *
b
);

744 
BIO
 *
BIO_√w_fd
(
fd
, 
˛o£_Êag
);

745 
BIO
 *
BIO_√w_c⁄√˘
(*
ho°_p‹t
);

746 
BIO
 *
BIO_√w_ac˚±
(*
ho°_p‹t
);

748 
BIO_√w_bio_∑ú
(
BIO
 **
bio1
, 
size_t
 
wrôebuf1
,

749 
BIO
 **
bio2
, 
size_t
 
wrôebuf2
);

755 
BIO_c›y_√xt_ªåy
(
BIO
 *
b
);

759 #ifde‡
__GNUC__


760 
	#__bio_h__©å__
 
__©åibuã__


	)

762 
	#__bio_h__©å__
(
x
)

	)

764 
BIO_¥ötf
(
BIO
 *
bio
, c⁄° *
f‹m©
, ...)

765 
__bio_h__©å__
((
__f‹m©__
(
__¥ötf__
,2,3)));

766 
BIO_v¥ötf
(
BIO
 *
bio
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
)

767 
__bio_h__©å__
((
__f‹m©__
(
__¥ötf__
,2,0)));

768 
BIO_¢¥ötf
(*
buf
, 
size_t
 
n
, c⁄° *
f‹m©
, ...)

769 
__bio_h__©å__
((
__f‹m©__
(
__¥ötf__
,3,4)));

770 
BIO_v¢¥ötf
(*
buf
, 
size_t
 
n
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
)

771 
__bio_h__©å__
((
__f‹m©__
(
__¥ötf__
,3,0)));

772 #unde‡
__bio_h__©å__


778 
ERR_lﬂd_BIO_°rögs
();

783 
	#BIO_F_ACPT_STATE
 100

	)

784 
	#BIO_F_BIO_ACCEPT
 101

	)

785 
	#BIO_F_BIO_BER_GET_HEADER
 102

	)

786 
	#BIO_F_BIO_CALLBACK_CTRL
 131

	)

787 
	#BIO_F_BIO_CTRL
 103

	)

788 
	#BIO_F_BIO_GETHOSTBYNAME
 120

	)

789 
	#BIO_F_BIO_GETS
 104

	)

790 
	#BIO_F_BIO_GET_ACCEPT_SOCKET
 105

	)

791 
	#BIO_F_BIO_GET_HOST_IP
 106

	)

792 
	#BIO_F_BIO_GET_PORT
 107

	)

793 
	#BIO_F_BIO_MAKE_PAIR
 121

	)

794 
	#BIO_F_BIO_NEW
 108

	)

795 
	#BIO_F_BIO_NEW_FILE
 109

	)

796 
	#BIO_F_BIO_NEW_MEM_BUF
 126

	)

797 
	#BIO_F_BIO_NREAD
 123

	)

798 
	#BIO_F_BIO_NREAD0
 124

	)

799 
	#BIO_F_BIO_NWRITE
 125

	)

800 
	#BIO_F_BIO_NWRITE0
 122

	)

801 
	#BIO_F_BIO_PUTS
 110

	)

802 
	#BIO_F_BIO_READ
 111

	)

803 
	#BIO_F_BIO_SOCK_INIT
 112

	)

804 
	#BIO_F_BIO_WRITE
 113

	)

805 
	#BIO_F_BUFFER_CTRL
 114

	)

806 
	#BIO_F_CONN_CTRL
 127

	)

807 
	#BIO_F_CONN_STATE
 115

	)

808 
	#BIO_F_DGRAM_SCTP_READ
 132

	)

809 
	#BIO_F_FILE_CTRL
 116

	)

810 
	#BIO_F_FILE_READ
 130

	)

811 
	#BIO_F_LINEBUFFER_CTRL
 129

	)

812 
	#BIO_F_MEM_READ
 128

	)

813 
	#BIO_F_MEM_WRITE
 117

	)

814 
	#BIO_F_SSL_NEW
 118

	)

815 
	#BIO_F_WSASTARTUP
 119

	)

818 
	#BIO_R_ACCEPT_ERROR
 100

	)

819 
	#BIO_R_BAD_FOPEN_MODE
 101

	)

820 
	#BIO_R_BAD_HOSTNAME_LOOKUP
 102

	)

821 
	#BIO_R_BROKEN_PIPE
 124

	)

822 
	#BIO_R_CONNECT_ERROR
 103

	)

823 
	#BIO_R_EOF_ON_MEMORY_BIO
 127

	)

824 
	#BIO_R_ERROR_SETTING_NBIO
 104

	)

825 
	#BIO_R_ERROR_SETTING_NBIO_ON_ACCEPTED_SOCKET
 105

	)

826 
	#BIO_R_ERROR_SETTING_NBIO_ON_ACCEPT_SOCKET
 106

	)

827 
	#BIO_R_GETHOSTBYNAME_ADDR_IS_NOT_AF_INET
 107

	)

828 
	#BIO_R_INVALID_ARGUMENT
 125

	)

829 
	#BIO_R_INVALID_IP_ADDRESS
 108

	)

830 
	#BIO_R_IN_USE
 123

	)

831 
	#BIO_R_KEEPALIVE
 109

	)

832 
	#BIO_R_NBIO_CONNECT_ERROR
 110

	)

833 
	#BIO_R_NO_ACCEPT_PORT_SPECIFIED
 111

	)

834 
	#BIO_R_NO_HOSTNAME_SPECIFIED
 112

	)

835 
	#BIO_R_NO_PORT_DEFINED
 113

	)

836 
	#BIO_R_NO_PORT_SPECIFIED
 114

	)

837 
	#BIO_R_NO_SUCH_FILE
 128

	)

838 
	#BIO_R_NULL_PARAMETER
 115

	)

839 
	#BIO_R_TAG_MISMATCH
 116

	)

840 
	#BIO_R_UNABLE_TO_BIND_SOCKET
 117

	)

841 
	#BIO_R_UNABLE_TO_CREATE_SOCKET
 118

	)

842 
	#BIO_R_UNABLE_TO_LISTEN_SOCKET
 119

	)

843 
	#BIO_R_UNINITIALIZED
 120

	)

844 
	#BIO_R_UNSUPPORTED_METHOD
 121

	)

845 
	#BIO_R_WRITE_TO_READ_ONLY_BIO
 126

	)

846 
	#BIO_R_WSASTARTUP
 122

	)

848 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/buffer.h

59 #i‚de‡
HEADER_BUFFER_H


60 
	#HEADER_BUFFER_H


	)

62 
	~<›ís¶/os¶_typ.h
>

64 #ifde‡ 
__˝lu•lus


68 
	~<°ddef.h
>

70 #i‡!
deföed
(
NO_SYS_TYPES_H
)

71 
	~<sys/ty≥s.h
>

77 
	sbuf_mem_°


79 
size_t
 
Àngth
;

80 *
d©a
;

81 
size_t
 
max
;

84 
BUF_MEM
 *
BUF_MEM_√w
();

85 
BUF_MEM_‰ì
(
BUF_MEM
 *
a
);

86 
BUF_MEM_grow
(
BUF_MEM
 *
°r
, 
size_t
 
Àn
);

87 
BUF_MEM_grow_˛ón
(
BUF_MEM
 *
°r
, 
size_t
 
Àn
);

88 * 
BUF_°rdup
(c⁄° *
°r
);

89 * 
BUF_°∫dup
(c⁄° *
°r
, 
size_t
 
siz
);

90 * 
BUF_memdup
(c⁄° *
d©a
, 
size_t
 
siz
);

91 
BUF_ªvî£
(*
out
, c⁄° *
ö
, 
size_t
 
siz
);

94 
size_t
 
BUF_°æ˝y
(*
d°
,c⁄° *
§c
,size_à
siz
);

95 
size_t
 
BUF_°æˇt
(*
d°
,c⁄° *
§c
,size_à
siz
);

102 
ERR_lﬂd_BUF_°rögs
();

107 
	#BUF_F_BUF_MEMDUP
 103

	)

108 
	#BUF_F_BUF_MEM_GROW
 100

	)

109 
	#BUF_F_BUF_MEM_GROW_CLEAN
 105

	)

110 
	#BUF_F_BUF_MEM_NEW
 101

	)

111 
	#BUF_F_BUF_STRDUP
 102

	)

112 
	#BUF_F_BUF_STRNDUP
 104

	)

116 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/comp.h

2 #i‚de‡
HEADER_COMP_H


3 
	#HEADER_COMP_H


	)

5 
	~<›ís¶/¸y±o.h
>

7 #ifde‡ 
__˝lu•lus


11 
comp_˘x_°
 
	tCOMP_CTX
;

13 
	scomp_mëhod_°


15 
ty≥
;

16 c⁄° *
«me
;

17 (*
öô
)(
COMP_CTX
 *
˘x
);

18 (*
föish
)(
COMP_CTX
 *
˘x
);

19 (*
com¥ess
)(
COMP_CTX
 *
˘x
,

20 *
out
, 
ﬁí
,

21 *
ö
, 
ûí
);

22 (*
ex∑nd
)(
COMP_CTX
 *
˘x
,

23 *
out
, 
ﬁí
,

24 *
ö
, 
ûí
);

26 (*
˘æ
)();

27 (*
ˇŒback_˘æ
)();

28 } 
	tCOMP_METHOD
;

30 
	scomp_˘x_°


32 
COMP_METHOD
 *
mëh
;

33 
com¥ess_ö
;

34 
com¥ess_out
;

35 
ex∑nd_ö
;

36 
ex∑nd_out
;

38 
CRYPTO_EX_DATA
 
ex_d©a
;

42 
COMP_CTX
 *
COMP_CTX_√w
(
COMP_METHOD
 *
mëh
);

43 
COMP_CTX_‰ì
(
COMP_CTX
 *
˘x
);

44 
COMP_com¥ess_block
(
COMP_CTX
 *
˘x
, *
out
, 
ﬁí
,

45 *
ö
, 
ûí
);

46 
COMP_ex∑nd_block
(
COMP_CTX
 *
˘x
, *
out
, 
ﬁí
,

47 *
ö
, 
ûí
);

48 
COMP_METHOD
 *
COMP_æe
();

49 
COMP_METHOD
 *
COMP_zlib
();

50 
COMP_zlib_˛ónup
();

52 #ifde‡
HEADER_BIO_H


53 #ifde‡
ZLIB


54 
BIO_METHOD
 *
BIO_f_zlib
();

62 
ERR_lﬂd_COMP_°rögs
();

67 
	#COMP_F_BIO_ZLIB_FLUSH
 99

	)

68 
	#COMP_F_BIO_ZLIB_NEW
 100

	)

69 
	#COMP_F_BIO_ZLIB_READ
 101

	)

70 
	#COMP_F_BIO_ZLIB_WRITE
 102

	)

73 
	#COMP_R_ZLIB_DEFLATE_ERROR
 99

	)

74 
	#COMP_R_ZLIB_INFLATE_ERROR
 100

	)

75 
	#COMP_R_ZLIB_NOT_SUPPORTED
 101

	)

77 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/dtls1.h

60 #i‚de‡
HEADER_DTLS1_H


61 
	#HEADER_DTLS1_H


	)

63 
	~<›ís¶/buf„r.h
>

64 
	~<›ís¶/pqueue.h
>

65 #ifde‡
OPENSSL_SYS_VMS


66 
	~<ªsour˚.h
>

67 
	~<sys/timeb.h
>

69 #ifde‡
OPENSSL_SYS_WIN32


71 
	~<wösock.h
>

72 #ñi‡
deföed
(
OPENSSL_SYS_NETWARE
Ë&& !deföed(
_WINSOCK2API_
)

73 
	~<sys/timevÆ.h
>

75 #i‡
deföed
(
OPENSSL_SYS_VXWORKS
)

76 
	~<sys/times.h
>

78 
	~<sys/time.h
>

82 #ifde‡ 
__˝lu•lus


86 
	#DTLS1_VERSION
 0xFEFF

	)

87 
	#DTLS_MAX_VERSION
 
DTLS1_VERSION


	)

89 
	#DTLS1_BAD_VER
 0x0100

	)

93 
	#DTLS1_AD_MISSING_HANDSHAKE_MESSAGE
 110

	)

97 
	#DTLS1_COOKIE_LENGTH
 256

	)

99 
	#DTLS1_RT_HEADER_LENGTH
 13

	)

101 
	#DTLS1_HM_HEADER_LENGTH
 12

	)

103 
	#DTLS1_HM_BAD_FRAGMENT
 -2

	)

104 
	#DTLS1_HM_FRAGMENT_RETRY
 -3

	)

106 
	#DTLS1_CCS_HEADER_LENGTH
 1

	)

108 #ifde‡
DTLS1_AD_MISSING_HANDSHAKE_MESSAGE


109 
	#DTLS1_AL_HEADER_LENGTH
 7

	)

111 
	#DTLS1_AL_HEADER_LENGTH
 2

	)

114 #i‚de‡
OPENSSL_NO_SSL_INTERN


116 #i‚de‡
OPENSSL_NO_SCTP


117 
	#DTLS1_SCTP_AUTH_LABEL
 "EXPORTER_DTLS_OVER_SCTP"

	)

121 
	#DTLS1_MAX_MTU_OVERHEAD
 48

	)

123 
	sdés1_bôm≠_°


125 
m≠
;

127 
max_£q_num
[8];

130 } 
	tDTLS1_BITMAP
;

132 
	sdés1_ªå™smô_°©e


134 
EVP_CIPHER_CTX
 *
íc_wrôe_˘x
;

135 
EVP_MD_CTX
 *
wrôe_hash
;

136 #i‚de‡
OPENSSL_NO_COMP


137 
COMP_CTX
 *
com¥ess
;

139 *
com¥ess
;

141 
SSL_SESSION
 *
£ssi⁄
;

142 
ïoch
;

145 
	shm_hódî_°


147 
ty≥
;

148 
msg_Àn
;

149 
£q
;

150 
‰ag_off
;

151 
‰ag_Àn
;

152 
is_ccs
;

153 
dés1_ªå™smô_°©e
 
ßved_ªå™smô_°©e
;

156 
	sccs_hódî_°


158 
ty≥
;

159 
£q
;

162 
	sdés1_timeout_°


165 
ªad_timeouts
;

168 
wrôe_timeouts
;

171 
num_Æîts
;

174 
	sªc‹d_pqueue_°


176 
ïoch
;

177 
pqueue
 
q
;

178 } 
	tªc‹d_pqueue
;

180 
	shm_‰agmít_°


182 
hm_hódî_°
 
msg_hódî
;

183 *
‰agmít
;

184 *
ªas£mbly
;

185 } 
	thm_‰agmít
;

187 
	sdés1_°©e_°


189 
£nd_cookõ
;

190 
cookõ
[
DTLS1_COOKIE_LENGTH
];

191 
rcvd_cookõ
[
DTLS1_COOKIE_LENGTH
];

192 
cookõ_Àn
;

199 
r_ïoch
;

200 
w_ïoch
;

203 
DTLS1_BITMAP
 
bôm≠
;

206 
DTLS1_BITMAP
 
√xt_bôm≠
;

209 
h™dshake_wrôe_£q
;

210 
√xt_h™dshake_wrôe_£q
;

212 
h™dshake_ªad_£q
;

215 
œ°_wrôe_£quí˚
[8];

218 
ªc‹d_pqueue
 
u≈ro˚s£d_rcds
;

219 
ªc‹d_pqueue
 
¥o˚s£d_rcds
;

222 
pqueue
 
buf„ªd_mesßges
;

225 
pqueue
 
£¡_mesßges
;

232 
ªc‹d_pqueue
 
buf„ªd_≠p_d©a
;

235 
li°í
;

237 
lök_mtu
;

238 
mtu
;

240 
hm_hódî_°
 
w_msg_hdr
;

241 
hm_hódî_°
 
r_msg_hdr
;

243 
dés1_timeout_°
 
timeout
;

246 
timevÆ
 
√xt_timeout
;

249 
timeout_duøti⁄
;

253 
Æît_‰agmít
[
DTLS1_AL_HEADER_LENGTH
];

254 
Æît_‰agmít_Àn
;

255 
h™dshake_‰agmít
[
DTLS1_HM_HEADER_LENGTH
];

256 
h™dshake_‰agmít_Àn
;

258 
ªå™smôtög
;

263 
ch™ge_cùhî_•ec_ok
;

265 #i‚de‡
OPENSSL_NO_SCTP


267 
√xt_°©e
;

269 
shutdown_ª˚ived
;

272 } 
	tDTLS1_STATE
;

274 
	sdés1_ªc‹d_d©a_°


276 *
∑ckë
;

277 
∑ckë_Àngth
;

278 
SSL3_BUFFER
 
rbuf
;

279 
SSL3_RECORD
 
ºec
;

280 #i‚de‡
OPENSSL_NO_SCTP


281 
bio_dgøm_s˘p_rcvöfo
 
ªc‹döfo
;

283 } 
	tDTLS1_RECORD_DATA
;

288 
	#DTLS1_TMO_READ_COUNT
 2

	)

289 
	#DTLS1_TMO_WRITE_COUNT
 2

	)

291 
	#DTLS1_TMO_ALERT_COUNT
 12

	)

293 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/e_os2.h

56 
	~<›ís¶/›ís¶c⁄f.h
>

58 #i‚de‡
HEADER_E_OS2_H


59 
	#HEADER_E_OS2_H


	)

61 #ifde‡ 
__˝lu•lus


71 
	#OPENSSL_SYS_UNIX


	)

74 #i‡
deföed
(
__MWERKS__
Ë&& deföed(
macötosh
Ë|| deföed(
OPENSSL_SYSNAME_MAC
)

75 #unde‡
OPENSSL_SYS_UNIX


76 
	#OPENSSL_SYS_MACINTOSH_CLASSIC


	)

80 #i‡
deföed
(
NETWARE
Ë|| deföed(
OPENSSL_SYSNAME_NETWARE
)

81 #unde‡
OPENSSL_SYS_UNIX


82 
	#OPENSSL_SYS_NETWARE


	)

89 #i‡
deföed
(
OPENSSL_SYSNAME_MSDOS
)

90 #unde‡
OPENSSL_SYS_UNIX


91 
	#OPENSSL_SYS_MSDOS


	)

96 #i‡
deföed
(
OPENSSL_SYSNAME_UWIN
)

97 #unde‡
OPENSSL_SYS_UNIX


98 
	#OPENSSL_SYS_WIN32_UWIN


	)

100 #i‡
deföed
(
__CYGWIN32__
Ë|| deföed(
OPENSSL_SYSNAME_CYGWIN32
)

101 #unde‡
OPENSSL_SYS_UNIX


102 
	#OPENSSL_SYS_WIN32_CYGWIN


	)

104 #i‡
deföed
(
_WIN32
Ë|| deföed(
OPENSSL_SYSNAME_WIN32
)

105 #unde‡
OPENSSL_SYS_UNIX


106 
	#OPENSSL_SYS_WIN32


	)

108 #i‡
deföed
(
OPENSSL_SYSNAME_WINNT
)

109 #unde‡
OPENSSL_SYS_UNIX


110 
	#OPENSSL_SYS_WINNT


	)

112 #i‡
deföed
(
OPENSSL_SYSNAME_WINCE
)

113 #unde‡
OPENSSL_SYS_UNIX


114 
	#OPENSSL_SYS_WINCE


	)

120 #i‡
deföed
(
OPENSSL_SYS_WIN32
Ë|| deföed(
OPENSSL_SYS_WINNT
Ë|| deföed(
OPENSSL_SYS_WINCE
)

121 #unde‡
OPENSSL_SYS_UNIX


122 
	#OPENSSL_SYS_WINDOWS


	)

123 #i‚de‡
OPENSSL_SYS_MSDOS


124 
	#OPENSSL_SYS_MSDOS


	)

131 #ifde‡
OPENSSL_SYS_WINDOWS


132 #i‚de‡
OPENSSL_OPT_WINDLL


133 #i‡
deföed
(
_WINDLL
)

135 
	#OPENSSL_OPT_WINDLL


	)

141 #i‡
deföed
(
__VMS
Ë|| deföed(
VMS
Ë|| deföed(
OPENSSL_SYSNAME_VMS
)

142 #unde‡
OPENSSL_SYS_UNIX


143 
	#OPENSSL_SYS_VMS


	)

144 #i‡
deföed
(
__DECC
)

145 
	#OPENSSL_SYS_VMS_DECC


	)

146 #ñi‡
deföed
(
__DECCXX
)

147 
	#OPENSSL_SYS_VMS_DECC


	)

148 
	#OPENSSL_SYS_VMS_DECCXX


	)

150 
	#OPENSSL_SYS_VMS_NODECC


	)

155 #i‡
deföed
(
__EMX__
Ë|| deföed(
__OS2__
)

156 #unde‡
OPENSSL_SYS_UNIX


157 
	#OPENSSL_SYS_OS2


	)

161 #ifde‡
OPENSSL_SYS_UNIX


162 #i‡
deföed
(
löux
Ë|| deföed(
__löux__
Ë|| deföed(
OPENSSL_SYSNAME_LINUX
)

163 
	#OPENSSL_SYS_LINUX


	)

165 #ifde‡
OPENSSL_SYSNAME_MPE


166 
	#OPENSSL_SYS_MPE


	)

168 #ifde‡
OPENSSL_SYSNAME_SNI


169 
	#OPENSSL_SYS_SNI


	)

171 #ifde‡
OPENSSL_SYSNAME_ULTRASPARC


172 
	#OPENSSL_SYS_ULTRASPARC


	)

174 #ifde‡
OPENSSL_SYSNAME_NEWS4


175 
	#OPENSSL_SYS_NEWS4


	)

177 #ifde‡
OPENSSL_SYSNAME_MACOSX


178 
	#OPENSSL_SYS_MACOSX


	)

180 #ifde‡
OPENSSL_SYSNAME_MACOSX_RHAPSODY


181 
	#OPENSSL_SYS_MACOSX_RHAPSODY


	)

182 
	#OPENSSL_SYS_MACOSX


	)

184 #ifde‡
OPENSSL_SYSNAME_SUNOS


185 
	#OPENSSL_SYS_SUNOS


	)

187 #i‡
deföed
(
_CRAY
Ë|| deföed(
OPENSSL_SYSNAME_CRAY
)

188 
	#OPENSSL_SYS_CRAY


	)

190 #i‡
deföed
(
_AIX
Ë|| deföed(
OPENSSL_SYSNAME_AIX
)

191 
	#OPENSSL_SYS_AIX


	)

196 #i‡
deföed
(
__VOS__
Ë|| deföed(
OPENSSL_SYSNAME_VOS
)

197 
	#OPENSSL_SYS_VOS


	)

198 #ifde‡
__HPPA__


199 
	#OPENSSL_SYS_VOS_HPPA


	)

201 #ifde‡
__IA32__


202 
	#OPENSSL_SYS_VOS_IA32


	)

207 #ifde‡
OPENSSL_SYSNAME_VXWORKS


208 
	#OPENSSL_SYS_VXWORKS


	)

212 #i‡
deföed
(
__BEOS__
)

213 
	#OPENSSL_SYS_BEOS


	)

214 
	~<sys/sockë.h
>

215 #i‡
deföed
(
BONE_VERSION
)

216 
	#OPENSSL_SYS_BEOS_BONE


	)

218 
	#OPENSSL_SYS_BEOS_R5


	)

228 #ifde‡
OPENSSL_SYS_MSDOS


229 
	#OPENSSL_UNISTD_IO
 <
io
.
h
>

	)

230 
	#OPENSSL_DECLARE_EXIT
 
	`exô
();

	)

232 
	#OPENSSL_UNISTD_IO
 
OPENSSL_UNISTD


	)

233 
	#OPENSSL_DECLARE_EXIT


	)

255 #i‡
deföed
(
OPENSSL_SYS_VMS_NODECC
)

256 
	#OPENSSL_EXPORT
 
globÆªf


	)

257 
	#OPENSSL_IMPORT
 
globÆªf


	)

258 
	#OPENSSL_GLOBAL
 
globÆdef


	)

259 #ñi‡
deföed
(
OPENSSL_SYS_WINDOWS
Ë&& deföed(
OPENSSL_OPT_WINDLL
)

260 
	#OPENSSL_EXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

261 
	#OPENSSL_IMPORT
 
	`__de˛•ec
(
dŒimp‹t
)

	)

262 
	#OPENSSL_GLOBAL


	)

264 
	#OPENSSL_EXPORT
 

	)

265 
	#OPENSSL_IMPORT
 

	)

266 
	#OPENSSL_GLOBAL


	)

268 
	#OPENSSL_EXTERN
 
OPENSSL_IMPORT


	)

280 #ifde‡
OPENSSL_EXPORT_VAR_AS_FUNCTION


281 
	#OPENSSL_IMPLEMENT_GLOBAL
(
ty≥
,
«me
,
vÆue
) \

282 
ty≥
 *
_shadow_
##
	`«me
() \

283 { 
ty≥
 
_hide_
##
«me
=
vÆue
;  &_hide_##«me; }

	)

284 
	#OPENSSL_DECLARE_GLOBAL
(
ty≥
,
«me
Ëty≥ *
_shadow_
##
	`«me
()

	)

285 
	#OPENSSL_GLOBAL_REF
(
«me
Ë(*(
_shadow_
##
	`«me
()))

	)

287 
	#OPENSSL_IMPLEMENT_GLOBAL
(
ty≥
,
«me
,
vÆue
Ë
OPENSSL_GLOBAL
Åy≥ 
_shadow_
##«me=vÆue;

	)

288 
	#OPENSSL_DECLARE_GLOBAL
(
ty≥
,
«me
Ë
OPENSSL_EXPORT
Åy≥ 
_shadow_
##
	)
name

289 
	#OPENSSL_GLOBAL_REF
(
«me
Ë
_shadow_
##
	)
name

292 #i‡
deföed
(
OPENSSL_SYS_MACINTOSH_CLASSIC
Ë&& 
macötosh
==1 && !deföed(
MAC_OS_GUSI_SOURCE
)

293 
	#os¶_ssize_t
 

	)

296 #ifde‡
OPENSSL_SYS_MSDOS


297 
	#os¶_ssize_t
 

	)

300 #i‡
deföed
(
NeXT
Ë|| deföed(
OPENSSL_SYS_NEWS4
Ë|| deföed(
OPENSSL_SYS_SUNOS
)

301 
	#ssize_t
 

	)

304 #i‡
deföed
(
__u…rix
Ë&& !deföed(
ssize_t
)

305 
	#os¶_ssize_t
 

	)

308 #i‚de‡
os¶_ssize_t


309 
	#os¶_ssize_t
 
ssize_t


	)

312 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ebcdic.h

3 #i‚de‡
HEADER_EBCDIC_H


4 
	#HEADER_EBCDIC_H


	)

6 
	~<sys/ty≥s.h
>

8 #ifde‡ 
__˝lu•lus


13 
	#os_tﬂscii
 
_›ís¶_os_tﬂscii


	)

14 
	#os_t€bcdic
 
_›ís¶_os_t€bcdic


	)

15 
	#ebcdic2ascii
 
_›ís¶_ebcdic2ascii


	)

16 
	#ascii2ebcdic
 
_›ís¶_ascii2ebcdic


	)

18 c⁄° 
os_tﬂscii
[256];

19 c⁄° 
os_t€bcdic
[256];

20 *
ebcdic2ascii
(*
de°
, c⁄° *
§˚
, 
size_t
 
cou¡
);

21 *
ascii2ebcdic
(*
de°
, c⁄° *
§˚
, 
size_t
 
cou¡
);

23 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/hmac.h

58 #i‚de‡
HEADER_HMAC_H


59 
	#HEADER_HMAC_H


	)

61 
	~<›ís¶/›ís¶c⁄f.h
>

63 #ifde‡
OPENSSL_NO_HMAC


64 #îr‹ 
HMAC
 
is
 
dißbÀd
.

67 
	~<›ís¶/evp.h
>

69 
	#HMAC_MAX_MD_CBLOCK
 128

	)

71 #ifde‡ 
__˝lu•lus


75 
	shmac_˘x_°


77 c⁄° 
EVP_MD
 *
md
;

78 
EVP_MD_CTX
 
md_˘x
;

79 
EVP_MD_CTX
 
i_˘x
;

80 
EVP_MD_CTX
 
o_˘x
;

81 
key_Àngth
;

82 
key
[
HMAC_MAX_MD_CBLOCK
];

83 } 
	tHMAC_CTX
;

85 
	#HMAC_size
(
e
Ë(
	`EVP_MD_size
(”)->
md
))

	)

88 
HMAC_CTX_öô
(
HMAC_CTX
 *
˘x
);

89 
HMAC_CTX_˛ónup
(
HMAC_CTX
 *
˘x
);

91 
	#HMAC_˛ónup
(
˘x
Ë
	`HMAC_CTX_˛ónup
(˘xË

	)

93 
HMAC_Inô
(
HMAC_CTX
 *
˘x
, c⁄° *
key
, 
Àn
,

94 c⁄° 
EVP_MD
 *
md
);

95 
HMAC_Inô_ex
(
HMAC_CTX
 *
˘x
, c⁄° *
key
, 
Àn
,

96 c⁄° 
EVP_MD
 *
md
, 
ENGINE
 *
im∂
);

97 
HMAC_Upd©e
(
HMAC_CTX
 *
˘x
, c⁄° *
d©a
, 
size_t
 
Àn
);

98 
HMAC_FöÆ
(
HMAC_CTX
 *
˘x
, *
md
, *
Àn
);

99 *
HMAC
(c⁄° 
EVP_MD
 *
evp_md
, c⁄° *
key
, 
key_Àn
,

100 c⁄° *
d
, 
size_t
 
n
, *
md
,

101 *
md_Àn
);

102 
HMAC_CTX_c›y
(
HMAC_CTX
 *
d˘x
, HMAC_CTX *
s˘x
);

104 
HMAC_CTX_£t_Êags
(
HMAC_CTX
 *
˘x
, 
Êags
);

106 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/kssl.h

63 #i‚def 
KSSL_H


64 
	#KSSL_H


	)

66 
	~<›ís¶/›ís¶c⁄f.h
>

68 #i‚de‡
OPENSSL_NO_KRB5


70 
	~<°dio.h
>

71 
	~<˘y≥.h
>

72 
	~<krb5.h
>

73 #ifde‡
OPENSSL_SYS_WIN32


77 #unde‡
X509_NAME


78 #unde‡
X509_EXTENSIONS


79 #unde‡
OCSP_REQUEST


80 #unde‡
OCSP_RESPONSE


83 #ifde‡ 
__˝lu•lus


91 #ifde‡
KRB5_HEIMDAL


92 
	tkrb5_o˘ë
;

93 
	#FAR


	)

96 #i‚de‡
FAR


97 
	#FAR


	)

108 #i‚def 
KRB5SVC


109 
	#KRB5SVC
 "ho°"

	)

112 #i‚def 
KRB5KEYTAB


113 
	#KRB5KEYTAB
 "/ëc/krb5.keyèb"

	)

116 #i‚de‡
KRB5SENDAUTH


117 
	#KRB5SENDAUTH
 1

	)

120 #i‚de‡
KRB5CHECKAUTH


121 
	#KRB5CHECKAUTH
 1

	)

124 #i‚de‡
KSSL_CLOCKSKEW


125 
	#KSSL_CLOCKSKEW
 300;

	)

128 
	#KSSL_ERR_MAX
 255

	)

129 
	sks¶_îr_°
 {

130 
	gªas⁄
;

131 
	gãxt
[
KSSL_ERR_MAX
+1];

132 } 
	tKSSL_ERR
;

139 
	sks¶_˘x_°


142 *
	g£rvi˚_«me
;

143 *
	g£rvi˚_ho°
;

144 *
	g˛õ¡_¥öc
;

145 *
	gkeyèb_fûe
;

146 *
	g¸ed_ˇche
;

147 
krb5_í˘y≥
 
	gí˘y≥
;

148 
	gÀngth
;

149 
krb5_o˘ë
 
FAR
 *
	gkey
;

150 } 
	tKSSL_CTX
;

152 
	#KSSL_CLIENT
 1

	)

153 
	#KSSL_SERVER
 2

	)

154 
	#KSSL_SERVICE
 3

	)

155 
	#KSSL_KEYTAB
 4

	)

157 
	#KSSL_CTX_OK
 0

	)

158 
	#KSSL_CTX_ERR
 1

	)

159 
	#KSSL_NOMEM
 2

	)

162 
krb5_îr‹_code
 
ks¶_˘x_£t°rög
(
KSSL_CTX
 *
ks¶_˘x
, 
which
, *
ãxt
);

163 
KSSL_CTX
 *
ks¶_˘x_√w
();

164 
KSSL_CTX
 *
ks¶_˘x_‰ì
(KSSL_CTX *
ks¶_˘x
);

165 
ks¶_˘x_show
(
KSSL_CTX
 *
ks¶_˘x
);

166 
krb5_îr‹_code
 
ks¶_˘x_£çröc
(
KSSL_CTX
 *
ks¶_˘x
, 
which
,

167 
krb5_d©a
 *
ªÆm
, krb5_d©®*
ítôy
, 
√¡ôõs
);

168 
krb5_îr‹_code
 
ks¶_cgë_tkt
(
KSSL_CTX
 *
ks¶_˘x
, 
krb5_d©a
 **
íc_tkç
,

169 
krb5_d©a
 *
authíp
, 
KSSL_ERR
 *
ks¶_îr
);

170 
krb5_îr‹_code
 
ks¶_sgë_tkt
(
KSSL_CTX
 *
ks¶_˘x
, 
krb5_d©a
 *
öd©a
,

171 
krb5_tickë_times
 *
âimes
, 
KSSL_ERR
 *
ks¶_îr
);

172 
krb5_îr‹_code
 
ks¶_˘x_£tkey
(
KSSL_CTX
 *
ks¶_˘x
, 
krb5_keyblock
 *
£ssi⁄
);

173 
ks¶_îr_£t
(
KSSL_ERR
 *
ks¶_îr
, 
ªas⁄
, *
ãxt
);

174 
ks¶_krb5_‰ì_d©a_c⁄ã¡s
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_d©a
 *
d©a
);

175 
krb5_îr‹_code
 
ks¶_buûd_¥öcùÆ_2
(
krb5_c⁄ãxt
 
c⁄ãxt
,

176 
krb5_¥öcùÆ
 *
¥öc
, 
æí
, c⁄° *
ªÆm
,

177 
¶í
, c⁄° *
svc
, 
hÀn
, c⁄° *
ho°
);

178 
krb5_îr‹_code
 
ks¶_vÆid©e_times
(
krb5_time°amp
 
©ime
,

179 
krb5_tickë_times
 *
âimes
);

180 
krb5_îr‹_code
 
ks¶_check_authít
(
KSSL_CTX
 *
ks¶_˘x
, 
krb5_d©a
 *
authíç
,

181 
krb5_time°amp
 *
©imï
, 
KSSL_ERR
 *
ks¶_îr
);

182 *
ks¶_skù_c⁄found
(
krb5_í˘y≥
 
í˘y≥
, *
authn
);

184 
SSL_£t0_ks¶_˘x
(
SSL
 *
s
, 
KSSL_CTX
 *
k˘x
);

185 
KSSL_CTX
 * 
SSL_gë0_ks¶_˘x
(
SSL
 *
s
);

186 *
ks¶_˘x_gë0_˛õ¡_¥öc
(
KSSL_CTX
 *
k˘x
);

188 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/lhash.h

63 #i‚de‡
HEADER_LHASH_H


64 
	#HEADER_LHASH_H


	)

66 
	~<›ís¶/e_os2.h
>

67 #i‚de‡
OPENSSL_NO_FP_API


68 
	~<°dio.h
>

71 #i‚de‡
OPENSSL_NO_BIO


72 
	~<›ís¶/bio.h
>

75 #ifde‡ 
__˝lu•lus


79 
	slhash_node_°


81 *
d©a
;

82 
lhash_node_°
 *
√xt
;

83 #i‚de‡
OPENSSL_NO_HASH_COMP


84 
hash
;

86 } 
	tLHASH_NODE
;

88 (*
LHASH_COMP_FN_TYPE
)(const *, const *);

89 (*
	tLHASH_HASH_FN_TYPE
)(const *);

90 (*
LHASH_DOALL_FN_TYPE
)(*);

91 (*
LHASH_DOALL_ARG_FN_TYPE
)(*, *);

101 
	#DECLARE_LHASH_HASH_FN
(
«me
, 
o_ty≥
) \

102 
«me
##
	`_LHASH_HASH
(c⁄° *);

	)

103 
	#IMPLEMENT_LHASH_HASH_FN
(
«me
, 
o_ty≥
) \

104 
«me
##
	`_LHASH_HASH
(c⁄° *
¨g
) { \

105 c⁄° 
o_ty≥
 *
a
 = 
¨g
; \

106  
«me
##
	`_hash
(
a
); }

	)

107 
	#LHASH_HASH_FN
(
«me
Ë«me##
_LHASH_HASH


	)

110 
	#DECLARE_LHASH_COMP_FN
(
«me
, 
o_ty≥
) \

111 
«me
##
	`_LHASH_COMP
(c⁄° *, c⁄° *);

	)

112 
	#IMPLEMENT_LHASH_COMP_FN
(
«me
, 
o_ty≥
) \

113 
«me
##
	`_LHASH_COMP
(c⁄° *
¨g1
, c⁄° *
¨g2
) { \

114 c⁄° 
o_ty≥
 *
a
 = 
¨g1
; \

115 c⁄° 
o_ty≥
 *
b
 = 
¨g2
; \

116  
«me
##
	`_cmp
(
a
,
b
); }

	)

117 
	#LHASH_COMP_FN
(
«me
Ë«me##
_LHASH_COMP


	)

120 
	#DECLARE_LHASH_DOALL_FN
(
«me
, 
o_ty≥
) \

121 
«me
##
	`_LHASH_DOALL
(*);

	)

122 
	#IMPLEMENT_LHASH_DOALL_FN
(
«me
, 
o_ty≥
) \

123 
«me
##
	`_LHASH_DOALL
(*
¨g
) { \

124 
o_ty≥
 *
a
 = 
¨g
; \

125 
«me
##
	`_dﬂŒ
(
a
); }

	)

126 
	#LHASH_DOALL_FN
(
«me
Ë«me##
_LHASH_DOALL


	)

129 
	#DECLARE_LHASH_DOALL_ARG_FN
(
«me
, 
o_ty≥
, 
a_ty≥
) \

130 
«me
##
	`_LHASH_DOALL_ARG
(*, *);

	)

131 
	#IMPLEMENT_LHASH_DOALL_ARG_FN
(
«me
, 
o_ty≥
, 
a_ty≥
) \

132 
«me
##
	`_LHASH_DOALL_ARG
(*
¨g1
, *
¨g2
) { \

133 
o_ty≥
 *
a
 = 
¨g1
; \

134 
a_ty≥
 *
b
 = 
¨g2
; \

135 
«me
##
	`_dﬂŒ_¨g
(
a
, 
b
); }

	)

136 
	#LHASH_DOALL_ARG_FN
(
«me
Ë«me##
_LHASH_DOALL_ARG


	)

138 
	slhash_°


140 
LHASH_NODE
 **
b
;

141 
LHASH_COMP_FN_TYPE
 
comp
;

142 
LHASH_HASH_FN_TYPE
 
hash
;

143 
num_nodes
;

144 
num_Æloc_nodes
;

145 
p
;

146 
pmax
;

147 
up_lﬂd
;

148 
down_lﬂd
;

149 
num_ôems
;

151 
num_ex∑nds
;

152 
num_ex∑nd_ªÆlocs
;

153 
num_c⁄åa˘s
;

154 
num_c⁄åa˘_ªÆlocs
;

155 
num_hash_ˇŒs
;

156 
num_comp_ˇŒs
;

157 
num_ö£π
;

158 
num_ª∂a˚
;

159 
num_dñëe
;

160 
num_no_dñëe
;

161 
num_ªåõve
;

162 
num_ªåõve_miss
;

163 
num_hash_comps
;

165 
îr‹
;

166 } 
	t_LHASH
;

169 
	#LH_LOAD_MULT
 256

	)

173 
	#lh_îr‹
(
lh
Ë(÷h)->
îr‹
)

	)

175 
_LHASH
 *
lh_√w
(
LHASH_HASH_FN_TYPE
 
h
, 
LHASH_COMP_FN_TYPE
 
c
);

176 
lh_‰ì
(
_LHASH
 *
lh
);

177 *
lh_ö£π
(
_LHASH
 *
lh
, *
d©a
);

178 *
lh_dñëe
(
_LHASH
 *
lh
, c⁄° *
d©a
);

179 *
lh_ªåõve
(
_LHASH
 *
lh
, c⁄° *
d©a
);

180 
lh_dﬂŒ
(
_LHASH
 *
lh
, 
LHASH_DOALL_FN_TYPE
 
func
);

181 
lh_dﬂŒ_¨g
(
_LHASH
 *
lh
, 
LHASH_DOALL_ARG_FN_TYPE
 
func
, *
¨g
);

182 
lh_°rhash
(c⁄° *
c
);

183 
lh_num_ôems
(c⁄° 
_LHASH
 *
lh
);

185 #i‚de‡
OPENSSL_NO_FP_API


186 
lh_°©s
(c⁄° 
_LHASH
 *
lh
, 
FILE
 *
out
);

187 
lh_node_°©s
(c⁄° 
_LHASH
 *
lh
, 
FILE
 *
out
);

188 
lh_node_ußge_°©s
(c⁄° 
_LHASH
 *
lh
, 
FILE
 *
out
);

191 #i‚de‡
OPENSSL_NO_BIO


192 
lh_°©s_bio
(c⁄° 
_LHASH
 *
lh
, 
BIO
 *
out
);

193 
lh_node_°©s_bio
(c⁄° 
_LHASH
 *
lh
, 
BIO
 *
out
);

194 
lh_node_ußge_°©s_bio
(c⁄° 
_LHASH
 *
lh
, 
BIO
 *
out
);

199 
	#LHASH_OF
(
ty≥
Ë
lhash_°_
##
	)
type

201 
	#DECLARE_LHASH_OF
(
ty≥
Ë
	`LHASH_OF
—y≥Ë{ 
dummy
; }

	)

203 
	#CHECKED_LHASH_OF
(
ty≥
,
lh
) \

204 ((
_LHASH
 *)
	`CHECKED_PTR_OF
(
	`LHASH_OF
(
ty≥
),
lh
))

	)

207 
	#LHM_lh_√w
(
ty≥
, 
«me
) \

208 ((
	`LHASH_OF
(
ty≥
Ë*)
	`lh_√w
(
	`LHASH_HASH_FN
(
«me
), 
	`LHASH_COMP_FN
“ame)))

	)

209 
	#LHM_lh_îr‹
(
ty≥
, 
lh
) \

210 
	`lh_îr‹
(
	`CHECKED_LHASH_OF
(
ty≥
,
lh
))

	)

211 
	#LHM_lh_ö£π
(
ty≥
, 
lh
, 
ö°
) \

212 ((
ty≥
 *)
	`lh_ö£π
(
	`CHECKED_LHASH_OF
—y≥, 
lh
), \

213 
	`CHECKED_PTR_OF
(
ty≥
, 
ö°
)))

	)

214 
	#LHM_lh_ªåõve
(
ty≥
, 
lh
, 
ö°
) \

215 ((
ty≥
 *)
	`lh_ªåõve
(
	`CHECKED_LHASH_OF
—y≥, 
lh
), \

216 
	`CHECKED_PTR_OF
(
ty≥
, 
ö°
)))

	)

217 
	#LHM_lh_dñëe
(
ty≥
, 
lh
, 
ö°
) \

218 ((
ty≥
 *)
	`lh_dñëe
(
	`CHECKED_LHASH_OF
—y≥, 
lh
), \

219 
	`CHECKED_PTR_OF
(
ty≥
, 
ö°
)))

	)

220 
	#LHM_lh_dﬂŒ
(
ty≥
, 
lh
,
‚
Ë
	`lh_dﬂŒ
(
	`CHECKED_LHASH_OF
—y≥,Üh), fn)

	)

221 
	#LHM_lh_dﬂŒ_¨g
(
ty≥
, 
lh
, 
‚
, 
¨g_ty≥
, 
¨g
) \

222 
	`lh_dﬂŒ_¨g
(
	`CHECKED_LHASH_OF
(
ty≥
, 
lh
), 
‚
, 
	`CHECKED_PTR_OF
(
¨g_ty≥
, 
¨g
))

	)

223 
	#LHM_lh_num_ôems
(
ty≥
, 
lh
Ë
	`lh_num_ôems
(
	`CHECKED_LHASH_OF
—y≥,Üh))

	)

224 
	#LHM_lh_down_lﬂd
(
ty≥
, 
lh
Ë(
	`CHECKED_LHASH_OF
—y≥,Üh)->
down_lﬂd
)

	)

225 
	#LHM_lh_node_°©s_bio
(
ty≥
, 
lh
, 
out
) \

226 
	`lh_node_°©s_bio
(
	`CHECKED_LHASH_OF
(
ty≥
, 
lh
), 
out
)

	)

227 
	#LHM_lh_node_ußge_°©s_bio
(
ty≥
, 
lh
, 
out
) \

228 
	`lh_node_ußge_°©s_bio
(
	`CHECKED_LHASH_OF
(
ty≥
, 
lh
), 
out
)

	)

229 
	#LHM_lh_°©s_bio
(
ty≥
, 
lh
, 
out
) \

230 
	`lh_°©s_bio
(
	`CHECKED_LHASH_OF
(
ty≥
, 
lh
), 
out
)

	)

231 
	#LHM_lh_‰ì
(
ty≥
, 
lh
Ë
	`lh_‰ì
(
	`CHECKED_LHASH_OF
—y≥,Üh))

	)

233 
DECLARE_LHASH_OF
(
OPENSSL_STRING
);

234 
DECLARE_LHASH_OF
(
OPENSSL_CSTRING
);

236 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/opensslv.h

1 #i‚de‡
HEADER_OPENSSLV_H


2 
	#HEADER_OPENSSLV_H


	)

4 #ifde‡ 
__˝lu•lus


32 
	#OPENSSL_VERSION_NUMBER
 0x100010bfL

	)

33 #ifde‡
OPENSSL_FIPS


34 
	#OPENSSL_VERSION_TEXT
 "O≥nSSL 1.0.1k-fù†8 J™ 2015"

	)

36 
	#OPENSSL_VERSION_TEXT
 "O≥nSSL 1.0.1k 8 J™ 2015"

	)

38 
	#OPENSSL_VERSION_PTEXT
 "Ö¨ào‡" 
OPENSSL_VERSION_TEXT


	)

89 
	#SHLIB_VERSION_HISTORY
 ""

	)

90 
	#SHLIB_VERSION_NUMBER
 "1.0.0"

	)

93 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ossl_typ.h

55 #i‚de‡
HEADER_OPENSSL_TYPES_H


56 
	#HEADER_OPENSSL_TYPES_H


	)

58 #ifde‡ 
__˝lu•lus


62 
	~<›ís¶/e_os2.h
>

64 #ifde‡
NO_ASN1_TYPEDEFS


65 
	#ASN1_INTEGER
 
ASN1_STRING


	)

66 
	#ASN1_ENUMERATED
 
ASN1_STRING


	)

67 
	#ASN1_BIT_STRING
 
ASN1_STRING


	)

68 
	#ASN1_OCTET_STRING
 
ASN1_STRING


	)

69 
	#ASN1_PRINTABLESTRING
 
ASN1_STRING


	)

70 
	#ASN1_T61STRING
 
ASN1_STRING


	)

71 
	#ASN1_IA5STRING
 
ASN1_STRING


	)

72 
	#ASN1_UTCTIME
 
ASN1_STRING


	)

73 
	#ASN1_GENERALIZEDTIME
 
ASN1_STRING


	)

74 
	#ASN1_TIME
 
ASN1_STRING


	)

75 
	#ASN1_GENERALSTRING
 
ASN1_STRING


	)

76 
	#ASN1_UNIVERSALSTRING
 
ASN1_STRING


	)

77 
	#ASN1_BMPSTRING
 
ASN1_STRING


	)

78 
	#ASN1_VISIBLESTRING
 
ASN1_STRING


	)

79 
	#ASN1_UTF8STRING
 
ASN1_STRING


	)

80 
	#ASN1_BOOLEAN
 

	)

81 
	#ASN1_NULL
 

	)

83 
a¢1_°rög_°
 
	tASN1_INTEGER
;

84 
a¢1_°rög_°
 
	tASN1_ENUMERATED
;

85 
a¢1_°rög_°
 
	tASN1_BIT_STRING
;

86 
a¢1_°rög_°
 
	tASN1_OCTET_STRING
;

87 
a¢1_°rög_°
 
	tASN1_PRINTABLESTRING
;

88 
a¢1_°rög_°
 
	tASN1_T61STRING
;

89 
a¢1_°rög_°
 
	tASN1_IA5STRING
;

90 
a¢1_°rög_°
 
	tASN1_GENERALSTRING
;

91 
a¢1_°rög_°
 
	tASN1_UNIVERSALSTRING
;

92 
a¢1_°rög_°
 
	tASN1_BMPSTRING
;

93 
a¢1_°rög_°
 
	tASN1_UTCTIME
;

94 
a¢1_°rög_°
 
	tASN1_TIME
;

95 
a¢1_°rög_°
 
	tASN1_GENERALIZEDTIME
;

96 
a¢1_°rög_°
 
	tASN1_VISIBLESTRING
;

97 
a¢1_°rög_°
 
	tASN1_UTF8STRING
;

98 
a¢1_°rög_°
 
	tASN1_STRING
;

99 
	tASN1_BOOLEAN
;

100 
	tASN1_NULL
;

103 
ASN1_ITEM_°
 
	tASN1_ITEM
;

104 
a¢1_p˘x_°
 
	tASN1_PCTX
;

106 #ifde‡
OPENSSL_SYS_WIN32


107 #unde‡
X509_NAME


108 #unde‡
X509_EXTENSIONS


109 #unde‡
X509_CERT_PAIR


110 #unde‡
PKCS7_ISSUER_AND_SERIAL


111 #unde‡
OCSP_REQUEST


112 #unde‡
OCSP_RESPONSE


115 #ifde‡
BIGNUM


116 #unde‡
BIGNUM


118 
bignum_°
 
	tBIGNUM
;

119 
bignum_˘x
 
	tBN_CTX
;

120 
bn_blödög_°
 
	tBN_BLINDING
;

121 
bn_m⁄t_˘x_°
 
	tBN_MONT_CTX
;

122 
bn_ª˝_˘x_°
 
	tBN_RECP_CTX
;

123 
bn_gícb_°
 
	tBN_GENCB
;

125 
buf_mem_°
 
	tBUF_MEM
;

127 
evp_cùhî_°
 
	tEVP_CIPHER
;

128 
evp_cùhî_˘x_°
 
	tEVP_CIPHER_CTX
;

129 
ív_md_°
 
	tEVP_MD
;

130 
ív_md_˘x_°
 
	tEVP_MD_CTX
;

131 
evp_pkey_°
 
	tEVP_PKEY
;

133 
evp_pkey_a¢1_mëhod_°
 
	tEVP_PKEY_ASN1_METHOD
;

135 
evp_pkey_mëhod_°
 
	tEVP_PKEY_METHOD
;

136 
evp_pkey_˘x_°
 
	tEVP_PKEY_CTX
;

138 
dh_°
 
	tDH
;

139 
dh_mëhod
 
	tDH_METHOD
;

141 
dß_°
 
	tDSA
;

142 
dß_mëhod
 
	tDSA_METHOD
;

144 
rß_°
 
	tRSA
;

145 
rß_mëh_°
 
	tRSA_METHOD
;

147 
ønd_mëh_°
 
	tRAND_METHOD
;

149 
ecdh_mëhod
 
	tECDH_METHOD
;

150 
ecdß_mëhod
 
	tECDSA_METHOD
;

152 
x509_°
 
	tX509
;

153 
X509_Æg‹_°
 
	tX509_ALGOR
;

154 
X509_¸l_°
 
	tX509_CRL
;

155 
x509_¸l_mëhod_°
 
	tX509_CRL_METHOD
;

156 
x509_ªvoked_°
 
	tX509_REVOKED
;

157 
X509_«me_°
 
	tX509_NAME
;

158 
X509_pubkey_°
 
	tX509_PUBKEY
;

159 
x509_°‹e_°
 
	tX509_STORE
;

160 
x509_°‹e_˘x_°
 
	tX509_STORE_CTX
;

162 
pkcs8_¥iv_key_öfo_°
 
	tPKCS8_PRIV_KEY_INFO
;

164 
v3_ext_˘x
 
	tX509V3_CTX
;

165 
c⁄f_°
 
	tCONF
;

167 
°‹e_°
 
	tSTORE
;

168 
°‹e_mëhod_°
 
	tSTORE_METHOD
;

170 
ui_°
 
	tUI
;

171 
ui_mëhod_°
 
	tUI_METHOD
;

173 
°_ERR_FNS
 
	tERR_FNS
;

175 
ígöe_°
 
	tENGINE
;

176 
s¶_°
 
	tSSL
;

177 
s¶_˘x_°
 
	tSSL_CTX
;

179 
X509_POLICY_NODE_°
 
	tX509_POLICY_NODE
;

180 
X509_POLICY_LEVEL_°
 
	tX509_POLICY_LEVEL
;

181 
X509_POLICY_TREE_°
 
	tX509_POLICY_TREE
;

182 
X509_POLICY_CACHE_°
 
	tX509_POLICY_CACHE
;

184 
AUTHORITY_KEYID_°
 
	tAUTHORITY_KEYID
;

185 
DIST_POINT_°
 
	tDIST_POINT
;

186 
ISSUING_DIST_POINT_°
 
	tISSUING_DIST_POINT
;

187 
NAME_CONSTRAINTS_°
 
	tNAME_CONSTRAINTS
;

190 
	#DECLARE_PKCS12_STACK_OF
(
ty≥
Ë

	)

191 
	#IMPLEMENT_PKCS12_STACK_OF
(
ty≥
Ë

	)

193 
¸y±o_ex_d©a_°
 
	tCRYPTO_EX_DATA
;

195 
	tCRYPTO_EX_√w
(*
	t∑ª¡
, *
	t±r
, 
	tCRYPTO_EX_DATA
 *
	tad
,

196 
	tidx
, 
	t¨gl
, *
	t¨gp
);

197 
	tCRYPTO_EX_‰ì
(*
	t∑ª¡
, *
	t±r
, 
	tCRYPTO_EX_DATA
 *
	tad
,

198 
	tidx
, 
	t¨gl
, *
	t¨gp
);

199 
	tCRYPTO_EX_dup
(
	tCRYPTO_EX_DATA
 *
	tto
, CRYPTO_EX_DATA *
	t‰om
, *
	t‰om_d
,

200 
	tidx
, 
	t¨gl
, *
	t¨gp
);

202 
oc•_ªq_˘x_°
 
	tOCSP_REQ_CTX
;

203 
oc•_ª•⁄£_°
 
	tOCSP_RESPONSE
;

204 
oc•_ª•⁄dî_id_°
 
	tOCSP_RESPID
;

206 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/pem.h

59 #i‚de‡
HEADER_PEM_H


60 
	#HEADER_PEM_H


	)

62 
	~<›ís¶/e_os2.h
>

63 #i‚de‡
OPENSSL_NO_BIO


64 
	~<›ís¶/bio.h
>

66 #i‚de‡
OPENSSL_NO_STACK


67 
	~<›ís¶/°ack.h
>

69 
	~<›ís¶/evp.h
>

70 
	~<›ís¶/x509.h
>

71 
	~<›ís¶/≥m2.h
>

73 #ifde‡ 
__˝lu•lus


77 
	#PEM_BUFSIZE
 1024

	)

79 
	#PEM_OBJ_UNDEF
 0

	)

80 
	#PEM_OBJ_X509
 1

	)

81 
	#PEM_OBJ_X509_REQ
 2

	)

82 
	#PEM_OBJ_CRL
 3

	)

83 
	#PEM_OBJ_SSL_SESSION
 4

	)

84 
	#PEM_OBJ_PRIV_KEY
 10

	)

85 
	#PEM_OBJ_PRIV_RSA
 11

	)

86 
	#PEM_OBJ_PRIV_DSA
 12

	)

87 
	#PEM_OBJ_PRIV_DH
 13

	)

88 
	#PEM_OBJ_PUB_RSA
 14

	)

89 
	#PEM_OBJ_PUB_DSA
 15

	)

90 
	#PEM_OBJ_PUB_DH
 16

	)

91 
	#PEM_OBJ_DHPARAMS
 17

	)

92 
	#PEM_OBJ_DSAPARAMS
 18

	)

93 
	#PEM_OBJ_PRIV_RSA_PUBLIC
 19

	)

94 
	#PEM_OBJ_PRIV_ECDSA
 20

	)

95 
	#PEM_OBJ_PUB_ECDSA
 21

	)

96 
	#PEM_OBJ_ECPARAMETERS
 22

	)

98 
	#PEM_ERROR
 30

	)

99 
	#PEM_DEK_DES_CBC
 40

	)

100 
	#PEM_DEK_IDEA_CBC
 45

	)

101 
	#PEM_DEK_DES_EDE
 50

	)

102 
	#PEM_DEK_DES_ECB
 60

	)

103 
	#PEM_DEK_RSA
 70

	)

104 
	#PEM_DEK_RSA_MD2
 80

	)

105 
	#PEM_DEK_RSA_MD5
 90

	)

107 
	#PEM_MD_MD2
 
NID_md2


	)

108 
	#PEM_MD_MD5
 
NID_md5


	)

109 
	#PEM_MD_SHA
 
NID_sha


	)

110 
	#PEM_MD_MD2_RSA
 
NID_md2WôhRSAEn¸y±i⁄


	)

111 
	#PEM_MD_MD5_RSA
 
NID_md5WôhRSAEn¸y±i⁄


	)

112 
	#PEM_MD_SHA_RSA
 
NID_sha1WôhRSAEn¸y±i⁄


	)

114 
	#PEM_STRING_X509_OLD
 "X509 CERTIFICATE"

	)

115 
	#PEM_STRING_X509
 "CERTIFICATE"

	)

116 
	#PEM_STRING_X509_PAIR
 "CERTIFICATE PAIR"

	)

117 
	#PEM_STRING_X509_TRUSTED
 "TRUSTED CERTIFICATE"

	)

118 
	#PEM_STRING_X509_REQ_OLD
 "NEW CERTIFICATE REQUEST"

	)

119 
	#PEM_STRING_X509_REQ
 "CERTIFICATE REQUEST"

	)

120 
	#PEM_STRING_X509_CRL
 "X509 CRL"

	)

121 
	#PEM_STRING_EVP_PKEY
 "ANY PRIVATE KEY"

	)

122 
	#PEM_STRING_PUBLIC
 "PUBLIC KEY"

	)

123 
	#PEM_STRING_RSA
 "RSA PRIVATE KEY"

	)

124 
	#PEM_STRING_RSA_PUBLIC
 "RSA PUBLIC KEY"

	)

125 
	#PEM_STRING_DSA
 "DSA PRIVATE KEY"

	)

126 
	#PEM_STRING_DSA_PUBLIC
 "DSA PUBLIC KEY"

	)

127 
	#PEM_STRING_PKCS7
 "PKCS7"

	)

128 
	#PEM_STRING_PKCS7_SIGNED
 "PKCS #7 SIGNED DATA"

	)

129 
	#PEM_STRING_PKCS8
 "ENCRYPTED PRIVATE KEY"

	)

130 
	#PEM_STRING_PKCS8INF
 "PRIVATE KEY"

	)

131 
	#PEM_STRING_DHPARAMS
 "DH PARAMETERS"

	)

132 
	#PEM_STRING_SSL_SESSION
 "SSL SESSION PARAMETERS"

	)

133 
	#PEM_STRING_DSAPARAMS
 "DSA PARAMETERS"

	)

134 
	#PEM_STRING_ECDSA_PUBLIC
 "ECDSA PUBLIC KEY"

	)

135 
	#PEM_STRING_ECPARAMETERS
 "EC PARAMETERS"

	)

136 
	#PEM_STRING_ECPRIVATEKEY
 "EC PRIVATE KEY"

	)

137 
	#PEM_STRING_PARAMETERS
 "PARAMETERS"

	)

138 
	#PEM_STRING_CMS
 "CMS"

	)

142 
	sPEM_Encode_Sól_°


144 
EVP_ENCODE_CTX
 
ícode
;

145 
EVP_MD_CTX
 
md
;

146 
EVP_CIPHER_CTX
 
cùhî
;

147 } 
	tPEM_ENCODE_SEAL_CTX
;

150 
	#PEM_TYPE_ENCRYPTED
 10

	)

151 
	#PEM_TYPE_MIC_ONLY
 20

	)

152 
	#PEM_TYPE_MIC_CLEAR
 30

	)

153 
	#PEM_TYPE_CLEAR
 40

	)

155 
	s≥m_ªcù_°


157 *
«me
;

158 
X509_NAME
 *
dn
;

160 
cùhî
;

161 
key_íc
;

163 } 
	tPEM_USER
;

165 
	s≥m_˘x_°


167 
ty≥
;

170 
vîsi⁄
;

171 
mode
;

172 } 
¥oc_ty≥
;

174 *
domaö
;

177 
cùhî
;

180 } 
DEK_öfo
;

182 
PEM_USER
 *
‹igö©‹
;

184 
num_ªcùõ¡
;

185 
PEM_USER
 **
ªcùõ¡
;

189 
EVP_MD
 *
md
;

191 
md_íc
;

192 
md_Àn
;

193 *
md_d©a
;

195 
EVP_CIPHER
 *
dec
;

196 
key_Àn
;

197 *
key
;

202 
d©a_íc
;

203 
d©a_Àn
;

204 *
d©a
;

205 } 
	tPEM_CTX
;

212 #ifde‡
OPENSSL_NO_FP_API


214 
	#IMPLEMENT_PEM_ªad_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

215 
	#IMPLEMENT_PEM_wrôe_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

216 
	#IMPLEMENT_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

217 
	#IMPLEMENT_PEM_wrôe_cb_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

218 
	#IMPLEMENT_PEM_wrôe_cb_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

222 
	#IMPLEMENT_PEM_ªad_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

223 
ty≥
 *
PEM_ªad_
##
	`«me
(
FILE
 *
Â
,Åy≥ **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
)\

225  
	`PEM_ASN1_ªad
((
d2i_of_void
 *)
d2i_
##
a¢1
, 
°r
,
Â
,(**)
x
,
cb
,
u
); \

226 }

	)

228 
	#IMPLEMENT_PEM_wrôe_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

229 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
) \

231  
	`PEM_ASN1_wrôe
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
Â
,
x
,
NULL
,NULL,0,NULL,NULL); \

232 }

	)

234 
	#IMPLEMENT_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

235 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, c⁄° 
ty≥
 *
x
) \

237  
	`PEM_ASN1_wrôe
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
Â
,(*)
x
,
NULL
,NULL,0,NULL,NULL); \

238 }

	)

240 
	#IMPLEMENT_PEM_wrôe_cb_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

241 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

242 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, \

243 *
u
) \

245  
	`PEM_ASN1_wrôe
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
Â
,
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
); \

246 }

	)

248 
	#IMPLEMENT_PEM_wrôe_cb_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

249 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

250 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, \

251 *
u
) \

253  
	`PEM_ASN1_wrôe
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
Â
,
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
); \

254 }

	)

258 
	#IMPLEMENT_PEM_ªad_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

259 
ty≥
 *
PEM_ªad_bio_
##
	`«me
(
BIO
 *
bp
,Åy≥ **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
)\

261  
	`PEM_ASN1_ªad_bio
((
d2i_of_void
 *)
d2i_
##
a¢1
, 
°r
,
bp
,(**)
x
,
cb
,
u
); \

262 }

	)

264 
	#IMPLEMENT_PEM_wrôe_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

265 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
) \

267  
	`PEM_ASN1_wrôe_bio
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
bp
,
x
,
NULL
,NULL,0,NULL,NULL); \

268 }

	)

270 
	#IMPLEMENT_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

271 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, c⁄° 
ty≥
 *
x
) \

273  
	`PEM_ASN1_wrôe_bio
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
bp
,(*)
x
,
NULL
,NULL,0,NULL,NULL); \

274 }

	)

276 
	#IMPLEMENT_PEM_wrôe_cb_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

277 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

278 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
) \

280  
	`PEM_ASN1_wrôe_bio
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
bp
,
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
); \

281 }

	)

283 
	#IMPLEMENT_PEM_wrôe_cb_bio_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

284 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

285 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
) \

287  
	`PEM_ASN1_wrôe_bio
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
bp
,(*)
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
); \

288 }

	)

290 
	#IMPLEMENT_PEM_wrôe
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

291 
	`IMPLEMENT_PEM_wrôe_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

292 
	`IMPLEMENT_PEM_wrôe_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

294 
	#IMPLEMENT_PEM_wrôe_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

295 
	`IMPLEMENT_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

296 
	`IMPLEMENT_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

298 
	#IMPLEMENT_PEM_wrôe_cb
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

299 
	`IMPLEMENT_PEM_wrôe_cb_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

300 
	`IMPLEMENT_PEM_wrôe_cb_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

302 
	#IMPLEMENT_PEM_wrôe_cb_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

303 
	`IMPLEMENT_PEM_wrôe_cb_bio_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

304 
	`IMPLEMENT_PEM_wrôe_cb_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

306 
	#IMPLEMENT_PEM_ªad
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

307 
	`IMPLEMENT_PEM_ªad_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

308 
	`IMPLEMENT_PEM_ªad_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

310 
	#IMPLEMENT_PEM_rw
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

311 
	`IMPLEMENT_PEM_ªad
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

312 
	`IMPLEMENT_PEM_wrôe
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

314 
	#IMPLEMENT_PEM_rw_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

315 
	`IMPLEMENT_PEM_ªad
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

316 
	`IMPLEMENT_PEM_wrôe_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

318 
	#IMPLEMENT_PEM_rw_cb
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

319 
	`IMPLEMENT_PEM_ªad
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

320 
	`IMPLEMENT_PEM_wrôe_cb
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

324 #i‡
deföed
(
OPENSSL_NO_FP_API
)

326 
	#DECLARE_PEM_ªad_Â
(
«me
, 
ty≥
Ë

	)

327 
	#DECLARE_PEM_wrôe_Â
(
«me
, 
ty≥
Ë

	)

328 
	#DECLARE_PEM_wrôe_cb_Â
(
«me
, 
ty≥
Ë

	)

332 
	#DECLARE_PEM_ªad_Â
(
«me
, 
ty≥
) \

333 
ty≥
 *
PEM_ªad_
##
	`«me
(
FILE
 *
Â
,Åy≥ **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

	)

335 
	#DECLARE_PEM_wrôe_Â
(
«me
, 
ty≥
) \

336 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
);

	)

338 
	#DECLARE_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
) \

339 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, c⁄° 
ty≥
 *
x
);

	)

341 
	#DECLARE_PEM_wrôe_cb_Â
(
«me
, 
ty≥
) \

342 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

343 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

	)

347 #i‚de‡
OPENSSL_NO_BIO


348 
	#DECLARE_PEM_ªad_bio
(
«me
, 
ty≥
) \

349 
ty≥
 *
PEM_ªad_bio_
##
	`«me
(
BIO
 *
bp
,Åy≥ **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

	)

351 
	#DECLARE_PEM_wrôe_bio
(
«me
, 
ty≥
) \

352 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
);

	)

354 
	#DECLARE_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
) \

355 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, c⁄° 
ty≥
 *
x
);

	)

357 
	#DECLARE_PEM_wrôe_cb_bio
(
«me
, 
ty≥
) \

358 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

359 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

	)

363 
	#DECLARE_PEM_ªad_bio
(
«me
, 
ty≥
Ë

	)

364 
	#DECLARE_PEM_wrôe_bio
(
«me
, 
ty≥
Ë

	)

365 
	#DECLARE_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
Ë

	)

366 
	#DECLARE_PEM_wrôe_cb_bio
(
«me
, 
ty≥
Ë

	)

370 
	#DECLARE_PEM_wrôe
(
«me
, 
ty≥
) \

371 
	`DECLARE_PEM_wrôe_bio
(
«me
, 
ty≥
) \

372 
	`DECLARE_PEM_wrôe_Â
(
«me
, 
ty≥
)

	)

374 
	#DECLARE_PEM_wrôe_c⁄°
(
«me
, 
ty≥
) \

375 
	`DECLARE_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
) \

376 
	`DECLARE_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
)

	)

378 
	#DECLARE_PEM_wrôe_cb
(
«me
, 
ty≥
) \

379 
	`DECLARE_PEM_wrôe_cb_bio
(
«me
, 
ty≥
) \

380 
	`DECLARE_PEM_wrôe_cb_Â
(
«me
, 
ty≥
)

	)

382 
	#DECLARE_PEM_ªad
(
«me
, 
ty≥
) \

383 
	`DECLARE_PEM_ªad_bio
(
«me
, 
ty≥
) \

384 
	`DECLARE_PEM_ªad_Â
(
«me
, 
ty≥
)

	)

386 
	#DECLARE_PEM_rw
(
«me
, 
ty≥
) \

387 
	`DECLARE_PEM_ªad
(
«me
, 
ty≥
) \

388 
	`DECLARE_PEM_wrôe
(
«me
, 
ty≥
)

	)

390 
	#DECLARE_PEM_rw_c⁄°
(
«me
, 
ty≥
) \

391 
	`DECLARE_PEM_ªad
(
«me
, 
ty≥
) \

392 
	`DECLARE_PEM_wrôe_c⁄°
(
«me
, 
ty≥
)

	)

394 
	#DECLARE_PEM_rw_cb
(
«me
, 
ty≥
) \

395 
	`DECLARE_PEM_ªad
(
«me
, 
ty≥
) \

396 
	`DECLARE_PEM_wrôe_cb
(
«me
, 
ty≥
)

	)

400 
	t≥m_∑ssw‹d_cb
(*
	tbuf
, 
	tsize
, 
	trwÊag
, *
	tu£rd©a
);

403 
	t≥m_∑ssw‹d_cb
(*
	tbuf
, 
	tsize
, 
	trwÊag
);

406 
PEM_gë_EVP_CIPHER_INFO
(*
hódî
, 
EVP_CIPHER_INFO
 *
cùhî
);

407 
PEM_do_hódî
 (
EVP_CIPHER_INFO
 *
cùhî
, *
d©a
,*
Àn
,

408 
≥m_∑ssw‹d_cb
 *
ˇŒback
,*
u
);

410 #i‚de‡
OPENSSL_NO_BIO


411 
PEM_ªad_bio
(
BIO
 *
bp
, **
«me
, **
hódî
,

412 **
d©a
,*
Àn
);

413 
PEM_wrôe_bio
(
BIO
 *
bp
,c⁄° *
«me
,*
hdr
,*
d©a
,

414 
Àn
);

415 
PEM_byãs_ªad_bio
(**
pd©a
, *
∂í
, **
≤m
, c⁄° *
«me
, 
BIO
 *
bp
,

416 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

417 * 
PEM_ASN1_ªad_bio
(
d2i_of_void
 *
d2i
, c⁄° *
«me
, 
BIO
 *
bp
,

418 **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

419 
PEM_ASN1_wrôe_bio
(
i2d_of_void
 *
i2d
,c⁄° *
«me
,
BIO
 *
bp
, *
x
,

420 c⁄° 
EVP_CIPHER
 *
íc
,*
k°r
,
kÀn
,

421 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

423 
STACK_OF
(
X509_INFO
Ë* 
PEM_X509_INFO_ªad_bio
(
BIO
 *
bp
, STACK_OF(X509_INFOË*
sk
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

424 
PEM_X509_INFO_wrôe_bio
(
BIO
 *
bp
,
X509_INFO
 *
xi
, 
EVP_CIPHER
 *
íc
,

425 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cd
, *
u
);

428 
PEM_ªad
(
FILE
 *
Â
, **
«me
, **
hódî
,

429 **
d©a
,*
Àn
);

430 
PEM_wrôe
(
FILE
 *
Â
,*
«me
,*
hdr
,*
d©a
,
Àn
);

431 * 
PEM_ASN1_ªad
(
d2i_of_void
 *
d2i
, c⁄° *
«me
, 
FILE
 *
Â
, **
x
,

432 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

433 
PEM_ASN1_wrôe
(
i2d_of_void
 *
i2d
,c⁄° *
«me
,
FILE
 *
Â
,

434 *
x
,c⁄° 
EVP_CIPHER
 *
íc
,*
k°r
,

435 
kÀn
,
≥m_∑ssw‹d_cb
 *
ˇŒback
, *
u
);

436 
STACK_OF
(
X509_INFO
Ë* 
PEM_X509_INFO_ªad
(
FILE
 *
Â
, STACK_OF(X509_INFOË*
sk
,

437 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

439 
PEM_SólInô
(
PEM_ENCODE_SEAL_CTX
 *
˘x
, 
EVP_CIPHER
 *
ty≥
,

440 
EVP_MD
 *
md_ty≥
, **
ek
, *
ekl
,

441 *
iv
, 
EVP_PKEY
 **
pubk
, 
≈ubk
);

442 
PEM_SólUpd©e
(
PEM_ENCODE_SEAL_CTX
 *
˘x
, *
out
, *
oué
,

443 *
ö
, 
öl
);

444 
PEM_SólFöÆ
(
PEM_ENCODE_SEAL_CTX
 *
˘x
, *
sig
,*
sigl
,

445 *
out
, *
oué
, 
EVP_PKEY
 *
¥iv
);

447 
PEM_SignInô
(
EVP_MD_CTX
 *
˘x
, 
EVP_MD
 *
ty≥
);

448 
PEM_SignUpd©e
(
EVP_MD_CTX
 *
˘x
,*
d
,
˙t
);

449 
PEM_SignFöÆ
(
EVP_MD_CTX
 *
˘x
, *
sigªt
,

450 *
sigÀn
, 
EVP_PKEY
 *
pkey
);

452 
PEM_def_ˇŒback
(*
buf
, 
num
, 
w
, *
key
);

453 
PEM_¥oc_ty≥
(*
buf
, 
ty≥
);

454 
PEM_dek_öfo
(*
buf
, c⁄° *
ty≥
, 
Àn
, *
°r
);

457 
	~<›ís¶/symhacks.h
>

459 
DECLARE_PEM_rw
(
X509
, X509)

461 
DECLARE_PEM_rw
(
X509_AUX
, 
X509
)

463 
DECLARE_PEM_rw
(
X509_CERT_PAIR
, X509_CERT_PAIR)

465 
DECLARE_PEM_rw
(
X509_REQ
, X509_REQ)

466 
DECLARE_PEM_wrôe
(
X509_REQ_NEW
, 
X509_REQ
)

468 
DECLARE_PEM_rw
(
X509_CRL
, X509_CRL)

470 
DECLARE_PEM_rw
(
PKCS7
, PKCS7)

472 
DECLARE_PEM_rw
(
NETSCAPE_CERT_SEQUENCE
, NETSCAPE_CERT_SEQUENCE)

474 
DECLARE_PEM_rw
(
PKCS8
, 
X509_SIG
)

476 
DECLARE_PEM_rw
(
PKCS8_PRIV_KEY_INFO
, PKCS8_PRIV_KEY_INFO)

478 #i‚de‡
OPENSSL_NO_RSA


480 
DECLARE_PEM_rw_cb
(
RSAPriv©eKey
, 
RSA
)

482 
DECLARE_PEM_rw_c⁄°
(
RSAPublicKey
, 
RSA
)

483 
DECLARE_PEM_rw
(
RSA_PUBKEY
, 
RSA
)

487 #i‚de‡
OPENSSL_NO_DSA


489 
DECLARE_PEM_rw_cb
(
DSAPriv©eKey
, 
DSA
)

491 
DECLARE_PEM_rw
(
DSA_PUBKEY
, 
DSA
)

493 
DECLARE_PEM_rw_c⁄°
(
DSA∑øms
, 
DSA
)

497 #i‚de‡
OPENSSL_NO_EC


498 
DECLARE_PEM_rw_c⁄°
(
ECPKP¨amëîs
, 
EC_GROUP
)

499 
DECLARE_PEM_rw_cb
(
ECPriv©eKey
, 
EC_KEY
)

500 
DECLARE_PEM_rw
(
EC_PUBKEY
, 
EC_KEY
)

503 #i‚de‡
OPENSSL_NO_DH


505 
DECLARE_PEM_rw_c⁄°
(
DH∑øms
, 
DH
)

509 
DECLARE_PEM_rw_cb
(
Priv©eKey
, 
EVP_PKEY
)

511 
DECLARE_PEM_rw
(
PUBKEY
, 
EVP_PKEY
)

513 
PEM_wrôe_bio_PKCS8Priv©eKey_nid
(
BIO
 *
bp
, 
EVP_PKEY
 *
x
, 
nid
,

514 *
k°r
, 
kÀn
,

515 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

516 
PEM_wrôe_bio_PKCS8Priv©eKey
(
BIO
 *, 
EVP_PKEY
 *, c⁄° 
EVP_CIPHER
 *,

517 *, , 
≥m_∑ssw‹d_cb
 *, *);

518 
i2d_PKCS8Priv©eKey_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
,

519 *
k°r
, 
kÀn
,

520 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

521 
i2d_PKCS8Priv©eKey_nid_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
x
, 
nid
,

522 *
k°r
, 
kÀn
,

523 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

524 
EVP_PKEY
 *
d2i_PKCS8Priv©eKey_bio
(
BIO
 *
bp
, EVP_PKEY **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

526 
i2d_PKCS8Priv©eKey_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
,

527 *
k°r
, 
kÀn
,

528 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

529 
i2d_PKCS8Priv©eKey_nid_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
x
, 
nid
,

530 *
k°r
, 
kÀn
,

531 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

532 
PEM_wrôe_PKCS8Priv©eKey_nid
(
FILE
 *
Â
, 
EVP_PKEY
 *
x
, 
nid
,

533 *
k°r
, 
kÀn
,

534 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

536 
EVP_PKEY
 *
d2i_PKCS8Priv©eKey_Â
(
FILE
 *
Â
, EVP_PKEY **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

538 
PEM_wrôe_PKCS8Priv©eKey
(
FILE
 *
Â
,
EVP_PKEY
 *
x
,c⁄° 
EVP_CIPHER
 *
íc
,

539 *
k°r
,
kÀn
, 
≥m_∑ssw‹d_cb
 *
cd
, *
u
);

541 
EVP_PKEY
 *
PEM_ªad_bio_P¨amëîs
(
BIO
 *
bp
, EVP_PKEY **
x
);

542 
PEM_wrôe_bio_P¨amëîs
(
BIO
 *
bp
, 
EVP_PKEY
 *
x
);

545 
EVP_PKEY
 *
b2i_Priv©eKey
(c⁄° **
ö
, 
Àngth
);

546 
EVP_PKEY
 *
b2i_PublicKey
(c⁄° **
ö
, 
Àngth
);

547 
EVP_PKEY
 *
b2i_Priv©eKey_bio
(
BIO
 *
ö
);

548 
EVP_PKEY
 *
b2i_PublicKey_bio
(
BIO
 *
ö
);

549 
i2b_Priv©eKey_bio
(
BIO
 *
out
, 
EVP_PKEY
 *
pk
);

550 
i2b_PublicKey_bio
(
BIO
 *
out
, 
EVP_PKEY
 *
pk
);

551 #i‚de‡
OPENSSL_NO_RC4


552 
EVP_PKEY
 *
b2i_PVK_bio
(
BIO
 *
ö
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

553 
i2b_PVK_bio
(
BIO
 *
out
, 
EVP_PKEY
 *
pk
, 
í˛evñ
,

554 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

562 
ERR_lﬂd_PEM_°rögs
();

567 
	#PEM_F_B2I_DSS
 127

	)

568 
	#PEM_F_B2I_PVK_BIO
 128

	)

569 
	#PEM_F_B2I_RSA
 129

	)

570 
	#PEM_F_CHECK_BITLEN_DSA
 130

	)

571 
	#PEM_F_CHECK_BITLEN_RSA
 131

	)

572 
	#PEM_F_D2I_PKCS8PRIVATEKEY_BIO
 120

	)

573 
	#PEM_F_D2I_PKCS8PRIVATEKEY_FP
 121

	)

574 
	#PEM_F_DO_B2I
 132

	)

575 
	#PEM_F_DO_B2I_BIO
 133

	)

576 
	#PEM_F_DO_BLOB_HEADER
 134

	)

577 
	#PEM_F_DO_PK8PKEY
 126

	)

578 
	#PEM_F_DO_PK8PKEY_FP
 125

	)

579 
	#PEM_F_DO_PVK_BODY
 135

	)

580 
	#PEM_F_DO_PVK_HEADER
 136

	)

581 
	#PEM_F_I2B_PVK
 137

	)

582 
	#PEM_F_I2B_PVK_BIO
 138

	)

583 
	#PEM_F_LOAD_IV
 101

	)

584 
	#PEM_F_PEM_ASN1_READ
 102

	)

585 
	#PEM_F_PEM_ASN1_READ_BIO
 103

	)

586 
	#PEM_F_PEM_ASN1_WRITE
 104

	)

587 
	#PEM_F_PEM_ASN1_WRITE_BIO
 105

	)

588 
	#PEM_F_PEM_DEF_CALLBACK
 100

	)

589 
	#PEM_F_PEM_DO_HEADER
 106

	)

590 
	#PEM_F_PEM_F_PEM_WRITE_PKCS8PRIVATEKEY
 118

	)

591 
	#PEM_F_PEM_GET_EVP_CIPHER_INFO
 107

	)

592 
	#PEM_F_PEM_PK8PKEY
 119

	)

593 
	#PEM_F_PEM_READ
 108

	)

594 
	#PEM_F_PEM_READ_BIO
 109

	)

595 
	#PEM_F_PEM_READ_BIO_PARAMETERS
 140

	)

596 
	#PEM_F_PEM_READ_BIO_PRIVATEKEY
 123

	)

597 
	#PEM_F_PEM_READ_PRIVATEKEY
 124

	)

598 
	#PEM_F_PEM_SEALFINAL
 110

	)

599 
	#PEM_F_PEM_SEALINIT
 111

	)

600 
	#PEM_F_PEM_SIGNFINAL
 112

	)

601 
	#PEM_F_PEM_WRITE
 113

	)

602 
	#PEM_F_PEM_WRITE_BIO
 114

	)

603 
	#PEM_F_PEM_WRITE_PRIVATEKEY
 139

	)

604 
	#PEM_F_PEM_X509_INFO_READ
 115

	)

605 
	#PEM_F_PEM_X509_INFO_READ_BIO
 116

	)

606 
	#PEM_F_PEM_X509_INFO_WRITE_BIO
 117

	)

609 
	#PEM_R_BAD_BASE64_DECODE
 100

	)

610 
	#PEM_R_BAD_DECRYPT
 101

	)

611 
	#PEM_R_BAD_END_LINE
 102

	)

612 
	#PEM_R_BAD_IV_CHARS
 103

	)

613 
	#PEM_R_BAD_MAGIC_NUMBER
 116

	)

614 
	#PEM_R_BAD_PASSWORD_READ
 104

	)

615 
	#PEM_R_BAD_VERSION_NUMBER
 117

	)

616 
	#PEM_R_BIO_WRITE_FAILURE
 118

	)

617 
	#PEM_R_CIPHER_IS_NULL
 127

	)

618 
	#PEM_R_ERROR_CONVERTING_PRIVATE_KEY
 115

	)

619 
	#PEM_R_EXPECTING_PRIVATE_KEY_BLOB
 119

	)

620 
	#PEM_R_EXPECTING_PUBLIC_KEY_BLOB
 120

	)

621 
	#PEM_R_INCONSISTENT_HEADER
 121

	)

622 
	#PEM_R_KEYBLOB_HEADER_PARSE_ERROR
 122

	)

623 
	#PEM_R_KEYBLOB_TOO_SHORT
 123

	)

624 
	#PEM_R_NOT_DEK_INFO
 105

	)

625 
	#PEM_R_NOT_ENCRYPTED
 106

	)

626 
	#PEM_R_NOT_PROC_TYPE
 107

	)

627 
	#PEM_R_NO_START_LINE
 108

	)

628 
	#PEM_R_PROBLEMS_GETTING_PASSWORD
 109

	)

629 
	#PEM_R_PUBLIC_KEY_NO_RSA
 110

	)

630 
	#PEM_R_PVK_DATA_TOO_SHORT
 124

	)

631 
	#PEM_R_PVK_TOO_SHORT
 125

	)

632 
	#PEM_R_READ_KEY
 111

	)

633 
	#PEM_R_SHORT_HEADER
 112

	)

634 
	#PEM_R_UNSUPPORTED_CIPHER
 113

	)

635 
	#PEM_R_UNSUPPORTED_ENCRYPTION
 114

	)

636 
	#PEM_R_UNSUPPORTED_KEY_COMPONENTS
 126

	)

638 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/safestack.h

55 #i‚de‡
HEADER_SAFESTACK_H


56 
	#HEADER_SAFESTACK_H


	)

58 
	~<›ís¶/°ack.h
>

60 #ifde‡
__˝lu•lus


64 #i‚de‡
CHECKED_PTR_OF


65 
	#CHECKED_PTR_OF
(
ty≥
, 
p
) \

66 ((*Ë(1 ? 
p
 : (
ty≥
*)0))

	)

74 
	#CHECKED_STACK_OF
(
ty≥
, 
p
) \

75 ((
_STACK
*Ë(1 ? 
p
 : (
	`STACK_OF
(
ty≥
)*)0))

	)

77 
	#CHECKED_SK_FREE_FUNC
(
ty≥
, 
p
) \

78 (((*)(*)Ë((1 ? 
p
 : ((*)(
ty≥
 *))0)))

	)

80 
	#CHECKED_SK_FREE_FUNC2
(
ty≥
, 
p
) \

81 (((*)(*)Ë((1 ? 
p
 : ((*)(
ty≥
))0)))

	)

83 
	#CHECKED_SK_CMP_FUNC
(
ty≥
, 
p
) \

85 ((1 ? 
p
 : ((*)(c⁄° 
ty≥
 * c⁄° *, c⁄°Åy≥ * c⁄° *))0)))

	)

87 
	#STACK_OF
(
ty≥
Ë
°ack_°_
##
	)
type

88 
	#PREDECLARE_STACK_OF
(
ty≥
Ë
	`STACK_OF
—y≥);

	)

90 
	#DECLARE_STACK_OF
(
ty≥
) \

91 
	`STACK_OF
(
ty≥
) \

93 
_STACK
 
°ack
; \

94 };

	)

95 
	#DECLARE_SPECIAL_STACK_OF
(
ty≥
, 
ty≥2
) \

96 
	`STACK_OF
(
ty≥
) \

98 
_STACK
 
°ack
; \

99 };

	)

101 
	#IMPLEMENT_STACK_OF
(
ty≥
Ë

	)

117 *
	tOPENSSL_STRING
;

119 c⁄° *
	tOPENSSL_CSTRING
;

129 
DECLARE_SPECIAL_STACK_OF
(
OPENSSL_STRING
, )

135 *
	tOPENSSL_BLOCK
;

136 
DECLARE_SPECIAL_STACK_OF
(
OPENSSL_BLOCK
, )

140 
	#SKM_sk_√w
(
ty≥
, 
cmp
) \

141 ((
	`STACK_OF
(
ty≥
Ë*)
	`sk_√w
(
	`CHECKED_SK_CMP_FUNC
—y≥, 
cmp
)))

	)

142 
	#SKM_sk_√w_nuŒ
(
ty≥
) \

143 ((
	`STACK_OF
(
ty≥
Ë*)
	`sk_√w_nuŒ
())

	)

144 
	#SKM_sk_‰ì
(
ty≥
, 
°
) \

145 
	`sk_‰ì
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
))

	)

146 
	#SKM_sk_num
(
ty≥
, 
°
) \

147 
	`sk_num
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
))

	)

148 
	#SKM_sk_vÆue
(
ty≥
, 
°
,
i
) \

149 ((
ty≥
 *)
	`sk_vÆue
(
	`CHECKED_STACK_OF
—y≥, 
°
), 
i
))

	)

150 
	#SKM_sk_£t
(
ty≥
, 
°
,
i
,
vÆ
) \

151 
	`sk_£t
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
i
, 
	`CHECKED_PTR_OF
—y≥, 
vÆ
))

	)

152 
	#SKM_sk_zîo
(
ty≥
, 
°
) \

153 
	`sk_zîo
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
))

	)

154 
	#SKM_sk_push
(
ty≥
, 
°
, 
vÆ
) \

155 
	`sk_push
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
	`CHECKED_PTR_OF
—y≥, 
vÆ
))

	)

156 
	#SKM_sk_unshi·
(
ty≥
, 
°
, 
vÆ
) \

157 
	`sk_unshi·
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
	`CHECKED_PTR_OF
—y≥, 
vÆ
))

	)

158 
	#SKM_sk_föd
(
ty≥
, 
°
, 
vÆ
) \

159 
	`sk_föd
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
	`CHECKED_PTR_OF
—y≥, 
vÆ
))

	)

160 
	#SKM_sk_föd_ex
(
ty≥
, 
°
, 
vÆ
) \

161 
	`sk_föd_ex
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), \

162 
	`CHECKED_PTR_OF
(
ty≥
, 
vÆ
))

	)

163 
	#SKM_sk_dñëe
(
ty≥
, 
°
, 
i
) \

164 (
ty≥
 *)
	`sk_dñëe
(
	`CHECKED_STACK_OF
—y≥, 
°
), 
i
)

	)

165 
	#SKM_sk_dñëe_±r
(
ty≥
, 
°
, 
±r
) \

166 (
ty≥
 *)
	`sk_dñëe_±r
(
	`CHECKED_STACK_OF
—y≥, 
°
), 
	`CHECKED_PTR_OF
—y≥, 
±r
))

	)

167 
	#SKM_sk_ö£π
(
ty≥
, 
°
,
vÆ
, 
i
) \

168 
	`sk_ö£π
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
	`CHECKED_PTR_OF
—y≥, 
vÆ
), 
i
)

	)

169 
	#SKM_sk_£t_cmp_func
(
ty≥
, 
°
, 
cmp
) \

170 (((*)(c⁄° 
ty≥
 * const *,constÅype * const *)) \

171 
	`sk_£t_cmp_func
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
	`CHECKED_SK_CMP_FUNC
—y≥, 
cmp
)))

	)

172 
	#SKM_sk_dup
(
ty≥
, 
°
) \

173 (
	`STACK_OF
(
ty≥
Ë*)
	`sk_dup
(
	`CHECKED_STACK_OF
—y≥, 
°
))

	)

174 
	#SKM_sk_p›_‰ì
(
ty≥
, 
°
, 
‰ì_func
) \

175 
	`sk_p›_‰ì
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
	`CHECKED_SK_FREE_FUNC
—y≥, 
‰ì_func
))

	)

176 
	#SKM_sk_shi·
(
ty≥
, 
°
) \

177 (
ty≥
 *)
	`sk_shi·
(
	`CHECKED_STACK_OF
—y≥, 
°
))

	)

178 
	#SKM_sk_p›
(
ty≥
, 
°
) \

179 (
ty≥
 *)
	`sk_p›
(
	`CHECKED_STACK_OF
—y≥, 
°
))

	)

180 
	#SKM_sk_s‹t
(
ty≥
, 
°
) \

181 
	`sk_s‹t
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
))

	)

182 
	#SKM_sk_is_s‹ãd
(
ty≥
, 
°
) \

183 
	`sk_is_s‹ãd
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
))

	)

185 
	#SKM_ASN1_SET_OF_d2i
(
ty≥
, 
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

186 (
	`STACK_OF
(
ty≥
Ë*)
	`d2i_ASN1_SET
( \

187 (
	`STACK_OF
(
OPENSSL_BLOCK
Ë**)
	`CHECKED_PTR_OF
(STACK_OF(
ty≥
)*, 
°
), \

188 
µ
, 
Àngth
, \

189 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i_func
), \

190 
	`CHECKED_SK_FREE_FUNC
(
ty≥
, 
‰ì_func
), \

191 
ex_èg
, 
ex_˛ass
)

	)

193 
	#SKM_ASN1_SET_OF_i2d
(
ty≥
, 
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

194 
	`i2d_ASN1_SET
((
	`STACK_OF
(
OPENSSL_BLOCK
Ë*)
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
µ
, \

195 
	`CHECKED_I2D_OF
(
ty≥
, 
i2d_func
), \

196 
ex_èg
, 
ex_˛ass
, 
is_£t
)

	)

198 
	#SKM_ASN1_£q_∑ck
(
ty≥
, 
°
, 
i2d_func
, 
buf
, 
Àn
) \

199 
	`ASN1_£q_∑ck
(
	`CHECKED_PTR_OF
(
	`STACK_OF
(
ty≥
), 
°
), \

200 
	`CHECKED_I2D_OF
(
ty≥
, 
i2d_func
), 
buf
, 
Àn
)

	)

202 
	#SKM_ASN1_£q_u≈ack
(
ty≥
, 
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

203 (
	`STACK_OF
(
ty≥
Ë*)
	`ASN1_£q_u≈ack
(
buf
, 
Àn
, 
	`CHECKED_D2I_OF
—y≥, 
d2i_func
), 
	`CHECKED_SK_FREE_FUNC
—y≥, 
‰ì_func
))

	)

205 
	#SKM_PKCS12_de¸y±_d2i
(
ty≥
, 
Æg‹
, 
d2i_func
, 
‰ì_func
, 
∑ss
, 
∑s¶í
, 
o˘
, 
£q
) \

206 (
	`STACK_OF
(
ty≥
Ë*)
	`PKCS12_de¸y±_d2i
(
Æg‹
, \

207 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i_func
), \

208 
	`CHECKED_SK_FREE_FUNC
(
ty≥
, 
‰ì_func
), \

209 
∑ss
, 
∑s¶í
, 
o˘
, 
£q
)

	)

212 
	#sk_ACCESS_DESCRIPTION_√w
(
cmp
Ë
	`SKM_sk_√w
(
ACCESS_DESCRIPTION
, (cmp))

	)

213 
	#sk_ACCESS_DESCRIPTION_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ACCESS_DESCRIPTION
)

	)

214 
	#sk_ACCESS_DESCRIPTION_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ACCESS_DESCRIPTION
, (°))

	)

215 
	#sk_ACCESS_DESCRIPTION_num
(
°
Ë
	`SKM_sk_num
(
ACCESS_DESCRIPTION
, (°))

	)

216 
	#sk_ACCESS_DESCRIPTION_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ACCESS_DESCRIPTION
, (°), (i))

	)

217 
	#sk_ACCESS_DESCRIPTION_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ACCESS_DESCRIPTION
, (°), (i), (vÆ))

	)

218 
	#sk_ACCESS_DESCRIPTION_zîo
(
°
Ë
	`SKM_sk_zîo
(
ACCESS_DESCRIPTION
, (°))

	)

219 
	#sk_ACCESS_DESCRIPTION_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ACCESS_DESCRIPTION
, (°), (vÆ))

	)

220 
	#sk_ACCESS_DESCRIPTION_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ACCESS_DESCRIPTION
, (°), (vÆ))

	)

221 
	#sk_ACCESS_DESCRIPTION_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ACCESS_DESCRIPTION
, (°), (vÆ))

	)

222 
	#sk_ACCESS_DESCRIPTION_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ACCESS_DESCRIPTION
, (°), (vÆ))

	)

223 
	#sk_ACCESS_DESCRIPTION_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ACCESS_DESCRIPTION
, (°), (i))

	)

224 
	#sk_ACCESS_DESCRIPTION_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ACCESS_DESCRIPTION
, (°), (±r))

	)

225 
	#sk_ACCESS_DESCRIPTION_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ACCESS_DESCRIPTION
, (°), (vÆ), (i))

	)

226 
	#sk_ACCESS_DESCRIPTION_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ACCESS_DESCRIPTION
, (°), (cmp))

	)

227 
	#sk_ACCESS_DESCRIPTION_dup
(
°
Ë
	`SKM_sk_dup
(
ACCESS_DESCRIPTION
, st)

	)

228 
	#sk_ACCESS_DESCRIPTION_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ACCESS_DESCRIPTION
, (°), (‰ì_func))

	)

229 
	#sk_ACCESS_DESCRIPTION_shi·
(
°
Ë
	`SKM_sk_shi·
(
ACCESS_DESCRIPTION
, (°))

	)

230 
	#sk_ACCESS_DESCRIPTION_p›
(
°
Ë
	`SKM_sk_p›
(
ACCESS_DESCRIPTION
, (°))

	)

231 
	#sk_ACCESS_DESCRIPTION_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ACCESS_DESCRIPTION
, (°))

	)

232 
	#sk_ACCESS_DESCRIPTION_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ACCESS_DESCRIPTION
, (°))

	)

234 
	#sk_ASIdOrR™ge_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASIdOrR™ge
, (cmp))

	)

235 
	#sk_ASIdOrR™ge_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASIdOrR™ge
)

	)

236 
	#sk_ASIdOrR™ge_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASIdOrR™ge
, (°))

	)

237 
	#sk_ASIdOrR™ge_num
(
°
Ë
	`SKM_sk_num
(
ASIdOrR™ge
, (°))

	)

238 
	#sk_ASIdOrR™ge_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASIdOrR™ge
, (°), (i))

	)

239 
	#sk_ASIdOrR™ge_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASIdOrR™ge
, (°), (i), (vÆ))

	)

240 
	#sk_ASIdOrR™ge_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASIdOrR™ge
, (°))

	)

241 
	#sk_ASIdOrR™ge_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASIdOrR™ge
, (°), (vÆ))

	)

242 
	#sk_ASIdOrR™ge_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASIdOrR™ge
, (°), (vÆ))

	)

243 
	#sk_ASIdOrR™ge_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASIdOrR™ge
, (°), (vÆ))

	)

244 
	#sk_ASIdOrR™ge_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASIdOrR™ge
, (°), (vÆ))

	)

245 
	#sk_ASIdOrR™ge_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASIdOrR™ge
, (°), (i))

	)

246 
	#sk_ASIdOrR™ge_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASIdOrR™ge
, (°), (±r))

	)

247 
	#sk_ASIdOrR™ge_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASIdOrR™ge
, (°), (vÆ), (i))

	)

248 
	#sk_ASIdOrR™ge_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASIdOrR™ge
, (°), (cmp))

	)

249 
	#sk_ASIdOrR™ge_dup
(
°
Ë
	`SKM_sk_dup
(
ASIdOrR™ge
, st)

	)

250 
	#sk_ASIdOrR™ge_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASIdOrR™ge
, (°), (‰ì_func))

	)

251 
	#sk_ASIdOrR™ge_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASIdOrR™ge
, (°))

	)

252 
	#sk_ASIdOrR™ge_p›
(
°
Ë
	`SKM_sk_p›
(
ASIdOrR™ge
, (°))

	)

253 
	#sk_ASIdOrR™ge_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASIdOrR™ge
, (°))

	)

254 
	#sk_ASIdOrR™ge_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASIdOrR™ge
, (°))

	)

256 
	#sk_ASN1_GENERALSTRING_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASN1_GENERALSTRING
, (cmp))

	)

257 
	#sk_ASN1_GENERALSTRING_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_GENERALSTRING
)

	)

258 
	#sk_ASN1_GENERALSTRING_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_GENERALSTRING
, (°))

	)

259 
	#sk_ASN1_GENERALSTRING_num
(
°
Ë
	`SKM_sk_num
(
ASN1_GENERALSTRING
, (°))

	)

260 
	#sk_ASN1_GENERALSTRING_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_GENERALSTRING
, (°), (i))

	)

261 
	#sk_ASN1_GENERALSTRING_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_GENERALSTRING
, (°), (i), (vÆ))

	)

262 
	#sk_ASN1_GENERALSTRING_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_GENERALSTRING
, (°))

	)

263 
	#sk_ASN1_GENERALSTRING_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_GENERALSTRING
, (°), (vÆ))

	)

264 
	#sk_ASN1_GENERALSTRING_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_GENERALSTRING
, (°), (vÆ))

	)

265 
	#sk_ASN1_GENERALSTRING_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_GENERALSTRING
, (°), (vÆ))

	)

266 
	#sk_ASN1_GENERALSTRING_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_GENERALSTRING
, (°), (vÆ))

	)

267 
	#sk_ASN1_GENERALSTRING_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_GENERALSTRING
, (°), (i))

	)

268 
	#sk_ASN1_GENERALSTRING_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_GENERALSTRING
, (°), (±r))

	)

269 
	#sk_ASN1_GENERALSTRING_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_GENERALSTRING
, (°), (vÆ), (i))

	)

270 
	#sk_ASN1_GENERALSTRING_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_GENERALSTRING
, (°), (cmp))

	)

271 
	#sk_ASN1_GENERALSTRING_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_GENERALSTRING
, st)

	)

272 
	#sk_ASN1_GENERALSTRING_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_GENERALSTRING
, (°), (‰ì_func))

	)

273 
	#sk_ASN1_GENERALSTRING_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_GENERALSTRING
, (°))

	)

274 
	#sk_ASN1_GENERALSTRING_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_GENERALSTRING
, (°))

	)

275 
	#sk_ASN1_GENERALSTRING_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_GENERALSTRING
, (°))

	)

276 
	#sk_ASN1_GENERALSTRING_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_GENERALSTRING
, (°))

	)

278 
	#sk_ASN1_INTEGER_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASN1_INTEGER
, (cmp))

	)

279 
	#sk_ASN1_INTEGER_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_INTEGER
)

	)

280 
	#sk_ASN1_INTEGER_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_INTEGER
, (°))

	)

281 
	#sk_ASN1_INTEGER_num
(
°
Ë
	`SKM_sk_num
(
ASN1_INTEGER
, (°))

	)

282 
	#sk_ASN1_INTEGER_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_INTEGER
, (°), (i))

	)

283 
	#sk_ASN1_INTEGER_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_INTEGER
, (°), (i), (vÆ))

	)

284 
	#sk_ASN1_INTEGER_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_INTEGER
, (°))

	)

285 
	#sk_ASN1_INTEGER_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_INTEGER
, (°), (vÆ))

	)

286 
	#sk_ASN1_INTEGER_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_INTEGER
, (°), (vÆ))

	)

287 
	#sk_ASN1_INTEGER_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_INTEGER
, (°), (vÆ))

	)

288 
	#sk_ASN1_INTEGER_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_INTEGER
, (°), (vÆ))

	)

289 
	#sk_ASN1_INTEGER_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_INTEGER
, (°), (i))

	)

290 
	#sk_ASN1_INTEGER_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_INTEGER
, (°), (±r))

	)

291 
	#sk_ASN1_INTEGER_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_INTEGER
, (°), (vÆ), (i))

	)

292 
	#sk_ASN1_INTEGER_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_INTEGER
, (°), (cmp))

	)

293 
	#sk_ASN1_INTEGER_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_INTEGER
, st)

	)

294 
	#sk_ASN1_INTEGER_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_INTEGER
, (°), (‰ì_func))

	)

295 
	#sk_ASN1_INTEGER_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_INTEGER
, (°))

	)

296 
	#sk_ASN1_INTEGER_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_INTEGER
, (°))

	)

297 
	#sk_ASN1_INTEGER_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_INTEGER
, (°))

	)

298 
	#sk_ASN1_INTEGER_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_INTEGER
, (°))

	)

300 
	#sk_ASN1_OBJECT_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASN1_OBJECT
, (cmp))

	)

301 
	#sk_ASN1_OBJECT_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_OBJECT
)

	)

302 
	#sk_ASN1_OBJECT_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_OBJECT
, (°))

	)

303 
	#sk_ASN1_OBJECT_num
(
°
Ë
	`SKM_sk_num
(
ASN1_OBJECT
, (°))

	)

304 
	#sk_ASN1_OBJECT_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_OBJECT
, (°), (i))

	)

305 
	#sk_ASN1_OBJECT_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_OBJECT
, (°), (i), (vÆ))

	)

306 
	#sk_ASN1_OBJECT_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_OBJECT
, (°))

	)

307 
	#sk_ASN1_OBJECT_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_OBJECT
, (°), (vÆ))

	)

308 
	#sk_ASN1_OBJECT_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_OBJECT
, (°), (vÆ))

	)

309 
	#sk_ASN1_OBJECT_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_OBJECT
, (°), (vÆ))

	)

310 
	#sk_ASN1_OBJECT_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_OBJECT
, (°), (vÆ))

	)

311 
	#sk_ASN1_OBJECT_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_OBJECT
, (°), (i))

	)

312 
	#sk_ASN1_OBJECT_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_OBJECT
, (°), (±r))

	)

313 
	#sk_ASN1_OBJECT_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_OBJECT
, (°), (vÆ), (i))

	)

314 
	#sk_ASN1_OBJECT_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_OBJECT
, (°), (cmp))

	)

315 
	#sk_ASN1_OBJECT_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_OBJECT
, st)

	)

316 
	#sk_ASN1_OBJECT_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_OBJECT
, (°), (‰ì_func))

	)

317 
	#sk_ASN1_OBJECT_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_OBJECT
, (°))

	)

318 
	#sk_ASN1_OBJECT_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_OBJECT
, (°))

	)

319 
	#sk_ASN1_OBJECT_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_OBJECT
, (°))

	)

320 
	#sk_ASN1_OBJECT_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_OBJECT
, (°))

	)

322 
	#sk_ASN1_STRING_TABLE_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASN1_STRING_TABLE
, (cmp))

	)

323 
	#sk_ASN1_STRING_TABLE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_STRING_TABLE
)

	)

324 
	#sk_ASN1_STRING_TABLE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_STRING_TABLE
, (°))

	)

325 
	#sk_ASN1_STRING_TABLE_num
(
°
Ë
	`SKM_sk_num
(
ASN1_STRING_TABLE
, (°))

	)

326 
	#sk_ASN1_STRING_TABLE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_STRING_TABLE
, (°), (i))

	)

327 
	#sk_ASN1_STRING_TABLE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_STRING_TABLE
, (°), (i), (vÆ))

	)

328 
	#sk_ASN1_STRING_TABLE_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_STRING_TABLE
, (°))

	)

329 
	#sk_ASN1_STRING_TABLE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_STRING_TABLE
, (°), (vÆ))

	)

330 
	#sk_ASN1_STRING_TABLE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_STRING_TABLE
, (°), (vÆ))

	)

331 
	#sk_ASN1_STRING_TABLE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_STRING_TABLE
, (°), (vÆ))

	)

332 
	#sk_ASN1_STRING_TABLE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_STRING_TABLE
, (°), (vÆ))

	)

333 
	#sk_ASN1_STRING_TABLE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_STRING_TABLE
, (°), (i))

	)

334 
	#sk_ASN1_STRING_TABLE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_STRING_TABLE
, (°), (±r))

	)

335 
	#sk_ASN1_STRING_TABLE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_STRING_TABLE
, (°), (vÆ), (i))

	)

336 
	#sk_ASN1_STRING_TABLE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_STRING_TABLE
, (°), (cmp))

	)

337 
	#sk_ASN1_STRING_TABLE_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_STRING_TABLE
, st)

	)

338 
	#sk_ASN1_STRING_TABLE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_STRING_TABLE
, (°), (‰ì_func))

	)

339 
	#sk_ASN1_STRING_TABLE_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_STRING_TABLE
, (°))

	)

340 
	#sk_ASN1_STRING_TABLE_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_STRING_TABLE
, (°))

	)

341 
	#sk_ASN1_STRING_TABLE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_STRING_TABLE
, (°))

	)

342 
	#sk_ASN1_STRING_TABLE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_STRING_TABLE
, (°))

	)

344 
	#sk_ASN1_TYPE_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASN1_TYPE
, (cmp))

	)

345 
	#sk_ASN1_TYPE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_TYPE
)

	)

346 
	#sk_ASN1_TYPE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_TYPE
, (°))

	)

347 
	#sk_ASN1_TYPE_num
(
°
Ë
	`SKM_sk_num
(
ASN1_TYPE
, (°))

	)

348 
	#sk_ASN1_TYPE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_TYPE
, (°), (i))

	)

349 
	#sk_ASN1_TYPE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_TYPE
, (°), (i), (vÆ))

	)

350 
	#sk_ASN1_TYPE_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_TYPE
, (°))

	)

351 
	#sk_ASN1_TYPE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_TYPE
, (°), (vÆ))

	)

352 
	#sk_ASN1_TYPE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_TYPE
, (°), (vÆ))

	)

353 
	#sk_ASN1_TYPE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_TYPE
, (°), (vÆ))

	)

354 
	#sk_ASN1_TYPE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_TYPE
, (°), (vÆ))

	)

355 
	#sk_ASN1_TYPE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_TYPE
, (°), (i))

	)

356 
	#sk_ASN1_TYPE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_TYPE
, (°), (±r))

	)

357 
	#sk_ASN1_TYPE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_TYPE
, (°), (vÆ), (i))

	)

358 
	#sk_ASN1_TYPE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_TYPE
, (°), (cmp))

	)

359 
	#sk_ASN1_TYPE_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_TYPE
, st)

	)

360 
	#sk_ASN1_TYPE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_TYPE
, (°), (‰ì_func))

	)

361 
	#sk_ASN1_TYPE_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_TYPE
, (°))

	)

362 
	#sk_ASN1_TYPE_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_TYPE
, (°))

	)

363 
	#sk_ASN1_TYPE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_TYPE
, (°))

	)

364 
	#sk_ASN1_TYPE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_TYPE
, (°))

	)

366 
	#sk_ASN1_UTF8STRING_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASN1_UTF8STRING
, (cmp))

	)

367 
	#sk_ASN1_UTF8STRING_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_UTF8STRING
)

	)

368 
	#sk_ASN1_UTF8STRING_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_UTF8STRING
, (°))

	)

369 
	#sk_ASN1_UTF8STRING_num
(
°
Ë
	`SKM_sk_num
(
ASN1_UTF8STRING
, (°))

	)

370 
	#sk_ASN1_UTF8STRING_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_UTF8STRING
, (°), (i))

	)

371 
	#sk_ASN1_UTF8STRING_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_UTF8STRING
, (°), (i), (vÆ))

	)

372 
	#sk_ASN1_UTF8STRING_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_UTF8STRING
, (°))

	)

373 
	#sk_ASN1_UTF8STRING_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_UTF8STRING
, (°), (vÆ))

	)

374 
	#sk_ASN1_UTF8STRING_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_UTF8STRING
, (°), (vÆ))

	)

375 
	#sk_ASN1_UTF8STRING_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_UTF8STRING
, (°), (vÆ))

	)

376 
	#sk_ASN1_UTF8STRING_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_UTF8STRING
, (°), (vÆ))

	)

377 
	#sk_ASN1_UTF8STRING_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_UTF8STRING
, (°), (i))

	)

378 
	#sk_ASN1_UTF8STRING_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_UTF8STRING
, (°), (±r))

	)

379 
	#sk_ASN1_UTF8STRING_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_UTF8STRING
, (°), (vÆ), (i))

	)

380 
	#sk_ASN1_UTF8STRING_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_UTF8STRING
, (°), (cmp))

	)

381 
	#sk_ASN1_UTF8STRING_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_UTF8STRING
, st)

	)

382 
	#sk_ASN1_UTF8STRING_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_UTF8STRING
, (°), (‰ì_func))

	)

383 
	#sk_ASN1_UTF8STRING_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_UTF8STRING
, (°))

	)

384 
	#sk_ASN1_UTF8STRING_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_UTF8STRING
, (°))

	)

385 
	#sk_ASN1_UTF8STRING_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_UTF8STRING
, (°))

	)

386 
	#sk_ASN1_UTF8STRING_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_UTF8STRING
, (°))

	)

388 
	#sk_ASN1_VALUE_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASN1_VALUE
, (cmp))

	)

389 
	#sk_ASN1_VALUE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_VALUE
)

	)

390 
	#sk_ASN1_VALUE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_VALUE
, (°))

	)

391 
	#sk_ASN1_VALUE_num
(
°
Ë
	`SKM_sk_num
(
ASN1_VALUE
, (°))

	)

392 
	#sk_ASN1_VALUE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_VALUE
, (°), (i))

	)

393 
	#sk_ASN1_VALUE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_VALUE
, (°), (i), (vÆ))

	)

394 
	#sk_ASN1_VALUE_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_VALUE
, (°))

	)

395 
	#sk_ASN1_VALUE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_VALUE
, (°), (vÆ))

	)

396 
	#sk_ASN1_VALUE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_VALUE
, (°), (vÆ))

	)

397 
	#sk_ASN1_VALUE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_VALUE
, (°), (vÆ))

	)

398 
	#sk_ASN1_VALUE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_VALUE
, (°), (vÆ))

	)

399 
	#sk_ASN1_VALUE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_VALUE
, (°), (i))

	)

400 
	#sk_ASN1_VALUE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_VALUE
, (°), (±r))

	)

401 
	#sk_ASN1_VALUE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_VALUE
, (°), (vÆ), (i))

	)

402 
	#sk_ASN1_VALUE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_VALUE
, (°), (cmp))

	)

403 
	#sk_ASN1_VALUE_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_VALUE
, st)

	)

404 
	#sk_ASN1_VALUE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_VALUE
, (°), (‰ì_func))

	)

405 
	#sk_ASN1_VALUE_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_VALUE
, (°))

	)

406 
	#sk_ASN1_VALUE_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_VALUE
, (°))

	)

407 
	#sk_ASN1_VALUE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_VALUE
, (°))

	)

408 
	#sk_ASN1_VALUE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_VALUE
, (°))

	)

410 
	#sk_BIO_√w
(
cmp
Ë
	`SKM_sk_√w
(
BIO
, (cmp))

	)

411 
	#sk_BIO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
BIO
)

	)

412 
	#sk_BIO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
BIO
, (°))

	)

413 
	#sk_BIO_num
(
°
Ë
	`SKM_sk_num
(
BIO
, (°))

	)

414 
	#sk_BIO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
BIO
, (°), (i))

	)

415 
	#sk_BIO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
BIO
, (°), (i), (vÆ))

	)

416 
	#sk_BIO_zîo
(
°
Ë
	`SKM_sk_zîo
(
BIO
, (°))

	)

417 
	#sk_BIO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
BIO
, (°), (vÆ))

	)

418 
	#sk_BIO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
BIO
, (°), (vÆ))

	)

419 
	#sk_BIO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
BIO
, (°), (vÆ))

	)

420 
	#sk_BIO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
BIO
, (°), (vÆ))

	)

421 
	#sk_BIO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
BIO
, (°), (i))

	)

422 
	#sk_BIO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
BIO
, (°), (±r))

	)

423 
	#sk_BIO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
BIO
, (°), (vÆ), (i))

	)

424 
	#sk_BIO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
BIO
, (°), (cmp))

	)

425 
	#sk_BIO_dup
(
°
Ë
	`SKM_sk_dup
(
BIO
, st)

	)

426 
	#sk_BIO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
BIO
, (°), (‰ì_func))

	)

427 
	#sk_BIO_shi·
(
°
Ë
	`SKM_sk_shi·
(
BIO
, (°))

	)

428 
	#sk_BIO_p›
(
°
Ë
	`SKM_sk_p›
(
BIO
, (°))

	)

429 
	#sk_BIO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
BIO
, (°))

	)

430 
	#sk_BIO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
BIO
, (°))

	)

432 
	#sk_BY_DIR_ENTRY_√w
(
cmp
Ë
	`SKM_sk_√w
(
BY_DIR_ENTRY
, (cmp))

	)

433 
	#sk_BY_DIR_ENTRY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
BY_DIR_ENTRY
)

	)

434 
	#sk_BY_DIR_ENTRY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
BY_DIR_ENTRY
, (°))

	)

435 
	#sk_BY_DIR_ENTRY_num
(
°
Ë
	`SKM_sk_num
(
BY_DIR_ENTRY
, (°))

	)

436 
	#sk_BY_DIR_ENTRY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
BY_DIR_ENTRY
, (°), (i))

	)

437 
	#sk_BY_DIR_ENTRY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
BY_DIR_ENTRY
, (°), (i), (vÆ))

	)

438 
	#sk_BY_DIR_ENTRY_zîo
(
°
Ë
	`SKM_sk_zîo
(
BY_DIR_ENTRY
, (°))

	)

439 
	#sk_BY_DIR_ENTRY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
BY_DIR_ENTRY
, (°), (vÆ))

	)

440 
	#sk_BY_DIR_ENTRY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
BY_DIR_ENTRY
, (°), (vÆ))

	)

441 
	#sk_BY_DIR_ENTRY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
BY_DIR_ENTRY
, (°), (vÆ))

	)

442 
	#sk_BY_DIR_ENTRY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
BY_DIR_ENTRY
, (°), (vÆ))

	)

443 
	#sk_BY_DIR_ENTRY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
BY_DIR_ENTRY
, (°), (i))

	)

444 
	#sk_BY_DIR_ENTRY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
BY_DIR_ENTRY
, (°), (±r))

	)

445 
	#sk_BY_DIR_ENTRY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
BY_DIR_ENTRY
, (°), (vÆ), (i))

	)

446 
	#sk_BY_DIR_ENTRY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
BY_DIR_ENTRY
, (°), (cmp))

	)

447 
	#sk_BY_DIR_ENTRY_dup
(
°
Ë
	`SKM_sk_dup
(
BY_DIR_ENTRY
, st)

	)

448 
	#sk_BY_DIR_ENTRY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
BY_DIR_ENTRY
, (°), (‰ì_func))

	)

449 
	#sk_BY_DIR_ENTRY_shi·
(
°
Ë
	`SKM_sk_shi·
(
BY_DIR_ENTRY
, (°))

	)

450 
	#sk_BY_DIR_ENTRY_p›
(
°
Ë
	`SKM_sk_p›
(
BY_DIR_ENTRY
, (°))

	)

451 
	#sk_BY_DIR_ENTRY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
BY_DIR_ENTRY
, (°))

	)

452 
	#sk_BY_DIR_ENTRY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
BY_DIR_ENTRY
, (°))

	)

454 
	#sk_BY_DIR_HASH_√w
(
cmp
Ë
	`SKM_sk_√w
(
BY_DIR_HASH
, (cmp))

	)

455 
	#sk_BY_DIR_HASH_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
BY_DIR_HASH
)

	)

456 
	#sk_BY_DIR_HASH_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
BY_DIR_HASH
, (°))

	)

457 
	#sk_BY_DIR_HASH_num
(
°
Ë
	`SKM_sk_num
(
BY_DIR_HASH
, (°))

	)

458 
	#sk_BY_DIR_HASH_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
BY_DIR_HASH
, (°), (i))

	)

459 
	#sk_BY_DIR_HASH_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
BY_DIR_HASH
, (°), (i), (vÆ))

	)

460 
	#sk_BY_DIR_HASH_zîo
(
°
Ë
	`SKM_sk_zîo
(
BY_DIR_HASH
, (°))

	)

461 
	#sk_BY_DIR_HASH_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
BY_DIR_HASH
, (°), (vÆ))

	)

462 
	#sk_BY_DIR_HASH_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
BY_DIR_HASH
, (°), (vÆ))

	)

463 
	#sk_BY_DIR_HASH_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
BY_DIR_HASH
, (°), (vÆ))

	)

464 
	#sk_BY_DIR_HASH_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
BY_DIR_HASH
, (°), (vÆ))

	)

465 
	#sk_BY_DIR_HASH_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
BY_DIR_HASH
, (°), (i))

	)

466 
	#sk_BY_DIR_HASH_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
BY_DIR_HASH
, (°), (±r))

	)

467 
	#sk_BY_DIR_HASH_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
BY_DIR_HASH
, (°), (vÆ), (i))

	)

468 
	#sk_BY_DIR_HASH_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
BY_DIR_HASH
, (°), (cmp))

	)

469 
	#sk_BY_DIR_HASH_dup
(
°
Ë
	`SKM_sk_dup
(
BY_DIR_HASH
, st)

	)

470 
	#sk_BY_DIR_HASH_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
BY_DIR_HASH
, (°), (‰ì_func))

	)

471 
	#sk_BY_DIR_HASH_shi·
(
°
Ë
	`SKM_sk_shi·
(
BY_DIR_HASH
, (°))

	)

472 
	#sk_BY_DIR_HASH_p›
(
°
Ë
	`SKM_sk_p›
(
BY_DIR_HASH
, (°))

	)

473 
	#sk_BY_DIR_HASH_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
BY_DIR_HASH
, (°))

	)

474 
	#sk_BY_DIR_HASH_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
BY_DIR_HASH
, (°))

	)

476 
	#sk_CMS_CîtifiˇãChoi˚s_√w
(
cmp
Ë
	`SKM_sk_√w
(
CMS_CîtifiˇãChoi˚s
, (cmp))

	)

477 
	#sk_CMS_CîtifiˇãChoi˚s_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CMS_CîtifiˇãChoi˚s
)

	)

478 
	#sk_CMS_CîtifiˇãChoi˚s_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

479 
	#sk_CMS_CîtifiˇãChoi˚s_num
(
°
Ë
	`SKM_sk_num
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

480 
	#sk_CMS_CîtifiˇãChoi˚s_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CMS_CîtifiˇãChoi˚s
, (°), (i))

	)

481 
	#sk_CMS_CîtifiˇãChoi˚s_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CMS_CîtifiˇãChoi˚s
, (°), (i), (vÆ))

	)

482 
	#sk_CMS_CîtifiˇãChoi˚s_zîo
(
°
Ë
	`SKM_sk_zîo
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

483 
	#sk_CMS_CîtifiˇãChoi˚s_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CMS_CîtifiˇãChoi˚s
, (°), (vÆ))

	)

484 
	#sk_CMS_CîtifiˇãChoi˚s_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CMS_CîtifiˇãChoi˚s
, (°), (vÆ))

	)

485 
	#sk_CMS_CîtifiˇãChoi˚s_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CMS_CîtifiˇãChoi˚s
, (°), (vÆ))

	)

486 
	#sk_CMS_CîtifiˇãChoi˚s_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CMS_CîtifiˇãChoi˚s
, (°), (vÆ))

	)

487 
	#sk_CMS_CîtifiˇãChoi˚s_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CMS_CîtifiˇãChoi˚s
, (°), (i))

	)

488 
	#sk_CMS_CîtifiˇãChoi˚s_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CMS_CîtifiˇãChoi˚s
, (°), (±r))

	)

489 
	#sk_CMS_CîtifiˇãChoi˚s_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CMS_CîtifiˇãChoi˚s
, (°), (vÆ), (i))

	)

490 
	#sk_CMS_CîtifiˇãChoi˚s_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CMS_CîtifiˇãChoi˚s
, (°), (cmp))

	)

491 
	#sk_CMS_CîtifiˇãChoi˚s_dup
(
°
Ë
	`SKM_sk_dup
(
CMS_CîtifiˇãChoi˚s
, st)

	)

492 
	#sk_CMS_CîtifiˇãChoi˚s_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CMS_CîtifiˇãChoi˚s
, (°), (‰ì_func))

	)

493 
	#sk_CMS_CîtifiˇãChoi˚s_shi·
(
°
Ë
	`SKM_sk_shi·
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

494 
	#sk_CMS_CîtifiˇãChoi˚s_p›
(
°
Ë
	`SKM_sk_p›
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

495 
	#sk_CMS_CîtifiˇãChoi˚s_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

496 
	#sk_CMS_CîtifiˇãChoi˚s_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

498 
	#sk_CMS_Recùõ¡Info_√w
(
cmp
Ë
	`SKM_sk_√w
(
CMS_Recùõ¡Info
, (cmp))

	)

499 
	#sk_CMS_Recùõ¡Info_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CMS_Recùõ¡Info
)

	)

500 
	#sk_CMS_Recùõ¡Info_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CMS_Recùõ¡Info
, (°))

	)

501 
	#sk_CMS_Recùõ¡Info_num
(
°
Ë
	`SKM_sk_num
(
CMS_Recùõ¡Info
, (°))

	)

502 
	#sk_CMS_Recùõ¡Info_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CMS_Recùõ¡Info
, (°), (i))

	)

503 
	#sk_CMS_Recùõ¡Info_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CMS_Recùõ¡Info
, (°), (i), (vÆ))

	)

504 
	#sk_CMS_Recùõ¡Info_zîo
(
°
Ë
	`SKM_sk_zîo
(
CMS_Recùõ¡Info
, (°))

	)

505 
	#sk_CMS_Recùõ¡Info_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CMS_Recùõ¡Info
, (°), (vÆ))

	)

506 
	#sk_CMS_Recùõ¡Info_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CMS_Recùõ¡Info
, (°), (vÆ))

	)

507 
	#sk_CMS_Recùõ¡Info_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CMS_Recùõ¡Info
, (°), (vÆ))

	)

508 
	#sk_CMS_Recùõ¡Info_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CMS_Recùõ¡Info
, (°), (vÆ))

	)

509 
	#sk_CMS_Recùõ¡Info_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CMS_Recùõ¡Info
, (°), (i))

	)

510 
	#sk_CMS_Recùõ¡Info_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CMS_Recùõ¡Info
, (°), (±r))

	)

511 
	#sk_CMS_Recùõ¡Info_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CMS_Recùõ¡Info
, (°), (vÆ), (i))

	)

512 
	#sk_CMS_Recùõ¡Info_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CMS_Recùõ¡Info
, (°), (cmp))

	)

513 
	#sk_CMS_Recùõ¡Info_dup
(
°
Ë
	`SKM_sk_dup
(
CMS_Recùõ¡Info
, st)

	)

514 
	#sk_CMS_Recùõ¡Info_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CMS_Recùõ¡Info
, (°), (‰ì_func))

	)

515 
	#sk_CMS_Recùõ¡Info_shi·
(
°
Ë
	`SKM_sk_shi·
(
CMS_Recùõ¡Info
, (°))

	)

516 
	#sk_CMS_Recùõ¡Info_p›
(
°
Ë
	`SKM_sk_p›
(
CMS_Recùõ¡Info
, (°))

	)

517 
	#sk_CMS_Recùõ¡Info_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CMS_Recùõ¡Info
, (°))

	)

518 
	#sk_CMS_Recùõ¡Info_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CMS_Recùõ¡Info
, (°))

	)

520 
	#sk_CMS_Revoˇti⁄InfoChoi˚_√w
(
cmp
Ë
	`SKM_sk_√w
(
CMS_Revoˇti⁄InfoChoi˚
, (cmp))

	)

521 
	#sk_CMS_Revoˇti⁄InfoChoi˚_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CMS_Revoˇti⁄InfoChoi˚
)

	)

522 
	#sk_CMS_Revoˇti⁄InfoChoi˚_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

523 
	#sk_CMS_Revoˇti⁄InfoChoi˚_num
(
°
Ë
	`SKM_sk_num
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

524 
	#sk_CMS_Revoˇti⁄InfoChoi˚_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (i))

	)

525 
	#sk_CMS_Revoˇti⁄InfoChoi˚_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (i), (vÆ))

	)

526 
	#sk_CMS_Revoˇti⁄InfoChoi˚_zîo
(
°
Ë
	`SKM_sk_zîo
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

527 
	#sk_CMS_Revoˇti⁄InfoChoi˚_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (vÆ))

	)

528 
	#sk_CMS_Revoˇti⁄InfoChoi˚_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (vÆ))

	)

529 
	#sk_CMS_Revoˇti⁄InfoChoi˚_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (vÆ))

	)

530 
	#sk_CMS_Revoˇti⁄InfoChoi˚_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (vÆ))

	)

531 
	#sk_CMS_Revoˇti⁄InfoChoi˚_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (i))

	)

532 
	#sk_CMS_Revoˇti⁄InfoChoi˚_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (±r))

	)

533 
	#sk_CMS_Revoˇti⁄InfoChoi˚_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (vÆ), (i))

	)

534 
	#sk_CMS_Revoˇti⁄InfoChoi˚_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (cmp))

	)

535 
	#sk_CMS_Revoˇti⁄InfoChoi˚_dup
(
°
Ë
	`SKM_sk_dup
(
CMS_Revoˇti⁄InfoChoi˚
, st)

	)

536 
	#sk_CMS_Revoˇti⁄InfoChoi˚_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (‰ì_func))

	)

537 
	#sk_CMS_Revoˇti⁄InfoChoi˚_shi·
(
°
Ë
	`SKM_sk_shi·
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

538 
	#sk_CMS_Revoˇti⁄InfoChoi˚_p›
(
°
Ë
	`SKM_sk_p›
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

539 
	#sk_CMS_Revoˇti⁄InfoChoi˚_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

540 
	#sk_CMS_Revoˇti⁄InfoChoi˚_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

542 
	#sk_CMS_Sig√rInfo_√w
(
cmp
Ë
	`SKM_sk_√w
(
CMS_Sig√rInfo
, (cmp))

	)

543 
	#sk_CMS_Sig√rInfo_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CMS_Sig√rInfo
)

	)

544 
	#sk_CMS_Sig√rInfo_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CMS_Sig√rInfo
, (°))

	)

545 
	#sk_CMS_Sig√rInfo_num
(
°
Ë
	`SKM_sk_num
(
CMS_Sig√rInfo
, (°))

	)

546 
	#sk_CMS_Sig√rInfo_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CMS_Sig√rInfo
, (°), (i))

	)

547 
	#sk_CMS_Sig√rInfo_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CMS_Sig√rInfo
, (°), (i), (vÆ))

	)

548 
	#sk_CMS_Sig√rInfo_zîo
(
°
Ë
	`SKM_sk_zîo
(
CMS_Sig√rInfo
, (°))

	)

549 
	#sk_CMS_Sig√rInfo_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CMS_Sig√rInfo
, (°), (vÆ))

	)

550 
	#sk_CMS_Sig√rInfo_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CMS_Sig√rInfo
, (°), (vÆ))

	)

551 
	#sk_CMS_Sig√rInfo_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CMS_Sig√rInfo
, (°), (vÆ))

	)

552 
	#sk_CMS_Sig√rInfo_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CMS_Sig√rInfo
, (°), (vÆ))

	)

553 
	#sk_CMS_Sig√rInfo_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CMS_Sig√rInfo
, (°), (i))

	)

554 
	#sk_CMS_Sig√rInfo_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CMS_Sig√rInfo
, (°), (±r))

	)

555 
	#sk_CMS_Sig√rInfo_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CMS_Sig√rInfo
, (°), (vÆ), (i))

	)

556 
	#sk_CMS_Sig√rInfo_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CMS_Sig√rInfo
, (°), (cmp))

	)

557 
	#sk_CMS_Sig√rInfo_dup
(
°
Ë
	`SKM_sk_dup
(
CMS_Sig√rInfo
, st)

	)

558 
	#sk_CMS_Sig√rInfo_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CMS_Sig√rInfo
, (°), (‰ì_func))

	)

559 
	#sk_CMS_Sig√rInfo_shi·
(
°
Ë
	`SKM_sk_shi·
(
CMS_Sig√rInfo
, (°))

	)

560 
	#sk_CMS_Sig√rInfo_p›
(
°
Ë
	`SKM_sk_p›
(
CMS_Sig√rInfo
, (°))

	)

561 
	#sk_CMS_Sig√rInfo_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CMS_Sig√rInfo
, (°))

	)

562 
	#sk_CMS_Sig√rInfo_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CMS_Sig√rInfo
, (°))

	)

564 
	#sk_CONF_IMODULE_√w
(
cmp
Ë
	`SKM_sk_√w
(
CONF_IMODULE
, (cmp))

	)

565 
	#sk_CONF_IMODULE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CONF_IMODULE
)

	)

566 
	#sk_CONF_IMODULE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CONF_IMODULE
, (°))

	)

567 
	#sk_CONF_IMODULE_num
(
°
Ë
	`SKM_sk_num
(
CONF_IMODULE
, (°))

	)

568 
	#sk_CONF_IMODULE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CONF_IMODULE
, (°), (i))

	)

569 
	#sk_CONF_IMODULE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CONF_IMODULE
, (°), (i), (vÆ))

	)

570 
	#sk_CONF_IMODULE_zîo
(
°
Ë
	`SKM_sk_zîo
(
CONF_IMODULE
, (°))

	)

571 
	#sk_CONF_IMODULE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CONF_IMODULE
, (°), (vÆ))

	)

572 
	#sk_CONF_IMODULE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CONF_IMODULE
, (°), (vÆ))

	)

573 
	#sk_CONF_IMODULE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CONF_IMODULE
, (°), (vÆ))

	)

574 
	#sk_CONF_IMODULE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CONF_IMODULE
, (°), (vÆ))

	)

575 
	#sk_CONF_IMODULE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CONF_IMODULE
, (°), (i))

	)

576 
	#sk_CONF_IMODULE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CONF_IMODULE
, (°), (±r))

	)

577 
	#sk_CONF_IMODULE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CONF_IMODULE
, (°), (vÆ), (i))

	)

578 
	#sk_CONF_IMODULE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CONF_IMODULE
, (°), (cmp))

	)

579 
	#sk_CONF_IMODULE_dup
(
°
Ë
	`SKM_sk_dup
(
CONF_IMODULE
, st)

	)

580 
	#sk_CONF_IMODULE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CONF_IMODULE
, (°), (‰ì_func))

	)

581 
	#sk_CONF_IMODULE_shi·
(
°
Ë
	`SKM_sk_shi·
(
CONF_IMODULE
, (°))

	)

582 
	#sk_CONF_IMODULE_p›
(
°
Ë
	`SKM_sk_p›
(
CONF_IMODULE
, (°))

	)

583 
	#sk_CONF_IMODULE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CONF_IMODULE
, (°))

	)

584 
	#sk_CONF_IMODULE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CONF_IMODULE
, (°))

	)

586 
	#sk_CONF_MODULE_√w
(
cmp
Ë
	`SKM_sk_√w
(
CONF_MODULE
, (cmp))

	)

587 
	#sk_CONF_MODULE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CONF_MODULE
)

	)

588 
	#sk_CONF_MODULE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CONF_MODULE
, (°))

	)

589 
	#sk_CONF_MODULE_num
(
°
Ë
	`SKM_sk_num
(
CONF_MODULE
, (°))

	)

590 
	#sk_CONF_MODULE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CONF_MODULE
, (°), (i))

	)

591 
	#sk_CONF_MODULE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CONF_MODULE
, (°), (i), (vÆ))

	)

592 
	#sk_CONF_MODULE_zîo
(
°
Ë
	`SKM_sk_zîo
(
CONF_MODULE
, (°))

	)

593 
	#sk_CONF_MODULE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CONF_MODULE
, (°), (vÆ))

	)

594 
	#sk_CONF_MODULE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CONF_MODULE
, (°), (vÆ))

	)

595 
	#sk_CONF_MODULE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CONF_MODULE
, (°), (vÆ))

	)

596 
	#sk_CONF_MODULE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CONF_MODULE
, (°), (vÆ))

	)

597 
	#sk_CONF_MODULE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CONF_MODULE
, (°), (i))

	)

598 
	#sk_CONF_MODULE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CONF_MODULE
, (°), (±r))

	)

599 
	#sk_CONF_MODULE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CONF_MODULE
, (°), (vÆ), (i))

	)

600 
	#sk_CONF_MODULE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CONF_MODULE
, (°), (cmp))

	)

601 
	#sk_CONF_MODULE_dup
(
°
Ë
	`SKM_sk_dup
(
CONF_MODULE
, st)

	)

602 
	#sk_CONF_MODULE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CONF_MODULE
, (°), (‰ì_func))

	)

603 
	#sk_CONF_MODULE_shi·
(
°
Ë
	`SKM_sk_shi·
(
CONF_MODULE
, (°))

	)

604 
	#sk_CONF_MODULE_p›
(
°
Ë
	`SKM_sk_p›
(
CONF_MODULE
, (°))

	)

605 
	#sk_CONF_MODULE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CONF_MODULE
, (°))

	)

606 
	#sk_CONF_MODULE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CONF_MODULE
, (°))

	)

608 
	#sk_CONF_VALUE_√w
(
cmp
Ë
	`SKM_sk_√w
(
CONF_VALUE
, (cmp))

	)

609 
	#sk_CONF_VALUE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CONF_VALUE
)

	)

610 
	#sk_CONF_VALUE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CONF_VALUE
, (°))

	)

611 
	#sk_CONF_VALUE_num
(
°
Ë
	`SKM_sk_num
(
CONF_VALUE
, (°))

	)

612 
	#sk_CONF_VALUE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CONF_VALUE
, (°), (i))

	)

613 
	#sk_CONF_VALUE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CONF_VALUE
, (°), (i), (vÆ))

	)

614 
	#sk_CONF_VALUE_zîo
(
°
Ë
	`SKM_sk_zîo
(
CONF_VALUE
, (°))

	)

615 
	#sk_CONF_VALUE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CONF_VALUE
, (°), (vÆ))

	)

616 
	#sk_CONF_VALUE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CONF_VALUE
, (°), (vÆ))

	)

617 
	#sk_CONF_VALUE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CONF_VALUE
, (°), (vÆ))

	)

618 
	#sk_CONF_VALUE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CONF_VALUE
, (°), (vÆ))

	)

619 
	#sk_CONF_VALUE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CONF_VALUE
, (°), (i))

	)

620 
	#sk_CONF_VALUE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CONF_VALUE
, (°), (±r))

	)

621 
	#sk_CONF_VALUE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CONF_VALUE
, (°), (vÆ), (i))

	)

622 
	#sk_CONF_VALUE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CONF_VALUE
, (°), (cmp))

	)

623 
	#sk_CONF_VALUE_dup
(
°
Ë
	`SKM_sk_dup
(
CONF_VALUE
, st)

	)

624 
	#sk_CONF_VALUE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CONF_VALUE
, (°), (‰ì_func))

	)

625 
	#sk_CONF_VALUE_shi·
(
°
Ë
	`SKM_sk_shi·
(
CONF_VALUE
, (°))

	)

626 
	#sk_CONF_VALUE_p›
(
°
Ë
	`SKM_sk_p›
(
CONF_VALUE
, (°))

	)

627 
	#sk_CONF_VALUE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CONF_VALUE
, (°))

	)

628 
	#sk_CONF_VALUE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CONF_VALUE
, (°))

	)

630 
	#sk_CRYPTO_EX_DATA_FUNCS_√w
(
cmp
Ë
	`SKM_sk_√w
(
CRYPTO_EX_DATA_FUNCS
, (cmp))

	)

631 
	#sk_CRYPTO_EX_DATA_FUNCS_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CRYPTO_EX_DATA_FUNCS
)

	)

632 
	#sk_CRYPTO_EX_DATA_FUNCS_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

633 
	#sk_CRYPTO_EX_DATA_FUNCS_num
(
°
Ë
	`SKM_sk_num
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

634 
	#sk_CRYPTO_EX_DATA_FUNCS_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CRYPTO_EX_DATA_FUNCS
, (°), (i))

	)

635 
	#sk_CRYPTO_EX_DATA_FUNCS_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CRYPTO_EX_DATA_FUNCS
, (°), (i), (vÆ))

	)

636 
	#sk_CRYPTO_EX_DATA_FUNCS_zîo
(
°
Ë
	`SKM_sk_zîo
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

637 
	#sk_CRYPTO_EX_DATA_FUNCS_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CRYPTO_EX_DATA_FUNCS
, (°), (vÆ))

	)

638 
	#sk_CRYPTO_EX_DATA_FUNCS_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CRYPTO_EX_DATA_FUNCS
, (°), (vÆ))

	)

639 
	#sk_CRYPTO_EX_DATA_FUNCS_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CRYPTO_EX_DATA_FUNCS
, (°), (vÆ))

	)

640 
	#sk_CRYPTO_EX_DATA_FUNCS_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CRYPTO_EX_DATA_FUNCS
, (°), (vÆ))

	)

641 
	#sk_CRYPTO_EX_DATA_FUNCS_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CRYPTO_EX_DATA_FUNCS
, (°), (i))

	)

642 
	#sk_CRYPTO_EX_DATA_FUNCS_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CRYPTO_EX_DATA_FUNCS
, (°), (±r))

	)

643 
	#sk_CRYPTO_EX_DATA_FUNCS_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CRYPTO_EX_DATA_FUNCS
, (°), (vÆ), (i))

	)

644 
	#sk_CRYPTO_EX_DATA_FUNCS_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CRYPTO_EX_DATA_FUNCS
, (°), (cmp))

	)

645 
	#sk_CRYPTO_EX_DATA_FUNCS_dup
(
°
Ë
	`SKM_sk_dup
(
CRYPTO_EX_DATA_FUNCS
, st)

	)

646 
	#sk_CRYPTO_EX_DATA_FUNCS_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CRYPTO_EX_DATA_FUNCS
, (°), (‰ì_func))

	)

647 
	#sk_CRYPTO_EX_DATA_FUNCS_shi·
(
°
Ë
	`SKM_sk_shi·
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

648 
	#sk_CRYPTO_EX_DATA_FUNCS_p›
(
°
Ë
	`SKM_sk_p›
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

649 
	#sk_CRYPTO_EX_DATA_FUNCS_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

650 
	#sk_CRYPTO_EX_DATA_FUNCS_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

652 
	#sk_CRYPTO_dy∆ock_√w
(
cmp
Ë
	`SKM_sk_√w
(
CRYPTO_dy∆ock
, (cmp))

	)

653 
	#sk_CRYPTO_dy∆ock_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CRYPTO_dy∆ock
)

	)

654 
	#sk_CRYPTO_dy∆ock_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CRYPTO_dy∆ock
, (°))

	)

655 
	#sk_CRYPTO_dy∆ock_num
(
°
Ë
	`SKM_sk_num
(
CRYPTO_dy∆ock
, (°))

	)

656 
	#sk_CRYPTO_dy∆ock_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CRYPTO_dy∆ock
, (°), (i))

	)

657 
	#sk_CRYPTO_dy∆ock_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CRYPTO_dy∆ock
, (°), (i), (vÆ))

	)

658 
	#sk_CRYPTO_dy∆ock_zîo
(
°
Ë
	`SKM_sk_zîo
(
CRYPTO_dy∆ock
, (°))

	)

659 
	#sk_CRYPTO_dy∆ock_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CRYPTO_dy∆ock
, (°), (vÆ))

	)

660 
	#sk_CRYPTO_dy∆ock_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CRYPTO_dy∆ock
, (°), (vÆ))

	)

661 
	#sk_CRYPTO_dy∆ock_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CRYPTO_dy∆ock
, (°), (vÆ))

	)

662 
	#sk_CRYPTO_dy∆ock_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CRYPTO_dy∆ock
, (°), (vÆ))

	)

663 
	#sk_CRYPTO_dy∆ock_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CRYPTO_dy∆ock
, (°), (i))

	)

664 
	#sk_CRYPTO_dy∆ock_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CRYPTO_dy∆ock
, (°), (±r))

	)

665 
	#sk_CRYPTO_dy∆ock_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CRYPTO_dy∆ock
, (°), (vÆ), (i))

	)

666 
	#sk_CRYPTO_dy∆ock_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CRYPTO_dy∆ock
, (°), (cmp))

	)

667 
	#sk_CRYPTO_dy∆ock_dup
(
°
Ë
	`SKM_sk_dup
(
CRYPTO_dy∆ock
, st)

	)

668 
	#sk_CRYPTO_dy∆ock_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CRYPTO_dy∆ock
, (°), (‰ì_func))

	)

669 
	#sk_CRYPTO_dy∆ock_shi·
(
°
Ë
	`SKM_sk_shi·
(
CRYPTO_dy∆ock
, (°))

	)

670 
	#sk_CRYPTO_dy∆ock_p›
(
°
Ë
	`SKM_sk_p›
(
CRYPTO_dy∆ock
, (°))

	)

671 
	#sk_CRYPTO_dy∆ock_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CRYPTO_dy∆ock
, (°))

	)

672 
	#sk_CRYPTO_dy∆ock_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CRYPTO_dy∆ock
, (°))

	)

674 
	#sk_DIST_POINT_√w
(
cmp
Ë
	`SKM_sk_√w
(
DIST_POINT
, (cmp))

	)

675 
	#sk_DIST_POINT_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
DIST_POINT
)

	)

676 
	#sk_DIST_POINT_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
DIST_POINT
, (°))

	)

677 
	#sk_DIST_POINT_num
(
°
Ë
	`SKM_sk_num
(
DIST_POINT
, (°))

	)

678 
	#sk_DIST_POINT_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
DIST_POINT
, (°), (i))

	)

679 
	#sk_DIST_POINT_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
DIST_POINT
, (°), (i), (vÆ))

	)

680 
	#sk_DIST_POINT_zîo
(
°
Ë
	`SKM_sk_zîo
(
DIST_POINT
, (°))

	)

681 
	#sk_DIST_POINT_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
DIST_POINT
, (°), (vÆ))

	)

682 
	#sk_DIST_POINT_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
DIST_POINT
, (°), (vÆ))

	)

683 
	#sk_DIST_POINT_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
DIST_POINT
, (°), (vÆ))

	)

684 
	#sk_DIST_POINT_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
DIST_POINT
, (°), (vÆ))

	)

685 
	#sk_DIST_POINT_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
DIST_POINT
, (°), (i))

	)

686 
	#sk_DIST_POINT_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
DIST_POINT
, (°), (±r))

	)

687 
	#sk_DIST_POINT_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
DIST_POINT
, (°), (vÆ), (i))

	)

688 
	#sk_DIST_POINT_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
DIST_POINT
, (°), (cmp))

	)

689 
	#sk_DIST_POINT_dup
(
°
Ë
	`SKM_sk_dup
(
DIST_POINT
, st)

	)

690 
	#sk_DIST_POINT_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
DIST_POINT
, (°), (‰ì_func))

	)

691 
	#sk_DIST_POINT_shi·
(
°
Ë
	`SKM_sk_shi·
(
DIST_POINT
, (°))

	)

692 
	#sk_DIST_POINT_p›
(
°
Ë
	`SKM_sk_p›
(
DIST_POINT
, (°))

	)

693 
	#sk_DIST_POINT_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
DIST_POINT
, (°))

	)

694 
	#sk_DIST_POINT_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
DIST_POINT
, (°))

	)

696 
	#sk_ENGINE_√w
(
cmp
Ë
	`SKM_sk_√w
(
ENGINE
, (cmp))

	)

697 
	#sk_ENGINE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ENGINE
)

	)

698 
	#sk_ENGINE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ENGINE
, (°))

	)

699 
	#sk_ENGINE_num
(
°
Ë
	`SKM_sk_num
(
ENGINE
, (°))

	)

700 
	#sk_ENGINE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ENGINE
, (°), (i))

	)

701 
	#sk_ENGINE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ENGINE
, (°), (i), (vÆ))

	)

702 
	#sk_ENGINE_zîo
(
°
Ë
	`SKM_sk_zîo
(
ENGINE
, (°))

	)

703 
	#sk_ENGINE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ENGINE
, (°), (vÆ))

	)

704 
	#sk_ENGINE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ENGINE
, (°), (vÆ))

	)

705 
	#sk_ENGINE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ENGINE
, (°), (vÆ))

	)

706 
	#sk_ENGINE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ENGINE
, (°), (vÆ))

	)

707 
	#sk_ENGINE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ENGINE
, (°), (i))

	)

708 
	#sk_ENGINE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ENGINE
, (°), (±r))

	)

709 
	#sk_ENGINE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ENGINE
, (°), (vÆ), (i))

	)

710 
	#sk_ENGINE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ENGINE
, (°), (cmp))

	)

711 
	#sk_ENGINE_dup
(
°
Ë
	`SKM_sk_dup
(
ENGINE
, st)

	)

712 
	#sk_ENGINE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ENGINE
, (°), (‰ì_func))

	)

713 
	#sk_ENGINE_shi·
(
°
Ë
	`SKM_sk_shi·
(
ENGINE
, (°))

	)

714 
	#sk_ENGINE_p›
(
°
Ë
	`SKM_sk_p›
(
ENGINE
, (°))

	)

715 
	#sk_ENGINE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ENGINE
, (°))

	)

716 
	#sk_ENGINE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ENGINE
, (°))

	)

718 
	#sk_ENGINE_CLEANUP_ITEM_√w
(
cmp
Ë
	`SKM_sk_√w
(
ENGINE_CLEANUP_ITEM
, (cmp))

	)

719 
	#sk_ENGINE_CLEANUP_ITEM_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ENGINE_CLEANUP_ITEM
)

	)

720 
	#sk_ENGINE_CLEANUP_ITEM_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ENGINE_CLEANUP_ITEM
, (°))

	)

721 
	#sk_ENGINE_CLEANUP_ITEM_num
(
°
Ë
	`SKM_sk_num
(
ENGINE_CLEANUP_ITEM
, (°))

	)

722 
	#sk_ENGINE_CLEANUP_ITEM_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ENGINE_CLEANUP_ITEM
, (°), (i))

	)

723 
	#sk_ENGINE_CLEANUP_ITEM_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ENGINE_CLEANUP_ITEM
, (°), (i), (vÆ))

	)

724 
	#sk_ENGINE_CLEANUP_ITEM_zîo
(
°
Ë
	`SKM_sk_zîo
(
ENGINE_CLEANUP_ITEM
, (°))

	)

725 
	#sk_ENGINE_CLEANUP_ITEM_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ENGINE_CLEANUP_ITEM
, (°), (vÆ))

	)

726 
	#sk_ENGINE_CLEANUP_ITEM_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ENGINE_CLEANUP_ITEM
, (°), (vÆ))

	)

727 
	#sk_ENGINE_CLEANUP_ITEM_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ENGINE_CLEANUP_ITEM
, (°), (vÆ))

	)

728 
	#sk_ENGINE_CLEANUP_ITEM_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ENGINE_CLEANUP_ITEM
, (°), (vÆ))

	)

729 
	#sk_ENGINE_CLEANUP_ITEM_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ENGINE_CLEANUP_ITEM
, (°), (i))

	)

730 
	#sk_ENGINE_CLEANUP_ITEM_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ENGINE_CLEANUP_ITEM
, (°), (±r))

	)

731 
	#sk_ENGINE_CLEANUP_ITEM_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ENGINE_CLEANUP_ITEM
, (°), (vÆ), (i))

	)

732 
	#sk_ENGINE_CLEANUP_ITEM_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ENGINE_CLEANUP_ITEM
, (°), (cmp))

	)

733 
	#sk_ENGINE_CLEANUP_ITEM_dup
(
°
Ë
	`SKM_sk_dup
(
ENGINE_CLEANUP_ITEM
, st)

	)

734 
	#sk_ENGINE_CLEANUP_ITEM_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ENGINE_CLEANUP_ITEM
, (°), (‰ì_func))

	)

735 
	#sk_ENGINE_CLEANUP_ITEM_shi·
(
°
Ë
	`SKM_sk_shi·
(
ENGINE_CLEANUP_ITEM
, (°))

	)

736 
	#sk_ENGINE_CLEANUP_ITEM_p›
(
°
Ë
	`SKM_sk_p›
(
ENGINE_CLEANUP_ITEM
, (°))

	)

737 
	#sk_ENGINE_CLEANUP_ITEM_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ENGINE_CLEANUP_ITEM
, (°))

	)

738 
	#sk_ENGINE_CLEANUP_ITEM_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ENGINE_CLEANUP_ITEM
, (°))

	)

740 
	#sk_ESS_CERT_ID_√w
(
cmp
Ë
	`SKM_sk_√w
(
ESS_CERT_ID
, (cmp))

	)

741 
	#sk_ESS_CERT_ID_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ESS_CERT_ID
)

	)

742 
	#sk_ESS_CERT_ID_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ESS_CERT_ID
, (°))

	)

743 
	#sk_ESS_CERT_ID_num
(
°
Ë
	`SKM_sk_num
(
ESS_CERT_ID
, (°))

	)

744 
	#sk_ESS_CERT_ID_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ESS_CERT_ID
, (°), (i))

	)

745 
	#sk_ESS_CERT_ID_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ESS_CERT_ID
, (°), (i), (vÆ))

	)

746 
	#sk_ESS_CERT_ID_zîo
(
°
Ë
	`SKM_sk_zîo
(
ESS_CERT_ID
, (°))

	)

747 
	#sk_ESS_CERT_ID_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ESS_CERT_ID
, (°), (vÆ))

	)

748 
	#sk_ESS_CERT_ID_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ESS_CERT_ID
, (°), (vÆ))

	)

749 
	#sk_ESS_CERT_ID_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ESS_CERT_ID
, (°), (vÆ))

	)

750 
	#sk_ESS_CERT_ID_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ESS_CERT_ID
, (°), (vÆ))

	)

751 
	#sk_ESS_CERT_ID_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ESS_CERT_ID
, (°), (i))

	)

752 
	#sk_ESS_CERT_ID_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ESS_CERT_ID
, (°), (±r))

	)

753 
	#sk_ESS_CERT_ID_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ESS_CERT_ID
, (°), (vÆ), (i))

	)

754 
	#sk_ESS_CERT_ID_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ESS_CERT_ID
, (°), (cmp))

	)

755 
	#sk_ESS_CERT_ID_dup
(
°
Ë
	`SKM_sk_dup
(
ESS_CERT_ID
, st)

	)

756 
	#sk_ESS_CERT_ID_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ESS_CERT_ID
, (°), (‰ì_func))

	)

757 
	#sk_ESS_CERT_ID_shi·
(
°
Ë
	`SKM_sk_shi·
(
ESS_CERT_ID
, (°))

	)

758 
	#sk_ESS_CERT_ID_p›
(
°
Ë
	`SKM_sk_p›
(
ESS_CERT_ID
, (°))

	)

759 
	#sk_ESS_CERT_ID_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ESS_CERT_ID
, (°))

	)

760 
	#sk_ESS_CERT_ID_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ESS_CERT_ID
, (°))

	)

762 
	#sk_EVP_MD_√w
(
cmp
Ë
	`SKM_sk_√w
(
EVP_MD
, (cmp))

	)

763 
	#sk_EVP_MD_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
EVP_MD
)

	)

764 
	#sk_EVP_MD_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
EVP_MD
, (°))

	)

765 
	#sk_EVP_MD_num
(
°
Ë
	`SKM_sk_num
(
EVP_MD
, (°))

	)

766 
	#sk_EVP_MD_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
EVP_MD
, (°), (i))

	)

767 
	#sk_EVP_MD_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
EVP_MD
, (°), (i), (vÆ))

	)

768 
	#sk_EVP_MD_zîo
(
°
Ë
	`SKM_sk_zîo
(
EVP_MD
, (°))

	)

769 
	#sk_EVP_MD_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
EVP_MD
, (°), (vÆ))

	)

770 
	#sk_EVP_MD_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
EVP_MD
, (°), (vÆ))

	)

771 
	#sk_EVP_MD_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
EVP_MD
, (°), (vÆ))

	)

772 
	#sk_EVP_MD_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
EVP_MD
, (°), (vÆ))

	)

773 
	#sk_EVP_MD_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
EVP_MD
, (°), (i))

	)

774 
	#sk_EVP_MD_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
EVP_MD
, (°), (±r))

	)

775 
	#sk_EVP_MD_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
EVP_MD
, (°), (vÆ), (i))

	)

776 
	#sk_EVP_MD_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
EVP_MD
, (°), (cmp))

	)

777 
	#sk_EVP_MD_dup
(
°
Ë
	`SKM_sk_dup
(
EVP_MD
, st)

	)

778 
	#sk_EVP_MD_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
EVP_MD
, (°), (‰ì_func))

	)

779 
	#sk_EVP_MD_shi·
(
°
Ë
	`SKM_sk_shi·
(
EVP_MD
, (°))

	)

780 
	#sk_EVP_MD_p›
(
°
Ë
	`SKM_sk_p›
(
EVP_MD
, (°))

	)

781 
	#sk_EVP_MD_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
EVP_MD
, (°))

	)

782 
	#sk_EVP_MD_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
EVP_MD
, (°))

	)

784 
	#sk_EVP_PBE_CTL_√w
(
cmp
Ë
	`SKM_sk_√w
(
EVP_PBE_CTL
, (cmp))

	)

785 
	#sk_EVP_PBE_CTL_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
EVP_PBE_CTL
)

	)

786 
	#sk_EVP_PBE_CTL_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
EVP_PBE_CTL
, (°))

	)

787 
	#sk_EVP_PBE_CTL_num
(
°
Ë
	`SKM_sk_num
(
EVP_PBE_CTL
, (°))

	)

788 
	#sk_EVP_PBE_CTL_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
EVP_PBE_CTL
, (°), (i))

	)

789 
	#sk_EVP_PBE_CTL_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
EVP_PBE_CTL
, (°), (i), (vÆ))

	)

790 
	#sk_EVP_PBE_CTL_zîo
(
°
Ë
	`SKM_sk_zîo
(
EVP_PBE_CTL
, (°))

	)

791 
	#sk_EVP_PBE_CTL_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
EVP_PBE_CTL
, (°), (vÆ))

	)

792 
	#sk_EVP_PBE_CTL_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
EVP_PBE_CTL
, (°), (vÆ))

	)

793 
	#sk_EVP_PBE_CTL_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
EVP_PBE_CTL
, (°), (vÆ))

	)

794 
	#sk_EVP_PBE_CTL_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
EVP_PBE_CTL
, (°), (vÆ))

	)

795 
	#sk_EVP_PBE_CTL_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
EVP_PBE_CTL
, (°), (i))

	)

796 
	#sk_EVP_PBE_CTL_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
EVP_PBE_CTL
, (°), (±r))

	)

797 
	#sk_EVP_PBE_CTL_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
EVP_PBE_CTL
, (°), (vÆ), (i))

	)

798 
	#sk_EVP_PBE_CTL_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
EVP_PBE_CTL
, (°), (cmp))

	)

799 
	#sk_EVP_PBE_CTL_dup
(
°
Ë
	`SKM_sk_dup
(
EVP_PBE_CTL
, st)

	)

800 
	#sk_EVP_PBE_CTL_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
EVP_PBE_CTL
, (°), (‰ì_func))

	)

801 
	#sk_EVP_PBE_CTL_shi·
(
°
Ë
	`SKM_sk_shi·
(
EVP_PBE_CTL
, (°))

	)

802 
	#sk_EVP_PBE_CTL_p›
(
°
Ë
	`SKM_sk_p›
(
EVP_PBE_CTL
, (°))

	)

803 
	#sk_EVP_PBE_CTL_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
EVP_PBE_CTL
, (°))

	)

804 
	#sk_EVP_PBE_CTL_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
EVP_PBE_CTL
, (°))

	)

806 
	#sk_EVP_PKEY_ASN1_METHOD_√w
(
cmp
Ë
	`SKM_sk_√w
(
EVP_PKEY_ASN1_METHOD
, (cmp))

	)

807 
	#sk_EVP_PKEY_ASN1_METHOD_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
EVP_PKEY_ASN1_METHOD
)

	)

808 
	#sk_EVP_PKEY_ASN1_METHOD_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
EVP_PKEY_ASN1_METHOD
, (°))

	)

809 
	#sk_EVP_PKEY_ASN1_METHOD_num
(
°
Ë
	`SKM_sk_num
(
EVP_PKEY_ASN1_METHOD
, (°))

	)

810 
	#sk_EVP_PKEY_ASN1_METHOD_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
EVP_PKEY_ASN1_METHOD
, (°), (i))

	)

811 
	#sk_EVP_PKEY_ASN1_METHOD_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
EVP_PKEY_ASN1_METHOD
, (°), (i), (vÆ))

	)

812 
	#sk_EVP_PKEY_ASN1_METHOD_zîo
(
°
Ë
	`SKM_sk_zîo
(
EVP_PKEY_ASN1_METHOD
, (°))

	)

813 
	#sk_EVP_PKEY_ASN1_METHOD_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
EVP_PKEY_ASN1_METHOD
, (°), (vÆ))

	)

814 
	#sk_EVP_PKEY_ASN1_METHOD_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
EVP_PKEY_ASN1_METHOD
, (°), (vÆ))

	)

815 
	#sk_EVP_PKEY_ASN1_METHOD_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
EVP_PKEY_ASN1_METHOD
, (°), (vÆ))

	)

816 
	#sk_EVP_PKEY_ASN1_METHOD_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
EVP_PKEY_ASN1_METHOD
, (°), (vÆ))

	)

817 
	#sk_EVP_PKEY_ASN1_METHOD_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
EVP_PKEY_ASN1_METHOD
, (°), (i))

	)

818 
	#sk_EVP_PKEY_ASN1_METHOD_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
EVP_PKEY_ASN1_METHOD
, (°), (±r))

	)

819 
	#sk_EVP_PKEY_ASN1_METHOD_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
EVP_PKEY_ASN1_METHOD
, (°), (vÆ), (i))

	)

820 
	#sk_EVP_PKEY_ASN1_METHOD_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
EVP_PKEY_ASN1_METHOD
, (°), (cmp))

	)

821 
	#sk_EVP_PKEY_ASN1_METHOD_dup
(
°
Ë
	`SKM_sk_dup
(
EVP_PKEY_ASN1_METHOD
, st)

	)

822 
	#sk_EVP_PKEY_ASN1_METHOD_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
EVP_PKEY_ASN1_METHOD
, (°), (‰ì_func))

	)

823 
	#sk_EVP_PKEY_ASN1_METHOD_shi·
(
°
Ë
	`SKM_sk_shi·
(
EVP_PKEY_ASN1_METHOD
, (°))

	)

824 
	#sk_EVP_PKEY_ASN1_METHOD_p›
(
°
Ë
	`SKM_sk_p›
(
EVP_PKEY_ASN1_METHOD
, (°))

	)

825 
	#sk_EVP_PKEY_ASN1_METHOD_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
EVP_PKEY_ASN1_METHOD
, (°))

	)

826 
	#sk_EVP_PKEY_ASN1_METHOD_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
EVP_PKEY_ASN1_METHOD
, (°))

	)

828 
	#sk_EVP_PKEY_METHOD_√w
(
cmp
Ë
	`SKM_sk_√w
(
EVP_PKEY_METHOD
, (cmp))

	)

829 
	#sk_EVP_PKEY_METHOD_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
EVP_PKEY_METHOD
)

	)

830 
	#sk_EVP_PKEY_METHOD_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
EVP_PKEY_METHOD
, (°))

	)

831 
	#sk_EVP_PKEY_METHOD_num
(
°
Ë
	`SKM_sk_num
(
EVP_PKEY_METHOD
, (°))

	)

832 
	#sk_EVP_PKEY_METHOD_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
EVP_PKEY_METHOD
, (°), (i))

	)

833 
	#sk_EVP_PKEY_METHOD_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
EVP_PKEY_METHOD
, (°), (i), (vÆ))

	)

834 
	#sk_EVP_PKEY_METHOD_zîo
(
°
Ë
	`SKM_sk_zîo
(
EVP_PKEY_METHOD
, (°))

	)

835 
	#sk_EVP_PKEY_METHOD_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
EVP_PKEY_METHOD
, (°), (vÆ))

	)

836 
	#sk_EVP_PKEY_METHOD_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
EVP_PKEY_METHOD
, (°), (vÆ))

	)

837 
	#sk_EVP_PKEY_METHOD_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
EVP_PKEY_METHOD
, (°), (vÆ))

	)

838 
	#sk_EVP_PKEY_METHOD_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
EVP_PKEY_METHOD
, (°), (vÆ))

	)

839 
	#sk_EVP_PKEY_METHOD_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
EVP_PKEY_METHOD
, (°), (i))

	)

840 
	#sk_EVP_PKEY_METHOD_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
EVP_PKEY_METHOD
, (°), (±r))

	)

841 
	#sk_EVP_PKEY_METHOD_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
EVP_PKEY_METHOD
, (°), (vÆ), (i))

	)

842 
	#sk_EVP_PKEY_METHOD_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
EVP_PKEY_METHOD
, (°), (cmp))

	)

843 
	#sk_EVP_PKEY_METHOD_dup
(
°
Ë
	`SKM_sk_dup
(
EVP_PKEY_METHOD
, st)

	)

844 
	#sk_EVP_PKEY_METHOD_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
EVP_PKEY_METHOD
, (°), (‰ì_func))

	)

845 
	#sk_EVP_PKEY_METHOD_shi·
(
°
Ë
	`SKM_sk_shi·
(
EVP_PKEY_METHOD
, (°))

	)

846 
	#sk_EVP_PKEY_METHOD_p›
(
°
Ë
	`SKM_sk_p›
(
EVP_PKEY_METHOD
, (°))

	)

847 
	#sk_EVP_PKEY_METHOD_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
EVP_PKEY_METHOD
, (°))

	)

848 
	#sk_EVP_PKEY_METHOD_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
EVP_PKEY_METHOD
, (°))

	)

850 
	#sk_GENERAL_NAME_√w
(
cmp
Ë
	`SKM_sk_√w
(
GENERAL_NAME
, (cmp))

	)

851 
	#sk_GENERAL_NAME_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
GENERAL_NAME
)

	)

852 
	#sk_GENERAL_NAME_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
GENERAL_NAME
, (°))

	)

853 
	#sk_GENERAL_NAME_num
(
°
Ë
	`SKM_sk_num
(
GENERAL_NAME
, (°))

	)

854 
	#sk_GENERAL_NAME_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
GENERAL_NAME
, (°), (i))

	)

855 
	#sk_GENERAL_NAME_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
GENERAL_NAME
, (°), (i), (vÆ))

	)

856 
	#sk_GENERAL_NAME_zîo
(
°
Ë
	`SKM_sk_zîo
(
GENERAL_NAME
, (°))

	)

857 
	#sk_GENERAL_NAME_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
GENERAL_NAME
, (°), (vÆ))

	)

858 
	#sk_GENERAL_NAME_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
GENERAL_NAME
, (°), (vÆ))

	)

859 
	#sk_GENERAL_NAME_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
GENERAL_NAME
, (°), (vÆ))

	)

860 
	#sk_GENERAL_NAME_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
GENERAL_NAME
, (°), (vÆ))

	)

861 
	#sk_GENERAL_NAME_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
GENERAL_NAME
, (°), (i))

	)

862 
	#sk_GENERAL_NAME_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
GENERAL_NAME
, (°), (±r))

	)

863 
	#sk_GENERAL_NAME_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
GENERAL_NAME
, (°), (vÆ), (i))

	)

864 
	#sk_GENERAL_NAME_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
GENERAL_NAME
, (°), (cmp))

	)

865 
	#sk_GENERAL_NAME_dup
(
°
Ë
	`SKM_sk_dup
(
GENERAL_NAME
, st)

	)

866 
	#sk_GENERAL_NAME_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
GENERAL_NAME
, (°), (‰ì_func))

	)

867 
	#sk_GENERAL_NAME_shi·
(
°
Ë
	`SKM_sk_shi·
(
GENERAL_NAME
, (°))

	)

868 
	#sk_GENERAL_NAME_p›
(
°
Ë
	`SKM_sk_p›
(
GENERAL_NAME
, (°))

	)

869 
	#sk_GENERAL_NAME_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
GENERAL_NAME
, (°))

	)

870 
	#sk_GENERAL_NAME_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
GENERAL_NAME
, (°))

	)

872 
	#sk_GENERAL_NAMES_√w
(
cmp
Ë
	`SKM_sk_√w
(
GENERAL_NAMES
, (cmp))

	)

873 
	#sk_GENERAL_NAMES_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
GENERAL_NAMES
)

	)

874 
	#sk_GENERAL_NAMES_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
GENERAL_NAMES
, (°))

	)

875 
	#sk_GENERAL_NAMES_num
(
°
Ë
	`SKM_sk_num
(
GENERAL_NAMES
, (°))

	)

876 
	#sk_GENERAL_NAMES_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
GENERAL_NAMES
, (°), (i))

	)

877 
	#sk_GENERAL_NAMES_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
GENERAL_NAMES
, (°), (i), (vÆ))

	)

878 
	#sk_GENERAL_NAMES_zîo
(
°
Ë
	`SKM_sk_zîo
(
GENERAL_NAMES
, (°))

	)

879 
	#sk_GENERAL_NAMES_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
GENERAL_NAMES
, (°), (vÆ))

	)

880 
	#sk_GENERAL_NAMES_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
GENERAL_NAMES
, (°), (vÆ))

	)

881 
	#sk_GENERAL_NAMES_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
GENERAL_NAMES
, (°), (vÆ))

	)

882 
	#sk_GENERAL_NAMES_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
GENERAL_NAMES
, (°), (vÆ))

	)

883 
	#sk_GENERAL_NAMES_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
GENERAL_NAMES
, (°), (i))

	)

884 
	#sk_GENERAL_NAMES_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
GENERAL_NAMES
, (°), (±r))

	)

885 
	#sk_GENERAL_NAMES_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
GENERAL_NAMES
, (°), (vÆ), (i))

	)

886 
	#sk_GENERAL_NAMES_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
GENERAL_NAMES
, (°), (cmp))

	)

887 
	#sk_GENERAL_NAMES_dup
(
°
Ë
	`SKM_sk_dup
(
GENERAL_NAMES
, st)

	)

888 
	#sk_GENERAL_NAMES_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
GENERAL_NAMES
, (°), (‰ì_func))

	)

889 
	#sk_GENERAL_NAMES_shi·
(
°
Ë
	`SKM_sk_shi·
(
GENERAL_NAMES
, (°))

	)

890 
	#sk_GENERAL_NAMES_p›
(
°
Ë
	`SKM_sk_p›
(
GENERAL_NAMES
, (°))

	)

891 
	#sk_GENERAL_NAMES_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
GENERAL_NAMES
, (°))

	)

892 
	#sk_GENERAL_NAMES_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
GENERAL_NAMES
, (°))

	)

894 
	#sk_GENERAL_SUBTREE_√w
(
cmp
Ë
	`SKM_sk_√w
(
GENERAL_SUBTREE
, (cmp))

	)

895 
	#sk_GENERAL_SUBTREE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
GENERAL_SUBTREE
)

	)

896 
	#sk_GENERAL_SUBTREE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
GENERAL_SUBTREE
, (°))

	)

897 
	#sk_GENERAL_SUBTREE_num
(
°
Ë
	`SKM_sk_num
(
GENERAL_SUBTREE
, (°))

	)

898 
	#sk_GENERAL_SUBTREE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
GENERAL_SUBTREE
, (°), (i))

	)

899 
	#sk_GENERAL_SUBTREE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
GENERAL_SUBTREE
, (°), (i), (vÆ))

	)

900 
	#sk_GENERAL_SUBTREE_zîo
(
°
Ë
	`SKM_sk_zîo
(
GENERAL_SUBTREE
, (°))

	)

901 
	#sk_GENERAL_SUBTREE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
GENERAL_SUBTREE
, (°), (vÆ))

	)

902 
	#sk_GENERAL_SUBTREE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
GENERAL_SUBTREE
, (°), (vÆ))

	)

903 
	#sk_GENERAL_SUBTREE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
GENERAL_SUBTREE
, (°), (vÆ))

	)

904 
	#sk_GENERAL_SUBTREE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
GENERAL_SUBTREE
, (°), (vÆ))

	)

905 
	#sk_GENERAL_SUBTREE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
GENERAL_SUBTREE
, (°), (i))

	)

906 
	#sk_GENERAL_SUBTREE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
GENERAL_SUBTREE
, (°), (±r))

	)

907 
	#sk_GENERAL_SUBTREE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
GENERAL_SUBTREE
, (°), (vÆ), (i))

	)

908 
	#sk_GENERAL_SUBTREE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
GENERAL_SUBTREE
, (°), (cmp))

	)

909 
	#sk_GENERAL_SUBTREE_dup
(
°
Ë
	`SKM_sk_dup
(
GENERAL_SUBTREE
, st)

	)

910 
	#sk_GENERAL_SUBTREE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
GENERAL_SUBTREE
, (°), (‰ì_func))

	)

911 
	#sk_GENERAL_SUBTREE_shi·
(
°
Ë
	`SKM_sk_shi·
(
GENERAL_SUBTREE
, (°))

	)

912 
	#sk_GENERAL_SUBTREE_p›
(
°
Ë
	`SKM_sk_p›
(
GENERAL_SUBTREE
, (°))

	)

913 
	#sk_GENERAL_SUBTREE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
GENERAL_SUBTREE
, (°))

	)

914 
	#sk_GENERAL_SUBTREE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
GENERAL_SUBTREE
, (°))

	)

916 
	#sk_IPAddªssFamûy_√w
(
cmp
Ë
	`SKM_sk_√w
(
IPAddªssFamûy
, (cmp))

	)

917 
	#sk_IPAddªssFamûy_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
IPAddªssFamûy
)

	)

918 
	#sk_IPAddªssFamûy_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
IPAddªssFamûy
, (°))

	)

919 
	#sk_IPAddªssFamûy_num
(
°
Ë
	`SKM_sk_num
(
IPAddªssFamûy
, (°))

	)

920 
	#sk_IPAddªssFamûy_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
IPAddªssFamûy
, (°), (i))

	)

921 
	#sk_IPAddªssFamûy_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
IPAddªssFamûy
, (°), (i), (vÆ))

	)

922 
	#sk_IPAddªssFamûy_zîo
(
°
Ë
	`SKM_sk_zîo
(
IPAddªssFamûy
, (°))

	)

923 
	#sk_IPAddªssFamûy_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
IPAddªssFamûy
, (°), (vÆ))

	)

924 
	#sk_IPAddªssFamûy_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
IPAddªssFamûy
, (°), (vÆ))

	)

925 
	#sk_IPAddªssFamûy_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
IPAddªssFamûy
, (°), (vÆ))

	)

926 
	#sk_IPAddªssFamûy_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
IPAddªssFamûy
, (°), (vÆ))

	)

927 
	#sk_IPAddªssFamûy_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
IPAddªssFamûy
, (°), (i))

	)

928 
	#sk_IPAddªssFamûy_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
IPAddªssFamûy
, (°), (±r))

	)

929 
	#sk_IPAddªssFamûy_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
IPAddªssFamûy
, (°), (vÆ), (i))

	)

930 
	#sk_IPAddªssFamûy_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
IPAddªssFamûy
, (°), (cmp))

	)

931 
	#sk_IPAddªssFamûy_dup
(
°
Ë
	`SKM_sk_dup
(
IPAddªssFamûy
, st)

	)

932 
	#sk_IPAddªssFamûy_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
IPAddªssFamûy
, (°), (‰ì_func))

	)

933 
	#sk_IPAddªssFamûy_shi·
(
°
Ë
	`SKM_sk_shi·
(
IPAddªssFamûy
, (°))

	)

934 
	#sk_IPAddªssFamûy_p›
(
°
Ë
	`SKM_sk_p›
(
IPAddªssFamûy
, (°))

	)

935 
	#sk_IPAddªssFamûy_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
IPAddªssFamûy
, (°))

	)

936 
	#sk_IPAddªssFamûy_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
IPAddªssFamûy
, (°))

	)

938 
	#sk_IPAddªssOrR™ge_√w
(
cmp
Ë
	`SKM_sk_√w
(
IPAddªssOrR™ge
, (cmp))

	)

939 
	#sk_IPAddªssOrR™ge_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
IPAddªssOrR™ge
)

	)

940 
	#sk_IPAddªssOrR™ge_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
IPAddªssOrR™ge
, (°))

	)

941 
	#sk_IPAddªssOrR™ge_num
(
°
Ë
	`SKM_sk_num
(
IPAddªssOrR™ge
, (°))

	)

942 
	#sk_IPAddªssOrR™ge_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
IPAddªssOrR™ge
, (°), (i))

	)

943 
	#sk_IPAddªssOrR™ge_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
IPAddªssOrR™ge
, (°), (i), (vÆ))

	)

944 
	#sk_IPAddªssOrR™ge_zîo
(
°
Ë
	`SKM_sk_zîo
(
IPAddªssOrR™ge
, (°))

	)

945 
	#sk_IPAddªssOrR™ge_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
IPAddªssOrR™ge
, (°), (vÆ))

	)

946 
	#sk_IPAddªssOrR™ge_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
IPAddªssOrR™ge
, (°), (vÆ))

	)

947 
	#sk_IPAddªssOrR™ge_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
IPAddªssOrR™ge
, (°), (vÆ))

	)

948 
	#sk_IPAddªssOrR™ge_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
IPAddªssOrR™ge
, (°), (vÆ))

	)

949 
	#sk_IPAddªssOrR™ge_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
IPAddªssOrR™ge
, (°), (i))

	)

950 
	#sk_IPAddªssOrR™ge_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
IPAddªssOrR™ge
, (°), (±r))

	)

951 
	#sk_IPAddªssOrR™ge_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
IPAddªssOrR™ge
, (°), (vÆ), (i))

	)

952 
	#sk_IPAddªssOrR™ge_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
IPAddªssOrR™ge
, (°), (cmp))

	)

953 
	#sk_IPAddªssOrR™ge_dup
(
°
Ë
	`SKM_sk_dup
(
IPAddªssOrR™ge
, st)

	)

954 
	#sk_IPAddªssOrR™ge_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
IPAddªssOrR™ge
, (°), (‰ì_func))

	)

955 
	#sk_IPAddªssOrR™ge_shi·
(
°
Ë
	`SKM_sk_shi·
(
IPAddªssOrR™ge
, (°))

	)

956 
	#sk_IPAddªssOrR™ge_p›
(
°
Ë
	`SKM_sk_p›
(
IPAddªssOrR™ge
, (°))

	)

957 
	#sk_IPAddªssOrR™ge_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
IPAddªssOrR™ge
, (°))

	)

958 
	#sk_IPAddªssOrR™ge_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
IPAddªssOrR™ge
, (°))

	)

960 
	#sk_KRB5_APREQBODY_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_APREQBODY
, (cmp))

	)

961 
	#sk_KRB5_APREQBODY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_APREQBODY
)

	)

962 
	#sk_KRB5_APREQBODY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_APREQBODY
, (°))

	)

963 
	#sk_KRB5_APREQBODY_num
(
°
Ë
	`SKM_sk_num
(
KRB5_APREQBODY
, (°))

	)

964 
	#sk_KRB5_APREQBODY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_APREQBODY
, (°), (i))

	)

965 
	#sk_KRB5_APREQBODY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_APREQBODY
, (°), (i), (vÆ))

	)

966 
	#sk_KRB5_APREQBODY_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_APREQBODY
, (°))

	)

967 
	#sk_KRB5_APREQBODY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_APREQBODY
, (°), (vÆ))

	)

968 
	#sk_KRB5_APREQBODY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_APREQBODY
, (°), (vÆ))

	)

969 
	#sk_KRB5_APREQBODY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_APREQBODY
, (°), (vÆ))

	)

970 
	#sk_KRB5_APREQBODY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_APREQBODY
, (°), (vÆ))

	)

971 
	#sk_KRB5_APREQBODY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_APREQBODY
, (°), (i))

	)

972 
	#sk_KRB5_APREQBODY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_APREQBODY
, (°), (±r))

	)

973 
	#sk_KRB5_APREQBODY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_APREQBODY
, (°), (vÆ), (i))

	)

974 
	#sk_KRB5_APREQBODY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_APREQBODY
, (°), (cmp))

	)

975 
	#sk_KRB5_APREQBODY_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_APREQBODY
, st)

	)

976 
	#sk_KRB5_APREQBODY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_APREQBODY
, (°), (‰ì_func))

	)

977 
	#sk_KRB5_APREQBODY_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_APREQBODY
, (°))

	)

978 
	#sk_KRB5_APREQBODY_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_APREQBODY
, (°))

	)

979 
	#sk_KRB5_APREQBODY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_APREQBODY
, (°))

	)

980 
	#sk_KRB5_APREQBODY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_APREQBODY
, (°))

	)

982 
	#sk_KRB5_AUTHDATA_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_AUTHDATA
, (cmp))

	)

983 
	#sk_KRB5_AUTHDATA_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_AUTHDATA
)

	)

984 
	#sk_KRB5_AUTHDATA_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_AUTHDATA
, (°))

	)

985 
	#sk_KRB5_AUTHDATA_num
(
°
Ë
	`SKM_sk_num
(
KRB5_AUTHDATA
, (°))

	)

986 
	#sk_KRB5_AUTHDATA_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_AUTHDATA
, (°), (i))

	)

987 
	#sk_KRB5_AUTHDATA_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_AUTHDATA
, (°), (i), (vÆ))

	)

988 
	#sk_KRB5_AUTHDATA_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_AUTHDATA
, (°))

	)

989 
	#sk_KRB5_AUTHDATA_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_AUTHDATA
, (°), (vÆ))

	)

990 
	#sk_KRB5_AUTHDATA_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_AUTHDATA
, (°), (vÆ))

	)

991 
	#sk_KRB5_AUTHDATA_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_AUTHDATA
, (°), (vÆ))

	)

992 
	#sk_KRB5_AUTHDATA_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_AUTHDATA
, (°), (vÆ))

	)

993 
	#sk_KRB5_AUTHDATA_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_AUTHDATA
, (°), (i))

	)

994 
	#sk_KRB5_AUTHDATA_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_AUTHDATA
, (°), (±r))

	)

995 
	#sk_KRB5_AUTHDATA_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_AUTHDATA
, (°), (vÆ), (i))

	)

996 
	#sk_KRB5_AUTHDATA_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_AUTHDATA
, (°), (cmp))

	)

997 
	#sk_KRB5_AUTHDATA_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_AUTHDATA
, st)

	)

998 
	#sk_KRB5_AUTHDATA_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_AUTHDATA
, (°), (‰ì_func))

	)

999 
	#sk_KRB5_AUTHDATA_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_AUTHDATA
, (°))

	)

1000 
	#sk_KRB5_AUTHDATA_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_AUTHDATA
, (°))

	)

1001 
	#sk_KRB5_AUTHDATA_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_AUTHDATA
, (°))

	)

1002 
	#sk_KRB5_AUTHDATA_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_AUTHDATA
, (°))

	)

1004 
	#sk_KRB5_AUTHENTBODY_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_AUTHENTBODY
, (cmp))

	)

1005 
	#sk_KRB5_AUTHENTBODY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_AUTHENTBODY
)

	)

1006 
	#sk_KRB5_AUTHENTBODY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_AUTHENTBODY
, (°))

	)

1007 
	#sk_KRB5_AUTHENTBODY_num
(
°
Ë
	`SKM_sk_num
(
KRB5_AUTHENTBODY
, (°))

	)

1008 
	#sk_KRB5_AUTHENTBODY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_AUTHENTBODY
, (°), (i))

	)

1009 
	#sk_KRB5_AUTHENTBODY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_AUTHENTBODY
, (°), (i), (vÆ))

	)

1010 
	#sk_KRB5_AUTHENTBODY_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_AUTHENTBODY
, (°))

	)

1011 
	#sk_KRB5_AUTHENTBODY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_AUTHENTBODY
, (°), (vÆ))

	)

1012 
	#sk_KRB5_AUTHENTBODY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_AUTHENTBODY
, (°), (vÆ))

	)

1013 
	#sk_KRB5_AUTHENTBODY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_AUTHENTBODY
, (°), (vÆ))

	)

1014 
	#sk_KRB5_AUTHENTBODY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_AUTHENTBODY
, (°), (vÆ))

	)

1015 
	#sk_KRB5_AUTHENTBODY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_AUTHENTBODY
, (°), (i))

	)

1016 
	#sk_KRB5_AUTHENTBODY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_AUTHENTBODY
, (°), (±r))

	)

1017 
	#sk_KRB5_AUTHENTBODY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_AUTHENTBODY
, (°), (vÆ), (i))

	)

1018 
	#sk_KRB5_AUTHENTBODY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_AUTHENTBODY
, (°), (cmp))

	)

1019 
	#sk_KRB5_AUTHENTBODY_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_AUTHENTBODY
, st)

	)

1020 
	#sk_KRB5_AUTHENTBODY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_AUTHENTBODY
, (°), (‰ì_func))

	)

1021 
	#sk_KRB5_AUTHENTBODY_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_AUTHENTBODY
, (°))

	)

1022 
	#sk_KRB5_AUTHENTBODY_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_AUTHENTBODY
, (°))

	)

1023 
	#sk_KRB5_AUTHENTBODY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_AUTHENTBODY
, (°))

	)

1024 
	#sk_KRB5_AUTHENTBODY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_AUTHENTBODY
, (°))

	)

1026 
	#sk_KRB5_CHECKSUM_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_CHECKSUM
, (cmp))

	)

1027 
	#sk_KRB5_CHECKSUM_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_CHECKSUM
)

	)

1028 
	#sk_KRB5_CHECKSUM_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_CHECKSUM
, (°))

	)

1029 
	#sk_KRB5_CHECKSUM_num
(
°
Ë
	`SKM_sk_num
(
KRB5_CHECKSUM
, (°))

	)

1030 
	#sk_KRB5_CHECKSUM_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_CHECKSUM
, (°), (i))

	)

1031 
	#sk_KRB5_CHECKSUM_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_CHECKSUM
, (°), (i), (vÆ))

	)

1032 
	#sk_KRB5_CHECKSUM_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_CHECKSUM
, (°))

	)

1033 
	#sk_KRB5_CHECKSUM_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_CHECKSUM
, (°), (vÆ))

	)

1034 
	#sk_KRB5_CHECKSUM_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_CHECKSUM
, (°), (vÆ))

	)

1035 
	#sk_KRB5_CHECKSUM_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_CHECKSUM
, (°), (vÆ))

	)

1036 
	#sk_KRB5_CHECKSUM_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_CHECKSUM
, (°), (vÆ))

	)

1037 
	#sk_KRB5_CHECKSUM_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_CHECKSUM
, (°), (i))

	)

1038 
	#sk_KRB5_CHECKSUM_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_CHECKSUM
, (°), (±r))

	)

1039 
	#sk_KRB5_CHECKSUM_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_CHECKSUM
, (°), (vÆ), (i))

	)

1040 
	#sk_KRB5_CHECKSUM_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_CHECKSUM
, (°), (cmp))

	)

1041 
	#sk_KRB5_CHECKSUM_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_CHECKSUM
, st)

	)

1042 
	#sk_KRB5_CHECKSUM_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_CHECKSUM
, (°), (‰ì_func))

	)

1043 
	#sk_KRB5_CHECKSUM_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_CHECKSUM
, (°))

	)

1044 
	#sk_KRB5_CHECKSUM_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_CHECKSUM
, (°))

	)

1045 
	#sk_KRB5_CHECKSUM_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_CHECKSUM
, (°))

	)

1046 
	#sk_KRB5_CHECKSUM_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_CHECKSUM
, (°))

	)

1048 
	#sk_KRB5_ENCDATA_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_ENCDATA
, (cmp))

	)

1049 
	#sk_KRB5_ENCDATA_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_ENCDATA
)

	)

1050 
	#sk_KRB5_ENCDATA_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_ENCDATA
, (°))

	)

1051 
	#sk_KRB5_ENCDATA_num
(
°
Ë
	`SKM_sk_num
(
KRB5_ENCDATA
, (°))

	)

1052 
	#sk_KRB5_ENCDATA_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_ENCDATA
, (°), (i))

	)

1053 
	#sk_KRB5_ENCDATA_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_ENCDATA
, (°), (i), (vÆ))

	)

1054 
	#sk_KRB5_ENCDATA_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_ENCDATA
, (°))

	)

1055 
	#sk_KRB5_ENCDATA_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_ENCDATA
, (°), (vÆ))

	)

1056 
	#sk_KRB5_ENCDATA_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_ENCDATA
, (°), (vÆ))

	)

1057 
	#sk_KRB5_ENCDATA_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_ENCDATA
, (°), (vÆ))

	)

1058 
	#sk_KRB5_ENCDATA_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_ENCDATA
, (°), (vÆ))

	)

1059 
	#sk_KRB5_ENCDATA_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_ENCDATA
, (°), (i))

	)

1060 
	#sk_KRB5_ENCDATA_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_ENCDATA
, (°), (±r))

	)

1061 
	#sk_KRB5_ENCDATA_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_ENCDATA
, (°), (vÆ), (i))

	)

1062 
	#sk_KRB5_ENCDATA_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_ENCDATA
, (°), (cmp))

	)

1063 
	#sk_KRB5_ENCDATA_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_ENCDATA
, st)

	)

1064 
	#sk_KRB5_ENCDATA_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_ENCDATA
, (°), (‰ì_func))

	)

1065 
	#sk_KRB5_ENCDATA_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_ENCDATA
, (°))

	)

1066 
	#sk_KRB5_ENCDATA_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_ENCDATA
, (°))

	)

1067 
	#sk_KRB5_ENCDATA_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_ENCDATA
, (°))

	)

1068 
	#sk_KRB5_ENCDATA_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_ENCDATA
, (°))

	)

1070 
	#sk_KRB5_ENCKEY_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_ENCKEY
, (cmp))

	)

1071 
	#sk_KRB5_ENCKEY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_ENCKEY
)

	)

1072 
	#sk_KRB5_ENCKEY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_ENCKEY
, (°))

	)

1073 
	#sk_KRB5_ENCKEY_num
(
°
Ë
	`SKM_sk_num
(
KRB5_ENCKEY
, (°))

	)

1074 
	#sk_KRB5_ENCKEY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_ENCKEY
, (°), (i))

	)

1075 
	#sk_KRB5_ENCKEY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_ENCKEY
, (°), (i), (vÆ))

	)

1076 
	#sk_KRB5_ENCKEY_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_ENCKEY
, (°))

	)

1077 
	#sk_KRB5_ENCKEY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_ENCKEY
, (°), (vÆ))

	)

1078 
	#sk_KRB5_ENCKEY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_ENCKEY
, (°), (vÆ))

	)

1079 
	#sk_KRB5_ENCKEY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_ENCKEY
, (°), (vÆ))

	)

1080 
	#sk_KRB5_ENCKEY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_ENCKEY
, (°), (vÆ))

	)

1081 
	#sk_KRB5_ENCKEY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_ENCKEY
, (°), (i))

	)

1082 
	#sk_KRB5_ENCKEY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_ENCKEY
, (°), (±r))

	)

1083 
	#sk_KRB5_ENCKEY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_ENCKEY
, (°), (vÆ), (i))

	)

1084 
	#sk_KRB5_ENCKEY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_ENCKEY
, (°), (cmp))

	)

1085 
	#sk_KRB5_ENCKEY_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_ENCKEY
, st)

	)

1086 
	#sk_KRB5_ENCKEY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_ENCKEY
, (°), (‰ì_func))

	)

1087 
	#sk_KRB5_ENCKEY_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_ENCKEY
, (°))

	)

1088 
	#sk_KRB5_ENCKEY_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_ENCKEY
, (°))

	)

1089 
	#sk_KRB5_ENCKEY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_ENCKEY
, (°))

	)

1090 
	#sk_KRB5_ENCKEY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_ENCKEY
, (°))

	)

1092 
	#sk_KRB5_PRINCNAME_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_PRINCNAME
, (cmp))

	)

1093 
	#sk_KRB5_PRINCNAME_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_PRINCNAME
)

	)

1094 
	#sk_KRB5_PRINCNAME_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_PRINCNAME
, (°))

	)

1095 
	#sk_KRB5_PRINCNAME_num
(
°
Ë
	`SKM_sk_num
(
KRB5_PRINCNAME
, (°))

	)

1096 
	#sk_KRB5_PRINCNAME_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_PRINCNAME
, (°), (i))

	)

1097 
	#sk_KRB5_PRINCNAME_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_PRINCNAME
, (°), (i), (vÆ))

	)

1098 
	#sk_KRB5_PRINCNAME_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_PRINCNAME
, (°))

	)

1099 
	#sk_KRB5_PRINCNAME_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_PRINCNAME
, (°), (vÆ))

	)

1100 
	#sk_KRB5_PRINCNAME_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_PRINCNAME
, (°), (vÆ))

	)

1101 
	#sk_KRB5_PRINCNAME_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_PRINCNAME
, (°), (vÆ))

	)

1102 
	#sk_KRB5_PRINCNAME_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_PRINCNAME
, (°), (vÆ))

	)

1103 
	#sk_KRB5_PRINCNAME_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_PRINCNAME
, (°), (i))

	)

1104 
	#sk_KRB5_PRINCNAME_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_PRINCNAME
, (°), (±r))

	)

1105 
	#sk_KRB5_PRINCNAME_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_PRINCNAME
, (°), (vÆ), (i))

	)

1106 
	#sk_KRB5_PRINCNAME_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_PRINCNAME
, (°), (cmp))

	)

1107 
	#sk_KRB5_PRINCNAME_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_PRINCNAME
, st)

	)

1108 
	#sk_KRB5_PRINCNAME_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_PRINCNAME
, (°), (‰ì_func))

	)

1109 
	#sk_KRB5_PRINCNAME_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_PRINCNAME
, (°))

	)

1110 
	#sk_KRB5_PRINCNAME_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_PRINCNAME
, (°))

	)

1111 
	#sk_KRB5_PRINCNAME_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_PRINCNAME
, (°))

	)

1112 
	#sk_KRB5_PRINCNAME_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_PRINCNAME
, (°))

	)

1114 
	#sk_KRB5_TKTBODY_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_TKTBODY
, (cmp))

	)

1115 
	#sk_KRB5_TKTBODY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_TKTBODY
)

	)

1116 
	#sk_KRB5_TKTBODY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_TKTBODY
, (°))

	)

1117 
	#sk_KRB5_TKTBODY_num
(
°
Ë
	`SKM_sk_num
(
KRB5_TKTBODY
, (°))

	)

1118 
	#sk_KRB5_TKTBODY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_TKTBODY
, (°), (i))

	)

1119 
	#sk_KRB5_TKTBODY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_TKTBODY
, (°), (i), (vÆ))

	)

1120 
	#sk_KRB5_TKTBODY_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_TKTBODY
, (°))

	)

1121 
	#sk_KRB5_TKTBODY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_TKTBODY
, (°), (vÆ))

	)

1122 
	#sk_KRB5_TKTBODY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_TKTBODY
, (°), (vÆ))

	)

1123 
	#sk_KRB5_TKTBODY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_TKTBODY
, (°), (vÆ))

	)

1124 
	#sk_KRB5_TKTBODY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_TKTBODY
, (°), (vÆ))

	)

1125 
	#sk_KRB5_TKTBODY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_TKTBODY
, (°), (i))

	)

1126 
	#sk_KRB5_TKTBODY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_TKTBODY
, (°), (±r))

	)

1127 
	#sk_KRB5_TKTBODY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_TKTBODY
, (°), (vÆ), (i))

	)

1128 
	#sk_KRB5_TKTBODY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_TKTBODY
, (°), (cmp))

	)

1129 
	#sk_KRB5_TKTBODY_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_TKTBODY
, st)

	)

1130 
	#sk_KRB5_TKTBODY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_TKTBODY
, (°), (‰ì_func))

	)

1131 
	#sk_KRB5_TKTBODY_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_TKTBODY
, (°))

	)

1132 
	#sk_KRB5_TKTBODY_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_TKTBODY
, (°))

	)

1133 
	#sk_KRB5_TKTBODY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_TKTBODY
, (°))

	)

1134 
	#sk_KRB5_TKTBODY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_TKTBODY
, (°))

	)

1136 
	#sk_MEM_OBJECT_DATA_√w
(
cmp
Ë
	`SKM_sk_√w
(
MEM_OBJECT_DATA
, (cmp))

	)

1137 
	#sk_MEM_OBJECT_DATA_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
MEM_OBJECT_DATA
)

	)

1138 
	#sk_MEM_OBJECT_DATA_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
MEM_OBJECT_DATA
, (°))

	)

1139 
	#sk_MEM_OBJECT_DATA_num
(
°
Ë
	`SKM_sk_num
(
MEM_OBJECT_DATA
, (°))

	)

1140 
	#sk_MEM_OBJECT_DATA_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
MEM_OBJECT_DATA
, (°), (i))

	)

1141 
	#sk_MEM_OBJECT_DATA_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
MEM_OBJECT_DATA
, (°), (i), (vÆ))

	)

1142 
	#sk_MEM_OBJECT_DATA_zîo
(
°
Ë
	`SKM_sk_zîo
(
MEM_OBJECT_DATA
, (°))

	)

1143 
	#sk_MEM_OBJECT_DATA_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
MEM_OBJECT_DATA
, (°), (vÆ))

	)

1144 
	#sk_MEM_OBJECT_DATA_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
MEM_OBJECT_DATA
, (°), (vÆ))

	)

1145 
	#sk_MEM_OBJECT_DATA_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
MEM_OBJECT_DATA
, (°), (vÆ))

	)

1146 
	#sk_MEM_OBJECT_DATA_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
MEM_OBJECT_DATA
, (°), (vÆ))

	)

1147 
	#sk_MEM_OBJECT_DATA_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
MEM_OBJECT_DATA
, (°), (i))

	)

1148 
	#sk_MEM_OBJECT_DATA_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
MEM_OBJECT_DATA
, (°), (±r))

	)

1149 
	#sk_MEM_OBJECT_DATA_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
MEM_OBJECT_DATA
, (°), (vÆ), (i))

	)

1150 
	#sk_MEM_OBJECT_DATA_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
MEM_OBJECT_DATA
, (°), (cmp))

	)

1151 
	#sk_MEM_OBJECT_DATA_dup
(
°
Ë
	`SKM_sk_dup
(
MEM_OBJECT_DATA
, st)

	)

1152 
	#sk_MEM_OBJECT_DATA_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
MEM_OBJECT_DATA
, (°), (‰ì_func))

	)

1153 
	#sk_MEM_OBJECT_DATA_shi·
(
°
Ë
	`SKM_sk_shi·
(
MEM_OBJECT_DATA
, (°))

	)

1154 
	#sk_MEM_OBJECT_DATA_p›
(
°
Ë
	`SKM_sk_p›
(
MEM_OBJECT_DATA
, (°))

	)

1155 
	#sk_MEM_OBJECT_DATA_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
MEM_OBJECT_DATA
, (°))

	)

1156 
	#sk_MEM_OBJECT_DATA_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
MEM_OBJECT_DATA
, (°))

	)

1158 
	#sk_MIME_HEADER_√w
(
cmp
Ë
	`SKM_sk_√w
(
MIME_HEADER
, (cmp))

	)

1159 
	#sk_MIME_HEADER_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
MIME_HEADER
)

	)

1160 
	#sk_MIME_HEADER_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
MIME_HEADER
, (°))

	)

1161 
	#sk_MIME_HEADER_num
(
°
Ë
	`SKM_sk_num
(
MIME_HEADER
, (°))

	)

1162 
	#sk_MIME_HEADER_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
MIME_HEADER
, (°), (i))

	)

1163 
	#sk_MIME_HEADER_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
MIME_HEADER
, (°), (i), (vÆ))

	)

1164 
	#sk_MIME_HEADER_zîo
(
°
Ë
	`SKM_sk_zîo
(
MIME_HEADER
, (°))

	)

1165 
	#sk_MIME_HEADER_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
MIME_HEADER
, (°), (vÆ))

	)

1166 
	#sk_MIME_HEADER_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
MIME_HEADER
, (°), (vÆ))

	)

1167 
	#sk_MIME_HEADER_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
MIME_HEADER
, (°), (vÆ))

	)

1168 
	#sk_MIME_HEADER_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
MIME_HEADER
, (°), (vÆ))

	)

1169 
	#sk_MIME_HEADER_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
MIME_HEADER
, (°), (i))

	)

1170 
	#sk_MIME_HEADER_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
MIME_HEADER
, (°), (±r))

	)

1171 
	#sk_MIME_HEADER_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
MIME_HEADER
, (°), (vÆ), (i))

	)

1172 
	#sk_MIME_HEADER_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
MIME_HEADER
, (°), (cmp))

	)

1173 
	#sk_MIME_HEADER_dup
(
°
Ë
	`SKM_sk_dup
(
MIME_HEADER
, st)

	)

1174 
	#sk_MIME_HEADER_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
MIME_HEADER
, (°), (‰ì_func))

	)

1175 
	#sk_MIME_HEADER_shi·
(
°
Ë
	`SKM_sk_shi·
(
MIME_HEADER
, (°))

	)

1176 
	#sk_MIME_HEADER_p›
(
°
Ë
	`SKM_sk_p›
(
MIME_HEADER
, (°))

	)

1177 
	#sk_MIME_HEADER_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
MIME_HEADER
, (°))

	)

1178 
	#sk_MIME_HEADER_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
MIME_HEADER
, (°))

	)

1180 
	#sk_MIME_PARAM_√w
(
cmp
Ë
	`SKM_sk_√w
(
MIME_PARAM
, (cmp))

	)

1181 
	#sk_MIME_PARAM_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
MIME_PARAM
)

	)

1182 
	#sk_MIME_PARAM_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
MIME_PARAM
, (°))

	)

1183 
	#sk_MIME_PARAM_num
(
°
Ë
	`SKM_sk_num
(
MIME_PARAM
, (°))

	)

1184 
	#sk_MIME_PARAM_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
MIME_PARAM
, (°), (i))

	)

1185 
	#sk_MIME_PARAM_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
MIME_PARAM
, (°), (i), (vÆ))

	)

1186 
	#sk_MIME_PARAM_zîo
(
°
Ë
	`SKM_sk_zîo
(
MIME_PARAM
, (°))

	)

1187 
	#sk_MIME_PARAM_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
MIME_PARAM
, (°), (vÆ))

	)

1188 
	#sk_MIME_PARAM_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
MIME_PARAM
, (°), (vÆ))

	)

1189 
	#sk_MIME_PARAM_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
MIME_PARAM
, (°), (vÆ))

	)

1190 
	#sk_MIME_PARAM_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
MIME_PARAM
, (°), (vÆ))

	)

1191 
	#sk_MIME_PARAM_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
MIME_PARAM
, (°), (i))

	)

1192 
	#sk_MIME_PARAM_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
MIME_PARAM
, (°), (±r))

	)

1193 
	#sk_MIME_PARAM_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
MIME_PARAM
, (°), (vÆ), (i))

	)

1194 
	#sk_MIME_PARAM_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
MIME_PARAM
, (°), (cmp))

	)

1195 
	#sk_MIME_PARAM_dup
(
°
Ë
	`SKM_sk_dup
(
MIME_PARAM
, st)

	)

1196 
	#sk_MIME_PARAM_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
MIME_PARAM
, (°), (‰ì_func))

	)

1197 
	#sk_MIME_PARAM_shi·
(
°
Ë
	`SKM_sk_shi·
(
MIME_PARAM
, (°))

	)

1198 
	#sk_MIME_PARAM_p›
(
°
Ë
	`SKM_sk_p›
(
MIME_PARAM
, (°))

	)

1199 
	#sk_MIME_PARAM_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
MIME_PARAM
, (°))

	)

1200 
	#sk_MIME_PARAM_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
MIME_PARAM
, (°))

	)

1202 
	#sk_NAME_FUNCS_√w
(
cmp
Ë
	`SKM_sk_√w
(
NAME_FUNCS
, (cmp))

	)

1203 
	#sk_NAME_FUNCS_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
NAME_FUNCS
)

	)

1204 
	#sk_NAME_FUNCS_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
NAME_FUNCS
, (°))

	)

1205 
	#sk_NAME_FUNCS_num
(
°
Ë
	`SKM_sk_num
(
NAME_FUNCS
, (°))

	)

1206 
	#sk_NAME_FUNCS_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
NAME_FUNCS
, (°), (i))

	)

1207 
	#sk_NAME_FUNCS_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
NAME_FUNCS
, (°), (i), (vÆ))

	)

1208 
	#sk_NAME_FUNCS_zîo
(
°
Ë
	`SKM_sk_zîo
(
NAME_FUNCS
, (°))

	)

1209 
	#sk_NAME_FUNCS_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
NAME_FUNCS
, (°), (vÆ))

	)

1210 
	#sk_NAME_FUNCS_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
NAME_FUNCS
, (°), (vÆ))

	)

1211 
	#sk_NAME_FUNCS_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
NAME_FUNCS
, (°), (vÆ))

	)

1212 
	#sk_NAME_FUNCS_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
NAME_FUNCS
, (°), (vÆ))

	)

1213 
	#sk_NAME_FUNCS_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
NAME_FUNCS
, (°), (i))

	)

1214 
	#sk_NAME_FUNCS_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
NAME_FUNCS
, (°), (±r))

	)

1215 
	#sk_NAME_FUNCS_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
NAME_FUNCS
, (°), (vÆ), (i))

	)

1216 
	#sk_NAME_FUNCS_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
NAME_FUNCS
, (°), (cmp))

	)

1217 
	#sk_NAME_FUNCS_dup
(
°
Ë
	`SKM_sk_dup
(
NAME_FUNCS
, st)

	)

1218 
	#sk_NAME_FUNCS_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
NAME_FUNCS
, (°), (‰ì_func))

	)

1219 
	#sk_NAME_FUNCS_shi·
(
°
Ë
	`SKM_sk_shi·
(
NAME_FUNCS
, (°))

	)

1220 
	#sk_NAME_FUNCS_p›
(
°
Ë
	`SKM_sk_p›
(
NAME_FUNCS
, (°))

	)

1221 
	#sk_NAME_FUNCS_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
NAME_FUNCS
, (°))

	)

1222 
	#sk_NAME_FUNCS_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
NAME_FUNCS
, (°))

	)

1224 
	#sk_OCSP_CERTID_√w
(
cmp
Ë
	`SKM_sk_√w
(
OCSP_CERTID
, (cmp))

	)

1225 
	#sk_OCSP_CERTID_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
OCSP_CERTID
)

	)

1226 
	#sk_OCSP_CERTID_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OCSP_CERTID
, (°))

	)

1227 
	#sk_OCSP_CERTID_num
(
°
Ë
	`SKM_sk_num
(
OCSP_CERTID
, (°))

	)

1228 
	#sk_OCSP_CERTID_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
OCSP_CERTID
, (°), (i))

	)

1229 
	#sk_OCSP_CERTID_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
OCSP_CERTID
, (°), (i), (vÆ))

	)

1230 
	#sk_OCSP_CERTID_zîo
(
°
Ë
	`SKM_sk_zîo
(
OCSP_CERTID
, (°))

	)

1231 
	#sk_OCSP_CERTID_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
OCSP_CERTID
, (°), (vÆ))

	)

1232 
	#sk_OCSP_CERTID_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
OCSP_CERTID
, (°), (vÆ))

	)

1233 
	#sk_OCSP_CERTID_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
OCSP_CERTID
, (°), (vÆ))

	)

1234 
	#sk_OCSP_CERTID_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
OCSP_CERTID
, (°), (vÆ))

	)

1235 
	#sk_OCSP_CERTID_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OCSP_CERTID
, (°), (i))

	)

1236 
	#sk_OCSP_CERTID_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
OCSP_CERTID
, (°), (±r))

	)

1237 
	#sk_OCSP_CERTID_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
OCSP_CERTID
, (°), (vÆ), (i))

	)

1238 
	#sk_OCSP_CERTID_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
OCSP_CERTID
, (°), (cmp))

	)

1239 
	#sk_OCSP_CERTID_dup
(
°
Ë
	`SKM_sk_dup
(
OCSP_CERTID
, st)

	)

1240 
	#sk_OCSP_CERTID_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
OCSP_CERTID
, (°), (‰ì_func))

	)

1241 
	#sk_OCSP_CERTID_shi·
(
°
Ë
	`SKM_sk_shi·
(
OCSP_CERTID
, (°))

	)

1242 
	#sk_OCSP_CERTID_p›
(
°
Ë
	`SKM_sk_p›
(
OCSP_CERTID
, (°))

	)

1243 
	#sk_OCSP_CERTID_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OCSP_CERTID
, (°))

	)

1244 
	#sk_OCSP_CERTID_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OCSP_CERTID
, (°))

	)

1246 
	#sk_OCSP_ONEREQ_√w
(
cmp
Ë
	`SKM_sk_√w
(
OCSP_ONEREQ
, (cmp))

	)

1247 
	#sk_OCSP_ONEREQ_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
OCSP_ONEREQ
)

	)

1248 
	#sk_OCSP_ONEREQ_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OCSP_ONEREQ
, (°))

	)

1249 
	#sk_OCSP_ONEREQ_num
(
°
Ë
	`SKM_sk_num
(
OCSP_ONEREQ
, (°))

	)

1250 
	#sk_OCSP_ONEREQ_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
OCSP_ONEREQ
, (°), (i))

	)

1251 
	#sk_OCSP_ONEREQ_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
OCSP_ONEREQ
, (°), (i), (vÆ))

	)

1252 
	#sk_OCSP_ONEREQ_zîo
(
°
Ë
	`SKM_sk_zîo
(
OCSP_ONEREQ
, (°))

	)

1253 
	#sk_OCSP_ONEREQ_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
OCSP_ONEREQ
, (°), (vÆ))

	)

1254 
	#sk_OCSP_ONEREQ_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
OCSP_ONEREQ
, (°), (vÆ))

	)

1255 
	#sk_OCSP_ONEREQ_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
OCSP_ONEREQ
, (°), (vÆ))

	)

1256 
	#sk_OCSP_ONEREQ_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
OCSP_ONEREQ
, (°), (vÆ))

	)

1257 
	#sk_OCSP_ONEREQ_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OCSP_ONEREQ
, (°), (i))

	)

1258 
	#sk_OCSP_ONEREQ_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
OCSP_ONEREQ
, (°), (±r))

	)

1259 
	#sk_OCSP_ONEREQ_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
OCSP_ONEREQ
, (°), (vÆ), (i))

	)

1260 
	#sk_OCSP_ONEREQ_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
OCSP_ONEREQ
, (°), (cmp))

	)

1261 
	#sk_OCSP_ONEREQ_dup
(
°
Ë
	`SKM_sk_dup
(
OCSP_ONEREQ
, st)

	)

1262 
	#sk_OCSP_ONEREQ_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
OCSP_ONEREQ
, (°), (‰ì_func))

	)

1263 
	#sk_OCSP_ONEREQ_shi·
(
°
Ë
	`SKM_sk_shi·
(
OCSP_ONEREQ
, (°))

	)

1264 
	#sk_OCSP_ONEREQ_p›
(
°
Ë
	`SKM_sk_p›
(
OCSP_ONEREQ
, (°))

	)

1265 
	#sk_OCSP_ONEREQ_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OCSP_ONEREQ
, (°))

	)

1266 
	#sk_OCSP_ONEREQ_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OCSP_ONEREQ
, (°))

	)

1268 
	#sk_OCSP_RESPID_√w
(
cmp
Ë
	`SKM_sk_√w
(
OCSP_RESPID
, (cmp))

	)

1269 
	#sk_OCSP_RESPID_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
OCSP_RESPID
)

	)

1270 
	#sk_OCSP_RESPID_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OCSP_RESPID
, (°))

	)

1271 
	#sk_OCSP_RESPID_num
(
°
Ë
	`SKM_sk_num
(
OCSP_RESPID
, (°))

	)

1272 
	#sk_OCSP_RESPID_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
OCSP_RESPID
, (°), (i))

	)

1273 
	#sk_OCSP_RESPID_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
OCSP_RESPID
, (°), (i), (vÆ))

	)

1274 
	#sk_OCSP_RESPID_zîo
(
°
Ë
	`SKM_sk_zîo
(
OCSP_RESPID
, (°))

	)

1275 
	#sk_OCSP_RESPID_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
OCSP_RESPID
, (°), (vÆ))

	)

1276 
	#sk_OCSP_RESPID_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
OCSP_RESPID
, (°), (vÆ))

	)

1277 
	#sk_OCSP_RESPID_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
OCSP_RESPID
, (°), (vÆ))

	)

1278 
	#sk_OCSP_RESPID_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
OCSP_RESPID
, (°), (vÆ))

	)

1279 
	#sk_OCSP_RESPID_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OCSP_RESPID
, (°), (i))

	)

1280 
	#sk_OCSP_RESPID_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
OCSP_RESPID
, (°), (±r))

	)

1281 
	#sk_OCSP_RESPID_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
OCSP_RESPID
, (°), (vÆ), (i))

	)

1282 
	#sk_OCSP_RESPID_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
OCSP_RESPID
, (°), (cmp))

	)

1283 
	#sk_OCSP_RESPID_dup
(
°
Ë
	`SKM_sk_dup
(
OCSP_RESPID
, st)

	)

1284 
	#sk_OCSP_RESPID_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
OCSP_RESPID
, (°), (‰ì_func))

	)

1285 
	#sk_OCSP_RESPID_shi·
(
°
Ë
	`SKM_sk_shi·
(
OCSP_RESPID
, (°))

	)

1286 
	#sk_OCSP_RESPID_p›
(
°
Ë
	`SKM_sk_p›
(
OCSP_RESPID
, (°))

	)

1287 
	#sk_OCSP_RESPID_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OCSP_RESPID
, (°))

	)

1288 
	#sk_OCSP_RESPID_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OCSP_RESPID
, (°))

	)

1290 
	#sk_OCSP_SINGLERESP_√w
(
cmp
Ë
	`SKM_sk_√w
(
OCSP_SINGLERESP
, (cmp))

	)

1291 
	#sk_OCSP_SINGLERESP_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
OCSP_SINGLERESP
)

	)

1292 
	#sk_OCSP_SINGLERESP_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OCSP_SINGLERESP
, (°))

	)

1293 
	#sk_OCSP_SINGLERESP_num
(
°
Ë
	`SKM_sk_num
(
OCSP_SINGLERESP
, (°))

	)

1294 
	#sk_OCSP_SINGLERESP_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
OCSP_SINGLERESP
, (°), (i))

	)

1295 
	#sk_OCSP_SINGLERESP_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
OCSP_SINGLERESP
, (°), (i), (vÆ))

	)

1296 
	#sk_OCSP_SINGLERESP_zîo
(
°
Ë
	`SKM_sk_zîo
(
OCSP_SINGLERESP
, (°))

	)

1297 
	#sk_OCSP_SINGLERESP_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
OCSP_SINGLERESP
, (°), (vÆ))

	)

1298 
	#sk_OCSP_SINGLERESP_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
OCSP_SINGLERESP
, (°), (vÆ))

	)

1299 
	#sk_OCSP_SINGLERESP_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
OCSP_SINGLERESP
, (°), (vÆ))

	)

1300 
	#sk_OCSP_SINGLERESP_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
OCSP_SINGLERESP
, (°), (vÆ))

	)

1301 
	#sk_OCSP_SINGLERESP_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OCSP_SINGLERESP
, (°), (i))

	)

1302 
	#sk_OCSP_SINGLERESP_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
OCSP_SINGLERESP
, (°), (±r))

	)

1303 
	#sk_OCSP_SINGLERESP_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
OCSP_SINGLERESP
, (°), (vÆ), (i))

	)

1304 
	#sk_OCSP_SINGLERESP_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
OCSP_SINGLERESP
, (°), (cmp))

	)

1305 
	#sk_OCSP_SINGLERESP_dup
(
°
Ë
	`SKM_sk_dup
(
OCSP_SINGLERESP
, st)

	)

1306 
	#sk_OCSP_SINGLERESP_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
OCSP_SINGLERESP
, (°), (‰ì_func))

	)

1307 
	#sk_OCSP_SINGLERESP_shi·
(
°
Ë
	`SKM_sk_shi·
(
OCSP_SINGLERESP
, (°))

	)

1308 
	#sk_OCSP_SINGLERESP_p›
(
°
Ë
	`SKM_sk_p›
(
OCSP_SINGLERESP
, (°))

	)

1309 
	#sk_OCSP_SINGLERESP_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OCSP_SINGLERESP
, (°))

	)

1310 
	#sk_OCSP_SINGLERESP_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OCSP_SINGLERESP
, (°))

	)

1312 
	#sk_PKCS12_SAFEBAG_√w
(
cmp
Ë
	`SKM_sk_√w
(
PKCS12_SAFEBAG
, (cmp))

	)

1313 
	#sk_PKCS12_SAFEBAG_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
PKCS12_SAFEBAG
)

	)

1314 
	#sk_PKCS12_SAFEBAG_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
PKCS12_SAFEBAG
, (°))

	)

1315 
	#sk_PKCS12_SAFEBAG_num
(
°
Ë
	`SKM_sk_num
(
PKCS12_SAFEBAG
, (°))

	)

1316 
	#sk_PKCS12_SAFEBAG_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
PKCS12_SAFEBAG
, (°), (i))

	)

1317 
	#sk_PKCS12_SAFEBAG_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
PKCS12_SAFEBAG
, (°), (i), (vÆ))

	)

1318 
	#sk_PKCS12_SAFEBAG_zîo
(
°
Ë
	`SKM_sk_zîo
(
PKCS12_SAFEBAG
, (°))

	)

1319 
	#sk_PKCS12_SAFEBAG_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
PKCS12_SAFEBAG
, (°), (vÆ))

	)

1320 
	#sk_PKCS12_SAFEBAG_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
PKCS12_SAFEBAG
, (°), (vÆ))

	)

1321 
	#sk_PKCS12_SAFEBAG_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
PKCS12_SAFEBAG
, (°), (vÆ))

	)

1322 
	#sk_PKCS12_SAFEBAG_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
PKCS12_SAFEBAG
, (°), (vÆ))

	)

1323 
	#sk_PKCS12_SAFEBAG_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
PKCS12_SAFEBAG
, (°), (i))

	)

1324 
	#sk_PKCS12_SAFEBAG_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
PKCS12_SAFEBAG
, (°), (±r))

	)

1325 
	#sk_PKCS12_SAFEBAG_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
PKCS12_SAFEBAG
, (°), (vÆ), (i))

	)

1326 
	#sk_PKCS12_SAFEBAG_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
PKCS12_SAFEBAG
, (°), (cmp))

	)

1327 
	#sk_PKCS12_SAFEBAG_dup
(
°
Ë
	`SKM_sk_dup
(
PKCS12_SAFEBAG
, st)

	)

1328 
	#sk_PKCS12_SAFEBAG_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
PKCS12_SAFEBAG
, (°), (‰ì_func))

	)

1329 
	#sk_PKCS12_SAFEBAG_shi·
(
°
Ë
	`SKM_sk_shi·
(
PKCS12_SAFEBAG
, (°))

	)

1330 
	#sk_PKCS12_SAFEBAG_p›
(
°
Ë
	`SKM_sk_p›
(
PKCS12_SAFEBAG
, (°))

	)

1331 
	#sk_PKCS12_SAFEBAG_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
PKCS12_SAFEBAG
, (°))

	)

1332 
	#sk_PKCS12_SAFEBAG_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
PKCS12_SAFEBAG
, (°))

	)

1334 
	#sk_PKCS7_√w
(
cmp
Ë
	`SKM_sk_√w
(
PKCS7
, (cmp))

	)

1335 
	#sk_PKCS7_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
PKCS7
)

	)

1336 
	#sk_PKCS7_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
PKCS7
, (°))

	)

1337 
	#sk_PKCS7_num
(
°
Ë
	`SKM_sk_num
(
PKCS7
, (°))

	)

1338 
	#sk_PKCS7_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
PKCS7
, (°), (i))

	)

1339 
	#sk_PKCS7_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
PKCS7
, (°), (i), (vÆ))

	)

1340 
	#sk_PKCS7_zîo
(
°
Ë
	`SKM_sk_zîo
(
PKCS7
, (°))

	)

1341 
	#sk_PKCS7_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
PKCS7
, (°), (vÆ))

	)

1342 
	#sk_PKCS7_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
PKCS7
, (°), (vÆ))

	)

1343 
	#sk_PKCS7_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
PKCS7
, (°), (vÆ))

	)

1344 
	#sk_PKCS7_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
PKCS7
, (°), (vÆ))

	)

1345 
	#sk_PKCS7_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
PKCS7
, (°), (i))

	)

1346 
	#sk_PKCS7_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
PKCS7
, (°), (±r))

	)

1347 
	#sk_PKCS7_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
PKCS7
, (°), (vÆ), (i))

	)

1348 
	#sk_PKCS7_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
PKCS7
, (°), (cmp))

	)

1349 
	#sk_PKCS7_dup
(
°
Ë
	`SKM_sk_dup
(
PKCS7
, st)

	)

1350 
	#sk_PKCS7_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
PKCS7
, (°), (‰ì_func))

	)

1351 
	#sk_PKCS7_shi·
(
°
Ë
	`SKM_sk_shi·
(
PKCS7
, (°))

	)

1352 
	#sk_PKCS7_p›
(
°
Ë
	`SKM_sk_p›
(
PKCS7
, (°))

	)

1353 
	#sk_PKCS7_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
PKCS7
, (°))

	)

1354 
	#sk_PKCS7_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
PKCS7
, (°))

	)

1356 
	#sk_PKCS7_RECIP_INFO_√w
(
cmp
Ë
	`SKM_sk_√w
(
PKCS7_RECIP_INFO
, (cmp))

	)

1357 
	#sk_PKCS7_RECIP_INFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
PKCS7_RECIP_INFO
)

	)

1358 
	#sk_PKCS7_RECIP_INFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
PKCS7_RECIP_INFO
, (°))

	)

1359 
	#sk_PKCS7_RECIP_INFO_num
(
°
Ë
	`SKM_sk_num
(
PKCS7_RECIP_INFO
, (°))

	)

1360 
	#sk_PKCS7_RECIP_INFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
PKCS7_RECIP_INFO
, (°), (i))

	)

1361 
	#sk_PKCS7_RECIP_INFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
PKCS7_RECIP_INFO
, (°), (i), (vÆ))

	)

1362 
	#sk_PKCS7_RECIP_INFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
PKCS7_RECIP_INFO
, (°))

	)

1363 
	#sk_PKCS7_RECIP_INFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
PKCS7_RECIP_INFO
, (°), (vÆ))

	)

1364 
	#sk_PKCS7_RECIP_INFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
PKCS7_RECIP_INFO
, (°), (vÆ))

	)

1365 
	#sk_PKCS7_RECIP_INFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
PKCS7_RECIP_INFO
, (°), (vÆ))

	)

1366 
	#sk_PKCS7_RECIP_INFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
PKCS7_RECIP_INFO
, (°), (vÆ))

	)

1367 
	#sk_PKCS7_RECIP_INFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
PKCS7_RECIP_INFO
, (°), (i))

	)

1368 
	#sk_PKCS7_RECIP_INFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
PKCS7_RECIP_INFO
, (°), (±r))

	)

1369 
	#sk_PKCS7_RECIP_INFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
PKCS7_RECIP_INFO
, (°), (vÆ), (i))

	)

1370 
	#sk_PKCS7_RECIP_INFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
PKCS7_RECIP_INFO
, (°), (cmp))

	)

1371 
	#sk_PKCS7_RECIP_INFO_dup
(
°
Ë
	`SKM_sk_dup
(
PKCS7_RECIP_INFO
, st)

	)

1372 
	#sk_PKCS7_RECIP_INFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
PKCS7_RECIP_INFO
, (°), (‰ì_func))

	)

1373 
	#sk_PKCS7_RECIP_INFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
PKCS7_RECIP_INFO
, (°))

	)

1374 
	#sk_PKCS7_RECIP_INFO_p›
(
°
Ë
	`SKM_sk_p›
(
PKCS7_RECIP_INFO
, (°))

	)

1375 
	#sk_PKCS7_RECIP_INFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
PKCS7_RECIP_INFO
, (°))

	)

1376 
	#sk_PKCS7_RECIP_INFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
PKCS7_RECIP_INFO
, (°))

	)

1378 
	#sk_PKCS7_SIGNER_INFO_√w
(
cmp
Ë
	`SKM_sk_√w
(
PKCS7_SIGNER_INFO
, (cmp))

	)

1379 
	#sk_PKCS7_SIGNER_INFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
PKCS7_SIGNER_INFO
)

	)

1380 
	#sk_PKCS7_SIGNER_INFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
PKCS7_SIGNER_INFO
, (°))

	)

1381 
	#sk_PKCS7_SIGNER_INFO_num
(
°
Ë
	`SKM_sk_num
(
PKCS7_SIGNER_INFO
, (°))

	)

1382 
	#sk_PKCS7_SIGNER_INFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
PKCS7_SIGNER_INFO
, (°), (i))

	)

1383 
	#sk_PKCS7_SIGNER_INFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
PKCS7_SIGNER_INFO
, (°), (i), (vÆ))

	)

1384 
	#sk_PKCS7_SIGNER_INFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
PKCS7_SIGNER_INFO
, (°))

	)

1385 
	#sk_PKCS7_SIGNER_INFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
PKCS7_SIGNER_INFO
, (°), (vÆ))

	)

1386 
	#sk_PKCS7_SIGNER_INFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
PKCS7_SIGNER_INFO
, (°), (vÆ))

	)

1387 
	#sk_PKCS7_SIGNER_INFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
PKCS7_SIGNER_INFO
, (°), (vÆ))

	)

1388 
	#sk_PKCS7_SIGNER_INFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
PKCS7_SIGNER_INFO
, (°), (vÆ))

	)

1389 
	#sk_PKCS7_SIGNER_INFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
PKCS7_SIGNER_INFO
, (°), (i))

	)

1390 
	#sk_PKCS7_SIGNER_INFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
PKCS7_SIGNER_INFO
, (°), (±r))

	)

1391 
	#sk_PKCS7_SIGNER_INFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
PKCS7_SIGNER_INFO
, (°), (vÆ), (i))

	)

1392 
	#sk_PKCS7_SIGNER_INFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
PKCS7_SIGNER_INFO
, (°), (cmp))

	)

1393 
	#sk_PKCS7_SIGNER_INFO_dup
(
°
Ë
	`SKM_sk_dup
(
PKCS7_SIGNER_INFO
, st)

	)

1394 
	#sk_PKCS7_SIGNER_INFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
PKCS7_SIGNER_INFO
, (°), (‰ì_func))

	)

1395 
	#sk_PKCS7_SIGNER_INFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
PKCS7_SIGNER_INFO
, (°))

	)

1396 
	#sk_PKCS7_SIGNER_INFO_p›
(
°
Ë
	`SKM_sk_p›
(
PKCS7_SIGNER_INFO
, (°))

	)

1397 
	#sk_PKCS7_SIGNER_INFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
PKCS7_SIGNER_INFO
, (°))

	)

1398 
	#sk_PKCS7_SIGNER_INFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
PKCS7_SIGNER_INFO
, (°))

	)

1400 
	#sk_POLICYINFO_√w
(
cmp
Ë
	`SKM_sk_√w
(
POLICYINFO
, (cmp))

	)

1401 
	#sk_POLICYINFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
POLICYINFO
)

	)

1402 
	#sk_POLICYINFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
POLICYINFO
, (°))

	)

1403 
	#sk_POLICYINFO_num
(
°
Ë
	`SKM_sk_num
(
POLICYINFO
, (°))

	)

1404 
	#sk_POLICYINFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
POLICYINFO
, (°), (i))

	)

1405 
	#sk_POLICYINFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
POLICYINFO
, (°), (i), (vÆ))

	)

1406 
	#sk_POLICYINFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
POLICYINFO
, (°))

	)

1407 
	#sk_POLICYINFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
POLICYINFO
, (°), (vÆ))

	)

1408 
	#sk_POLICYINFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
POLICYINFO
, (°), (vÆ))

	)

1409 
	#sk_POLICYINFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
POLICYINFO
, (°), (vÆ))

	)

1410 
	#sk_POLICYINFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
POLICYINFO
, (°), (vÆ))

	)

1411 
	#sk_POLICYINFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
POLICYINFO
, (°), (i))

	)

1412 
	#sk_POLICYINFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
POLICYINFO
, (°), (±r))

	)

1413 
	#sk_POLICYINFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
POLICYINFO
, (°), (vÆ), (i))

	)

1414 
	#sk_POLICYINFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
POLICYINFO
, (°), (cmp))

	)

1415 
	#sk_POLICYINFO_dup
(
°
Ë
	`SKM_sk_dup
(
POLICYINFO
, st)

	)

1416 
	#sk_POLICYINFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
POLICYINFO
, (°), (‰ì_func))

	)

1417 
	#sk_POLICYINFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
POLICYINFO
, (°))

	)

1418 
	#sk_POLICYINFO_p›
(
°
Ë
	`SKM_sk_p›
(
POLICYINFO
, (°))

	)

1419 
	#sk_POLICYINFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
POLICYINFO
, (°))

	)

1420 
	#sk_POLICYINFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
POLICYINFO
, (°))

	)

1422 
	#sk_POLICYQUALINFO_√w
(
cmp
Ë
	`SKM_sk_√w
(
POLICYQUALINFO
, (cmp))

	)

1423 
	#sk_POLICYQUALINFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
POLICYQUALINFO
)

	)

1424 
	#sk_POLICYQUALINFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
POLICYQUALINFO
, (°))

	)

1425 
	#sk_POLICYQUALINFO_num
(
°
Ë
	`SKM_sk_num
(
POLICYQUALINFO
, (°))

	)

1426 
	#sk_POLICYQUALINFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
POLICYQUALINFO
, (°), (i))

	)

1427 
	#sk_POLICYQUALINFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
POLICYQUALINFO
, (°), (i), (vÆ))

	)

1428 
	#sk_POLICYQUALINFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
POLICYQUALINFO
, (°))

	)

1429 
	#sk_POLICYQUALINFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
POLICYQUALINFO
, (°), (vÆ))

	)

1430 
	#sk_POLICYQUALINFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
POLICYQUALINFO
, (°), (vÆ))

	)

1431 
	#sk_POLICYQUALINFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
POLICYQUALINFO
, (°), (vÆ))

	)

1432 
	#sk_POLICYQUALINFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
POLICYQUALINFO
, (°), (vÆ))

	)

1433 
	#sk_POLICYQUALINFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
POLICYQUALINFO
, (°), (i))

	)

1434 
	#sk_POLICYQUALINFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
POLICYQUALINFO
, (°), (±r))

	)

1435 
	#sk_POLICYQUALINFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
POLICYQUALINFO
, (°), (vÆ), (i))

	)

1436 
	#sk_POLICYQUALINFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
POLICYQUALINFO
, (°), (cmp))

	)

1437 
	#sk_POLICYQUALINFO_dup
(
°
Ë
	`SKM_sk_dup
(
POLICYQUALINFO
, st)

	)

1438 
	#sk_POLICYQUALINFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
POLICYQUALINFO
, (°), (‰ì_func))

	)

1439 
	#sk_POLICYQUALINFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
POLICYQUALINFO
, (°))

	)

1440 
	#sk_POLICYQUALINFO_p›
(
°
Ë
	`SKM_sk_p›
(
POLICYQUALINFO
, (°))

	)

1441 
	#sk_POLICYQUALINFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
POLICYQUALINFO
, (°))

	)

1442 
	#sk_POLICYQUALINFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
POLICYQUALINFO
, (°))

	)

1444 
	#sk_POLICY_MAPPING_√w
(
cmp
Ë
	`SKM_sk_√w
(
POLICY_MAPPING
, (cmp))

	)

1445 
	#sk_POLICY_MAPPING_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
POLICY_MAPPING
)

	)

1446 
	#sk_POLICY_MAPPING_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
POLICY_MAPPING
, (°))

	)

1447 
	#sk_POLICY_MAPPING_num
(
°
Ë
	`SKM_sk_num
(
POLICY_MAPPING
, (°))

	)

1448 
	#sk_POLICY_MAPPING_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
POLICY_MAPPING
, (°), (i))

	)

1449 
	#sk_POLICY_MAPPING_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
POLICY_MAPPING
, (°), (i), (vÆ))

	)

1450 
	#sk_POLICY_MAPPING_zîo
(
°
Ë
	`SKM_sk_zîo
(
POLICY_MAPPING
, (°))

	)

1451 
	#sk_POLICY_MAPPING_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
POLICY_MAPPING
, (°), (vÆ))

	)

1452 
	#sk_POLICY_MAPPING_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
POLICY_MAPPING
, (°), (vÆ))

	)

1453 
	#sk_POLICY_MAPPING_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
POLICY_MAPPING
, (°), (vÆ))

	)

1454 
	#sk_POLICY_MAPPING_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
POLICY_MAPPING
, (°), (vÆ))

	)

1455 
	#sk_POLICY_MAPPING_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
POLICY_MAPPING
, (°), (i))

	)

1456 
	#sk_POLICY_MAPPING_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
POLICY_MAPPING
, (°), (±r))

	)

1457 
	#sk_POLICY_MAPPING_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
POLICY_MAPPING
, (°), (vÆ), (i))

	)

1458 
	#sk_POLICY_MAPPING_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
POLICY_MAPPING
, (°), (cmp))

	)

1459 
	#sk_POLICY_MAPPING_dup
(
°
Ë
	`SKM_sk_dup
(
POLICY_MAPPING
, st)

	)

1460 
	#sk_POLICY_MAPPING_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
POLICY_MAPPING
, (°), (‰ì_func))

	)

1461 
	#sk_POLICY_MAPPING_shi·
(
°
Ë
	`SKM_sk_shi·
(
POLICY_MAPPING
, (°))

	)

1462 
	#sk_POLICY_MAPPING_p›
(
°
Ë
	`SKM_sk_p›
(
POLICY_MAPPING
, (°))

	)

1463 
	#sk_POLICY_MAPPING_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
POLICY_MAPPING
, (°))

	)

1464 
	#sk_POLICY_MAPPING_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
POLICY_MAPPING
, (°))

	)

1466 
	#sk_SRP_gN_√w
(
cmp
Ë
	`SKM_sk_√w
(
SRP_gN
, (cmp))

	)

1467 
	#sk_SRP_gN_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SRP_gN
)

	)

1468 
	#sk_SRP_gN_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SRP_gN
, (°))

	)

1469 
	#sk_SRP_gN_num
(
°
Ë
	`SKM_sk_num
(
SRP_gN
, (°))

	)

1470 
	#sk_SRP_gN_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SRP_gN
, (°), (i))

	)

1471 
	#sk_SRP_gN_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SRP_gN
, (°), (i), (vÆ))

	)

1472 
	#sk_SRP_gN_zîo
(
°
Ë
	`SKM_sk_zîo
(
SRP_gN
, (°))

	)

1473 
	#sk_SRP_gN_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SRP_gN
, (°), (vÆ))

	)

1474 
	#sk_SRP_gN_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SRP_gN
, (°), (vÆ))

	)

1475 
	#sk_SRP_gN_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SRP_gN
, (°), (vÆ))

	)

1476 
	#sk_SRP_gN_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SRP_gN
, (°), (vÆ))

	)

1477 
	#sk_SRP_gN_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SRP_gN
, (°), (i))

	)

1478 
	#sk_SRP_gN_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SRP_gN
, (°), (±r))

	)

1479 
	#sk_SRP_gN_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SRP_gN
, (°), (vÆ), (i))

	)

1480 
	#sk_SRP_gN_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SRP_gN
, (°), (cmp))

	)

1481 
	#sk_SRP_gN_dup
(
°
Ë
	`SKM_sk_dup
(
SRP_gN
, st)

	)

1482 
	#sk_SRP_gN_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SRP_gN
, (°), (‰ì_func))

	)

1483 
	#sk_SRP_gN_shi·
(
°
Ë
	`SKM_sk_shi·
(
SRP_gN
, (°))

	)

1484 
	#sk_SRP_gN_p›
(
°
Ë
	`SKM_sk_p›
(
SRP_gN
, (°))

	)

1485 
	#sk_SRP_gN_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SRP_gN
, (°))

	)

1486 
	#sk_SRP_gN_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SRP_gN
, (°))

	)

1488 
	#sk_SRP_gN_ˇche_√w
(
cmp
Ë
	`SKM_sk_√w
(
SRP_gN_ˇche
, (cmp))

	)

1489 
	#sk_SRP_gN_ˇche_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SRP_gN_ˇche
)

	)

1490 
	#sk_SRP_gN_ˇche_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SRP_gN_ˇche
, (°))

	)

1491 
	#sk_SRP_gN_ˇche_num
(
°
Ë
	`SKM_sk_num
(
SRP_gN_ˇche
, (°))

	)

1492 
	#sk_SRP_gN_ˇche_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SRP_gN_ˇche
, (°), (i))

	)

1493 
	#sk_SRP_gN_ˇche_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SRP_gN_ˇche
, (°), (i), (vÆ))

	)

1494 
	#sk_SRP_gN_ˇche_zîo
(
°
Ë
	`SKM_sk_zîo
(
SRP_gN_ˇche
, (°))

	)

1495 
	#sk_SRP_gN_ˇche_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SRP_gN_ˇche
, (°), (vÆ))

	)

1496 
	#sk_SRP_gN_ˇche_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SRP_gN_ˇche
, (°), (vÆ))

	)

1497 
	#sk_SRP_gN_ˇche_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SRP_gN_ˇche
, (°), (vÆ))

	)

1498 
	#sk_SRP_gN_ˇche_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SRP_gN_ˇche
, (°), (vÆ))

	)

1499 
	#sk_SRP_gN_ˇche_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SRP_gN_ˇche
, (°), (i))

	)

1500 
	#sk_SRP_gN_ˇche_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SRP_gN_ˇche
, (°), (±r))

	)

1501 
	#sk_SRP_gN_ˇche_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SRP_gN_ˇche
, (°), (vÆ), (i))

	)

1502 
	#sk_SRP_gN_ˇche_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SRP_gN_ˇche
, (°), (cmp))

	)

1503 
	#sk_SRP_gN_ˇche_dup
(
°
Ë
	`SKM_sk_dup
(
SRP_gN_ˇche
, st)

	)

1504 
	#sk_SRP_gN_ˇche_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SRP_gN_ˇche
, (°), (‰ì_func))

	)

1505 
	#sk_SRP_gN_ˇche_shi·
(
°
Ë
	`SKM_sk_shi·
(
SRP_gN_ˇche
, (°))

	)

1506 
	#sk_SRP_gN_ˇche_p›
(
°
Ë
	`SKM_sk_p›
(
SRP_gN_ˇche
, (°))

	)

1507 
	#sk_SRP_gN_ˇche_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SRP_gN_ˇche
, (°))

	)

1508 
	#sk_SRP_gN_ˇche_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SRP_gN_ˇche
, (°))

	)

1510 
	#sk_SRP_u£r_pwd_√w
(
cmp
Ë
	`SKM_sk_√w
(
SRP_u£r_pwd
, (cmp))

	)

1511 
	#sk_SRP_u£r_pwd_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SRP_u£r_pwd
)

	)

1512 
	#sk_SRP_u£r_pwd_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SRP_u£r_pwd
, (°))

	)

1513 
	#sk_SRP_u£r_pwd_num
(
°
Ë
	`SKM_sk_num
(
SRP_u£r_pwd
, (°))

	)

1514 
	#sk_SRP_u£r_pwd_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SRP_u£r_pwd
, (°), (i))

	)

1515 
	#sk_SRP_u£r_pwd_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SRP_u£r_pwd
, (°), (i), (vÆ))

	)

1516 
	#sk_SRP_u£r_pwd_zîo
(
°
Ë
	`SKM_sk_zîo
(
SRP_u£r_pwd
, (°))

	)

1517 
	#sk_SRP_u£r_pwd_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SRP_u£r_pwd
, (°), (vÆ))

	)

1518 
	#sk_SRP_u£r_pwd_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SRP_u£r_pwd
, (°), (vÆ))

	)

1519 
	#sk_SRP_u£r_pwd_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SRP_u£r_pwd
, (°), (vÆ))

	)

1520 
	#sk_SRP_u£r_pwd_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SRP_u£r_pwd
, (°), (vÆ))

	)

1521 
	#sk_SRP_u£r_pwd_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SRP_u£r_pwd
, (°), (i))

	)

1522 
	#sk_SRP_u£r_pwd_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SRP_u£r_pwd
, (°), (±r))

	)

1523 
	#sk_SRP_u£r_pwd_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SRP_u£r_pwd
, (°), (vÆ), (i))

	)

1524 
	#sk_SRP_u£r_pwd_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SRP_u£r_pwd
, (°), (cmp))

	)

1525 
	#sk_SRP_u£r_pwd_dup
(
°
Ë
	`SKM_sk_dup
(
SRP_u£r_pwd
, st)

	)

1526 
	#sk_SRP_u£r_pwd_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SRP_u£r_pwd
, (°), (‰ì_func))

	)

1527 
	#sk_SRP_u£r_pwd_shi·
(
°
Ë
	`SKM_sk_shi·
(
SRP_u£r_pwd
, (°))

	)

1528 
	#sk_SRP_u£r_pwd_p›
(
°
Ë
	`SKM_sk_p›
(
SRP_u£r_pwd
, (°))

	)

1529 
	#sk_SRP_u£r_pwd_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SRP_u£r_pwd
, (°))

	)

1530 
	#sk_SRP_u£r_pwd_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SRP_u£r_pwd
, (°))

	)

1532 
	#sk_SRTP_PROTECTION_PROFILE_√w
(
cmp
Ë
	`SKM_sk_√w
(
SRTP_PROTECTION_PROFILE
, (cmp))

	)

1533 
	#sk_SRTP_PROTECTION_PROFILE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SRTP_PROTECTION_PROFILE
)

	)

1534 
	#sk_SRTP_PROTECTION_PROFILE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SRTP_PROTECTION_PROFILE
, (°))

	)

1535 
	#sk_SRTP_PROTECTION_PROFILE_num
(
°
Ë
	`SKM_sk_num
(
SRTP_PROTECTION_PROFILE
, (°))

	)

1536 
	#sk_SRTP_PROTECTION_PROFILE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SRTP_PROTECTION_PROFILE
, (°), (i))

	)

1537 
	#sk_SRTP_PROTECTION_PROFILE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SRTP_PROTECTION_PROFILE
, (°), (i), (vÆ))

	)

1538 
	#sk_SRTP_PROTECTION_PROFILE_zîo
(
°
Ë
	`SKM_sk_zîo
(
SRTP_PROTECTION_PROFILE
, (°))

	)

1539 
	#sk_SRTP_PROTECTION_PROFILE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SRTP_PROTECTION_PROFILE
, (°), (vÆ))

	)

1540 
	#sk_SRTP_PROTECTION_PROFILE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SRTP_PROTECTION_PROFILE
, (°), (vÆ))

	)

1541 
	#sk_SRTP_PROTECTION_PROFILE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SRTP_PROTECTION_PROFILE
, (°), (vÆ))

	)

1542 
	#sk_SRTP_PROTECTION_PROFILE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SRTP_PROTECTION_PROFILE
, (°), (vÆ))

	)

1543 
	#sk_SRTP_PROTECTION_PROFILE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SRTP_PROTECTION_PROFILE
, (°), (i))

	)

1544 
	#sk_SRTP_PROTECTION_PROFILE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SRTP_PROTECTION_PROFILE
, (°), (±r))

	)

1545 
	#sk_SRTP_PROTECTION_PROFILE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SRTP_PROTECTION_PROFILE
, (°), (vÆ), (i))

	)

1546 
	#sk_SRTP_PROTECTION_PROFILE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SRTP_PROTECTION_PROFILE
, (°), (cmp))

	)

1547 
	#sk_SRTP_PROTECTION_PROFILE_dup
(
°
Ë
	`SKM_sk_dup
(
SRTP_PROTECTION_PROFILE
, st)

	)

1548 
	#sk_SRTP_PROTECTION_PROFILE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SRTP_PROTECTION_PROFILE
, (°), (‰ì_func))

	)

1549 
	#sk_SRTP_PROTECTION_PROFILE_shi·
(
°
Ë
	`SKM_sk_shi·
(
SRTP_PROTECTION_PROFILE
, (°))

	)

1550 
	#sk_SRTP_PROTECTION_PROFILE_p›
(
°
Ë
	`SKM_sk_p›
(
SRTP_PROTECTION_PROFILE
, (°))

	)

1551 
	#sk_SRTP_PROTECTION_PROFILE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SRTP_PROTECTION_PROFILE
, (°))

	)

1552 
	#sk_SRTP_PROTECTION_PROFILE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SRTP_PROTECTION_PROFILE
, (°))

	)

1554 
	#sk_SSL_CIPHER_√w
(
cmp
Ë
	`SKM_sk_√w
(
SSL_CIPHER
, (cmp))

	)

1555 
	#sk_SSL_CIPHER_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SSL_CIPHER
)

	)

1556 
	#sk_SSL_CIPHER_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SSL_CIPHER
, (°))

	)

1557 
	#sk_SSL_CIPHER_num
(
°
Ë
	`SKM_sk_num
(
SSL_CIPHER
, (°))

	)

1558 
	#sk_SSL_CIPHER_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SSL_CIPHER
, (°), (i))

	)

1559 
	#sk_SSL_CIPHER_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SSL_CIPHER
, (°), (i), (vÆ))

	)

1560 
	#sk_SSL_CIPHER_zîo
(
°
Ë
	`SKM_sk_zîo
(
SSL_CIPHER
, (°))

	)

1561 
	#sk_SSL_CIPHER_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SSL_CIPHER
, (°), (vÆ))

	)

1562 
	#sk_SSL_CIPHER_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SSL_CIPHER
, (°), (vÆ))

	)

1563 
	#sk_SSL_CIPHER_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SSL_CIPHER
, (°), (vÆ))

	)

1564 
	#sk_SSL_CIPHER_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SSL_CIPHER
, (°), (vÆ))

	)

1565 
	#sk_SSL_CIPHER_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SSL_CIPHER
, (°), (i))

	)

1566 
	#sk_SSL_CIPHER_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SSL_CIPHER
, (°), (±r))

	)

1567 
	#sk_SSL_CIPHER_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SSL_CIPHER
, (°), (vÆ), (i))

	)

1568 
	#sk_SSL_CIPHER_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SSL_CIPHER
, (°), (cmp))

	)

1569 
	#sk_SSL_CIPHER_dup
(
°
Ë
	`SKM_sk_dup
(
SSL_CIPHER
, st)

	)

1570 
	#sk_SSL_CIPHER_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SSL_CIPHER
, (°), (‰ì_func))

	)

1571 
	#sk_SSL_CIPHER_shi·
(
°
Ë
	`SKM_sk_shi·
(
SSL_CIPHER
, (°))

	)

1572 
	#sk_SSL_CIPHER_p›
(
°
Ë
	`SKM_sk_p›
(
SSL_CIPHER
, (°))

	)

1573 
	#sk_SSL_CIPHER_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SSL_CIPHER
, (°))

	)

1574 
	#sk_SSL_CIPHER_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SSL_CIPHER
, (°))

	)

1576 
	#sk_SSL_COMP_√w
(
cmp
Ë
	`SKM_sk_√w
(
SSL_COMP
, (cmp))

	)

1577 
	#sk_SSL_COMP_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SSL_COMP
)

	)

1578 
	#sk_SSL_COMP_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SSL_COMP
, (°))

	)

1579 
	#sk_SSL_COMP_num
(
°
Ë
	`SKM_sk_num
(
SSL_COMP
, (°))

	)

1580 
	#sk_SSL_COMP_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SSL_COMP
, (°), (i))

	)

1581 
	#sk_SSL_COMP_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SSL_COMP
, (°), (i), (vÆ))

	)

1582 
	#sk_SSL_COMP_zîo
(
°
Ë
	`SKM_sk_zîo
(
SSL_COMP
, (°))

	)

1583 
	#sk_SSL_COMP_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SSL_COMP
, (°), (vÆ))

	)

1584 
	#sk_SSL_COMP_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SSL_COMP
, (°), (vÆ))

	)

1585 
	#sk_SSL_COMP_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SSL_COMP
, (°), (vÆ))

	)

1586 
	#sk_SSL_COMP_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SSL_COMP
, (°), (vÆ))

	)

1587 
	#sk_SSL_COMP_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SSL_COMP
, (°), (i))

	)

1588 
	#sk_SSL_COMP_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SSL_COMP
, (°), (±r))

	)

1589 
	#sk_SSL_COMP_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SSL_COMP
, (°), (vÆ), (i))

	)

1590 
	#sk_SSL_COMP_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SSL_COMP
, (°), (cmp))

	)

1591 
	#sk_SSL_COMP_dup
(
°
Ë
	`SKM_sk_dup
(
SSL_COMP
, st)

	)

1592 
	#sk_SSL_COMP_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SSL_COMP
, (°), (‰ì_func))

	)

1593 
	#sk_SSL_COMP_shi·
(
°
Ë
	`SKM_sk_shi·
(
SSL_COMP
, (°))

	)

1594 
	#sk_SSL_COMP_p›
(
°
Ë
	`SKM_sk_p›
(
SSL_COMP
, (°))

	)

1595 
	#sk_SSL_COMP_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SSL_COMP
, (°))

	)

1596 
	#sk_SSL_COMP_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SSL_COMP
, (°))

	)

1598 
	#sk_STACK_OF_X509_NAME_ENTRY_√w
(
cmp
Ë
	`SKM_sk_√w
(
STACK_OF_X509_NAME_ENTRY
, (cmp))

	)

1599 
	#sk_STACK_OF_X509_NAME_ENTRY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
STACK_OF_X509_NAME_ENTRY
)

	)

1600 
	#sk_STACK_OF_X509_NAME_ENTRY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
STACK_OF_X509_NAME_ENTRY
, (°))

	)

1601 
	#sk_STACK_OF_X509_NAME_ENTRY_num
(
°
Ë
	`SKM_sk_num
(
STACK_OF_X509_NAME_ENTRY
, (°))

	)

1602 
	#sk_STACK_OF_X509_NAME_ENTRY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
STACK_OF_X509_NAME_ENTRY
, (°), (i))

	)

1603 
	#sk_STACK_OF_X509_NAME_ENTRY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
STACK_OF_X509_NAME_ENTRY
, (°), (i), (vÆ))

	)

1604 
	#sk_STACK_OF_X509_NAME_ENTRY_zîo
(
°
Ë
	`SKM_sk_zîo
(
STACK_OF_X509_NAME_ENTRY
, (°))

	)

1605 
	#sk_STACK_OF_X509_NAME_ENTRY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
STACK_OF_X509_NAME_ENTRY
, (°), (vÆ))

	)

1606 
	#sk_STACK_OF_X509_NAME_ENTRY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
STACK_OF_X509_NAME_ENTRY
, (°), (vÆ))

	)

1607 
	#sk_STACK_OF_X509_NAME_ENTRY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
STACK_OF_X509_NAME_ENTRY
, (°), (vÆ))

	)

1608 
	#sk_STACK_OF_X509_NAME_ENTRY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
STACK_OF_X509_NAME_ENTRY
, (°), (vÆ))

	)

1609 
	#sk_STACK_OF_X509_NAME_ENTRY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
STACK_OF_X509_NAME_ENTRY
, (°), (i))

	)

1610 
	#sk_STACK_OF_X509_NAME_ENTRY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
STACK_OF_X509_NAME_ENTRY
, (°), (±r))

	)

1611 
	#sk_STACK_OF_X509_NAME_ENTRY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
STACK_OF_X509_NAME_ENTRY
, (°), (vÆ), (i))

	)

1612 
	#sk_STACK_OF_X509_NAME_ENTRY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
STACK_OF_X509_NAME_ENTRY
, (°), (cmp))

	)

1613 
	#sk_STACK_OF_X509_NAME_ENTRY_dup
(
°
Ë
	`SKM_sk_dup
(
STACK_OF_X509_NAME_ENTRY
, st)

	)

1614 
	#sk_STACK_OF_X509_NAME_ENTRY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
STACK_OF_X509_NAME_ENTRY
, (°), (‰ì_func))

	)

1615 
	#sk_STACK_OF_X509_NAME_ENTRY_shi·
(
°
Ë
	`SKM_sk_shi·
(
STACK_OF_X509_NAME_ENTRY
, (°))

	)

1616 
	#sk_STACK_OF_X509_NAME_ENTRY_p›
(
°
Ë
	`SKM_sk_p›
(
STACK_OF_X509_NAME_ENTRY
, (°))

	)

1617 
	#sk_STACK_OF_X509_NAME_ENTRY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
STACK_OF_X509_NAME_ENTRY
, (°))

	)

1618 
	#sk_STACK_OF_X509_NAME_ENTRY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
STACK_OF_X509_NAME_ENTRY
, (°))

	)

1620 
	#sk_STORE_ATTR_INFO_√w
(
cmp
Ë
	`SKM_sk_√w
(
STORE_ATTR_INFO
, (cmp))

	)

1621 
	#sk_STORE_ATTR_INFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
STORE_ATTR_INFO
)

	)

1622 
	#sk_STORE_ATTR_INFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
STORE_ATTR_INFO
, (°))

	)

1623 
	#sk_STORE_ATTR_INFO_num
(
°
Ë
	`SKM_sk_num
(
STORE_ATTR_INFO
, (°))

	)

1624 
	#sk_STORE_ATTR_INFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
STORE_ATTR_INFO
, (°), (i))

	)

1625 
	#sk_STORE_ATTR_INFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
STORE_ATTR_INFO
, (°), (i), (vÆ))

	)

1626 
	#sk_STORE_ATTR_INFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
STORE_ATTR_INFO
, (°))

	)

1627 
	#sk_STORE_ATTR_INFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
STORE_ATTR_INFO
, (°), (vÆ))

	)

1628 
	#sk_STORE_ATTR_INFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
STORE_ATTR_INFO
, (°), (vÆ))

	)

1629 
	#sk_STORE_ATTR_INFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
STORE_ATTR_INFO
, (°), (vÆ))

	)

1630 
	#sk_STORE_ATTR_INFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
STORE_ATTR_INFO
, (°), (vÆ))

	)

1631 
	#sk_STORE_ATTR_INFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
STORE_ATTR_INFO
, (°), (i))

	)

1632 
	#sk_STORE_ATTR_INFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
STORE_ATTR_INFO
, (°), (±r))

	)

1633 
	#sk_STORE_ATTR_INFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
STORE_ATTR_INFO
, (°), (vÆ), (i))

	)

1634 
	#sk_STORE_ATTR_INFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
STORE_ATTR_INFO
, (°), (cmp))

	)

1635 
	#sk_STORE_ATTR_INFO_dup
(
°
Ë
	`SKM_sk_dup
(
STORE_ATTR_INFO
, st)

	)

1636 
	#sk_STORE_ATTR_INFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
STORE_ATTR_INFO
, (°), (‰ì_func))

	)

1637 
	#sk_STORE_ATTR_INFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
STORE_ATTR_INFO
, (°))

	)

1638 
	#sk_STORE_ATTR_INFO_p›
(
°
Ë
	`SKM_sk_p›
(
STORE_ATTR_INFO
, (°))

	)

1639 
	#sk_STORE_ATTR_INFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
STORE_ATTR_INFO
, (°))

	)

1640 
	#sk_STORE_ATTR_INFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
STORE_ATTR_INFO
, (°))

	)

1642 
	#sk_STORE_OBJECT_√w
(
cmp
Ë
	`SKM_sk_√w
(
STORE_OBJECT
, (cmp))

	)

1643 
	#sk_STORE_OBJECT_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
STORE_OBJECT
)

	)

1644 
	#sk_STORE_OBJECT_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
STORE_OBJECT
, (°))

	)

1645 
	#sk_STORE_OBJECT_num
(
°
Ë
	`SKM_sk_num
(
STORE_OBJECT
, (°))

	)

1646 
	#sk_STORE_OBJECT_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
STORE_OBJECT
, (°), (i))

	)

1647 
	#sk_STORE_OBJECT_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
STORE_OBJECT
, (°), (i), (vÆ))

	)

1648 
	#sk_STORE_OBJECT_zîo
(
°
Ë
	`SKM_sk_zîo
(
STORE_OBJECT
, (°))

	)

1649 
	#sk_STORE_OBJECT_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
STORE_OBJECT
, (°), (vÆ))

	)

1650 
	#sk_STORE_OBJECT_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
STORE_OBJECT
, (°), (vÆ))

	)

1651 
	#sk_STORE_OBJECT_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
STORE_OBJECT
, (°), (vÆ))

	)

1652 
	#sk_STORE_OBJECT_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
STORE_OBJECT
, (°), (vÆ))

	)

1653 
	#sk_STORE_OBJECT_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
STORE_OBJECT
, (°), (i))

	)

1654 
	#sk_STORE_OBJECT_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
STORE_OBJECT
, (°), (±r))

	)

1655 
	#sk_STORE_OBJECT_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
STORE_OBJECT
, (°), (vÆ), (i))

	)

1656 
	#sk_STORE_OBJECT_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
STORE_OBJECT
, (°), (cmp))

	)

1657 
	#sk_STORE_OBJECT_dup
(
°
Ë
	`SKM_sk_dup
(
STORE_OBJECT
, st)

	)

1658 
	#sk_STORE_OBJECT_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
STORE_OBJECT
, (°), (‰ì_func))

	)

1659 
	#sk_STORE_OBJECT_shi·
(
°
Ë
	`SKM_sk_shi·
(
STORE_OBJECT
, (°))

	)

1660 
	#sk_STORE_OBJECT_p›
(
°
Ë
	`SKM_sk_p›
(
STORE_OBJECT
, (°))

	)

1661 
	#sk_STORE_OBJECT_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
STORE_OBJECT
, (°))

	)

1662 
	#sk_STORE_OBJECT_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
STORE_OBJECT
, (°))

	)

1664 
	#sk_SXNETID_√w
(
cmp
Ë
	`SKM_sk_√w
(
SXNETID
, (cmp))

	)

1665 
	#sk_SXNETID_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SXNETID
)

	)

1666 
	#sk_SXNETID_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SXNETID
, (°))

	)

1667 
	#sk_SXNETID_num
(
°
Ë
	`SKM_sk_num
(
SXNETID
, (°))

	)

1668 
	#sk_SXNETID_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SXNETID
, (°), (i))

	)

1669 
	#sk_SXNETID_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SXNETID
, (°), (i), (vÆ))

	)

1670 
	#sk_SXNETID_zîo
(
°
Ë
	`SKM_sk_zîo
(
SXNETID
, (°))

	)

1671 
	#sk_SXNETID_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SXNETID
, (°), (vÆ))

	)

1672 
	#sk_SXNETID_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SXNETID
, (°), (vÆ))

	)

1673 
	#sk_SXNETID_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SXNETID
, (°), (vÆ))

	)

1674 
	#sk_SXNETID_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SXNETID
, (°), (vÆ))

	)

1675 
	#sk_SXNETID_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SXNETID
, (°), (i))

	)

1676 
	#sk_SXNETID_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SXNETID
, (°), (±r))

	)

1677 
	#sk_SXNETID_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SXNETID
, (°), (vÆ), (i))

	)

1678 
	#sk_SXNETID_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SXNETID
, (°), (cmp))

	)

1679 
	#sk_SXNETID_dup
(
°
Ë
	`SKM_sk_dup
(
SXNETID
, st)

	)

1680 
	#sk_SXNETID_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SXNETID
, (°), (‰ì_func))

	)

1681 
	#sk_SXNETID_shi·
(
°
Ë
	`SKM_sk_shi·
(
SXNETID
, (°))

	)

1682 
	#sk_SXNETID_p›
(
°
Ë
	`SKM_sk_p›
(
SXNETID
, (°))

	)

1683 
	#sk_SXNETID_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SXNETID
, (°))

	)

1684 
	#sk_SXNETID_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SXNETID
, (°))

	)

1686 
	#sk_UI_STRING_√w
(
cmp
Ë
	`SKM_sk_√w
(
UI_STRING
, (cmp))

	)

1687 
	#sk_UI_STRING_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
UI_STRING
)

	)

1688 
	#sk_UI_STRING_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
UI_STRING
, (°))

	)

1689 
	#sk_UI_STRING_num
(
°
Ë
	`SKM_sk_num
(
UI_STRING
, (°))

	)

1690 
	#sk_UI_STRING_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
UI_STRING
, (°), (i))

	)

1691 
	#sk_UI_STRING_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
UI_STRING
, (°), (i), (vÆ))

	)

1692 
	#sk_UI_STRING_zîo
(
°
Ë
	`SKM_sk_zîo
(
UI_STRING
, (°))

	)

1693 
	#sk_UI_STRING_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
UI_STRING
, (°), (vÆ))

	)

1694 
	#sk_UI_STRING_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
UI_STRING
, (°), (vÆ))

	)

1695 
	#sk_UI_STRING_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
UI_STRING
, (°), (vÆ))

	)

1696 
	#sk_UI_STRING_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
UI_STRING
, (°), (vÆ))

	)

1697 
	#sk_UI_STRING_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
UI_STRING
, (°), (i))

	)

1698 
	#sk_UI_STRING_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
UI_STRING
, (°), (±r))

	)

1699 
	#sk_UI_STRING_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
UI_STRING
, (°), (vÆ), (i))

	)

1700 
	#sk_UI_STRING_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
UI_STRING
, (°), (cmp))

	)

1701 
	#sk_UI_STRING_dup
(
°
Ë
	`SKM_sk_dup
(
UI_STRING
, st)

	)

1702 
	#sk_UI_STRING_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
UI_STRING
, (°), (‰ì_func))

	)

1703 
	#sk_UI_STRING_shi·
(
°
Ë
	`SKM_sk_shi·
(
UI_STRING
, (°))

	)

1704 
	#sk_UI_STRING_p›
(
°
Ë
	`SKM_sk_p›
(
UI_STRING
, (°))

	)

1705 
	#sk_UI_STRING_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
UI_STRING
, (°))

	)

1706 
	#sk_UI_STRING_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
UI_STRING
, (°))

	)

1708 
	#sk_X509_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509
, (cmp))

	)

1709 
	#sk_X509_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509
)

	)

1710 
	#sk_X509_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509
, (°))

	)

1711 
	#sk_X509_num
(
°
Ë
	`SKM_sk_num
(
X509
, (°))

	)

1712 
	#sk_X509_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509
, (°), (i))

	)

1713 
	#sk_X509_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509
, (°), (i), (vÆ))

	)

1714 
	#sk_X509_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509
, (°))

	)

1715 
	#sk_X509_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509
, (°), (vÆ))

	)

1716 
	#sk_X509_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509
, (°), (vÆ))

	)

1717 
	#sk_X509_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509
, (°), (vÆ))

	)

1718 
	#sk_X509_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509
, (°), (vÆ))

	)

1719 
	#sk_X509_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509
, (°), (i))

	)

1720 
	#sk_X509_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509
, (°), (±r))

	)

1721 
	#sk_X509_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509
, (°), (vÆ), (i))

	)

1722 
	#sk_X509_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509
, (°), (cmp))

	)

1723 
	#sk_X509_dup
(
°
Ë
	`SKM_sk_dup
(
X509
, st)

	)

1724 
	#sk_X509_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509
, (°), (‰ì_func))

	)

1725 
	#sk_X509_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509
, (°))

	)

1726 
	#sk_X509_p›
(
°
Ë
	`SKM_sk_p›
(
X509
, (°))

	)

1727 
	#sk_X509_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509
, (°))

	)

1728 
	#sk_X509_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509
, (°))

	)

1730 
	#sk_X509V3_EXT_METHOD_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509V3_EXT_METHOD
, (cmp))

	)

1731 
	#sk_X509V3_EXT_METHOD_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509V3_EXT_METHOD
)

	)

1732 
	#sk_X509V3_EXT_METHOD_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509V3_EXT_METHOD
, (°))

	)

1733 
	#sk_X509V3_EXT_METHOD_num
(
°
Ë
	`SKM_sk_num
(
X509V3_EXT_METHOD
, (°))

	)

1734 
	#sk_X509V3_EXT_METHOD_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509V3_EXT_METHOD
, (°), (i))

	)

1735 
	#sk_X509V3_EXT_METHOD_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509V3_EXT_METHOD
, (°), (i), (vÆ))

	)

1736 
	#sk_X509V3_EXT_METHOD_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509V3_EXT_METHOD
, (°))

	)

1737 
	#sk_X509V3_EXT_METHOD_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509V3_EXT_METHOD
, (°), (vÆ))

	)

1738 
	#sk_X509V3_EXT_METHOD_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509V3_EXT_METHOD
, (°), (vÆ))

	)

1739 
	#sk_X509V3_EXT_METHOD_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509V3_EXT_METHOD
, (°), (vÆ))

	)

1740 
	#sk_X509V3_EXT_METHOD_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509V3_EXT_METHOD
, (°), (vÆ))

	)

1741 
	#sk_X509V3_EXT_METHOD_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509V3_EXT_METHOD
, (°), (i))

	)

1742 
	#sk_X509V3_EXT_METHOD_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509V3_EXT_METHOD
, (°), (±r))

	)

1743 
	#sk_X509V3_EXT_METHOD_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509V3_EXT_METHOD
, (°), (vÆ), (i))

	)

1744 
	#sk_X509V3_EXT_METHOD_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509V3_EXT_METHOD
, (°), (cmp))

	)

1745 
	#sk_X509V3_EXT_METHOD_dup
(
°
Ë
	`SKM_sk_dup
(
X509V3_EXT_METHOD
, st)

	)

1746 
	#sk_X509V3_EXT_METHOD_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509V3_EXT_METHOD
, (°), (‰ì_func))

	)

1747 
	#sk_X509V3_EXT_METHOD_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509V3_EXT_METHOD
, (°))

	)

1748 
	#sk_X509V3_EXT_METHOD_p›
(
°
Ë
	`SKM_sk_p›
(
X509V3_EXT_METHOD
, (°))

	)

1749 
	#sk_X509V3_EXT_METHOD_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509V3_EXT_METHOD
, (°))

	)

1750 
	#sk_X509V3_EXT_METHOD_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509V3_EXT_METHOD
, (°))

	)

1752 
	#sk_X509_ALGOR_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_ALGOR
, (cmp))

	)

1753 
	#sk_X509_ALGOR_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_ALGOR
)

	)

1754 
	#sk_X509_ALGOR_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_ALGOR
, (°))

	)

1755 
	#sk_X509_ALGOR_num
(
°
Ë
	`SKM_sk_num
(
X509_ALGOR
, (°))

	)

1756 
	#sk_X509_ALGOR_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_ALGOR
, (°), (i))

	)

1757 
	#sk_X509_ALGOR_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_ALGOR
, (°), (i), (vÆ))

	)

1758 
	#sk_X509_ALGOR_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_ALGOR
, (°))

	)

1759 
	#sk_X509_ALGOR_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_ALGOR
, (°), (vÆ))

	)

1760 
	#sk_X509_ALGOR_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_ALGOR
, (°), (vÆ))

	)

1761 
	#sk_X509_ALGOR_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_ALGOR
, (°), (vÆ))

	)

1762 
	#sk_X509_ALGOR_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_ALGOR
, (°), (vÆ))

	)

1763 
	#sk_X509_ALGOR_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_ALGOR
, (°), (i))

	)

1764 
	#sk_X509_ALGOR_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_ALGOR
, (°), (±r))

	)

1765 
	#sk_X509_ALGOR_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_ALGOR
, (°), (vÆ), (i))

	)

1766 
	#sk_X509_ALGOR_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_ALGOR
, (°), (cmp))

	)

1767 
	#sk_X509_ALGOR_dup
(
°
Ë
	`SKM_sk_dup
(
X509_ALGOR
, st)

	)

1768 
	#sk_X509_ALGOR_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_ALGOR
, (°), (‰ì_func))

	)

1769 
	#sk_X509_ALGOR_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_ALGOR
, (°))

	)

1770 
	#sk_X509_ALGOR_p›
(
°
Ë
	`SKM_sk_p›
(
X509_ALGOR
, (°))

	)

1771 
	#sk_X509_ALGOR_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_ALGOR
, (°))

	)

1772 
	#sk_X509_ALGOR_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_ALGOR
, (°))

	)

1774 
	#sk_X509_ATTRIBUTE_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_ATTRIBUTE
, (cmp))

	)

1775 
	#sk_X509_ATTRIBUTE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_ATTRIBUTE
)

	)

1776 
	#sk_X509_ATTRIBUTE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_ATTRIBUTE
, (°))

	)

1777 
	#sk_X509_ATTRIBUTE_num
(
°
Ë
	`SKM_sk_num
(
X509_ATTRIBUTE
, (°))

	)

1778 
	#sk_X509_ATTRIBUTE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_ATTRIBUTE
, (°), (i))

	)

1779 
	#sk_X509_ATTRIBUTE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_ATTRIBUTE
, (°), (i), (vÆ))

	)

1780 
	#sk_X509_ATTRIBUTE_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_ATTRIBUTE
, (°))

	)

1781 
	#sk_X509_ATTRIBUTE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_ATTRIBUTE
, (°), (vÆ))

	)

1782 
	#sk_X509_ATTRIBUTE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_ATTRIBUTE
, (°), (vÆ))

	)

1783 
	#sk_X509_ATTRIBUTE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_ATTRIBUTE
, (°), (vÆ))

	)

1784 
	#sk_X509_ATTRIBUTE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_ATTRIBUTE
, (°), (vÆ))

	)

1785 
	#sk_X509_ATTRIBUTE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_ATTRIBUTE
, (°), (i))

	)

1786 
	#sk_X509_ATTRIBUTE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_ATTRIBUTE
, (°), (±r))

	)

1787 
	#sk_X509_ATTRIBUTE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_ATTRIBUTE
, (°), (vÆ), (i))

	)

1788 
	#sk_X509_ATTRIBUTE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_ATTRIBUTE
, (°), (cmp))

	)

1789 
	#sk_X509_ATTRIBUTE_dup
(
°
Ë
	`SKM_sk_dup
(
X509_ATTRIBUTE
, st)

	)

1790 
	#sk_X509_ATTRIBUTE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_ATTRIBUTE
, (°), (‰ì_func))

	)

1791 
	#sk_X509_ATTRIBUTE_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_ATTRIBUTE
, (°))

	)

1792 
	#sk_X509_ATTRIBUTE_p›
(
°
Ë
	`SKM_sk_p›
(
X509_ATTRIBUTE
, (°))

	)

1793 
	#sk_X509_ATTRIBUTE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_ATTRIBUTE
, (°))

	)

1794 
	#sk_X509_ATTRIBUTE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_ATTRIBUTE
, (°))

	)

1796 
	#sk_X509_CRL_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_CRL
, (cmp))

	)

1797 
	#sk_X509_CRL_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_CRL
)

	)

1798 
	#sk_X509_CRL_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_CRL
, (°))

	)

1799 
	#sk_X509_CRL_num
(
°
Ë
	`SKM_sk_num
(
X509_CRL
, (°))

	)

1800 
	#sk_X509_CRL_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_CRL
, (°), (i))

	)

1801 
	#sk_X509_CRL_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_CRL
, (°), (i), (vÆ))

	)

1802 
	#sk_X509_CRL_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_CRL
, (°))

	)

1803 
	#sk_X509_CRL_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_CRL
, (°), (vÆ))

	)

1804 
	#sk_X509_CRL_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_CRL
, (°), (vÆ))

	)

1805 
	#sk_X509_CRL_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_CRL
, (°), (vÆ))

	)

1806 
	#sk_X509_CRL_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_CRL
, (°), (vÆ))

	)

1807 
	#sk_X509_CRL_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_CRL
, (°), (i))

	)

1808 
	#sk_X509_CRL_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_CRL
, (°), (±r))

	)

1809 
	#sk_X509_CRL_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_CRL
, (°), (vÆ), (i))

	)

1810 
	#sk_X509_CRL_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_CRL
, (°), (cmp))

	)

1811 
	#sk_X509_CRL_dup
(
°
Ë
	`SKM_sk_dup
(
X509_CRL
, st)

	)

1812 
	#sk_X509_CRL_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_CRL
, (°), (‰ì_func))

	)

1813 
	#sk_X509_CRL_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_CRL
, (°))

	)

1814 
	#sk_X509_CRL_p›
(
°
Ë
	`SKM_sk_p›
(
X509_CRL
, (°))

	)

1815 
	#sk_X509_CRL_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_CRL
, (°))

	)

1816 
	#sk_X509_CRL_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_CRL
, (°))

	)

1818 
	#sk_X509_EXTENSION_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_EXTENSION
, (cmp))

	)

1819 
	#sk_X509_EXTENSION_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_EXTENSION
)

	)

1820 
	#sk_X509_EXTENSION_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_EXTENSION
, (°))

	)

1821 
	#sk_X509_EXTENSION_num
(
°
Ë
	`SKM_sk_num
(
X509_EXTENSION
, (°))

	)

1822 
	#sk_X509_EXTENSION_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_EXTENSION
, (°), (i))

	)

1823 
	#sk_X509_EXTENSION_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_EXTENSION
, (°), (i), (vÆ))

	)

1824 
	#sk_X509_EXTENSION_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_EXTENSION
, (°))

	)

1825 
	#sk_X509_EXTENSION_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_EXTENSION
, (°), (vÆ))

	)

1826 
	#sk_X509_EXTENSION_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_EXTENSION
, (°), (vÆ))

	)

1827 
	#sk_X509_EXTENSION_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_EXTENSION
, (°), (vÆ))

	)

1828 
	#sk_X509_EXTENSION_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_EXTENSION
, (°), (vÆ))

	)

1829 
	#sk_X509_EXTENSION_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_EXTENSION
, (°), (i))

	)

1830 
	#sk_X509_EXTENSION_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_EXTENSION
, (°), (±r))

	)

1831 
	#sk_X509_EXTENSION_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_EXTENSION
, (°), (vÆ), (i))

	)

1832 
	#sk_X509_EXTENSION_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_EXTENSION
, (°), (cmp))

	)

1833 
	#sk_X509_EXTENSION_dup
(
°
Ë
	`SKM_sk_dup
(
X509_EXTENSION
, st)

	)

1834 
	#sk_X509_EXTENSION_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_EXTENSION
, (°), (‰ì_func))

	)

1835 
	#sk_X509_EXTENSION_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_EXTENSION
, (°))

	)

1836 
	#sk_X509_EXTENSION_p›
(
°
Ë
	`SKM_sk_p›
(
X509_EXTENSION
, (°))

	)

1837 
	#sk_X509_EXTENSION_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_EXTENSION
, (°))

	)

1838 
	#sk_X509_EXTENSION_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_EXTENSION
, (°))

	)

1840 
	#sk_X509_INFO_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_INFO
, (cmp))

	)

1841 
	#sk_X509_INFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_INFO
)

	)

1842 
	#sk_X509_INFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_INFO
, (°))

	)

1843 
	#sk_X509_INFO_num
(
°
Ë
	`SKM_sk_num
(
X509_INFO
, (°))

	)

1844 
	#sk_X509_INFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_INFO
, (°), (i))

	)

1845 
	#sk_X509_INFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_INFO
, (°), (i), (vÆ))

	)

1846 
	#sk_X509_INFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_INFO
, (°))

	)

1847 
	#sk_X509_INFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_INFO
, (°), (vÆ))

	)

1848 
	#sk_X509_INFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_INFO
, (°), (vÆ))

	)

1849 
	#sk_X509_INFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_INFO
, (°), (vÆ))

	)

1850 
	#sk_X509_INFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_INFO
, (°), (vÆ))

	)

1851 
	#sk_X509_INFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_INFO
, (°), (i))

	)

1852 
	#sk_X509_INFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_INFO
, (°), (±r))

	)

1853 
	#sk_X509_INFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_INFO
, (°), (vÆ), (i))

	)

1854 
	#sk_X509_INFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_INFO
, (°), (cmp))

	)

1855 
	#sk_X509_INFO_dup
(
°
Ë
	`SKM_sk_dup
(
X509_INFO
, st)

	)

1856 
	#sk_X509_INFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_INFO
, (°), (‰ì_func))

	)

1857 
	#sk_X509_INFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_INFO
, (°))

	)

1858 
	#sk_X509_INFO_p›
(
°
Ë
	`SKM_sk_p›
(
X509_INFO
, (°))

	)

1859 
	#sk_X509_INFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_INFO
, (°))

	)

1860 
	#sk_X509_INFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_INFO
, (°))

	)

1862 
	#sk_X509_LOOKUP_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_LOOKUP
, (cmp))

	)

1863 
	#sk_X509_LOOKUP_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_LOOKUP
)

	)

1864 
	#sk_X509_LOOKUP_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_LOOKUP
, (°))

	)

1865 
	#sk_X509_LOOKUP_num
(
°
Ë
	`SKM_sk_num
(
X509_LOOKUP
, (°))

	)

1866 
	#sk_X509_LOOKUP_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_LOOKUP
, (°), (i))

	)

1867 
	#sk_X509_LOOKUP_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_LOOKUP
, (°), (i), (vÆ))

	)

1868 
	#sk_X509_LOOKUP_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_LOOKUP
, (°))

	)

1869 
	#sk_X509_LOOKUP_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_LOOKUP
, (°), (vÆ))

	)

1870 
	#sk_X509_LOOKUP_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_LOOKUP
, (°), (vÆ))

	)

1871 
	#sk_X509_LOOKUP_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_LOOKUP
, (°), (vÆ))

	)

1872 
	#sk_X509_LOOKUP_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_LOOKUP
, (°), (vÆ))

	)

1873 
	#sk_X509_LOOKUP_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_LOOKUP
, (°), (i))

	)

1874 
	#sk_X509_LOOKUP_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_LOOKUP
, (°), (±r))

	)

1875 
	#sk_X509_LOOKUP_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_LOOKUP
, (°), (vÆ), (i))

	)

1876 
	#sk_X509_LOOKUP_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_LOOKUP
, (°), (cmp))

	)

1877 
	#sk_X509_LOOKUP_dup
(
°
Ë
	`SKM_sk_dup
(
X509_LOOKUP
, st)

	)

1878 
	#sk_X509_LOOKUP_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_LOOKUP
, (°), (‰ì_func))

	)

1879 
	#sk_X509_LOOKUP_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_LOOKUP
, (°))

	)

1880 
	#sk_X509_LOOKUP_p›
(
°
Ë
	`SKM_sk_p›
(
X509_LOOKUP
, (°))

	)

1881 
	#sk_X509_LOOKUP_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_LOOKUP
, (°))

	)

1882 
	#sk_X509_LOOKUP_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_LOOKUP
, (°))

	)

1884 
	#sk_X509_NAME_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_NAME
, (cmp))

	)

1885 
	#sk_X509_NAME_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_NAME
)

	)

1886 
	#sk_X509_NAME_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_NAME
, (°))

	)

1887 
	#sk_X509_NAME_num
(
°
Ë
	`SKM_sk_num
(
X509_NAME
, (°))

	)

1888 
	#sk_X509_NAME_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_NAME
, (°), (i))

	)

1889 
	#sk_X509_NAME_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_NAME
, (°), (i), (vÆ))

	)

1890 
	#sk_X509_NAME_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_NAME
, (°))

	)

1891 
	#sk_X509_NAME_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_NAME
, (°), (vÆ))

	)

1892 
	#sk_X509_NAME_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_NAME
, (°), (vÆ))

	)

1893 
	#sk_X509_NAME_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_NAME
, (°), (vÆ))

	)

1894 
	#sk_X509_NAME_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_NAME
, (°), (vÆ))

	)

1895 
	#sk_X509_NAME_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_NAME
, (°), (i))

	)

1896 
	#sk_X509_NAME_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_NAME
, (°), (±r))

	)

1897 
	#sk_X509_NAME_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_NAME
, (°), (vÆ), (i))

	)

1898 
	#sk_X509_NAME_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_NAME
, (°), (cmp))

	)

1899 
	#sk_X509_NAME_dup
(
°
Ë
	`SKM_sk_dup
(
X509_NAME
, st)

	)

1900 
	#sk_X509_NAME_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_NAME
, (°), (‰ì_func))

	)

1901 
	#sk_X509_NAME_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_NAME
, (°))

	)

1902 
	#sk_X509_NAME_p›
(
°
Ë
	`SKM_sk_p›
(
X509_NAME
, (°))

	)

1903 
	#sk_X509_NAME_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_NAME
, (°))

	)

1904 
	#sk_X509_NAME_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_NAME
, (°))

	)

1906 
	#sk_X509_NAME_ENTRY_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_NAME_ENTRY
, (cmp))

	)

1907 
	#sk_X509_NAME_ENTRY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_NAME_ENTRY
)

	)

1908 
	#sk_X509_NAME_ENTRY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_NAME_ENTRY
, (°))

	)

1909 
	#sk_X509_NAME_ENTRY_num
(
°
Ë
	`SKM_sk_num
(
X509_NAME_ENTRY
, (°))

	)

1910 
	#sk_X509_NAME_ENTRY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_NAME_ENTRY
, (°), (i))

	)

1911 
	#sk_X509_NAME_ENTRY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_NAME_ENTRY
, (°), (i), (vÆ))

	)

1912 
	#sk_X509_NAME_ENTRY_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_NAME_ENTRY
, (°))

	)

1913 
	#sk_X509_NAME_ENTRY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_NAME_ENTRY
, (°), (vÆ))

	)

1914 
	#sk_X509_NAME_ENTRY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_NAME_ENTRY
, (°), (vÆ))

	)

1915 
	#sk_X509_NAME_ENTRY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_NAME_ENTRY
, (°), (vÆ))

	)

1916 
	#sk_X509_NAME_ENTRY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_NAME_ENTRY
, (°), (vÆ))

	)

1917 
	#sk_X509_NAME_ENTRY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_NAME_ENTRY
, (°), (i))

	)

1918 
	#sk_X509_NAME_ENTRY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_NAME_ENTRY
, (°), (±r))

	)

1919 
	#sk_X509_NAME_ENTRY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_NAME_ENTRY
, (°), (vÆ), (i))

	)

1920 
	#sk_X509_NAME_ENTRY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_NAME_ENTRY
, (°), (cmp))

	)

1921 
	#sk_X509_NAME_ENTRY_dup
(
°
Ë
	`SKM_sk_dup
(
X509_NAME_ENTRY
, st)

	)

1922 
	#sk_X509_NAME_ENTRY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_NAME_ENTRY
, (°), (‰ì_func))

	)

1923 
	#sk_X509_NAME_ENTRY_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_NAME_ENTRY
, (°))

	)

1924 
	#sk_X509_NAME_ENTRY_p›
(
°
Ë
	`SKM_sk_p›
(
X509_NAME_ENTRY
, (°))

	)

1925 
	#sk_X509_NAME_ENTRY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_NAME_ENTRY
, (°))

	)

1926 
	#sk_X509_NAME_ENTRY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_NAME_ENTRY
, (°))

	)

1928 
	#sk_X509_OBJECT_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_OBJECT
, (cmp))

	)

1929 
	#sk_X509_OBJECT_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_OBJECT
)

	)

1930 
	#sk_X509_OBJECT_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_OBJECT
, (°))

	)

1931 
	#sk_X509_OBJECT_num
(
°
Ë
	`SKM_sk_num
(
X509_OBJECT
, (°))

	)

1932 
	#sk_X509_OBJECT_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_OBJECT
, (°), (i))

	)

1933 
	#sk_X509_OBJECT_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_OBJECT
, (°), (i), (vÆ))

	)

1934 
	#sk_X509_OBJECT_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_OBJECT
, (°))

	)

1935 
	#sk_X509_OBJECT_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_OBJECT
, (°), (vÆ))

	)

1936 
	#sk_X509_OBJECT_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_OBJECT
, (°), (vÆ))

	)

1937 
	#sk_X509_OBJECT_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_OBJECT
, (°), (vÆ))

	)

1938 
	#sk_X509_OBJECT_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_OBJECT
, (°), (vÆ))

	)

1939 
	#sk_X509_OBJECT_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_OBJECT
, (°), (i))

	)

1940 
	#sk_X509_OBJECT_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_OBJECT
, (°), (±r))

	)

1941 
	#sk_X509_OBJECT_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_OBJECT
, (°), (vÆ), (i))

	)

1942 
	#sk_X509_OBJECT_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_OBJECT
, (°), (cmp))

	)

1943 
	#sk_X509_OBJECT_dup
(
°
Ë
	`SKM_sk_dup
(
X509_OBJECT
, st)

	)

1944 
	#sk_X509_OBJECT_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_OBJECT
, (°), (‰ì_func))

	)

1945 
	#sk_X509_OBJECT_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_OBJECT
, (°))

	)

1946 
	#sk_X509_OBJECT_p›
(
°
Ë
	`SKM_sk_p›
(
X509_OBJECT
, (°))

	)

1947 
	#sk_X509_OBJECT_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_OBJECT
, (°))

	)

1948 
	#sk_X509_OBJECT_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_OBJECT
, (°))

	)

1950 
	#sk_X509_POLICY_DATA_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_POLICY_DATA
, (cmp))

	)

1951 
	#sk_X509_POLICY_DATA_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_POLICY_DATA
)

	)

1952 
	#sk_X509_POLICY_DATA_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_POLICY_DATA
, (°))

	)

1953 
	#sk_X509_POLICY_DATA_num
(
°
Ë
	`SKM_sk_num
(
X509_POLICY_DATA
, (°))

	)

1954 
	#sk_X509_POLICY_DATA_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_POLICY_DATA
, (°), (i))

	)

1955 
	#sk_X509_POLICY_DATA_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_POLICY_DATA
, (°), (i), (vÆ))

	)

1956 
	#sk_X509_POLICY_DATA_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_POLICY_DATA
, (°))

	)

1957 
	#sk_X509_POLICY_DATA_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_POLICY_DATA
, (°), (vÆ))

	)

1958 
	#sk_X509_POLICY_DATA_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_POLICY_DATA
, (°), (vÆ))

	)

1959 
	#sk_X509_POLICY_DATA_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_POLICY_DATA
, (°), (vÆ))

	)

1960 
	#sk_X509_POLICY_DATA_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_POLICY_DATA
, (°), (vÆ))

	)

1961 
	#sk_X509_POLICY_DATA_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_POLICY_DATA
, (°), (i))

	)

1962 
	#sk_X509_POLICY_DATA_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_POLICY_DATA
, (°), (±r))

	)

1963 
	#sk_X509_POLICY_DATA_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_POLICY_DATA
, (°), (vÆ), (i))

	)

1964 
	#sk_X509_POLICY_DATA_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_POLICY_DATA
, (°), (cmp))

	)

1965 
	#sk_X509_POLICY_DATA_dup
(
°
Ë
	`SKM_sk_dup
(
X509_POLICY_DATA
, st)

	)

1966 
	#sk_X509_POLICY_DATA_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_POLICY_DATA
, (°), (‰ì_func))

	)

1967 
	#sk_X509_POLICY_DATA_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_POLICY_DATA
, (°))

	)

1968 
	#sk_X509_POLICY_DATA_p›
(
°
Ë
	`SKM_sk_p›
(
X509_POLICY_DATA
, (°))

	)

1969 
	#sk_X509_POLICY_DATA_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_POLICY_DATA
, (°))

	)

1970 
	#sk_X509_POLICY_DATA_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_POLICY_DATA
, (°))

	)

1972 
	#sk_X509_POLICY_NODE_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_POLICY_NODE
, (cmp))

	)

1973 
	#sk_X509_POLICY_NODE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_POLICY_NODE
)

	)

1974 
	#sk_X509_POLICY_NODE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_POLICY_NODE
, (°))

	)

1975 
	#sk_X509_POLICY_NODE_num
(
°
Ë
	`SKM_sk_num
(
X509_POLICY_NODE
, (°))

	)

1976 
	#sk_X509_POLICY_NODE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_POLICY_NODE
, (°), (i))

	)

1977 
	#sk_X509_POLICY_NODE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_POLICY_NODE
, (°), (i), (vÆ))

	)

1978 
	#sk_X509_POLICY_NODE_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_POLICY_NODE
, (°))

	)

1979 
	#sk_X509_POLICY_NODE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_POLICY_NODE
, (°), (vÆ))

	)

1980 
	#sk_X509_POLICY_NODE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_POLICY_NODE
, (°), (vÆ))

	)

1981 
	#sk_X509_POLICY_NODE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_POLICY_NODE
, (°), (vÆ))

	)

1982 
	#sk_X509_POLICY_NODE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_POLICY_NODE
, (°), (vÆ))

	)

1983 
	#sk_X509_POLICY_NODE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_POLICY_NODE
, (°), (i))

	)

1984 
	#sk_X509_POLICY_NODE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_POLICY_NODE
, (°), (±r))

	)

1985 
	#sk_X509_POLICY_NODE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_POLICY_NODE
, (°), (vÆ), (i))

	)

1986 
	#sk_X509_POLICY_NODE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_POLICY_NODE
, (°), (cmp))

	)

1987 
	#sk_X509_POLICY_NODE_dup
(
°
Ë
	`SKM_sk_dup
(
X509_POLICY_NODE
, st)

	)

1988 
	#sk_X509_POLICY_NODE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_POLICY_NODE
, (°), (‰ì_func))

	)

1989 
	#sk_X509_POLICY_NODE_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_POLICY_NODE
, (°))

	)

1990 
	#sk_X509_POLICY_NODE_p›
(
°
Ë
	`SKM_sk_p›
(
X509_POLICY_NODE
, (°))

	)

1991 
	#sk_X509_POLICY_NODE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_POLICY_NODE
, (°))

	)

1992 
	#sk_X509_POLICY_NODE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_POLICY_NODE
, (°))

	)

1994 
	#sk_X509_PURPOSE_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_PURPOSE
, (cmp))

	)

1995 
	#sk_X509_PURPOSE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_PURPOSE
)

	)

1996 
	#sk_X509_PURPOSE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_PURPOSE
, (°))

	)

1997 
	#sk_X509_PURPOSE_num
(
°
Ë
	`SKM_sk_num
(
X509_PURPOSE
, (°))

	)

1998 
	#sk_X509_PURPOSE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_PURPOSE
, (°), (i))

	)

1999 
	#sk_X509_PURPOSE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_PURPOSE
, (°), (i), (vÆ))

	)

2000 
	#sk_X509_PURPOSE_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_PURPOSE
, (°))

	)

2001 
	#sk_X509_PURPOSE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_PURPOSE
, (°), (vÆ))

	)

2002 
	#sk_X509_PURPOSE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_PURPOSE
, (°), (vÆ))

	)

2003 
	#sk_X509_PURPOSE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_PURPOSE
, (°), (vÆ))

	)

2004 
	#sk_X509_PURPOSE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_PURPOSE
, (°), (vÆ))

	)

2005 
	#sk_X509_PURPOSE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_PURPOSE
, (°), (i))

	)

2006 
	#sk_X509_PURPOSE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_PURPOSE
, (°), (±r))

	)

2007 
	#sk_X509_PURPOSE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_PURPOSE
, (°), (vÆ), (i))

	)

2008 
	#sk_X509_PURPOSE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_PURPOSE
, (°), (cmp))

	)

2009 
	#sk_X509_PURPOSE_dup
(
°
Ë
	`SKM_sk_dup
(
X509_PURPOSE
, st)

	)

2010 
	#sk_X509_PURPOSE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_PURPOSE
, (°), (‰ì_func))

	)

2011 
	#sk_X509_PURPOSE_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_PURPOSE
, (°))

	)

2012 
	#sk_X509_PURPOSE_p›
(
°
Ë
	`SKM_sk_p›
(
X509_PURPOSE
, (°))

	)

2013 
	#sk_X509_PURPOSE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_PURPOSE
, (°))

	)

2014 
	#sk_X509_PURPOSE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_PURPOSE
, (°))

	)

2016 
	#sk_X509_REVOKED_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_REVOKED
, (cmp))

	)

2017 
	#sk_X509_REVOKED_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_REVOKED
)

	)

2018 
	#sk_X509_REVOKED_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_REVOKED
, (°))

	)

2019 
	#sk_X509_REVOKED_num
(
°
Ë
	`SKM_sk_num
(
X509_REVOKED
, (°))

	)

2020 
	#sk_X509_REVOKED_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_REVOKED
, (°), (i))

	)

2021 
	#sk_X509_REVOKED_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_REVOKED
, (°), (i), (vÆ))

	)

2022 
	#sk_X509_REVOKED_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_REVOKED
, (°))

	)

2023 
	#sk_X509_REVOKED_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_REVOKED
, (°), (vÆ))

	)

2024 
	#sk_X509_REVOKED_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_REVOKED
, (°), (vÆ))

	)

2025 
	#sk_X509_REVOKED_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_REVOKED
, (°), (vÆ))

	)

2026 
	#sk_X509_REVOKED_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_REVOKED
, (°), (vÆ))

	)

2027 
	#sk_X509_REVOKED_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_REVOKED
, (°), (i))

	)

2028 
	#sk_X509_REVOKED_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_REVOKED
, (°), (±r))

	)

2029 
	#sk_X509_REVOKED_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_REVOKED
, (°), (vÆ), (i))

	)

2030 
	#sk_X509_REVOKED_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_REVOKED
, (°), (cmp))

	)

2031 
	#sk_X509_REVOKED_dup
(
°
Ë
	`SKM_sk_dup
(
X509_REVOKED
, st)

	)

2032 
	#sk_X509_REVOKED_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_REVOKED
, (°), (‰ì_func))

	)

2033 
	#sk_X509_REVOKED_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_REVOKED
, (°))

	)

2034 
	#sk_X509_REVOKED_p›
(
°
Ë
	`SKM_sk_p›
(
X509_REVOKED
, (°))

	)

2035 
	#sk_X509_REVOKED_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_REVOKED
, (°))

	)

2036 
	#sk_X509_REVOKED_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_REVOKED
, (°))

	)

2038 
	#sk_X509_TRUST_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_TRUST
, (cmp))

	)

2039 
	#sk_X509_TRUST_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_TRUST
)

	)

2040 
	#sk_X509_TRUST_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_TRUST
, (°))

	)

2041 
	#sk_X509_TRUST_num
(
°
Ë
	`SKM_sk_num
(
X509_TRUST
, (°))

	)

2042 
	#sk_X509_TRUST_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_TRUST
, (°), (i))

	)

2043 
	#sk_X509_TRUST_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_TRUST
, (°), (i), (vÆ))

	)

2044 
	#sk_X509_TRUST_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_TRUST
, (°))

	)

2045 
	#sk_X509_TRUST_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_TRUST
, (°), (vÆ))

	)

2046 
	#sk_X509_TRUST_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_TRUST
, (°), (vÆ))

	)

2047 
	#sk_X509_TRUST_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_TRUST
, (°), (vÆ))

	)

2048 
	#sk_X509_TRUST_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_TRUST
, (°), (vÆ))

	)

2049 
	#sk_X509_TRUST_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_TRUST
, (°), (i))

	)

2050 
	#sk_X509_TRUST_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_TRUST
, (°), (±r))

	)

2051 
	#sk_X509_TRUST_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_TRUST
, (°), (vÆ), (i))

	)

2052 
	#sk_X509_TRUST_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_TRUST
, (°), (cmp))

	)

2053 
	#sk_X509_TRUST_dup
(
°
Ë
	`SKM_sk_dup
(
X509_TRUST
, st)

	)

2054 
	#sk_X509_TRUST_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_TRUST
, (°), (‰ì_func))

	)

2055 
	#sk_X509_TRUST_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_TRUST
, (°))

	)

2056 
	#sk_X509_TRUST_p›
(
°
Ë
	`SKM_sk_p›
(
X509_TRUST
, (°))

	)

2057 
	#sk_X509_TRUST_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_TRUST
, (°))

	)

2058 
	#sk_X509_TRUST_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_TRUST
, (°))

	)

2060 
	#sk_X509_VERIFY_PARAM_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_VERIFY_PARAM
, (cmp))

	)

2061 
	#sk_X509_VERIFY_PARAM_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_VERIFY_PARAM
)

	)

2062 
	#sk_X509_VERIFY_PARAM_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_VERIFY_PARAM
, (°))

	)

2063 
	#sk_X509_VERIFY_PARAM_num
(
°
Ë
	`SKM_sk_num
(
X509_VERIFY_PARAM
, (°))

	)

2064 
	#sk_X509_VERIFY_PARAM_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_VERIFY_PARAM
, (°), (i))

	)

2065 
	#sk_X509_VERIFY_PARAM_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_VERIFY_PARAM
, (°), (i), (vÆ))

	)

2066 
	#sk_X509_VERIFY_PARAM_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_VERIFY_PARAM
, (°))

	)

2067 
	#sk_X509_VERIFY_PARAM_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_VERIFY_PARAM
, (°), (vÆ))

	)

2068 
	#sk_X509_VERIFY_PARAM_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_VERIFY_PARAM
, (°), (vÆ))

	)

2069 
	#sk_X509_VERIFY_PARAM_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_VERIFY_PARAM
, (°), (vÆ))

	)

2070 
	#sk_X509_VERIFY_PARAM_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_VERIFY_PARAM
, (°), (vÆ))

	)

2071 
	#sk_X509_VERIFY_PARAM_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_VERIFY_PARAM
, (°), (i))

	)

2072 
	#sk_X509_VERIFY_PARAM_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_VERIFY_PARAM
, (°), (±r))

	)

2073 
	#sk_X509_VERIFY_PARAM_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_VERIFY_PARAM
, (°), (vÆ), (i))

	)

2074 
	#sk_X509_VERIFY_PARAM_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_VERIFY_PARAM
, (°), (cmp))

	)

2075 
	#sk_X509_VERIFY_PARAM_dup
(
°
Ë
	`SKM_sk_dup
(
X509_VERIFY_PARAM
, st)

	)

2076 
	#sk_X509_VERIFY_PARAM_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_VERIFY_PARAM
, (°), (‰ì_func))

	)

2077 
	#sk_X509_VERIFY_PARAM_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_VERIFY_PARAM
, (°))

	)

2078 
	#sk_X509_VERIFY_PARAM_p›
(
°
Ë
	`SKM_sk_p›
(
X509_VERIFY_PARAM
, (°))

	)

2079 
	#sk_X509_VERIFY_PARAM_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_VERIFY_PARAM
, (°))

	)

2080 
	#sk_X509_VERIFY_PARAM_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_VERIFY_PARAM
, (°))

	)

2082 
	#sk_nid_åùÀ_√w
(
cmp
Ë
	`SKM_sk_√w
(
nid_åùÀ
, (cmp))

	)

2083 
	#sk_nid_åùÀ_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
nid_åùÀ
)

	)

2084 
	#sk_nid_åùÀ_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
nid_åùÀ
, (°))

	)

2085 
	#sk_nid_åùÀ_num
(
°
Ë
	`SKM_sk_num
(
nid_åùÀ
, (°))

	)

2086 
	#sk_nid_åùÀ_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
nid_åùÀ
, (°), (i))

	)

2087 
	#sk_nid_åùÀ_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
nid_åùÀ
, (°), (i), (vÆ))

	)

2088 
	#sk_nid_åùÀ_zîo
(
°
Ë
	`SKM_sk_zîo
(
nid_åùÀ
, (°))

	)

2089 
	#sk_nid_åùÀ_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
nid_åùÀ
, (°), (vÆ))

	)

2090 
	#sk_nid_åùÀ_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
nid_åùÀ
, (°), (vÆ))

	)

2091 
	#sk_nid_åùÀ_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
nid_åùÀ
, (°), (vÆ))

	)

2092 
	#sk_nid_åùÀ_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
nid_åùÀ
, (°), (vÆ))

	)

2093 
	#sk_nid_åùÀ_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
nid_åùÀ
, (°), (i))

	)

2094 
	#sk_nid_åùÀ_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
nid_åùÀ
, (°), (±r))

	)

2095 
	#sk_nid_åùÀ_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
nid_åùÀ
, (°), (vÆ), (i))

	)

2096 
	#sk_nid_åùÀ_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
nid_åùÀ
, (°), (cmp))

	)

2097 
	#sk_nid_åùÀ_dup
(
°
Ë
	`SKM_sk_dup
(
nid_åùÀ
, st)

	)

2098 
	#sk_nid_åùÀ_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
nid_åùÀ
, (°), (‰ì_func))

	)

2099 
	#sk_nid_åùÀ_shi·
(
°
Ë
	`SKM_sk_shi·
(
nid_åùÀ
, (°))

	)

2100 
	#sk_nid_åùÀ_p›
(
°
Ë
	`SKM_sk_p›
(
nid_åùÀ
, (°))

	)

2101 
	#sk_nid_åùÀ_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
nid_åùÀ
, (°))

	)

2102 
	#sk_nid_åùÀ_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
nid_åùÀ
, (°))

	)

2104 
	#sk_void_√w
(
cmp
Ë
	`SKM_sk_√w
(, (cmp))

	)

2105 
	#sk_void_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
()

	)

2106 
	#sk_void_‰ì
(
°
Ë
	`SKM_sk_‰ì
(, (°))

	)

2107 
	#sk_void_num
(
°
Ë
	`SKM_sk_num
(, (°))

	)

2108 
	#sk_void_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(, (°), (i))

	)

2109 
	#sk_void_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(, (°), (i), (vÆ))

	)

2110 
	#sk_void_zîo
(
°
Ë
	`SKM_sk_zîo
(, (°))

	)

2111 
	#sk_void_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(, (°), (vÆ))

	)

2112 
	#sk_void_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(, (°), (vÆ))

	)

2113 
	#sk_void_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(, (°), (vÆ))

	)

2114 
	#sk_void_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(, (°), (vÆ))

	)

2115 
	#sk_void_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(, (°), (i))

	)

2116 
	#sk_void_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(, (°), (±r))

	)

2117 
	#sk_void_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(, (°), (vÆ), (i))

	)

2118 
	#sk_void_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(, (°), (cmp))

	)

2119 
	#sk_void_dup
(
°
Ë
	`SKM_sk_dup
(, st)

	)

2120 
	#sk_void_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(, (°), (‰ì_func))

	)

2121 
	#sk_void_shi·
(
°
Ë
	`SKM_sk_shi·
(, (°))

	)

2122 
	#sk_void_p›
(
°
Ë
	`SKM_sk_p›
(, (°))

	)

2123 
	#sk_void_s‹t
(
°
Ë
	`SKM_sk_s‹t
(, (°))

	)

2124 
	#sk_void_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(, (°))

	)

2126 
	#sk_OPENSSL_STRING_√w
(
cmp
Ë((
	`STACK_OF
(
OPENSSL_STRING
Ë*)
	`sk_√w
(
	`CHECKED_SK_CMP_FUNC
(, cmp)))

	)

2127 
	#sk_OPENSSL_STRING_√w_nuŒ
(Ë((
	`STACK_OF
(
OPENSSL_STRING
Ë*)
	`sk_√w_nuŒ
())

	)

2128 
	#sk_OPENSSL_STRING_push
(
°
, 
vÆ
Ë
	`sk_push
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, st), 
	`CHECKED_PTR_OF
(, vÆ))

	)

2129 
	#sk_OPENSSL_STRING_föd
(
°
, 
vÆ
Ë
	`sk_föd
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, st), 
	`CHECKED_PTR_OF
(, vÆ))

	)

2130 
	#sk_OPENSSL_STRING_vÆue
(
°
, 
i
Ë((
OPENSSL_STRING
)
	`sk_vÆue
(
	`CHECKED_STACK_OF
(OPENSSL_STRING, st), i))

	)

2131 
	#sk_OPENSSL_STRING_num
(
°
Ë
	`SKM_sk_num
(
OPENSSL_STRING
, st)

	)

2132 
	#sk_OPENSSL_STRING_p›_‰ì
(
°
, 
‰ì_func
Ë
	`sk_p›_‰ì
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, st), 
	`CHECKED_SK_FREE_FUNC2
(OPENSSL_STRING, fªe_func))

	)

2133 
	#sk_OPENSSL_STRING_ö£π
(
°
, 
vÆ
, 
i
Ë
	`sk_ö£π
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, st), 
	`CHECKED_PTR_OF
(, vÆ), i)

	)

2134 
	#sk_OPENSSL_STRING_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OPENSSL_STRING
, st)

	)

2135 
	#sk_OPENSSL_STRING_£t
(
°
, 
i
, 
vÆ
Ë
	`sk_£t
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, st), i, 
	`CHECKED_PTR_OF
(, vÆ))

	)

2136 
	#sk_OPENSSL_STRING_zîo
(
°
Ë
	`SKM_sk_zîo
(
OPENSSL_STRING
, (°))

	)

2137 
	#sk_OPENSSL_STRING_unshi·
(
°
, 
vÆ
Ë
	`sk_unshi·
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, st), 
	`CHECKED_PTR_OF
(, vÆ))

	)

2138 
	#sk_OPENSSL_STRING_föd_ex
(
°
, 
vÆ
Ë
	`sk_föd_ex
((
_STACK
 *)
	`CHECKED_CONST_PTR_OF
(
	`STACK_OF
(
OPENSSL_STRING
), st), CHECKED_CONST_PTR_OF(, vÆ))

	)

2139 
	#sk_OPENSSL_STRING_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OPENSSL_STRING
, (°), (i))

	)

2140 
	#sk_OPENSSL_STRING_dñëe_±r
(
°
, 
±r
Ë(
OPENSSL_STRING
 *)
	`sk_dñëe_±r
(
	`CHECKED_STACK_OF
(OPENSSL_STRING, st), 
	`CHECKED_PTR_OF
(,Öå))

	)

2141 
	#sk_OPENSSL_STRING_£t_cmp_func
(
°
, 
cmp
) \

2143 
	`sk_£t_cmp_func
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, 
°
), 
	`CHECKED_SK_CMP_FUNC
(, 
cmp
)))

	)

2144 
	#sk_OPENSSL_STRING_dup
(
°
Ë
	`SKM_sk_dup
(
OPENSSL_STRING
, st)

	)

2145 
	#sk_OPENSSL_STRING_shi·
(
°
Ë
	`SKM_sk_shi·
(
OPENSSL_STRING
, (°))

	)

2146 
	#sk_OPENSSL_STRING_p›
(
°
Ë(*)
	`sk_p›
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, st))

	)

2147 
	#sk_OPENSSL_STRING_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OPENSSL_STRING
, (°))

	)

2148 
	#sk_OPENSSL_STRING_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OPENSSL_STRING
, (°))

	)

2151 
	#sk_OPENSSL_BLOCK_√w
(
cmp
Ë((
	`STACK_OF
(
OPENSSL_BLOCK
Ë*)
	`sk_√w
(
	`CHECKED_SK_CMP_FUNC
(, cmp)))

	)

2152 
	#sk_OPENSSL_BLOCK_√w_nuŒ
(Ë((
	`STACK_OF
(
OPENSSL_BLOCK
Ë*)
	`sk_√w_nuŒ
())

	)

2153 
	#sk_OPENSSL_BLOCK_push
(
°
, 
vÆ
Ë
	`sk_push
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, st), 
	`CHECKED_PTR_OF
(, vÆ))

	)

2154 
	#sk_OPENSSL_BLOCK_föd
(
°
, 
vÆ
Ë
	`sk_föd
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, st), 
	`CHECKED_PTR_OF
(, vÆ))

	)

2155 
	#sk_OPENSSL_BLOCK_vÆue
(
°
, 
i
Ë((
OPENSSL_BLOCK
)
	`sk_vÆue
(
	`CHECKED_STACK_OF
(OPENSSL_BLOCK, st), i))

	)

2156 
	#sk_OPENSSL_BLOCK_num
(
°
Ë
	`SKM_sk_num
(
OPENSSL_BLOCK
, st)

	)

2157 
	#sk_OPENSSL_BLOCK_p›_‰ì
(
°
, 
‰ì_func
Ë
	`sk_p›_‰ì
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, st), 
	`CHECKED_SK_FREE_FUNC2
(OPENSSL_BLOCK, fªe_func))

	)

2158 
	#sk_OPENSSL_BLOCK_ö£π
(
°
, 
vÆ
, 
i
Ë
	`sk_ö£π
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, st), 
	`CHECKED_PTR_OF
(, vÆ), i)

	)

2159 
	#sk_OPENSSL_BLOCK_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OPENSSL_BLOCK
, st)

	)

2160 
	#sk_OPENSSL_BLOCK_£t
(
°
, 
i
, 
vÆ
Ë
	`sk_£t
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, st), i, 
	`CHECKED_PTR_OF
(, vÆ))

	)

2161 
	#sk_OPENSSL_BLOCK_zîo
(
°
Ë
	`SKM_sk_zîo
(
OPENSSL_BLOCK
, (°))

	)

2162 
	#sk_OPENSSL_BLOCK_unshi·
(
°
, 
vÆ
Ë
	`sk_unshi·
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, st), 
	`CHECKED_PTR_OF
(, vÆ))

	)

2163 
	#sk_OPENSSL_BLOCK_föd_ex
(
°
, 
vÆ
Ë
	`sk_föd_ex
((
_STACK
 *)
	`CHECKED_CONST_PTR_OF
(
	`STACK_OF
(
OPENSSL_BLOCK
), st), CHECKED_CONST_PTR_OF(, vÆ))

	)

2164 
	#sk_OPENSSL_BLOCK_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OPENSSL_BLOCK
, (°), (i))

	)

2165 
	#sk_OPENSSL_BLOCK_dñëe_±r
(
°
, 
±r
Ë(
OPENSSL_BLOCK
 *)
	`sk_dñëe_±r
(
	`CHECKED_STACK_OF
(OPENSSL_BLOCK, st), 
	`CHECKED_PTR_OF
(,Öå))

	)

2166 
	#sk_OPENSSL_BLOCK_£t_cmp_func
(
°
, 
cmp
) \

2168 
	`sk_£t_cmp_func
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, 
°
), 
	`CHECKED_SK_CMP_FUNC
(, 
cmp
)))

	)

2169 
	#sk_OPENSSL_BLOCK_dup
(
°
Ë
	`SKM_sk_dup
(
OPENSSL_BLOCK
, st)

	)

2170 
	#sk_OPENSSL_BLOCK_shi·
(
°
Ë
	`SKM_sk_shi·
(
OPENSSL_BLOCK
, (°))

	)

2171 
	#sk_OPENSSL_BLOCK_p›
(
°
Ë(*)
	`sk_p›
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, st))

	)

2172 
	#sk_OPENSSL_BLOCK_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OPENSSL_BLOCK
, (°))

	)

2173 
	#sk_OPENSSL_BLOCK_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OPENSSL_BLOCK
, (°))

	)

2176 
	#sk_OPENSSL_PSTRING_√w
(
cmp
Ë((
	`STACK_OF
(
OPENSSL_PSTRING
Ë*)
	`sk_√w
(
	`CHECKED_SK_CMP_FUNC
(
OPENSSL_STRING
, cmp)))

	)

2177 
	#sk_OPENSSL_PSTRING_√w_nuŒ
(Ë((
	`STACK_OF
(
OPENSSL_PSTRING
Ë*)
	`sk_√w_nuŒ
())

	)

2178 
	#sk_OPENSSL_PSTRING_push
(
°
, 
vÆ
Ë
	`sk_push
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, st), 
	`CHECKED_PTR_OF
(
OPENSSL_STRING
, vÆ))

	)

2179 
	#sk_OPENSSL_PSTRING_föd
(
°
, 
vÆ
Ë
	`sk_föd
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, st), 
	`CHECKED_PTR_OF
(
OPENSSL_STRING
, vÆ))

	)

2180 
	#sk_OPENSSL_PSTRING_vÆue
(
°
, 
i
Ë((
OPENSSL_PSTRING
)
	`sk_vÆue
(
	`CHECKED_STACK_OF
(OPENSSL_PSTRING, st), i))

	)

2181 
	#sk_OPENSSL_PSTRING_num
(
°
Ë
	`SKM_sk_num
(
OPENSSL_PSTRING
, st)

	)

2182 
	#sk_OPENSSL_PSTRING_p›_‰ì
(
°
, 
‰ì_func
Ë
	`sk_p›_‰ì
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, st), 
	`CHECKED_SK_FREE_FUNC2
(OPENSSL_PSTRING, fªe_func))

	)

2183 
	#sk_OPENSSL_PSTRING_ö£π
(
°
, 
vÆ
, 
i
Ë
	`sk_ö£π
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, st), 
	`CHECKED_PTR_OF
(
OPENSSL_STRING
, vÆ), i)

	)

2184 
	#sk_OPENSSL_PSTRING_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OPENSSL_PSTRING
, st)

	)

2185 
	#sk_OPENSSL_PSTRING_£t
(
°
, 
i
, 
vÆ
Ë
	`sk_£t
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, st), i, 
	`CHECKED_PTR_OF
(
OPENSSL_STRING
, vÆ))

	)

2186 
	#sk_OPENSSL_PSTRING_zîo
(
°
Ë
	`SKM_sk_zîo
(
OPENSSL_PSTRING
, (°))

	)

2187 
	#sk_OPENSSL_PSTRING_unshi·
(
°
, 
vÆ
Ë
	`sk_unshi·
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, st), 
	`CHECKED_PTR_OF
(
OPENSSL_STRING
, vÆ))

	)

2188 
	#sk_OPENSSL_PSTRING_föd_ex
(
°
, 
vÆ
Ë
	`sk_föd_ex
((
_STACK
 *)
	`CHECKED_CONST_PTR_OF
(
	`STACK_OF
(
OPENSSL_PSTRING
), st), CHECKED_CONST_PTR_OF(
OPENSSL_STRING
, vÆ))

	)

2189 
	#sk_OPENSSL_PSTRING_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OPENSSL_PSTRING
, (°), (i))

	)

2190 
	#sk_OPENSSL_PSTRING_dñëe_±r
(
°
, 
±r
Ë(
OPENSSL_PSTRING
 *)
	`sk_dñëe_±r
(
	`CHECKED_STACK_OF
(OPENSSL_PSTRING, st), 
	`CHECKED_PTR_OF
(
OPENSSL_STRING
,Öå))

	)

2191 
	#sk_OPENSSL_PSTRING_£t_cmp_func
(
°
, 
cmp
) \

2192 (((*)(c⁄° 
OPENSSL_STRING
 * const *,const OPENSSL_STRING * const *)) \

2193 
	`sk_£t_cmp_func
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, 
°
), 
	`CHECKED_SK_CMP_FUNC
(
OPENSSL_STRING
, 
cmp
)))

	)

2194 
	#sk_OPENSSL_PSTRING_dup
(
°
Ë
	`SKM_sk_dup
(
OPENSSL_PSTRING
, st)

	)

2195 
	#sk_OPENSSL_PSTRING_shi·
(
°
Ë
	`SKM_sk_shi·
(
OPENSSL_PSTRING
, (°))

	)

2196 
	#sk_OPENSSL_PSTRING_p›
(
°
Ë(
OPENSSL_STRING
 *)
	`sk_p›
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, st))

	)

2197 
	#sk_OPENSSL_PSTRING_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OPENSSL_PSTRING
, (°))

	)

2198 
	#sk_OPENSSL_PSTRING_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OPENSSL_PSTRING
, (°))

	)

2201 
	#d2i_ASN1_SET_OF_ACCESS_DESCRIPTION
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2202 
	`SKM_ASN1_SET_OF_d2i
(
ACCESS_DESCRIPTION
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2203 
	#i2d_ASN1_SET_OF_ACCESS_DESCRIPTION
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2204 
	`SKM_ASN1_SET_OF_i2d
(
ACCESS_DESCRIPTION
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2205 
	#ASN1_£q_∑ck_ACCESS_DESCRIPTION
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2206 
	`SKM_ASN1_£q_∑ck
(
ACCESS_DESCRIPTION
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2207 
	#ASN1_£q_u≈ack_ACCESS_DESCRIPTION
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2208 
	`SKM_ASN1_£q_u≈ack
(
ACCESS_DESCRIPTION
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2210 
	#d2i_ASN1_SET_OF_ASN1_INTEGER
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2211 
	`SKM_ASN1_SET_OF_d2i
(
ASN1_INTEGER
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2212 
	#i2d_ASN1_SET_OF_ASN1_INTEGER
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2213 
	`SKM_ASN1_SET_OF_i2d
(
ASN1_INTEGER
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2214 
	#ASN1_£q_∑ck_ASN1_INTEGER
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2215 
	`SKM_ASN1_£q_∑ck
(
ASN1_INTEGER
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2216 
	#ASN1_£q_u≈ack_ASN1_INTEGER
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2217 
	`SKM_ASN1_£q_u≈ack
(
ASN1_INTEGER
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2219 
	#d2i_ASN1_SET_OF_ASN1_OBJECT
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2220 
	`SKM_ASN1_SET_OF_d2i
(
ASN1_OBJECT
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2221 
	#i2d_ASN1_SET_OF_ASN1_OBJECT
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2222 
	`SKM_ASN1_SET_OF_i2d
(
ASN1_OBJECT
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2223 
	#ASN1_£q_∑ck_ASN1_OBJECT
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2224 
	`SKM_ASN1_£q_∑ck
(
ASN1_OBJECT
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2225 
	#ASN1_£q_u≈ack_ASN1_OBJECT
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2226 
	`SKM_ASN1_£q_u≈ack
(
ASN1_OBJECT
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2228 
	#d2i_ASN1_SET_OF_ASN1_TYPE
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2229 
	`SKM_ASN1_SET_OF_d2i
(
ASN1_TYPE
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2230 
	#i2d_ASN1_SET_OF_ASN1_TYPE
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2231 
	`SKM_ASN1_SET_OF_i2d
(
ASN1_TYPE
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2232 
	#ASN1_£q_∑ck_ASN1_TYPE
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2233 
	`SKM_ASN1_£q_∑ck
(
ASN1_TYPE
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2234 
	#ASN1_£q_u≈ack_ASN1_TYPE
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2235 
	`SKM_ASN1_£q_u≈ack
(
ASN1_TYPE
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2237 
	#d2i_ASN1_SET_OF_ASN1_UTF8STRING
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2238 
	`SKM_ASN1_SET_OF_d2i
(
ASN1_UTF8STRING
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2239 
	#i2d_ASN1_SET_OF_ASN1_UTF8STRING
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2240 
	`SKM_ASN1_SET_OF_i2d
(
ASN1_UTF8STRING
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2241 
	#ASN1_£q_∑ck_ASN1_UTF8STRING
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2242 
	`SKM_ASN1_£q_∑ck
(
ASN1_UTF8STRING
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2243 
	#ASN1_£q_u≈ack_ASN1_UTF8STRING
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2244 
	`SKM_ASN1_£q_u≈ack
(
ASN1_UTF8STRING
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2246 
	#d2i_ASN1_SET_OF_DIST_POINT
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2247 
	`SKM_ASN1_SET_OF_d2i
(
DIST_POINT
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2248 
	#i2d_ASN1_SET_OF_DIST_POINT
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2249 
	`SKM_ASN1_SET_OF_i2d
(
DIST_POINT
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2250 
	#ASN1_£q_∑ck_DIST_POINT
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2251 
	`SKM_ASN1_£q_∑ck
(
DIST_POINT
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2252 
	#ASN1_£q_u≈ack_DIST_POINT
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2253 
	`SKM_ASN1_£q_u≈ack
(
DIST_POINT
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2255 
	#d2i_ASN1_SET_OF_ESS_CERT_ID
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2256 
	`SKM_ASN1_SET_OF_d2i
(
ESS_CERT_ID
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2257 
	#i2d_ASN1_SET_OF_ESS_CERT_ID
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2258 
	`SKM_ASN1_SET_OF_i2d
(
ESS_CERT_ID
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2259 
	#ASN1_£q_∑ck_ESS_CERT_ID
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2260 
	`SKM_ASN1_£q_∑ck
(
ESS_CERT_ID
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2261 
	#ASN1_£q_u≈ack_ESS_CERT_ID
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2262 
	`SKM_ASN1_£q_u≈ack
(
ESS_CERT_ID
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2264 
	#d2i_ASN1_SET_OF_EVP_MD
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2265 
	`SKM_ASN1_SET_OF_d2i
(
EVP_MD
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2266 
	#i2d_ASN1_SET_OF_EVP_MD
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2267 
	`SKM_ASN1_SET_OF_i2d
(
EVP_MD
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2268 
	#ASN1_£q_∑ck_EVP_MD
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2269 
	`SKM_ASN1_£q_∑ck
(
EVP_MD
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2270 
	#ASN1_£q_u≈ack_EVP_MD
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2271 
	`SKM_ASN1_£q_u≈ack
(
EVP_MD
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2273 
	#d2i_ASN1_SET_OF_GENERAL_NAME
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2274 
	`SKM_ASN1_SET_OF_d2i
(
GENERAL_NAME
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2275 
	#i2d_ASN1_SET_OF_GENERAL_NAME
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2276 
	`SKM_ASN1_SET_OF_i2d
(
GENERAL_NAME
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2277 
	#ASN1_£q_∑ck_GENERAL_NAME
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2278 
	`SKM_ASN1_£q_∑ck
(
GENERAL_NAME
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2279 
	#ASN1_£q_u≈ack_GENERAL_NAME
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2280 
	`SKM_ASN1_£q_u≈ack
(
GENERAL_NAME
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2282 
	#d2i_ASN1_SET_OF_OCSP_ONEREQ
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2283 
	`SKM_ASN1_SET_OF_d2i
(
OCSP_ONEREQ
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2284 
	#i2d_ASN1_SET_OF_OCSP_ONEREQ
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2285 
	`SKM_ASN1_SET_OF_i2d
(
OCSP_ONEREQ
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2286 
	#ASN1_£q_∑ck_OCSP_ONEREQ
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2287 
	`SKM_ASN1_£q_∑ck
(
OCSP_ONEREQ
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2288 
	#ASN1_£q_u≈ack_OCSP_ONEREQ
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2289 
	`SKM_ASN1_£q_u≈ack
(
OCSP_ONEREQ
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2291 
	#d2i_ASN1_SET_OF_OCSP_SINGLERESP
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2292 
	`SKM_ASN1_SET_OF_d2i
(
OCSP_SINGLERESP
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2293 
	#i2d_ASN1_SET_OF_OCSP_SINGLERESP
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2294 
	`SKM_ASN1_SET_OF_i2d
(
OCSP_SINGLERESP
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2295 
	#ASN1_£q_∑ck_OCSP_SINGLERESP
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2296 
	`SKM_ASN1_£q_∑ck
(
OCSP_SINGLERESP
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2297 
	#ASN1_£q_u≈ack_OCSP_SINGLERESP
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2298 
	`SKM_ASN1_£q_u≈ack
(
OCSP_SINGLERESP
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2300 
	#d2i_ASN1_SET_OF_PKCS12_SAFEBAG
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2301 
	`SKM_ASN1_SET_OF_d2i
(
PKCS12_SAFEBAG
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2302 
	#i2d_ASN1_SET_OF_PKCS12_SAFEBAG
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2303 
	`SKM_ASN1_SET_OF_i2d
(
PKCS12_SAFEBAG
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2304 
	#ASN1_£q_∑ck_PKCS12_SAFEBAG
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2305 
	`SKM_ASN1_£q_∑ck
(
PKCS12_SAFEBAG
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2306 
	#ASN1_£q_u≈ack_PKCS12_SAFEBAG
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2307 
	`SKM_ASN1_£q_u≈ack
(
PKCS12_SAFEBAG
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2309 
	#d2i_ASN1_SET_OF_PKCS7
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2310 
	`SKM_ASN1_SET_OF_d2i
(
PKCS7
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2311 
	#i2d_ASN1_SET_OF_PKCS7
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2312 
	`SKM_ASN1_SET_OF_i2d
(
PKCS7
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2313 
	#ASN1_£q_∑ck_PKCS7
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2314 
	`SKM_ASN1_£q_∑ck
(
PKCS7
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2315 
	#ASN1_£q_u≈ack_PKCS7
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2316 
	`SKM_ASN1_£q_u≈ack
(
PKCS7
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2318 
	#d2i_ASN1_SET_OF_PKCS7_RECIP_INFO
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2319 
	`SKM_ASN1_SET_OF_d2i
(
PKCS7_RECIP_INFO
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2320 
	#i2d_ASN1_SET_OF_PKCS7_RECIP_INFO
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2321 
	`SKM_ASN1_SET_OF_i2d
(
PKCS7_RECIP_INFO
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2322 
	#ASN1_£q_∑ck_PKCS7_RECIP_INFO
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2323 
	`SKM_ASN1_£q_∑ck
(
PKCS7_RECIP_INFO
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2324 
	#ASN1_£q_u≈ack_PKCS7_RECIP_INFO
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2325 
	`SKM_ASN1_£q_u≈ack
(
PKCS7_RECIP_INFO
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2327 
	#d2i_ASN1_SET_OF_PKCS7_SIGNER_INFO
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2328 
	`SKM_ASN1_SET_OF_d2i
(
PKCS7_SIGNER_INFO
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2329 
	#i2d_ASN1_SET_OF_PKCS7_SIGNER_INFO
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2330 
	`SKM_ASN1_SET_OF_i2d
(
PKCS7_SIGNER_INFO
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2331 
	#ASN1_£q_∑ck_PKCS7_SIGNER_INFO
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2332 
	`SKM_ASN1_£q_∑ck
(
PKCS7_SIGNER_INFO
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2333 
	#ASN1_£q_u≈ack_PKCS7_SIGNER_INFO
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2334 
	`SKM_ASN1_£q_u≈ack
(
PKCS7_SIGNER_INFO
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2336 
	#d2i_ASN1_SET_OF_POLICYINFO
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2337 
	`SKM_ASN1_SET_OF_d2i
(
POLICYINFO
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2338 
	#i2d_ASN1_SET_OF_POLICYINFO
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2339 
	`SKM_ASN1_SET_OF_i2d
(
POLICYINFO
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2340 
	#ASN1_£q_∑ck_POLICYINFO
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2341 
	`SKM_ASN1_£q_∑ck
(
POLICYINFO
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2342 
	#ASN1_£q_u≈ack_POLICYINFO
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2343 
	`SKM_ASN1_£q_u≈ack
(
POLICYINFO
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2345 
	#d2i_ASN1_SET_OF_POLICYQUALINFO
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2346 
	`SKM_ASN1_SET_OF_d2i
(
POLICYQUALINFO
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2347 
	#i2d_ASN1_SET_OF_POLICYQUALINFO
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2348 
	`SKM_ASN1_SET_OF_i2d
(
POLICYQUALINFO
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2349 
	#ASN1_£q_∑ck_POLICYQUALINFO
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2350 
	`SKM_ASN1_£q_∑ck
(
POLICYQUALINFO
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2351 
	#ASN1_£q_u≈ack_POLICYQUALINFO
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2352 
	`SKM_ASN1_£q_u≈ack
(
POLICYQUALINFO
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2354 
	#d2i_ASN1_SET_OF_SXNETID
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2355 
	`SKM_ASN1_SET_OF_d2i
(
SXNETID
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2356 
	#i2d_ASN1_SET_OF_SXNETID
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2357 
	`SKM_ASN1_SET_OF_i2d
(
SXNETID
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2358 
	#ASN1_£q_∑ck_SXNETID
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2359 
	`SKM_ASN1_£q_∑ck
(
SXNETID
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2360 
	#ASN1_£q_u≈ack_SXNETID
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2361 
	`SKM_ASN1_£q_u≈ack
(
SXNETID
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2363 
	#d2i_ASN1_SET_OF_X509
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2364 
	`SKM_ASN1_SET_OF_d2i
(
X509
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2365 
	#i2d_ASN1_SET_OF_X509
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2366 
	`SKM_ASN1_SET_OF_i2d
(
X509
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2367 
	#ASN1_£q_∑ck_X509
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2368 
	`SKM_ASN1_£q_∑ck
(
X509
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2369 
	#ASN1_£q_u≈ack_X509
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2370 
	`SKM_ASN1_£q_u≈ack
(
X509
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2372 
	#d2i_ASN1_SET_OF_X509_ALGOR
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2373 
	`SKM_ASN1_SET_OF_d2i
(
X509_ALGOR
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2374 
	#i2d_ASN1_SET_OF_X509_ALGOR
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2375 
	`SKM_ASN1_SET_OF_i2d
(
X509_ALGOR
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2376 
	#ASN1_£q_∑ck_X509_ALGOR
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2377 
	`SKM_ASN1_£q_∑ck
(
X509_ALGOR
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2378 
	#ASN1_£q_u≈ack_X509_ALGOR
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2379 
	`SKM_ASN1_£q_u≈ack
(
X509_ALGOR
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2381 
	#d2i_ASN1_SET_OF_X509_ATTRIBUTE
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2382 
	`SKM_ASN1_SET_OF_d2i
(
X509_ATTRIBUTE
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2383 
	#i2d_ASN1_SET_OF_X509_ATTRIBUTE
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2384 
	`SKM_ASN1_SET_OF_i2d
(
X509_ATTRIBUTE
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2385 
	#ASN1_£q_∑ck_X509_ATTRIBUTE
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2386 
	`SKM_ASN1_£q_∑ck
(
X509_ATTRIBUTE
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2387 
	#ASN1_£q_u≈ack_X509_ATTRIBUTE
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2388 
	`SKM_ASN1_£q_u≈ack
(
X509_ATTRIBUTE
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2390 
	#d2i_ASN1_SET_OF_X509_CRL
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2391 
	`SKM_ASN1_SET_OF_d2i
(
X509_CRL
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2392 
	#i2d_ASN1_SET_OF_X509_CRL
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2393 
	`SKM_ASN1_SET_OF_i2d
(
X509_CRL
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2394 
	#ASN1_£q_∑ck_X509_CRL
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2395 
	`SKM_ASN1_£q_∑ck
(
X509_CRL
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2396 
	#ASN1_£q_u≈ack_X509_CRL
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2397 
	`SKM_ASN1_£q_u≈ack
(
X509_CRL
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2399 
	#d2i_ASN1_SET_OF_X509_EXTENSION
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2400 
	`SKM_ASN1_SET_OF_d2i
(
X509_EXTENSION
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2401 
	#i2d_ASN1_SET_OF_X509_EXTENSION
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2402 
	`SKM_ASN1_SET_OF_i2d
(
X509_EXTENSION
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2403 
	#ASN1_£q_∑ck_X509_EXTENSION
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2404 
	`SKM_ASN1_£q_∑ck
(
X509_EXTENSION
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2405 
	#ASN1_£q_u≈ack_X509_EXTENSION
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2406 
	`SKM_ASN1_£q_u≈ack
(
X509_EXTENSION
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2408 
	#d2i_ASN1_SET_OF_X509_NAME_ENTRY
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2409 
	`SKM_ASN1_SET_OF_d2i
(
X509_NAME_ENTRY
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2410 
	#i2d_ASN1_SET_OF_X509_NAME_ENTRY
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2411 
	`SKM_ASN1_SET_OF_i2d
(
X509_NAME_ENTRY
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2412 
	#ASN1_£q_∑ck_X509_NAME_ENTRY
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2413 
	`SKM_ASN1_£q_∑ck
(
X509_NAME_ENTRY
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2414 
	#ASN1_£q_u≈ack_X509_NAME_ENTRY
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2415 
	`SKM_ASN1_£q_u≈ack
(
X509_NAME_ENTRY
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2417 
	#d2i_ASN1_SET_OF_X509_REVOKED
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2418 
	`SKM_ASN1_SET_OF_d2i
(
X509_REVOKED
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2419 
	#i2d_ASN1_SET_OF_X509_REVOKED
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2420 
	`SKM_ASN1_SET_OF_i2d
(
X509_REVOKED
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2421 
	#ASN1_£q_∑ck_X509_REVOKED
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2422 
	`SKM_ASN1_£q_∑ck
(
X509_REVOKED
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2423 
	#ASN1_£q_u≈ack_X509_REVOKED
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2424 
	`SKM_ASN1_£q_u≈ack
(
X509_REVOKED
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2426 
	#PKCS12_de¸y±_d2i_PKCS12_SAFEBAG
(
Æg‹
, 
d2i_func
, 
‰ì_func
, 
∑ss
, 
∑s¶í
, 
o˘
, 
£q
) \

2427 
	`SKM_PKCS12_de¸y±_d2i
(
PKCS12_SAFEBAG
, (
Æg‹
), (
d2i_func
), (
‰ì_func
), (
∑ss
), (
∑s¶í
), (
o˘
), (
£q
))

	)

2429 
	#PKCS12_de¸y±_d2i_PKCS7
(
Æg‹
, 
d2i_func
, 
‰ì_func
, 
∑ss
, 
∑s¶í
, 
o˘
, 
£q
) \

2430 
	`SKM_PKCS12_de¸y±_d2i
(
PKCS7
, (
Æg‹
), (
d2i_func
), (
‰ì_func
), (
∑ss
), (
∑s¶í
), (
o˘
), (
£q
))

	)

2432 
	#lh_ADDED_OBJ_√w
(Ë
	`LHM_lh_√w
(
ADDED_OBJ
,
added_obj
)

	)

2433 
	#lh_ADDED_OBJ_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
ADDED_OBJ
,lh,ö°)

	)

2434 
	#lh_ADDED_OBJ_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
ADDED_OBJ
,lh,ö°)

	)

2435 
	#lh_ADDED_OBJ_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
ADDED_OBJ
,lh,ö°)

	)

2436 
	#lh_ADDED_OBJ_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
ADDED_OBJ
,lh,‚)

	)

2437 
	#lh_ADDED_OBJ_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2438 
	`LHM_lh_dﬂŒ_¨g
(
ADDED_OBJ
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2439 
	#lh_ADDED_OBJ_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
ADDED_OBJ
,lh)

	)

2440 
	#lh_ADDED_OBJ_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
ADDED_OBJ
,lh)

	)

2441 
	#lh_ADDED_OBJ_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
ADDED_OBJ
,lh)

	)

2442 
	#lh_ADDED_OBJ_node_°©s_bio
(
lh
,
out
) \

2443 
	`LHM_lh_node_°©s_bio
(
ADDED_OBJ
,
lh
,
out
)

	)

2444 
	#lh_ADDED_OBJ_node_ußge_°©s_bio
(
lh
,
out
) \

2445 
	`LHM_lh_node_ußge_°©s_bio
(
ADDED_OBJ
,
lh
,
out
)

	)

2446 
	#lh_ADDED_OBJ_°©s_bio
(
lh
,
out
) \

2447 
	`LHM_lh_°©s_bio
(
ADDED_OBJ
,
lh
,
out
)

	)

2448 
	#lh_ADDED_OBJ_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
ADDED_OBJ
,lh)

	)

2450 
	#lh_APP_INFO_√w
(Ë
	`LHM_lh_√w
(
APP_INFO
,
≠p_öfo
)

	)

2451 
	#lh_APP_INFO_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
APP_INFO
,lh,ö°)

	)

2452 
	#lh_APP_INFO_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
APP_INFO
,lh,ö°)

	)

2453 
	#lh_APP_INFO_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
APP_INFO
,lh,ö°)

	)

2454 
	#lh_APP_INFO_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
APP_INFO
,lh,‚)

	)

2455 
	#lh_APP_INFO_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2456 
	`LHM_lh_dﬂŒ_¨g
(
APP_INFO
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2457 
	#lh_APP_INFO_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
APP_INFO
,lh)

	)

2458 
	#lh_APP_INFO_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
APP_INFO
,lh)

	)

2459 
	#lh_APP_INFO_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
APP_INFO
,lh)

	)

2460 
	#lh_APP_INFO_node_°©s_bio
(
lh
,
out
) \

2461 
	`LHM_lh_node_°©s_bio
(
APP_INFO
,
lh
,
out
)

	)

2462 
	#lh_APP_INFO_node_ußge_°©s_bio
(
lh
,
out
) \

2463 
	`LHM_lh_node_ußge_°©s_bio
(
APP_INFO
,
lh
,
out
)

	)

2464 
	#lh_APP_INFO_°©s_bio
(
lh
,
out
) \

2465 
	`LHM_lh_°©s_bio
(
APP_INFO
,
lh
,
out
)

	)

2466 
	#lh_APP_INFO_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
APP_INFO
,lh)

	)

2468 
	#lh_CONF_VALUE_√w
(Ë
	`LHM_lh_√w
(
CONF_VALUE
,
c⁄f_vÆue
)

	)

2469 
	#lh_CONF_VALUE_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
CONF_VALUE
,lh,ö°)

	)

2470 
	#lh_CONF_VALUE_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
CONF_VALUE
,lh,ö°)

	)

2471 
	#lh_CONF_VALUE_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
CONF_VALUE
,lh,ö°)

	)

2472 
	#lh_CONF_VALUE_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
CONF_VALUE
,lh,‚)

	)

2473 
	#lh_CONF_VALUE_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2474 
	`LHM_lh_dﬂŒ_¨g
(
CONF_VALUE
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2475 
	#lh_CONF_VALUE_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
CONF_VALUE
,lh)

	)

2476 
	#lh_CONF_VALUE_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
CONF_VALUE
,lh)

	)

2477 
	#lh_CONF_VALUE_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
CONF_VALUE
,lh)

	)

2478 
	#lh_CONF_VALUE_node_°©s_bio
(
lh
,
out
) \

2479 
	`LHM_lh_node_°©s_bio
(
CONF_VALUE
,
lh
,
out
)

	)

2480 
	#lh_CONF_VALUE_node_ußge_°©s_bio
(
lh
,
out
) \

2481 
	`LHM_lh_node_ußge_°©s_bio
(
CONF_VALUE
,
lh
,
out
)

	)

2482 
	#lh_CONF_VALUE_°©s_bio
(
lh
,
out
) \

2483 
	`LHM_lh_°©s_bio
(
CONF_VALUE
,
lh
,
out
)

	)

2484 
	#lh_CONF_VALUE_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
CONF_VALUE
,lh)

	)

2486 
	#lh_ENGINE_PILE_√w
(Ë
	`LHM_lh_√w
(
ENGINE_PILE
,
ígöe_pûe
)

	)

2487 
	#lh_ENGINE_PILE_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
ENGINE_PILE
,lh,ö°)

	)

2488 
	#lh_ENGINE_PILE_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
ENGINE_PILE
,lh,ö°)

	)

2489 
	#lh_ENGINE_PILE_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
ENGINE_PILE
,lh,ö°)

	)

2490 
	#lh_ENGINE_PILE_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
ENGINE_PILE
,lh,‚)

	)

2491 
	#lh_ENGINE_PILE_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2492 
	`LHM_lh_dﬂŒ_¨g
(
ENGINE_PILE
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2493 
	#lh_ENGINE_PILE_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
ENGINE_PILE
,lh)

	)

2494 
	#lh_ENGINE_PILE_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
ENGINE_PILE
,lh)

	)

2495 
	#lh_ENGINE_PILE_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
ENGINE_PILE
,lh)

	)

2496 
	#lh_ENGINE_PILE_node_°©s_bio
(
lh
,
out
) \

2497 
	`LHM_lh_node_°©s_bio
(
ENGINE_PILE
,
lh
,
out
)

	)

2498 
	#lh_ENGINE_PILE_node_ußge_°©s_bio
(
lh
,
out
) \

2499 
	`LHM_lh_node_ußge_°©s_bio
(
ENGINE_PILE
,
lh
,
out
)

	)

2500 
	#lh_ENGINE_PILE_°©s_bio
(
lh
,
out
) \

2501 
	`LHM_lh_°©s_bio
(
ENGINE_PILE
,
lh
,
out
)

	)

2502 
	#lh_ENGINE_PILE_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
ENGINE_PILE
,lh)

	)

2504 
	#lh_ERR_STATE_√w
(Ë
	`LHM_lh_√w
(
ERR_STATE
,
îr_°©e
)

	)

2505 
	#lh_ERR_STATE_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
ERR_STATE
,lh,ö°)

	)

2506 
	#lh_ERR_STATE_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
ERR_STATE
,lh,ö°)

	)

2507 
	#lh_ERR_STATE_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
ERR_STATE
,lh,ö°)

	)

2508 
	#lh_ERR_STATE_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
ERR_STATE
,lh,‚)

	)

2509 
	#lh_ERR_STATE_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2510 
	`LHM_lh_dﬂŒ_¨g
(
ERR_STATE
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2511 
	#lh_ERR_STATE_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
ERR_STATE
,lh)

	)

2512 
	#lh_ERR_STATE_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
ERR_STATE
,lh)

	)

2513 
	#lh_ERR_STATE_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
ERR_STATE
,lh)

	)

2514 
	#lh_ERR_STATE_node_°©s_bio
(
lh
,
out
) \

2515 
	`LHM_lh_node_°©s_bio
(
ERR_STATE
,
lh
,
out
)

	)

2516 
	#lh_ERR_STATE_node_ußge_°©s_bio
(
lh
,
out
) \

2517 
	`LHM_lh_node_ußge_°©s_bio
(
ERR_STATE
,
lh
,
out
)

	)

2518 
	#lh_ERR_STATE_°©s_bio
(
lh
,
out
) \

2519 
	`LHM_lh_°©s_bio
(
ERR_STATE
,
lh
,
out
)

	)

2520 
	#lh_ERR_STATE_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
ERR_STATE
,lh)

	)

2522 
	#lh_ERR_STRING_DATA_√w
(Ë
	`LHM_lh_√w
(
ERR_STRING_DATA
,
îr_°rög_d©a
)

	)

2523 
	#lh_ERR_STRING_DATA_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
ERR_STRING_DATA
,lh,ö°)

	)

2524 
	#lh_ERR_STRING_DATA_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
ERR_STRING_DATA
,lh,ö°)

	)

2525 
	#lh_ERR_STRING_DATA_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
ERR_STRING_DATA
,lh,ö°)

	)

2526 
	#lh_ERR_STRING_DATA_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
ERR_STRING_DATA
,lh,‚)

	)

2527 
	#lh_ERR_STRING_DATA_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2528 
	`LHM_lh_dﬂŒ_¨g
(
ERR_STRING_DATA
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2529 
	#lh_ERR_STRING_DATA_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
ERR_STRING_DATA
,lh)

	)

2530 
	#lh_ERR_STRING_DATA_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
ERR_STRING_DATA
,lh)

	)

2531 
	#lh_ERR_STRING_DATA_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
ERR_STRING_DATA
,lh)

	)

2532 
	#lh_ERR_STRING_DATA_node_°©s_bio
(
lh
,
out
) \

2533 
	`LHM_lh_node_°©s_bio
(
ERR_STRING_DATA
,
lh
,
out
)

	)

2534 
	#lh_ERR_STRING_DATA_node_ußge_°©s_bio
(
lh
,
out
) \

2535 
	`LHM_lh_node_ußge_°©s_bio
(
ERR_STRING_DATA
,
lh
,
out
)

	)

2536 
	#lh_ERR_STRING_DATA_°©s_bio
(
lh
,
out
) \

2537 
	`LHM_lh_°©s_bio
(
ERR_STRING_DATA
,
lh
,
out
)

	)

2538 
	#lh_ERR_STRING_DATA_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
ERR_STRING_DATA
,lh)

	)

2540 
	#lh_EX_CLASS_ITEM_√w
(Ë
	`LHM_lh_√w
(
EX_CLASS_ITEM
,
ex_˛ass_ôem
)

	)

2541 
	#lh_EX_CLASS_ITEM_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
EX_CLASS_ITEM
,lh,ö°)

	)

2542 
	#lh_EX_CLASS_ITEM_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
EX_CLASS_ITEM
,lh,ö°)

	)

2543 
	#lh_EX_CLASS_ITEM_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
EX_CLASS_ITEM
,lh,ö°)

	)

2544 
	#lh_EX_CLASS_ITEM_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
EX_CLASS_ITEM
,lh,‚)

	)

2545 
	#lh_EX_CLASS_ITEM_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2546 
	`LHM_lh_dﬂŒ_¨g
(
EX_CLASS_ITEM
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2547 
	#lh_EX_CLASS_ITEM_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
EX_CLASS_ITEM
,lh)

	)

2548 
	#lh_EX_CLASS_ITEM_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
EX_CLASS_ITEM
,lh)

	)

2549 
	#lh_EX_CLASS_ITEM_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
EX_CLASS_ITEM
,lh)

	)

2550 
	#lh_EX_CLASS_ITEM_node_°©s_bio
(
lh
,
out
) \

2551 
	`LHM_lh_node_°©s_bio
(
EX_CLASS_ITEM
,
lh
,
out
)

	)

2552 
	#lh_EX_CLASS_ITEM_node_ußge_°©s_bio
(
lh
,
out
) \

2553 
	`LHM_lh_node_ußge_°©s_bio
(
EX_CLASS_ITEM
,
lh
,
out
)

	)

2554 
	#lh_EX_CLASS_ITEM_°©s_bio
(
lh
,
out
) \

2555 
	`LHM_lh_°©s_bio
(
EX_CLASS_ITEM
,
lh
,
out
)

	)

2556 
	#lh_EX_CLASS_ITEM_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
EX_CLASS_ITEM
,lh)

	)

2558 
	#lh_FUNCTION_√w
(Ë
	`LHM_lh_√w
(
FUNCTION
,
fun˘i⁄
)

	)

2559 
	#lh_FUNCTION_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
FUNCTION
,lh,ö°)

	)

2560 
	#lh_FUNCTION_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
FUNCTION
,lh,ö°)

	)

2561 
	#lh_FUNCTION_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
FUNCTION
,lh,ö°)

	)

2562 
	#lh_FUNCTION_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
FUNCTION
,lh,‚)

	)

2563 
	#lh_FUNCTION_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2564 
	`LHM_lh_dﬂŒ_¨g
(
FUNCTION
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2565 
	#lh_FUNCTION_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
FUNCTION
,lh)

	)

2566 
	#lh_FUNCTION_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
FUNCTION
,lh)

	)

2567 
	#lh_FUNCTION_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
FUNCTION
,lh)

	)

2568 
	#lh_FUNCTION_node_°©s_bio
(
lh
,
out
) \

2569 
	`LHM_lh_node_°©s_bio
(
FUNCTION
,
lh
,
out
)

	)

2570 
	#lh_FUNCTION_node_ußge_°©s_bio
(
lh
,
out
) \

2571 
	`LHM_lh_node_ußge_°©s_bio
(
FUNCTION
,
lh
,
out
)

	)

2572 
	#lh_FUNCTION_°©s_bio
(
lh
,
out
) \

2573 
	`LHM_lh_°©s_bio
(
FUNCTION
,
lh
,
out
)

	)

2574 
	#lh_FUNCTION_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
FUNCTION
,lh)

	)

2576 
	#lh_MEM_√w
(Ë
	`LHM_lh_√w
(
MEM
,
mem
)

	)

2577 
	#lh_MEM_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
MEM
,lh,ö°)

	)

2578 
	#lh_MEM_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
MEM
,lh,ö°)

	)

2579 
	#lh_MEM_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
MEM
,lh,ö°)

	)

2580 
	#lh_MEM_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
MEM
,lh,‚)

	)

2581 
	#lh_MEM_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2582 
	`LHM_lh_dﬂŒ_¨g
(
MEM
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2583 
	#lh_MEM_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
MEM
,lh)

	)

2584 
	#lh_MEM_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
MEM
,lh)

	)

2585 
	#lh_MEM_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
MEM
,lh)

	)

2586 
	#lh_MEM_node_°©s_bio
(
lh
,
out
) \

2587 
	`LHM_lh_node_°©s_bio
(
MEM
,
lh
,
out
)

	)

2588 
	#lh_MEM_node_ußge_°©s_bio
(
lh
,
out
) \

2589 
	`LHM_lh_node_ußge_°©s_bio
(
MEM
,
lh
,
out
)

	)

2590 
	#lh_MEM_°©s_bio
(
lh
,
out
) \

2591 
	`LHM_lh_°©s_bio
(
MEM
,
lh
,
out
)

	)

2592 
	#lh_MEM_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
MEM
,lh)

	)

2594 
	#lh_OBJ_NAME_√w
(Ë
	`LHM_lh_√w
(
OBJ_NAME
,
obj_«me
)

	)

2595 
	#lh_OBJ_NAME_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
OBJ_NAME
,lh,ö°)

	)

2596 
	#lh_OBJ_NAME_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
OBJ_NAME
,lh,ö°)

	)

2597 
	#lh_OBJ_NAME_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
OBJ_NAME
,lh,ö°)

	)

2598 
	#lh_OBJ_NAME_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
OBJ_NAME
,lh,‚)

	)

2599 
	#lh_OBJ_NAME_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2600 
	`LHM_lh_dﬂŒ_¨g
(
OBJ_NAME
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2601 
	#lh_OBJ_NAME_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
OBJ_NAME
,lh)

	)

2602 
	#lh_OBJ_NAME_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
OBJ_NAME
,lh)

	)

2603 
	#lh_OBJ_NAME_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
OBJ_NAME
,lh)

	)

2604 
	#lh_OBJ_NAME_node_°©s_bio
(
lh
,
out
) \

2605 
	`LHM_lh_node_°©s_bio
(
OBJ_NAME
,
lh
,
out
)

	)

2606 
	#lh_OBJ_NAME_node_ußge_°©s_bio
(
lh
,
out
) \

2607 
	`LHM_lh_node_ußge_°©s_bio
(
OBJ_NAME
,
lh
,
out
)

	)

2608 
	#lh_OBJ_NAME_°©s_bio
(
lh
,
out
) \

2609 
	`LHM_lh_°©s_bio
(
OBJ_NAME
,
lh
,
out
)

	)

2610 
	#lh_OBJ_NAME_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
OBJ_NAME
,lh)

	)

2612 
	#lh_OPENSSL_CSTRING_√w
(Ë
	`LHM_lh_√w
(
OPENSSL_CSTRING
,
›ís¶_c°rög
)

	)

2613 
	#lh_OPENSSL_CSTRING_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
OPENSSL_CSTRING
,lh,ö°)

	)

2614 
	#lh_OPENSSL_CSTRING_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
OPENSSL_CSTRING
,lh,ö°)

	)

2615 
	#lh_OPENSSL_CSTRING_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
OPENSSL_CSTRING
,lh,ö°)

	)

2616 
	#lh_OPENSSL_CSTRING_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
OPENSSL_CSTRING
,lh,‚)

	)

2617 
	#lh_OPENSSL_CSTRING_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2618 
	`LHM_lh_dﬂŒ_¨g
(
OPENSSL_CSTRING
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2619 
	#lh_OPENSSL_CSTRING_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
OPENSSL_CSTRING
,lh)

	)

2620 
	#lh_OPENSSL_CSTRING_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
OPENSSL_CSTRING
,lh)

	)

2621 
	#lh_OPENSSL_CSTRING_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
OPENSSL_CSTRING
,lh)

	)

2622 
	#lh_OPENSSL_CSTRING_node_°©s_bio
(
lh
,
out
) \

2623 
	`LHM_lh_node_°©s_bio
(
OPENSSL_CSTRING
,
lh
,
out
)

	)

2624 
	#lh_OPENSSL_CSTRING_node_ußge_°©s_bio
(
lh
,
out
) \

2625 
	`LHM_lh_node_ußge_°©s_bio
(
OPENSSL_CSTRING
,
lh
,
out
)

	)

2626 
	#lh_OPENSSL_CSTRING_°©s_bio
(
lh
,
out
) \

2627 
	`LHM_lh_°©s_bio
(
OPENSSL_CSTRING
,
lh
,
out
)

	)

2628 
	#lh_OPENSSL_CSTRING_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
OPENSSL_CSTRING
,lh)

	)

2630 
	#lh_OPENSSL_STRING_√w
(Ë
	`LHM_lh_√w
(
OPENSSL_STRING
,
›ís¶_°rög
)

	)

2631 
	#lh_OPENSSL_STRING_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
OPENSSL_STRING
,lh,ö°)

	)

2632 
	#lh_OPENSSL_STRING_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
OPENSSL_STRING
,lh,ö°)

	)

2633 
	#lh_OPENSSL_STRING_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
OPENSSL_STRING
,lh,ö°)

	)

2634 
	#lh_OPENSSL_STRING_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
OPENSSL_STRING
,lh,‚)

	)

2635 
	#lh_OPENSSL_STRING_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2636 
	`LHM_lh_dﬂŒ_¨g
(
OPENSSL_STRING
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2637 
	#lh_OPENSSL_STRING_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
OPENSSL_STRING
,lh)

	)

2638 
	#lh_OPENSSL_STRING_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
OPENSSL_STRING
,lh)

	)

2639 
	#lh_OPENSSL_STRING_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
OPENSSL_STRING
,lh)

	)

2640 
	#lh_OPENSSL_STRING_node_°©s_bio
(
lh
,
out
) \

2641 
	`LHM_lh_node_°©s_bio
(
OPENSSL_STRING
,
lh
,
out
)

	)

2642 
	#lh_OPENSSL_STRING_node_ußge_°©s_bio
(
lh
,
out
) \

2643 
	`LHM_lh_node_ußge_°©s_bio
(
OPENSSL_STRING
,
lh
,
out
)

	)

2644 
	#lh_OPENSSL_STRING_°©s_bio
(
lh
,
out
) \

2645 
	`LHM_lh_°©s_bio
(
OPENSSL_STRING
,
lh
,
out
)

	)

2646 
	#lh_OPENSSL_STRING_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
OPENSSL_STRING
,lh)

	)

2648 
	#lh_SSL_SESSION_√w
(Ë
	`LHM_lh_√w
(
SSL_SESSION
,
s¶_£ssi⁄
)

	)

2649 
	#lh_SSL_SESSION_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
SSL_SESSION
,lh,ö°)

	)

2650 
	#lh_SSL_SESSION_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
SSL_SESSION
,lh,ö°)

	)

2651 
	#lh_SSL_SESSION_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
SSL_SESSION
,lh,ö°)

	)

2652 
	#lh_SSL_SESSION_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
SSL_SESSION
,lh,‚)

	)

2653 
	#lh_SSL_SESSION_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2654 
	`LHM_lh_dﬂŒ_¨g
(
SSL_SESSION
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2655 
	#lh_SSL_SESSION_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
SSL_SESSION
,lh)

	)

2656 
	#lh_SSL_SESSION_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
SSL_SESSION
,lh)

	)

2657 
	#lh_SSL_SESSION_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
SSL_SESSION
,lh)

	)

2658 
	#lh_SSL_SESSION_node_°©s_bio
(
lh
,
out
) \

2659 
	`LHM_lh_node_°©s_bio
(
SSL_SESSION
,
lh
,
out
)

	)

2660 
	#lh_SSL_SESSION_node_ußge_°©s_bio
(
lh
,
out
) \

2661 
	`LHM_lh_node_ußge_°©s_bio
(
SSL_SESSION
,
lh
,
out
)

	)

2662 
	#lh_SSL_SESSION_°©s_bio
(
lh
,
out
) \

2663 
	`LHM_lh_°©s_bio
(
SSL_SESSION
,
lh
,
out
)

	)

2664 
	#lh_SSL_SESSION_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
SSL_SESSION
,lh)

	)

2668 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/srtp.h

118 #i‚de‡
HEADER_D1_SRTP_H


119 
	#HEADER_D1_SRTP_H


	)

121 
	~<›ís¶/s¶.h
>

123 #ifde‡ 
__˝lu•lus


128 
	#SRTP_AES128_CM_SHA1_80
 0x0001

	)

129 
	#SRTP_AES128_CM_SHA1_32
 0x0002

	)

130 
	#SRTP_AES128_F8_SHA1_80
 0x0003

	)

131 
	#SRTP_AES128_F8_SHA1_32
 0x0004

	)

132 
	#SRTP_NULL_SHA1_80
 0x0005

	)

133 
	#SRTP_NULL_SHA1_32
 0x0006

	)

135 #i‚de‡
OPENSSL_NO_SRTP


137 
SSL_CTX_£t_é£xt_u£_§ç
(
SSL_CTX
 *
˘x
, c⁄° *
¥ofûes
);

138 
SSL_£t_é£xt_u£_§ç
(
SSL
 *
˘x
, c⁄° *
¥ofûes
);

139 
SRTP_PROTECTION_PROFILE
 *
SSL_gë_£À˘ed_§ç_¥ofûe
(
SSL
 *
s
);

141 
STACK_OF
(
SRTP_PROTECTION_PROFILE
Ë*
SSL_gë_§ç_¥ofûes
(
SSL
 *
s¶
);

142 
SRTP_PROTECTION_PROFILE
 *
SSL_gë_£À˘ed_§ç_¥ofûe
(
SSL
 *
s
);

146 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ssl2.h

59 #i‚de‡
HEADER_SSL2_H


60 
	#HEADER_SSL2_H


	)

62 #ifde‡ 
__˝lu•lus


67 
	#SSL2_VERSION
 0x0002

	)

68 
	#SSL2_VERSION_MAJOR
 0x00

	)

69 
	#SSL2_VERSION_MINOR
 0x02

	)

74 
	#SSL2_MT_ERROR
 0

	)

75 
	#SSL2_MT_CLIENT_HELLO
 1

	)

76 
	#SSL2_MT_CLIENT_MASTER_KEY
 2

	)

77 
	#SSL2_MT_CLIENT_FINISHED
 3

	)

78 
	#SSL2_MT_SERVER_HELLO
 4

	)

79 
	#SSL2_MT_SERVER_VERIFY
 5

	)

80 
	#SSL2_MT_SERVER_FINISHED
 6

	)

81 
	#SSL2_MT_REQUEST_CERTIFICATE
 7

	)

82 
	#SSL2_MT_CLIENT_CERTIFICATE
 8

	)

85 
	#SSL2_PE_UNDEFINED_ERROR
 0x0000

	)

86 
	#SSL2_PE_NO_CIPHER
 0x0001

	)

87 
	#SSL2_PE_NO_CERTIFICATE
 0x0002

	)

88 
	#SSL2_PE_BAD_CERTIFICATE
 0x0004

	)

89 
	#SSL2_PE_UNSUPPORTED_CERTIFICATE_TYPE
 0x0006

	)

92 
	#SSL2_CK_NULL_WITH_MD5
 0x02000000

	)

93 
	#SSL2_CK_RC4_128_WITH_MD5
 0x02010080

	)

94 
	#SSL2_CK_RC4_128_EXPORT40_WITH_MD5
 0x02020080

	)

95 
	#SSL2_CK_RC2_128_CBC_WITH_MD5
 0x02030080

	)

96 
	#SSL2_CK_RC2_128_CBC_EXPORT40_WITH_MD5
 0x02040080

	)

97 
	#SSL2_CK_IDEA_128_CBC_WITH_MD5
 0x02050080

	)

98 
	#SSL2_CK_DES_64_CBC_WITH_MD5
 0x02060040

	)

99 
	#SSL2_CK_DES_64_CBC_WITH_SHA
 0x02060140

	)

100 
	#SSL2_CK_DES_192_EDE3_CBC_WITH_MD5
 0x020700c0

	)

101 
	#SSL2_CK_DES_192_EDE3_CBC_WITH_SHA
 0x020701c0

	)

102 
	#SSL2_CK_RC4_64_WITH_MD5
 0x02080080

	)

104 
	#SSL2_CK_DES_64_CFB64_WITH_MD5_1
 0x02ff0800

	)

105 
	#SSL2_CK_NULL
 0x02ff0810

	)

107 
	#SSL2_TXT_DES_64_CFB64_WITH_MD5_1
 "DES-CFB-M1"

	)

108 
	#SSL2_TXT_NULL_WITH_MD5
 "NULL-MD5"

	)

109 
	#SSL2_TXT_RC4_128_WITH_MD5
 "RC4-MD5"

	)

110 
	#SSL2_TXT_RC4_128_EXPORT40_WITH_MD5
 "EXP-RC4-MD5"

	)

111 
	#SSL2_TXT_RC2_128_CBC_WITH_MD5
 "RC2-CBC-MD5"

	)

112 
	#SSL2_TXT_RC2_128_CBC_EXPORT40_WITH_MD5
 "EXP-RC2-CBC-MD5"

	)

113 
	#SSL2_TXT_IDEA_128_CBC_WITH_MD5
 "IDEA-CBC-MD5"

	)

114 
	#SSL2_TXT_DES_64_CBC_WITH_MD5
 "DES-CBC-MD5"

	)

115 
	#SSL2_TXT_DES_64_CBC_WITH_SHA
 "DES-CBC-SHA"

	)

116 
	#SSL2_TXT_DES_192_EDE3_CBC_WITH_MD5
 "DES-CBC3-MD5"

	)

117 
	#SSL2_TXT_DES_192_EDE3_CBC_WITH_SHA
 "DES-CBC3-SHA"

	)

118 
	#SSL2_TXT_RC4_64_WITH_MD5
 "RC4-64-MD5"

	)

120 
	#SSL2_TXT_NULL
 "NULL"

	)

123 
	#SSL2_CF_5_BYTE_ENC
 0x01

	)

124 
	#SSL2_CF_8_BYTE_ENC
 0x02

	)

127 
	#SSL2_CT_X509_CERTIFICATE
 0x01

	)

130 
	#SSL2_AT_MD5_WITH_RSA_ENCRYPTION
 0x01

	)

132 
	#SSL2_MAX_SSL_SESSION_ID_LENGTH
 32

	)

135 
	#SSL2_MAX_MASTER_KEY_LENGTH_IN_BITS
 256

	)

136 #ifde‡
OPENSSL_SYS_MPE


137 
	#SSL2_MAX_RECORD_LENGTH_2_BYTE_HEADER
 29998u

	)

139 
	#SSL2_MAX_RECORD_LENGTH_2_BYTE_HEADER
 32767u

	)

141 
	#SSL2_MAX_RECORD_LENGTH_3_BYTE_HEADER
 16383

	)

143 
	#SSL2_CHALLENGE_LENGTH
 16

	)

145 
	#SSL2_MIN_CHALLENGE_LENGTH
 16

	)

146 
	#SSL2_MAX_CHALLENGE_LENGTH
 32

	)

147 
	#SSL2_CONNECTION_ID_LENGTH
 16

	)

148 
	#SSL2_MAX_CONNECTION_ID_LENGTH
 16

	)

149 
	#SSL2_SSL_SESSION_ID_LENGTH
 16

	)

150 
	#SSL2_MAX_CERT_CHALLENGE_LENGTH
 32

	)

151 
	#SSL2_MIN_CERT_CHALLENGE_LENGTH
 16

	)

152 
	#SSL2_MAX_KEY_MATERIAL_LENGTH
 24

	)

154 #i‚de‡
HEADER_SSL_LOCL_H


155 
	#CERT
 

	)

158 #i‚de‡
OPENSSL_NO_SSL_INTERN


160 
	ss¶2_°©e_°


162 
thªe_byã_hódî
;

163 
˛ór_ãxt
;

164 
esˇ≥
;

165 
s¶2_rﬁlback
;

169 
wnum
;

170 
w≥nd_tŸ
;

171 c⁄° *
w≥nd_buf
;

173 
w≥nd_off
;

174 
w≥nd_Àn
;

175 
w≥nd_ªt
;

178 
rbuf_À·
;

179 
rbuf_offs
;

180 *
rbuf
;

181 *
wbuf
;

183 *
wrôe_±r
;

186 
∑ddög
;

187 
æígth
;

188 
ø˘_d©a_Àngth
;

189 
wÀngth
;

190 
wa˘_d©a_Àngth
;

191 *
ø˘_d©a
;

192 *
wa˘_d©a
;

193 *
mac_d©a
;

195 *
ªad_key
;

196 *
wrôe_key
;

199 
chÆÀnge_Àngth
;

200 
chÆÀnge
[
SSL2_MAX_CHALLENGE_LENGTH
];

201 
c⁄n_id_Àngth
;

202 
c⁄n_id
[
SSL2_MAX_CONNECTION_ID_LENGTH
];

203 
key_m©îül_Àngth
;

204 
key_m©îül
[
SSL2_MAX_KEY_MATERIAL_LENGTH
*2];

206 
ªad_£quí˚
;

207 
wrôe_£quí˚
;

210 
c⁄n_id_Àngth
;

211 
˚π_ty≥
;

212 
˚π_Àngth
;

213 
c¶
;

214 
˛ór
;

215 
íc
;

216 
c˛
[
SSL2_MAX_CERT_CHALLENGE_LENGTH
];

217 
cùhî_•ec_Àngth
;

218 
£ssi⁄_id_Àngth
;

219 
˛í
;

220 
æí
;

221 } 
tmp
;

222 } 
	tSSL2_STATE
;

228 
	#SSL2_ST_SEND_CLIENT_HELLO_A
 (0x10|
SSL_ST_CONNECT
)

	)

229 
	#SSL2_ST_SEND_CLIENT_HELLO_B
 (0x11|
SSL_ST_CONNECT
)

	)

230 
	#SSL2_ST_GET_SERVER_HELLO_A
 (0x20|
SSL_ST_CONNECT
)

	)

231 
	#SSL2_ST_GET_SERVER_HELLO_B
 (0x21|
SSL_ST_CONNECT
)

	)

232 
	#SSL2_ST_SEND_CLIENT_MASTER_KEY_A
 (0x30|
SSL_ST_CONNECT
)

	)

233 
	#SSL2_ST_SEND_CLIENT_MASTER_KEY_B
 (0x31|
SSL_ST_CONNECT
)

	)

234 
	#SSL2_ST_SEND_CLIENT_FINISHED_A
 (0x40|
SSL_ST_CONNECT
)

	)

235 
	#SSL2_ST_SEND_CLIENT_FINISHED_B
 (0x41|
SSL_ST_CONNECT
)

	)

236 
	#SSL2_ST_SEND_CLIENT_CERTIFICATE_A
 (0x50|
SSL_ST_CONNECT
)

	)

237 
	#SSL2_ST_SEND_CLIENT_CERTIFICATE_B
 (0x51|
SSL_ST_CONNECT
)

	)

238 
	#SSL2_ST_SEND_CLIENT_CERTIFICATE_C
 (0x52|
SSL_ST_CONNECT
)

	)

239 
	#SSL2_ST_SEND_CLIENT_CERTIFICATE_D
 (0x53|
SSL_ST_CONNECT
)

	)

240 
	#SSL2_ST_GET_SERVER_VERIFY_A
 (0x60|
SSL_ST_CONNECT
)

	)

241 
	#SSL2_ST_GET_SERVER_VERIFY_B
 (0x61|
SSL_ST_CONNECT
)

	)

242 
	#SSL2_ST_GET_SERVER_FINISHED_A
 (0x70|
SSL_ST_CONNECT
)

	)

243 
	#SSL2_ST_GET_SERVER_FINISHED_B
 (0x71|
SSL_ST_CONNECT
)

	)

244 
	#SSL2_ST_CLIENT_START_ENCRYPTION
 (0x80|
SSL_ST_CONNECT
)

	)

245 
	#SSL2_ST_X509_GET_CLIENT_CERTIFICATE
 (0x90|
SSL_ST_CONNECT
)

	)

247 
	#SSL2_ST_GET_CLIENT_HELLO_A
 (0x10|
SSL_ST_ACCEPT
)

	)

248 
	#SSL2_ST_GET_CLIENT_HELLO_B
 (0x11|
SSL_ST_ACCEPT
)

	)

249 
	#SSL2_ST_GET_CLIENT_HELLO_C
 (0x12|
SSL_ST_ACCEPT
)

	)

250 
	#SSL2_ST_SEND_SERVER_HELLO_A
 (0x20|
SSL_ST_ACCEPT
)

	)

251 
	#SSL2_ST_SEND_SERVER_HELLO_B
 (0x21|
SSL_ST_ACCEPT
)

	)

252 
	#SSL2_ST_GET_CLIENT_MASTER_KEY_A
 (0x30|
SSL_ST_ACCEPT
)

	)

253 
	#SSL2_ST_GET_CLIENT_MASTER_KEY_B
 (0x31|
SSL_ST_ACCEPT
)

	)

254 
	#SSL2_ST_SEND_SERVER_VERIFY_A
 (0x40|
SSL_ST_ACCEPT
)

	)

255 
	#SSL2_ST_SEND_SERVER_VERIFY_B
 (0x41|
SSL_ST_ACCEPT
)

	)

256 
	#SSL2_ST_SEND_SERVER_VERIFY_C
 (0x42|
SSL_ST_ACCEPT
)

	)

257 
	#SSL2_ST_GET_CLIENT_FINISHED_A
 (0x50|
SSL_ST_ACCEPT
)

	)

258 
	#SSL2_ST_GET_CLIENT_FINISHED_B
 (0x51|
SSL_ST_ACCEPT
)

	)

259 
	#SSL2_ST_SEND_SERVER_FINISHED_A
 (0x60|
SSL_ST_ACCEPT
)

	)

260 
	#SSL2_ST_SEND_SERVER_FINISHED_B
 (0x61|
SSL_ST_ACCEPT
)

	)

261 
	#SSL2_ST_SEND_REQUEST_CERTIFICATE_A
 (0x70|
SSL_ST_ACCEPT
)

	)

262 
	#SSL2_ST_SEND_REQUEST_CERTIFICATE_B
 (0x71|
SSL_ST_ACCEPT
)

	)

263 
	#SSL2_ST_SEND_REQUEST_CERTIFICATE_C
 (0x72|
SSL_ST_ACCEPT
)

	)

264 
	#SSL2_ST_SEND_REQUEST_CERTIFICATE_D
 (0x73|
SSL_ST_ACCEPT
)

	)

265 
	#SSL2_ST_SERVER_START_ENCRYPTION
 (0x80|
SSL_ST_ACCEPT
)

	)

266 
	#SSL2_ST_X509_GET_SERVER_CERTIFICATE
 (0x90|
SSL_ST_ACCEPT
)

	)

268 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ssl23.h

59 #i‚de‡
HEADER_SSL23_H


60 
	#HEADER_SSL23_H


	)

62 #ifde‡ 
__˝lu•lus


68 
	#SSL23_ST_CW_CLNT_HELLO_A
 (0x210|
SSL_ST_CONNECT
)

	)

69 
	#SSL23_ST_CW_CLNT_HELLO_B
 (0x211|
SSL_ST_CONNECT
)

	)

71 
	#SSL23_ST_CR_SRVR_HELLO_A
 (0x220|
SSL_ST_CONNECT
)

	)

72 
	#SSL23_ST_CR_SRVR_HELLO_B
 (0x221|
SSL_ST_CONNECT
)

	)

76 
	#SSL23_ST_SR_CLNT_HELLO_A
 (0x210|
SSL_ST_ACCEPT
)

	)

77 
	#SSL23_ST_SR_CLNT_HELLO_B
 (0x211|
SSL_ST_ACCEPT
)

	)

79 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ssl3.h

117 #i‚de‡
HEADER_SSL3_H


118 
	#HEADER_SSL3_H


	)

120 #i‚de‡
OPENSSL_NO_COMP


121 
	~<›ís¶/comp.h
>

123 
	~<›ís¶/buf„r.h
>

124 
	~<›ís¶/evp.h
>

125 
	~<›ís¶/s¶.h
>

127 #ifde‡ 
__˝lu•lus


133 
	#SSL3_CK_SCSV
 0x030000FF

	)

137 
	#SSL3_CK_FALLBACK_SCSV
 0x03005600

	)

139 
	#SSL3_CK_RSA_NULL_MD5
 0x03000001

	)

140 
	#SSL3_CK_RSA_NULL_SHA
 0x03000002

	)

141 
	#SSL3_CK_RSA_RC4_40_MD5
 0x03000003

	)

142 
	#SSL3_CK_RSA_RC4_128_MD5
 0x03000004

	)

143 
	#SSL3_CK_RSA_RC4_128_SHA
 0x03000005

	)

144 
	#SSL3_CK_RSA_RC2_40_MD5
 0x03000006

	)

145 
	#SSL3_CK_RSA_IDEA_128_SHA
 0x03000007

	)

146 
	#SSL3_CK_RSA_DES_40_CBC_SHA
 0x03000008

	)

147 
	#SSL3_CK_RSA_DES_64_CBC_SHA
 0x03000009

	)

148 
	#SSL3_CK_RSA_DES_192_CBC3_SHA
 0x0300000A

	)

150 
	#SSL3_CK_DH_DSS_DES_40_CBC_SHA
 0x0300000B

	)

151 
	#SSL3_CK_DH_DSS_DES_64_CBC_SHA
 0x0300000C

	)

152 
	#SSL3_CK_DH_DSS_DES_192_CBC3_SHA
 0x0300000D

	)

153 
	#SSL3_CK_DH_RSA_DES_40_CBC_SHA
 0x0300000E

	)

154 
	#SSL3_CK_DH_RSA_DES_64_CBC_SHA
 0x0300000F

	)

155 
	#SSL3_CK_DH_RSA_DES_192_CBC3_SHA
 0x03000010

	)

157 
	#SSL3_CK_EDH_DSS_DES_40_CBC_SHA
 0x03000011

	)

158 
	#SSL3_CK_EDH_DSS_DES_64_CBC_SHA
 0x03000012

	)

159 
	#SSL3_CK_EDH_DSS_DES_192_CBC3_SHA
 0x03000013

	)

160 
	#SSL3_CK_EDH_RSA_DES_40_CBC_SHA
 0x03000014

	)

161 
	#SSL3_CK_EDH_RSA_DES_64_CBC_SHA
 0x03000015

	)

162 
	#SSL3_CK_EDH_RSA_DES_192_CBC3_SHA
 0x03000016

	)

164 
	#SSL3_CK_ADH_RC4_40_MD5
 0x03000017

	)

165 
	#SSL3_CK_ADH_RC4_128_MD5
 0x03000018

	)

166 
	#SSL3_CK_ADH_DES_40_CBC_SHA
 0x03000019

	)

167 
	#SSL3_CK_ADH_DES_64_CBC_SHA
 0x0300001A

	)

168 
	#SSL3_CK_ADH_DES_192_CBC_SHA
 0x0300001B

	)

171 
	#SSL3_CK_FZA_DMS_NULL_SHA
 0x0300001C

	)

172 
	#SSL3_CK_FZA_DMS_FZA_SHA
 0x0300001D

	)

176 
	#SSL3_CK_FZA_DMS_RC4_SHA
 0x0300001E

	)

182 
	#SSL3_CK_KRB5_DES_64_CBC_SHA
 0x0300001E

	)

183 
	#SSL3_CK_KRB5_DES_192_CBC3_SHA
 0x0300001F

	)

184 
	#SSL3_CK_KRB5_RC4_128_SHA
 0x03000020

	)

185 
	#SSL3_CK_KRB5_IDEA_128_CBC_SHA
 0x03000021

	)

186 
	#SSL3_CK_KRB5_DES_64_CBC_MD5
 0x03000022

	)

187 
	#SSL3_CK_KRB5_DES_192_CBC3_MD5
 0x03000023

	)

188 
	#SSL3_CK_KRB5_RC4_128_MD5
 0x03000024

	)

189 
	#SSL3_CK_KRB5_IDEA_128_CBC_MD5
 0x03000025

	)

191 
	#SSL3_CK_KRB5_DES_40_CBC_SHA
 0x03000026

	)

192 
	#SSL3_CK_KRB5_RC2_40_CBC_SHA
 0x03000027

	)

193 
	#SSL3_CK_KRB5_RC4_40_SHA
 0x03000028

	)

194 
	#SSL3_CK_KRB5_DES_40_CBC_MD5
 0x03000029

	)

195 
	#SSL3_CK_KRB5_RC2_40_CBC_MD5
 0x0300002A

	)

196 
	#SSL3_CK_KRB5_RC4_40_MD5
 0x0300002B

	)

198 
	#SSL3_TXT_RSA_NULL_MD5
 "NULL-MD5"

	)

199 
	#SSL3_TXT_RSA_NULL_SHA
 "NULL-SHA"

	)

200 
	#SSL3_TXT_RSA_RC4_40_MD5
 "EXP-RC4-MD5"

	)

201 
	#SSL3_TXT_RSA_RC4_128_MD5
 "RC4-MD5"

	)

202 
	#SSL3_TXT_RSA_RC4_128_SHA
 "RC4-SHA"

	)

203 
	#SSL3_TXT_RSA_RC2_40_MD5
 "EXP-RC2-CBC-MD5"

	)

204 
	#SSL3_TXT_RSA_IDEA_128_SHA
 "IDEA-CBC-SHA"

	)

205 
	#SSL3_TXT_RSA_DES_40_CBC_SHA
 "EXP-DES-CBC-SHA"

	)

206 
	#SSL3_TXT_RSA_DES_64_CBC_SHA
 "DES-CBC-SHA"

	)

207 
	#SSL3_TXT_RSA_DES_192_CBC3_SHA
 "DES-CBC3-SHA"

	)

209 
	#SSL3_TXT_DH_DSS_DES_40_CBC_SHA
 "EXP-DH-DSS-DES-CBC-SHA"

	)

210 
	#SSL3_TXT_DH_DSS_DES_64_CBC_SHA
 "DH-DSS-DES-CBC-SHA"

	)

211 
	#SSL3_TXT_DH_DSS_DES_192_CBC3_SHA
 "DH-DSS-DES-CBC3-SHA"

	)

212 
	#SSL3_TXT_DH_RSA_DES_40_CBC_SHA
 "EXP-DH-RSA-DES-CBC-SHA"

	)

213 
	#SSL3_TXT_DH_RSA_DES_64_CBC_SHA
 "DH-RSA-DES-CBC-SHA"

	)

214 
	#SSL3_TXT_DH_RSA_DES_192_CBC3_SHA
 "DH-RSA-DES-CBC3-SHA"

	)

216 
	#SSL3_TXT_EDH_DSS_DES_40_CBC_SHA
 "EXP-EDH-DSS-DES-CBC-SHA"

	)

217 
	#SSL3_TXT_EDH_DSS_DES_64_CBC_SHA
 "EDH-DSS-DES-CBC-SHA"

	)

218 
	#SSL3_TXT_EDH_DSS_DES_192_CBC3_SHA
 "EDH-DSS-DES-CBC3-SHA"

	)

219 
	#SSL3_TXT_EDH_RSA_DES_40_CBC_SHA
 "EXP-EDH-RSA-DES-CBC-SHA"

	)

220 
	#SSL3_TXT_EDH_RSA_DES_64_CBC_SHA
 "EDH-RSA-DES-CBC-SHA"

	)

221 
	#SSL3_TXT_EDH_RSA_DES_192_CBC3_SHA
 "EDH-RSA-DES-CBC3-SHA"

	)

223 
	#SSL3_TXT_ADH_RC4_40_MD5
 "EXP-ADH-RC4-MD5"

	)

224 
	#SSL3_TXT_ADH_RC4_128_MD5
 "ADH-RC4-MD5"

	)

225 
	#SSL3_TXT_ADH_DES_40_CBC_SHA
 "EXP-ADH-DES-CBC-SHA"

	)

226 
	#SSL3_TXT_ADH_DES_64_CBC_SHA
 "ADH-DES-CBC-SHA"

	)

227 
	#SSL3_TXT_ADH_DES_192_CBC_SHA
 "ADH-DES-CBC3-SHA"

	)

230 
	#SSL3_TXT_FZA_DMS_NULL_SHA
 "FZA-NULL-SHA"

	)

231 
	#SSL3_TXT_FZA_DMS_FZA_SHA
 "FZA-FZA-CBC-SHA"

	)

232 
	#SSL3_TXT_FZA_DMS_RC4_SHA
 "FZA-RC4-SHA"

	)

235 
	#SSL3_TXT_KRB5_DES_64_CBC_SHA
 "KRB5-DES-CBC-SHA"

	)

236 
	#SSL3_TXT_KRB5_DES_192_CBC3_SHA
 "KRB5-DES-CBC3-SHA"

	)

237 
	#SSL3_TXT_KRB5_RC4_128_SHA
 "KRB5-RC4-SHA"

	)

238 
	#SSL3_TXT_KRB5_IDEA_128_CBC_SHA
 "KRB5-IDEA-CBC-SHA"

	)

239 
	#SSL3_TXT_KRB5_DES_64_CBC_MD5
 "KRB5-DES-CBC-MD5"

	)

240 
	#SSL3_TXT_KRB5_DES_192_CBC3_MD5
 "KRB5-DES-CBC3-MD5"

	)

241 
	#SSL3_TXT_KRB5_RC4_128_MD5
 "KRB5-RC4-MD5"

	)

242 
	#SSL3_TXT_KRB5_IDEA_128_CBC_MD5
 "KRB5-IDEA-CBC-MD5"

	)

244 
	#SSL3_TXT_KRB5_DES_40_CBC_SHA
 "EXP-KRB5-DES-CBC-SHA"

	)

245 
	#SSL3_TXT_KRB5_RC2_40_CBC_SHA
 "EXP-KRB5-RC2-CBC-SHA"

	)

246 
	#SSL3_TXT_KRB5_RC4_40_SHA
 "EXP-KRB5-RC4-SHA"

	)

247 
	#SSL3_TXT_KRB5_DES_40_CBC_MD5
 "EXP-KRB5-DES-CBC-MD5"

	)

248 
	#SSL3_TXT_KRB5_RC2_40_CBC_MD5
 "EXP-KRB5-RC2-CBC-MD5"

	)

249 
	#SSL3_TXT_KRB5_RC4_40_MD5
 "EXP-KRB5-RC4-MD5"

	)

251 
	#SSL3_SSL_SESSION_ID_LENGTH
 32

	)

252 
	#SSL3_MAX_SSL_SESSION_ID_LENGTH
 32

	)

254 
	#SSL3_MASTER_SECRET_SIZE
 48

	)

255 
	#SSL3_RANDOM_SIZE
 32

	)

256 
	#SSL3_SESSION_ID_SIZE
 32

	)

257 
	#SSL3_RT_HEADER_LENGTH
 5

	)

259 #i‚de‡
SSL3_ALIGN_PAYLOAD


266 
	#SSL3_ALIGN_PAYLOAD
 8

	)

268 #i‡(
SSL3_ALIGN_PAYLOAD
&(SSL3_ALIGN_PAYLOAD-1))!=0

270 #unde‡
SSL3_ALIGN_PAYLOAD


279 
	#SSL3_RT_MAX_MD_SIZE
 64

	)

284 
	#SSL_RT_MAX_CIPHER_BLOCK_SIZE
 16

	)

286 
	#SSL3_RT_MAX_EXTRA
 (16384)

	)

289 
	#SSL3_RT_MAX_PLAIN_LENGTH
 16384

	)

291 
	#SSL3_RT_MAX_COMPRESSED_OVERHEAD
 1024

	)

297 
	#SSL3_RT_MAX_ENCRYPTED_OVERHEAD
 (256 + 
SSL3_RT_MAX_MD_SIZE
)

	)

303 
	#SSL3_RT_SEND_MAX_ENCRYPTED_OVERHEAD
 \

304 (
SSL_RT_MAX_CIPHER_BLOCK_SIZE
 + 
SSL3_RT_MAX_MD_SIZE
)

	)

308 #ifde‡
OPENSSL_NO_COMP


309 
	#SSL3_RT_MAX_COMPRESSED_LENGTH
 
SSL3_RT_MAX_PLAIN_LENGTH


	)

311 
	#SSL3_RT_MAX_COMPRESSED_LENGTH
 \

312 (
SSL3_RT_MAX_PLAIN_LENGTH
+
SSL3_RT_MAX_COMPRESSED_OVERHEAD
)

	)

314 
	#SSL3_RT_MAX_ENCRYPTED_LENGTH
 \

315 (
SSL3_RT_MAX_ENCRYPTED_OVERHEAD
+
SSL3_RT_MAX_COMPRESSED_LENGTH
)

	)

316 
	#SSL3_RT_MAX_PACKET_SIZE
 \

317 (
SSL3_RT_MAX_ENCRYPTED_LENGTH
+
SSL3_RT_HEADER_LENGTH
)

	)

319 
	#SSL3_MD_CLIENT_FINISHED_CONST
 "\x43\x4C\x4E\x54"

	)

320 
	#SSL3_MD_SERVER_FINISHED_CONST
 "\x53\x52\x56\x52"

	)

322 
	#SSL3_VERSION
 0x0300

	)

323 
	#SSL3_VERSION_MAJOR
 0x03

	)

324 
	#SSL3_VERSION_MINOR
 0x00

	)

326 
	#SSL3_RT_CHANGE_CIPHER_SPEC
 20

	)

327 
	#SSL3_RT_ALERT
 21

	)

328 
	#SSL3_RT_HANDSHAKE
 22

	)

329 
	#SSL3_RT_APPLICATION_DATA
 23

	)

330 
	#TLS1_RT_HEARTBEAT
 24

	)

332 
	#SSL3_AL_WARNING
 1

	)

333 
	#SSL3_AL_FATAL
 2

	)

335 
	#SSL3_AD_CLOSE_NOTIFY
 0

	)

336 
	#SSL3_AD_UNEXPECTED_MESSAGE
 10

	)

337 
	#SSL3_AD_BAD_RECORD_MAC
 20

	)

338 
	#SSL3_AD_DECOMPRESSION_FAILURE
 30

	)

339 
	#SSL3_AD_HANDSHAKE_FAILURE
 40

	)

340 
	#SSL3_AD_NO_CERTIFICATE
 41

	)

341 
	#SSL3_AD_BAD_CERTIFICATE
 42

	)

342 
	#SSL3_AD_UNSUPPORTED_CERTIFICATE
 43

	)

343 
	#SSL3_AD_CERTIFICATE_REVOKED
 44

	)

344 
	#SSL3_AD_CERTIFICATE_EXPIRED
 45

	)

345 
	#SSL3_AD_CERTIFICATE_UNKNOWN
 46

	)

346 
	#SSL3_AD_ILLEGAL_PARAMETER
 47

	)

348 
	#TLS1_HB_REQUEST
 1

	)

349 
	#TLS1_HB_RESPONSE
 2

	)

351 #i‚de‡
OPENSSL_NO_SSL_INTERN


353 
	ss¶3_ªc‹d_°


355  
ty≥
;

356  
Àngth
;

357  
off
;

358  *
d©a
;

359  *
öput
;

360  *
comp
;

361  
ïoch
;

362  
£q_num
[8];

363 } 
	tSSL3_RECORD
;

365 
	ss¶3_buf„r_°


367 *
buf
;

369 
size_t
 
Àn
;

370 
off£t
;

371 
À·
;

372 } 
	tSSL3_BUFFER
;

376 
	#SSL3_CT_RSA_SIGN
 1

	)

377 
	#SSL3_CT_DSS_SIGN
 2

	)

378 
	#SSL3_CT_RSA_FIXED_DH
 3

	)

379 
	#SSL3_CT_DSS_FIXED_DH
 4

	)

380 
	#SSL3_CT_RSA_EPHEMERAL_DH
 5

	)

381 
	#SSL3_CT_DSS_EPHEMERAL_DH
 6

	)

382 
	#SSL3_CT_FORTEZZA_DMS
 20

	)

387 
	#SSL3_CT_NUMBER
 9

	)

390 
	#SSL3_FLAGS_NO_RENEGOTIATE_CIPHERS
 0x0001

	)

391 
	#SSL3_FLAGS_DELAY_CLIENT_FINISHED
 0x0002

	)

392 
	#SSL3_FLAGS_POP_BUFFER
 0x0004

	)

393 
	#TLS1_FLAGS_TLS_PADDING_BUG
 0x0008

	)

394 
	#TLS1_FLAGS_SKIP_CERT_VERIFY
 0x0010

	)

395 
	#TLS1_FLAGS_KEEP_HANDSHAKE
 0x0020

	)

400 
	#SSL3_FLAGS_CCS_OK
 0x0080

	)

411 
	#SSL3_FLAGS_SGC_RESTART_DONE
 0x0040

	)

413 #i‚de‡
OPENSSL_NO_SSL_INTERN


415 
	ss¶3_°©e_°


417 
Êags
;

418 
dñay_buf_p›_ªt
;

420 
ªad_£quí˚
[8];

421 
ªad_mac_£¸ë_size
;

422 
ªad_mac_£¸ë
[
EVP_MAX_MD_SIZE
];

423 
wrôe_£quí˚
[8];

424 
wrôe_mac_£¸ë_size
;

425 
wrôe_mac_£¸ë
[
EVP_MAX_MD_SIZE
];

427 
£rvî_øndom
[
SSL3_RANDOM_SIZE
];

428 
˛õ¡_øndom
[
SSL3_RANDOM_SIZE
];

431 
√ed_em±y_‰agmíts
;

432 
em±y_‰agmít_d⁄e
;

435 
öô_exåa
;

437 
SSL3_BUFFER
 
rbuf
;

438 
SSL3_BUFFER
 
wbuf
;

440 
SSL3_RECORD
 
ºec
;

441 
SSL3_RECORD
 
wªc
;

445 
Æît_‰agmít
[2];

446 
Æît_‰agmít_Àn
;

447 
h™dshake_‰agmít
[4];

448 
h™dshake_‰agmít_Àn
;

451 
wnum
;

452 
w≥nd_tŸ
;

453 
w≥nd_ty≥
;

454 
w≥nd_ªt
;

455 c⁄° *
w≥nd_buf
;

458 
BIO
 *
h™dshake_buf„r
;

462 
EVP_MD_CTX
 **
h™dshake_dg°
;

468 
ch™ge_cùhî_•ec
;

470 
w¨n_Æît
;

471 
Áèl_Æît
;

474 
Æît_di•©ch
;

475 
£nd_Æît
[2];

479 
ª√gŸüã
;

480 
tŸÆ_ª√gŸüti⁄s
;

481 
num_ª√gŸüti⁄s
;

483 
ö_ªad_≠p_d©a
;

488 *
˛õ¡_›aque_¥f_öput
;

489 
size_t
 
˛õ¡_›aque_¥f_öput_Àn
;

490 *
£rvî_›aque_¥f_öput
;

491 
size_t
 
£rvî_›aque_¥f_öput_Àn
;

495 
˚π_vîify_md
[
EVP_MAX_MD_SIZE
*2];

498 
föish_md
[
EVP_MAX_MD_SIZE
*2];

499 
föish_md_Àn
;

500 
≥î_föish_md
[
EVP_MAX_MD_SIZE
*2];

501 
≥î_föish_md_Àn
;

503 
mesßge_size
;

504 
mesßge_ty≥
;

507 c⁄° 
SSL_CIPHER
 *
√w_cùhî
;

508 #i‚de‡
OPENSSL_NO_DH


509 
DH
 *
dh
;

512 #i‚de‡
OPENSSL_NO_ECDH


513 
EC_KEY
 *
ecdh
;

517 
√xt_°©e
;

519 
ªu£_mesßge
;

522 
˚π_ªq
;

523 
˘y≥_num
;

524 
˘y≥
[
SSL3_CT_NUMBER
];

525 
STACK_OF
(
X509_NAME
Ë*
ˇ_«mes
;

527 
u£_rß_tmp
;

529 
key_block_Àngth
;

530 *
key_block
;

532 c⁄° 
EVP_CIPHER
 *
√w_sym_íc
;

533 c⁄° 
EVP_MD
 *
√w_hash
;

534 
√w_mac_pkey_ty≥
;

535 
√w_mac_£¸ë_size
;

536 #i‚de‡
OPENSSL_NO_COMP


537 c⁄° 
SSL_COMP
 *
√w_com¥essi⁄
;

539 *
√w_com¥essi⁄
;

541 
˚π_ªque°
;

542 } 
tmp
;

545 
¥evious_˛õ¡_föished
[
EVP_MAX_MD_SIZE
];

546 
¥evious_˛õ¡_föished_Àn
;

547 
¥evious_£rvî_föished
[
EVP_MAX_MD_SIZE
];

548 
¥evious_£rvî_föished_Àn
;

549 
£nd_c⁄√˘i⁄_bödög
;

551 #i‚de‡
OPENSSL_NO_NEXTPROTONEG


553 
√xt_¥Ÿo_√g_£í
;

556 #i‚de‡
OPENSSL_NO_TLSEXT


557 #i‚de‡
OPENSSL_NO_EC


561 
is_¥obably_ßÁri
;

564 } 
	tSSL3_STATE
;

571 
	#SSL3_ST_CW_FLUSH
 (0x100|
SSL_ST_CONNECT
)

	)

572 #i‚de‡
OPENSSL_NO_SCTP


573 
	#DTLS1_SCTP_ST_CW_WRITE_SOCK
 (0x310|
SSL_ST_CONNECT
)

	)

574 
	#DTLS1_SCTP_ST_CR_READ_SOCK
 (0x320|
SSL_ST_CONNECT
)

	)

577 
	#SSL3_ST_CW_CLNT_HELLO_A
 (0x110|
SSL_ST_CONNECT
)

	)

578 
	#SSL3_ST_CW_CLNT_HELLO_B
 (0x111|
SSL_ST_CONNECT
)

	)

580 
	#SSL3_ST_CR_SRVR_HELLO_A
 (0x120|
SSL_ST_CONNECT
)

	)

581 
	#SSL3_ST_CR_SRVR_HELLO_B
 (0x121|
SSL_ST_CONNECT
)

	)

582 
	#DTLS1_ST_CR_HELLO_VERIFY_REQUEST_A
 (0x126|
SSL_ST_CONNECT
)

	)

583 
	#DTLS1_ST_CR_HELLO_VERIFY_REQUEST_B
 (0x127|
SSL_ST_CONNECT
)

	)

584 
	#SSL3_ST_CR_CERT_A
 (0x130|
SSL_ST_CONNECT
)

	)

585 
	#SSL3_ST_CR_CERT_B
 (0x131|
SSL_ST_CONNECT
)

	)

586 
	#SSL3_ST_CR_KEY_EXCH_A
 (0x140|
SSL_ST_CONNECT
)

	)

587 
	#SSL3_ST_CR_KEY_EXCH_B
 (0x141|
SSL_ST_CONNECT
)

	)

588 
	#SSL3_ST_CR_CERT_REQ_A
 (0x150|
SSL_ST_CONNECT
)

	)

589 
	#SSL3_ST_CR_CERT_REQ_B
 (0x151|
SSL_ST_CONNECT
)

	)

590 
	#SSL3_ST_CR_SRVR_DONE_A
 (0x160|
SSL_ST_CONNECT
)

	)

591 
	#SSL3_ST_CR_SRVR_DONE_B
 (0x161|
SSL_ST_CONNECT
)

	)

593 
	#SSL3_ST_CW_CERT_A
 (0x170|
SSL_ST_CONNECT
)

	)

594 
	#SSL3_ST_CW_CERT_B
 (0x171|
SSL_ST_CONNECT
)

	)

595 
	#SSL3_ST_CW_CERT_C
 (0x172|
SSL_ST_CONNECT
)

	)

596 
	#SSL3_ST_CW_CERT_D
 (0x173|
SSL_ST_CONNECT
)

	)

597 
	#SSL3_ST_CW_KEY_EXCH_A
 (0x180|
SSL_ST_CONNECT
)

	)

598 
	#SSL3_ST_CW_KEY_EXCH_B
 (0x181|
SSL_ST_CONNECT
)

	)

599 
	#SSL3_ST_CW_CERT_VRFY_A
 (0x190|
SSL_ST_CONNECT
)

	)

600 
	#SSL3_ST_CW_CERT_VRFY_B
 (0x191|
SSL_ST_CONNECT
)

	)

601 
	#SSL3_ST_CW_CHANGE_A
 (0x1A0|
SSL_ST_CONNECT
)

	)

602 
	#SSL3_ST_CW_CHANGE_B
 (0x1A1|
SSL_ST_CONNECT
)

	)

603 #i‚de‡
OPENSSL_NO_NEXTPROTONEG


604 
	#SSL3_ST_CW_NEXT_PROTO_A
 (0x200|
SSL_ST_CONNECT
)

	)

605 
	#SSL3_ST_CW_NEXT_PROTO_B
 (0x201|
SSL_ST_CONNECT
)

	)

607 
	#SSL3_ST_CW_FINISHED_A
 (0x1B0|
SSL_ST_CONNECT
)

	)

608 
	#SSL3_ST_CW_FINISHED_B
 (0x1B1|
SSL_ST_CONNECT
)

	)

610 
	#SSL3_ST_CR_CHANGE_A
 (0x1C0|
SSL_ST_CONNECT
)

	)

611 
	#SSL3_ST_CR_CHANGE_B
 (0x1C1|
SSL_ST_CONNECT
)

	)

612 
	#SSL3_ST_CR_FINISHED_A
 (0x1D0|
SSL_ST_CONNECT
)

	)

613 
	#SSL3_ST_CR_FINISHED_B
 (0x1D1|
SSL_ST_CONNECT
)

	)

614 
	#SSL3_ST_CR_SESSION_TICKET_A
 (0x1E0|
SSL_ST_CONNECT
)

	)

615 
	#SSL3_ST_CR_SESSION_TICKET_B
 (0x1E1|
SSL_ST_CONNECT
)

	)

616 
	#SSL3_ST_CR_CERT_STATUS_A
 (0x1F0|
SSL_ST_CONNECT
)

	)

617 
	#SSL3_ST_CR_CERT_STATUS_B
 (0x1F1|
SSL_ST_CONNECT
)

	)

621 
	#SSL3_ST_SW_FLUSH
 (0x100|
SSL_ST_ACCEPT
)

	)

622 #i‚de‡
OPENSSL_NO_SCTP


623 
	#DTLS1_SCTP_ST_SW_WRITE_SOCK
 (0x310|
SSL_ST_ACCEPT
)

	)

624 
	#DTLS1_SCTP_ST_SR_READ_SOCK
 (0x320|
SSL_ST_ACCEPT
)

	)

628 
	#SSL3_ST_SR_CLNT_HELLO_A
 (0x110|
SSL_ST_ACCEPT
)

	)

629 
	#SSL3_ST_SR_CLNT_HELLO_B
 (0x111|
SSL_ST_ACCEPT
)

	)

630 
	#SSL3_ST_SR_CLNT_HELLO_C
 (0x112|
SSL_ST_ACCEPT
)

	)

632 
	#DTLS1_ST_SW_HELLO_VERIFY_REQUEST_A
 (0x113|
SSL_ST_ACCEPT
)

	)

633 
	#DTLS1_ST_SW_HELLO_VERIFY_REQUEST_B
 (0x114|
SSL_ST_ACCEPT
)

	)

634 
	#SSL3_ST_SW_HELLO_REQ_A
 (0x120|
SSL_ST_ACCEPT
)

	)

635 
	#SSL3_ST_SW_HELLO_REQ_B
 (0x121|
SSL_ST_ACCEPT
)

	)

636 
	#SSL3_ST_SW_HELLO_REQ_C
 (0x122|
SSL_ST_ACCEPT
)

	)

637 
	#SSL3_ST_SW_SRVR_HELLO_A
 (0x130|
SSL_ST_ACCEPT
)

	)

638 
	#SSL3_ST_SW_SRVR_HELLO_B
 (0x131|
SSL_ST_ACCEPT
)

	)

639 
	#SSL3_ST_SW_CERT_A
 (0x140|
SSL_ST_ACCEPT
)

	)

640 
	#SSL3_ST_SW_CERT_B
 (0x141|
SSL_ST_ACCEPT
)

	)

641 
	#SSL3_ST_SW_KEY_EXCH_A
 (0x150|
SSL_ST_ACCEPT
)

	)

642 
	#SSL3_ST_SW_KEY_EXCH_B
 (0x151|
SSL_ST_ACCEPT
)

	)

643 
	#SSL3_ST_SW_CERT_REQ_A
 (0x160|
SSL_ST_ACCEPT
)

	)

644 
	#SSL3_ST_SW_CERT_REQ_B
 (0x161|
SSL_ST_ACCEPT
)

	)

645 
	#SSL3_ST_SW_SRVR_DONE_A
 (0x170|
SSL_ST_ACCEPT
)

	)

646 
	#SSL3_ST_SW_SRVR_DONE_B
 (0x171|
SSL_ST_ACCEPT
)

	)

648 
	#SSL3_ST_SR_CERT_A
 (0x180|
SSL_ST_ACCEPT
)

	)

649 
	#SSL3_ST_SR_CERT_B
 (0x181|
SSL_ST_ACCEPT
)

	)

650 
	#SSL3_ST_SR_KEY_EXCH_A
 (0x190|
SSL_ST_ACCEPT
)

	)

651 
	#SSL3_ST_SR_KEY_EXCH_B
 (0x191|
SSL_ST_ACCEPT
)

	)

652 
	#SSL3_ST_SR_CERT_VRFY_A
 (0x1A0|
SSL_ST_ACCEPT
)

	)

653 
	#SSL3_ST_SR_CERT_VRFY_B
 (0x1A1|
SSL_ST_ACCEPT
)

	)

654 
	#SSL3_ST_SR_CHANGE_A
 (0x1B0|
SSL_ST_ACCEPT
)

	)

655 
	#SSL3_ST_SR_CHANGE_B
 (0x1B1|
SSL_ST_ACCEPT
)

	)

656 #i‚de‡
OPENSSL_NO_NEXTPROTONEG


657 
	#SSL3_ST_SR_NEXT_PROTO_A
 (0x210|
SSL_ST_ACCEPT
)

	)

658 
	#SSL3_ST_SR_NEXT_PROTO_B
 (0x211|
SSL_ST_ACCEPT
)

	)

660 
	#SSL3_ST_SR_FINISHED_A
 (0x1C0|
SSL_ST_ACCEPT
)

	)

661 
	#SSL3_ST_SR_FINISHED_B
 (0x1C1|
SSL_ST_ACCEPT
)

	)

663 
	#SSL3_ST_SW_CHANGE_A
 (0x1D0|
SSL_ST_ACCEPT
)

	)

664 
	#SSL3_ST_SW_CHANGE_B
 (0x1D1|
SSL_ST_ACCEPT
)

	)

665 
	#SSL3_ST_SW_FINISHED_A
 (0x1E0|
SSL_ST_ACCEPT
)

	)

666 
	#SSL3_ST_SW_FINISHED_B
 (0x1E1|
SSL_ST_ACCEPT
)

	)

667 
	#SSL3_ST_SW_SESSION_TICKET_A
 (0x1F0|
SSL_ST_ACCEPT
)

	)

668 
	#SSL3_ST_SW_SESSION_TICKET_B
 (0x1F1|
SSL_ST_ACCEPT
)

	)

669 
	#SSL3_ST_SW_CERT_STATUS_A
 (0x200|
SSL_ST_ACCEPT
)

	)

670 
	#SSL3_ST_SW_CERT_STATUS_B
 (0x201|
SSL_ST_ACCEPT
)

	)

672 
	#SSL3_MT_HELLO_REQUEST
 0

	)

673 
	#SSL3_MT_CLIENT_HELLO
 1

	)

674 
	#SSL3_MT_SERVER_HELLO
 2

	)

675 
	#SSL3_MT_NEWSESSION_TICKET
 4

	)

676 
	#SSL3_MT_CERTIFICATE
 11

	)

677 
	#SSL3_MT_SERVER_KEY_EXCHANGE
 12

	)

678 
	#SSL3_MT_CERTIFICATE_REQUEST
 13

	)

679 
	#SSL3_MT_SERVER_DONE
 14

	)

680 
	#SSL3_MT_CERTIFICATE_VERIFY
 15

	)

681 
	#SSL3_MT_CLIENT_KEY_EXCHANGE
 16

	)

682 
	#SSL3_MT_FINISHED
 20

	)

683 
	#SSL3_MT_CERTIFICATE_STATUS
 22

	)

684 #i‚de‡
OPENSSL_NO_NEXTPROTONEG


685 
	#SSL3_MT_NEXT_PROTO
 67

	)

687 
	#DTLS1_MT_HELLO_VERIFY_REQUEST
 3

	)

690 
	#SSL3_MT_CCS
 1

	)

693 
	#SSL3_CC_READ
 0x01

	)

694 
	#SSL3_CC_WRITE
 0x02

	)

695 
	#SSL3_CC_CLIENT
 0x10

	)

696 
	#SSL3_CC_SERVER
 0x20

	)

697 
	#SSL3_CHANGE_CIPHER_CLIENT_WRITE
 (
SSL3_CC_CLIENT
|
SSL3_CC_WRITE
)

	)

698 
	#SSL3_CHANGE_CIPHER_SERVER_READ
 (
SSL3_CC_SERVER
|
SSL3_CC_READ
)

	)

699 
	#SSL3_CHANGE_CIPHER_CLIENT_READ
 (
SSL3_CC_CLIENT
|
SSL3_CC_READ
)

	)

700 
	#SSL3_CHANGE_CIPHER_SERVER_WRITE
 (
SSL3_CC_SERVER
|
SSL3_CC_WRITE
)

	)

702 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/stack.h

59 #i‚de‡
HEADER_STACK_H


60 
	#HEADER_STACK_H


	)

62 #ifde‡ 
__˝lu•lus


66 
	s°ack_°


68 
num
;

69 **
d©a
;

70 
s‹ãd
;

72 
num_Æloc
;

73 (*
comp
)(const *, const *);

74 } 
	t_STACK
;

76 
	#M_sk_num
(
sk
Ë((skË? (sk)->
num
:-1)

	)

77 
	#M_sk_vÆue
(
sk
,
n
Ë((skË? (sk)->
d©a
[n] : 
NULL
)

	)

79 
sk_num
(c⁄° 
_STACK
 *);

80 *
sk_vÆue
(c⁄° 
_STACK
 *, );

82 *
sk_£t
(
_STACK
 *, , *);

84 
_STACK
 *
sk_√w
((*
cmp
)(const *, const *));

85 
_STACK
 *
sk_√w_nuŒ
();

86 
sk_‰ì
(
_STACK
 *);

87 
sk_p›_‰ì
(
_STACK
 *
°
, (*
func
)(*));

88 
sk_ö£π
(
_STACK
 *
sk
, *
d©a
, 
whîe
);

89 *
sk_dñëe
(
_STACK
 *
°
, 
loc
);

90 *
sk_dñëe_±r
(
_STACK
 *
°
, *
p
);

91 
sk_föd
(
_STACK
 *
°
, *
d©a
);

92 
sk_föd_ex
(
_STACK
 *
°
, *
d©a
);

93 
sk_push
(
_STACK
 *
°
, *
d©a
);

94 
sk_unshi·
(
_STACK
 *
°
, *
d©a
);

95 *
sk_shi·
(
_STACK
 *
°
);

96 *
sk_p›
(
_STACK
 *
°
);

97 
sk_zîo
(
_STACK
 *
°
);

98 (*
sk_£t_cmp_func
(
_STACK
 *
sk
, (*
c
)(const *, const *)))

100 
_STACK
 *
sk_dup
(_STACK *
°
);

101 
sk_s‹t
(
_STACK
 *
°
);

102 
sk_is_s‹ãd
(c⁄° 
_STACK
 *
°
);

104 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/symhacks.h

55 #i‚de‡
HEADER_SYMHACKS_H


56 
	#HEADER_SYMHACKS_H


	)

58 
	~<›ís¶/e_os2.h
>

68 #ifde‡
OPENSSL_SYS_VMS


71 #unde‡
CRYPTO_gë_ex_d©a_im∂emíèti⁄


72 
	#CRYPTO_gë_ex_d©a_im∂emíèti⁄
 
CRYPTO_gë_ex_d©a_im∂


	)

73 #unde‡
CRYPTO_£t_ex_d©a_im∂emíèti⁄


74 
	#CRYPTO_£t_ex_d©a_im∂emíèti⁄
 
CRYPTO_£t_ex_d©a_im∂


	)

77 #unde‡
ASN1_STRING_£t_deÁu…_mask_asc


78 
	#ASN1_STRING_£t_deÁu…_mask_asc
 
ASN1_STRING_£t_def_mask_asc


	)

82 #unde‡
i2d_ASN1_SET_OF_PKCS7_SIGNER_INFO


83 
	#i2d_ASN1_SET_OF_PKCS7_SIGNER_INFO
 
i2d_ASN1_SET_OF_PKCS7_SIGINF


	)

84 #unde‡
d2i_ASN1_SET_OF_PKCS7_SIGNER_INFO


85 
	#d2i_ASN1_SET_OF_PKCS7_SIGNER_INFO
 
d2i_ASN1_SET_OF_PKCS7_SIGINF


	)

90 #unde‡
i2d_ASN1_SET_OF_PKCS7_RECIP_INFO


91 
	#i2d_ASN1_SET_OF_PKCS7_RECIP_INFO
 
i2d_ASN1_SET_OF_PKCS7_RECINF


	)

92 #unde‡
d2i_ASN1_SET_OF_PKCS7_RECIP_INFO


93 
	#d2i_ASN1_SET_OF_PKCS7_RECIP_INFO
 
d2i_ASN1_SET_OF_PKCS7_RECINF


	)

98 #unde‡
i2d_ASN1_SET_OF_ACCESS_DESCRIPTION


99 
	#i2d_ASN1_SET_OF_ACCESS_DESCRIPTION
 
i2d_ASN1_SET_OF_ACC_DESC


	)

100 #unde‡
d2i_ASN1_SET_OF_ACCESS_DESCRIPTION


101 
	#d2i_ASN1_SET_OF_ACCESS_DESCRIPTION
 
d2i_ASN1_SET_OF_ACC_DESC


	)

105 #unde‡
PEM_ªad_NETSCAPE_CERT_SEQUENCE


106 
	#PEM_ªad_NETSCAPE_CERT_SEQUENCE
 
PEM_ªad_NS_CERT_SEQ


	)

107 #unde‡
PEM_wrôe_NETSCAPE_CERT_SEQUENCE


108 
	#PEM_wrôe_NETSCAPE_CERT_SEQUENCE
 
PEM_wrôe_NS_CERT_SEQ


	)

109 #unde‡
PEM_ªad_bio_NETSCAPE_CERT_SEQUENCE


110 
	#PEM_ªad_bio_NETSCAPE_CERT_SEQUENCE
 
PEM_ªad_bio_NS_CERT_SEQ


	)

111 #unde‡
PEM_wrôe_bio_NETSCAPE_CERT_SEQUENCE


112 
	#PEM_wrôe_bio_NETSCAPE_CERT_SEQUENCE
 
PEM_wrôe_bio_NS_CERT_SEQ


	)

113 #unde‡
PEM_wrôe_cb_bio_NETSCAPE_CERT_SEQUENCE


114 
	#PEM_wrôe_cb_bio_NETSCAPE_CERT_SEQUENCE
 
PEM_wrôe_cb_bio_NS_CERT_SEQ


	)

117 #unde‡
PEM_ªad_PKCS8_PRIV_KEY_INFO


118 
	#PEM_ªad_PKCS8_PRIV_KEY_INFO
 
PEM_ªad_P8_PRIV_KEY_INFO


	)

119 #unde‡
PEM_wrôe_PKCS8_PRIV_KEY_INFO


120 
	#PEM_wrôe_PKCS8_PRIV_KEY_INFO
 
PEM_wrôe_P8_PRIV_KEY_INFO


	)

121 #unde‡
PEM_ªad_bio_PKCS8_PRIV_KEY_INFO


122 
	#PEM_ªad_bio_PKCS8_PRIV_KEY_INFO
 
PEM_ªad_bio_P8_PRIV_KEY_INFO


	)

123 #unde‡
PEM_wrôe_bio_PKCS8_PRIV_KEY_INFO


124 
	#PEM_wrôe_bio_PKCS8_PRIV_KEY_INFO
 
PEM_wrôe_bio_P8_PRIV_KEY_INFO


	)

125 #unde‡
PEM_wrôe_cb_bio_PKCS8_PRIV_KEY_INFO


126 
	#PEM_wrôe_cb_bio_PKCS8_PRIV_KEY_INFO
 
PEM_wπ_cb_bio_P8_PRIV_KEY_INFO


	)

129 #unde‡
PEM_wrôe_bio_PKCS8Priv©eKey_nid


130 
	#PEM_wrôe_bio_PKCS8Priv©eKey_nid
 
PEM_wrôe_bio_PKCS8PrivKey_nid


	)

133 #unde‡
X509_REVOKED_gë_ext_by_¸ôiˇl


134 
	#X509_REVOKED_gë_ext_by_¸ôiˇl
 
X509_REVOKED_gë_ext_by_¸ôic


	)

135 #unde‡
X509_pﬁicy_åì_gë0_u£r_pﬁicõs


136 
	#X509_pﬁicy_åì_gë0_u£r_pﬁicõs
 
X509_pcy_åì_gë0_u§_pﬁicõs


	)

137 #unde‡
X509_pﬁicy_node_gë0_quÆifõrs


138 
	#X509_pﬁicy_node_gë0_quÆifõrs
 
X509_pcy_node_gë0_quÆifõrs


	)

139 #unde‡
X509_STORE_CTX_gë_ex∂icô_pﬁicy


140 
	#X509_STORE_CTX_gë_ex∂icô_pﬁicy
 
X509_STORE_CTX_gë_ex∂_pﬁicy


	)

141 #unde‡
X509_STORE_CTX_gë0_cuºít_issuî


142 
	#X509_STORE_CTX_gë0_cuºít_issuî
 
X509_STORE_CTX_gë0_cur_issuî


	)

145 #unde‡
CRYPTO_£t_dy∆ock_de°roy_ˇŒback


146 
	#CRYPTO_£t_dy∆ock_de°roy_ˇŒback
 
CRYPTO_£t_dy∆ock_de°roy_cb


	)

147 #unde‡
CRYPTO_£t_dy∆ock_¸óã_ˇŒback


148 
	#CRYPTO_£t_dy∆ock_¸óã_ˇŒback
 
CRYPTO_£t_dy∆ock_¸óã_cb


	)

149 #unde‡
CRYPTO_£t_dy∆ock_lock_ˇŒback


150 
	#CRYPTO_£t_dy∆ock_lock_ˇŒback
 
CRYPTO_£t_dy∆ock_lock_cb


	)

151 #unde‡
CRYPTO_gë_dy∆ock_lock_ˇŒback


152 
	#CRYPTO_gë_dy∆ock_lock_ˇŒback
 
CRYPTO_gë_dy∆ock_lock_cb


	)

153 #unde‡
CRYPTO_gë_dy∆ock_de°roy_ˇŒback


154 
	#CRYPTO_gë_dy∆ock_de°roy_ˇŒback
 
CRYPTO_gë_dy∆ock_de°roy_cb


	)

155 #unde‡
CRYPTO_gë_dy∆ock_¸óã_ˇŒback


156 
	#CRYPTO_gë_dy∆ock_¸óã_ˇŒback
 
CRYPTO_gë_dy∆ock_¸óã_cb


	)

157 #unde‡
CRYPTO_£t_locked_mem_ex_fun˘i⁄s


158 
	#CRYPTO_£t_locked_mem_ex_fun˘i⁄s
 
CRYPTO_£t_locked_mem_ex_funcs


	)

159 #unde‡
CRYPTO_gë_locked_mem_ex_fun˘i⁄s


160 
	#CRYPTO_gë_locked_mem_ex_fun˘i⁄s
 
CRYPTO_gë_locked_mem_ex_funcs


	)

163 #unde‡
SSL_CTX_£t_deÁu…_vîify_∑ths


164 
	#SSL_CTX_£t_deÁu…_vîify_∑ths
 
SSL_CTX_£t_def_vîify_∑ths


	)

165 #unde‡
SSL_gë_ex_d©a_X509_STORE_CTX_idx


166 
	#SSL_gë_ex_d©a_X509_STORE_CTX_idx
 
SSL_gë_ex_d_X509_STORE_CTX_idx


	)

167 #unde‡
SSL_add_fûe_˚π_subje˘s_to_°ack


168 
	#SSL_add_fûe_˚π_subje˘s_to_°ack
 
SSL_add_fûe_˚π_subjs_to_°k


	)

169 #unde‡
SSL_add_dú_˚π_subje˘s_to_°ack


170 
	#SSL_add_dú_˚π_subje˘s_to_°ack
 
SSL_add_dú_˚π_subjs_to_°k


	)

171 #unde‡
SSL_CTX_u£_˚πifiˇã_chaö_fûe


172 
	#SSL_CTX_u£_˚πifiˇã_chaö_fûe
 
SSL_CTX_u£_˚π_chaö_fûe


	)

173 #unde‡
SSL_CTX_£t_˚π_vîify_ˇŒback


174 
	#SSL_CTX_£t_˚π_vîify_ˇŒback
 
SSL_CTX_£t_˚π_vîify_cb


	)

175 #unde‡
SSL_CTX_£t_deÁu…_∑sswd_cb_u£rd©a


176 
	#SSL_CTX_£t_deÁu…_∑sswd_cb_u£rd©a
 
SSL_CTX_£t_def_∑sswd_cb_ud


	)

177 #unde‡
SSL_COMP_gë_com¥essi⁄_mëhods


178 
	#SSL_COMP_gë_com¥essi⁄_mëhods
 
SSL_COMP_gë_com¥ess_mëhods


	)

179 #unde‡
s¶_add_˛õ¡hñlo_ª√gŸüã_ext


180 
	#s¶_add_˛õ¡hñlo_ª√gŸüã_ext
 
s¶_add_˛õ¡hñlo_ª√g_ext


	)

181 #unde‡
s¶_add_£rvîhñlo_ª√gŸüã_ext


182 
	#s¶_add_£rvîhñlo_ª√gŸüã_ext
 
s¶_add_£rvîhñlo_ª√g_ext


	)

183 #unde‡
s¶_∑r£_˛õ¡hñlo_ª√gŸüã_ext


184 
	#s¶_∑r£_˛õ¡hñlo_ª√gŸüã_ext
 
s¶_∑r£_˛õ¡hñlo_ª√g_ext


	)

185 #unde‡
s¶_∑r£_£rvîhñlo_ª√gŸüã_ext


186 
	#s¶_∑r£_£rvîhñlo_ª√gŸüã_ext
 
s¶_∑r£_£rvîhñlo_ª√g_ext


	)

187 #unde‡
SSL_§p_£rvî_∑øm_wôh_u£∫ame


188 
	#SSL_§p_£rvî_∑øm_wôh_u£∫ame
 
SSL_§p_£rvî_∑øm_wôh_un


	)

189 #unde‡
SSL_CTX_£t_§p_˛õ¡_pwd_ˇŒback


190 
	#SSL_CTX_£t_§p_˛õ¡_pwd_ˇŒback
 
SSL_CTX_£t_§p_˛õ¡_pwd_cb


	)

191 #unde‡
SSL_CTX_£t_§p_vîify_∑øm_ˇŒback


192 
	#SSL_CTX_£t_§p_vîify_∑øm_ˇŒback
 
SSL_CTX_£t_§p_vfy_∑øm_cb


	)

193 #unde‡
SSL_CTX_£t_§p_u£∫ame_ˇŒback


194 
	#SSL_CTX_£t_§p_u£∫ame_ˇŒback
 
SSL_CTX_£t_§p_un_cb


	)

195 #unde‡
s¶_add_˛õ¡hñlo_u£_§ç_ext


196 
	#s¶_add_˛õ¡hñlo_u£_§ç_ext
 
s¶_add_˛ihñlo_u£_§ç_ext


	)

197 #unde‡
s¶_add_£rvîhñlo_u£_§ç_ext


198 
	#s¶_add_£rvîhñlo_u£_§ç_ext
 
s¶_add_£rhñlo_u£_§ç_ext


	)

199 #unde‡
s¶_∑r£_˛õ¡hñlo_u£_§ç_ext


200 
	#s¶_∑r£_˛õ¡hñlo_u£_§ç_ext
 
s¶_∑r£_˛ihñlo_u£_§ç_ext


	)

201 #unde‡
s¶_∑r£_£rvîhñlo_u£_§ç_ext


202 
	#s¶_∑r£_£rvîhñlo_u£_§ç_ext
 
s¶_∑r£_£rhñlo_u£_§ç_ext


	)

203 #unde‡
SSL_CTX_£t_√xt_¥Ÿos_advîti£d_cb


204 
	#SSL_CTX_£t_√xt_¥Ÿos_advîti£d_cb
 
SSL_CTX_£t_√xt_¥Ÿos_adv_cb


	)

205 #unde‡
SSL_CTX_£t_√xt_¥Ÿo_£À˘_cb


206 
	#SSL_CTX_£t_√xt_¥Ÿo_£À˘_cb
 
SSL_CTX_£t_√xt_¥Ÿo_£l_cb


	)

207 #unde‡
s¶3_cbc_ªc‹d_dige°_suµ‹ãd


208 
	#s¶3_cbc_ªc‹d_dige°_suµ‹ãd
 
s¶3_cbc_ªc‹d_dige°_suµ‹t


	)

209 #unde‡
s¶_check_˛õ¡hñlo_é£xt_œã


210 
	#s¶_check_˛õ¡hñlo_é£xt_œã
 
s¶_check_˛ihñlo_é£xt_œã


	)

211 #unde‡
s¶_check_˛õ¡hñlo_é£xt_óæy


212 
	#s¶_check_˛õ¡hñlo_é£xt_óæy
 
s¶_check_˛ihñlo_é£xt_óæy


	)

215 #unde‡
ENGINE_gë_deÁu…_BN_mod_exp_¸t


216 
	#ENGINE_gë_deÁu…_BN_mod_exp_¸t
 
ENGINE_gë_def_BN_mod_exp_¸t


	)

217 #unde‡
ENGINE_£t_deÁu…_BN_mod_exp_¸t


218 
	#ENGINE_£t_deÁu…_BN_mod_exp_¸t
 
ENGINE_£t_def_BN_mod_exp_¸t


	)

219 #unde‡
ENGINE_£t_lﬂd_¥ivkey_fun˘i⁄


220 
	#ENGINE_£t_lﬂd_¥ivkey_fun˘i⁄
 
ENGINE_£t_lﬂd_¥ivkey_‚


	)

221 #unde‡
ENGINE_gë_lﬂd_¥ivkey_fun˘i⁄


222 
	#ENGINE_gë_lﬂd_¥ivkey_fun˘i⁄
 
ENGINE_gë_lﬂd_¥ivkey_‚


	)

223 #unde‡
ENGINE_uƒegi°î_pkey_a¢1_mëhs


224 
	#ENGINE_uƒegi°î_pkey_a¢1_mëhs
 
ENGINE_uƒeg_pkey_a¢1_mëhs


	)

225 #unde‡
ENGINE_ªgi°î_Æl_pkey_a¢1_mëhs


226 
	#ENGINE_ªgi°î_Æl_pkey_a¢1_mëhs
 
ENGINE_ªg_Æl_pkey_a¢1_mëhs


	)

227 #unde‡
ENGINE_£t_deÁu…_pkey_a¢1_mëhs


228 
	#ENGINE_£t_deÁu…_pkey_a¢1_mëhs
 
ENGINE_£t_def_pkey_a¢1_mëhs


	)

229 #unde‡
ENGINE_gë_pkey_a¢1_mëh_ígöe


230 
	#ENGINE_gë_pkey_a¢1_mëh_ígöe
 
ENGINE_gë_pkey_a¢1_mëh_íg


	)

231 #unde‡
ENGINE_£t_lﬂd_s¶_˛õ¡_˚π_fun˘i⁄


232 
	#ENGINE_£t_lﬂd_s¶_˛õ¡_˚π_fun˘i⁄
 \

233 
ENGINE_£t_ld_s¶_˛¡_˚π_‚


	)

234 #unde‡
ENGINE_gë_s¶_˛õ¡_˚π_fun˘i⁄


235 
	#ENGINE_gë_s¶_˛õ¡_˚π_fun˘i⁄
 
ENGINE_gë_s¶_˛õ¡_˚π_‚


	)

238 #unde‡
OCSP_REQUEST_gë_ext_by_¸ôiˇl


239 
	#OCSP_REQUEST_gë_ext_by_¸ôiˇl
 
OCSP_REQUEST_gë_ext_by_¸ô


	)

240 #unde‡
OCSP_BASICRESP_gë_ext_by_¸ôiˇl


241 
	#OCSP_BASICRESP_gë_ext_by_¸ôiˇl
 
OCSP_BASICRESP_gë_ext_by_¸ô


	)

242 #unde‡
OCSP_SINGLERESP_gë_ext_by_¸ôiˇl


243 
	#OCSP_SINGLERESP_gë_ext_by_¸ôiˇl
 
OCSP_SINGLERESP_gë_ext_by_¸ô


	)

246 #unde‡
_os¶_ﬁd_des_ede3_cfb64_í¸y±


247 
	#_os¶_ﬁd_des_ede3_cfb64_í¸y±
 
_os¶_odes_ede3_cfb64_í¸y±


	)

248 #unde‡
_os¶_ﬁd_des_ede3_ofb64_í¸y±


249 
	#_os¶_ﬁd_des_ede3_ofb64_í¸y±
 
_os¶_odes_ede3_ofb64_í¸y±


	)

252 #unde‡
OPENSSL_add_Æl_Æg‹ôhms_noc⁄f


253 
	#OPENSSL_add_Æl_Æg‹ôhms_noc⁄f
 
OPENSSL_add_Æl_Ægo_noc⁄f


	)

254 #unde‡
OPENSSL_add_Æl_Æg‹ôhms_c⁄f


255 
	#OPENSSL_add_Æl_Æg‹ôhms_c⁄f
 
OPENSSL_add_Æl_Ægo_c⁄f


	)

256 #unde‡
EVP_PKEY_mëh_£t_vîify_ªcovî


257 
	#EVP_PKEY_mëh_£t_vîify_ªcovî
 
EVP_PKEY_mëh_£t_vrfy_ªcovî


	)

260 #unde‡
EC_GROUP_£t_poöt_c⁄vîsi⁄_f‹m


261 
	#EC_GROUP_£t_poöt_c⁄vîsi⁄_f‹m
 
EC_GROUP_£t_poöt_c⁄v_f‹m


	)

262 #unde‡
EC_GROUP_gë_poöt_c⁄vîsi⁄_f‹m


263 
	#EC_GROUP_gë_poöt_c⁄vîsi⁄_f‹m
 
EC_GROUP_gë_poöt_c⁄v_f‹m


	)

264 #unde‡
EC_GROUP_˛ór_‰ì_Æl_exåa_d©a


265 
	#EC_GROUP_˛ór_‰ì_Æl_exåa_d©a
 
EC_GROUP_˛r_‰ì_Æl_xåa_d©a


	)

266 #unde‡
EC_KEY_£t_public_key_afföe_co‹dö©es


267 
	#EC_KEY_£t_public_key_afföe_co‹dö©es
 \

268 
EC_KEY_£t_pub_key_aff_co‹ds


	)

269 #unde‡
EC_POINT_£t_J¥oje˘ive_co‹dö©es_GFp


270 
	#EC_POINT_£t_J¥oje˘ive_co‹dö©es_GFp
 \

271 
EC_POINT_£t_J¥oj_co‹ds_GFp


	)

272 #unde‡
EC_POINT_gë_J¥oje˘ive_co‹dö©es_GFp


273 
	#EC_POINT_gë_J¥oje˘ive_co‹dö©es_GFp
 \

274 
EC_POINT_gë_J¥oj_co‹ds_GFp


	)

275 #unde‡
EC_POINT_£t_afföe_co‹dö©es_GFp


276 
	#EC_POINT_£t_afföe_co‹dö©es_GFp
 
EC_POINT_£t_afföe_co‹ds_GFp


	)

277 #unde‡
EC_POINT_gë_afföe_co‹dö©es_GFp


278 
	#EC_POINT_gë_afföe_co‹dö©es_GFp
 
EC_POINT_gë_afföe_co‹ds_GFp


	)

279 #unde‡
EC_POINT_£t_com¥es£d_co‹dö©es_GFp


280 
	#EC_POINT_£t_com¥es£d_co‹dö©es_GFp
 
EC_POINT_£t_com¥_co‹ds_GFp


	)

281 #unde‡
EC_POINT_£t_afföe_co‹dö©es_GF2m


282 
	#EC_POINT_£t_afföe_co‹dö©es_GF2m
 
EC_POINT_£t_afföe_co‹ds_GF2m


	)

283 #unde‡
EC_POINT_gë_afföe_co‹dö©es_GF2m


284 
	#EC_POINT_gë_afföe_co‹dö©es_GF2m
 
EC_POINT_gë_afföe_co‹ds_GF2m


	)

285 #unde‡
EC_POINT_£t_com¥es£d_co‹dö©es_GF2m


286 
	#EC_POINT_£t_com¥es£d_co‹dö©es_GF2m
 \

287 
EC_POINT_£t_com¥_co‹ds_GF2m


	)

288 #unde‡
ec_GF2m_sim∂e_group_˛ór_föish


289 
	#ec_GF2m_sim∂e_group_˛ór_föish
 
ec_GF2m_sim∂e_gΩ_˛r_föish


	)

290 #unde‡
ec_GF2m_sim∂e_group_check_dis¸imö™t


291 
	#ec_GF2m_sim∂e_group_check_dis¸imö™t
 
ec_GF2m_sim∂e_gΩ_chk_dis¸im


	)

292 #unde‡
ec_GF2m_sim∂e_poöt_˛ór_föish


293 
	#ec_GF2m_sim∂e_poöt_˛ór_föish
 
ec_GF2m_sim∂e_±_˛r_föish


	)

294 #unde‡
ec_GF2m_sim∂e_poöt_£t_to_öföôy


295 
	#ec_GF2m_sim∂e_poöt_£t_to_öföôy
 
ec_GF2m_sim∂e_±_£t_to_öf


	)

296 #unde‡
ec_GF2m_sim∂e_poöts_make_afföe


297 
	#ec_GF2m_sim∂e_poöts_make_afföe
 
ec_GF2m_sim∂e_±s_make_afföe


	)

298 #unde‡
ec_GF2m_sim∂e_poöt_£t_afföe_co‹dö©es


299 
	#ec_GF2m_sim∂e_poöt_£t_afföe_co‹dö©es
 \

300 
ec_GF2m_smp_±_£t_af_co‹ds


	)

301 #unde‡
ec_GF2m_sim∂e_poöt_gë_afföe_co‹dö©es


302 
	#ec_GF2m_sim∂e_poöt_gë_afföe_co‹dö©es
 \

303 
ec_GF2m_smp_±_gë_af_co‹ds


	)

304 #unde‡
ec_GF2m_sim∂e_£t_com¥es£d_co‹dö©es


305 
	#ec_GF2m_sim∂e_£t_com¥es£d_co‹dö©es
 \

306 
ec_GF2m_smp_£t_com¥_co‹ds


	)

307 #unde‡
ec_GFp_sim∂e_group_£t_curve_GFp


308 
	#ec_GFp_sim∂e_group_£t_curve_GFp
 
ec_GFp_sim∂e_gΩ_£t_curve_GFp


	)

309 #unde‡
ec_GFp_sim∂e_group_gë_curve_GFp


310 
	#ec_GFp_sim∂e_group_gë_curve_GFp
 
ec_GFp_sim∂e_gΩ_gë_curve_GFp


	)

311 #unde‡
ec_GFp_sim∂e_group_˛ór_föish


312 
	#ec_GFp_sim∂e_group_˛ór_föish
 
ec_GFp_sim∂e_gΩ_˛ór_föish


	)

313 #unde‡
ec_GFp_sim∂e_group_£t_gíî©‹


314 
	#ec_GFp_sim∂e_group_£t_gíî©‹
 
ec_GFp_sim∂e_gΩ_£t_gíî©‹


	)

315 #unde‡
ec_GFp_sim∂e_group_gë0_gíî©‹


316 
	#ec_GFp_sim∂e_group_gë0_gíî©‹
 
ec_GFp_sim∂e_gΩ_gt0_gíî©‹


	)

317 #unde‡
ec_GFp_sim∂e_group_gë_coÁ˘‹


318 
	#ec_GFp_sim∂e_group_gë_coÁ˘‹
 
ec_GFp_sim∂e_gΩ_gë_coÁ˘‹


	)

319 #unde‡
ec_GFp_sim∂e_poöt_˛ór_föish


320 
	#ec_GFp_sim∂e_poöt_˛ór_föish
 
ec_GFp_sim∂e_±_˛ór_föish


	)

321 #unde‡
ec_GFp_sim∂e_poöt_£t_to_öföôy


322 
	#ec_GFp_sim∂e_poöt_£t_to_öföôy
 
ec_GFp_sim∂e_±_£t_to_öf


	)

323 #unde‡
ec_GFp_sim∂e_poöts_make_afföe


324 
	#ec_GFp_sim∂e_poöts_make_afföe
 
ec_GFp_sim∂e_±s_make_afföe


	)

325 #unde‡
ec_GFp_sim∂e_£t_J¥oje˘ive_co‹dö©es_GFp


326 
	#ec_GFp_sim∂e_£t_J¥oje˘ive_co‹dö©es_GFp
 \

327 
ec_GFp_smp_£t_J¥oj_co‹ds_GFp


	)

328 #unde‡
ec_GFp_sim∂e_gë_J¥oje˘ive_co‹dö©es_GFp


329 
	#ec_GFp_sim∂e_gë_J¥oje˘ive_co‹dö©es_GFp
 \

330 
ec_GFp_smp_gë_J¥oj_co‹ds_GFp


	)

331 #unde‡
ec_GFp_sim∂e_poöt_£t_afföe_co‹dö©es_GFp


332 
	#ec_GFp_sim∂e_poöt_£t_afföe_co‹dö©es_GFp
 \

333 
ec_GFp_smp_±_£t_af_co‹ds_GFp


	)

334 #unde‡
ec_GFp_sim∂e_poöt_gë_afföe_co‹dö©es_GFp


335 
	#ec_GFp_sim∂e_poöt_gë_afföe_co‹dö©es_GFp
 \

336 
ec_GFp_smp_±_gë_af_co‹ds_GFp


	)

337 #unde‡
ec_GFp_sim∂e_£t_com¥es£d_co‹dö©es_GFp


338 
	#ec_GFp_sim∂e_£t_com¥es£d_co‹dö©es_GFp
 \

339 
ec_GFp_smp_£t_com¥_co‹ds_GFp


	)

340 #unde‡
ec_GFp_sim∂e_poöt_£t_afföe_co‹dö©es


341 
	#ec_GFp_sim∂e_poöt_£t_afföe_co‹dö©es
 \

342 
ec_GFp_smp_±_£t_af_co‹ds


	)

343 #unde‡
ec_GFp_sim∂e_poöt_gë_afföe_co‹dö©es


344 
	#ec_GFp_sim∂e_poöt_gë_afföe_co‹dö©es
 \

345 
ec_GFp_smp_±_gë_af_co‹ds


	)

346 #unde‡
ec_GFp_sim∂e_£t_com¥es£d_co‹dö©es


347 
	#ec_GFp_sim∂e_£t_com¥es£d_co‹dö©es
 \

348 
ec_GFp_smp_£t_com¥_co‹ds


	)

349 #unde‡
ec_GFp_sim∂e_group_check_dis¸imö™t


350 
	#ec_GFp_sim∂e_group_check_dis¸imö™t
 
ec_GFp_sim∂e_gΩ_chk_dis¸im


	)

353 #unde‡
STORE_mëhod_£t_öôüli£_fun˘i⁄


354 
	#STORE_mëhod_£t_öôüli£_fun˘i⁄
 
STORE_mëh_£t_öôüli£_‚


	)

355 #unde‡
STORE_mëhod_£t_˛ónup_fun˘i⁄


356 
	#STORE_mëhod_£t_˛ónup_fun˘i⁄
 
STORE_mëh_£t_˛ónup_‚


	)

357 #unde‡
STORE_mëhod_£t_gíî©e_fun˘i⁄


358 
	#STORE_mëhod_£t_gíî©e_fun˘i⁄
 
STORE_mëh_£t_gíî©e_‚


	)

359 #unde‡
STORE_mëhod_£t_modify_fun˘i⁄


360 
	#STORE_mëhod_£t_modify_fun˘i⁄
 
STORE_mëh_£t_modify_‚


	)

361 #unde‡
STORE_mëhod_£t_ªvoke_fun˘i⁄


362 
	#STORE_mëhod_£t_ªvoke_fun˘i⁄
 
STORE_mëh_£t_ªvoke_‚


	)

363 #unde‡
STORE_mëhod_£t_dñëe_fun˘i⁄


364 
	#STORE_mëhod_£t_dñëe_fun˘i⁄
 
STORE_mëh_£t_dñëe_‚


	)

365 #unde‡
STORE_mëhod_£t_li°_°¨t_fun˘i⁄


366 
	#STORE_mëhod_£t_li°_°¨t_fun˘i⁄
 
STORE_mëh_£t_li°_°¨t_‚


	)

367 #unde‡
STORE_mëhod_£t_li°_√xt_fun˘i⁄


368 
	#STORE_mëhod_£t_li°_√xt_fun˘i⁄
 
STORE_mëh_£t_li°_√xt_‚


	)

369 #unde‡
STORE_mëhod_£t_li°_íd_fun˘i⁄


370 
	#STORE_mëhod_£t_li°_íd_fun˘i⁄
 
STORE_mëh_£t_li°_íd_‚


	)

371 #unde‡
STORE_mëhod_£t_upd©e_°‹e_fun˘i⁄


372 
	#STORE_mëhod_£t_upd©e_°‹e_fun˘i⁄
 
STORE_mëh_£t_upd©e_°‹e_‚


	)

373 #unde‡
STORE_mëhod_£t_lock_°‹e_fun˘i⁄


374 
	#STORE_mëhod_£t_lock_°‹e_fun˘i⁄
 
STORE_mëh_£t_lock_°‹e_‚


	)

375 #unde‡
STORE_mëhod_£t_u∆ock_°‹e_fun˘i⁄


376 
	#STORE_mëhod_£t_u∆ock_°‹e_fun˘i⁄
 
STORE_mëh_£t_u∆ock_°‹e_‚


	)

377 #unde‡
STORE_mëhod_gë_öôüli£_fun˘i⁄


378 
	#STORE_mëhod_gë_öôüli£_fun˘i⁄
 
STORE_mëh_gë_öôüli£_‚


	)

379 #unde‡
STORE_mëhod_gë_˛ónup_fun˘i⁄


380 
	#STORE_mëhod_gë_˛ónup_fun˘i⁄
 
STORE_mëh_gë_˛ónup_‚


	)

381 #unde‡
STORE_mëhod_gë_gíî©e_fun˘i⁄


382 
	#STORE_mëhod_gë_gíî©e_fun˘i⁄
 
STORE_mëh_gë_gíî©e_‚


	)

383 #unde‡
STORE_mëhod_gë_modify_fun˘i⁄


384 
	#STORE_mëhod_gë_modify_fun˘i⁄
 
STORE_mëh_gë_modify_‚


	)

385 #unde‡
STORE_mëhod_gë_ªvoke_fun˘i⁄


386 
	#STORE_mëhod_gë_ªvoke_fun˘i⁄
 
STORE_mëh_gë_ªvoke_‚


	)

387 #unde‡
STORE_mëhod_gë_dñëe_fun˘i⁄


388 
	#STORE_mëhod_gë_dñëe_fun˘i⁄
 
STORE_mëh_gë_dñëe_‚


	)

389 #unde‡
STORE_mëhod_gë_li°_°¨t_fun˘i⁄


390 
	#STORE_mëhod_gë_li°_°¨t_fun˘i⁄
 
STORE_mëh_gë_li°_°¨t_‚


	)

391 #unde‡
STORE_mëhod_gë_li°_√xt_fun˘i⁄


392 
	#STORE_mëhod_gë_li°_√xt_fun˘i⁄
 
STORE_mëh_gë_li°_√xt_‚


	)

393 #unde‡
STORE_mëhod_gë_li°_íd_fun˘i⁄


394 
	#STORE_mëhod_gë_li°_íd_fun˘i⁄
 
STORE_mëh_gë_li°_íd_‚


	)

395 #unde‡
STORE_mëhod_gë_upd©e_°‹e_fun˘i⁄


396 
	#STORE_mëhod_gë_upd©e_°‹e_fun˘i⁄
 
STORE_mëh_gë_upd©e_°‹e_‚


	)

397 #unde‡
STORE_mëhod_gë_lock_°‹e_fun˘i⁄


398 
	#STORE_mëhod_gë_lock_°‹e_fun˘i⁄
 
STORE_mëh_gë_lock_°‹e_‚


	)

399 #unde‡
STORE_mëhod_gë_u∆ock_°‹e_fun˘i⁄


400 
	#STORE_mëhod_gë_u∆ock_°‹e_fun˘i⁄
 
STORE_mëh_gë_u∆ock_°‹e_‚


	)

403 #unde‡
TS_RESP_CTX_£t_°©us_öfo_c⁄d


404 
	#TS_RESP_CTX_£t_°©us_öfo_c⁄d
 
TS_RESP_CTX_£t_°©_öfo_c⁄d


	)

405 #unde‡
TS_RESP_CTX_£t_˛ock_¥ecisi⁄_digôs


406 
	#TS_RESP_CTX_£t_˛ock_¥ecisi⁄_digôs
 
TS_RESP_CTX_£t_˛k_¥ec_digôs


	)

407 #unde‡
TS_CONF_£t_˛ock_¥ecisi⁄_digôs


408 
	#TS_CONF_£t_˛ock_¥ecisi⁄_digôs
 
TS_CONF_£t_˛k_¥ec_digôs


	)

411 #unde‡
CMS_Recùõ¡Info_kåi_gë0_Ægs


412 
	#CMS_Recùõ¡Info_kåi_gë0_Ægs
 
CMS_RecùInfo_kåi_gë0_Ægs


	)

413 #unde‡
CMS_Recùõ¡Info_kåi_gë0_sig√r_id


414 
	#CMS_Recùõ¡Info_kåi_gë0_sig√r_id
 
CMS_RecùInfo_kåi_gë0_sigr_id


	)

415 #unde‡
CMS_OthîRevoˇti⁄InfoF‹m©_ô


416 
	#CMS_OthîRevoˇti⁄InfoF‹m©_ô
 
CMS_OthîRevocInfoF‹m©_ô


	)

417 #unde‡
CMS_KeyAgªeRecùõ¡Idítifõr_ô


418 
	#CMS_KeyAgªeRecùõ¡Idítifõr_ô
 
CMS_KeyAgªeRecùIdítifõr_ô


	)

419 #unde‡
CMS_Origö©‹IdítifõrOrKey_ô


420 
	#CMS_Origö©‹IdítifõrOrKey_ô
 
CMS_Origö©‹IdOrKey_ô


	)

421 #unde‡
cms_Sig√rIdítifõr_gë0_sig√r_id


422 
	#cms_Sig√rIdítifõr_gë0_sig√r_id
 
cms_Sig√rId_gë0_sig√r_id


	)

425 #unde‡
dés1_ªå™smô_buf„ªd_mesßges


426 
	#dés1_ªå™smô_buf„ªd_mesßges
 
dés1_ªå™smô_buf„ªd_msgs


	)

429 #unde‡
SRP_gíî©e_£rvî_ma°î_£¸ë


430 
	#SRP_gíî©e_£rvî_ma°î_£¸ë
 
SRP_gí_£rvî_ma°î_£¸ë


	)

431 #unde‡
SRP_gíî©e_˛õ¡_ma°î_£¸ë


432 
	#SRP_gíî©e_˛õ¡_ma°î_£¸ë
 
SRP_gí_˛õ¡_ma°î_£¸ë


	)

435 #unde‡
UI_mëhod_gë_¥om±_c⁄°ru˘‹


436 
	#UI_mëhod_gë_¥om±_c⁄°ru˘‹
 
UI_mëhod_gë_¥om±_c⁄°ru˘r


	)

437 #unde‡
UI_mëhod_£t_¥om±_c⁄°ru˘‹


438 
	#UI_mëhod_£t_¥om±_c⁄°ru˘‹
 
UI_mëhod_£t_¥om±_c⁄°ru˘r


	)

444 #i‡
deföed
(
OPENSSL_SYS_VMS
Ë|| deföed(
OPENSSL_SYS_OS2
)

445 #unde‡
ERR_lﬂd_CRYPTO_°rögs


446 
	#ERR_lﬂd_CRYPTO_°rögs
 
ERR_lﬂd_CRYPTOlib_°rögs


	)

447 #unde‡
OCSP_¸lID_√w


448 
	#OCSP_¸lID_√w
 
OCSP_¸lID2_√w


	)

450 #unde‡
d2i_ECPARAMETERS


451 
	#d2i_ECPARAMETERS
 
d2i_UC_ECPARAMETERS


	)

452 #unde‡
i2d_ECPARAMETERS


453 
	#i2d_ECPARAMETERS
 
i2d_UC_ECPARAMETERS


	)

454 #unde‡
d2i_ECPKPARAMETERS


455 
	#d2i_ECPKPARAMETERS
 
d2i_UC_ECPKPARAMETERS


	)

456 #unde‡
i2d_ECPKPARAMETERS


457 
	#i2d_ECPKPARAMETERS
 
i2d_UC_ECPKPARAMETERS


	)

465 #unde‡
X509v3_˛ónup_exãnsi⁄s


466 
	#X509v3_˛ónup_exãnsi⁄s
 
oX509v3_˛ónup_exãnsi⁄s


	)

467 #unde‡
X509v3_add_exãnsi⁄


468 
	#X509v3_add_exãnsi⁄
 
oX509v3_add_exãnsi⁄


	)

469 #unde‡
X509v3_add_√tsˇ≥_exãnsi⁄s


470 
	#X509v3_add_√tsˇ≥_exãnsi⁄s
 
oX509v3_add_√tsˇ≥_exãnsi⁄s


	)

471 #unde‡
X509v3_add_°™d¨d_exãnsi⁄s


472 
	#X509v3_add_°™d¨d_exãnsi⁄s
 
oX509v3_add_°™d¨d_exãnsi⁄s


	)

475 #unde‡
cms_D©a_¸óã


476 
	#cms_D©a_¸óã
 
¥iv_cms_D©a_¸óã


	)

	@/usr/include/openssl/tls1.h

151 #i‚de‡
HEADER_TLS1_H


152 
	#HEADER_TLS1_H


	)

154 
	~<›ís¶/buf„r.h
>

156 #ifde‡ 
__˝lu•lus


160 
	#TLS1_ALLOW_EXPERIMENTAL_CIPHERSUITES
 0

	)

162 
	#TLS1_VERSION
 0x0301

	)

163 
	#TLS1_1_VERSION
 0x0302

	)

164 
	#TLS1_2_VERSION
 0x0303

	)

165 
	#TLS_MAX_VERSION
 
TLS1_2_VERSION


	)

167 
	#TLS1_VERSION_MAJOR
 0x03

	)

168 
	#TLS1_VERSION_MINOR
 0x01

	)

170 
	#TLS1_1_VERSION_MAJOR
 0x03

	)

171 
	#TLS1_1_VERSION_MINOR
 0x02

	)

173 
	#TLS1_2_VERSION_MAJOR
 0x03

	)

174 
	#TLS1_2_VERSION_MINOR
 0x03

	)

176 
	#TLS1_gë_vîsi⁄
(
s
) \

177 ((
s
->
vîsi⁄
 >> 8Ë=
TLS1_VERSION_MAJOR
 ? s->vîsi⁄ : 0)

	)

179 
	#TLS1_gë_˛õ¡_vîsi⁄
(
s
) \

180 ((
s
->
˛õ¡_vîsi⁄
 >> 8Ë=
TLS1_VERSION_MAJOR
 ? s->˛õ¡_vîsi⁄ : 0)

	)

182 
	#TLS1_AD_DECRYPTION_FAILED
 21

	)

183 
	#TLS1_AD_RECORD_OVERFLOW
 22

	)

184 
	#TLS1_AD_UNKNOWN_CA
 48

	)

185 
	#TLS1_AD_ACCESS_DENIED
 49

	)

186 
	#TLS1_AD_DECODE_ERROR
 50

	)

187 
	#TLS1_AD_DECRYPT_ERROR
 51

	)

188 
	#TLS1_AD_EXPORT_RESTRICTION
 60

	)

189 
	#TLS1_AD_PROTOCOL_VERSION
 70

	)

190 
	#TLS1_AD_INSUFFICIENT_SECURITY
 71

	)

191 
	#TLS1_AD_INTERNAL_ERROR
 80

	)

192 
	#TLS1_AD_INAPPROPRIATE_FALLBACK
 86

	)

193 
	#TLS1_AD_USER_CANCELLED
 90

	)

194 
	#TLS1_AD_NO_RENEGOTIATION
 100

	)

196 
	#TLS1_AD_UNSUPPORTED_EXTENSION
 110

	)

197 
	#TLS1_AD_CERTIFICATE_UNOBTAINABLE
 111

	)

198 
	#TLS1_AD_UNRECOGNIZED_NAME
 112

	)

199 
	#TLS1_AD_BAD_CERTIFICATE_STATUS_RESPONSE
 113

	)

200 
	#TLS1_AD_BAD_CERTIFICATE_HASH_VALUE
 114

	)

201 
	#TLS1_AD_UNKNOWN_PSK_IDENTITY
 115

	)

204 
	#TLSEXT_TYPE_£rvî_«me
 0

	)

205 
	#TLSEXT_TYPE_max_‰agmít_Àngth
 1

	)

206 
	#TLSEXT_TYPE_˛õ¡_˚πifiˇã_uæ
 2

	)

207 
	#TLSEXT_TYPE_åu°ed_ˇ_keys
 3

	)

208 
	#TLSEXT_TYPE_åunˇãd_hmac
 4

	)

209 
	#TLSEXT_TYPE_°©us_ªque°
 5

	)

211 
	#TLSEXT_TYPE_u£r_m≠pög
 6

	)

214 
	#TLSEXT_TYPE_˛õ¡_authz
 7

	)

215 
	#TLSEXT_TYPE_£rvî_authz
 8

	)

218 
	#TLSEXT_TYPE_˚π_ty≥
 9

	)

221 
	#TLSEXT_TYPE_ñlùtic_curves
 10

	)

222 
	#TLSEXT_TYPE_ec_poöt_f‹m©s
 11

	)

225 
	#TLSEXT_TYPE_§p
 12

	)

228 
	#TLSEXT_TYPE_sig«tuª_Æg‹ôhms
 13

	)

231 
	#TLSEXT_TYPE_u£_§ç
 14

	)

234 
	#TLSEXT_TYPE_hóπbót
 15

	)

240 
	#TLSEXT_TYPE_∑ddög
 21

	)

243 
	#TLSEXT_TYPE_£ssi⁄_tickë
 35

	)

249 
	#TLSEXT_TYPE_›aque_¥f_öput
 ?? */

	)

253 
	#TLSEXT_TYPE_ª√gŸüã
 0xff01

	)

255 #i‚de‡
OPENSSL_NO_NEXTPROTONEG


257 
	#TLSEXT_TYPE_√xt_¥Ÿo_√g
 13172

	)

261 
	#TLSEXT_NAMETYPE_ho°_«me
 0

	)

263 
	#TLSEXT_STATUSTYPE_oc•
 1

	)

266 
	#TLSEXT_ECPOINTFORMAT_fú°
 0

	)

267 
	#TLSEXT_ECPOINTFORMAT_uncom¥es£d
 0

	)

268 
	#TLSEXT_ECPOINTFORMAT_™siX962_com¥es£d_¥ime
 1

	)

269 
	#TLSEXT_ECPOINTFORMAT_™siX962_com¥es£d_ch¨2
 2

	)

270 
	#TLSEXT_ECPOINTFORMAT_œ°
 2

	)

274 
	#TLSEXT_sig«tuª_™⁄ymous
 0

	)

275 
	#TLSEXT_sig«tuª_rß
 1

	)

276 
	#TLSEXT_sig«tuª_dß
 2

	)

277 
	#TLSEXT_sig«tuª_ecdß
 3

	)

279 
	#TLSEXT_hash_n⁄e
 0

	)

280 
	#TLSEXT_hash_md5
 1

	)

281 
	#TLSEXT_hash_sha1
 2

	)

282 
	#TLSEXT_hash_sha224
 3

	)

283 
	#TLSEXT_hash_sha256
 4

	)

284 
	#TLSEXT_hash_sha384
 5

	)

285 
	#TLSEXT_hash_sha512
 6

	)

287 #i‚de‡
OPENSSL_NO_TLSEXT


289 
	#TLSEXT_MAXLEN_ho°_«me
 255

	)

291 c⁄° *
SSL_gë_£rvî«me
(c⁄° 
SSL
 *
s
, c⁄° 
ty≥
);

292 
SSL_gë_£rvî«me_ty≥
(c⁄° 
SSL
 *
s
);

300 
SSL_exp‹t_keyög_m©îül
(
SSL
 *
s
, *
out
, 
size_t
 
ﬁí
,

301 c⁄° *
œbñ
, 
size_t
 
Œí
, c⁄° *
p
, size_à
∂í
,

302 
u£_c⁄ãxt
);

304 
	#SSL_£t_é£xt_ho°_«me
(
s
,
«me
) \

305 
	`SSL_˘æ
(
s
,
SSL_CTRL_SET_TLSEXT_HOSTNAME
,
TLSEXT_NAMETYPE_ho°_«me
,(*)
«me
)

	)

307 
	#SSL_£t_é£xt_debug_ˇŒback
(
s¶
, 
cb
) \

308 
	`SSL_ˇŒback_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_DEBUG_CB
,((*)())
cb
)

	)

310 
	#SSL_£t_é£xt_debug_¨g
(
s¶
, 
¨g
) \

311 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_DEBUG_ARG
,0, (*)
¨g
)

	)

313 
	#SSL_£t_é£xt_°©us_ty≥
(
s¶
, 
ty≥
) \

314 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_TYPE
,
ty≥
, 
NULL
)

	)

316 
	#SSL_gë_é£xt_°©us_exts
(
s¶
, 
¨g
) \

317 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_GET_TLSEXT_STATUS_REQ_EXTS
,0, (*)
¨g
)

	)

319 
	#SSL_£t_é£xt_°©us_exts
(
s¶
, 
¨g
) \

320 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_EXTS
,0, (*)
¨g
)

	)

322 
	#SSL_gë_é£xt_°©us_ids
(
s¶
, 
¨g
) \

323 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_GET_TLSEXT_STATUS_REQ_IDS
,0, (*)
¨g
)

	)

325 
	#SSL_£t_é£xt_°©us_ids
(
s¶
, 
¨g
) \

326 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_IDS
,0, (*)
¨g
)

	)

328 
	#SSL_gë_é£xt_°©us_oc•_ª•
(
s¶
, 
¨g
) \

329 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_GET_TLSEXT_STATUS_REQ_OCSP_RESP
,0, (*)
¨g
)

	)

331 
	#SSL_£t_é£xt_°©us_oc•_ª•
(
s¶
, 
¨g
, 
¨gÀn
) \

332 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_OCSP_RESP
,
¨gÀn
, (*)
¨g
)

	)

334 
	#SSL_CTX_£t_é£xt_£rvî«me_ˇŒback
(
˘x
, 
cb
) \

335 
	`SSL_CTX_ˇŒback_˘æ
(
˘x
,
SSL_CTRL_SET_TLSEXT_SERVERNAME_CB
,((*)())
cb
)

	)

337 
	#SSL_TLSEXT_ERR_OK
 0

	)

338 
	#SSL_TLSEXT_ERR_ALERT_WARNING
 1

	)

339 
	#SSL_TLSEXT_ERR_ALERT_FATAL
 2

	)

340 
	#SSL_TLSEXT_ERR_NOACK
 3

	)

342 
	#SSL_CTX_£t_é£xt_£rvî«me_¨g
(
˘x
, 
¨g
) \

343 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_TLSEXT_SERVERNAME_ARG
,0, (*)
¨g
)

	)

345 
	#SSL_CTX_gë_é£xt_tickë_keys
(
˘x
, 
keys
, 
keyÀn
) \

346 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_GET_TLSEXT_TICKET_KEYS
,(
keyÀn
),(
keys
))

	)

347 
	#SSL_CTX_£t_é£xt_tickë_keys
(
˘x
, 
keys
, 
keyÀn
) \

348 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_SET_TLSEXT_TICKET_KEYS
,(
keyÀn
),(
keys
))

	)

350 
	#SSL_CTX_£t_é£xt_°©us_cb
(
s¶
, 
cb
) \

351 
	`SSL_CTX_ˇŒback_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB
,((*)())
cb
)

	)

353 
	#SSL_CTX_£t_é£xt_°©us_¨g
(
s¶
, 
¨g
) \

354 
	`SSL_CTX_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB_ARG
,0, (*)
¨g
)

	)

356 
	#SSL_£t_é£xt_›aque_¥f_öput
(
s
, 
§c
, 
Àn
) \

357 
	`SSL_˘æ
(
s
,
SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT
, 
Àn
, 
§c
)

	)

358 
	#SSL_CTX_£t_é£xt_›aque_¥f_öput_ˇŒback
(
˘x
, 
cb
) \

359 
	`SSL_CTX_ˇŒback_˘æ
(
˘x
,
SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT_CB
, ((*)())
cb
)

	)

360 
	#SSL_CTX_£t_é£xt_›aque_¥f_öput_ˇŒback_¨g
(
˘x
, 
¨g
) \

361 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT_CB_ARG
, 0, 
¨g
)

	)

363 
	#SSL_CTX_£t_é£xt_tickë_key_cb
(
s¶
, 
cb
) \

364 
	`SSL_CTX_ˇŒback_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_TICKET_KEY_CB
,((*)())
cb
)

	)

366 #i‚de‡
OPENSSL_NO_HEARTBEATS


367 
	#SSL_TLSEXT_HB_ENABLED
 0x01

	)

368 
	#SSL_TLSEXT_HB_DONT_SEND_REQUESTS
 0x02

	)

369 
	#SSL_TLSEXT_HB_DONT_RECV_REQUESTS
 0x04

	)

371 
	#SSL_gë_é£xt_hóπbót_≥ndög
(
s¶
) \

372 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_GET_TLS_EXT_HEARTBEAT_PENDING
,0,
NULL
)

	)

373 
	#SSL_£t_é£xt_hóπbót_no_ªque°s
(
s¶
, 
¨g
) \

374 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_SET_TLS_EXT_HEARTBEAT_NO_REQUESTS
,
¨g
,
NULL
)

	)

379 
	#TLS1_CK_PSK_WITH_RC4_128_SHA
 0x0300008A

	)

380 
	#TLS1_CK_PSK_WITH_3DES_EDE_CBC_SHA
 0x0300008B

	)

381 
	#TLS1_CK_PSK_WITH_AES_128_CBC_SHA
 0x0300008C

	)

382 
	#TLS1_CK_PSK_WITH_AES_256_CBC_SHA
 0x0300008D

	)

389 
	#TLS1_CK_RSA_EXPORT1024_WITH_RC4_56_MD5
 0x03000060

	)

390 
	#TLS1_CK_RSA_EXPORT1024_WITH_RC2_CBC_56_MD5
 0x03000061

	)

391 
	#TLS1_CK_RSA_EXPORT1024_WITH_DES_CBC_SHA
 0x03000062

	)

392 
	#TLS1_CK_DHE_DSS_EXPORT1024_WITH_DES_CBC_SHA
 0x03000063

	)

393 
	#TLS1_CK_RSA_EXPORT1024_WITH_RC4_56_SHA
 0x03000064

	)

394 
	#TLS1_CK_DHE_DSS_EXPORT1024_WITH_RC4_56_SHA
 0x03000065

	)

395 
	#TLS1_CK_DHE_DSS_WITH_RC4_128_SHA
 0x03000066

	)

399 
	#TLS1_CK_RSA_WITH_AES_128_SHA
 0x0300002F

	)

400 
	#TLS1_CK_DH_DSS_WITH_AES_128_SHA
 0x03000030

	)

401 
	#TLS1_CK_DH_RSA_WITH_AES_128_SHA
 0x03000031

	)

402 
	#TLS1_CK_DHE_DSS_WITH_AES_128_SHA
 0x03000032

	)

403 
	#TLS1_CK_DHE_RSA_WITH_AES_128_SHA
 0x03000033

	)

404 
	#TLS1_CK_ADH_WITH_AES_128_SHA
 0x03000034

	)

406 
	#TLS1_CK_RSA_WITH_AES_256_SHA
 0x03000035

	)

407 
	#TLS1_CK_DH_DSS_WITH_AES_256_SHA
 0x03000036

	)

408 
	#TLS1_CK_DH_RSA_WITH_AES_256_SHA
 0x03000037

	)

409 
	#TLS1_CK_DHE_DSS_WITH_AES_256_SHA
 0x03000038

	)

410 
	#TLS1_CK_DHE_RSA_WITH_AES_256_SHA
 0x03000039

	)

411 
	#TLS1_CK_ADH_WITH_AES_256_SHA
 0x0300003A

	)

414 
	#TLS1_CK_RSA_WITH_NULL_SHA256
 0x0300003B

	)

415 
	#TLS1_CK_RSA_WITH_AES_128_SHA256
 0x0300003C

	)

416 
	#TLS1_CK_RSA_WITH_AES_256_SHA256
 0x0300003D

	)

417 
	#TLS1_CK_DH_DSS_WITH_AES_128_SHA256
 0x0300003E

	)

418 
	#TLS1_CK_DH_RSA_WITH_AES_128_SHA256
 0x0300003F

	)

419 
	#TLS1_CK_DHE_DSS_WITH_AES_128_SHA256
 0x03000040

	)

422 
	#TLS1_CK_RSA_WITH_CAMELLIA_128_CBC_SHA
 0x03000041

	)

423 
	#TLS1_CK_DH_DSS_WITH_CAMELLIA_128_CBC_SHA
 0x03000042

	)

424 
	#TLS1_CK_DH_RSA_WITH_CAMELLIA_128_CBC_SHA
 0x03000043

	)

425 
	#TLS1_CK_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA
 0x03000044

	)

426 
	#TLS1_CK_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA
 0x03000045

	)

427 
	#TLS1_CK_ADH_WITH_CAMELLIA_128_CBC_SHA
 0x03000046

	)

430 
	#TLS1_CK_DHE_RSA_WITH_AES_128_SHA256
 0x03000067

	)

431 
	#TLS1_CK_DH_DSS_WITH_AES_256_SHA256
 0x03000068

	)

432 
	#TLS1_CK_DH_RSA_WITH_AES_256_SHA256
 0x03000069

	)

433 
	#TLS1_CK_DHE_DSS_WITH_AES_256_SHA256
 0x0300006A

	)

434 
	#TLS1_CK_DHE_RSA_WITH_AES_256_SHA256
 0x0300006B

	)

435 
	#TLS1_CK_ADH_WITH_AES_128_SHA256
 0x0300006C

	)

436 
	#TLS1_CK_ADH_WITH_AES_256_SHA256
 0x0300006D

	)

439 
	#TLS1_CK_RSA_WITH_CAMELLIA_256_CBC_SHA
 0x03000084

	)

440 
	#TLS1_CK_DH_DSS_WITH_CAMELLIA_256_CBC_SHA
 0x03000085

	)

441 
	#TLS1_CK_DH_RSA_WITH_CAMELLIA_256_CBC_SHA
 0x03000086

	)

442 
	#TLS1_CK_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA
 0x03000087

	)

443 
	#TLS1_CK_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA
 0x03000088

	)

444 
	#TLS1_CK_ADH_WITH_CAMELLIA_256_CBC_SHA
 0x03000089

	)

447 
	#TLS1_CK_RSA_WITH_SEED_SHA
 0x03000096

	)

448 
	#TLS1_CK_DH_DSS_WITH_SEED_SHA
 0x03000097

	)

449 
	#TLS1_CK_DH_RSA_WITH_SEED_SHA
 0x03000098

	)

450 
	#TLS1_CK_DHE_DSS_WITH_SEED_SHA
 0x03000099

	)

451 
	#TLS1_CK_DHE_RSA_WITH_SEED_SHA
 0x0300009A

	)

452 
	#TLS1_CK_ADH_WITH_SEED_SHA
 0x0300009B

	)

455 
	#TLS1_CK_RSA_WITH_AES_128_GCM_SHA256
 0x0300009C

	)

456 
	#TLS1_CK_RSA_WITH_AES_256_GCM_SHA384
 0x0300009D

	)

457 
	#TLS1_CK_DHE_RSA_WITH_AES_128_GCM_SHA256
 0x0300009E

	)

458 
	#TLS1_CK_DHE_RSA_WITH_AES_256_GCM_SHA384
 0x0300009F

	)

459 
	#TLS1_CK_DH_RSA_WITH_AES_128_GCM_SHA256
 0x030000A0

	)

460 
	#TLS1_CK_DH_RSA_WITH_AES_256_GCM_SHA384
 0x030000A1

	)

461 
	#TLS1_CK_DHE_DSS_WITH_AES_128_GCM_SHA256
 0x030000A2

	)

462 
	#TLS1_CK_DHE_DSS_WITH_AES_256_GCM_SHA384
 0x030000A3

	)

463 
	#TLS1_CK_DH_DSS_WITH_AES_128_GCM_SHA256
 0x030000A4

	)

464 
	#TLS1_CK_DH_DSS_WITH_AES_256_GCM_SHA384
 0x030000A5

	)

465 
	#TLS1_CK_ADH_WITH_AES_128_GCM_SHA256
 0x030000A6

	)

466 
	#TLS1_CK_ADH_WITH_AES_256_GCM_SHA384
 0x030000A7

	)

469 
	#TLS1_CK_ECDH_ECDSA_WITH_NULL_SHA
 0x0300C001

	)

470 
	#TLS1_CK_ECDH_ECDSA_WITH_RC4_128_SHA
 0x0300C002

	)

471 
	#TLS1_CK_ECDH_ECDSA_WITH_DES_192_CBC3_SHA
 0x0300C003

	)

472 
	#TLS1_CK_ECDH_ECDSA_WITH_AES_128_CBC_SHA
 0x0300C004

	)

473 
	#TLS1_CK_ECDH_ECDSA_WITH_AES_256_CBC_SHA
 0x0300C005

	)

475 
	#TLS1_CK_ECDHE_ECDSA_WITH_NULL_SHA
 0x0300C006

	)

476 
	#TLS1_CK_ECDHE_ECDSA_WITH_RC4_128_SHA
 0x0300C007

	)

477 
	#TLS1_CK_ECDHE_ECDSA_WITH_DES_192_CBC3_SHA
 0x0300C008

	)

478 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
 0x0300C009

	)

479 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
 0x0300C00A

	)

481 
	#TLS1_CK_ECDH_RSA_WITH_NULL_SHA
 0x0300C00B

	)

482 
	#TLS1_CK_ECDH_RSA_WITH_RC4_128_SHA
 0x0300C00C

	)

483 
	#TLS1_CK_ECDH_RSA_WITH_DES_192_CBC3_SHA
 0x0300C00D

	)

484 
	#TLS1_CK_ECDH_RSA_WITH_AES_128_CBC_SHA
 0x0300C00E

	)

485 
	#TLS1_CK_ECDH_RSA_WITH_AES_256_CBC_SHA
 0x0300C00F

	)

487 
	#TLS1_CK_ECDHE_RSA_WITH_NULL_SHA
 0x0300C010

	)

488 
	#TLS1_CK_ECDHE_RSA_WITH_RC4_128_SHA
 0x0300C011

	)

489 
	#TLS1_CK_ECDHE_RSA_WITH_DES_192_CBC3_SHA
 0x0300C012

	)

490 
	#TLS1_CK_ECDHE_RSA_WITH_AES_128_CBC_SHA
 0x0300C013

	)

491 
	#TLS1_CK_ECDHE_RSA_WITH_AES_256_CBC_SHA
 0x0300C014

	)

493 
	#TLS1_CK_ECDH_™⁄_WITH_NULL_SHA
 0x0300C015

	)

494 
	#TLS1_CK_ECDH_™⁄_WITH_RC4_128_SHA
 0x0300C016

	)

495 
	#TLS1_CK_ECDH_™⁄_WITH_DES_192_CBC3_SHA
 0x0300C017

	)

496 
	#TLS1_CK_ECDH_™⁄_WITH_AES_128_CBC_SHA
 0x0300C018

	)

497 
	#TLS1_CK_ECDH_™⁄_WITH_AES_256_CBC_SHA
 0x0300C019

	)

500 
	#TLS1_CK_SRP_SHA_WITH_3DES_EDE_CBC_SHA
 0x0300C01A

	)

501 
	#TLS1_CK_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA
 0x0300C01B

	)

502 
	#TLS1_CK_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA
 0x0300C01C

	)

503 
	#TLS1_CK_SRP_SHA_WITH_AES_128_CBC_SHA
 0x0300C01D

	)

504 
	#TLS1_CK_SRP_SHA_RSA_WITH_AES_128_CBC_SHA
 0x0300C01E

	)

505 
	#TLS1_CK_SRP_SHA_DSS_WITH_AES_128_CBC_SHA
 0x0300C01F

	)

506 
	#TLS1_CK_SRP_SHA_WITH_AES_256_CBC_SHA
 0x0300C020

	)

507 
	#TLS1_CK_SRP_SHA_RSA_WITH_AES_256_CBC_SHA
 0x0300C021

	)

508 
	#TLS1_CK_SRP_SHA_DSS_WITH_AES_256_CBC_SHA
 0x0300C022

	)

512 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_128_SHA256
 0x0300C023

	)

513 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_256_SHA384
 0x0300C024

	)

514 
	#TLS1_CK_ECDH_ECDSA_WITH_AES_128_SHA256
 0x0300C025

	)

515 
	#TLS1_CK_ECDH_ECDSA_WITH_AES_256_SHA384
 0x0300C026

	)

516 
	#TLS1_CK_ECDHE_RSA_WITH_AES_128_SHA256
 0x0300C027

	)

517 
	#TLS1_CK_ECDHE_RSA_WITH_AES_256_SHA384
 0x0300C028

	)

518 
	#TLS1_CK_ECDH_RSA_WITH_AES_128_SHA256
 0x0300C029

	)

519 
	#TLS1_CK_ECDH_RSA_WITH_AES_256_SHA384
 0x0300C02A

	)

522 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
 0x0300C02B

	)

523 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
 0x0300C02C

	)

524 
	#TLS1_CK_ECDH_ECDSA_WITH_AES_128_GCM_SHA256
 0x0300C02D

	)

525 
	#TLS1_CK_ECDH_ECDSA_WITH_AES_256_GCM_SHA384
 0x0300C02E

	)

526 
	#TLS1_CK_ECDHE_RSA_WITH_AES_128_GCM_SHA256
 0x0300C02F

	)

527 
	#TLS1_CK_ECDHE_RSA_WITH_AES_256_GCM_SHA384
 0x0300C030

	)

528 
	#TLS1_CK_ECDH_RSA_WITH_AES_128_GCM_SHA256
 0x0300C031

	)

529 
	#TLS1_CK_ECDH_RSA_WITH_AES_256_GCM_SHA384
 0x0300C032

	)

538 
	#TLS1_TXT_RSA_EXPORT1024_WITH_RC4_56_MD5
 "EXP1024-RC4-MD5"

	)

539 
	#TLS1_TXT_RSA_EXPORT1024_WITH_RC2_CBC_56_MD5
 "EXP1024-RC2-CBC-MD5"

	)

540 
	#TLS1_TXT_RSA_EXPORT1024_WITH_DES_CBC_SHA
 "EXP1024-DES-CBC-SHA"

	)

541 
	#TLS1_TXT_DHE_DSS_EXPORT1024_WITH_DES_CBC_SHA
 "EXP1024-DHE-DSS-DES-CBC-SHA"

	)

542 
	#TLS1_TXT_RSA_EXPORT1024_WITH_RC4_56_SHA
 "EXP1024-RC4-SHA"

	)

543 
	#TLS1_TXT_DHE_DSS_EXPORT1024_WITH_RC4_56_SHA
 "EXP1024-DHE-DSS-RC4-SHA"

	)

544 
	#TLS1_TXT_DHE_DSS_WITH_RC4_128_SHA
 "DHE-DSS-RC4-SHA"

	)

547 
	#TLS1_TXT_RSA_WITH_AES_128_SHA
 "AES128-SHA"

	)

548 
	#TLS1_TXT_DH_DSS_WITH_AES_128_SHA
 "DH-DSS-AES128-SHA"

	)

549 
	#TLS1_TXT_DH_RSA_WITH_AES_128_SHA
 "DH-RSA-AES128-SHA"

	)

550 
	#TLS1_TXT_DHE_DSS_WITH_AES_128_SHA
 "DHE-DSS-AES128-SHA"

	)

551 
	#TLS1_TXT_DHE_RSA_WITH_AES_128_SHA
 "DHE-RSA-AES128-SHA"

	)

552 
	#TLS1_TXT_ADH_WITH_AES_128_SHA
 "ADH-AES128-SHA"

	)

554 
	#TLS1_TXT_RSA_WITH_AES_256_SHA
 "AES256-SHA"

	)

555 
	#TLS1_TXT_DH_DSS_WITH_AES_256_SHA
 "DH-DSS-AES256-SHA"

	)

556 
	#TLS1_TXT_DH_RSA_WITH_AES_256_SHA
 "DH-RSA-AES256-SHA"

	)

557 
	#TLS1_TXT_DHE_DSS_WITH_AES_256_SHA
 "DHE-DSS-AES256-SHA"

	)

558 
	#TLS1_TXT_DHE_RSA_WITH_AES_256_SHA
 "DHE-RSA-AES256-SHA"

	)

559 
	#TLS1_TXT_ADH_WITH_AES_256_SHA
 "ADH-AES256-SHA"

	)

562 
	#TLS1_TXT_ECDH_ECDSA_WITH_NULL_SHA
 "ECDH-ECDSA-NULL-SHA"

	)

563 
	#TLS1_TXT_ECDH_ECDSA_WITH_RC4_128_SHA
 "ECDH-ECDSA-RC4-SHA"

	)

564 
	#TLS1_TXT_ECDH_ECDSA_WITH_DES_192_CBC3_SHA
 "ECDH-ECDSA-DES-CBC3-SHA"

	)

565 
	#TLS1_TXT_ECDH_ECDSA_WITH_AES_128_CBC_SHA
 "ECDH-ECDSA-AES128-SHA"

	)

566 
	#TLS1_TXT_ECDH_ECDSA_WITH_AES_256_CBC_SHA
 "ECDH-ECDSA-AES256-SHA"

	)

568 
	#TLS1_TXT_ECDHE_ECDSA_WITH_NULL_SHA
 "ECDHE-ECDSA-NULL-SHA"

	)

569 
	#TLS1_TXT_ECDHE_ECDSA_WITH_RC4_128_SHA
 "ECDHE-ECDSA-RC4-SHA"

	)

570 
	#TLS1_TXT_ECDHE_ECDSA_WITH_DES_192_CBC3_SHA
 "ECDHE-ECDSA-DES-CBC3-SHA"

	)

571 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
 "ECDHE-ECDSA-AES128-SHA"

	)

572 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
 "ECDHE-ECDSA-AES256-SHA"

	)

574 
	#TLS1_TXT_ECDH_RSA_WITH_NULL_SHA
 "ECDH-RSA-NULL-SHA"

	)

575 
	#TLS1_TXT_ECDH_RSA_WITH_RC4_128_SHA
 "ECDH-RSA-RC4-SHA"

	)

576 
	#TLS1_TXT_ECDH_RSA_WITH_DES_192_CBC3_SHA
 "ECDH-RSA-DES-CBC3-SHA"

	)

577 
	#TLS1_TXT_ECDH_RSA_WITH_AES_128_CBC_SHA
 "ECDH-RSA-AES128-SHA"

	)

578 
	#TLS1_TXT_ECDH_RSA_WITH_AES_256_CBC_SHA
 "ECDH-RSA-AES256-SHA"

	)

580 
	#TLS1_TXT_ECDHE_RSA_WITH_NULL_SHA
 "ECDHE-RSA-NULL-SHA"

	)

581 
	#TLS1_TXT_ECDHE_RSA_WITH_RC4_128_SHA
 "ECDHE-RSA-RC4-SHA"

	)

582 
	#TLS1_TXT_ECDHE_RSA_WITH_DES_192_CBC3_SHA
 "ECDHE-RSA-DES-CBC3-SHA"

	)

583 
	#TLS1_TXT_ECDHE_RSA_WITH_AES_128_CBC_SHA
 "ECDHE-RSA-AES128-SHA"

	)

584 
	#TLS1_TXT_ECDHE_RSA_WITH_AES_256_CBC_SHA
 "ECDHE-RSA-AES256-SHA"

	)

586 
	#TLS1_TXT_ECDH_™⁄_WITH_NULL_SHA
 "AECDH-NULL-SHA"

	)

587 
	#TLS1_TXT_ECDH_™⁄_WITH_RC4_128_SHA
 "AECDH-RC4-SHA"

	)

588 
	#TLS1_TXT_ECDH_™⁄_WITH_DES_192_CBC3_SHA
 "AECDH-DES-CBC3-SHA"

	)

589 
	#TLS1_TXT_ECDH_™⁄_WITH_AES_128_CBC_SHA
 "AECDH-AES128-SHA"

	)

590 
	#TLS1_TXT_ECDH_™⁄_WITH_AES_256_CBC_SHA
 "AECDH-AES256-SHA"

	)

593 
	#TLS1_TXT_PSK_WITH_RC4_128_SHA
 "PSK-RC4-SHA"

	)

594 
	#TLS1_TXT_PSK_WITH_3DES_EDE_CBC_SHA
 "PSK-3DES-EDE-CBC-SHA"

	)

595 
	#TLS1_TXT_PSK_WITH_AES_128_CBC_SHA
 "PSK-AES128-CBC-SHA"

	)

596 
	#TLS1_TXT_PSK_WITH_AES_256_CBC_SHA
 "PSK-AES256-CBC-SHA"

	)

599 
	#TLS1_TXT_SRP_SHA_WITH_3DES_EDE_CBC_SHA
 "SRP-3DES-EDE-CBC-SHA"

	)

600 
	#TLS1_TXT_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA
 "SRP-RSA-3DES-EDE-CBC-SHA"

	)

601 
	#TLS1_TXT_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA
 "SRP-DSS-3DES-EDE-CBC-SHA"

	)

602 
	#TLS1_TXT_SRP_SHA_WITH_AES_128_CBC_SHA
 "SRP-AES-128-CBC-SHA"

	)

603 
	#TLS1_TXT_SRP_SHA_RSA_WITH_AES_128_CBC_SHA
 "SRP-RSA-AES-128-CBC-SHA"

	)

604 
	#TLS1_TXT_SRP_SHA_DSS_WITH_AES_128_CBC_SHA
 "SRP-DSS-AES-128-CBC-SHA"

	)

605 
	#TLS1_TXT_SRP_SHA_WITH_AES_256_CBC_SHA
 "SRP-AES-256-CBC-SHA"

	)

606 
	#TLS1_TXT_SRP_SHA_RSA_WITH_AES_256_CBC_SHA
 "SRP-RSA-AES-256-CBC-SHA"

	)

607 
	#TLS1_TXT_SRP_SHA_DSS_WITH_AES_256_CBC_SHA
 "SRP-DSS-AES-256-CBC-SHA"

	)

610 
	#TLS1_TXT_RSA_WITH_CAMELLIA_128_CBC_SHA
 "CAMELLIA128-SHA"

	)

611 
	#TLS1_TXT_DH_DSS_WITH_CAMELLIA_128_CBC_SHA
 "DH-DSS-CAMELLIA128-SHA"

	)

612 
	#TLS1_TXT_DH_RSA_WITH_CAMELLIA_128_CBC_SHA
 "DH-RSA-CAMELLIA128-SHA"

	)

613 
	#TLS1_TXT_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA
 "DHE-DSS-CAMELLIA128-SHA"

	)

614 
	#TLS1_TXT_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA
 "DHE-RSA-CAMELLIA128-SHA"

	)

615 
	#TLS1_TXT_ADH_WITH_CAMELLIA_128_CBC_SHA
 "ADH-CAMELLIA128-SHA"

	)

617 
	#TLS1_TXT_RSA_WITH_CAMELLIA_256_CBC_SHA
 "CAMELLIA256-SHA"

	)

618 
	#TLS1_TXT_DH_DSS_WITH_CAMELLIA_256_CBC_SHA
 "DH-DSS-CAMELLIA256-SHA"

	)

619 
	#TLS1_TXT_DH_RSA_WITH_CAMELLIA_256_CBC_SHA
 "DH-RSA-CAMELLIA256-SHA"

	)

620 
	#TLS1_TXT_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA
 "DHE-DSS-CAMELLIA256-SHA"

	)

621 
	#TLS1_TXT_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA
 "DHE-RSA-CAMELLIA256-SHA"

	)

622 
	#TLS1_TXT_ADH_WITH_CAMELLIA_256_CBC_SHA
 "ADH-CAMELLIA256-SHA"

	)

625 
	#TLS1_TXT_RSA_WITH_SEED_SHA
 "SEED-SHA"

	)

626 
	#TLS1_TXT_DH_DSS_WITH_SEED_SHA
 "DH-DSS-SEED-SHA"

	)

627 
	#TLS1_TXT_DH_RSA_WITH_SEED_SHA
 "DH-RSA-SEED-SHA"

	)

628 
	#TLS1_TXT_DHE_DSS_WITH_SEED_SHA
 "DHE-DSS-SEED-SHA"

	)

629 
	#TLS1_TXT_DHE_RSA_WITH_SEED_SHA
 "DHE-RSA-SEED-SHA"

	)

630 
	#TLS1_TXT_ADH_WITH_SEED_SHA
 "ADH-SEED-SHA"

	)

633 
	#TLS1_TXT_RSA_WITH_NULL_SHA256
 "NULL-SHA256"

	)

634 
	#TLS1_TXT_RSA_WITH_AES_128_SHA256
 "AES128-SHA256"

	)

635 
	#TLS1_TXT_RSA_WITH_AES_256_SHA256
 "AES256-SHA256"

	)

636 
	#TLS1_TXT_DH_DSS_WITH_AES_128_SHA256
 "DH-DSS-AES128-SHA256"

	)

637 
	#TLS1_TXT_DH_RSA_WITH_AES_128_SHA256
 "DH-RSA-AES128-SHA256"

	)

638 
	#TLS1_TXT_DHE_DSS_WITH_AES_128_SHA256
 "DHE-DSS-AES128-SHA256"

	)

639 
	#TLS1_TXT_DHE_RSA_WITH_AES_128_SHA256
 "DHE-RSA-AES128-SHA256"

	)

640 
	#TLS1_TXT_DH_DSS_WITH_AES_256_SHA256
 "DH-DSS-AES256-SHA256"

	)

641 
	#TLS1_TXT_DH_RSA_WITH_AES_256_SHA256
 "DH-RSA-AES256-SHA256"

	)

642 
	#TLS1_TXT_DHE_DSS_WITH_AES_256_SHA256
 "DHE-DSS-AES256-SHA256"

	)

643 
	#TLS1_TXT_DHE_RSA_WITH_AES_256_SHA256
 "DHE-RSA-AES256-SHA256"

	)

644 
	#TLS1_TXT_ADH_WITH_AES_128_SHA256
 "ADH-AES128-SHA256"

	)

645 
	#TLS1_TXT_ADH_WITH_AES_256_SHA256
 "ADH-AES256-SHA256"

	)

648 
	#TLS1_TXT_RSA_WITH_AES_128_GCM_SHA256
 "AES128-GCM-SHA256"

	)

649 
	#TLS1_TXT_RSA_WITH_AES_256_GCM_SHA384
 "AES256-GCM-SHA384"

	)

650 
	#TLS1_TXT_DHE_RSA_WITH_AES_128_GCM_SHA256
 "DHE-RSA-AES128-GCM-SHA256"

	)

651 
	#TLS1_TXT_DHE_RSA_WITH_AES_256_GCM_SHA384
 "DHE-RSA-AES256-GCM-SHA384"

	)

652 
	#TLS1_TXT_DH_RSA_WITH_AES_128_GCM_SHA256
 "DH-RSA-AES128-GCM-SHA256"

	)

653 
	#TLS1_TXT_DH_RSA_WITH_AES_256_GCM_SHA384
 "DH-RSA-AES256-GCM-SHA384"

	)

654 
	#TLS1_TXT_DHE_DSS_WITH_AES_128_GCM_SHA256
 "DHE-DSS-AES128-GCM-SHA256"

	)

655 
	#TLS1_TXT_DHE_DSS_WITH_AES_256_GCM_SHA384
 "DHE-DSS-AES256-GCM-SHA384"

	)

656 
	#TLS1_TXT_DH_DSS_WITH_AES_128_GCM_SHA256
 "DH-DSS-AES128-GCM-SHA256"

	)

657 
	#TLS1_TXT_DH_DSS_WITH_AES_256_GCM_SHA384
 "DH-DSS-AES256-GCM-SHA384"

	)

658 
	#TLS1_TXT_ADH_WITH_AES_128_GCM_SHA256
 "ADH-AES128-GCM-SHA256"

	)

659 
	#TLS1_TXT_ADH_WITH_AES_256_GCM_SHA384
 "ADH-AES256-GCM-SHA384"

	)

663 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_SHA256
 "ECDHE-ECDSA-AES128-SHA256"

	)

664 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_SHA384
 "ECDHE-ECDSA-AES256-SHA384"

	)

665 
	#TLS1_TXT_ECDH_ECDSA_WITH_AES_128_SHA256
 "ECDH-ECDSA-AES128-SHA256"

	)

666 
	#TLS1_TXT_ECDH_ECDSA_WITH_AES_256_SHA384
 "ECDH-ECDSA-AES256-SHA384"

	)

667 
	#TLS1_TXT_ECDHE_RSA_WITH_AES_128_SHA256
 "ECDHE-RSA-AES128-SHA256"

	)

668 
	#TLS1_TXT_ECDHE_RSA_WITH_AES_256_SHA384
 "ECDHE-RSA-AES256-SHA384"

	)

669 
	#TLS1_TXT_ECDH_RSA_WITH_AES_128_SHA256
 "ECDH-RSA-AES128-SHA256"

	)

670 
	#TLS1_TXT_ECDH_RSA_WITH_AES_256_SHA384
 "ECDH-RSA-AES256-SHA384"

	)

673 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
 "ECDHE-ECDSA-AES128-GCM-SHA256"

	)

674 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
 "ECDHE-ECDSA-AES256-GCM-SHA384"

	)

675 
	#TLS1_TXT_ECDH_ECDSA_WITH_AES_128_GCM_SHA256
 "ECDH-ECDSA-AES128-GCM-SHA256"

	)

676 
	#TLS1_TXT_ECDH_ECDSA_WITH_AES_256_GCM_SHA384
 "ECDH-ECDSA-AES256-GCM-SHA384"

	)

677 
	#TLS1_TXT_ECDHE_RSA_WITH_AES_128_GCM_SHA256
 "ECDHE-RSA-AES128-GCM-SHA256"

	)

678 
	#TLS1_TXT_ECDHE_RSA_WITH_AES_256_GCM_SHA384
 "ECDHE-RSA-AES256-GCM-SHA384"

	)

679 
	#TLS1_TXT_ECDH_RSA_WITH_AES_128_GCM_SHA256
 "ECDH-RSA-AES128-GCM-SHA256"

	)

680 
	#TLS1_TXT_ECDH_RSA_WITH_AES_256_GCM_SHA384
 "ECDH-RSA-AES256-GCM-SHA384"

	)

682 
	#TLS_CT_RSA_SIGN
 1

	)

683 
	#TLS_CT_DSS_SIGN
 2

	)

684 
	#TLS_CT_RSA_FIXED_DH
 3

	)

685 
	#TLS_CT_DSS_FIXED_DH
 4

	)

686 
	#TLS_CT_ECDSA_SIGN
 64

	)

687 
	#TLS_CT_RSA_FIXED_ECDH
 65

	)

688 
	#TLS_CT_ECDSA_FIXED_ECDH
 66

	)

689 
	#TLS_CT_GOST94_SIGN
 21

	)

690 
	#TLS_CT_GOST01_SIGN
 22

	)

693 
	#TLS_CT_NUMBER
 9

	)

695 
	#TLS1_FINISH_MAC_LENGTH
 12

	)

697 
	#TLS_MD_MAX_CONST_SIZE
 20

	)

698 
	#TLS_MD_CLIENT_FINISH_CONST
 "˛õ¡ föished"

	)

699 
	#TLS_MD_CLIENT_FINISH_CONST_SIZE
 15

	)

700 
	#TLS_MD_SERVER_FINISH_CONST
 "£rvî föished"

	)

701 
	#TLS_MD_SERVER_FINISH_CONST_SIZE
 15

	)

702 
	#TLS_MD_SERVER_WRITE_KEY_CONST
 "£rvî wrôêkey"

	)

703 
	#TLS_MD_SERVER_WRITE_KEY_CONST_SIZE
 16

	)

704 
	#TLS_MD_KEY_EXPANSION_CONST
 "keyÉx∑nsi⁄"

	)

705 
	#TLS_MD_KEY_EXPANSION_CONST_SIZE
 13

	)

706 
	#TLS_MD_CLIENT_WRITE_KEY_CONST
 "˛õ¡ wrôêkey"

	)

707 
	#TLS_MD_CLIENT_WRITE_KEY_CONST_SIZE
 16

	)

708 
	#TLS_MD_SERVER_WRITE_KEY_CONST
 "£rvî wrôêkey"

	)

709 
	#TLS_MD_SERVER_WRITE_KEY_CONST_SIZE
 16

	)

710 
	#TLS_MD_IV_BLOCK_CONST
 "IV block"

	)

711 
	#TLS_MD_IV_BLOCK_CONST_SIZE
 8

	)

712 
	#TLS_MD_MASTER_SECRET_CONST
 "ma°î se¸ë"

	)

713 
	#TLS_MD_MASTER_SECRET_CONST_SIZE
 13

	)

715 #ifde‡
CHARSET_EBCDIC


716 #unde‡
TLS_MD_CLIENT_FINISH_CONST


717 
	#TLS_MD_CLIENT_FINISH_CONST
 "\x63\x6c\x69\x65\x6e\x74\x20\x66\x69\x6e\x69\x73\x68\x65\x64"

	)

718 #unde‡
TLS_MD_SERVER_FINISH_CONST


719 
	#TLS_MD_SERVER_FINISH_CONST
 "\x73\x65\x72\x76\x65\x72\x20\x66\x69\x6e\x69\x73\x68\x65\x64"

	)

720 #unde‡
TLS_MD_SERVER_WRITE_KEY_CONST


721 
	#TLS_MD_SERVER_WRITE_KEY_CONST
 "\x73\x65\x72\x76\x65\x72\x20\x77\x72\x69\x74\x65\x20\x6b\x65\x79"

	)

722 #unde‡
TLS_MD_KEY_EXPANSION_CONST


723 
	#TLS_MD_KEY_EXPANSION_CONST
 "\x6b\x65\x79\x20\x65\x78\x70\x61\x6e\x73\x69\x6f\x6e"

	)

724 #unde‡
TLS_MD_CLIENT_WRITE_KEY_CONST


725 
	#TLS_MD_CLIENT_WRITE_KEY_CONST
 "\x63\x6c\x69\x65\x6e\x74\x20\x77\x72\x69\x74\x65\x20\x6b\x65\x79"

	)

726 #unde‡
TLS_MD_SERVER_WRITE_KEY_CONST


727 
	#TLS_MD_SERVER_WRITE_KEY_CONST
 "\x73\x65\x72\x76\x65\x72\x20\x77\x72\x69\x74\x65\x20\x6b\x65\x79"

	)

728 #unde‡
TLS_MD_IV_BLOCK_CONST


729 
	#TLS_MD_IV_BLOCK_CONST
 "\x49\x56\x20\x62\x6c\x6f\x63\x6b"

	)

730 #unde‡
TLS_MD_MASTER_SECRET_CONST


731 
	#TLS_MD_MASTER_SECRET_CONST
 "\x6d\x61\x73\x74\x65\x72\x20\x73\x65\x63\x72\x65\x74"

	)

735 
	sés_£ssi⁄_tickë_ext_°


737 
Àngth
;

738 *
d©a
;

741 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/x509.h

64 #i‚de‡
HEADER_X509_H


65 
	#HEADER_X509_H


	)

67 
	~<›ís¶/e_os2.h
>

68 
	~<›ís¶/symhacks.h
>

69 #i‚de‡
OPENSSL_NO_BUFFER


70 
	~<›ís¶/buf„r.h
>

72 #i‚de‡
OPENSSL_NO_EVP


73 
	~<›ís¶/evp.h
>

75 #i‚de‡
OPENSSL_NO_BIO


76 
	~<›ís¶/bio.h
>

78 
	~<›ís¶/°ack.h
>

79 
	~<›ís¶/a¢1.h
>

80 
	~<›ís¶/ß„°ack.h
>

82 #i‚de‡
OPENSSL_NO_EC


83 
	~<›ís¶/ec.h
>

86 #i‚de‡
OPENSSL_NO_ECDSA


87 
	~<›ís¶/ecdß.h
>

90 #i‚de‡
OPENSSL_NO_ECDH


91 
	~<›ís¶/ecdh.h
>

94 #i‚de‡
OPENSSL_NO_DEPRECATED


95 #i‚de‡
OPENSSL_NO_RSA


96 
	~<›ís¶/rß.h
>

98 #i‚de‡
OPENSSL_NO_DSA


99 
	~<›ís¶/dß.h
>

101 #i‚de‡
OPENSSL_NO_DH


102 
	~<›ís¶/dh.h
>

106 #i‚de‡
OPENSSL_NO_SHA


107 
	~<›ís¶/sha.h
>

109 
	~<›ís¶/os¶_typ.h
>

111 #ifde‡ 
__˝lu•lus


115 #ifde‡
OPENSSL_SYS_WIN32


117 #unde‡
X509_NAME


118 #unde‡
X509_CERT_PAIR


119 #unde‡
X509_EXTENSIONS


122 
	#X509_FILETYPE_PEM
 1

	)

123 
	#X509_FILETYPE_ASN1
 2

	)

124 
	#X509_FILETYPE_DEFAULT
 3

	)

126 
	#X509v3_KU_DIGITAL_SIGNATURE
 0x0080

	)

127 
	#X509v3_KU_NON_REPUDIATION
 0x0040

	)

128 
	#X509v3_KU_KEY_ENCIPHERMENT
 0x0020

	)

129 
	#X509v3_KU_DATA_ENCIPHERMENT
 0x0010

	)

130 
	#X509v3_KU_KEY_AGREEMENT
 0x0008

	)

131 
	#X509v3_KU_KEY_CERT_SIGN
 0x0004

	)

132 
	#X509v3_KU_CRL_SIGN
 0x0002

	)

133 
	#X509v3_KU_ENCIPHER_ONLY
 0x0001

	)

134 
	#X509v3_KU_DECIPHER_ONLY
 0x8000

	)

135 
	#X509v3_KU_UNDEF
 0xffff

	)

137 
	sX509_obje˘s_°


139 
nid
;

140 (*
a2i
)();

141 (*
i2a
)();

142 } 
	tX509_OBJECTS
;

144 
	sX509_Æg‹_°


146 
ASN1_OBJECT
 *
Æg‹ôhm
;

147 
ASN1_TYPE
 *
∑ømëî
;

150 
DECLARE_ASN1_SET_OF
(
X509_ALGOR
)

152 
STACK_OF
(
	tX509_ALGOR
Ë
	tX509_ALGORS
;

154 
	sX509_vÆ_°


156 
ASN1_TIME
 *
nŸBef‹e
;

157 
ASN1_TIME
 *
nŸA·î
;

158 } 
	tX509_VAL
;

160 
	sX509_pubkey_°


162 
X509_ALGOR
 *
Æg‹
;

163 
ASN1_BIT_STRING
 *
public_key
;

164 
EVP_PKEY
 *
pkey
;

167 
	sX509_sig_°


169 
X509_ALGOR
 *
Æg‹
;

170 
ASN1_OCTET_STRING
 *
dige°
;

171 } 
	tX509_SIG
;

173 
	sX509_«me_íåy_°


175 
ASN1_OBJECT
 *
obje˘
;

176 
ASN1_STRING
 *
vÆue
;

177 
£t
;

178 
size
;

179 } 
	tX509_NAME_ENTRY
;

181 
DECLARE_STACK_OF
(
X509_NAME_ENTRY
)

182 
DECLARE_ASN1_SET_OF
(
X509_NAME_ENTRY
)

185 
	sX509_«me_°


187 
STACK_OF
(
X509_NAME_ENTRY
Ë*
íåõs
;

188 
modifõd
;

189 #i‚de‡
OPENSSL_NO_BUFFER


190 
BUF_MEM
 *
byãs
;

192 *
byãs
;

195 *
ˇn⁄_íc
;

196 
ˇn⁄_í˛í
;

199 
DECLARE_STACK_OF
(
X509_NAME
)

201 
	#X509_EX_V_NETSCAPE_HACK
 0x8000

	)

202 
	#X509_EX_V_INIT
 0x0001

	)

203 
	sX509_exãnsi⁄_°


205 
ASN1_OBJECT
 *
obje˘
;

206 
ASN1_BOOLEAN
 
¸ôiˇl
;

207 
ASN1_OCTET_STRING
 *
vÆue
;

208 } 
	tX509_EXTENSION
;

210 
STACK_OF
(
	tX509_EXTENSION
Ë
	tX509_EXTENSIONS
;

212 
DECLARE_STACK_OF
(
X509_EXTENSION
)

213 
DECLARE_ASN1_SET_OF
(
X509_EXTENSION
)

216 
	sx509_©åibuãs_°


218 
ASN1_OBJECT
 *
obje˘
;

219 
sögÀ
;

221 *
±r
;

222  
STACK_OF
(
ASN1_TYPE
Ë*
£t
;

223  
ASN1_TYPE
 *
sögÀ
;

224 } 
vÆue
;

225 } 
	tX509_ATTRIBUTE
;

227 
DECLARE_STACK_OF
(
X509_ATTRIBUTE
)

228 
DECLARE_ASN1_SET_OF
(
X509_ATTRIBUTE
)

231 
	sX509_ªq_öfo_°


233 
ASN1_ENCODING
 
íc
;

234 
ASN1_INTEGER
 *
vîsi⁄
;

235 
X509_NAME
 *
subje˘
;

236 
X509_PUBKEY
 *
pubkey
;

238 
STACK_OF
(
X509_ATTRIBUTE
Ë*
©åibuãs
;

239 } 
	tX509_REQ_INFO
;

241 
	sX509_ªq_°


243 
X509_REQ_INFO
 *
ªq_öfo
;

244 
X509_ALGOR
 *
sig_Æg
;

245 
ASN1_BIT_STRING
 *
sig«tuª
;

246 
ª„ªn˚s
;

247 } 
	tX509_REQ
;

249 
	sx509_cöf_°


251 
ASN1_INTEGER
 *
vîsi⁄
;

252 
ASN1_INTEGER
 *
£rülNumbî
;

253 
X509_ALGOR
 *
sig«tuª
;

254 
X509_NAME
 *
issuî
;

255 
X509_VAL
 *
vÆidôy
;

256 
X509_NAME
 *
subje˘
;

257 
X509_PUBKEY
 *
key
;

258 
ASN1_BIT_STRING
 *
issuîUID
;

259 
ASN1_BIT_STRING
 *
subje˘UID
;

260 
STACK_OF
(
X509_EXTENSION
Ë*
exãnsi⁄s
;

261 
ASN1_ENCODING
 
íc
;

262 } 
	tX509_CINF
;

270 
	sx509_˚π_aux_°


272 
STACK_OF
(
ASN1_OBJECT
Ë*
åu°
;

273 
STACK_OF
(
ASN1_OBJECT
Ë*
ªje˘
;

274 
ASN1_UTF8STRING
 *
Æüs
;

275 
ASN1_OCTET_STRING
 *
keyid
;

276 
STACK_OF
(
X509_ALGOR
Ë*
Ÿhî
;

277 } 
	tX509_CERT_AUX
;

279 
	sx509_°


281 
X509_CINF
 *
˚π_öfo
;

282 
X509_ALGOR
 *
sig_Æg
;

283 
ASN1_BIT_STRING
 *
sig«tuª
;

284 
vÆid
;

285 
ª„ªn˚s
;

286 *
«me
;

287 
CRYPTO_EX_DATA
 
ex_d©a
;

289 
ex_∑thÀn
;

290 
ex_p˝©hÀn
;

291 
ex_Êags
;

292 
ex_kußge
;

293 
ex_xkußge
;

294 
ex_ns˚π
;

295 
ASN1_OCTET_STRING
 *
skid
;

296 
AUTHORITY_KEYID
 *
akid
;

297 
X509_POLICY_CACHE
 *
pﬁicy_ˇche
;

298 
STACK_OF
(
DIST_POINT
Ë*
¸ldp
;

299 
STACK_OF
(
GENERAL_NAME
Ë*
Æäame
;

300 
NAME_CONSTRAINTS
 *
nc
;

301 #i‚de‡
OPENSSL_NO_RFC3779


302 
STACK_OF
(
IPAddªssFamûy
Ë*
rfc3779_addr
;

303 
ASIdítifõrs_°
 *
rfc3779_asid
;

305 #i‚de‡
OPENSSL_NO_SHA


306 
sha1_hash
[
SHA_DIGEST_LENGTH
];

308 
X509_CERT_AUX
 *
aux
;

311 
DECLARE_STACK_OF
(
X509
)

312 
DECLARE_ASN1_SET_OF
(
X509
)

316 
	sx509_åu°_°
 {

317 
åu°
;

318 
Êags
;

319 (*
check_åu°
)(
x509_åu°_°
 *, 
X509
 *, );

320 *
«me
;

321 
¨g1
;

322 *
¨g2
;

323 } 
	tX509_TRUST
;

325 
DECLARE_STACK_OF
(
X509_TRUST
)

327 
	sx509_˚π_∑ú_°
 {

328 
X509
 *
f‹w¨d
;

329 
X509
 *
ªvî£
;

330 } 
	tX509_CERT_PAIR
;

334 
	#X509_TRUST_DEFAULT
 -1

	)

336 
	#X509_TRUST_COMPAT
 1

	)

337 
	#X509_TRUST_SSL_CLIENT
 2

	)

338 
	#X509_TRUST_SSL_SERVER
 3

	)

339 
	#X509_TRUST_EMAIL
 4

	)

340 
	#X509_TRUST_OBJECT_SIGN
 5

	)

341 
	#X509_TRUST_OCSP_SIGN
 6

	)

342 
	#X509_TRUST_OCSP_REQUEST
 7

	)

343 
	#X509_TRUST_TSA
 8

	)

346 
	#X509_TRUST_MIN
 1

	)

347 
	#X509_TRUST_MAX
 8

	)

351 
	#X509_TRUST_DYNAMIC
 1

	)

352 
	#X509_TRUST_DYNAMIC_NAME
 2

	)

356 
	#X509_TRUST_TRUSTED
 1

	)

357 
	#X509_TRUST_REJECTED
 2

	)

358 
	#X509_TRUST_UNTRUSTED
 3

	)

362 
	#X509_FLAG_COMPAT
 0

	)

363 
	#X509_FLAG_NO_HEADER
 1L

	)

364 
	#X509_FLAG_NO_VERSION
 (1L << 1)

	)

365 
	#X509_FLAG_NO_SERIAL
 (1L << 2)

	)

366 
	#X509_FLAG_NO_SIGNAME
 (1L << 3)

	)

367 
	#X509_FLAG_NO_ISSUER
 (1L << 4)

	)

368 
	#X509_FLAG_NO_VALIDITY
 (1L << 5)

	)

369 
	#X509_FLAG_NO_SUBJECT
 (1L << 6)

	)

370 
	#X509_FLAG_NO_PUBKEY
 (1L << 7)

	)

371 
	#X509_FLAG_NO_EXTENSIONS
 (1L << 8)

	)

372 
	#X509_FLAG_NO_SIGDUMP
 (1L << 9)

	)

373 
	#X509_FLAG_NO_AUX
 (1L << 10)

	)

374 
	#X509_FLAG_NO_ATTRIBUTES
 (1L << 11)

	)

380 
	#XN_FLAG_SEP_MASK
 (0x‡<< 16)

	)

382 
	#XN_FLAG_COMPAT
 0

	)

383 
	#XN_FLAG_SEP_COMMA_PLUS
 (1 << 16Ë

	)

384 
	#XN_FLAG_SEP_CPLUS_SPC
 (2 << 16Ë

	)

385 
	#XN_FLAG_SEP_SPLUS_SPC
 (3 << 16Ë

	)

386 
	#XN_FLAG_SEP_MULTILINE
 (4 << 16Ë

	)

388 
	#XN_FLAG_DN_REV
 (1 << 20Ë

	)

392 
	#XN_FLAG_FN_MASK
 (0x3 << 21)

	)

394 
	#XN_FLAG_FN_SN
 0

	)

395 
	#XN_FLAG_FN_LN
 (1 << 21Ë

	)

396 
	#XN_FLAG_FN_OID
 (2 << 21Ë

	)

397 
	#XN_FLAG_FN_NONE
 (3 << 21Ë

	)

399 
	#XN_FLAG_SPC_EQ
 (1 << 23Ë

	)

405 
	#XN_FLAG_DUMP_UNKNOWN_FIELDS
 (1 << 24)

	)

407 
	#XN_FLAG_FN_ALIGN
 (1 << 25Ë

	)

411 
	#XN_FLAG_RFC2253
 (
ASN1_STRFLGS_RFC2253
 | \

412 
XN_FLAG_SEP_COMMA_PLUS
 | \

413 
XN_FLAG_DN_REV
 | \

414 
XN_FLAG_FN_SN
 | \

415 
XN_FLAG_DUMP_UNKNOWN_FIELDS
)

	)

419 
	#XN_FLAG_ONELINE
 (
ASN1_STRFLGS_RFC2253
 | \

420 
ASN1_STRFLGS_ESC_QUOTE
 | \

421 
XN_FLAG_SEP_CPLUS_SPC
 | \

422 
XN_FLAG_SPC_EQ
 | \

423 
XN_FLAG_FN_SN
)

	)

427 
	#XN_FLAG_MULTILINE
 (
ASN1_STRFLGS_ESC_CTRL
 | \

428 
ASN1_STRFLGS_ESC_MSB
 | \

429 
XN_FLAG_SEP_MULTILINE
 | \

430 
XN_FLAG_SPC_EQ
 | \

431 
XN_FLAG_FN_LN
 | \

432 
XN_FLAG_FN_ALIGN
)

	)

434 
	sx509_ªvoked_°


436 
ASN1_INTEGER
 *
£rülNumbî
;

437 
ASN1_TIME
 *
ªvoˇti⁄D©e
;

438 
STACK_OF
(
X509_EXTENSION
Ë *
exãnsi⁄s
;

440 
STACK_OF
(
GENERAL_NAME
Ë*
issuî
;

442 
ªas⁄
;

443 
£quí˚
;

446 
DECLARE_STACK_OF
(
X509_REVOKED
)

447 
DECLARE_ASN1_SET_OF
(
X509_REVOKED
)

449 
	sX509_¸l_öfo_°


451 
ASN1_INTEGER
 *
vîsi⁄
;

452 
X509_ALGOR
 *
sig_Æg
;

453 
X509_NAME
 *
issuî
;

454 
ASN1_TIME
 *
œ°Upd©e
;

455 
ASN1_TIME
 *
√xtUpd©e
;

456 
STACK_OF
(
X509_REVOKED
Ë*
ªvoked
;

457 
STACK_OF
(
X509_EXTENSION
Ë *
exãnsi⁄s
;

458 
ASN1_ENCODING
 
íc
;

459 } 
	tX509_CRL_INFO
;

461 
	sX509_¸l_°


464 
X509_CRL_INFO
 *
¸l
;

465 
X509_ALGOR
 *
sig_Æg
;

466 
ASN1_BIT_STRING
 *
sig«tuª
;

467 
ª„ªn˚s
;

468 
Êags
;

470 
AUTHORITY_KEYID
 *
akid
;

471 
ISSUING_DIST_POINT
 *
idp
;

473 
idp_Êags
;

474 
idp_ªas⁄s
;

476 
ASN1_INTEGER
 *
¸l_numbî
;

477 
ASN1_INTEGER
 *
ba£_¸l_numbî
;

478 #i‚de‡
OPENSSL_NO_SHA


479 
sha1_hash
[
SHA_DIGEST_LENGTH
];

481 
STACK_OF
(
GENERAL_NAMES
Ë*
issuîs
;

482 c⁄° 
X509_CRL_METHOD
 *
mëh
;

483 *
mëh_d©a
;

486 
DECLARE_STACK_OF
(
X509_CRL
)

487 
DECLARE_ASN1_SET_OF
(
X509_CRL
)

489 
	s¥iv©e_key_°


491 
vîsi⁄
;

493 
X509_ALGOR
 *
íc_Æg‹
;

494 
ASN1_OCTET_STRING
 *
íc_pkey
;

497 
EVP_PKEY
 *
dec_pkey
;

500 
key_Àngth
;

501 *
key_d©a
;

502 
key_‰ì
;

505 
EVP_CIPHER_INFO
 
cùhî
;

507 
ª„ªn˚s
;

508 } 
	tX509_PKEY
;

510 #i‚de‡
OPENSSL_NO_EVP


511 
	sX509_öfo_°


513 
X509
 *
x509
;

514 
X509_CRL
 *
¸l
;

515 
X509_PKEY
 *
x_pkey
;

517 
EVP_CIPHER_INFO
 
íc_cùhî
;

518 
íc_Àn
;

519 *
íc_d©a
;

521 
ª„ªn˚s
;

522 } 
	tX509_INFO
;

524 
DECLARE_STACK_OF
(
X509_INFO
)

531 
	sNësˇ≥_•kac_°


533 
X509_PUBKEY
 *
pubkey
;

534 
ASN1_IA5STRING
 *
chÆÀnge
;

535 } 
	tNETSCAPE_SPKAC
;

537 
	sNësˇ≥_•ki_°


539 
NETSCAPE_SPKAC
 *
•kac
;

540 
X509_ALGOR
 *
sig_Æg‹
;

541 
ASN1_BIT_STRING
 *
sig«tuª
;

542 } 
	tNETSCAPE_SPKI
;

545 
	sNësˇ≥_˚πifiˇã_£quí˚


547 
ASN1_OBJECT
 *
ty≥
;

548 
STACK_OF
(
X509
Ë*
˚πs
;

549 } 
	tNETSCAPE_CERT_SEQUENCE
;

560 
	sPBEPARAM_°
 {

561 
ASN1_OCTET_STRING
 *
ß…
;

562 
ASN1_INTEGER
 *
ôî
;

563 } 
	tPBEPARAM
;

567 
	sPBE2PARAM_°
 {

568 
X509_ALGOR
 *
keyfunc
;

569 
X509_ALGOR
 *
í¸y±i⁄
;

570 } 
	tPBE2PARAM
;

572 
	sPBKDF2PARAM_°
 {

573 
ASN1_TYPE
 *
ß…
;

574 
ASN1_INTEGER
 *
ôî
;

575 
ASN1_INTEGER
 *
keyÀngth
;

576 
X509_ALGOR
 *
¥f
;

577 } 
	tPBKDF2PARAM
;

582 
	spkcs8_¥iv_key_öfo_°


584 
brokí
;

585 
	#PKCS8_OK
 0

	)

586 
	#PKCS8_NO_OCTET
 1

	)

587 
	#PKCS8_EMBEDDED_PARAM
 2

	)

588 
	#PKCS8_NS_DB
 3

	)

589 
	#PKCS8_NEG_PRIVKEY
 4

	)

590 
ASN1_INTEGER
 *
vîsi⁄
;

591 
X509_ALGOR
 *
pkeyÆg
;

592 
ASN1_TYPE
 *
pkey
;

593 
STACK_OF
(
X509_ATTRIBUTE
Ë*
©åibuãs
;

596 #ifde‡ 
__˝lu•lus


600 
	~<›ís¶/x509_vfy.h
>

601 
	~<›ís¶/pkcs7.h
>

603 #ifde‡ 
__˝lu•lus


607 
	#X509_EXT_PACK_UNKNOWN
 1

	)

608 
	#X509_EXT_PACK_STRING
 2

	)

610 
	#X509_gë_vîsi⁄
(
x
Ë
	`ASN1_INTEGER_gë
((x)->
˚π_öfo
->
vîsi⁄
)

	)

612 
	#X509_gë_nŸBef‹e
(
x
Ë((x)->
˚π_öfo
->
vÆidôy
->
nŸBef‹e
)

	)

613 
	#X509_gë_nŸA·î
(
x
Ë((x)->
˚π_öfo
->
vÆidôy
->
nŸA·î
)

	)

614 
	#X509_exåa˘_key
(
x
Ë
	`X509_gë_pubkey
(xË

	)

615 
	#X509_REQ_gë_vîsi⁄
(
x
Ë
	`ASN1_INTEGER_gë
((x)->
ªq_öfo
->
vîsi⁄
)

	)

616 
	#X509_REQ_gë_subje˘_«me
(
x
Ë((x)->
ªq_öfo
->
subje˘
)

	)

617 
	#X509_REQ_exåa˘_key
(
a
Ë
	`X509_REQ_gë_pubkey
◊)

	)

618 
	#X509_«me_cmp
(
a
,
b
Ë
	`X509_NAME_cmp
(◊),(b))

	)

619 
	#X509_gë_sig«tuª_ty≥
(
x
Ë
	`EVP_PKEY_ty≥
(
	`OBJ_obj2nid
((x)->
sig_Æg
->
Æg‹ôhm
))

	)

621 
	#X509_CRL_gë_vîsi⁄
(
x
Ë
	`ASN1_INTEGER_gë
((x)->
¸l
->
vîsi⁄
)

	)

622 
	#X509_CRL_gë_œ°Upd©e
(
x
Ë((x)->
¸l
->
œ°Upd©e
)

	)

623 
	#X509_CRL_gë_√xtUpd©e
(
x
Ë((x)->
¸l
->
√xtUpd©e
)

	)

624 
	#X509_CRL_gë_issuî
(
x
Ë((x)->
¸l
->
issuî
)

	)

625 
	#X509_CRL_gë_REVOKED
(
x
Ë((x)->
¸l
->
ªvoked
)

	)

627 
X509_CRL_£t_deÁu…_mëhod
(c⁄° 
X509_CRL_METHOD
 *
mëh
);

628 
X509_CRL_METHOD
 *
X509_CRL_METHOD_√w
(

629 (*
¸l_öô
)(
X509_CRL
 *
¸l
),

630 (*
¸l_‰ì
)(
X509_CRL
 *
¸l
),

631 (*
¸l_lookup
)(
X509_CRL
 *
¸l
, 
X509_REVOKED
 **
ªt
,

632 
ASN1_INTEGER
 *
£r
, 
X509_NAME
 *
issuî
),

633 (*
¸l_vîify
)(
X509_CRL
 *
¸l
, 
EVP_PKEY
 *
pk
));

634 
X509_CRL_METHOD_‰ì
(
X509_CRL_METHOD
 *
m
);

636 
X509_CRL_£t_mëh_d©a
(
X509_CRL
 *
¸l
, *
d©
);

637 *
X509_CRL_gë_mëh_d©a
(
X509_CRL
 *
¸l
);

641 
	#X509_gë_X509_PUBKEY
(
x
Ë((x)->
˚π_öfo
->
key
)

	)

644 c⁄° *
X509_vîify_˚π_îr‹_°rög
(
n
);

646 #i‚de‡
OPENSSL_NO_EVP


647 
X509_vîify
(
X509
 *
a
, 
EVP_PKEY
 *
r
);

649 
X509_REQ_vîify
(
X509_REQ
 *
a
, 
EVP_PKEY
 *
r
);

650 
X509_CRL_vîify
(
X509_CRL
 *
a
, 
EVP_PKEY
 *
r
);

651 
NETSCAPE_SPKI_vîify
(
NETSCAPE_SPKI
 *
a
, 
EVP_PKEY
 *
r
);

653 
NETSCAPE_SPKI
 * 
NETSCAPE_SPKI_b64_decode
(c⁄° *
°r
, 
Àn
);

654 * 
NETSCAPE_SPKI_b64_ícode
(
NETSCAPE_SPKI
 *
x
);

655 
EVP_PKEY
 *
NETSCAPE_SPKI_gë_pubkey
(
NETSCAPE_SPKI
 *
x
);

656 
NETSCAPE_SPKI_£t_pubkey
(
NETSCAPE_SPKI
 *
x
, 
EVP_PKEY
 *
pkey
);

658 
NETSCAPE_SPKI_¥öt
(
BIO
 *
out
, 
NETSCAPE_SPKI
 *
•ki
);

660 
X509_sig«tuª_dump
(
BIO
 *
bp
,c⁄° 
ASN1_STRING
 *
sig
, 
ödít
);

661 
X509_sig«tuª_¥öt
(
BIO
 *
bp
,
X509_ALGOR
 *
Æg
, 
ASN1_STRING
 *
sig
);

663 
X509_sign
(
X509
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

664 
X509_sign_˘x
(
X509
 *
x
, 
EVP_MD_CTX
 *
˘x
);

665 
X509_REQ_sign
(
X509_REQ
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

666 
X509_REQ_sign_˘x
(
X509_REQ
 *
x
, 
EVP_MD_CTX
 *
˘x
);

667 
X509_CRL_sign
(
X509_CRL
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

668 
X509_CRL_sign_˘x
(
X509_CRL
 *
x
, 
EVP_MD_CTX
 *
˘x
);

669 
NETSCAPE_SPKI_sign
(
NETSCAPE_SPKI
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

671 
X509_pubkey_dige°
(c⁄° 
X509
 *
d©a
,c⁄° 
EVP_MD
 *
ty≥
,

672 *
md
, *
Àn
);

673 
X509_dige°
(c⁄° 
X509
 *
d©a
,c⁄° 
EVP_MD
 *
ty≥
,

674 *
md
, *
Àn
);

675 
X509_CRL_dige°
(c⁄° 
X509_CRL
 *
d©a
,c⁄° 
EVP_MD
 *
ty≥
,

676 *
md
, *
Àn
);

677 
X509_REQ_dige°
(c⁄° 
X509_REQ
 *
d©a
,c⁄° 
EVP_MD
 *
ty≥
,

678 *
md
, *
Àn
);

679 
X509_NAME_dige°
(c⁄° 
X509_NAME
 *
d©a
,c⁄° 
EVP_MD
 *
ty≥
,

680 *
md
, *
Àn
);

683 #i‚de‡
OPENSSL_NO_FP_API


684 
X509
 *
d2i_X509_Â
(
FILE
 *
Â
, X509 **
x509
);

685 
i2d_X509_Â
(
FILE
 *
Â
,
X509
 *
x509
);

686 
X509_CRL
 *
d2i_X509_CRL_Â
(
FILE
 *
Â
,X509_CRL **
¸l
);

687 
i2d_X509_CRL_Â
(
FILE
 *
Â
,
X509_CRL
 *
¸l
);

688 
X509_REQ
 *
d2i_X509_REQ_Â
(
FILE
 *
Â
,X509_REQ **
ªq
);

689 
i2d_X509_REQ_Â
(
FILE
 *
Â
,
X509_REQ
 *
ªq
);

690 #i‚de‡
OPENSSL_NO_RSA


691 
RSA
 *
d2i_RSAPriv©eKey_Â
(
FILE
 *
Â
,RSA **
rß
);

692 
i2d_RSAPriv©eKey_Â
(
FILE
 *
Â
,
RSA
 *
rß
);

693 
RSA
 *
d2i_RSAPublicKey_Â
(
FILE
 *
Â
,RSA **
rß
);

694 
i2d_RSAPublicKey_Â
(
FILE
 *
Â
,
RSA
 *
rß
);

695 
RSA
 *
d2i_RSA_PUBKEY_Â
(
FILE
 *
Â
,RSA **
rß
);

696 
i2d_RSA_PUBKEY_Â
(
FILE
 *
Â
,
RSA
 *
rß
);

698 #i‚de‡
OPENSSL_NO_DSA


699 
DSA
 *
d2i_DSA_PUBKEY_Â
(
FILE
 *
Â
, DSA **
dß
);

700 
i2d_DSA_PUBKEY_Â
(
FILE
 *
Â
, 
DSA
 *
dß
);

701 
DSA
 *
d2i_DSAPriv©eKey_Â
(
FILE
 *
Â
, DSA **
dß
);

702 
i2d_DSAPriv©eKey_Â
(
FILE
 *
Â
, 
DSA
 *
dß
);

704 #i‚de‡
OPENSSL_NO_EC


705 
EC_KEY
 *
d2i_EC_PUBKEY_Â
(
FILE
 *
Â
, EC_KEY **
eckey
);

706 
i2d_EC_PUBKEY_Â
(
FILE
 *
Â
, 
EC_KEY
 *
eckey
);

707 
EC_KEY
 *
d2i_ECPriv©eKey_Â
(
FILE
 *
Â
, EC_KEY **
eckey
);

708 
i2d_ECPriv©eKey_Â
(
FILE
 *
Â
, 
EC_KEY
 *
eckey
);

710 
X509_SIG
 *
d2i_PKCS8_Â
(
FILE
 *
Â
,X509_SIG **
p8
);

711 
i2d_PKCS8_Â
(
FILE
 *
Â
,
X509_SIG
 *
p8
);

712 
PKCS8_PRIV_KEY_INFO
 *
d2i_PKCS8_PRIV_KEY_INFO_Â
(
FILE
 *
Â
,

713 
PKCS8_PRIV_KEY_INFO
 **
p8öf
);

714 
i2d_PKCS8_PRIV_KEY_INFO_Â
(
FILE
 *
Â
,
PKCS8_PRIV_KEY_INFO
 *
p8öf
);

715 
i2d_PKCS8Priv©eKeyInfo_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
key
);

716 
i2d_Priv©eKey_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
pkey
);

717 
EVP_PKEY
 *
d2i_Priv©eKey_Â
(
FILE
 *
Â
, EVP_PKEY **
a
);

718 
i2d_PUBKEY_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
pkey
);

719 
EVP_PKEY
 *
d2i_PUBKEY_Â
(
FILE
 *
Â
, EVP_PKEY **
a
);

722 #i‚de‡
OPENSSL_NO_BIO


723 
X509
 *
d2i_X509_bio
(
BIO
 *
bp
,X509 **
x509
);

724 
i2d_X509_bio
(
BIO
 *
bp
,
X509
 *
x509
);

725 
X509_CRL
 *
d2i_X509_CRL_bio
(
BIO
 *
bp
,X509_CRL **
¸l
);

726 
i2d_X509_CRL_bio
(
BIO
 *
bp
,
X509_CRL
 *
¸l
);

727 
X509_REQ
 *
d2i_X509_REQ_bio
(
BIO
 *
bp
,X509_REQ **
ªq
);

728 
i2d_X509_REQ_bio
(
BIO
 *
bp
,
X509_REQ
 *
ªq
);

729 #i‚de‡
OPENSSL_NO_RSA


730 
RSA
 *
d2i_RSAPriv©eKey_bio
(
BIO
 *
bp
,RSA **
rß
);

731 
i2d_RSAPriv©eKey_bio
(
BIO
 *
bp
,
RSA
 *
rß
);

732 
RSA
 *
d2i_RSAPublicKey_bio
(
BIO
 *
bp
,RSA **
rß
);

733 
i2d_RSAPublicKey_bio
(
BIO
 *
bp
,
RSA
 *
rß
);

734 
RSA
 *
d2i_RSA_PUBKEY_bio
(
BIO
 *
bp
,RSA **
rß
);

735 
i2d_RSA_PUBKEY_bio
(
BIO
 *
bp
,
RSA
 *
rß
);

737 #i‚de‡
OPENSSL_NO_DSA


738 
DSA
 *
d2i_DSA_PUBKEY_bio
(
BIO
 *
bp
, DSA **
dß
);

739 
i2d_DSA_PUBKEY_bio
(
BIO
 *
bp
, 
DSA
 *
dß
);

740 
DSA
 *
d2i_DSAPriv©eKey_bio
(
BIO
 *
bp
, DSA **
dß
);

741 
i2d_DSAPriv©eKey_bio
(
BIO
 *
bp
, 
DSA
 *
dß
);

743 #i‚de‡
OPENSSL_NO_EC


744 
EC_KEY
 *
d2i_EC_PUBKEY_bio
(
BIO
 *
bp
, EC_KEY **
eckey
);

745 
i2d_EC_PUBKEY_bio
(
BIO
 *
bp
, 
EC_KEY
 *
eckey
);

746 
EC_KEY
 *
d2i_ECPriv©eKey_bio
(
BIO
 *
bp
, EC_KEY **
eckey
);

747 
i2d_ECPriv©eKey_bio
(
BIO
 *
bp
, 
EC_KEY
 *
eckey
);

749 
X509_SIG
 *
d2i_PKCS8_bio
(
BIO
 *
bp
,X509_SIG **
p8
);

750 
i2d_PKCS8_bio
(
BIO
 *
bp
,
X509_SIG
 *
p8
);

751 
PKCS8_PRIV_KEY_INFO
 *
d2i_PKCS8_PRIV_KEY_INFO_bio
(
BIO
 *
bp
,

752 
PKCS8_PRIV_KEY_INFO
 **
p8öf
);

753 
i2d_PKCS8_PRIV_KEY_INFO_bio
(
BIO
 *
bp
,
PKCS8_PRIV_KEY_INFO
 *
p8öf
);

754 
i2d_PKCS8Priv©eKeyInfo_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
key
);

755 
i2d_Priv©eKey_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
pkey
);

756 
EVP_PKEY
 *
d2i_Priv©eKey_bio
(
BIO
 *
bp
, EVP_PKEY **
a
);

757 
i2d_PUBKEY_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
pkey
);

758 
EVP_PKEY
 *
d2i_PUBKEY_bio
(
BIO
 *
bp
, EVP_PKEY **
a
);

761 
X509
 *
X509_dup
(X509 *
x509
);

762 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_dup
(X509_ATTRIBUTE *
xa
);

763 
X509_EXTENSION
 *
X509_EXTENSION_dup
(X509_EXTENSION *
ex
);

764 
X509_CRL
 *
X509_CRL_dup
(X509_CRL *
¸l
);

765 
X509_REQ
 *
X509_REQ_dup
(X509_REQ *
ªq
);

766 
X509_ALGOR
 *
X509_ALGOR_dup
(X509_ALGOR *
xn
);

767 
X509_ALGOR_£t0
(
X509_ALGOR
 *
Æg
, 
ASN1_OBJECT
 *
aobj
, 
±y≥
, *
pvÆ
);

768 
X509_ALGOR_gë0
(
ASN1_OBJECT
 **
∑obj
, *
µty≥
, **
µvÆ
,

769 
X509_ALGOR
 *
Æg‹
);

770 
X509_ALGOR_£t_md
(
X509_ALGOR
 *
Æg
, c⁄° 
EVP_MD
 *
md
);

771 
X509_ALGOR_cmp
(c⁄° 
X509_ALGOR
 *
a
, c⁄° X509_ALGOR *
b
);

773 
X509_NAME
 *
X509_NAME_dup
(X509_NAME *
xn
);

774 
X509_NAME_ENTRY
 *
X509_NAME_ENTRY_dup
(X509_NAME_ENTRY *
√
);

776 
X509_cmp_time
(c⁄° 
ASN1_TIME
 *
s
, 
time_t
 *
t
);

777 
X509_cmp_cuºít_time
(c⁄° 
ASN1_TIME
 *
s
);

778 
ASN1_TIME
 * 
X509_time_adj
(ASN1_TIME *
s
, 
adj
, 
time_t
 *
t
);

779 
ASN1_TIME
 * 
X509_time_adj_ex
(ASN1_TIME *
s
,

780 
off£t_day
, 
off£t_£c
, 
time_t
 *
t
);

781 
ASN1_TIME
 * 
X509_gmtime_adj
(ASN1_TIME *
s
, 
adj
);

783 c⁄° * 
X509_gë_deÁu…_˚π_¨ó
();

784 c⁄° * 
X509_gë_deÁu…_˚π_dú
();

785 c⁄° * 
X509_gë_deÁu…_˚π_fûe
();

786 c⁄° * 
X509_gë_deÁu…_˚π_dú_ív
();

787 c⁄° * 
X509_gë_deÁu…_˚π_fûe_ív
();

788 c⁄° * 
X509_gë_deÁu…_¥iv©e_dú
();

790 
X509_REQ
 * 
X509_to_X509_REQ
(
X509
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

791 
X509
 * 
X509_REQ_to_X509
(
X509_REQ
 *
r
, 
days
,
EVP_PKEY
 *
pkey
);

793 
DECLARE_ASN1_FUNCTIONS
(
X509_ALGOR
)

794 
DECLARE_ASN1_ENCODE_FUNCTIONS
(
X509_ALGORS
, X509_ALGORS, X509_ALGORS)

795 
DECLARE_ASN1_FUNCTIONS
(
X509_VAL
)

797 
DECLARE_ASN1_FUNCTIONS
(
X509_PUBKEY
)

799 
X509_PUBKEY_£t
(
X509_PUBKEY
 **
x
, 
EVP_PKEY
 *
pkey
);

800 
EVP_PKEY
 * 
X509_PUBKEY_gë
(
X509_PUBKEY
 *
key
);

801 
X509_gë_pubkey_∑ømëîs
(
EVP_PKEY
 *
pkey
,

802 
STACK_OF
(
X509
Ë*
chaö
);

803 
i2d_PUBKEY
(
EVP_PKEY
 *
a
,**
µ
);

804 
EVP_PKEY
 * 
d2i_PUBKEY
(EVP_PKEY **
a
,c⁄° **
µ
,

805 
Àngth
);

806 #i‚de‡
OPENSSL_NO_RSA


807 
i2d_RSA_PUBKEY
(
RSA
 *
a
,**
µ
);

808 
RSA
 * 
d2i_RSA_PUBKEY
(RSA **
a
,c⁄° **
µ
,

809 
Àngth
);

811 #i‚de‡
OPENSSL_NO_DSA


812 
i2d_DSA_PUBKEY
(
DSA
 *
a
,**
µ
);

813 
DSA
 * 
d2i_DSA_PUBKEY
(DSA **
a
,c⁄° **
µ
,

814 
Àngth
);

816 #i‚de‡
OPENSSL_NO_EC


817 
i2d_EC_PUBKEY
(
EC_KEY
 *
a
, **
µ
);

818 
EC_KEY
 *
d2i_EC_PUBKEY
(EC_KEY **
a
, c⁄° **
µ
,

819 
Àngth
);

822 
DECLARE_ASN1_FUNCTIONS
(
X509_SIG
)

823 
DECLARE_ASN1_FUNCTIONS
(
X509_REQ_INFO
)

824 
DECLARE_ASN1_FUNCTIONS
(
X509_REQ
)

826 
DECLARE_ASN1_FUNCTIONS
(
X509_ATTRIBUTE
)

827 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_¸óã
(
nid
, 
©πy≥
, *
vÆue
);

829 
DECLARE_ASN1_FUNCTIONS
(
X509_EXTENSION
)

830 
DECLARE_ASN1_ENCODE_FUNCTIONS
(
X509_EXTENSIONS
, X509_EXTENSIONS, X509_EXTENSIONS)

832 
DECLARE_ASN1_FUNCTIONS
(
X509_NAME_ENTRY
)

834 
DECLARE_ASN1_FUNCTIONS
(
X509_NAME
)

836 
X509_NAME_£t
(
X509_NAME
 **
xn
, X509_NAME *
«me
);

838 
DECLARE_ASN1_FUNCTIONS
(
X509_CINF
)

840 
DECLARE_ASN1_FUNCTIONS
(
X509
)

841 
DECLARE_ASN1_FUNCTIONS
(
X509_CERT_AUX
)

843 
DECLARE_ASN1_FUNCTIONS
(
X509_CERT_PAIR
)

845 
X509_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

846 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

847 
X509_£t_ex_d©a
(
X509
 *
r
, 
idx
, *
¨g
);

848 *
X509_gë_ex_d©a
(
X509
 *
r
, 
idx
);

849 
i2d_X509_AUX
(
X509
 *
a
,**
µ
);

850 
X509
 * 
d2i_X509_AUX
(X509 **
a
,c⁄° **
µ
,
Àngth
);

852 
X509_Æüs_£t1
(
X509
 *
x
, *
«me
, 
Àn
);

853 
X509_keyid_£t1
(
X509
 *
x
, *
id
, 
Àn
);

854 * 
X509_Æüs_gë0
(
X509
 *
x
, *
Àn
);

855 * 
X509_keyid_gë0
(
X509
 *
x
, *
Àn
);

856 (*
X509_TRUST_£t_deÁu…
((*
åu°
)(, 
X509
 *, )))(, X509 *, );

857 
X509_TRUST_£t
(*
t
, 
åu°
);

858 
X509_add1_åu°_obje˘
(
X509
 *
x
, 
ASN1_OBJECT
 *
obj
);

859 
X509_add1_ªje˘_obje˘
(
X509
 *
x
, 
ASN1_OBJECT
 *
obj
);

860 
X509_åu°_˛ór
(
X509
 *
x
);

861 
X509_ªje˘_˛ór
(
X509
 *
x
);

863 
DECLARE_ASN1_FUNCTIONS
(
X509_REVOKED
)

864 
DECLARE_ASN1_FUNCTIONS
(
X509_CRL_INFO
)

865 
DECLARE_ASN1_FUNCTIONS
(
X509_CRL
)

867 
X509_CRL_add0_ªvoked
(
X509_CRL
 *
¸l
, 
X509_REVOKED
 *
ªv
);

868 
X509_CRL_gë0_by_£rül
(
X509_CRL
 *
¸l
,

869 
X509_REVOKED
 **
ªt
, 
ASN1_INTEGER
 *
£rül
);

870 
X509_CRL_gë0_by_˚π
(
X509_CRL
 *
¸l
, 
X509_REVOKED
 **
ªt
, 
X509
 *
x
);

872 
X509_PKEY
 * 
X509_PKEY_√w
();

873 
X509_PKEY_‰ì
(
X509_PKEY
 *
a
);

874 
i2d_X509_PKEY
(
X509_PKEY
 *
a
,**
µ
);

875 
X509_PKEY
 * 
d2i_X509_PKEY
(X509_PKEY **
a
,c⁄° **
µ
,
Àngth
);

877 
DECLARE_ASN1_FUNCTIONS
(
NETSCAPE_SPKI
)

878 
DECLARE_ASN1_FUNCTIONS
(
NETSCAPE_SPKAC
)

879 
DECLARE_ASN1_FUNCTIONS
(
NETSCAPE_CERT_SEQUENCE
)

881 #i‚de‡
OPENSSL_NO_EVP


882 
X509_INFO
 * 
X509_INFO_√w
();

883 
X509_INFO_‰ì
(
X509_INFO
 *
a
);

884 * 
X509_NAME_⁄ñöe
(
X509_NAME
 *
a
,*
buf
,
size
);

886 
ASN1_vîify
(
i2d_of_void
 *
i2d
, 
X509_ALGOR
 *
Æg‹1
,

887 
ASN1_BIT_STRING
 *
sig«tuª
,*
d©a
,
EVP_PKEY
 *
pkey
);

889 
ASN1_dige°
(
i2d_of_void
 *
i2d
,c⁄° 
EVP_MD
 *
ty≥
,*
d©a
,

890 *
md
,*
Àn
);

892 
ASN1_sign
(
i2d_of_void
 *
i2d
, 
X509_ALGOR
 *
Æg‹1
,

893 
X509_ALGOR
 *
Æg‹2
, 
ASN1_BIT_STRING
 *
sig«tuª
,

894 *
d©a
,
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
ty≥
);

896 
ASN1_ôem_dige°
(c⁄° 
ASN1_ITEM
 *
ô
,c⁄° 
EVP_MD
 *
ty≥
,*
d©a
,

897 *
md
,*
Àn
);

899 
ASN1_ôem_vîify
(c⁄° 
ASN1_ITEM
 *
ô
, 
X509_ALGOR
 *
Æg‹1
,

900 
ASN1_BIT_STRING
 *
sig«tuª
,*
d©a
,
EVP_PKEY
 *
pkey
);

902 
ASN1_ôem_sign
(c⁄° 
ASN1_ITEM
 *
ô
, 
X509_ALGOR
 *
Æg‹1
, X509_ALGOR *
Æg‹2
,

903 
ASN1_BIT_STRING
 *
sig«tuª
,

904 *
d©a
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
ty≥
);

905 
ASN1_ôem_sign_˘x
(c⁄° 
ASN1_ITEM
 *
ô
,

906 
X509_ALGOR
 *
Æg‹1
, X509_ALGOR *
Æg‹2
,

907 
ASN1_BIT_STRING
 *
sig«tuª
, *
a¢
, 
EVP_MD_CTX
 *
˘x
);

910 
X509_£t_vîsi⁄
(
X509
 *
x
,
vîsi⁄
);

911 
X509_£t_£rülNumbî
(
X509
 *
x
, 
ASN1_INTEGER
 *
£rül
);

912 
ASN1_INTEGER
 * 
X509_gë_£rülNumbî
(
X509
 *
x
);

913 
X509_£t_issuî_«me
(
X509
 *
x
, 
X509_NAME
 *
«me
);

914 
X509_NAME
 * 
X509_gë_issuî_«me
(
X509
 *
a
);

915 
X509_£t_subje˘_«me
(
X509
 *
x
, 
X509_NAME
 *
«me
);

916 
X509_NAME
 * 
X509_gë_subje˘_«me
(
X509
 *
a
);

917 
X509_£t_nŸBef‹e
(
X509
 *
x
, c⁄° 
ASN1_TIME
 *
tm
);

918 
X509_£t_nŸA·î
(
X509
 *
x
, c⁄° 
ASN1_TIME
 *
tm
);

919 
X509_£t_pubkey
(
X509
 *
x
, 
EVP_PKEY
 *
pkey
);

920 
EVP_PKEY
 * 
X509_gë_pubkey
(
X509
 *
x
);

921 
ASN1_BIT_STRING
 * 
X509_gë0_pubkey_bô°r
(c⁄° 
X509
 *
x
);

922 
X509_˚πifiˇã_ty≥
(
X509
 *
x
,
EVP_PKEY
 *
pubkey
 );

924 
X509_REQ_£t_vîsi⁄
(
X509_REQ
 *
x
,
vîsi⁄
);

925 
X509_REQ_£t_subje˘_«me
(
X509_REQ
 *
ªq
,
X509_NAME
 *
«me
);

926 
X509_REQ_£t_pubkey
(
X509_REQ
 *
x
, 
EVP_PKEY
 *
pkey
);

927 
EVP_PKEY
 * 
X509_REQ_gë_pubkey
(
X509_REQ
 *
ªq
);

928 
X509_REQ_exãnsi⁄_nid
(
nid
);

929 * 
X509_REQ_gë_exãnsi⁄_nids
();

930 
X509_REQ_£t_exãnsi⁄_nids
(*
nids
);

931 
STACK_OF
(
X509_EXTENSION
Ë*
X509_REQ_gë_exãnsi⁄s
(
X509_REQ
 *
ªq
);

932 
X509_REQ_add_exãnsi⁄s_nid
(
X509_REQ
 *
ªq
, 
STACK_OF
(
X509_EXTENSION
Ë*
exts
,

933 
nid
);

934 
X509_REQ_add_exãnsi⁄s
(
X509_REQ
 *
ªq
, 
STACK_OF
(
X509_EXTENSION
Ë*
exts
);

935 
X509_REQ_gë_©å_cou¡
(c⁄° 
X509_REQ
 *
ªq
);

936 
X509_REQ_gë_©å_by_NID
(c⁄° 
X509_REQ
 *
ªq
, 
nid
,

937 
œ°pos
);

938 
X509_REQ_gë_©å_by_OBJ
(c⁄° 
X509_REQ
 *
ªq
, 
ASN1_OBJECT
 *
obj
,

939 
œ°pos
);

940 
X509_ATTRIBUTE
 *
X509_REQ_gë_©å
(c⁄° 
X509_REQ
 *
ªq
, 
loc
);

941 
X509_ATTRIBUTE
 *
X509_REQ_dñëe_©å
(
X509_REQ
 *
ªq
, 
loc
);

942 
X509_REQ_add1_©å
(
X509_REQ
 *
ªq
, 
X509_ATTRIBUTE
 *
©å
);

943 
X509_REQ_add1_©å_by_OBJ
(
X509_REQ
 *
ªq
,

944 c⁄° 
ASN1_OBJECT
 *
obj
, 
ty≥
,

945 c⁄° *
byãs
, 
Àn
);

946 
X509_REQ_add1_©å_by_NID
(
X509_REQ
 *
ªq
,

947 
nid
, 
ty≥
,

948 c⁄° *
byãs
, 
Àn
);

949 
X509_REQ_add1_©å_by_txt
(
X509_REQ
 *
ªq
,

950 c⁄° *
©å«me
, 
ty≥
,

951 c⁄° *
byãs
, 
Àn
);

953 
X509_CRL_£t_vîsi⁄
(
X509_CRL
 *
x
, 
vîsi⁄
);

954 
X509_CRL_£t_issuî_«me
(
X509_CRL
 *
x
, 
X509_NAME
 *
«me
);

955 
X509_CRL_£t_œ°Upd©e
(
X509_CRL
 *
x
, c⁄° 
ASN1_TIME
 *
tm
);

956 
X509_CRL_£t_√xtUpd©e
(
X509_CRL
 *
x
, c⁄° 
ASN1_TIME
 *
tm
);

957 
X509_CRL_s‹t
(
X509_CRL
 *
¸l
);

959 
X509_REVOKED_£t_£rülNumbî
(
X509_REVOKED
 *
x
, 
ASN1_INTEGER
 *
£rül
);

960 
X509_REVOKED_£t_ªvoˇti⁄D©e
(
X509_REVOKED
 *
r
, 
ASN1_TIME
 *
tm
);

962 
X509_REQ_check_¥iv©e_key
(
X509_REQ
 *
x509
,
EVP_PKEY
 *
pkey
);

964 
X509_check_¥iv©e_key
(
X509
 *
x509
,
EVP_PKEY
 *
pkey
);

966 
X509_issuî_™d_£rül_cmp
(c⁄° 
X509
 *
a
, c⁄° X509 *
b
);

967 
X509_issuî_™d_£rül_hash
(
X509
 *
a
);

969 
X509_issuî_«me_cmp
(c⁄° 
X509
 *
a
, c⁄° X509 *
b
);

970 
X509_issuî_«me_hash
(
X509
 *
a
);

972 
X509_subje˘_«me_cmp
(c⁄° 
X509
 *
a
, c⁄° X509 *
b
);

973 
X509_subje˘_«me_hash
(
X509
 *
x
);

975 #i‚de‡
OPENSSL_NO_MD5


976 
X509_issuî_«me_hash_ﬁd
(
X509
 *
a
);

977 
X509_subje˘_«me_hash_ﬁd
(
X509
 *
x
);

980 
X509_cmp
(c⁄° 
X509
 *
a
, c⁄° X509 *
b
);

981 
X509_NAME_cmp
(c⁄° 
X509_NAME
 *
a
, c⁄° X509_NAME *
b
);

982 
X509_NAME_hash
(
X509_NAME
 *
x
);

983 
X509_NAME_hash_ﬁd
(
X509_NAME
 *
x
);

985 
X509_CRL_cmp
(c⁄° 
X509_CRL
 *
a
, c⁄° X509_CRL *
b
);

986 
X509_CRL_m©ch
(c⁄° 
X509_CRL
 *
a
, c⁄° X509_CRL *
b
);

987 #i‚de‡
OPENSSL_NO_FP_API


988 
X509_¥öt_ex_Â
(
FILE
 *
bp
,
X509
 *
x
, 
nmÊag
, 
cÊag
);

989 
X509_¥öt_Â
(
FILE
 *
bp
,
X509
 *
x
);

990 
X509_CRL_¥öt_Â
(
FILE
 *
bp
,
X509_CRL
 *
x
);

991 
X509_REQ_¥öt_Â
(
FILE
 *
bp
,
X509_REQ
 *
ªq
);

992 
X509_NAME_¥öt_ex_Â
(
FILE
 *
Â
, 
X509_NAME
 *
nm
, 
ödít
, 
Êags
);

995 #i‚de‡
OPENSSL_NO_BIO


996 
X509_NAME_¥öt
(
BIO
 *
bp
, 
X509_NAME
 *
«me
, 
oba£
);

997 
X509_NAME_¥öt_ex
(
BIO
 *
out
, 
X509_NAME
 *
nm
, 
ödít
, 
Êags
);

998 
X509_¥öt_ex
(
BIO
 *
bp
,
X509
 *
x
, 
nmÊag
, 
cÊag
);

999 
X509_¥öt
(
BIO
 *
bp
,
X509
 *
x
);

1000 
X509_oc•id_¥öt
(
BIO
 *
bp
,
X509
 *
x
);

1001 
X509_CERT_AUX_¥öt
(
BIO
 *
bp
,
X509_CERT_AUX
 *
x
, 
ödít
);

1002 
X509_CRL_¥öt
(
BIO
 *
bp
,
X509_CRL
 *
x
);

1003 
X509_REQ_¥öt_ex
(
BIO
 *
bp
, 
X509_REQ
 *
x
, 
nmÊag
, 
cÊag
);

1004 
X509_REQ_¥öt
(
BIO
 *
bp
,
X509_REQ
 *
ªq
);

1007 
X509_NAME_íåy_cou¡
(
X509_NAME
 *
«me
);

1008 
X509_NAME_gë_ãxt_by_NID
(
X509_NAME
 *
«me
, 
nid
,

1009 *
buf
,
Àn
);

1010 
X509_NAME_gë_ãxt_by_OBJ
(
X509_NAME
 *
«me
, 
ASN1_OBJECT
 *
obj
,

1011 *
buf
,
Àn
);

1015 
X509_NAME_gë_ödex_by_NID
(
X509_NAME
 *
«me
,
nid
,
œ°pos
);

1016 
X509_NAME_gë_ödex_by_OBJ
(
X509_NAME
 *
«me
,
ASN1_OBJECT
 *
obj
,

1017 
œ°pos
);

1018 
X509_NAME_ENTRY
 *
X509_NAME_gë_íåy
(
X509_NAME
 *
«me
, 
loc
);

1019 
X509_NAME_ENTRY
 *
X509_NAME_dñëe_íåy
(
X509_NAME
 *
«me
, 
loc
);

1020 
X509_NAME_add_íåy
(
X509_NAME
 *
«me
,
X509_NAME_ENTRY
 *
√
,

1021 
loc
, 
£t
);

1022 
X509_NAME_add_íåy_by_OBJ
(
X509_NAME
 *
«me
, 
ASN1_OBJECT
 *
obj
, 
ty≥
,

1023 *
byãs
, 
Àn
, 
loc
, 
£t
);

1024 
X509_NAME_add_íåy_by_NID
(
X509_NAME
 *
«me
, 
nid
, 
ty≥
,

1025 *
byãs
, 
Àn
, 
loc
, 
£t
);

1026 
X509_NAME_ENTRY
 *
X509_NAME_ENTRY_¸óã_by_txt
(X509_NAME_ENTRY **
√
,

1027 c⁄° *
fõld
, 
ty≥
, c⁄° *
byãs
, 
Àn
);

1028 
X509_NAME_ENTRY
 *
X509_NAME_ENTRY_¸óã_by_NID
(X509_NAME_ENTRY **
√
, 
nid
,

1029 
ty≥
,*
byãs
, 
Àn
);

1030 
X509_NAME_add_íåy_by_txt
(
X509_NAME
 *
«me
, c⁄° *
fõld
, 
ty≥
,

1031 c⁄° *
byãs
, 
Àn
, 
loc
, 
£t
);

1032 
X509_NAME_ENTRY
 *
X509_NAME_ENTRY_¸óã_by_OBJ
(X509_NAME_ENTRY **
√
,

1033 
ASN1_OBJECT
 *
obj
, 
ty≥
,c⁄° *
byãs
,

1034 
Àn
);

1035 
X509_NAME_ENTRY_£t_obje˘
(
X509_NAME_ENTRY
 *
√
,

1036 
ASN1_OBJECT
 *
obj
);

1037 
X509_NAME_ENTRY_£t_d©a
(
X509_NAME_ENTRY
 *
√
, 
ty≥
,

1038 c⁄° *
byãs
, 
Àn
);

1039 
ASN1_OBJECT
 * 
X509_NAME_ENTRY_gë_obje˘
(
X509_NAME_ENTRY
 *
√
);

1040 
ASN1_STRING
 * 
X509_NAME_ENTRY_gë_d©a
(
X509_NAME_ENTRY
 *
√
);

1042 
X509v3_gë_ext_cou¡
(c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
x
);

1043 
X509v3_gë_ext_by_NID
(c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
x
,

1044 
nid
, 
œ°pos
);

1045 
X509v3_gë_ext_by_OBJ
(c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
x
,

1046 
ASN1_OBJECT
 *
obj
,
œ°pos
);

1047 
X509v3_gë_ext_by_¸ôiˇl
(c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
x
,

1048 
¸ô
, 
œ°pos
);

1049 
X509_EXTENSION
 *
X509v3_gë_ext
(c⁄° 
STACK_OF
(X509_EXTENSIONË*
x
, 
loc
);

1050 
X509_EXTENSION
 *
X509v3_dñëe_ext
(
STACK_OF
(X509_EXTENSIONË*
x
, 
loc
);

1051 
STACK_OF
(
X509_EXTENSION
Ë*
X509v3_add_ext
(STACK_OF(X509_EXTENSIONË**
x
,

1052 
X509_EXTENSION
 *
ex
, 
loc
);

1054 
X509_gë_ext_cou¡
(
X509
 *
x
);

1055 
X509_gë_ext_by_NID
(
X509
 *
x
, 
nid
, 
œ°pos
);

1056 
X509_gë_ext_by_OBJ
(
X509
 *
x
,
ASN1_OBJECT
 *
obj
,
œ°pos
);

1057 
X509_gë_ext_by_¸ôiˇl
(
X509
 *
x
, 
¸ô
, 
œ°pos
);

1058 
X509_EXTENSION
 *
X509_gë_ext
(
X509
 *
x
, 
loc
);

1059 
X509_EXTENSION
 *
X509_dñëe_ext
(
X509
 *
x
, 
loc
);

1060 
X509_add_ext
(
X509
 *
x
, 
X509_EXTENSION
 *
ex
, 
loc
);

1061 * 
X509_gë_ext_d2i
(
X509
 *
x
, 
nid
, *
¸ô
, *
idx
);

1062 
X509_add1_ext_i2d
(
X509
 *
x
, 
nid
, *
vÆue
, 
¸ô
,

1063 
Êags
);

1065 
X509_CRL_gë_ext_cou¡
(
X509_CRL
 *
x
);

1066 
X509_CRL_gë_ext_by_NID
(
X509_CRL
 *
x
, 
nid
, 
œ°pos
);

1067 
X509_CRL_gë_ext_by_OBJ
(
X509_CRL
 *
x
,
ASN1_OBJECT
 *
obj
,
œ°pos
);

1068 
X509_CRL_gë_ext_by_¸ôiˇl
(
X509_CRL
 *
x
, 
¸ô
, 
œ°pos
);

1069 
X509_EXTENSION
 *
X509_CRL_gë_ext
(
X509_CRL
 *
x
, 
loc
);

1070 
X509_EXTENSION
 *
X509_CRL_dñëe_ext
(
X509_CRL
 *
x
, 
loc
);

1071 
X509_CRL_add_ext
(
X509_CRL
 *
x
, 
X509_EXTENSION
 *
ex
, 
loc
);

1072 * 
X509_CRL_gë_ext_d2i
(
X509_CRL
 *
x
, 
nid
, *
¸ô
, *
idx
);

1073 
X509_CRL_add1_ext_i2d
(
X509_CRL
 *
x
, 
nid
, *
vÆue
, 
¸ô
,

1074 
Êags
);

1076 
X509_REVOKED_gë_ext_cou¡
(
X509_REVOKED
 *
x
);

1077 
X509_REVOKED_gë_ext_by_NID
(
X509_REVOKED
 *
x
, 
nid
, 
œ°pos
);

1078 
X509_REVOKED_gë_ext_by_OBJ
(
X509_REVOKED
 *
x
,
ASN1_OBJECT
 *
obj
,
œ°pos
);

1079 
X509_REVOKED_gë_ext_by_¸ôiˇl
(
X509_REVOKED
 *
x
, 
¸ô
, 
œ°pos
);

1080 
X509_EXTENSION
 *
X509_REVOKED_gë_ext
(
X509_REVOKED
 *
x
, 
loc
);

1081 
X509_EXTENSION
 *
X509_REVOKED_dñëe_ext
(
X509_REVOKED
 *
x
, 
loc
);

1082 
X509_REVOKED_add_ext
(
X509_REVOKED
 *
x
, 
X509_EXTENSION
 *
ex
, 
loc
);

1083 * 
X509_REVOKED_gë_ext_d2i
(
X509_REVOKED
 *
x
, 
nid
, *
¸ô
, *
idx
);

1084 
X509_REVOKED_add1_ext_i2d
(
X509_REVOKED
 *
x
, 
nid
, *
vÆue
, 
¸ô
,

1085 
Êags
);

1087 
X509_EXTENSION
 *
X509_EXTENSION_¸óã_by_NID
(X509_EXTENSION **
ex
,

1088 
nid
, 
¸ô
, 
ASN1_OCTET_STRING
 *
d©a
);

1089 
X509_EXTENSION
 *
X509_EXTENSION_¸óã_by_OBJ
(X509_EXTENSION **
ex
,

1090 
ASN1_OBJECT
 *
obj
,
¸ô
,
ASN1_OCTET_STRING
 *
d©a
);

1091 
X509_EXTENSION_£t_obje˘
(
X509_EXTENSION
 *
ex
,
ASN1_OBJECT
 *
obj
);

1092 
X509_EXTENSION_£t_¸ôiˇl
(
X509_EXTENSION
 *
ex
, 
¸ô
);

1093 
X509_EXTENSION_£t_d©a
(
X509_EXTENSION
 *
ex
,

1094 
ASN1_OCTET_STRING
 *
d©a
);

1095 
ASN1_OBJECT
 * 
X509_EXTENSION_gë_obje˘
(
X509_EXTENSION
 *
ex
);

1096 
ASN1_OCTET_STRING
 *
X509_EXTENSION_gë_d©a
(
X509_EXTENSION
 *
√
);

1097 
X509_EXTENSION_gë_¸ôiˇl
(
X509_EXTENSION
 *
ex
);

1099 
X509©_gë_©å_cou¡
(c⁄° 
STACK_OF
(
X509_ATTRIBUTE
Ë*
x
);

1100 
X509©_gë_©å_by_NID
(c⁄° 
STACK_OF
(
X509_ATTRIBUTE
Ë*
x
, 
nid
,

1101 
œ°pos
);

1102 
X509©_gë_©å_by_OBJ
(c⁄° 
STACK_OF
(
X509_ATTRIBUTE
Ë*
sk
, 
ASN1_OBJECT
 *
obj
,

1103 
œ°pos
);

1104 
X509_ATTRIBUTE
 *
X509©_gë_©å
(c⁄° 
STACK_OF
(X509_ATTRIBUTEË*
x
, 
loc
);

1105 
X509_ATTRIBUTE
 *
X509©_dñëe_©å
(
STACK_OF
(X509_ATTRIBUTEË*
x
, 
loc
);

1106 
STACK_OF
(
X509_ATTRIBUTE
Ë*
X509©_add1_©å
(STACK_OF(X509_ATTRIBUTEË**
x
,

1107 
X509_ATTRIBUTE
 *
©å
);

1108 
STACK_OF
(
X509_ATTRIBUTE
Ë*
X509©_add1_©å_by_OBJ
(STACK_OF(X509_ATTRIBUTEË**
x
,

1109 c⁄° 
ASN1_OBJECT
 *
obj
, 
ty≥
,

1110 c⁄° *
byãs
, 
Àn
);

1111 
STACK_OF
(
X509_ATTRIBUTE
Ë*
X509©_add1_©å_by_NID
(STACK_OF(X509_ATTRIBUTEË**
x
,

1112 
nid
, 
ty≥
,

1113 c⁄° *
byãs
, 
Àn
);

1114 
STACK_OF
(
X509_ATTRIBUTE
Ë*
X509©_add1_©å_by_txt
(STACK_OF(X509_ATTRIBUTEË**
x
,

1115 c⁄° *
©å«me
, 
ty≥
,

1116 c⁄° *
byãs
, 
Àn
);

1117 *
X509©_gë0_d©a_by_OBJ
(
STACK_OF
(
X509_ATTRIBUTE
Ë*
x
,

1118 
ASN1_OBJECT
 *
obj
, 
œ°pos
, 
ty≥
);

1119 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_¸óã_by_NID
(X509_ATTRIBUTE **
©å
, 
nid
,

1120 
©πy≥
, c⁄° *
d©a
, 
Àn
);

1121 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_¸óã_by_OBJ
(X509_ATTRIBUTE **
©å
,

1122 c⁄° 
ASN1_OBJECT
 *
obj
, 
©πy≥
, c⁄° *
d©a
, 
Àn
);

1123 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_¸óã_by_txt
(X509_ATTRIBUTE **
©å
,

1124 c⁄° *
©∫ame
, 
ty≥
, c⁄° *
byãs
, 
Àn
);

1125 
X509_ATTRIBUTE_£t1_obje˘
(
X509_ATTRIBUTE
 *
©å
, c⁄° 
ASN1_OBJECT
 *
obj
);

1126 
X509_ATTRIBUTE_£t1_d©a
(
X509_ATTRIBUTE
 *
©å
, 
©åty≥
, c⁄° *
d©a
, 
Àn
);

1127 *
X509_ATTRIBUTE_gë0_d©a
(
X509_ATTRIBUTE
 *
©å
, 
idx
,

1128 
©πy≥
, *
d©a
);

1129 
X509_ATTRIBUTE_cou¡
(
X509_ATTRIBUTE
 *
©å
);

1130 
ASN1_OBJECT
 *
X509_ATTRIBUTE_gë0_obje˘
(
X509_ATTRIBUTE
 *
©å
);

1131 
ASN1_TYPE
 *
X509_ATTRIBUTE_gë0_ty≥
(
X509_ATTRIBUTE
 *
©å
, 
idx
);

1133 
EVP_PKEY_gë_©å_cou¡
(c⁄° 
EVP_PKEY
 *
key
);

1134 
EVP_PKEY_gë_©å_by_NID
(c⁄° 
EVP_PKEY
 *
key
, 
nid
,

1135 
œ°pos
);

1136 
EVP_PKEY_gë_©å_by_OBJ
(c⁄° 
EVP_PKEY
 *
key
, 
ASN1_OBJECT
 *
obj
,

1137 
œ°pos
);

1138 
X509_ATTRIBUTE
 *
EVP_PKEY_gë_©å
(c⁄° 
EVP_PKEY
 *
key
, 
loc
);

1139 
X509_ATTRIBUTE
 *
EVP_PKEY_dñëe_©å
(
EVP_PKEY
 *
key
, 
loc
);

1140 
EVP_PKEY_add1_©å
(
EVP_PKEY
 *
key
, 
X509_ATTRIBUTE
 *
©å
);

1141 
EVP_PKEY_add1_©å_by_OBJ
(
EVP_PKEY
 *
key
,

1142 c⁄° 
ASN1_OBJECT
 *
obj
, 
ty≥
,

1143 c⁄° *
byãs
, 
Àn
);

1144 
EVP_PKEY_add1_©å_by_NID
(
EVP_PKEY
 *
key
,

1145 
nid
, 
ty≥
,

1146 c⁄° *
byãs
, 
Àn
);

1147 
EVP_PKEY_add1_©å_by_txt
(
EVP_PKEY
 *
key
,

1148 c⁄° *
©å«me
, 
ty≥
,

1149 c⁄° *
byãs
, 
Àn
);

1151 
X509_vîify_˚π
(
X509_STORE_CTX
 *
˘x
);

1154 
X509
 *
X509_föd_by_issuî_™d_£rül
(
STACK_OF
(X509Ë*
sk
,
X509_NAME
 *
«me
,

1155 
ASN1_INTEGER
 *
£rül
);

1156 
X509
 *
X509_föd_by_subje˘
(
STACK_OF
(X509Ë*
sk
,
X509_NAME
 *
«me
);

1158 
DECLARE_ASN1_FUNCTIONS
(
PBEPARAM
)

1159 
DECLARE_ASN1_FUNCTIONS
(
PBE2PARAM
)

1160 
DECLARE_ASN1_FUNCTIONS
(
PBKDF2PARAM
)

1162 
PKCS5_pbe_£t0_Æg‹
(
X509_ALGOR
 *
Æg‹
, 
Æg
, 
ôî
,

1163 c⁄° *
ß…
, 
ß…Àn
);

1165 
X509_ALGOR
 *
PKCS5_pbe_£t
(
Æg
, 
ôî
,

1166 c⁄° *
ß…
, 
ß…Àn
);

1167 
X509_ALGOR
 *
PKCS5_pbe2_£t
(c⁄° 
EVP_CIPHER
 *
cùhî
, 
ôî
,

1168 *
ß…
, 
ß…Àn
);

1169 
X509_ALGOR
 *
PKCS5_pbe2_£t_iv
(c⁄° 
EVP_CIPHER
 *
cùhî
, 
ôî
,

1170 *
ß…
, 
ß…Àn
,

1171 *
aiv
, 
¥f_nid
);

1173 
X509_ALGOR
 *
PKCS5_pbkdf2_£t
(
ôî
, *
ß…
, 
ß…Àn
,

1174 
¥f_nid
, 
keyÀn
);

1178 
DECLARE_ASN1_FUNCTIONS
(
PKCS8_PRIV_KEY_INFO
)

1180 
EVP_PKEY
 *
EVP_PKCS82PKEY
(
PKCS8_PRIV_KEY_INFO
 *
p8
);

1181 
PKCS8_PRIV_KEY_INFO
 *
EVP_PKEY2PKCS8
(
EVP_PKEY
 *
pkey
);

1182 
PKCS8_PRIV_KEY_INFO
 *
EVP_PKEY2PKCS8_brokí
(
EVP_PKEY
 *
pkey
, 
brokí
);

1183 
PKCS8_PRIV_KEY_INFO
 *
PKCS8_£t_brokí
(PKCS8_PRIV_KEY_INFO *
p8
, 
brokí
);

1185 
PKCS8_pkey_£t0
(
PKCS8_PRIV_KEY_INFO
 *
¥iv
, 
ASN1_OBJECT
 *
aobj
,

1186 
vîsi⁄
, 
±y≥
, *
pvÆ
,

1187 *
≥nc
, 
≥n˛í
);

1188 
PKCS8_pkey_gë0
(
ASN1_OBJECT
 **
µkÆg
,

1189 c⁄° **
pk
, *
µkÀn
,

1190 
X509_ALGOR
 **
∑
,

1191 
PKCS8_PRIV_KEY_INFO
 *
p8
);

1193 
X509_PUBKEY_£t0_∑øm
(
X509_PUBKEY
 *
pub
, 
ASN1_OBJECT
 *
aobj
,

1194 
±y≥
, *
pvÆ
,

1195 *
≥nc
, 
≥n˛í
);

1196 
X509_PUBKEY_gë0_∑øm
(
ASN1_OBJECT
 **
µkÆg
,

1197 c⁄° **
pk
, *
µkÀn
,

1198 
X509_ALGOR
 **
∑
,

1199 
X509_PUBKEY
 *
pub
);

1201 
X509_check_åu°
(
X509
 *
x
, 
id
, 
Êags
);

1202 
X509_TRUST_gë_cou¡
();

1203 
X509_TRUST
 * 
X509_TRUST_gë0
(
idx
);

1204 
X509_TRUST_gë_by_id
(
id
);

1205 
X509_TRUST_add
(
id
, 
Êags
, (*
ck
)(
X509_TRUST
 *, 
X509
 *, ),

1206 *
«me
, 
¨g1
, *
¨g2
);

1207 
X509_TRUST_˛ónup
();

1208 
X509_TRUST_gë_Êags
(
X509_TRUST
 *
xp
);

1209 *
X509_TRUST_gë0_«me
(
X509_TRUST
 *
xp
);

1210 
X509_TRUST_gë_åu°
(
X509_TRUST
 *
xp
);

1216 
ERR_lﬂd_X509_°rögs
();

1221 
	#X509_F_ADD_CERT_DIR
 100

	)

1222 
	#X509_F_BY_FILE_CTRL
 101

	)

1223 
	#X509_F_CHECK_POLICY
 145

	)

1224 
	#X509_F_DIR_CTRL
 102

	)

1225 
	#X509_F_GET_CERT_BY_SUBJECT
 103

	)

1226 
	#X509_F_NETSCAPE_SPKI_B64_DECODE
 129

	)

1227 
	#X509_F_NETSCAPE_SPKI_B64_ENCODE
 130

	)

1228 
	#X509_F_X509AT_ADD1_ATTR
 135

	)

1229 
	#X509_F_X509V3_ADD_EXT
 104

	)

1230 
	#X509_F_X509_ATTRIBUTE_CREATE_BY_NID
 136

	)

1231 
	#X509_F_X509_ATTRIBUTE_CREATE_BY_OBJ
 137

	)

1232 
	#X509_F_X509_ATTRIBUTE_CREATE_BY_TXT
 140

	)

1233 
	#X509_F_X509_ATTRIBUTE_GET0_DATA
 139

	)

1234 
	#X509_F_X509_ATTRIBUTE_SET1_DATA
 138

	)

1235 
	#X509_F_X509_CHECK_PRIVATE_KEY
 128

	)

1236 
	#X509_F_X509_CRL_PRINT_FP
 147

	)

1237 
	#X509_F_X509_EXTENSION_CREATE_BY_NID
 108

	)

1238 
	#X509_F_X509_EXTENSION_CREATE_BY_OBJ
 109

	)

1239 
	#X509_F_X509_GET_PUBKEY_PARAMETERS
 110

	)

1240 
	#X509_F_X509_LOAD_CERT_CRL_FILE
 132

	)

1241 
	#X509_F_X509_LOAD_CERT_FILE
 111

	)

1242 
	#X509_F_X509_LOAD_CRL_FILE
 112

	)

1243 
	#X509_F_X509_NAME_ADD_ENTRY
 113

	)

1244 
	#X509_F_X509_NAME_ENTRY_CREATE_BY_NID
 114

	)

1245 
	#X509_F_X509_NAME_ENTRY_CREATE_BY_TXT
 131

	)

1246 
	#X509_F_X509_NAME_ENTRY_SET_OBJECT
 115

	)

1247 
	#X509_F_X509_NAME_ONELINE
 116

	)

1248 
	#X509_F_X509_NAME_PRINT
 117

	)

1249 
	#X509_F_X509_PRINT_EX_FP
 118

	)

1250 
	#X509_F_X509_PUBKEY_GET
 119

	)

1251 
	#X509_F_X509_PUBKEY_SET
 120

	)

1252 
	#X509_F_X509_REQ_CHECK_PRIVATE_KEY
 144

	)

1253 
	#X509_F_X509_REQ_PRINT_EX
 121

	)

1254 
	#X509_F_X509_REQ_PRINT_FP
 122

	)

1255 
	#X509_F_X509_REQ_TO_X509
 123

	)

1256 
	#X509_F_X509_STORE_ADD_CERT
 124

	)

1257 
	#X509_F_X509_STORE_ADD_CRL
 125

	)

1258 
	#X509_F_X509_STORE_CTX_GET1_ISSUER
 146

	)

1259 
	#X509_F_X509_STORE_CTX_INIT
 143

	)

1260 
	#X509_F_X509_STORE_CTX_NEW
 142

	)

1261 
	#X509_F_X509_STORE_CTX_PURPOSE_INHERIT
 134

	)

1262 
	#X509_F_X509_TO_X509_REQ
 126

	)

1263 
	#X509_F_X509_TRUST_ADD
 133

	)

1264 
	#X509_F_X509_TRUST_SET
 141

	)

1265 
	#X509_F_X509_VERIFY_CERT
 127

	)

1268 
	#X509_R_BAD_X509_FILETYPE
 100

	)

1269 
	#X509_R_BASE64_DECODE_ERROR
 118

	)

1270 
	#X509_R_CANT_CHECK_DH_KEY
 114

	)

1271 
	#X509_R_CERT_ALREADY_IN_HASH_TABLE
 101

	)

1272 
	#X509_R_ERR_ASN1_LIB
 102

	)

1273 
	#X509_R_INVALID_DIRECTORY
 113

	)

1274 
	#X509_R_INVALID_FIELD_NAME
 119

	)

1275 
	#X509_R_INVALID_TRUST
 123

	)

1276 
	#X509_R_KEY_TYPE_MISMATCH
 115

	)

1277 
	#X509_R_KEY_VALUES_MISMATCH
 116

	)

1278 
	#X509_R_LOADING_CERT_DIR
 103

	)

1279 
	#X509_R_LOADING_DEFAULTS
 104

	)

1280 
	#X509_R_METHOD_NOT_SUPPORTED
 124

	)

1281 
	#X509_R_NO_CERT_SET_FOR_US_TO_VERIFY
 105

	)

1282 
	#X509_R_PUBLIC_KEY_DECODE_ERROR
 125

	)

1283 
	#X509_R_PUBLIC_KEY_ENCODE_ERROR
 126

	)

1284 
	#X509_R_SHOULD_RETRY
 106

	)

1285 
	#X509_R_UNABLE_TO_FIND_PARAMETERS_IN_CHAIN
 107

	)

1286 
	#X509_R_UNABLE_TO_GET_CERTS_PUBLIC_KEY
 108

	)

1287 
	#X509_R_UNKNOWN_KEY_TYPE
 117

	)

1288 
	#X509_R_UNKNOWN_NID
 109

	)

1289 
	#X509_R_UNKNOWN_PURPOSE_ID
 121

	)

1290 
	#X509_R_UNKNOWN_TRUST_ID
 120

	)

1291 
	#X509_R_UNSUPPORTED_ALGORITHM
 111

	)

1292 
	#X509_R_WRONG_LOOKUP_TYPE
 112

	)

1293 
	#X509_R_WRONG_TYPE
 122

	)

1295 #ifde‡ 
__˝lu•lus


	@/usr/include/rpc/netdb.h

36 #i‚de‡
_RPC_NETDB_H


37 
	#_RPC_NETDB_H
 1

	)

39 
	~<„©uªs.h
>

41 
	#__√ed_size_t


	)

42 
	~<°ddef.h
>

44 
__BEGIN_DECLS


46 
	sΩ˚¡


48 *
	mr_«me
;

49 **
	mr_Æü£s
;

50 
	mr_numbî
;

53 
	$£åp˚¡
 (
__°ay›í
Ë
__THROW
;

54 
	$ídΩ˚¡
 (Ë
__THROW
;

55 
Ω˚¡
 *
	$gëΩcby«me
 (c⁄° *
__«me
Ë
__THROW
;

56 
Ω˚¡
 *
	$gëΩcbynumbî
 (
__numbî
Ë
__THROW
;

57 
Ω˚¡
 *
	$gëΩ˚¡
 (Ë
__THROW
;

59 #ifde‡
__USE_MISC


60 
	$gëΩcby«me_r
 (c⁄° *
__«me
, 
Ω˚¡
 *
__ªsu…_buf
,

61 *
__buf„r
, 
size_t
 
__buÊí
,

62 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

64 
	$gëΩcbynumbî_r
 (
__numbî
, 
Ω˚¡
 *
__ªsu…_buf
,

65 *
__buf„r
, 
size_t
 
__buÊí
,

66 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

68 
	$gëΩ˚¡_r
 (
Ω˚¡
 *
__ªsu…_buf
, *
__buf„r
,

69 
size_t
 
__buÊí
, 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

72 
__END_DECLS


	@/usr/include/sched.h

19 #i‚def 
_SCHED_H


20 
	#_SCHED_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

27 
	#__√ed_size_t


	)

28 
	~<°ddef.h
>

30 
	#__√ed_time_t


	)

31 
	#__√ed_time•ec


	)

32 
	~<time.h
>

34 #i‚de‡
__pid_t_deföed


35 
__pid_t
 
	tpid_t
;

36 
	#__pid_t_deföed


	)

41 
	~<bôs/sched.h
>

43 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

46 
__BEGIN_DECLS


49 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, c⁄° 
sched_∑øm
 *
__∑øm
)

50 
__THROW
;

53 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

56 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

57 c⁄° 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

60 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

63 
	$sched_yõld
 (Ë
__THROW
;

66 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

69 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

72 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

75 #ifde‡
__USE_GNU


77 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

78 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

79 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

80 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

81 
˝u£ç
)

	)

82 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

83 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

86 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

87 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

88 
˝u£ç
)

	)

89 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

90 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

92 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

93 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

94 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

95 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

97 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

98 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

99 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

101 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

103 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

104 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

105 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

106 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

107 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

108 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

110 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

111 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

112 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

116 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

117 c⁄° 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

120 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

121 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

124 
__END_DECLS


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/wch¨.h
>

27 
	~<bôs/w‹dsize.h
>

34 #i‚de‡
__öt8_t_deföed


35 
	#__öt8_t_deföed


	)

36 sig√d 
	töt8_t
;

37 
	töt16_t
;

38 
	töt32_t
;

39 #i‡
__WORDSIZE
 == 64

40 
	töt64_t
;

42 
__exãnsi⁄__


43 
	töt64_t
;

48 
	tuöt8_t
;

49 
	tuöt16_t
;

50 #i‚de‡
__uöt32_t_deföed


51 
	tuöt32_t
;

52 
	#__uöt32_t_deföed


	)

54 #i‡
__WORDSIZE
 == 64

55 
	tuöt64_t
;

57 
__exãnsi⁄__


58 
	tuöt64_t
;

65 sig√d 
	töt_Àa°8_t
;

66 
	töt_Àa°16_t
;

67 
	töt_Àa°32_t
;

68 #i‡
__WORDSIZE
 == 64

69 
	töt_Àa°64_t
;

71 
__exãnsi⁄__


72 
	töt_Àa°64_t
;

76 
	tuöt_Àa°8_t
;

77 
	tuöt_Àa°16_t
;

78 
	tuöt_Àa°32_t
;

79 #i‡
__WORDSIZE
 == 64

80 
	tuöt_Àa°64_t
;

82 
__exãnsi⁄__


83 
	tuöt_Àa°64_t
;

90 sig√d 
	töt_Á°8_t
;

91 #i‡
__WORDSIZE
 == 64

92 
	töt_Á°16_t
;

93 
	töt_Á°32_t
;

94 
	töt_Á°64_t
;

96 
	töt_Á°16_t
;

97 
	töt_Á°32_t
;

98 
__exãnsi⁄__


99 
	töt_Á°64_t
;

103 
	tuöt_Á°8_t
;

104 #i‡
__WORDSIZE
 == 64

105 
	tuöt_Á°16_t
;

106 
	tuöt_Á°32_t
;

107 
	tuöt_Á°64_t
;

109 
	tuöt_Á°16_t
;

110 
	tuöt_Á°32_t
;

111 
__exãnsi⁄__


112 
	tuöt_Á°64_t
;

117 #i‡
__WORDSIZE
 == 64

118 #i‚de‡
__öçå_t_deföed


119 
	töçå_t
;

120 
	#__öçå_t_deföed


	)

122 
	tuöçå_t
;

124 #i‚de‡
__öçå_t_deföed


125 
	töçå_t
;

126 
	#__öçå_t_deföed


	)

128 
	tuöçå_t
;

133 #i‡
__WORDSIZE
 == 64

134 
	tötmax_t
;

135 
	tuötmax_t
;

137 
__exãnsi⁄__


138 
	tötmax_t
;

139 
__exãnsi⁄__


140 
	tuötmax_t
;

144 #i‡
__WORDSIZE
 == 64

145 
	#__INT64_C
(
c
Ë¯## 
L


	)

146 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

148 
	#__INT64_C
(
c
Ë¯## 
LL


	)

149 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

155 
	#INT8_MIN
 (-128)

	)

156 
	#INT16_MIN
 (-32767-1)

	)

157 
	#INT32_MIN
 (-2147483647-1)

	)

158 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

160 
	#INT8_MAX
 (127)

	)

161 
	#INT16_MAX
 (32767)

	)

162 
	#INT32_MAX
 (2147483647)

	)

163 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

166 
	#UINT8_MAX
 (255)

	)

167 
	#UINT16_MAX
 (65535)

	)

168 
	#UINT32_MAX
 (4294967295U)

	)

169 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

173 
	#INT_LEAST8_MIN
 (-128)

	)

174 
	#INT_LEAST16_MIN
 (-32767-1)

	)

175 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

176 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

178 
	#INT_LEAST8_MAX
 (127)

	)

179 
	#INT_LEAST16_MAX
 (32767)

	)

180 
	#INT_LEAST32_MAX
 (2147483647)

	)

181 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

184 
	#UINT_LEAST8_MAX
 (255)

	)

185 
	#UINT_LEAST16_MAX
 (65535)

	)

186 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

187 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

191 
	#INT_FAST8_MIN
 (-128)

	)

192 #i‡
__WORDSIZE
 == 64

193 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

194 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

196 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

197 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

199 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

201 
	#INT_FAST8_MAX
 (127)

	)

202 #i‡
__WORDSIZE
 == 64

203 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

204 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

206 
	#INT_FAST16_MAX
 (2147483647)

	)

207 
	#INT_FAST32_MAX
 (2147483647)

	)

209 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINT_FAST8_MAX
 (255)

	)

213 #i‡
__WORDSIZE
 == 64

214 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

215 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

217 
	#UINT_FAST16_MAX
 (4294967295U)

	)

218 
	#UINT_FAST32_MAX
 (4294967295U)

	)

220 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

224 #i‡
__WORDSIZE
 == 64

225 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

226 
	#INTPTR_MAX
 (9223372036854775807L)

	)

227 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

229 
	#INTPTR_MIN
 (-2147483647-1)

	)

230 
	#INTPTR_MAX
 (2147483647)

	)

231 
	#UINTPTR_MAX
 (4294967295U)

	)

236 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

238 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

241 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

247 #i‡
__WORDSIZE
 == 64

248 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

249 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

251 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

252 
	#PTRDIFF_MAX
 (2147483647)

	)

256 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

257 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

260 #i‡
__WORDSIZE
 == 64

261 
	#SIZE_MAX
 (18446744073709551615UL)

	)

263 
	#SIZE_MAX
 (4294967295U)

	)

267 #i‚de‡
WCHAR_MIN


269 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

270 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

274 
	#WINT_MIN
 (0u)

	)

275 
	#WINT_MAX
 (4294967295u)

	)

278 
	#INT8_C
(
c
Ë
	)
c

279 
	#INT16_C
(
c
Ë
	)
c

280 
	#INT32_C
(
c
Ë
	)
c

281 #i‡
__WORDSIZE
 == 64

282 
	#INT64_C
(
c
Ë¯## 
L


	)

284 
	#INT64_C
(
c
Ë¯## 
LL


	)

288 
	#UINT8_C
(
c
Ë
	)
c

289 
	#UINT16_C
(
c
Ë
	)
c

290 
	#UINT32_C
(
c
Ë¯## 
U


	)

291 #i‡
__WORDSIZE
 == 64

292 
	#UINT64_C
(
c
Ë¯## 
UL


	)

294 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

298 #i‡
__WORDSIZE
 == 64

299 
	#INTMAX_C
(
c
Ë¯## 
L


	)

300 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

302 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

303 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/sys/poll.h

19 #i‚def 
_SYS_POLL_H


20 
	#_SYS_POLL_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/pﬁl.h
>

26 #ifde‡
__USE_GNU


28 
	~<bôs/sig£t.h
>

30 
	#__√ed_time•ec


	)

31 
	~<time.h
>

36 
	tnfds_t
;

39 
	spﬁlfd


41 
	mfd
;

42 
	mevíts
;

43 
	mªvíts
;

47 
__BEGIN_DECLS


57 
pﬁl
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
, 
__timeout
);

59 #ifde‡
__USE_GNU


66 
µﬁl
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

67 c⁄° 
time•ec
 *
__timeout
,

68 c⁄° 
__sig£t_t
 *
__ss
);

71 
	g__END_DECLS


75 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


76 
	~<bôs/pﬁl2.h
>

	@/usr/include/sys/syslog.h

32 #i‚de‡
_SYS_SYSLOG_H


33 
	#_SYS_SYSLOG_H
 1

	)

35 
	~<„©uªs.h
>

36 
	#__√ed___va_li°


	)

37 
	~<°d¨g.h
>

40 
	~<bôs/sy¶og-∑th.h
>

51 
	#LOG_EMERG
 0

	)

52 
	#LOG_ALERT
 1

	)

53 
	#LOG_CRIT
 2

	)

54 
	#LOG_ERR
 3

	)

55 
	#LOG_WARNING
 4

	)

56 
	#LOG_NOTICE
 5

	)

57 
	#LOG_INFO
 6

	)

58 
	#LOG_DEBUG
 7

	)

60 
	#LOG_PRIMASK
 0x07

	)

62 
	#LOG_PRI
(
p
Ë(’Ë& 
LOG_PRIMASK
)

	)

63 
	#LOG_MAKEPRI
(
Ác
, 
¥i
Ë((ÁcË| (¥i))

	)

65 #ifde‡
SYSLOG_NAMES


66 
	#INTERNAL_NOPRI
 0x10

	)

68 
	#INTERNAL_MARK
 
	`LOG_MAKEPRI
(
LOG_NFACILITIES
 << 3, 0)

	)

69 
	s_code
 {

70 *
	mc_«me
;

71 
	mc_vÆ
;

72 } 
	tCODE
;

74 
CODE
 
	g¥i‹ôy«mes
[] =

76 { "Æît", 
LOG_ALERT
 },

77 { "¸ô", 
LOG_CRIT
 },

78 { "debug", 
LOG_DEBUG
 },

79 { "emîg", 
LOG_EMERG
 },

80 { "îr", 
LOG_ERR
 },

81 { "îr‹", 
LOG_ERR
 },

82 { "öfo", 
LOG_INFO
 },

83 { "n⁄e", 
INTERNAL_NOPRI
 },

84 { "nŸi˚", 
LOG_NOTICE
 },

85 { "∑nic", 
LOG_EMERG
 },

86 { "w¨n", 
LOG_WARNING
 },

87 { "w¨nög", 
LOG_WARNING
 },

88 { 
NULL
, -1 }

93 
	#LOG_KERN
 (0<<3Ë

	)

94 
	#LOG_USER
 (1<<3Ë

	)

95 
	#LOG_MAIL
 (2<<3Ë

	)

96 
	#LOG_DAEMON
 (3<<3Ë

	)

97 
	#LOG_AUTH
 (4<<3Ë

	)

98 
	#LOG_SYSLOG
 (5<<3Ë

	)

99 
	#LOG_LPR
 (6<<3Ë

	)

100 
	#LOG_NEWS
 (7<<3Ë

	)

101 
	#LOG_UUCP
 (8<<3Ë

	)

102 
	#LOG_CRON
 (9<<3Ë

	)

103 
	#LOG_AUTHPRIV
 (10<<3Ë

	)

104 
	#LOG_FTP
 (11<<3Ë

	)

107 
	#LOG_LOCAL0
 (16<<3Ë

	)

108 
	#LOG_LOCAL1
 (17<<3Ë

	)

109 
	#LOG_LOCAL2
 (18<<3Ë

	)

110 
	#LOG_LOCAL3
 (19<<3Ë

	)

111 
	#LOG_LOCAL4
 (20<<3Ë

	)

112 
	#LOG_LOCAL5
 (21<<3Ë

	)

113 
	#LOG_LOCAL6
 (22<<3Ë

	)

114 
	#LOG_LOCAL7
 (23<<3Ë

	)

116 
	#LOG_NFACILITIES
 24

	)

117 
	#LOG_FACMASK
 0x03f8

	)

119 
	#LOG_FAC
(
p
Ë((’Ë& 
LOG_FACMASK
Ë>> 3)

	)

121 #ifde‡
SYSLOG_NAMES


122 
CODE
 
	gÁcûôy«mes
[] =

124 { "auth", 
LOG_AUTH
 },

125 { "auth¥iv", 
LOG_AUTHPRIV
 },

126 { "¸⁄", 
LOG_CRON
 },

127 { "d´m⁄", 
LOG_DAEMON
 },

128 { "·p", 
LOG_FTP
 },

129 { "kîn", 
LOG_KERN
 },

130 { "Õr", 
LOG_LPR
 },

131 { "maû", 
LOG_MAIL
 },

132 { "m¨k", 
INTERNAL_MARK
 },

133 { "√ws", 
LOG_NEWS
 },

134 { "£curôy", 
LOG_AUTH
 },

135 { "sy¶og", 
LOG_SYSLOG
 },

136 { "u£r", 
LOG_USER
 },

137 { "uu˝", 
LOG_UUCP
 },

138 { "loˇl0", 
LOG_LOCAL0
 },

139 { "loˇl1", 
LOG_LOCAL1
 },

140 { "loˇl2", 
LOG_LOCAL2
 },

141 { "loˇl3", 
LOG_LOCAL3
 },

142 { "loˇl4", 
LOG_LOCAL4
 },

143 { "loˇl5", 
LOG_LOCAL5
 },

144 { "loˇl6", 
LOG_LOCAL6
 },

145 { "loˇl7", 
LOG_LOCAL7
 },

146 { 
NULL
, -1 }

153 
	#LOG_MASK
(
¥i
Ë(1 << (¥i)Ë

	)

154 
	#LOG_UPTO
(
¥i
Ë((1 << (’ri)+1)Ë- 1Ë

	)

162 
	#LOG_PID
 0x01

	)

163 
	#LOG_CONS
 0x02

	)

164 
	#LOG_ODELAY
 0x04

	)

165 
	#LOG_NDELAY
 0x08

	)

166 
	#LOG_NOWAIT
 0x10

	)

167 
	#LOG_PERROR
 0x20

	)

169 
__BEGIN_DECLS


175 
˛o£log
 ();

181 
›ílog
 (c⁄° *
__idít
, 
__›ti⁄
, 
__Ácûôy
);

184 
	$£éogmask
 (
__mask
Ë
__THROW
;

190 
	$sy¶og
 (
__¥i
, c⁄° *
__fmt
, ...)

191 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

193 #ifde‡
__USE_BSD


200 
	$vsy¶og
 (
__¥i
, c⁄° *
__fmt
, 
__gnuc_va_li°
 
__≠
)

201 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

206 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


207 
	~<bôs/sy¶og.h
>

209 #ifde‡
__LDBL_COMPAT


210 
	~<bôs/sy¶og-ldbl.h
>

213 
__END_DECLS


	@/usr/include/sys/sysmacros.h

19 #i‚de‡
_SYS_SYSMACROS_H


20 
	#_SYS_SYSMACROS_H
 1

	)

22 
	~<„©uªs.h
>

24 
__BEGIN_DECLS


26 
__exãnsi⁄__


27 
	$gnu_dev_maj‹
 (
__dev
)

28 
__THROW
 
__©åibuã_c⁄°__
;

29 
__exãnsi⁄__


30 
	$gnu_dev_mö‹
 (
__dev
)

31 
__THROW
 
__©åibuã_c⁄°__
;

32 
__exãnsi⁄__


33 
	$gnu_dev_makedev
 (
__maj‹
,

34 
__mö‹
)

35 
__THROW
 
__©åibuã_c⁄°__
;

37 #ifde‡
__USE_EXTERN_INLINES


38 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

39 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

41  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

42 
	}
}

44 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

45 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

47  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

48 
	}
}

50 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

51 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

53  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

54 | (((Ë(
__mö‹
 & ~0xff)) << 12)

55 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

56 
	}
}

58 
	g__END_DECLS


61 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

62 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

63 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/sys/ttydefaults.h

40 #i‚de‡
_SYS_TTYDEFAULTS_H_


41 
	#_SYS_TTYDEFAULTS_H_


	)

46 
	#TTYDEF_IFLAG
 (
BRKINT
 | 
ISTRIP
 | 
ICRNL
 | 
IMAXBEL
 | 
IXON
 | 
IXANY
)

	)

47 
	#TTYDEF_OFLAG
 (
OPOST
 | 
ONLCR
 | 
XTABS
)

	)

48 
	#TTYDEF_LFLAG
 (
ECHO
 | 
ICANON
 | 
ISIG
 | 
IEXTEN
 | 
ECHOE
|
ECHOKE
|
ECHOCTL
)

	)

49 
	#TTYDEF_CFLAG
 (
CREAD
 | 
CS7
 | 
PARENB
 | 
HUPCL
)

	)

50 
	#TTYDEF_SPEED
 (
B9600
)

	)

55 
	#CTRL
(
x
Ë(x&037)

	)

56 
	#CEOF
 
	`CTRL
('d')

	)

57 #ifde‡
_POSIX_VDISABLE


58 
	#CEOL
 
_POSIX_VDISABLE


	)

60 
	#CEOL
 '\0'

	)

62 
	#CERASE
 0177

	)

63 
	#CINTR
 
	`CTRL
('c')

	)

64 #ifde‡
_POSIX_VDISABLE


65 
	#CSTATUS
 
_POSIX_VDISABLE


	)

67 
	#CSTATUS
 '\0'

	)

69 
	#CKILL
 
	`CTRL
('u')

	)

70 
	#CMIN
 1

	)

71 
	#CQUIT
 034

	)

72 
	#CSUSP
 
	`CTRL
('z')

	)

73 
	#CTIME
 0

	)

74 
	#CDSUSP
 
	`CTRL
('y')

	)

75 
	#CSTART
 
	`CTRL
('q')

	)

76 
	#CSTOP
 
	`CTRL
('s')

	)

77 
	#CLNEXT
 
	`CTRL
('v')

	)

78 
	#CDISCARD
 
	`CTRL
('o')

	)

79 
	#CWERASE
 
	`CTRL
('w')

	)

80 
	#CREPRINT
 
	`CTRL
('r')

	)

81 
	#CEOT
 
CEOF


	)

83 
	#CBRK
 
CEOL


	)

84 
	#CRPRNT
 
CREPRINT


	)

85 
	#CFLUSH
 
CDISCARD


	)

93 #ifde‡
TTYDEFCHARS


94 
cc_t
 
	gâydefch¨s
[
NCCS
] = {

95 
CEOF
, 
CEOL
, CEOL, 
CERASE
, 
CWERASE
, 
CKILL
, 
CREPRINT
,

96 
_POSIX_VDISABLE
, 
CINTR
, 
CQUIT
, 
CSUSP
, 
CDSUSP
, 
CSTART
, 
CSTOP
, 
CLNEXT
,

97 
CDISCARD
, 
CMIN
, 
CTIME
, 
CSTATUS
, 
_POSIX_VDISABLE


99 #unde‡
TTYDEFCHARS


	@/usr/include/sys/ucontext.h

18 #i‚de‡
_SYS_UCONTEXT_H


19 
	#_SYS_UCONTEXT_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sig«l.h
>

26 
	~<bôs/sigc⁄ãxt.h
>

28 #ifde‡
__x86_64__


31 
__exãnsi⁄__
 
	tgªg_t
;

34 
	#NGREG
 23

	)

37 
gªg_t
 
	tgªg£t_t
[
NGREG
];

39 #ifde‡
__USE_GNU


43 
	mREG_R8
 = 0,

44 
	#REG_R8
 
REG_R8


	)

45 
	mREG_R9
,

46 
	#REG_R9
 
REG_R9


	)

47 
	mREG_R10
,

48 
	#REG_R10
 
REG_R10


	)

49 
	mREG_R11
,

50 
	#REG_R11
 
REG_R11


	)

51 
	mREG_R12
,

52 
	#REG_R12
 
REG_R12


	)

53 
	mREG_R13
,

54 
	#REG_R13
 
REG_R13


	)

55 
	mREG_R14
,

56 
	#REG_R14
 
REG_R14


	)

57 
	mREG_R15
,

58 
	#REG_R15
 
REG_R15


	)

59 
	mREG_RDI
,

60 
	#REG_RDI
 
REG_RDI


	)

61 
	mREG_RSI
,

62 
	#REG_RSI
 
REG_RSI


	)

63 
	mREG_RBP
,

64 
	#REG_RBP
 
REG_RBP


	)

65 
	mREG_RBX
,

66 
	#REG_RBX
 
REG_RBX


	)

67 
	mREG_RDX
,

68 
	#REG_RDX
 
REG_RDX


	)

69 
	mREG_RAX
,

70 
	#REG_RAX
 
REG_RAX


	)

71 
	mREG_RCX
,

72 
	#REG_RCX
 
REG_RCX


	)

73 
	mREG_RSP
,

74 
	#REG_RSP
 
REG_RSP


	)

75 
	mREG_RIP
,

76 
	#REG_RIP
 
REG_RIP


	)

77 
	mREG_EFL
,

78 
	#REG_EFL
 
REG_EFL


	)

79 
	mREG_CSGSFS
,

80 
	#REG_CSGSFS
 
REG_CSGSFS


	)

81 
	mREG_ERR
,

82 
	#REG_ERR
 
REG_ERR


	)

83 
	mREG_TRAPNO
,

84 
	#REG_TRAPNO
 
REG_TRAPNO


	)

85 
	mREG_OLDMASK
,

86 
	#REG_OLDMASK
 
REG_OLDMASK


	)

87 
	mREG_CR2


88 
	#REG_CR2
 
REG_CR2


	)

92 
	s_libc_Âxªg


94 
	msignifiˇnd
[4];

95 
	mexp⁄ít
;

96 
	m∑ddög
[3];

99 
	s_libc_xmmªg


101 
__uöt32_t
 
	mñemít
[4];

104 
	s_libc_Â°©e


107 
__uöt16_t
 
	mcwd
;

108 
__uöt16_t
 
	mswd
;

109 
__uöt16_t
 
	m·w
;

110 
__uöt16_t
 
	mf›
;

111 
__uöt64_t
 
	mrù
;

112 
__uöt64_t
 
	mrdp
;

113 
__uöt32_t
 
	mmxc§
;

114 
__uöt32_t
 
	mmx¸_mask
;

115 
_libc_Âxªg
 
	m_°
[8];

116 
_libc_xmmªg
 
	m_xmm
[16];

117 
__uöt32_t
 
	m∑ddög
[24];

121 
_libc_Â°©e
 *
	tÂªg£t_t
;

126 
gªg£t_t
 
	mgªgs
;

128 
Âªg£t_t
 
	mÂªgs
;

129 
__exãnsi⁄__
 
	m__ª£rved1
 [8];

130 } 
	tmc⁄ãxt_t
;

133 
	suc⁄ãxt


135 
	muc_Êags
;

136 
uc⁄ãxt
 *
	muc_lök
;

137 
°ack_t
 
	muc_°ack
;

138 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

139 
__sig£t_t
 
	muc_sigmask
;

140 
_libc_Â°©e
 
	m__Âªgs_mem
;

141 } 
	tuc⁄ãxt_t
;

146 
	tgªg_t
;

149 
	#NGREG
 19

	)

152 
gªg_t
 
	tgªg£t_t
[
NGREG
];

154 #ifde‡
__USE_GNU


158 
	mREG_GS
 = 0,

159 
	#REG_GS
 
REG_GS


	)

160 
	mREG_FS
,

161 
	#REG_FS
 
REG_FS


	)

162 
	mREG_ES
,

163 
	#REG_ES
 
REG_ES


	)

164 
	mREG_DS
,

165 
	#REG_DS
 
REG_DS


	)

166 
	mREG_EDI
,

167 
	#REG_EDI
 
REG_EDI


	)

168 
	mREG_ESI
,

169 
	#REG_ESI
 
REG_ESI


	)

170 
	mREG_EBP
,

171 
	#REG_EBP
 
REG_EBP


	)

172 
	mREG_ESP
,

173 
	#REG_ESP
 
REG_ESP


	)

174 
	mREG_EBX
,

175 
	#REG_EBX
 
REG_EBX


	)

176 
	mREG_EDX
,

177 
	#REG_EDX
 
REG_EDX


	)

178 
	mREG_ECX
,

179 
	#REG_ECX
 
REG_ECX


	)

180 
	mREG_EAX
,

181 
	#REG_EAX
 
REG_EAX


	)

182 
	mREG_TRAPNO
,

183 
	#REG_TRAPNO
 
REG_TRAPNO


	)

184 
	mREG_ERR
,

185 
	#REG_ERR
 
REG_ERR


	)

186 
	mREG_EIP
,

187 
	#REG_EIP
 
REG_EIP


	)

188 
	mREG_CS
,

189 
	#REG_CS
 
REG_CS


	)

190 
	mREG_EFL
,

191 
	#REG_EFL
 
REG_EFL


	)

192 
	mREG_UESP
,

193 
	#REG_UESP
 
REG_UESP


	)

194 
	mREG_SS


195 
	#REG_SS
 
REG_SS


	)

200 
	s_libc_Âªg


202 
	msignifiˇnd
[4];

203 
	mexp⁄ít
;

206 
	s_libc_Â°©e


208 
	mcw
;

209 
	msw
;

210 
	mèg
;

211 
	mùoff
;

212 
	mcs£l
;

213 
	md©aoff
;

214 
	md©a£l
;

215 
_libc_Âªg
 
	m_°
[8];

216 
	m°©us
;

220 
_libc_Â°©e
 *
	tÂªg£t_t
;

225 
gªg£t_t
 
	mgªgs
;

228 
Âªg£t_t
 
	mÂªgs
;

229 
	mﬁdmask
;

230 
	m¸2
;

231 } 
	tmc⁄ãxt_t
;

234 
	suc⁄ãxt


236 
	muc_Êags
;

237 
uc⁄ãxt
 *
	muc_lök
;

238 
°ack_t
 
	muc_°ack
;

239 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

240 
__sig£t_t
 
	muc_sigmask
;

241 
_libc_Â°©e
 
	m__Âªgs_mem
;

242 } 
	tuc⁄ãxt_t
;

	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

23 
__off_t
 
	m__pos
;

24 
__mb°©e_t
 
	m__°©e
;

25 } 
	t_G_Âos_t
;

28 
__off64_t
 
	m__pos
;

29 
__mb°©e_t
 
	m__°©e
;

30 } 
	t_G_Âos64_t
;

31 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


32 
	~<gc⁄v.h
>

35 
__gc⁄v_öfo
 
	m__cd
;

38 
__gc⁄v_öfo
 
	m__cd
;

39 
__gc⁄v_°ï_d©a
 
	m__d©a
;

40 } 
	m__comböed
;

41 } 
	t_G_ic⁄v_t
;

46 
	#_G_va_li°
 
__gnuc_va_li°


	)

48 
	#_G_HAVE_MMAP
 1

	)

49 
	#_G_HAVE_MREMAP
 1

	)

51 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

54 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

56 
	#_G_BUFSIZ
 8192

	)

	@/usr/include/asm/ioctls.h

1 
	~<asm-gíîic/io˘ls.h
>

	@/usr/include/asm/socket.h

1 
	~<asm-gíîic/sockë.h
>

	@/usr/include/bits/byteswap-16.h

19 #i‚de‡
_BITS_BYTESWAP_H


23 #ifde‡
__GNUC__


24 #i‡
__GNUC__
 >= 2

25 
	#__bsw≠_16
(
x
) \

26 (
__exãnsi⁄__
 \

27 ({ 
__v
, 
__x
 = (Ë(
x
); \

28 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

29 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

31 
	`__asm__
 ("rorw $8, %w0" \

32 : "Ù" (
__v
) \

33 : "0" (
__x
) \

35 
__v
; }))

	)

38 
	#__bsw≠_16
(
x
) \

39 (
__exãnsi⁄__
 \

40 ({ 
__x
 = (Ë(
x
); \

41 
	`__bsw≠_c⁄°™t_16
 (
__x
); }))

	)

44 
__ölöe
 

45 
	$__bsw≠_16
 (
__bsx
)

47  
	`__bsw≠_c⁄°™t_16
 (
__bsx
);

48 
	}
}

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/fcntl-linux.h

19 #i‚def 
_FCNTL_H


37 #ifde‡
__USE_GNU


38 
	~<bôs/uio.h
>

42 
	#O_ACCMODE
 0003

	)

43 
	#O_RDONLY
 00

	)

44 
	#O_WRONLY
 01

	)

45 
	#O_RDWR
 02

	)

46 #i‚de‡
O_CREAT


47 
	#O_CREAT
 0100

	)

49 #i‚de‡
O_EXCL


50 
	#O_EXCL
 0200

	)

52 #i‚de‡
O_NOCTTY


53 
	#O_NOCTTY
 0400

	)

55 #i‚de‡
O_TRUNC


56 
	#O_TRUNC
 01000

	)

58 #i‚de‡
O_APPEND


59 
	#O_APPEND
 02000

	)

61 #i‚de‡
O_NONBLOCK


62 
	#O_NONBLOCK
 04000

	)

64 #i‚de‡
O_NDELAY


65 
	#O_NDELAY
 
O_NONBLOCK


	)

67 #i‚de‡
O_SYNC


68 
	#O_SYNC
 04010000

	)

70 
	#O_FSYNC
 
O_SYNC


	)

71 #i‚de‡
O_ASYNC


72 
	#O_ASYNC
 020000

	)

74 #i‚de‡
__O_LARGEFILE


75 
	#__O_LARGEFILE
 0100000

	)

78 #i‚de‡
__O_DIRECTORY


79 
	#__O_DIRECTORY
 0200000

	)

81 #i‚de‡
__O_NOFOLLOW


82 
	#__O_NOFOLLOW
 0400000

	)

84 #i‚de‡
__O_CLOEXEC


85 
	#__O_CLOEXEC
 02000000

	)

87 #i‚de‡
__O_DIRECT


88 
	#__O_DIRECT
 040000

	)

90 #i‚de‡
__O_NOATIME


91 
	#__O_NOATIME
 01000000

	)

93 #i‚de‡
__O_PATH


94 
	#__O_PATH
 010000000

	)

96 #i‚de‡
__O_DSYNC


97 
	#__O_DSYNC
 010000

	)

99 #i‚de‡
__O_TMPFILE


100 
	#__O_TMPFILE
 020200000

	)

103 #i‚de‡
F_GETLK


104 #i‚de‡
__USE_FILE_OFFSET64


105 
	#F_GETLK
 5

	)

106 
	#F_SETLK
 6

	)

107 
	#F_SETLKW
 7

	)

109 
	#F_GETLK
 
F_GETLK64


	)

110 
	#F_SETLK
 
F_SETLK64


	)

111 
	#F_SETLKW
 
F_SETLKW64


	)

114 #i‚de‡
F_GETLK64


115 
	#F_GETLK64
 12

	)

116 
	#F_SETLK64
 13

	)

117 
	#F_SETLKW64
 14

	)

120 #ifde‡
__USE_LARGEFILE64


121 
	#O_LARGEFILE
 
__O_LARGEFILE


	)

124 #ifde‡
__USE_XOPEN2K8


125 
	#O_DIRECTORY
 
__O_DIRECTORY


	)

126 
	#O_NOFOLLOW
 
__O_NOFOLLOW


	)

127 
	#O_CLOEXEC
 
__O_CLOEXEC


	)

130 #ifde‡
__USE_GNU


131 
	#O_DIRECT
 
__O_DIRECT


	)

132 
	#O_NOATIME
 
__O_NOATIME


	)

133 
	#O_PATH
 
__O_PATH


	)

134 
	#O_TMPFILE
 
__O_TMPFILE


	)

140 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


141 
	#O_DSYNC
 
__O_DSYNC


	)

142 #i‡
deföed
 
__O_RSYNC


143 
	#O_RSYNC
 
__O_RSYNC


	)

145 
	#O_RSYNC
 
O_SYNC


	)

150 
	#F_DUPFD
 0

	)

151 
	#F_GETFD
 1

	)

152 
	#F_SETFD
 2

	)

153 
	#F_GETFL
 3

	)

154 
	#F_SETFL
 4

	)

156 #i‚de‡
__F_SETOWN


157 
	#__F_SETOWN
 8

	)

158 
	#__F_GETOWN
 9

	)

161 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


162 
	#F_SETOWN
 
__F_SETOWN


	)

163 
	#F_GETOWN
 
__F_GETOWN


	)

166 #i‚de‡
__F_SETSIG


167 
	#__F_SETSIG
 10

	)

168 
	#__F_GETSIG
 11

	)

170 #i‚de‡
__F_SETOWN_EX


171 
	#__F_SETOWN_EX
 15

	)

172 
	#__F_GETOWN_EX
 16

	)

175 #ifde‡
__USE_GNU


176 
	#F_SETSIG
 
__F_SETSIG


	)

177 
	#F_GETSIG
 
__F_GETSIG


	)

178 
	#F_SETOWN_EX
 
__F_SETOWN_EX


	)

179 
	#F_GETOWN_EX
 
__F_GETOWN_EX


	)

182 #ifde‡
__USE_GNU


183 
	#F_SETLEASE
 1024

	)

184 
	#F_GETLEASE
 1025

	)

185 
	#F_NOTIFY
 1026

	)

186 
	#F_SETPIPE_SZ
 1031

	)

187 
	#F_GETPIPE_SZ
 1032

	)

189 #ifde‡
__USE_XOPEN2K8


190 
	#F_DUPFD_CLOEXEC
 1030

	)

195 
	#FD_CLOEXEC
 1

	)

197 #i‚de‡
F_RDLCK


199 
	#F_RDLCK
 0

	)

200 
	#F_WRLCK
 1

	)

201 
	#F_UNLCK
 2

	)

206 #i‚de‡
F_EXLCK


207 
	#F_EXLCK
 4

	)

208 
	#F_SHLCK
 8

	)

211 #ifde‡
__USE_BSD


213 
	#LOCK_SH
 1

	)

214 
	#LOCK_EX
 2

	)

215 
	#LOCK_NB
 4

	)

217 
	#LOCK_UN
 8

	)

220 #ifde‡
__USE_GNU


221 
	#LOCK_MAND
 32

	)

222 
	#LOCK_READ
 64

	)

223 
	#LOCK_WRITE
 128

	)

224 
	#LOCK_RW
 192

	)

227 #ifde‡
__USE_GNU


229 
	#DN_ACCESS
 0x00000001

	)

230 
	#DN_MODIFY
 0x00000002

	)

231 
	#DN_CREATE
 0x00000004

	)

232 
	#DN_DELETE
 0x00000008

	)

233 
	#DN_RENAME
 0x00000010

	)

234 
	#DN_ATTRIB
 0x00000020

	)

235 
	#DN_MULTISHOT
 0x80000000

	)

239 #ifde‡
__USE_GNU


241 
	e__pid_ty≥


243 
	mF_OWNER_TID
 = 0,

244 
	mF_OWNER_PID
,

245 
	mF_OWNER_PGRP
,

246 
	mF_OWNER_GID
 = 
F_OWNER_PGRP


250 
	sf_ow√r_ex


252 
__pid_ty≥
 
	mty≥
;

253 
__pid_t
 
	mpid
;

259 #ifdef 
__USE_BSD


260 
	#FAPPEND
 
O_APPEND


	)

261 
	#FFSYNC
 
O_FSYNC


	)

262 
	#FASYNC
 
O_ASYNC


	)

263 
	#FNONBLOCK
 
O_NONBLOCK


	)

264 
	#FNDELAY
 
O_NDELAY


	)

267 #i‚de‡
__POSIX_FADV_DONTNEED


268 
	#__POSIX_FADV_DONTNEED
 4

	)

269 
	#__POSIX_FADV_NOREUSE
 5

	)

272 #ifde‡
__USE_XOPEN2K


273 
	#POSIX_FADV_NORMAL
 0

	)

274 
	#POSIX_FADV_RANDOM
 1

	)

275 
	#POSIX_FADV_SEQUENTIAL
 2

	)

276 
	#POSIX_FADV_WILLNEED
 3

	)

277 
	#POSIX_FADV_DONTNEED
 
__POSIX_FADV_DONTNEED


	)

278 
	#POSIX_FADV_NOREUSE
 
__POSIX_FADV_NOREUSE


	)

282 #ifde‡
__USE_GNU


284 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

287 
	#SYNC_FILE_RANGE_WRITE
 2

	)

290 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

295 
	#SPLICE_F_MOVE
 1

	)

296 
	#SPLICE_F_NONBLOCK
 2

	)

299 
	#SPLICE_F_MORE
 4

	)

300 
	#SPLICE_F_GIFT
 8

	)

304 
	#FALLOC_FL_KEEP_SIZE
 1

	)

307 
	#FALLOC_FL_PUNCH_HOLE
 2

	)

311 
	sfûe_h™dÀ


313 
	mh™dÀ_byãs
;

314 
	mh™dÀ_ty≥
;

316 
	mf_h™dÀ
[0];

320 
	#MAX_HANDLE_SZ
 128

	)

324 #ifde‡
__USE_ATFILE


325 
	#AT_FDCWD
 -100

	)

328 
	#AT_SYMLINK_NOFOLLOW
 0x100

	)

329 
	#AT_REMOVEDIR
 0x200

	)

331 
	#AT_SYMLINK_FOLLOW
 0x400

	)

332 #ifde‡
__USE_GNU


333 
	#AT_NO_AUTOMOUNT
 0x800

	)

335 
	#AT_EMPTY_PATH
 0x1000

	)

337 
	#AT_EACCESS
 0x200

	)

341 
	g__BEGIN_DECLS


343 #ifde‡
__USE_GNU


346 
ssize_t
 
	$ªadahód
 (
__fd
, 
__off64_t
 
__off£t
, 
size_t
 
__cou¡
)

347 
__THROW
;

354 
	`sync_fûe_ønge
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__cou¡
,

355 
__Êags
);

362 
ssize_t
 
	`vm•li˚
 (
__fdout
, c⁄° 
iovec
 *
__iov
,

363 
size_t
 
__cou¡
, 
__Êags
);

369 
ssize_t
 
	`•li˚
 (
__fdö
, 
__off64_t
 *
__offö
, 
__fdout
,

370 
__off64_t
 *
__offout
, 
size_t
 
__Àn
,

371 
__Êags
);

377 
ssize_t
 
	`ãe
 (
__fdö
, 
__fdout
, 
size_t
 
__Àn
,

378 
__Êags
);

384 #i‚de‡
__USE_FILE_OFFSET64


385 
	`ÁŒoˇã
 (
__fd
, 
__mode
, 
__off_t
 
__off£t
, __off_à
__Àn
);

387 #ifde‡
__REDIRECT


388 
	`__REDIRECT
 (
ÁŒoˇã
, (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

389 
__off64_t
 
__Àn
),

390 
ÁŒoˇã64
);

392 
	#ÁŒoˇã
 
ÁŒoˇã64


	)

395 #ifde‡
__USE_LARGEFILE64


396 
	`ÁŒoˇã64
 (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

397 
__off64_t
 
__Àn
);

402 
	$«me_to_h™dÀ_©
 (
__dfd
, c⁄° *
__«me
,

403 
fûe_h™dÀ
 *
__h™dÀ
, *
__m¡_id
,

404 
__Êags
Ë
__THROW
;

410 
	`›í_by_h™dÀ_©
 (
__mou¡dúfd
, 
fûe_h™dÀ
 *
__h™dÀ
,

411 
__Êags
);

415 
__END_DECLS


	@/usr/include/bits/libio-ldbl.h

19 #i‚de‡
_IO_STDIO_H


23 
	$__LDBL_REDIR_DECL
 (
_IO_vfsˇnf
)

24 
	`__LDBL_REDIR_DECL
 (
_IO_vÂrötf
)

	@/usr/include/bits/local_lim.h

24 #i‚de‡
NR_OPEN


25 
	#__undef_NR_OPEN


	)

27 #i‚de‡
LINK_MAX


28 
	#__undef_LINK_MAX


	)

30 #i‚de‡
OPEN_MAX


31 
	#__undef_OPEN_MAX


	)

33 #i‚de‡
ARG_MAX


34 
	#__undef_ARG_MAX


	)

38 
	~<löux/limôs.h
>

41 #ifde‡
__undef_NR_OPEN


42 #unde‡
NR_OPEN


43 #unde‡
__undef_NR_OPEN


46 #ifde‡
__undef_LINK_MAX


47 #unde‡
LINK_MAX


48 #unde‡
__undef_LINK_MAX


51 #ifde‡
__undef_OPEN_MAX


52 #unde‡
OPEN_MAX


53 #unde‡
__undef_OPEN_MAX


56 #ifde‡
__undef_ARG_MAX


57 #unde‡
ARG_MAX


58 #unde‡
__undef_ARG_MAX


62 
	#_POSIX_THREAD_KEYS_MAX
 128

	)

64 
	#PTHREAD_KEYS_MAX
 1024

	)

67 
	#_POSIX_THREAD_DESTRUCTOR_ITERATIONS
 4

	)

69 
	#PTHREAD_DESTRUCTOR_ITERATIONS
 
_POSIX_THREAD_DESTRUCTOR_ITERATIONS


	)

72 
	#_POSIX_THREAD_THREADS_MAX
 64

	)

74 #unde‡
PTHREAD_THREADS_MAX


78 
	#AIO_PRIO_DELTA_MAX
 20

	)

81 
	#PTHREAD_STACK_MIN
 16384

	)

84 
	#DELAYTIMER_MAX
 2147483647

	)

87 
	#TTY_NAME_MAX
 32

	)

90 
	#LOGIN_NAME_MAX
 256

	)

93 
	#HOST_NAME_MAX
 64

	)

96 
	#MQ_PRIO_MAX
 32768

	)

99 
	#SEM_VALUE_MAX
 (2147483647)

	)

	@/usr/include/bits/mman-linux.h

19 #i‚de‡
_SYS_MMAN_H


32 
	#PROT_READ
 0x1

	)

33 
	#PROT_WRITE
 0x2

	)

34 
	#PROT_EXEC
 0x4

	)

35 
	#PROT_NONE
 0x0

	)

36 
	#PROT_GROWSDOWN
 0x01000000

	)

38 
	#PROT_GROWSUP
 0x02000000

	)

42 
	#MAP_SHARED
 0x01

	)

43 
	#MAP_PRIVATE
 0x02

	)

44 #ifde‡
__USE_MISC


45 
	#MAP_TYPE
 0x0‡

	)

49 
	#MAP_FIXED
 0x10

	)

50 #ifde‡
__USE_MISC


51 
	#MAP_FILE
 0

	)

52 #ifde‡
__MAP_ANONYMOUS


53 
	#MAP_ANONYMOUS
 
__MAP_ANONYMOUS


	)

55 
	#MAP_ANONYMOUS
 0x20

	)

57 
	#MAP_ANON
 
MAP_ANONYMOUS


	)

59 
	#MAP_HUGE_SHIFT
 26

	)

60 
	#MAP_HUGE_MASK
 0x3f

	)

64 
	#MS_ASYNC
 1

	)

65 
	#MS_SYNC
 4

	)

66 
	#MS_INVALIDATE
 2

	)

69 #ifde‡
__USE_GNU


70 
	#MREMAP_MAYMOVE
 1

	)

71 
	#MREMAP_FIXED
 2

	)

75 #ifde‡
__USE_BSD


76 
	#MADV_NORMAL
 0

	)

77 
	#MADV_RANDOM
 1

	)

78 
	#MADV_SEQUENTIAL
 2

	)

79 
	#MADV_WILLNEED
 3

	)

80 
	#MADV_DONTNEED
 4

	)

81 
	#MADV_REMOVE
 9

	)

82 
	#MADV_DONTFORK
 10

	)

83 
	#MADV_DOFORK
 11

	)

84 
	#MADV_MERGEABLE
 12

	)

85 
	#MADV_UNMERGEABLE
 13

	)

86 
	#MADV_HUGEPAGE
 14

	)

87 
	#MADV_NOHUGEPAGE
 15

	)

88 
	#MADV_DONTDUMP
 16

	)

90 
	#MADV_DODUMP
 17

	)

91 
	#MADV_HWPOISON
 100

	)

95 #ifde‡
__USE_XOPEN2K


96 
	#POSIX_MADV_NORMAL
 0

	)

97 
	#POSIX_MADV_RANDOM
 1

	)

98 
	#POSIX_MADV_SEQUENTIAL
 2

	)

99 
	#POSIX_MADV_WILLNEED
 3

	)

100 
	#POSIX_MADV_DONTNEED
 4

	)

104 #i‚de‡
MCL_CURRENT


105 
	#MCL_CURRENT
 1

	)

106 
	#MCL_FUTURE
 2

	)

	@/usr/include/bits/poll.h

18 #i‚de‡
_SYS_POLL_H


25 
	#POLLIN
 0x001

	)

26 
	#POLLPRI
 0x002

	)

27 
	#POLLOUT
 0x004

	)

29 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


31 
	#POLLRDNORM
 0x040

	)

32 
	#POLLRDBAND
 0x080

	)

33 
	#POLLWRNORM
 0x100

	)

34 
	#POLLWRBAND
 0x200

	)

37 #ifde‡
__USE_GNU


39 
	#POLLMSG
 0x400

	)

40 
	#POLLREMOVE
 0x1000

	)

41 
	#POLLRDHUP
 0x2000

	)

47 
	#POLLERR
 0x008

	)

48 
	#POLLHUP
 0x010

	)

49 
	#POLLNVAL
 0x020

	)

	@/usr/include/bits/poll2.h

19 #i‚de‡
_SYS_POLL_H


24 
__BEGIN_DECLS


26 
__REDIRECT
 (
__pﬁl_Æüs
, (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

27 
__timeout
), 
pﬁl
);

28 
__pﬁl_chk
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
, 
__timeout
,

29 
__SIZE_TYPE__
 
__fd¶í
);

30 
__REDIRECT
 (
__pﬁl_chk_w¨n
, (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

31 
__timeout
, 
__SIZE_TYPE__
 
__fd¶í
),

32 
__pﬁl_chk
)

33 
__w¨«âr
 ("poll called with fds bufferÅoo small fileÇfdsÉntries");

35 
__f‹tify_fun˘i⁄
 

36 
	$pﬁl
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
, 
__timeout
)

38 i‡(
	`__bos
 (
__fds
Ë!(
__SIZE_TYPE__
) -1)

40 i‡(! 
	`__buûtö_c⁄°™t_p
 (
__nfds
))

41  
	`__pﬁl_chk
 (
__fds
, 
__nfds
, 
__timeout
, 
	`__bos
 (__fds));

42 i‡(
	`__bos
 (
__fds
Ë/  (*__fdsË< 
__nfds
)

43  
	`__pﬁl_chk_w¨n
 (
__fds
, 
__nfds
, 
__timeout
, 
	`__bos
 (__fds));

46  
	`__pﬁl_Æüs
 (
__fds
, 
__nfds
, 
__timeout
);

47 
	}
}

50 #ifde‡
__USE_GNU


51 
__REDIRECT
 (
__µﬁl_Æüs
, (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

52 c⁄° 
time•ec
 *
__timeout
,

53 c⁄° 
__sig£t_t
 *
__ss
), 
µﬁl
);

54 
__µﬁl_chk
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

55 c⁄° 
time•ec
 *
__timeout
,

56 c⁄° 
__sig£t_t
 *
__ss
, 
__SIZE_TYPE__
 
__fd¶í
);

57 
__REDIRECT
 (
__µﬁl_chk_w¨n
, (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

58 c⁄° 
time•ec
 *
__timeout
,

59 c⁄° 
__sig£t_t
 *
__ss
,

60 
__SIZE_TYPE__
 
__fd¶í
),

61 
__µﬁl_chk
)

62 
__w¨«âr
 ("ppoll called with fds bufferÅoo small fileÇfdsÉntries");

64 
__f‹tify_fun˘i⁄
 

65 
	$µﬁl
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
, c⁄° 
time•ec
 *
__timeout
,

66 c⁄° 
__sig£t_t
 *
__ss
)

68 i‡(
	`__bos
 (
__fds
Ë!(
__SIZE_TYPE__
) -1)

70 i‡(! 
	`__buûtö_c⁄°™t_p
 (
__nfds
))

71  
	`__µﬁl_chk
 (
__fds
, 
__nfds
, 
__timeout
, 
__ss
, 
	`__bos
 (__fds));

72 i‡(
	`__bos
 (
__fds
Ë/  (*__fdsË< 
__nfds
)

73  
	`__µﬁl_chk_w¨n
 (
__fds
, 
__nfds
, 
__timeout
, 
__ss
,

74 
	`__bos
 (
__fds
));

77  
	`__µﬁl_Æüs
 (
__fds
, 
__nfds
, 
__timeout
, 
__ss
);

78 
	}
}

81 
	g__END_DECLS


	@/usr/include/bits/sched.h

20 #i‚de‡
__√ed_sched∑øm


22 #i‚de‡
_SCHED_H


28 
	#SCHED_OTHER
 0

	)

29 
	#SCHED_FIFO
 1

	)

30 
	#SCHED_RR
 2

	)

31 #ifde‡
__USE_GNU


32 
	#SCHED_BATCH
 3

	)

33 
	#SCHED_IDLE
 5

	)

35 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

38 #ifde‡
__USE_GNU


40 
	#CSIGNAL
 0x000000f‡

	)

41 
	#CLONE_VM
 0x00000100

	)

42 
	#CLONE_FS
 0x00000200

	)

43 
	#CLONE_FILES
 0x00000400

	)

44 
	#CLONE_SIGHAND
 0x00000800

	)

45 
	#CLONE_PTRACE
 0x00002000

	)

46 
	#CLONE_VFORK
 0x00004000

	)

48 
	#CLONE_PARENT
 0x00008000

	)

50 
	#CLONE_THREAD
 0x00010000

	)

51 
	#CLONE_NEWNS
 0x00020000

	)

52 
	#CLONE_SYSVSEM
 0x00040000

	)

53 
	#CLONE_SETTLS
 0x00080000

	)

54 
	#CLONE_PARENT_SETTID
 0x00100000

	)

56 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

58 
	#CLONE_DETACHED
 0x00400000

	)

59 
	#CLONE_UNTRACED
 0x00800000

	)

61 
	#CLONE_CHILD_SETTID
 0x01000000

	)

63 
	#CLONE_NEWUTS
 0x04000000

	)

64 
	#CLONE_NEWIPC
 0x08000000

	)

65 
	#CLONE_NEWUSER
 0x10000000

	)

66 
	#CLONE_NEWPID
 0x20000000

	)

67 
	#CLONE_NEWNET
 0x40000000

	)

68 
	#CLONE_IO
 0x80000000

	)

72 
	ssched_∑øm


74 
	m__sched_¥i‹ôy
;

77 
	g__BEGIN_DECLS


79 #ifde‡
__USE_GNU


81 
˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

82 
__Êags
, *
__¨g
, ...Ë
__THROW
;

85 
	$unsh¨e
 (
__Êags
Ë
__THROW
;

88 
	$sched_gë˝u
 (Ë
__THROW
;

91 
	$£äs
 (
__fd
, 
__n°y≥
Ë
__THROW
;

95 
__END_DECLS


99 #i‡!
deföed
 
__deföed_sched∑øm
 \

100 && (
deföed
 
__√ed_sched∑øm
 || deföed 
_SCHED_H
)

101 
	#__deföed_sched∑øm
 1

	)

103 
	s__sched_∑øm


105 
__sched_¥i‹ôy
;

107 #unde‡
__√ed_sched∑øm


111 #i‡
deföed
 
_SCHED_H
 && !deföed 
__˝u_£t_t_deföed


112 
	#__˝u_£t_t_deföed


	)

114 
	#__CPU_SETSIZE
 1024

	)

115 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

118 
	t__˝u_mask
;

121 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

122 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

127 
__˝u_mask
 
__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

128 } 
	t˝u_£t_t
;

131 #i‡
	`__GNUC_PREREQ
 (2, 91)

132 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

133 dÿ
	`__buûtö_mem£t
 (
˝u£ç
, '\0', 
£tsize
); 0)

	)

135 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

137 
size_t
 
__i
; \

138 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

139 
__˝u_mask
 *
__bôs
 = (
˝u£ç
)->__bits; \

140 
__i
 = 0; __ò< 
__imax
; ++__i) \

141 
__bôs
[
__i
] = 0; \

142 
	}
} 0)

	)

144 
	#__CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

145 (
__exãnsi⁄__
 \

146 ({ 
size_t
 
__˝u
 = (
˝u
); \

147 
__˝u
 / 8 < (
£tsize
) \

148 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

149 |
	`__CPUMASK
 (
__˝u
)) \

150 : 0; }))

	)

151 
	#__CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

152 (
__exãnsi⁄__
 \

153 ({ 
size_t
 
__˝u
 = (
˝u
); \

154 
__˝u
 / 8 < (
£tsize
) \

155 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

156 &~
	`__CPUMASK
 (
__˝u
)) \

157 : 0; }))

	)

158 
	#__CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

159 (
__exãnsi⁄__
 \

160 ({ 
size_t
 
__˝u
 = (
˝u
); \

161 
__˝u
 / 8 < (
£tsize
) \

162 ? ((((c⁄° 
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

163 & 
	`__CPUMASK
 (
__˝u
))) != 0 \

164 : 0; }))

	)

166 
	#__CPU_COUNT_S
(
£tsize
, 
˝u£ç
) \

167 
	`__sched_˝ucou¡
 (
£tsize
, 
˝u£ç
)

	)

169 #i‡
__GNUC_PREREQ
 (2, 91)

170 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

171 (
	`__buûtö_memcmp
 (
˝u£ç1
, 
˝u£ç2
, 
£tsize
Ë=0)

	)

173 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

174 (
__exãnsi⁄__
 \

175 ({ c⁄° 
__˝u_mask
 *
__¨r1
 = (
˝u£ç1
)->
__bôs
; \

176 c⁄° 
__˝u_mask
 *
__¨r2
 = (
˝u£ç2
)->
__bôs
; \

177 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

178 
size_t
 
__i
; \

179 
__i
 = 0; __ò< 
__imax
; ++__i) \

180 i‡(
__¨r1
[
__i
] !
__¨r2
[__i]) \

182 
__i
 =
__imax
; }))

	)

185 
	#__CPU_OP_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, 
›
) \

186 (
__exãnsi⁄__
 \

187 ({ 
˝u_£t_t
 *
__de°
 = (
de°£t
); \

188 c⁄° 
__˝u_mask
 *
__¨r1
 = (
§c£t1
)->
__bôs
; \

189 c⁄° 
__˝u_mask
 *
__¨r2
 = (
§c£t2
)->
__bôs
; \

190 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

191 
size_t
 
__i
; \

192 
__i
 = 0; __ò< 
__imax
; ++__i) \

193 ((
__˝u_mask
 *Ë
__de°
->
__bôs
)[
__i
] = 
__¨r1
[__i] 
›
 
__¨r2
[__i]; \

194 
__de°
; }))

	)

196 
	#__CPU_ALLOC_SIZE
(
cou¡
) \

197 ((((
cou¡
Ë+ 
__NCPUBITS
 - 1Ë/ __NCPUBITSË*  (
__˝u_mask
))

	)

198 
	#__CPU_ALLOC
(
cou¡
Ë
	`__sched_˝uÆloc
 (cou¡)

	)

199 
	#__CPU_FREE
(
˝u£t
Ë
	`__sched_˝u‰ì
 (˝u£t)

	)

201 
__BEGIN_DECLS


203 
	$__sched_˝ucou¡
 (
size_t
 
__£tsize
, c⁄° 
˝u_£t_t
 *
__£ç
)

204 
__THROW
;

205 
˝u_£t_t
 *
	$__sched_˝uÆloc
 (
size_t
 
__cou¡
Ë
__THROW
 
__wur
;

206 
	$__sched_˝u‰ì
 (
˝u_£t_t
 *
__£t
Ë
__THROW
;

208 
__END_DECLS


	@/usr/include/bits/sockaddr.h

23 #i‚de‡
_BITS_SOCKADDR_H


24 
	#_BITS_SOCKADDR_H
 1

	)

28 
	tß_Ámûy_t
;

34 
	#__SOCKADDR_COMMON
(
ß_¥efix
) \

35 
ß_Ámûy_t
 
ß_¥efix
##
Ámûy


	)

37 
	#__SOCKADDR_COMMON_SIZE
 ( ())

	)

	@/usr/include/bits/socket_type.h

19 #i‚de‡
_SYS_SOCKET_H


24 
	e__sockë_ty≥


26 
	mSOCK_STREAM
 = 1,

28 
	#SOCK_STREAM
 
SOCK_STREAM


	)

29 
	mSOCK_DGRAM
 = 2,

31 
	#SOCK_DGRAM
 
SOCK_DGRAM


	)

32 
	mSOCK_RAW
 = 3,

33 
	#SOCK_RAW
 
SOCK_RAW


	)

34 
	mSOCK_RDM
 = 4,

35 
	#SOCK_RDM
 
SOCK_RDM


	)

36 
	mSOCK_SEQPACKET
 = 5,

38 
	#SOCK_SEQPACKET
 
SOCK_SEQPACKET


	)

39 
	mSOCK_DCCP
 = 6,

40 
	#SOCK_DCCP
 
SOCK_DCCP


	)

41 
	mSOCK_PACKET
 = 10,

44 
	#SOCK_PACKET
 
SOCK_PACKET


	)

49 
	mSOCK_CLOEXEC
 = 02000000,

51 
	#SOCK_CLOEXEC
 
SOCK_CLOEXEC


	)

52 
	mSOCK_NONBLOCK
 = 00004000

54 
	#SOCK_NONBLOCK
 
SOCK_NONBLOCK


	)

	@/usr/include/bits/stdio-lock.h

19 #i‚de‡
_BITS_STDIO_LOCK_H


20 
	#_BITS_STDIO_LOCK_H
 1

	)

22 
	~<bôs/libc-lock.h
>

23 
	~<lowÀvñlock.h
>

27 
	#_IO_lock_öex≥nsive
 1

	)

29 °ru˘ { 
	mlock
; 
	m˙t
; *
	mow√r
; } 
	t_IO_lock_t
;

31 
	#_IO_lock_öôülizî
 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

33 
	#_IO_lock_öô
(
_«me
) \

34 ((
_«me
Ë(
_IO_lock_t
Ë
_IO_lock_öôülizî
 , 0)

	)

36 
	#_IO_lock_föi
(
_«me
) \

37 ((Ë0)

	)

39 
	#_IO_lock_lock
(
_«me
) \

41 *
__£lf
 = 
THREAD_SELF
; \

42 i‡((
_«me
).
ow√r
 !
__£lf
) \

44 
	`Œl_lock
 ((
_«me
).
lock
, 
LLL_PRIVATE
); \

45 (
_«me
).
ow√r
 = 
__£lf
; \

47 ++(
_«me
).
˙t
; \

48 } 0)

	)

50 
	#_IO_lock_åylock
(
_«me
) \

52 
__ªsu…
 = 0; \

53 *
__£lf
 = 
THREAD_SELF
; \

54 i‡((
_«me
).
ow√r
 !
__£lf
) \

56 i‡(
	`Œl_åylock
 ((
_«me
).
lock
) == 0) \

58 (
_«me
).
ow√r
 = 
__£lf
; \

59 (
_«me
).
˙t
 = 1; \

62 
__ªsu…
 = 
EBUSY
; \

65 ++(
_«me
).
˙t
; \

66 
__ªsu…
; \

67 })

	)

69 
	#_IO_lock_u∆ock
(
_«me
) \

71 i‡(--(
_«me
).
˙t
 == 0) \

73 (
_«me
).
ow√r
 = 
NULL
; \

74 
	`Œl_u∆ock
 ((
_«me
).
lock
, 
LLL_PRIVATE
); \

76 } 0)

	)

80 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
) \

81 
	`__libc_˛ónup_ªgi⁄_°¨t
 (((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0, 
_f˘
, _Â)

	)

82 
	#_IO_˛ónup_ªgi⁄_°¨t_nﬂrg
(
_f˘
) \

83 
	`__libc_˛ónup_ªgi⁄_°¨t
 (1, 
_f˘
, 
NULL
)

	)

84 
	#_IO_˛ónup_ªgi⁄_íd
(
_doô
) \

85 
	`__libc_˛ónup_ªgi⁄_íd
 (
_doô
)

	)

87 #i‡
deföed
 
_LIBC
 && !deföed 
NOT_IN_libc


89 #ifde‡
__EXCEPTIONS


90 
	#_IO_acquúe_lock
(
_Â
) \

92 
_IO_FILE
 *
_IO_acquúe_lock_fûe
 \

93 
	`__©åibuã__
((
	`˛ónup
 (
_IO_acquúe_lock_f˘
))) \

94 (
_Â
); \

95 
	`_IO_Êockfûe
 (
_IO_acquúe_lock_fûe
);

	)

96 
	#_IO_acquúe_lock_˛ór_Êags2
(
_Â
) \

98 
_IO_FILE
 *
_IO_acquúe_lock_fûe
 \

99 
	`__©åibuã__
((
	`˛ónup
 (
_IO_acquúe_lock_˛ór_Êags2_f˘
))) \

100 (
_Â
); \

101 
	`_IO_Êockfûe
 (
_IO_acquúe_lock_fûe
);

	)

103 
	#_IO_acquúe_lock
(
_Â
Ë
_IO_acquúe_lock_√eds_ex˚±i⁄s_íabÀd


	)

104 
	#_IO_acquúe_lock_˛ór_Êags2
(
_Â
Ë
	`_IO_acquúe_lock
 (_Â)

	)

106 
	#_IO_ªÀa£_lock
(
_Â
Ë; } 0)

	)

	@/usr/include/bits/syslog-ldbl.h

19 #i‚de‡
_SYS_SYSLOG_H


23 
	$__LDBL_REDIR_DECL
 (
sy¶og
)

25 #ifde‡
__USE_BSD


26 
	$__LDBL_REDIR_DECL
 (
vsy¶og
)

29 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


30 
	$__LDBL_REDIR_DECL
 (
__sy¶og_chk
)

32 #ifde‡
__USE_BSD


33 
	$__LDBL_REDIR_DECL
 (
__vsy¶og_chk
)

	@/usr/include/bits/syslog-path.h

19 #i‚de‡
_SYS_SYSLOG_H


23 #i‚de‡
_BITS_SYSLOG_PATH_H


24 
	#_BITS_SYSLOG_PATH_H
 1

	)

26 
	#_PATH_LOG
 "/dev/log"

	)

	@/usr/include/bits/syslog.h

19 #i‚de‡
_SYS_SYSLOG_H


24 
	$__sy¶og_chk
 (
__¥i
, 
__Êag
, c⁄° *
__fmt
, ...)

25 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

27 #ifde‡
__va_¨g_∑ck


28 
__f‹tify_fun˘i⁄
 

29 
	$sy¶og
 (
__¥i
, c⁄° *
__fmt
, ...)

31 
	`__sy¶og_chk
 (
__¥i
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

32 
	}
}

33 #ñi‡!
deföed
 
__˝lu•lus


34 
	#sy¶og
(
¥i
, ...) \

35 
	`__sy¶og_chk
 (
¥i
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

39 #ifde‡
__USE_BSD


40 
	$__vsy¶og_chk
 (
__¥i
, 
__Êag
, c⁄° *
__fmt
,

41 
__gnuc_va_li°
 
__≠
)

42 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

44 
__f‹tify_fun˘i⁄
 

45 
	$vsy¶og
 (
__¥i
, c⁄° *
__fmt
, 
__gnuc_va_li°
 
__≠
)

47 
	`__vsy¶og_chk
 (
__¥i
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

48 
	}
}

	@/usr/include/bits/timex.h

18 #i‚def 
_BITS_TIMEX_H


19 
	#_BITS_TIMEX_H
 1

	)

21 
	~<bôs/ty≥s.h
>

25 
	stimex


27 
	mmodes
;

28 
__sysˇŒ_¶⁄g_t
 
	moff£t
;

29 
__sysˇŒ_¶⁄g_t
 
	m‰eq
;

30 
__sysˇŒ_¶⁄g_t
 
	mmaxîr‹
;

31 
__sysˇŒ_¶⁄g_t
 
	me°îr‹
;

32 
	m°©us
;

33 
__sysˇŒ_¶⁄g_t
 
	mc⁄°™t
;

34 
__sysˇŒ_¶⁄g_t
 
	m¥ecisi⁄
;

35 
__sysˇŒ_¶⁄g_t
 
	mtﬁî™˚
;

36 
timevÆ
 
	mtime
;

37 
__sysˇŒ_¶⁄g_t
 
	mtick
;

38 
__sysˇŒ_¶⁄g_t
 
	mµs‰eq
;

39 
__sysˇŒ_¶⁄g_t
 
	mjôãr
;

40 
	mshi·
;

41 
__sysˇŒ_¶⁄g_t
 
	m°abû
;

42 
__sysˇŒ_¶⁄g_t
 
	mjô˙t
;

43 
__sysˇŒ_¶⁄g_t
 
	mˇl˙t
;

44 
__sysˇŒ_¶⁄g_t
 
	mîr˙t
;

45 
__sysˇŒ_¶⁄g_t
 
	m°b˙t
;

47 
	mèi
;

56 
	#ADJ_OFFSET
 0x0001

	)

57 
	#ADJ_FREQUENCY
 0x0002

	)

58 
	#ADJ_MAXERROR
 0x0004

	)

59 
	#ADJ_ESTERROR
 0x0008

	)

60 
	#ADJ_STATUS
 0x0010

	)

61 
	#ADJ_TIMECONST
 0x0020

	)

62 
	#ADJ_TAI
 0x0080

	)

63 
	#ADJ_MICRO
 0x1000

	)

64 
	#ADJ_NANO
 0x2000

	)

65 
	#ADJ_TICK
 0x4000

	)

66 
	#ADJ_OFFSET_SINGLESHOT
 0x8001

	)

67 
	#ADJ_OFFSET_SS_READ
 0xa001

	)

70 
	#MOD_OFFSET
 
ADJ_OFFSET


	)

71 
	#MOD_FREQUENCY
 
ADJ_FREQUENCY


	)

72 
	#MOD_MAXERROR
 
ADJ_MAXERROR


	)

73 
	#MOD_ESTERROR
 
ADJ_ESTERROR


	)

74 
	#MOD_STATUS
 
ADJ_STATUS


	)

75 
	#MOD_TIMECONST
 
ADJ_TIMECONST


	)

76 
	#MOD_CLKB
 
ADJ_TICK


	)

77 
	#MOD_CLKA
 
ADJ_OFFSET_SINGLESHOT


	)

78 
	#MOD_TAI
 
ADJ_TAI


	)

79 
	#MOD_MICRO
 
ADJ_MICRO


	)

80 
	#MOD_NANO
 
ADJ_NANO


	)

84 
	#STA_PLL
 0x0001

	)

85 
	#STA_PPSFREQ
 0x0002

	)

86 
	#STA_PPSTIME
 0x0004

	)

87 
	#STA_FLL
 0x0008

	)

89 
	#STA_INS
 0x0010

	)

90 
	#STA_DEL
 0x0020

	)

91 
	#STA_UNSYNC
 0x0040

	)

92 
	#STA_FREQHOLD
 0x0080

	)

94 
	#STA_PPSSIGNAL
 0x0100

	)

95 
	#STA_PPSJITTER
 0x0200

	)

96 
	#STA_PPSWANDER
 0x0400

	)

97 
	#STA_PPSERROR
 0x0800

	)

99 
	#STA_CLOCKERR
 0x1000

	)

100 
	#STA_NANO
 0x2000

	)

101 
	#STA_MODE
 0x4000

	)

102 
	#STA_CLK
 0x8000

	)

105 
	#STA_RONLY
 (
STA_PPSSIGNAL
 | 
STA_PPSJITTER
 | 
STA_PPSWANDER
 | \

106 
STA_PPSERROR
 | 
STA_CLOCKERR
 | 
STA_NANO
 | 
STA_MODE
 | 
STA_CLK
)

	)

	@/usr/include/bits/typesizes.h

19 #i‚de‡
_BITS_TYPES_H


23 #i‚def 
_BITS_TYPESIZES_H


24 
	#_BITS_TYPESIZES_H
 1

	)

30 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


31 
	#__SYSCALL_SLONG_TYPE
 
__SQUAD_TYPE


	)

32 
	#__SYSCALL_ULONG_TYPE
 
__UQUAD_TYPE


	)

34 
	#__SYSCALL_SLONG_TYPE
 
__SLONGWORD_TYPE


	)

35 
	#__SYSCALL_ULONG_TYPE
 
__ULONGWORD_TYPE


	)

38 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

39 
	#__UID_T_TYPE
 
__U32_TYPE


	)

40 
	#__GID_T_TYPE
 
__U32_TYPE


	)

41 
	#__INO_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

42 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

43 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

44 #ifde‡
__x86_64__


45 
	#__NLINK_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

46 
	#__FSWORD_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

48 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

49 
	#__FSWORD_T_TYPE
 
__SWORD_TYPE


	)

51 
	#__OFF_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

52 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

53 
	#__PID_T_TYPE
 
__S32_TYPE


	)

54 
	#__RLIM_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

55 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

56 
	#__BLKCNT_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

57 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

58 
	#__FSBLKCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

59 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

60 
	#__FSFILCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

61 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

62 
	#__ID_T_TYPE
 
__U32_TYPE


	)

63 
	#__CLOCK_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

64 
	#__TIME_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

65 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

66 
	#__SUSECONDS_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

67 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

68 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

69 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

70 
	#__TIMER_T_TYPE
 *

	)

71 
	#__BLKSIZE_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

72 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

73 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

75 #ifde‡
__x86_64__


79 
	#__OFF_T_MATCHES_OFF64_T
 1

	)

82 
	#__INO_T_MATCHES_INO64_T
 1

	)

86 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/wchar.h

19 #i‚de‡
_BITS_WCHAR_H


20 
	#_BITS_WCHAR_H
 1

	)

33 #ifde‡
__WCHAR_MAX__


34 
	#__WCHAR_MAX
 
__WCHAR_MAX__


	)

35 #ñi‡
L
'\0' - 1 > 0

36 
	#__WCHAR_MAX
 (0xffffffffu + 
L
'\0')

	)

38 
	#__WCHAR_MAX
 (0x7ffffff‡+ 
L
'\0')

	)

41 #ifde‡
__WCHAR_MIN__


42 
	#__WCHAR_MIN
 
__WCHAR_MIN__


	)

43 #ñi‡
L
'\0' - 1 > 0

44 
	#__WCHAR_MIN
 (
L
'\0' + 0)

	)

46 
	#__WCHAR_MIN
 (-
__WCHAR_MAX
 - 1)

	)

	@/usr/include/gnu/stubs.h

6 #i‡!
deföed
 
__x86_64__


7 
	~<gnu/°ubs-32.h
>

9 #i‡
deföed
 
__x86_64__
 && deföed 
__LP64__


10 
	~<gnu/°ubs-64.h
>

12 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


13 
	~<gnu/°ubs-x32.h
>

	@/usr/include/inttypes.h

22 #i‚de‡
_INTTYPES_H


23 
	#_INTTYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<°döt.h
>

30 #i‚de‡
____gwch¨_t_deföed


31 #ifde‡
__˝lu•lus


32 
	#__gwch¨_t
 
wch¨_t


	)

33 #ñi‡
deföed
 
__WCHAR_TYPE__


34 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

36 
	#__√ed_wch¨_t


	)

37 
	~<°ddef.h
>

38 
wch¨_t
 
	t__gwch¨_t
;

40 
	#____gwch¨_t_deföed
 1

	)

43 #i‡
__WORDSIZE
 == 64

44 
	#__PRI64_PREFIX
 "l"

	)

45 
	#__PRIPTR_PREFIX
 "l"

	)

47 
	#__PRI64_PREFIX
 "Œ"

	)

48 
	#__PRIPTR_PREFIX


	)

54 
	#PRId8
 "d"

	)

55 
	#PRId16
 "d"

	)

56 
	#PRId32
 "d"

	)

57 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

59 
	#PRIdLEAST8
 "d"

	)

60 
	#PRIdLEAST16
 "d"

	)

61 
	#PRIdLEAST32
 "d"

	)

62 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

64 
	#PRIdFAST8
 "d"

	)

65 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

66 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

67 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIi8
 "i"

	)

71 
	#PRIi16
 "i"

	)

72 
	#PRIi32
 "i"

	)

73 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

75 
	#PRIiLEAST8
 "i"

	)

76 
	#PRIiLEAST16
 "i"

	)

77 
	#PRIiLEAST32
 "i"

	)

78 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

80 
	#PRIiFAST8
 "i"

	)

81 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

82 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

83 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIo8
 "o"

	)

87 
	#PRIo16
 "o"

	)

88 
	#PRIo32
 "o"

	)

89 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

91 
	#PRIoLEAST8
 "o"

	)

92 
	#PRIoLEAST16
 "o"

	)

93 
	#PRIoLEAST32
 "o"

	)

94 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

96 
	#PRIoFAST8
 "o"

	)

97 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

98 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

99 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIu8
 "u"

	)

103 
	#PRIu16
 "u"

	)

104 
	#PRIu32
 "u"

	)

105 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

107 
	#PRIuLEAST8
 "u"

	)

108 
	#PRIuLEAST16
 "u"

	)

109 
	#PRIuLEAST32
 "u"

	)

110 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

112 
	#PRIuFAST8
 "u"

	)

113 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

114 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

115 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIx8
 "x"

	)

119 
	#PRIx16
 "x"

	)

120 
	#PRIx32
 "x"

	)

121 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

123 
	#PRIxLEAST8
 "x"

	)

124 
	#PRIxLEAST16
 "x"

	)

125 
	#PRIxLEAST32
 "x"

	)

126 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

128 
	#PRIxFAST8
 "x"

	)

129 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

130 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

131 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIX8
 "X"

	)

135 
	#PRIX16
 "X"

	)

136 
	#PRIX32
 "X"

	)

137 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

139 
	#PRIXLEAST8
 "X"

	)

140 
	#PRIXLEAST16
 "X"

	)

141 
	#PRIXLEAST32
 "X"

	)

142 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

144 
	#PRIXFAST8
 "X"

	)

145 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

146 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

147 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

151 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

152 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

153 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

154 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

155 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

156 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

160 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

161 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

162 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

163 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

164 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

165 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

171 
	#SCNd8
 "hhd"

	)

172 
	#SCNd16
 "hd"

	)

173 
	#SCNd32
 "d"

	)

174 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

176 
	#SCNdLEAST8
 "hhd"

	)

177 
	#SCNdLEAST16
 "hd"

	)

178 
	#SCNdLEAST32
 "d"

	)

179 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

181 
	#SCNdFAST8
 "hhd"

	)

182 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

183 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

184 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNi8
 "hhi"

	)

188 
	#SCNi16
 "hi"

	)

189 
	#SCNi32
 "i"

	)

190 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

192 
	#SCNiLEAST8
 "hhi"

	)

193 
	#SCNiLEAST16
 "hi"

	)

194 
	#SCNiLEAST32
 "i"

	)

195 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

197 
	#SCNiFAST8
 "hhi"

	)

198 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

199 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

200 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNu8
 "hhu"

	)

204 
	#SCNu16
 "hu"

	)

205 
	#SCNu32
 "u"

	)

206 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

208 
	#SCNuLEAST8
 "hhu"

	)

209 
	#SCNuLEAST16
 "hu"

	)

210 
	#SCNuLEAST32
 "u"

	)

211 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

213 
	#SCNuFAST8
 "hhu"

	)

214 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

215 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

216 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNo8
 "hho"

	)

220 
	#SCNo16
 "ho"

	)

221 
	#SCNo32
 "o"

	)

222 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

224 
	#SCNoLEAST8
 "hho"

	)

225 
	#SCNoLEAST16
 "ho"

	)

226 
	#SCNoLEAST32
 "o"

	)

227 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

229 
	#SCNoFAST8
 "hho"

	)

230 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

231 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

232 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNx8
 "hhx"

	)

236 
	#SCNx16
 "hx"

	)

237 
	#SCNx32
 "x"

	)

238 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

240 
	#SCNxLEAST8
 "hhx"

	)

241 
	#SCNxLEAST16
 "hx"

	)

242 
	#SCNxLEAST32
 "x"

	)

243 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

245 
	#SCNxFAST8
 "hhx"

	)

246 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

247 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

248 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

252 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

253 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

254 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

255 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

256 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

259 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

260 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

261 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

262 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

263 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

266 
	g__BEGIN_DECLS


268 #i‡
__WORDSIZE
 == 64

273 
	mquŸ
;

274 
	mªm
;

275 } 
	timaxdiv_t
;

282 
__exãnsi⁄__
 
	mquŸ
;

283 
__exãnsi⁄__
 
	mªm
;

284 } 
	timaxdiv_t
;

290 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

293 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

294 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

297 
ötmax_t
 
	$°πoimax
 (c⁄° *
__ª°ri˘
 
__≈å
,

298 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

301 
uötmax_t
 
	$°πoumax
 (c⁄° *
__ª°ri˘
 
__≈å
,

302 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

305 
ötmax_t
 
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

306 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

307 
__THROW
;

310 
uötmax_t
 
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

311 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

312 
__THROW
;

314 #ifde‡
__USE_EXTERN_INLINES


316 #i‡
__WORDSIZE
 == 64

318 
	$__°πﬁ_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

319 **
__ª°ri˘
 
__íd±r
,

320 
__ba£
, 
__group
)

321 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

323 
__exã∫_ölöe
 
ötmax_t


324 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

325 
ba£
))

327  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

328 
	}
}

330 
	$__°πoul_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 ** 
__ª°ri˘
 
__íd±r
,

332 
__ba£
, 
__group
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

335 
__exã∫_ölöe
 
uötmax_t


336 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

337 
ba£
))

339  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

340 
	}
}

342 
	$__wc°ﬁ_öã∫Æ
 (c⁄° 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

343 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

344 
__ba£
, 
__group
)

345 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

347 
__exã∫_ölöe
 
ötmax_t


348 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

349 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

351  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

352 
	}
}

354 
	$__wc°oul_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

355 
__ª°ri˘
 
__≈å
,

356 
__gwch¨_t
 **

357 
__ª°ri˘
 
__íd±r
,

358 
__ba£
, 
__group
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

361 
__exã∫_ölöe
 
uötmax_t


362 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

363 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

365  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

366 
	}
}

370 
__exãnsi⁄__


371 
	$__°πﬁl_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

372 **
__ª°ri˘
 
__íd±r
,

373 
__ba£
, 
__group
)

374 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

376 
__exã∫_ölöe
 
ötmax_t


377 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

378 
ba£
))

380  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

381 
	}
}

383 
__exãnsi⁄__


384 
	$__°πouŒ_öã∫Æ
 (const *

385 
__ª°ri˘
 
__≈å
,

387 
__ª°ri˘
 
__íd±r
,

388 
__ba£
,

389 
__group
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

392 
__exã∫_ölöe
 
uötmax_t


393 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

394 
ba£
))

396  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

397 
	}
}

399 
__exãnsi⁄__


400 
	$__wc°ﬁl_öã∫Æ
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

401 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

402 
__ba£
, 
__group
)

403 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

405 
__exã∫_ölöe
 
ötmax_t


406 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

407 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

409  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

410 
	}
}

413 
__exãnsi⁄__


414 
	$__wc°ouŒ_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

415 
__ª°ri˘
 
__≈å
,

416 
__gwch¨_t
 **

417 
__ª°ri˘
 
__íd±r
,

418 
__ba£
,

419 
__group
)

420 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

422 
__exã∫_ölöe
 
uötmax_t


423 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

424 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

426  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

427 
	}
}

432 
	g__END_DECLS


	@/usr/include/krb5.h

8 
	~<krb5/krb5.h
>

	@/usr/include/linux/errno.h

1 
	~<asm/î∫o.h
>

	@/usr/include/linux/limits.h

1 #i‚de‡
_LINUX_LIMITS_H


2 
	#_LINUX_LIMITS_H


	)

4 
	#NR_OPEN
 1024

	)

6 
	#NGROUPS_MAX
 65536

	)

7 
	#ARG_MAX
 131072

	)

8 
	#LINK_MAX
 127

	)

9 
	#MAX_CANON
 255

	)

10 
	#MAX_INPUT
 255

	)

11 
	#NAME_MAX
 255

	)

12 
	#PATH_MAX
 4096

	)

13 
	#PIPE_BUF
 4096

	)

14 
	#XATTR_NAME_MAX
 255

	)

15 
	#XATTR_SIZE_MAX
 65536

	)

16 
	#XATTR_LIST_MAX
 65536

	)

18 
	#RTSIG_MAX
 32

	)

	@/usr/include/linux/param.h

1 #i‚de‡
_LINUX_PARAM_H


2 
	#_LINUX_PARAM_H


	)

4 
	~<asm/∑øm.h
>

	@/usr/include/openssl/asn1.h

59 #i‚de‡
HEADER_ASN1_H


60 
	#HEADER_ASN1_H


	)

62 
	~<time.h
>

63 
	~<›ís¶/e_os2.h
>

64 #i‚de‡
OPENSSL_NO_BIO


65 
	~<›ís¶/bio.h
>

67 
	~<›ís¶/°ack.h
>

68 
	~<›ís¶/ß„°ack.h
>

70 
	~<›ís¶/symhacks.h
>

72 
	~<›ís¶/os¶_typ.h
>

73 #i‚de‡
OPENSSL_NO_DEPRECATED


74 
	~<›ís¶/bn.h
>

77 #ifde‡
OPENSSL_BUILD_SHLIBCRYPTO


78 #unde‡
OPENSSL_EXTERN


79 
	#OPENSSL_EXTERN
 
OPENSSL_EXPORT


	)

82 #ifde‡ 
__˝lu•lus


86 
	#V_ASN1_UNIVERSAL
 0x00

	)

87 
	#V_ASN1_APPLICATION
 0x40

	)

88 
	#V_ASN1_CONTEXT_SPECIFIC
 0x80

	)

89 
	#V_ASN1_PRIVATE
 0xc0

	)

91 
	#V_ASN1_CONSTRUCTED
 0x20

	)

92 
	#V_ASN1_PRIMITIVE_TAG
 0x1f

	)

93 
	#V_ASN1_PRIMATIVE_TAG
 0x1f

	)

95 
	#V_ASN1_APP_CHOOSE
 -2

	)

96 
	#V_ASN1_OTHER
 -3

	)

97 
	#V_ASN1_ANY
 -4

	)

99 
	#V_ASN1_NEG
 0x100

	)

101 
	#V_ASN1_UNDEF
 -1

	)

102 
	#V_ASN1_EOC
 0

	)

103 
	#V_ASN1_BOOLEAN
 1

	)

104 
	#V_ASN1_INTEGER
 2

	)

105 
	#V_ASN1_NEG_INTEGER
 (2 | 
V_ASN1_NEG
)

	)

106 
	#V_ASN1_BIT_STRING
 3

	)

107 
	#V_ASN1_OCTET_STRING
 4

	)

108 
	#V_ASN1_NULL
 5

	)

109 
	#V_ASN1_OBJECT
 6

	)

110 
	#V_ASN1_OBJECT_DESCRIPTOR
 7

	)

111 
	#V_ASN1_EXTERNAL
 8

	)

112 
	#V_ASN1_REAL
 9

	)

113 
	#V_ASN1_ENUMERATED
 10

	)

114 
	#V_ASN1_NEG_ENUMERATED
 (10 | 
V_ASN1_NEG
)

	)

115 
	#V_ASN1_UTF8STRING
 12

	)

116 
	#V_ASN1_SEQUENCE
 16

	)

117 
	#V_ASN1_SET
 17

	)

118 
	#V_ASN1_NUMERICSTRING
 18

	)

119 
	#V_ASN1_PRINTABLESTRING
 19

	)

120 
	#V_ASN1_T61STRING
 20

	)

121 
	#V_ASN1_TELETEXSTRING
 20

	)

122 
	#V_ASN1_VIDEOTEXSTRING
 21

	)

123 
	#V_ASN1_IA5STRING
 22

	)

124 
	#V_ASN1_UTCTIME
 23

	)

125 
	#V_ASN1_GENERALIZEDTIME
 24

	)

126 
	#V_ASN1_GRAPHICSTRING
 25

	)

127 
	#V_ASN1_ISO64STRING
 26

	)

128 
	#V_ASN1_VISIBLESTRING
 26

	)

129 
	#V_ASN1_GENERALSTRING
 27

	)

130 
	#V_ASN1_UNIVERSALSTRING
 28

	)

131 
	#V_ASN1_BMPSTRING
 30

	)

134 
	#B_ASN1_NUMERICSTRING
 0x0001

	)

135 
	#B_ASN1_PRINTABLESTRING
 0x0002

	)

136 
	#B_ASN1_T61STRING
 0x0004

	)

137 
	#B_ASN1_TELETEXSTRING
 0x0004

	)

138 
	#B_ASN1_VIDEOTEXSTRING
 0x0008

	)

139 
	#B_ASN1_IA5STRING
 0x0010

	)

140 
	#B_ASN1_GRAPHICSTRING
 0x0020

	)

141 
	#B_ASN1_ISO64STRING
 0x0040

	)

142 
	#B_ASN1_VISIBLESTRING
 0x0040

	)

143 
	#B_ASN1_GENERALSTRING
 0x0080

	)

144 
	#B_ASN1_UNIVERSALSTRING
 0x0100

	)

145 
	#B_ASN1_OCTET_STRING
 0x0200

	)

146 
	#B_ASN1_BIT_STRING
 0x0400

	)

147 
	#B_ASN1_BMPSTRING
 0x0800

	)

148 
	#B_ASN1_UNKNOWN
 0x1000

	)

149 
	#B_ASN1_UTF8STRING
 0x2000

	)

150 
	#B_ASN1_UTCTIME
 0x4000

	)

151 
	#B_ASN1_GENERALIZEDTIME
 0x8000

	)

152 
	#B_ASN1_SEQUENCE
 0x10000

	)

155 
	#MBSTRING_FLAG
 0x1000

	)

156 
	#MBSTRING_UTF8
 (
MBSTRING_FLAG
)

	)

157 
	#MBSTRING_ASC
 (
MBSTRING_FLAG
|1)

	)

158 
	#MBSTRING_BMP
 (
MBSTRING_FLAG
|2)

	)

159 
	#MBSTRING_UNIV
 (
MBSTRING_FLAG
|4)

	)

161 
	#SMIME_OLDMIME
 0x400

	)

162 
	#SMIME_CRLFEOL
 0x800

	)

163 
	#SMIME_STREAM
 0x1000

	)

165 
X509_Æg‹_°
;

166 
DECLARE_STACK_OF
(
X509_ALGOR
)

168 
	#DECLARE_ASN1_SET_OF
(
ty≥
Ë

	)

169 
	#IMPLEMENT_ASN1_SET_OF
(
ty≥
Ë

	)

175 
	sa¢1_˘x_°


177 *
p
;

178 
eos
;

179 
îr‹
;

180 
öf
;

181 
èg
;

182 
x˛ass
;

183 
¶í
;

184 *
max
;

185 *
q
;

186 **
µ
;

187 
löe
;

188 } 
	tASN1_CTX
;

190 
	sa¢1_c⁄°_˘x_°


192 c⁄° *
p
;

193 
eos
;

194 
îr‹
;

195 
öf
;

196 
èg
;

197 
x˛ass
;

198 
¶í
;

199 c⁄° *
max
;

200 c⁄° *
q
;

201 c⁄° **
µ
;

202 
löe
;

203 } 
	tASN1_c⁄°_CTX
;

207 
	#ASN1_OBJECT_FLAG_DYNAMIC
 0x01

	)

208 
	#ASN1_OBJECT_FLAG_CRITICAL
 0x02

	)

209 
	#ASN1_OBJECT_FLAG_DYNAMIC_STRINGS
 0x04

	)

210 
	#ASN1_OBJECT_FLAG_DYNAMIC_DATA
 0x08

	)

211 
	sa¢1_obje˘_°


213 c⁄° *
¢
,*
 
;

214 
nid
;

215 
Àngth
;

216 c⁄° *
d©a
;

217 
Êags
;

218 } 
	tASN1_OBJECT
;

220 
	#ASN1_STRING_FLAG_BITS_LEFT
 0x08

	)

225 
	#ASN1_STRING_FLAG_NDEF
 0x010

	)

232 
	#ASN1_STRING_FLAG_CONT
 0x020

	)

236 
	#ASN1_STRING_FLAG_MSTRING
 0x040

	)

238 
	sa¢1_°rög_°


240 
Àngth
;

241 
ty≥
;

242 *
d©a
;

247 
Êags
;

255 
	sASN1_ENCODING_°


257 *
íc
;

258 
Àn
;

259 
modifõd
;

260 } 
	tASN1_ENCODING
;

263 
	#ASN1_LONG_UNDEF
 0x7fffffffL

	)

265 
	#STABLE_FLAGS_MALLOC
 0x01

	)

266 
	#STABLE_NO_MASK
 0x02

	)

267 
	#DIRSTRING_TYPE
 \

268 (
B_ASN1_PRINTABLESTRING
|
B_ASN1_T61STRING
|
B_ASN1_BMPSTRING
|
B_ASN1_UTF8STRING
)

	)

269 
	#PKCS9STRING_TYPE
 (
DIRSTRING_TYPE
|
B_ASN1_IA5STRING
)

	)

271 
	sa¢1_°rög_èbÀ_°
 {

272 
nid
;

273 
mösize
;

274 
maxsize
;

275 
mask
;

276 
Êags
;

277 } 
	tASN1_STRING_TABLE
;

279 
DECLARE_STACK_OF
(
ASN1_STRING_TABLE
)

283 
	#ub_«me
 32768

	)

284 
	#ub_comm⁄_«me
 64

	)

285 
	#ub_loˇlôy_«me
 128

	)

286 
	#ub_°©e_«me
 128

	)

287 
	#ub_‹g™iz©i⁄_«me
 64

	)

288 
	#ub_‹g™iz©i⁄_unô_«me
 64

	)

289 
	#ub_tôÀ
 64

	)

290 
	#ub_emaû_addªss
 128

	)

295 
ASN1_TEMPLATE_°
 
	tASN1_TEMPLATE
;

296 
ASN1_TLC_°
 
	tASN1_TLC
;

298 
ASN1_VALUE_°
 
	tASN1_VALUE
;

302 
	#DECLARE_ASN1_FUNCTIONS
(
ty≥
Ë
	`DECLARE_ASN1_FUNCTIONS_«me
—y≥,Åy≥)

	)

304 
	#DECLARE_ASN1_ALLOC_FUNCTIONS
(
ty≥
) \

305 
	`DECLARE_ASN1_ALLOC_FUNCTIONS_«me
(
ty≥
,Åy≥)

	)

307 
	#DECLARE_ASN1_FUNCTIONS_«me
(
ty≥
, 
«me
) \

308 
	`DECLARE_ASN1_ALLOC_FUNCTIONS_«me
(
ty≥
, 
«me
) \

309 
	`DECLARE_ASN1_ENCODE_FUNCTIONS
(
ty≥
, 
«me
,Çame)

	)

311 
	#DECLARE_ASN1_FUNCTIONS_‚ame
(
ty≥
, 
ô«me
, 
«me
) \

312 
	`DECLARE_ASN1_ALLOC_FUNCTIONS_«me
(
ty≥
, 
«me
) \

313 
	`DECLARE_ASN1_ENCODE_FUNCTIONS
(
ty≥
, 
ô«me
, 
«me
)

	)

315 
	#DECLARE_ASN1_ENCODE_FUNCTIONS
(
ty≥
, 
ô«me
, 
«me
) \

316 
ty≥
 *
d2i_
##
	`«me
—y≥ **
a
, c⁄° **
ö
, 
Àn
); \

317 
i2d_
##
	`«me
(
ty≥
 *
a
, **
out
); \

318 
	`DECLARE_ASN1_ITEM
(
ô«me
)

	)

320 
	#DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
ty≥
, 
«me
) \

321 
ty≥
 *
d2i_
##
	`«me
—y≥ **
a
, c⁄° **
ö
, 
Àn
); \

322 
i2d_
##
	`«me
(c⁄° 
ty≥
 *
a
, **
out
); \

323 
	`DECLARE_ASN1_ITEM
(
«me
)

	)

325 
	#DECLARE_ASN1_NDEF_FUNCTION
(
«me
) \

326 
i2d_
##
«me
##
	`_NDEF
“amê*
a
, **
out
);

	)

328 
	#DECLARE_ASN1_FUNCTIONS_c⁄°
(
«me
) \

329 
	`DECLARE_ASN1_ALLOC_FUNCTIONS
(
«me
) \

330 
	`DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
«me
,Çame)

	)

332 
	#DECLARE_ASN1_ALLOC_FUNCTIONS_«me
(
ty≥
, 
«me
) \

333 
ty≥
 *
«me
##
	`_√w
(); \

334 
«me
##
	`_‰ì
(
ty≥
 *
a
);

	)

336 
	#DECLARE_ASN1_PRINT_FUNCTION
(
°«me
) \

337 
	`DECLARE_ASN1_PRINT_FUNCTION_‚ame
(
°«me
, säame)

	)

339 
	#DECLARE_ASN1_PRINT_FUNCTION_‚ame
(
°«me
, 
‚ame
) \

340 
‚ame
##
	`_¥öt_˘x
(
BIO
 *
out
, 
°«me
 *
x
, 
ödít
, \

341 c⁄° 
ASN1_PCTX
 *
p˘x
);

	)

343 
	#D2I_OF
(
ty≥
Ëty≥ *(*)—y≥ **,c⁄° **,)

	)

344 
	#I2D_OF
(
ty≥
Ë(*)—y≥ *,**)

	)

345 
	#I2D_OF_c⁄°
(
ty≥
Ë(*)(c⁄°Åy≥ *,**)

	)

347 
	#CHECKED_D2I_OF
(
ty≥
, 
d2i
) \

348 ((
d2i_of_void
*Ë(1 ? 
d2i
 : ((
	`D2I_OF
(
ty≥
))0)))

	)

349 
	#CHECKED_I2D_OF
(
ty≥
, 
i2d
) \

350 ((
i2d_of_void
*Ë(1 ? 
i2d
 : ((
	`I2D_OF
(
ty≥
))0)))

	)

351 
	#CHECKED_NEW_OF
(
ty≥
, 
x√w
) \

352 ((*(*)()Ë(1 ? 
x√w
 : ((
ty≥
 *(*)())0)))

	)

353 
	#CHECKED_PTR_OF
(
ty≥
, 
p
) \

354 ((*Ë(1 ? 
p
 : (
ty≥
*)0))

	)

355 
	#CHECKED_PPTR_OF
(
ty≥
, 
p
) \

356 ((**Ë(1 ? 
p
 : (
ty≥
**)0))

	)

358 
	#TYPEDEF_D2I_OF
(
ty≥
Ëty≥ *
	td2i_of_
##
	tty≥
—y≥ **,c⁄° **,)

	)

359 
	tTYPEDEF_I2D_OF
(
	tty≥
Ë
	ti2d_of_
##ty≥—y≥ *,**)

	)

360 
	tTYPEDEF_D2I2D_OF
(
	tty≥
Ë
	tTYPEDEF_D2I_OF
—y≥); 
	`TYPEDEF_I2D_OF
(
ty≥
)

	)

362 
TYPEDEF_D2I2D_OF
();

399 #i‚de‡
OPENSSL_EXPORT_VAR_AS_FUNCTION


402 c⁄° 
	tASN1_ITEM
 
	tASN1_ITEM_EXP
;

405 
	#ASN1_ITEM_±r
(
ùå
Ë(ùå)

	)

408 
	#ASN1_ITEM_ªf
(
ùå
Ë(&(ùå##
_ô
))

	)

410 
	#ASN1_ITEM_Ωå
(
ªf
Ë(&‘ef##
_ô
))

	)

412 
	#DECLARE_ASN1_ITEM
(
«me
) \

413 
OPENSSL_EXTERN
 c⁄° 
ASN1_ITEM
 
«me
##
_ô
;

	)

422 c⁄° 
	tASN1_ITEM
 * 
	tASN1_ITEM_EXP
();

425 
	#ASN1_ITEM_±r
(
ùå
Ë(
	`ùå
())

	)

428 
	#ASN1_ITEM_ªf
(
ùå
Ë(ùå##
_ô
)

	)

430 
	#ASN1_ITEM_Ωå
(
ªf
Ë‘ef##
	`_ô
())

	)

432 
	#DECLARE_ASN1_ITEM
(
«me
) \

433 c⁄° 
ASN1_ITEM
 * 
«me
##
	`_ô
();

	)

444 
	#ASN1_STRFLGS_ESC_2253
 1

	)

445 
	#ASN1_STRFLGS_ESC_CTRL
 2

	)

446 
	#ASN1_STRFLGS_ESC_MSB
 4

	)

454 
	#ASN1_STRFLGS_ESC_QUOTE
 8

	)

460 
	#CHARTYPE_PRINTABLESTRING
 0x10

	)

462 
	#CHARTYPE_FIRST_ESC_2253
 0x20

	)

464 
	#CHARTYPE_LAST_ESC_2253
 0x40

	)

474 
	#ASN1_STRFLGS_UTF8_CONVERT
 0x10

	)

481 
	#ASN1_STRFLGS_IGNORE_TYPE
 0x20

	)

484 
	#ASN1_STRFLGS_SHOW_TYPE
 0x40

	)

494 
	#ASN1_STRFLGS_DUMP_ALL
 0x80

	)

495 
	#ASN1_STRFLGS_DUMP_UNKNOWN
 0x100

	)

502 
	#ASN1_STRFLGS_DUMP_DER
 0x200

	)

509 
	#ASN1_STRFLGS_RFC2253
 (
ASN1_STRFLGS_ESC_2253
 | \

510 
ASN1_STRFLGS_ESC_CTRL
 | \

511 
ASN1_STRFLGS_ESC_MSB
 | \

512 
ASN1_STRFLGS_UTF8_CONVERT
 | \

513 
ASN1_STRFLGS_DUMP_UNKNOWN
 | \

514 
ASN1_STRFLGS_DUMP_DER
)

	)

516 
DECLARE_STACK_OF
(
ASN1_INTEGER
)

517 
DECLARE_ASN1_SET_OF
(
ASN1_INTEGER
)

519 
DECLARE_STACK_OF
(
ASN1_GENERALSTRING
)

521 
	sa¢1_ty≥_°


523 
ty≥
;

525 *
±r
;

526 
ASN1_BOOLEAN
 
boﬁón
;

527 
ASN1_STRING
 * 
a¢1_°rög
;

528 
ASN1_OBJECT
 * 
obje˘
;

529 
ASN1_INTEGER
 * 
öãgî
;

530 
ASN1_ENUMERATED
 * 
íumî©ed
;

531 
ASN1_BIT_STRING
 * 
bô_°rög
;

532 
ASN1_OCTET_STRING
 * 
o˘ë_°rög
;

533 
ASN1_PRINTABLESTRING
 * 
¥öèbÀ°rög
;

534 
ASN1_T61STRING
 * 
t61°rög
;

535 
ASN1_IA5STRING
 * 
ü5°rög
;

536 
ASN1_GENERALSTRING
 * 
gíîÆ°rög
;

537 
ASN1_BMPSTRING
 * 
bmp°rög
;

538 
ASN1_UNIVERSALSTRING
 * 
univîßl°rög
;

539 
ASN1_UTCTIME
 * 
ut˘ime
;

540 
ASN1_GENERALIZEDTIME
 * 
gíîÆizedtime
;

541 
ASN1_VISIBLESTRING
 * 
visibÀ°rög
;

542 
ASN1_UTF8STRING
 * 
utf8°rög
;

545 
ASN1_STRING
 * 
£t
;

546 
ASN1_STRING
 * 
£quí˚
;

547 
ASN1_VALUE
 * 
a¢1_vÆue
;

548 } 
vÆue
;

549 } 
	tASN1_TYPE
;

551 
DECLARE_STACK_OF
(
ASN1_TYPE
)

552 
DECLARE_ASN1_SET_OF
(
ASN1_TYPE
)

554 
STACK_OF
(
	tASN1_TYPE
Ë
	tASN1_SEQUENCE_ANY
;

556 
DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
ASN1_SEQUENCE_ANY
, ASN1_SEQUENCE_ANY)

557 
DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
ASN1_SEQUENCE_ANY
, 
ASN1_SET_ANY
)

559 
	sNETSCAPE_X509_°


561 
ASN1_OCTET_STRING
 *
hódî
;

562 
X509
 *
˚π
;

563 } 
	tNETSCAPE_X509
;

566 
	sBIT_STRING_BITNAME_°
 {

567 
bônum
;

568 c⁄° *
 ame
;

569 c⁄° *
¢ame
;

570 } 
	tBIT_STRING_BITNAME
;

573 
	#M_ASN1_STRING_Àngth
(
x
Ë((x)->
Àngth
)

	)

574 
	#M_ASN1_STRING_Àngth_£t
(
x
, 
n
Ë((x)->
Àngth
 = (n))

	)

575 
	#M_ASN1_STRING_ty≥
(
x
Ë((x)->
ty≥
)

	)

576 
	#M_ASN1_STRING_d©a
(
x
Ë((x)->
d©a
)

	)

579 
	#M_ASN1_BIT_STRING_√w
(Ë(
ASN1_BIT_STRING
 *)\

580 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_BIT_STRING
)

	)

581 
	#M_ASN1_BIT_STRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

582 
	#M_ASN1_BIT_STRING_dup
(
a
Ë(
ASN1_BIT_STRING
 *)\

583 
	`ASN1_STRING_dup
((c⁄° 
ASN1_STRING
 *)
a
)

	)

584 
	#M_ASN1_BIT_STRING_cmp
(
a
,
b
Ë
	`ASN1_STRING_cmp
(\

585 (c⁄° 
ASN1_STRING
 *)
a
,(c⁄° ASN1_STRING *)
b
)

	)

586 
	#M_ASN1_BIT_STRING_£t
(
a
,
b
,
c
Ë
	`ASN1_STRING_£t
((
ASN1_STRING
 *Ô,b,c)

	)

588 
	#M_ASN1_INTEGER_√w
(Ë(
ASN1_INTEGER
 *)\

589 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_INTEGER
)

	)

590 
	#M_ASN1_INTEGER_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

591 
	#M_ASN1_INTEGER_dup
(
a
Ë(
ASN1_INTEGER
 *)\

592 
	`ASN1_STRING_dup
((c⁄° 
ASN1_STRING
 *)
a
)

	)

593 
	#M_ASN1_INTEGER_cmp
(
a
,
b
Ë
	`ASN1_STRING_cmp
(\

594 (c⁄° 
ASN1_STRING
 *)
a
,(c⁄° ASN1_STRING *)
b
)

	)

596 
	#M_ASN1_ENUMERATED_√w
(Ë(
ASN1_ENUMERATED
 *)\

597 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_ENUMERATED
)

	)

598 
	#M_ASN1_ENUMERATED_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

599 
	#M_ASN1_ENUMERATED_dup
(
a
Ë(
ASN1_ENUMERATED
 *)\

600 
	`ASN1_STRING_dup
((c⁄° 
ASN1_STRING
 *)
a
)

	)

601 
	#M_ASN1_ENUMERATED_cmp
(
a
,
b
Ë
	`ASN1_STRING_cmp
(\

602 (c⁄° 
ASN1_STRING
 *)
a
,(c⁄° ASN1_STRING *)
b
)

	)

604 
	#M_ASN1_OCTET_STRING_√w
(Ë(
ASN1_OCTET_STRING
 *)\

605 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_OCTET_STRING
)

	)

606 
	#M_ASN1_OCTET_STRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

607 
	#M_ASN1_OCTET_STRING_dup
(
a
Ë(
ASN1_OCTET_STRING
 *)\

608 
	`ASN1_STRING_dup
((c⁄° 
ASN1_STRING
 *)
a
)

	)

609 
	#M_ASN1_OCTET_STRING_cmp
(
a
,
b
Ë
	`ASN1_STRING_cmp
(\

610 (c⁄° 
ASN1_STRING
 *)
a
,(c⁄° ASN1_STRING *)
b
)

	)

611 
	#M_ASN1_OCTET_STRING_£t
(
a
,
b
,
c
Ë
	`ASN1_STRING_£t
((
ASN1_STRING
 *Ô,b,c)

	)

612 
	#M_ASN1_OCTET_STRING_¥öt
(
a
,
b
Ë
	`ASN1_STRING_¥öt
◊,(
ASN1_STRING
 *)b)

	)

613 
	#M_i2d_ASN1_OCTET_STRING
(
a
,
µ
) \

614 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_OCTET_STRING
,\

615 
V_ASN1_UNIVERSAL
)

	)

617 
	#B_ASN1_TIME
 \

618 
B_ASN1_UTCTIME
 | \

619 
B_ASN1_GENERALIZEDTIME


	)

621 
	#B_ASN1_PRINTABLE
 \

622 
B_ASN1_NUMERICSTRING
| \

623 
B_ASN1_PRINTABLESTRING
| \

624 
B_ASN1_T61STRING
| \

625 
B_ASN1_IA5STRING
| \

626 
B_ASN1_BIT_STRING
| \

627 
B_ASN1_UNIVERSALSTRING
|\

628 
B_ASN1_BMPSTRING
|\

629 
B_ASN1_UTF8STRING
|\

630 
B_ASN1_SEQUENCE
|\

631 
B_ASN1_UNKNOWN


	)

633 
	#B_ASN1_DIRECTORYSTRING
 \

634 
B_ASN1_PRINTABLESTRING
| \

635 
B_ASN1_TELETEXSTRING
|\

636 
B_ASN1_BMPSTRING
|\

637 
B_ASN1_UNIVERSALSTRING
|\

638 
B_ASN1_UTF8STRING


	)

640 
	#B_ASN1_DISPLAYTEXT
 \

641 
B_ASN1_IA5STRING
| \

642 
B_ASN1_VISIBLESTRING
| \

643 
B_ASN1_BMPSTRING
|\

644 
B_ASN1_UTF8STRING


	)

646 
	#M_ASN1_PRINTABLE_√w
(Ë
	`ASN1_STRING_ty≥_√w
(
V_ASN1_T61STRING
)

	)

647 
	#M_ASN1_PRINTABLE_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

648 
	#M_i2d_ASN1_PRINTABLE
(
a
,
µ
Ë
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)a,\

649 
µ
,
a
->
ty≥
,
V_ASN1_UNIVERSAL
)

	)

650 
	#M_d2i_ASN1_PRINTABLE
(
a
,
µ
,
l
) \

651 
	`d2i_ASN1_ty≥_byãs
((
ASN1_STRING
 **)
a
,
µ
,
l
, \

652 
B_ASN1_PRINTABLE
)

	)

654 
	#M_DIRECTORYSTRING_√w
(Ë
	`ASN1_STRING_ty≥_√w
(
V_ASN1_PRINTABLESTRING
)

	)

655 
	#M_DIRECTORYSTRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

656 
	#M_i2d_DIRECTORYSTRING
(
a
,
µ
Ë
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)a,\

657 
µ
,
a
->
ty≥
,
V_ASN1_UNIVERSAL
)

	)

658 
	#M_d2i_DIRECTORYSTRING
(
a
,
µ
,
l
) \

659 
	`d2i_ASN1_ty≥_byãs
((
ASN1_STRING
 **)
a
,
µ
,
l
, \

660 
B_ASN1_DIRECTORYSTRING
)

	)

662 
	#M_DISPLAYTEXT_√w
(Ë
	`ASN1_STRING_ty≥_√w
(
V_ASN1_VISIBLESTRING
)

	)

663 
	#M_DISPLAYTEXT_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

664 
	#M_i2d_DISPLAYTEXT
(
a
,
µ
Ë
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)a,\

665 
µ
,
a
->
ty≥
,
V_ASN1_UNIVERSAL
)

	)

666 
	#M_d2i_DISPLAYTEXT
(
a
,
µ
,
l
) \

667 
	`d2i_ASN1_ty≥_byãs
((
ASN1_STRING
 **)
a
,
µ
,
l
, \

668 
B_ASN1_DISPLAYTEXT
)

	)

670 
	#M_ASN1_PRINTABLESTRING_√w
(Ë(
ASN1_PRINTABLESTRING
 *)\

671 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_PRINTABLESTRING
)

	)

672 
	#M_ASN1_PRINTABLESTRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

673 
	#M_i2d_ASN1_PRINTABLESTRING
(
a
,
µ
) \

674 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_PRINTABLESTRING
,\

675 
V_ASN1_UNIVERSAL
)

	)

676 
	#M_d2i_ASN1_PRINTABLESTRING
(
a
,
µ
,
l
) \

677 (
ASN1_PRINTABLESTRING
 *)
d2i_ASN1_ty≥_byãs
\

678 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_PRINTABLESTRING
)

	)

680 
	#M_ASN1_T61STRING_√w
(Ë(
ASN1_T61STRING
 *)\

681 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_T61STRING
)

	)

682 
	#M_ASN1_T61STRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

683 
	#M_i2d_ASN1_T61STRING
(
a
,
µ
) \

684 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_T61STRING
,\

685 
V_ASN1_UNIVERSAL
)

	)

686 
	#M_d2i_ASN1_T61STRING
(
a
,
µ
,
l
) \

687 (
ASN1_T61STRING
 *)
d2i_ASN1_ty≥_byãs
\

688 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_T61STRING
)

	)

690 
	#M_ASN1_IA5STRING_√w
(Ë(
ASN1_IA5STRING
 *)\

691 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_IA5STRING
)

	)

692 
	#M_ASN1_IA5STRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

693 
	#M_ASN1_IA5STRING_dup
(
a
) \

694 (
ASN1_IA5STRING
 *)
	`ASN1_STRING_dup
((c⁄° 
ASN1_STRING
 *)
a
)

	)

695 
	#M_i2d_ASN1_IA5STRING
(
a
,
µ
) \

696 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_IA5STRING
,\

697 
V_ASN1_UNIVERSAL
)

	)

698 
	#M_d2i_ASN1_IA5STRING
(
a
,
µ
,
l
) \

699 (
ASN1_IA5STRING
 *)
	`d2i_ASN1_ty≥_byãs
((
ASN1_STRING
 **)
a
,
µ
,
l
,\

700 
B_ASN1_IA5STRING
)

	)

702 
	#M_ASN1_UTCTIME_√w
(Ë(
ASN1_UTCTIME
 *)\

703 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_UTCTIME
)

	)

704 
	#M_ASN1_UTCTIME_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

705 
	#M_ASN1_UTCTIME_dup
(
a
Ë(
ASN1_UTCTIME
 *)\

706 
	`ASN1_STRING_dup
((c⁄° 
ASN1_STRING
 *)
a
)

	)

708 
	#M_ASN1_GENERALIZEDTIME_√w
(Ë(
ASN1_GENERALIZEDTIME
 *)\

709 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_GENERALIZEDTIME
)

	)

710 
	#M_ASN1_GENERALIZEDTIME_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

711 
	#M_ASN1_GENERALIZEDTIME_dup
(
a
Ë(
ASN1_GENERALIZEDTIME
 *)
	`ASN1_STRING_dup
(\

712 (c⁄° 
ASN1_STRING
 *)
a
)

	)

714 
	#M_ASN1_TIME_√w
(Ë(
ASN1_TIME
 *)\

715 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_UTCTIME
)

	)

716 
	#M_ASN1_TIME_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

717 
	#M_ASN1_TIME_dup
(
a
Ë(
ASN1_TIME
 *)\

718 
	`ASN1_STRING_dup
((c⁄° 
ASN1_STRING
 *)
a
)

	)

720 
	#M_ASN1_GENERALSTRING_√w
(Ë(
ASN1_GENERALSTRING
 *)\

721 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_GENERALSTRING
)

	)

722 
	#M_ASN1_GENERALSTRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

723 
	#M_i2d_ASN1_GENERALSTRING
(
a
,
µ
) \

724 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_GENERALSTRING
,\

725 
V_ASN1_UNIVERSAL
)

	)

726 
	#M_d2i_ASN1_GENERALSTRING
(
a
,
µ
,
l
) \

727 (
ASN1_GENERALSTRING
 *)
d2i_ASN1_ty≥_byãs
\

728 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_GENERALSTRING
)

	)

730 
	#M_ASN1_UNIVERSALSTRING_√w
(Ë(
ASN1_UNIVERSALSTRING
 *)\

731 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_UNIVERSALSTRING
)

	)

732 
	#M_ASN1_UNIVERSALSTRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

733 
	#M_i2d_ASN1_UNIVERSALSTRING
(
a
,
µ
) \

734 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_UNIVERSALSTRING
,\

735 
V_ASN1_UNIVERSAL
)

	)

736 
	#M_d2i_ASN1_UNIVERSALSTRING
(
a
,
µ
,
l
) \

737 (
ASN1_UNIVERSALSTRING
 *)
d2i_ASN1_ty≥_byãs
\

738 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_UNIVERSALSTRING
)

	)

740 
	#M_ASN1_BMPSTRING_√w
(Ë(
ASN1_BMPSTRING
 *)\

741 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_BMPSTRING
)

	)

742 
	#M_ASN1_BMPSTRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

743 
	#M_i2d_ASN1_BMPSTRING
(
a
,
µ
) \

744 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_BMPSTRING
,\

745 
V_ASN1_UNIVERSAL
)

	)

746 
	#M_d2i_ASN1_BMPSTRING
(
a
,
µ
,
l
) \

747 (
ASN1_BMPSTRING
 *)
d2i_ASN1_ty≥_byãs
\

748 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_BMPSTRING
)

	)

750 
	#M_ASN1_VISIBLESTRING_√w
(Ë(
ASN1_VISIBLESTRING
 *)\

751 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_VISIBLESTRING
)

	)

752 
	#M_ASN1_VISIBLESTRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

753 
	#M_i2d_ASN1_VISIBLESTRING
(
a
,
µ
) \

754 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_VISIBLESTRING
,\

755 
V_ASN1_UNIVERSAL
)

	)

756 
	#M_d2i_ASN1_VISIBLESTRING
(
a
,
µ
,
l
) \

757 (
ASN1_VISIBLESTRING
 *)
d2i_ASN1_ty≥_byãs
\

758 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_VISIBLESTRING
)

	)

760 
	#M_ASN1_UTF8STRING_√w
(Ë(
ASN1_UTF8STRING
 *)\

761 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_UTF8STRING
)

	)

762 
	#M_ASN1_UTF8STRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

763 
	#M_i2d_ASN1_UTF8STRING
(
a
,
µ
) \

764 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_UTF8STRING
,\

765 
V_ASN1_UNIVERSAL
)

	)

766 
	#M_d2i_ASN1_UTF8STRING
(
a
,
µ
,
l
) \

767 (
ASN1_UTF8STRING
 *)
d2i_ASN1_ty≥_byãs
\

768 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_UTF8STRING
)

	)

771 
	#IS_SEQUENCE
 0

	)

772 
	#IS_SET
 1

	)

774 
DECLARE_ASN1_FUNCTIONS_‚ame
(
ASN1_TYPE
, 
ASN1_ANY
, ASN1_TYPE)

776 
ASN1_TYPE_gë
(
ASN1_TYPE
 *
a
);

777 
ASN1_TYPE_£t
(
ASN1_TYPE
 *
a
, 
ty≥
, *
vÆue
);

778 
ASN1_TYPE_£t1
(
ASN1_TYPE
 *
a
, 
ty≥
, c⁄° *
vÆue
);

779 
ASN1_TYPE_cmp
(c⁄° 
ASN1_TYPE
 *
a
, c⁄° ASN1_TYPE *
b
);

781 
ASN1_OBJECT
 * 
ASN1_OBJECT_√w
();

782 
ASN1_OBJECT_‰ì
(
ASN1_OBJECT
 *
a
);

783 
i2d_ASN1_OBJECT
(
ASN1_OBJECT
 *
a
,**
µ
);

784 
ASN1_OBJECT
 * 
c2i_ASN1_OBJECT
(ASN1_OBJECT **
a
,c⁄° **
µ
,

785 
Àngth
);

786 
ASN1_OBJECT
 * 
d2i_ASN1_OBJECT
(ASN1_OBJECT **
a
,c⁄° **
µ
,

787 
Àngth
);

789 
DECLARE_ASN1_ITEM
(
ASN1_OBJECT
)

791 
DECLARE_STACK_OF
(
ASN1_OBJECT
)

792 
DECLARE_ASN1_SET_OF
(
ASN1_OBJECT
)

794 
ASN1_STRING
 * 
ASN1_STRING_√w
();

795 
ASN1_STRING_‰ì
(
ASN1_STRING
 *
a
);

796 
ASN1_STRING_c›y
(
ASN1_STRING
 *
d°
, c⁄° ASN1_STRING *
°r
);

797 
ASN1_STRING
 * 
ASN1_STRING_dup
(c⁄° ASN1_STRING *
a
);

798 
ASN1_STRING
 * 
ASN1_STRING_ty≥_√w
(
ty≥
 );

799 
ASN1_STRING_cmp
(c⁄° 
ASN1_STRING
 *
a
, c⁄° ASN1_STRING *
b
);

802 
ASN1_STRING_£t
(
ASN1_STRING
 *
°r
, c⁄° *
d©a
, 
Àn
);

803 
ASN1_STRING_£t0
(
ASN1_STRING
 *
°r
, *
d©a
, 
Àn
);

804 
ASN1_STRING_Àngth
(c⁄° 
ASN1_STRING
 *
x
);

805 
ASN1_STRING_Àngth_£t
(
ASN1_STRING
 *
x
, 
n
);

806 
ASN1_STRING_ty≥
(
ASN1_STRING
 *
x
);

807 * 
ASN1_STRING_d©a
(
ASN1_STRING
 *
x
);

809 
DECLARE_ASN1_FUNCTIONS
(
ASN1_BIT_STRING
)

810 
i2c_ASN1_BIT_STRING
(
ASN1_BIT_STRING
 *
a
,**
µ
);

811 
ASN1_BIT_STRING
 *
c2i_ASN1_BIT_STRING
(ASN1_BIT_STRING **
a
,c⁄° **
µ
,

812 
Àngth
);

813 
ASN1_BIT_STRING_£t
(
ASN1_BIT_STRING
 *
a
, *
d
,

814 
Àngth
 );

815 
ASN1_BIT_STRING_£t_bô
(
ASN1_BIT_STRING
 *
a
, 
n
, 
vÆue
);

816 
ASN1_BIT_STRING_gë_bô
(
ASN1_BIT_STRING
 *
a
, 
n
);

817 
ASN1_BIT_STRING_check
(
ASN1_BIT_STRING
 *
a
,

818 *
Êags
, 
Êags_Àn
);

820 #i‚de‡
OPENSSL_NO_BIO


821 
ASN1_BIT_STRING_«me_¥öt
(
BIO
 *
out
, 
ASN1_BIT_STRING
 *
bs
,

822 
BIT_STRING_BITNAME
 *
tbl
, 
ödít
);

824 
ASN1_BIT_STRING_num_asc
(*
«me
, 
BIT_STRING_BITNAME
 *
tbl
);

825 
ASN1_BIT_STRING_£t_asc
(
ASN1_BIT_STRING
 *
bs
, *
«me
, 
vÆue
,

826 
BIT_STRING_BITNAME
 *
tbl
);

828 
i2d_ASN1_BOOLEAN
(
a
,**
µ
);

829 
d2i_ASN1_BOOLEAN
(*
a
,c⁄° **
µ
,
Àngth
);

831 
DECLARE_ASN1_FUNCTIONS
(
ASN1_INTEGER
)

832 
i2c_ASN1_INTEGER
(
ASN1_INTEGER
 *
a
,**
µ
);

833 
ASN1_INTEGER
 *
c2i_ASN1_INTEGER
(ASN1_INTEGER **
a
,c⁄° **
µ
,

834 
Àngth
);

835 
ASN1_INTEGER
 *
d2i_ASN1_UINTEGER
(ASN1_INTEGER **
a
,c⁄° **
µ
,

836 
Àngth
);

837 
ASN1_INTEGER
 * 
ASN1_INTEGER_dup
(c⁄° ASN1_INTEGER *
x
);

838 
ASN1_INTEGER_cmp
(c⁄° 
ASN1_INTEGER
 *
x
, c⁄° ASN1_INTEGER *
y
);

840 
DECLARE_ASN1_FUNCTIONS
(
ASN1_ENUMERATED
)

842 
ASN1_UTCTIME_check
(
ASN1_UTCTIME
 *
a
);

843 
ASN1_UTCTIME
 *
ASN1_UTCTIME_£t
(ASN1_UTCTIME *
s
,
time_t
 
t
);

844 
ASN1_UTCTIME
 *
ASN1_UTCTIME_adj
(ASN1_UTCTIME *
s
, 
time_t
 
t
,

845 
off£t_day
, 
off£t_£c
);

846 
ASN1_UTCTIME_£t_°rög
(
ASN1_UTCTIME
 *
s
, c⁄° *
°r
);

847 
ASN1_UTCTIME_cmp_time_t
(c⁄° 
ASN1_UTCTIME
 *
s
, 
time_t
 
t
);

849 
time_t
 
ASN1_UTCTIME_gë
(c⁄° 
ASN1_UTCTIME
 *
s
);

852 
ASN1_GENERALIZEDTIME_check
(
ASN1_GENERALIZEDTIME
 *
a
);

853 
ASN1_GENERALIZEDTIME
 *
ASN1_GENERALIZEDTIME_£t
(ASN1_GENERALIZEDTIME *
s
,
time_t
 
t
);

854 
ASN1_GENERALIZEDTIME
 *
ASN1_GENERALIZEDTIME_adj
(ASN1_GENERALIZEDTIME *
s
,

855 
time_t
 
t
, 
off£t_day
, 
off£t_£c
);

856 
ASN1_GENERALIZEDTIME_£t_°rög
(
ASN1_GENERALIZEDTIME
 *
s
, c⁄° *
°r
);

858 
DECLARE_ASN1_FUNCTIONS
(
ASN1_OCTET_STRING
)

859 
ASN1_OCTET_STRING
 * 
ASN1_OCTET_STRING_dup
(c⁄° ASN1_OCTET_STRING *
a
);

860 
ASN1_OCTET_STRING_cmp
(c⁄° 
ASN1_OCTET_STRING
 *
a
, c⁄° ASN1_OCTET_STRING *
b
);

861 
ASN1_OCTET_STRING_£t
(
ASN1_OCTET_STRING
 *
°r
, c⁄° *
d©a
, 
Àn
);

863 
DECLARE_ASN1_FUNCTIONS
(
ASN1_VISIBLESTRING
)

864 
DECLARE_ASN1_FUNCTIONS
(
ASN1_UNIVERSALSTRING
)

865 
DECLARE_ASN1_FUNCTIONS
(
ASN1_UTF8STRING
)

866 
DECLARE_ASN1_FUNCTIONS
(
ASN1_NULL
)

867 
DECLARE_ASN1_FUNCTIONS
(
ASN1_BMPSTRING
)

869 
UTF8_gëc
(c⁄° *
°r
, 
Àn
, *
vÆ
);

870 
UTF8_putc
(*
°r
, 
Àn
, 
vÆue
);

872 
DECLARE_ASN1_FUNCTIONS_«me
(
ASN1_STRING
, 
ASN1_PRINTABLE
)

874 
DECLARE_ASN1_FUNCTIONS_«me
(
ASN1_STRING
, 
DIRECTORYSTRING
)

875 
DECLARE_ASN1_FUNCTIONS_«me
(
ASN1_STRING
, 
DISPLAYTEXT
)

876 
DECLARE_ASN1_FUNCTIONS
(
ASN1_PRINTABLESTRING
)

877 
DECLARE_ASN1_FUNCTIONS
(
ASN1_T61STRING
)

878 
DECLARE_ASN1_FUNCTIONS
(
ASN1_IA5STRING
)

879 
DECLARE_ASN1_FUNCTIONS
(
ASN1_GENERALSTRING
)

880 
DECLARE_ASN1_FUNCTIONS
(
ASN1_UTCTIME
)

881 
DECLARE_ASN1_FUNCTIONS
(
ASN1_GENERALIZEDTIME
)

882 
DECLARE_ASN1_FUNCTIONS
(
ASN1_TIME
)

884 
DECLARE_ASN1_ITEM
(
ASN1_OCTET_STRING_NDEF
)

886 
ASN1_TIME
 *
ASN1_TIME_£t
(ASN1_TIME *
s
,
time_t
 
t
);

887 
ASN1_TIME
 *
ASN1_TIME_adj
(ASN1_TIME *
s
,
time_t
 
t
,

888 
off£t_day
, 
off£t_£c
);

889 
ASN1_TIME_check
(
ASN1_TIME
 *
t
);

890 
ASN1_GENERALIZEDTIME
 *
ASN1_TIME_to_gíîÆizedtime
(
ASN1_TIME
 *
t
, ASN1_GENERALIZEDTIME **
out
);

891 
ASN1_TIME_£t_°rög
(
ASN1_TIME
 *
s
, c⁄° *
°r
);

893 
i2d_ASN1_SET
(
STACK_OF
(
OPENSSL_BLOCK
Ë*
a
, **
µ
,

894 
i2d_of_void
 *
i2d
, 
ex_èg
, 
ex_˛ass
,

895 
is_£t
);

896 
STACK_OF
(
OPENSSL_BLOCK
Ë*
d2i_ASN1_SET
(STACK_OF(OPENSSL_BLOCKË**
a
,

897 c⁄° **
µ
,

898 
Àngth
, 
d2i_of_void
 *
d2i
,

899 (*
‰ì_func
)(
OPENSSL_BLOCK
), 
ex_èg
,

900 
ex_˛ass
);

902 #i‚de‡
OPENSSL_NO_BIO


903 
i2a_ASN1_INTEGER
(
BIO
 *
bp
, 
ASN1_INTEGER
 *
a
);

904 
a2i_ASN1_INTEGER
(
BIO
 *
bp
,
ASN1_INTEGER
 *
bs
,*
buf
,
size
);

905 
i2a_ASN1_ENUMERATED
(
BIO
 *
bp
, 
ASN1_ENUMERATED
 *
a
);

906 
a2i_ASN1_ENUMERATED
(
BIO
 *
bp
,
ASN1_ENUMERATED
 *
bs
,*
buf
,
size
);

907 
i2a_ASN1_OBJECT
(
BIO
 *
bp
,
ASN1_OBJECT
 *
a
);

908 
a2i_ASN1_STRING
(
BIO
 *
bp
,
ASN1_STRING
 *
bs
,*
buf
,
size
);

909 
i2a_ASN1_STRING
(
BIO
 *
bp
, 
ASN1_STRING
 *
a
, 
ty≥
);

911 
i2t_ASN1_OBJECT
(*
buf
,
buf_Àn
,
ASN1_OBJECT
 *
a
);

913 
a2d_ASN1_OBJECT
(*
out
,
ﬁí
, c⁄° *
buf
, 
num
);

914 
ASN1_OBJECT
 *
ASN1_OBJECT_¸óã
(
nid
, *
d©a
,
Àn
,

915 c⁄° *
¢
, c⁄° *
 
);

917 
ASN1_INTEGER_£t
(
ASN1_INTEGER
 *
a
, 
v
);

918 
ASN1_INTEGER_gë
(c⁄° 
ASN1_INTEGER
 *
a
);

919 
ASN1_INTEGER
 *
BN_to_ASN1_INTEGER
(c⁄° 
BIGNUM
 *
bn
, ASN1_INTEGER *
ai
);

920 
BIGNUM
 *
ASN1_INTEGER_to_BN
(c⁄° 
ASN1_INTEGER
 *
ai
,BIGNUM *
bn
);

922 
ASN1_ENUMERATED_£t
(
ASN1_ENUMERATED
 *
a
, 
v
);

923 
ASN1_ENUMERATED_gë
(
ASN1_ENUMERATED
 *
a
);

924 
ASN1_ENUMERATED
 *
BN_to_ASN1_ENUMERATED
(
BIGNUM
 *
bn
, ASN1_ENUMERATED *
ai
);

925 
BIGNUM
 *
ASN1_ENUMERATED_to_BN
(
ASN1_ENUMERATED
 *
ai
,BIGNUM *
bn
);

929 
ASN1_PRINTABLE_ty≥
(c⁄° *
s
, 
max
);

931 
i2d_ASN1_byãs
(
ASN1_STRING
 *
a
, **
µ
, 
èg
, 
x˛ass
);

932 
ASN1_STRING
 *
d2i_ASN1_byãs
(ASN1_STRING **
a
, c⁄° **
µ
,

933 
Àngth
, 
Pèg
, 
P˛ass
);

934 
ASN1_èg2bô
(
èg
);

936 
ASN1_STRING
 *
d2i_ASN1_ty≥_byãs
(ASN1_STRING **
a
,c⁄° **
µ
,

937 
Àngth
,
ty≥
);

940 
a¢1_Föish
(
ASN1_CTX
 *
c
);

941 
a¢1_c⁄°_Föish
(
ASN1_c⁄°_CTX
 *
c
);

944 
ASN1_gë_obje˘
(c⁄° **
µ
, *
∂ígth
, *
±ag
,

945 *
p˛ass
, 
omax
);

946 
ASN1_check_öföôe_íd
(**
p
,
Àn
);

947 
ASN1_c⁄°_check_öföôe_íd
(c⁄° **
p
,
Àn
);

948 
ASN1_put_obje˘
(**
µ
, 
c⁄°ru˘ed
, 
Àngth
,

949 
èg
, 
x˛ass
);

950 
ASN1_put_eoc
(**
µ
);

951 
ASN1_obje˘_size
(
c⁄°ru˘ed
, 
Àngth
, 
èg
);

954 *
ASN1_dup
(
i2d_of_void
 *
i2d
, 
d2i_of_void
 *
d2i
, *
x
);

956 
	#ASN1_dup_of
(
ty≥
,
i2d
,
d2i
,
x
) \

957 ((
ty≥
*)
	`ASN1_dup
(
	`CHECKED_I2D_OF
—y≥, 
i2d
), \

958 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i
), \

959 
	`CHECKED_PTR_OF
(
ty≥
, 
x
)))

	)

961 
	#ASN1_dup_of_c⁄°
(
ty≥
,
i2d
,
d2i
,
x
) \

962 ((
ty≥
*)
	`ASN1_dup
(
	`CHECKED_I2D_OF
(c⁄°Åy≥, 
i2d
), \

963 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i
), \

964 
	`CHECKED_PTR_OF
(c⁄° 
ty≥
, 
x
)))

	)

966 *
ASN1_ôem_dup
(c⁄° 
ASN1_ITEM
 *
ô
, *
x
);

970 
	#M_ASN1_√w_of
(
ty≥
Ë—y≥ *)
	`ASN1_ôem_√w
(
	`ASN1_ITEM_Ωå
—y≥))

	)

971 
	#M_ASN1_‰ì_of
(
x
, 
ty≥
) \

972 
	`ASN1_ôem_‰ì
(
	`CHECKED_PTR_OF
(
ty≥
, 
x
), 
	`ASN1_ITEM_Ωå
—y≥))

	)

974 #i‚de‡
OPENSSL_NO_FP_API


975 *
ASN1_d2i_Â
(*(*
x√w
)(), 
d2i_of_void
 *
d2i
, 
FILE
 *
ö
, **
x
);

977 
	#ASN1_d2i_Â_of
(
ty≥
,
x√w
,
d2i
,
ö
,
x
) \

978 ((
ty≥
*)
	`ASN1_d2i_Â
(
	`CHECKED_NEW_OF
—y≥, 
x√w
), \

979 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i
), \

980 
ö
, \

981 
	`CHECKED_PPTR_OF
(
ty≥
, 
x
)))

	)

983 *
ASN1_ôem_d2i_Â
(c⁄° 
ASN1_ITEM
 *
ô
, 
FILE
 *
ö
, *
x
);

984 
ASN1_i2d_Â
(
i2d_of_void
 *
i2d
,
FILE
 *
out
,*
x
);

986 
	#ASN1_i2d_Â_of
(
ty≥
,
i2d
,
out
,
x
) \

987 (
	`ASN1_i2d_Â
(
	`CHECKED_I2D_OF
(
ty≥
, 
i2d
), \

988 
out
, \

989 
	`CHECKED_PTR_OF
(
ty≥
, 
x
)))

	)

991 
	#ASN1_i2d_Â_of_c⁄°
(
ty≥
,
i2d
,
out
,
x
) \

992 (
	`ASN1_i2d_Â
(
	`CHECKED_I2D_OF
(c⁄° 
ty≥
, 
i2d
), \

993 
out
, \

994 
	`CHECKED_PTR_OF
(c⁄° 
ty≥
, 
x
)))

	)

996 
ASN1_ôem_i2d_Â
(c⁄° 
ASN1_ITEM
 *
ô
, 
FILE
 *
out
, *
x
);

997 
ASN1_STRING_¥öt_ex_Â
(
FILE
 *
Â
, 
ASN1_STRING
 *
°r
, 
Êags
);

1000 
ASN1_STRING_to_UTF8
(**
out
, 
ASN1_STRING
 *
ö
);

1002 #i‚de‡
OPENSSL_NO_BIO


1003 *
ASN1_d2i_bio
(*(*
x√w
)(), 
d2i_of_void
 *
d2i
, 
BIO
 *
ö
, **
x
);

1005 
	#ASN1_d2i_bio_of
(
ty≥
,
x√w
,
d2i
,
ö
,
x
) \

1006 ((
ty≥
*)
	`ASN1_d2i_bio
–
	`CHECKED_NEW_OF
—y≥, 
x√w
), \

1007 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i
), \

1008 
ö
, \

1009 
	`CHECKED_PPTR_OF
(
ty≥
, 
x
)))

	)

1011 *
ASN1_ôem_d2i_bio
(c⁄° 
ASN1_ITEM
 *
ô
, 
BIO
 *
ö
, *
x
);

1012 
ASN1_i2d_bio
(
i2d_of_void
 *
i2d
,
BIO
 *
out
, *
x
);

1014 
	#ASN1_i2d_bio_of
(
ty≥
,
i2d
,
out
,
x
) \

1015 (
	`ASN1_i2d_bio
(
	`CHECKED_I2D_OF
(
ty≥
, 
i2d
), \

1016 
out
, \

1017 
	`CHECKED_PTR_OF
(
ty≥
, 
x
)))

	)

1019 
	#ASN1_i2d_bio_of_c⁄°
(
ty≥
,
i2d
,
out
,
x
) \

1020 (
	`ASN1_i2d_bio
(
	`CHECKED_I2D_OF
(c⁄° 
ty≥
, 
i2d
), \

1021 
out
, \

1022 
	`CHECKED_PTR_OF
(c⁄° 
ty≥
, 
x
)))

	)

1024 
ASN1_ôem_i2d_bio
(c⁄° 
ASN1_ITEM
 *
ô
, 
BIO
 *
out
, *
x
);

1025 
ASN1_UTCTIME_¥öt
(
BIO
 *
Â
, c⁄° 
ASN1_UTCTIME
 *
a
);

1026 
ASN1_GENERALIZEDTIME_¥öt
(
BIO
 *
Â
, c⁄° 
ASN1_GENERALIZEDTIME
 *
a
);

1027 
ASN1_TIME_¥öt
(
BIO
 *
Â
, c⁄° 
ASN1_TIME
 *
a
);

1028 
ASN1_STRING_¥öt
(
BIO
 *
bp
, c⁄° 
ASN1_STRING
 *
v
);

1029 
ASN1_STRING_¥öt_ex
(
BIO
 *
out
, 
ASN1_STRING
 *
°r
, 
Êags
);

1030 
ASN1_bn_¥öt
(
BIO
 *
bp
, c⁄° *
numbî
, c⁄° 
BIGNUM
 *
num
,

1031 *
buf
, 
off
);

1032 
ASN1_∑r£
(
BIO
 *
bp
,c⁄° *
µ
,
Àn
,
ödít
);

1033 
ASN1_∑r£_dump
(
BIO
 *
bp
,c⁄° *
µ
,
Àn
,
ödít
,
dump
);

1035 c⁄° *
ASN1_èg2°r
(
èg
);

1039 
DECLARE_ASN1_FUNCTIONS
(
NETSCAPE_X509
)

1041 
ASN1_UNIVERSALSTRING_to_°rög
(
ASN1_UNIVERSALSTRING
 *
s
);

1043 
ASN1_TYPE_£t_o˘ë°rög
(
ASN1_TYPE
 *
a
,

1044 *
d©a
, 
Àn
);

1045 
ASN1_TYPE_gë_o˘ë°rög
(
ASN1_TYPE
 *
a
,

1046 *
d©a
, 
max_Àn
);

1047 
ASN1_TYPE_£t_öt_o˘ë°rög
(
ASN1_TYPE
 *
a
, 
num
,

1048 *
d©a
, 
Àn
);

1049 
ASN1_TYPE_gë_öt_o˘ë°rög
(
ASN1_TYPE
 *
a
,*
num
,

1050 *
d©a
, 
max_Àn
);

1052 
STACK_OF
(
OPENSSL_BLOCK
Ë*
ASN1_£q_u≈ack
(c⁄° *
buf
, 
Àn
,

1053 
d2i_of_void
 *
d2i
, (*
‰ì_func
)(
OPENSSL_BLOCK
));

1054 *
ASN1_£q_∑ck
(
STACK_OF
(
OPENSSL_BLOCK
Ë*
ß„s
, 
i2d_of_void
 *
i2d
,

1055 **
buf
, *
Àn
 );

1056 *
ASN1_u≈ack_°rög
(
ASN1_STRING
 *
o˘
, 
d2i_of_void
 *
d2i
);

1057 *
ASN1_ôem_u≈ack
(
ASN1_STRING
 *
o˘
, c⁄° 
ASN1_ITEM
 *
ô
);

1058 
ASN1_STRING
 *
ASN1_∑ck_°rög
(*
obj
, 
i2d_of_void
 *
i2d
,

1059 
ASN1_OCTET_STRING
 **
o˘
);

1061 
	#ASN1_∑ck_°rög_of
(
ty≥
,
obj
,
i2d
,
o˘
) \

1062 (
	`ASN1_∑ck_°rög
(
	`CHECKED_PTR_OF
(
ty≥
, 
obj
), \

1063 
	`CHECKED_I2D_OF
(
ty≥
, 
i2d
), \

1064 
o˘
))

	)

1066 
ASN1_STRING
 *
ASN1_ôem_∑ck
(*
obj
, c⁄° 
ASN1_ITEM
 *
ô
, 
ASN1_OCTET_STRING
 **
o˘
);

1068 
ASN1_STRING_£t_deÁu…_mask
(
mask
);

1069 
ASN1_STRING_£t_deÁu…_mask_asc
(c⁄° *
p
);

1070 
ASN1_STRING_gë_deÁu…_mask
();

1071 
ASN1_mb°rög_c›y
(
ASN1_STRING
 **
out
, c⁄° *
ö
, 
Àn
,

1072 
öf‹m
, 
mask
);

1073 
ASN1_mb°rög_nc›y
(
ASN1_STRING
 **
out
, c⁄° *
ö
, 
Àn
,

1074 
öf‹m
, 
mask
,

1075 
mösize
, 
maxsize
);

1077 
ASN1_STRING
 *
ASN1_STRING_£t_by_NID
(ASN1_STRING **
out
,

1078 c⁄° *
ö
, 
öÀn
, 
öf‹m
, 
nid
);

1079 
ASN1_STRING_TABLE
 *
ASN1_STRING_TABLE_gë
(
nid
);

1080 
ASN1_STRING_TABLE_add
(, , , , );

1081 
ASN1_STRING_TABLE_˛ónup
();

1086 
ASN1_VALUE
 *
ASN1_ôem_√w
(c⁄° 
ASN1_ITEM
 *
ô
);

1087 
ASN1_ôem_‰ì
(
ASN1_VALUE
 *
vÆ
, c⁄° 
ASN1_ITEM
 *
ô
);

1088 
ASN1_VALUE
 * 
ASN1_ôem_d2i
(ASN1_VALUE **
vÆ
, c⁄° **
ö
, 
Àn
, c⁄° 
ASN1_ITEM
 *
ô
);

1089 
ASN1_ôem_i2d
(
ASN1_VALUE
 *
vÆ
, **
out
, c⁄° 
ASN1_ITEM
 *
ô
);

1090 
ASN1_ôem_ndef_i2d
(
ASN1_VALUE
 *
vÆ
, **
out
, c⁄° 
ASN1_ITEM
 *
ô
);

1092 
ASN1_add_oid_moduÀ
();

1094 
ASN1_TYPE
 *
ASN1_gíî©e_nc⁄f
(*
°r
, 
CONF
 *
nc⁄f
);

1095 
ASN1_TYPE
 *
ASN1_gíî©e_v3
(*
°r
, 
X509V3_CTX
 *
˙f
);

1100 
	#ASN1_PCTX_FLAGS_SHOW_ABSENT
 0x001

	)

1102 
	#ASN1_PCTX_FLAGS_SHOW_SEQUENCE
 0x002

	)

1104 
	#ASN1_PCTX_FLAGS_SHOW_SSOF
 0x004

	)

1106 
	#ASN1_PCTX_FLAGS_SHOW_TYPE
 0x008

	)

1108 
	#ASN1_PCTX_FLAGS_NO_ANY_TYPE
 0x010

	)

1110 
	#ASN1_PCTX_FLAGS_NO_MSTRING_TYPE
 0x020

	)

1112 
	#ASN1_PCTX_FLAGS_NO_FIELD_NAME
 0x040

	)

1114 
	#ASN1_PCTX_FLAGS_SHOW_FIELD_STRUCT_NAME
 0x080

	)

1116 
	#ASN1_PCTX_FLAGS_NO_STRUCT_NAME
 0x100

	)

1118 
ASN1_ôem_¥öt
(
BIO
 *
out
, 
ASN1_VALUE
 *
iÊd
, 
ödít
,

1119 c⁄° 
ASN1_ITEM
 *
ô
, c⁄° 
ASN1_PCTX
 *
p˘x
);

1120 
ASN1_PCTX
 *
ASN1_PCTX_√w
();

1121 
ASN1_PCTX_‰ì
(
ASN1_PCTX
 *
p
);

1122 
ASN1_PCTX_gë_Êags
(
ASN1_PCTX
 *
p
);

1123 
ASN1_PCTX_£t_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

1124 
ASN1_PCTX_gë_nm_Êags
(
ASN1_PCTX
 *
p
);

1125 
ASN1_PCTX_£t_nm_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

1126 
ASN1_PCTX_gë_˚π_Êags
(
ASN1_PCTX
 *
p
);

1127 
ASN1_PCTX_£t_˚π_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

1128 
ASN1_PCTX_gë_oid_Êags
(
ASN1_PCTX
 *
p
);

1129 
ASN1_PCTX_£t_oid_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

1130 
ASN1_PCTX_gë_°r_Êags
(
ASN1_PCTX
 *
p
);

1131 
ASN1_PCTX_£t_°r_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

1133 
BIO_METHOD
 *
BIO_f_a¢1
();

1135 
BIO
 *
BIO_√w_NDEF
(BIO *
out
, 
ASN1_VALUE
 *
vÆ
, c⁄° 
ASN1_ITEM
 *
ô
);

1137 
i2d_ASN1_bio_°ªam
(
BIO
 *
out
, 
ASN1_VALUE
 *
vÆ
, BIO *
ö
, 
Êags
,

1138 c⁄° 
ASN1_ITEM
 *
ô
);

1139 
PEM_wrôe_bio_ASN1_°ªam
(
BIO
 *
out
, 
ASN1_VALUE
 *
vÆ
, BIO *
ö
, 
Êags
,

1140 c⁄° *
hdr
,

1141 c⁄° 
ASN1_ITEM
 *
ô
);

1142 
SMIME_wrôe_ASN1
(
BIO
 *
bio
, 
ASN1_VALUE
 *
vÆ
, BIO *
d©a
, 
Êags
,

1143 
˘y≥_nid
, 
ec⁄t_nid
,

1144 
STACK_OF
(
X509_ALGOR
Ë*
mdÆgs
,

1145 c⁄° 
ASN1_ITEM
 *
ô
);

1146 
ASN1_VALUE
 *
SMIME_ªad_ASN1
(
BIO
 *
bio
, BIO **
bc⁄t
, c⁄° 
ASN1_ITEM
 *
ô
);

1147 
SMIME_¸lf_c›y
(
BIO
 *
ö
, BIO *
out
, 
Êags
);

1148 
SMIME_ãxt
(
BIO
 *
ö
, BIO *
out
);

1154 
ERR_lﬂd_ASN1_°rögs
();

1159 
	#ASN1_F_A2D_ASN1_OBJECT
 100

	)

1160 
	#ASN1_F_A2I_ASN1_ENUMERATED
 101

	)

1161 
	#ASN1_F_A2I_ASN1_INTEGER
 102

	)

1162 
	#ASN1_F_A2I_ASN1_STRING
 103

	)

1163 
	#ASN1_F_APPEND_EXP
 176

	)

1164 
	#ASN1_F_ASN1_BIT_STRING_SET_BIT
 183

	)

1165 
	#ASN1_F_ASN1_CB
 177

	)

1166 
	#ASN1_F_ASN1_CHECK_TLEN
 104

	)

1167 
	#ASN1_F_ASN1_COLLATE_PRIMITIVE
 105

	)

1168 
	#ASN1_F_ASN1_COLLECT
 106

	)

1169 
	#ASN1_F_ASN1_D2I_EX_PRIMITIVE
 108

	)

1170 
	#ASN1_F_ASN1_D2I_FP
 109

	)

1171 
	#ASN1_F_ASN1_D2I_READ_BIO
 107

	)

1172 
	#ASN1_F_ASN1_DIGEST
 184

	)

1173 
	#ASN1_F_ASN1_DO_ADB
 110

	)

1174 
	#ASN1_F_ASN1_DUP
 111

	)

1175 
	#ASN1_F_ASN1_ENUMERATED_SET
 112

	)

1176 
	#ASN1_F_ASN1_ENUMERATED_TO_BN
 113

	)

1177 
	#ASN1_F_ASN1_EX_C2I
 204

	)

1178 
	#ASN1_F_ASN1_FIND_END
 190

	)

1179 
	#ASN1_F_ASN1_GENERALIZEDTIME_ADJ
 216

	)

1180 
	#ASN1_F_ASN1_GENERALIZEDTIME_SET
 185

	)

1181 
	#ASN1_F_ASN1_GENERATE_V3
 178

	)

1182 
	#ASN1_F_ASN1_GET_OBJECT
 114

	)

1183 
	#ASN1_F_ASN1_HEADER_NEW
 115

	)

1184 
	#ASN1_F_ASN1_I2D_BIO
 116

	)

1185 
	#ASN1_F_ASN1_I2D_FP
 117

	)

1186 
	#ASN1_F_ASN1_INTEGER_SET
 118

	)

1187 
	#ASN1_F_ASN1_INTEGER_TO_BN
 119

	)

1188 
	#ASN1_F_ASN1_ITEM_D2I_FP
 206

	)

1189 
	#ASN1_F_ASN1_ITEM_DUP
 191

	)

1190 
	#ASN1_F_ASN1_ITEM_EX_COMBINE_NEW
 121

	)

1191 
	#ASN1_F_ASN1_ITEM_EX_D2I
 120

	)

1192 
	#ASN1_F_ASN1_ITEM_I2D_BIO
 192

	)

1193 
	#ASN1_F_ASN1_ITEM_I2D_FP
 193

	)

1194 
	#ASN1_F_ASN1_ITEM_PACK
 198

	)

1195 
	#ASN1_F_ASN1_ITEM_SIGN
 195

	)

1196 
	#ASN1_F_ASN1_ITEM_SIGN_CTX
 220

	)

1197 
	#ASN1_F_ASN1_ITEM_UNPACK
 199

	)

1198 
	#ASN1_F_ASN1_ITEM_VERIFY
 197

	)

1199 
	#ASN1_F_ASN1_MBSTRING_NCOPY
 122

	)

1200 
	#ASN1_F_ASN1_OBJECT_NEW
 123

	)

1201 
	#ASN1_F_ASN1_OUTPUT_DATA
 214

	)

1202 
	#ASN1_F_ASN1_PACK_STRING
 124

	)

1203 
	#ASN1_F_ASN1_PCTX_NEW
 205

	)

1204 
	#ASN1_F_ASN1_PKCS5_PBE_SET
 125

	)

1205 
	#ASN1_F_ASN1_SEQ_PACK
 126

	)

1206 
	#ASN1_F_ASN1_SEQ_UNPACK
 127

	)

1207 
	#ASN1_F_ASN1_SIGN
 128

	)

1208 
	#ASN1_F_ASN1_STR2TYPE
 179

	)

1209 
	#ASN1_F_ASN1_STRING_SET
 186

	)

1210 
	#ASN1_F_ASN1_STRING_TABLE_ADD
 129

	)

1211 
	#ASN1_F_ASN1_STRING_TYPE_NEW
 130

	)

1212 
	#ASN1_F_ASN1_TEMPLATE_EX_D2I
 132

	)

1213 
	#ASN1_F_ASN1_TEMPLATE_NEW
 133

	)

1214 
	#ASN1_F_ASN1_TEMPLATE_NOEXP_D2I
 131

	)

1215 
	#ASN1_F_ASN1_TIME_ADJ
 217

	)

1216 
	#ASN1_F_ASN1_TIME_SET
 175

	)

1217 
	#ASN1_F_ASN1_TYPE_GET_INT_OCTETSTRING
 134

	)

1218 
	#ASN1_F_ASN1_TYPE_GET_OCTETSTRING
 135

	)

1219 
	#ASN1_F_ASN1_UNPACK_STRING
 136

	)

1220 
	#ASN1_F_ASN1_UTCTIME_ADJ
 218

	)

1221 
	#ASN1_F_ASN1_UTCTIME_SET
 187

	)

1222 
	#ASN1_F_ASN1_VERIFY
 137

	)

1223 
	#ASN1_F_B64_READ_ASN1
 209

	)

1224 
	#ASN1_F_B64_WRITE_ASN1
 210

	)

1225 
	#ASN1_F_BIO_NEW_NDEF
 208

	)

1226 
	#ASN1_F_BITSTR_CB
 180

	)

1227 
	#ASN1_F_BN_TO_ASN1_ENUMERATED
 138

	)

1228 
	#ASN1_F_BN_TO_ASN1_INTEGER
 139

	)

1229 
	#ASN1_F_C2I_ASN1_BIT_STRING
 189

	)

1230 
	#ASN1_F_C2I_ASN1_INTEGER
 194

	)

1231 
	#ASN1_F_C2I_ASN1_OBJECT
 196

	)

1232 
	#ASN1_F_COLLECT_DATA
 140

	)

1233 
	#ASN1_F_D2I_ASN1_BIT_STRING
 141

	)

1234 
	#ASN1_F_D2I_ASN1_BOOLEAN
 142

	)

1235 
	#ASN1_F_D2I_ASN1_BYTES
 143

	)

1236 
	#ASN1_F_D2I_ASN1_GENERALIZEDTIME
 144

	)

1237 
	#ASN1_F_D2I_ASN1_HEADER
 145

	)

1238 
	#ASN1_F_D2I_ASN1_INTEGER
 146

	)

1239 
	#ASN1_F_D2I_ASN1_OBJECT
 147

	)

1240 
	#ASN1_F_D2I_ASN1_SET
 148

	)

1241 
	#ASN1_F_D2I_ASN1_TYPE_BYTES
 149

	)

1242 
	#ASN1_F_D2I_ASN1_UINTEGER
 150

	)

1243 
	#ASN1_F_D2I_ASN1_UTCTIME
 151

	)

1244 
	#ASN1_F_D2I_AUTOPRIVATEKEY
 207

	)

1245 
	#ASN1_F_D2I_NETSCAPE_RSA
 152

	)

1246 
	#ASN1_F_D2I_NETSCAPE_RSA_2
 153

	)

1247 
	#ASN1_F_D2I_PRIVATEKEY
 154

	)

1248 
	#ASN1_F_D2I_PUBLICKEY
 155

	)

1249 
	#ASN1_F_D2I_RSA_NET
 200

	)

1250 
	#ASN1_F_D2I_RSA_NET_2
 201

	)

1251 
	#ASN1_F_D2I_X509
 156

	)

1252 
	#ASN1_F_D2I_X509_CINF
 157

	)

1253 
	#ASN1_F_D2I_X509_PKEY
 159

	)

1254 
	#ASN1_F_I2D_ASN1_BIO_STREAM
 211

	)

1255 
	#ASN1_F_I2D_ASN1_SET
 188

	)

1256 
	#ASN1_F_I2D_ASN1_TIME
 160

	)

1257 
	#ASN1_F_I2D_DSA_PUBKEY
 161

	)

1258 
	#ASN1_F_I2D_EC_PUBKEY
 181

	)

1259 
	#ASN1_F_I2D_PRIVATEKEY
 163

	)

1260 
	#ASN1_F_I2D_PUBLICKEY
 164

	)

1261 
	#ASN1_F_I2D_RSA_NET
 162

	)

1262 
	#ASN1_F_I2D_RSA_PUBKEY
 165

	)

1263 
	#ASN1_F_LONG_C2I
 166

	)

1264 
	#ASN1_F_OID_MODULE_INIT
 174

	)

1265 
	#ASN1_F_PARSE_TAGGING
 182

	)

1266 
	#ASN1_F_PKCS5_PBE2_SET_IV
 167

	)

1267 
	#ASN1_F_PKCS5_PBE_SET
 202

	)

1268 
	#ASN1_F_PKCS5_PBE_SET0_ALGOR
 215

	)

1269 
	#ASN1_F_PKCS5_PBKDF2_SET
 219

	)

1270 
	#ASN1_F_SMIME_READ_ASN1
 212

	)

1271 
	#ASN1_F_SMIME_TEXT
 213

	)

1272 
	#ASN1_F_X509_CINF_NEW
 168

	)

1273 
	#ASN1_F_X509_CRL_ADD0_REVOKED
 169

	)

1274 
	#ASN1_F_X509_INFO_NEW
 170

	)

1275 
	#ASN1_F_X509_NAME_ENCODE
 203

	)

1276 
	#ASN1_F_X509_NAME_EX_D2I
 158

	)

1277 
	#ASN1_F_X509_NAME_EX_NEW
 171

	)

1278 
	#ASN1_F_X509_NEW
 172

	)

1279 
	#ASN1_F_X509_PKEY_NEW
 173

	)

1282 
	#ASN1_R_ADDING_OBJECT
 171

	)

1283 
	#ASN1_R_ASN1_PARSE_ERROR
 203

	)

1284 
	#ASN1_R_ASN1_SIG_PARSE_ERROR
 204

	)

1285 
	#ASN1_R_AUX_ERROR
 100

	)

1286 
	#ASN1_R_BAD_CLASS
 101

	)

1287 
	#ASN1_R_BAD_OBJECT_HEADER
 102

	)

1288 
	#ASN1_R_BAD_PASSWORD_READ
 103

	)

1289 
	#ASN1_R_BAD_TAG
 104

	)

1290 
	#ASN1_R_BMPSTRING_IS_WRONG_LENGTH
 214

	)

1291 
	#ASN1_R_BN_LIB
 105

	)

1292 
	#ASN1_R_BOOLEAN_IS_WRONG_LENGTH
 106

	)

1293 
	#ASN1_R_BUFFER_TOO_SMALL
 107

	)

1294 
	#ASN1_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER
 108

	)

1295 
	#ASN1_R_CONTEXT_NOT_INITIALISED
 217

	)

1296 
	#ASN1_R_DATA_IS_WRONG
 109

	)

1297 
	#ASN1_R_DECODE_ERROR
 110

	)

1298 
	#ASN1_R_DECODING_ERROR
 111

	)

1299 
	#ASN1_R_DEPTH_EXCEEDED
 174

	)

1300 
	#ASN1_R_DIGEST_AND_KEY_TYPE_NOT_SUPPORTED
 198

	)

1301 
	#ASN1_R_ENCODE_ERROR
 112

	)

1302 
	#ASN1_R_ERROR_GETTING_TIME
 173

	)

1303 
	#ASN1_R_ERROR_LOADING_SECTION
 172

	)

1304 
	#ASN1_R_ERROR_PARSING_SET_ELEMENT
 113

	)

1305 
	#ASN1_R_ERROR_SETTING_CIPHER_PARAMS
 114

	)

1306 
	#ASN1_R_EXPECTING_AN_INTEGER
 115

	)

1307 
	#ASN1_R_EXPECTING_AN_OBJECT
 116

	)

1308 
	#ASN1_R_EXPECTING_A_BOOLEAN
 117

	)

1309 
	#ASN1_R_EXPECTING_A_TIME
 118

	)

1310 
	#ASN1_R_EXPLICIT_LENGTH_MISMATCH
 119

	)

1311 
	#ASN1_R_EXPLICIT_TAG_NOT_CONSTRUCTED
 120

	)

1312 
	#ASN1_R_FIELD_MISSING
 121

	)

1313 
	#ASN1_R_FIRST_NUM_TOO_LARGE
 122

	)

1314 
	#ASN1_R_HEADER_TOO_LONG
 123

	)

1315 
	#ASN1_R_ILLEGAL_BITSTRING_FORMAT
 175

	)

1316 
	#ASN1_R_ILLEGAL_BOOLEAN
 176

	)

1317 
	#ASN1_R_ILLEGAL_CHARACTERS
 124

	)

1318 
	#ASN1_R_ILLEGAL_FORMAT
 177

	)

1319 
	#ASN1_R_ILLEGAL_HEX
 178

	)

1320 
	#ASN1_R_ILLEGAL_IMPLICIT_TAG
 179

	)

1321 
	#ASN1_R_ILLEGAL_INTEGER
 180

	)

1322 
	#ASN1_R_ILLEGAL_NESTED_TAGGING
 181

	)

1323 
	#ASN1_R_ILLEGAL_NULL
 125

	)

1324 
	#ASN1_R_ILLEGAL_NULL_VALUE
 182

	)

1325 
	#ASN1_R_ILLEGAL_OBJECT
 183

	)

1326 
	#ASN1_R_ILLEGAL_OPTIONAL_ANY
 126

	)

1327 
	#ASN1_R_ILLEGAL_OPTIONS_ON_ITEM_TEMPLATE
 170

	)

1328 
	#ASN1_R_ILLEGAL_TAGGED_ANY
 127

	)

1329 
	#ASN1_R_ILLEGAL_TIME_VALUE
 184

	)

1330 
	#ASN1_R_INTEGER_NOT_ASCII_FORMAT
 185

	)

1331 
	#ASN1_R_INTEGER_TOO_LARGE_FOR_LONG
 128

	)

1332 
	#ASN1_R_INVALID_BIT_STRING_BITS_LEFT
 220

	)

1333 
	#ASN1_R_INVALID_BMPSTRING_LENGTH
 129

	)

1334 
	#ASN1_R_INVALID_DIGIT
 130

	)

1335 
	#ASN1_R_INVALID_MIME_TYPE
 205

	)

1336 
	#ASN1_R_INVALID_MODIFIER
 186

	)

1337 
	#ASN1_R_INVALID_NUMBER
 187

	)

1338 
	#ASN1_R_INVALID_OBJECT_ENCODING
 216

	)

1339 
	#ASN1_R_INVALID_SEPARATOR
 131

	)

1340 
	#ASN1_R_INVALID_TIME_FORMAT
 132

	)

1341 
	#ASN1_R_INVALID_UNIVERSALSTRING_LENGTH
 133

	)

1342 
	#ASN1_R_INVALID_UTF8STRING
 134

	)

1343 
	#ASN1_R_IV_TOO_LARGE
 135

	)

1344 
	#ASN1_R_LENGTH_ERROR
 136

	)

1345 
	#ASN1_R_LIST_ERROR
 188

	)

1346 
	#ASN1_R_MIME_NO_CONTENT_TYPE
 206

	)

1347 
	#ASN1_R_MIME_PARSE_ERROR
 207

	)

1348 
	#ASN1_R_MIME_SIG_PARSE_ERROR
 208

	)

1349 
	#ASN1_R_MISSING_EOC
 137

	)

1350 
	#ASN1_R_MISSING_SECOND_NUMBER
 138

	)

1351 
	#ASN1_R_MISSING_VALUE
 189

	)

1352 
	#ASN1_R_MSTRING_NOT_UNIVERSAL
 139

	)

1353 
	#ASN1_R_MSTRING_WRONG_TAG
 140

	)

1354 
	#ASN1_R_NESTED_ASN1_STRING
 197

	)

1355 
	#ASN1_R_NON_HEX_CHARACTERS
 141

	)

1356 
	#ASN1_R_NOT_ASCII_FORMAT
 190

	)

1357 
	#ASN1_R_NOT_ENOUGH_DATA
 142

	)

1358 
	#ASN1_R_NO_CONTENT_TYPE
 209

	)

1359 
	#ASN1_R_NO_DEFAULT_DIGEST
 201

	)

1360 
	#ASN1_R_NO_MATCHING_CHOICE_TYPE
 143

	)

1361 
	#ASN1_R_NO_MULTIPART_BODY_FAILURE
 210

	)

1362 
	#ASN1_R_NO_MULTIPART_BOUNDARY
 211

	)

1363 
	#ASN1_R_NO_SIG_CONTENT_TYPE
 212

	)

1364 
	#ASN1_R_NULL_IS_WRONG_LENGTH
 144

	)

1365 
	#ASN1_R_OBJECT_NOT_ASCII_FORMAT
 191

	)

1366 
	#ASN1_R_ODD_NUMBER_OF_CHARS
 145

	)

1367 
	#ASN1_R_PRIVATE_KEY_HEADER_MISSING
 146

	)

1368 
	#ASN1_R_SECOND_NUMBER_TOO_LARGE
 147

	)

1369 
	#ASN1_R_SEQUENCE_LENGTH_MISMATCH
 148

	)

1370 
	#ASN1_R_SEQUENCE_NOT_CONSTRUCTED
 149

	)

1371 
	#ASN1_R_SEQUENCE_OR_SET_NEEDS_CONFIG
 192

	)

1372 
	#ASN1_R_SHORT_LINE
 150

	)

1373 
	#ASN1_R_SIG_INVALID_MIME_TYPE
 213

	)

1374 
	#ASN1_R_STREAMING_NOT_SUPPORTED
 202

	)

1375 
	#ASN1_R_STRING_TOO_LONG
 151

	)

1376 
	#ASN1_R_STRING_TOO_SHORT
 152

	)

1377 
	#ASN1_R_TAG_VALUE_TOO_HIGH
 153

	)

1378 
	#ASN1_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD
 154

	)

1379 
	#ASN1_R_TIME_NOT_ASCII_FORMAT
 193

	)

1380 
	#ASN1_R_TOO_LONG
 155

	)

1381 
	#ASN1_R_TYPE_NOT_CONSTRUCTED
 156

	)

1382 
	#ASN1_R_TYPE_NOT_PRIMITIVE
 218

	)

1383 
	#ASN1_R_UNABLE_TO_DECODE_RSA_KEY
 157

	)

1384 
	#ASN1_R_UNABLE_TO_DECODE_RSA_PRIVATE_KEY
 158

	)

1385 
	#ASN1_R_UNEXPECTED_EOC
 159

	)

1386 
	#ASN1_R_UNIVERSALSTRING_IS_WRONG_LENGTH
 215

	)

1387 
	#ASN1_R_UNKNOWN_FORMAT
 160

	)

1388 
	#ASN1_R_UNKNOWN_MESSAGE_DIGEST_ALGORITHM
 161

	)

1389 
	#ASN1_R_UNKNOWN_OBJECT_TYPE
 162

	)

1390 
	#ASN1_R_UNKNOWN_PUBLIC_KEY_TYPE
 163

	)

1391 
	#ASN1_R_UNKNOWN_SIGNATURE_ALGORITHM
 199

	)

1392 
	#ASN1_R_UNKNOWN_TAG
 194

	)

1393 
	#ASN1_R_UNKOWN_FORMAT
 195

	)

1394 
	#ASN1_R_UNSUPPORTED_ANY_DEFINED_BY_TYPE
 164

	)

1395 
	#ASN1_R_UNSUPPORTED_CIPHER
 165

	)

1396 
	#ASN1_R_UNSUPPORTED_ENCRYPTION_ALGORITHM
 166

	)

1397 
	#ASN1_R_UNSUPPORTED_PUBLIC_KEY_TYPE
 167

	)

1398 
	#ASN1_R_UNSUPPORTED_TYPE
 196

	)

1399 
	#ASN1_R_WRONG_PUBLIC_KEY_TYPE
 200

	)

1400 
	#ASN1_R_WRONG_TAG
 168

	)

1401 
	#ASN1_R_WRONG_TYPE
 169

	)

1403 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/dh.h

59 #i‚de‡
HEADER_DH_H


60 
	#HEADER_DH_H


	)

62 
	~<›ís¶/e_os2.h
>

64 #ifde‡
OPENSSL_NO_DH


65 #îr‹ 
DH
 
is
 
dißbÀd
.

68 #i‚de‡
OPENSSL_NO_BIO


69 
	~<›ís¶/bio.h
>

71 
	~<›ís¶/os¶_typ.h
>

72 #i‚de‡
OPENSSL_NO_DEPRECATED


73 
	~<›ís¶/bn.h
>

76 #i‚de‡
OPENSSL_DH_MAX_MODULUS_BITS


77 
	#OPENSSL_DH_MAX_MODULUS_BITS
 10000

	)

80 
	#DH_FLAG_CACHE_MONT_P
 0x01

	)

81 
	#DH_FLAG_NO_EXP_CONSTTIME
 0x02

	)

95 
	#DH_FLAG_FIPS_METHOD
 0x0400

	)

102 
	#DH_FLAG_NON_FIPS_ALLOW
 0x0400

	)

104 #ifde‡ 
__˝lu•lus


112 
	sdh_mëhod


114 c⁄° *
«me
;

116 (*
gíî©e_key
)(
DH
 *
dh
);

117 (*
compuã_key
)(*
key
,c⁄° 
BIGNUM
 *
pub_key
,
DH
 *
dh
);

118 (*
bn_mod_exp
)(c⁄° 
DH
 *
dh
, 
BIGNUM
 *
r
, c⁄° BIGNUM *
a
,

119 c⁄° 
BIGNUM
 *
p
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
,

120 
BN_MONT_CTX
 *
m_˘x
);

122 (*
öô
)(
DH
 *
dh
);

123 (*
föish
)(
DH
 *
dh
);

124 
Êags
;

125 *
≠p_d©a
;

127 (*
gíî©e_∑øms
)(
DH
 *
dh
, 
¥ime_Àn
, 
gíî©‹
, 
BN_GENCB
 *
cb
);

130 
	sdh_°


134 
∑d
;

135 
vîsi⁄
;

136 
BIGNUM
 *
p
;

137 
BIGNUM
 *
g
;

138 
Àngth
;

139 
BIGNUM
 *
pub_key
;

140 
BIGNUM
 *
¥iv_key
;

142 
Êags
;

143 
BN_MONT_CTX
 *
mëhod_m⁄t_p
;

145 
BIGNUM
 *
q
;

146 
BIGNUM
 *
j
;

147 *
£ed
;

148 
£edÀn
;

149 
BIGNUM
 *
cou¡î
;

151 
ª„ªn˚s
;

152 
CRYPTO_EX_DATA
 
ex_d©a
;

153 c⁄° 
DH_METHOD
 *
mëh
;

154 
ENGINE
 *
ígöe
;

157 
	#DH_GENERATOR_2
 2

	)

159 
	#DH_GENERATOR_5
 5

	)

162 
	#DH_CHECK_P_NOT_PRIME
 0x01

	)

163 
	#DH_CHECK_P_NOT_SAFE_PRIME
 0x02

	)

164 
	#DH_UNABLE_TO_CHECK_GENERATOR
 0x04

	)

165 
	#DH_NOT_SUITABLE_GENERATOR
 0x08

	)

168 
	#DH_CHECK_PUBKEY_TOO_SMALL
 0x01

	)

169 
	#DH_CHECK_PUBKEY_TOO_LARGE
 0x02

	)

173 
	#DH_CHECK_P_NOT_STRONG_PRIME
 
DH_CHECK_P_NOT_SAFE_PRIME


	)

175 
	#d2i_DH∑øms_Â
(
Â
,
x
Ë(
DH
 *)
	`ASN1_d2i_Â
((*(*)())
DH_√w
, \

176 (*(*)())
d2i_DH∑øms
,(
Â
),(**)(
x
))

	)

177 
	#i2d_DH∑øms_Â
(
Â
,
x
Ë
	`ASN1_i2d_Â
(
i2d_DH∑øms
,(fp), \

178 (*)(
x
))

	)

179 
	#d2i_DH∑øms_bio
(
bp
,
x
Ë
	`ASN1_d2i_bio_of
(
DH
,
DH_√w
,
d2i_DH∑øms
,bp,x)

	)

180 
	#i2d_DH∑øms_bio
(
bp
,
x
Ë
	`ASN1_i2d_bio_of_c⁄°
(
DH
,
i2d_DH∑øms
,bp,x)

	)

182 
DH
 *
DH∑øms_dup
(DH *);

184 c⁄° 
DH_METHOD
 *
DH_O≥nSSL
();

186 
DH_£t_deÁu…_mëhod
(c⁄° 
DH_METHOD
 *
mëh
);

187 c⁄° 
DH_METHOD
 *
DH_gë_deÁu…_mëhod
();

188 
DH_£t_mëhod
(
DH
 *
dh
, c⁄° 
DH_METHOD
 *
mëh
);

189 
DH
 *
DH_√w_mëhod
(
ENGINE
 *
ígöe
);

191 
DH
 * 
DH_√w
();

192 
DH_‰ì
(
DH
 *
dh
);

193 
DH_up_ªf
(
DH
 *
dh
);

194 
DH_size
(c⁄° 
DH
 *
dh
);

195 
DH_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

196 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

197 
DH_£t_ex_d©a
(
DH
 *
d
, 
idx
, *
¨g
);

198 *
DH_gë_ex_d©a
(
DH
 *
d
, 
idx
);

201 #i‚de‡
OPENSSL_NO_DEPRECATED


202 
DH
 * 
DH_gíî©e_∑ømëîs
(
¥ime_Àn
,
gíî©‹
,

203 (*
ˇŒback
)(,,*),*
cb_¨g
);

207 
DH_gíî©e_∑ømëîs_ex
(
DH
 *
dh
, 
¥ime_Àn
,
gíî©‹
, 
BN_GENCB
 *
cb
);

209 
DH_check
(c⁄° 
DH
 *
dh
,*
codes
);

210 
DH_check_pub_key
(c⁄° 
DH
 *
dh
,c⁄° 
BIGNUM
 *
pub_key
, *
codes
);

211 
DH_gíî©e_key
(
DH
 *
dh
);

212 
DH_compuã_key
(*
key
,c⁄° 
BIGNUM
 *
pub_key
,
DH
 *
dh
);

213 
DH
 * 
d2i_DH∑øms
(DH **
a
,c⁄° **
µ
, 
Àngth
);

214 
i2d_DH∑øms
(c⁄° 
DH
 *
a
,**
µ
);

215 #i‚de‡
OPENSSL_NO_FP_API


216 
DH∑øms_¥öt_Â
(
FILE
 *
Â
, c⁄° 
DH
 *
x
);

218 #i‚de‡
OPENSSL_NO_BIO


219 
DH∑øms_¥öt
(
BIO
 *
bp
, c⁄° 
DH
 *
x
);

221 
DH∑øms_¥öt
(*
bp
, c⁄° 
DH
 *
x
);

224 
	#EVP_PKEY_CTX_£t_dh_∑ømgí_¥ime_Àn
(
˘x
, 
Àn
) \

225 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DH
, 
EVP_PKEY_OP_PARAMGEN
, \

226 
EVP_PKEY_CTRL_DH_PARAMGEN_PRIME_LEN
, 
Àn
, 
NULL
)

	)

228 
	#EVP_PKEY_CTX_£t_dh_∑ømgí_gíî©‹
(
˘x
, 
gí
) \

229 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DH
, 
EVP_PKEY_OP_PARAMGEN
, \

230 
EVP_PKEY_CTRL_DH_PARAMGEN_GENERATOR
, 
gí
, 
NULL
)

	)

232 
	#EVP_PKEY_CTRL_DH_PARAMGEN_PRIME_LEN
 (
EVP_PKEY_ALG_CTRL
 + 1)

	)

233 
	#EVP_PKEY_CTRL_DH_PARAMGEN_GENERATOR
 (
EVP_PKEY_ALG_CTRL
 + 2)

	)

240 
ERR_lﬂd_DH_°rögs
();

245 
	#DH_F_COMPUTE_KEY
 102

	)

246 
	#DH_F_DHPARAMS_PRINT_FP
 101

	)

247 
	#DH_F_DH_BUILTIN_GENPARAMS
 106

	)

248 
	#DH_F_DH_COMPUTE_KEY
 114

	)

249 
	#DH_F_DH_GENERATE_KEY
 115

	)

250 
	#DH_F_DH_GENERATE_PARAMETERS_EX
 116

	)

251 
	#DH_F_DH_NEW_METHOD
 105

	)

252 
	#DH_F_DH_PARAM_DECODE
 107

	)

253 
	#DH_F_DH_PRIV_DECODE
 110

	)

254 
	#DH_F_DH_PRIV_ENCODE
 111

	)

255 
	#DH_F_DH_PUB_DECODE
 108

	)

256 
	#DH_F_DH_PUB_ENCODE
 109

	)

257 
	#DH_F_DO_DH_PRINT
 100

	)

258 
	#DH_F_GENERATE_KEY
 103

	)

259 
	#DH_F_GENERATE_PARAMETERS
 104

	)

260 
	#DH_F_PKEY_DH_DERIVE
 112

	)

261 
	#DH_F_PKEY_DH_KEYGEN
 113

	)

264 
	#DH_R_BAD_GENERATOR
 101

	)

265 
	#DH_R_BN_DECODE_ERROR
 109

	)

266 
	#DH_R_BN_ERROR
 106

	)

267 
	#DH_R_DECODE_ERROR
 104

	)

268 
	#DH_R_INVALID_PUBKEY
 102

	)

269 
	#DH_R_KEYS_NOT_SET
 108

	)

270 
	#DH_R_KEY_SIZE_TOO_SMALL
 110

	)

271 
	#DH_R_MODULUS_TOO_LARGE
 103

	)

272 
	#DH_R_NON_FIPS_METHOD
 111

	)

273 
	#DH_R_NO_PARAMETERS_SET
 107

	)

274 
	#DH_R_NO_PRIVATE_VALUE
 100

	)

275 
	#DH_R_PARAMETER_ENCODING_ERROR
 105

	)

277 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/dsa.h

65 #i‚de‡
HEADER_DSA_H


66 
	#HEADER_DSA_H


	)

68 
	~<›ís¶/e_os2.h
>

70 #ifde‡
OPENSSL_NO_DSA


71 #îr‹ 
DSA
 
is
 
dißbÀd
.

74 #i‚de‡
OPENSSL_NO_BIO


75 
	~<›ís¶/bio.h
>

77 
	~<›ís¶/¸y±o.h
>

78 
	~<›ís¶/os¶_typ.h
>

80 #i‚de‡
OPENSSL_NO_DEPRECATED


81 
	~<›ís¶/bn.h
>

82 #i‚de‡
OPENSSL_NO_DH


83 
	~<›ís¶/dh.h
>

87 #i‚de‡
OPENSSL_DSA_MAX_MODULUS_BITS


88 
	#OPENSSL_DSA_MAX_MODULUS_BITS
 10000

	)

91 
	#DSA_FLAG_CACHE_MONT_P
 0x01

	)

92 
	#DSA_FLAG_NO_EXP_CONSTTIME
 0x02

	)

106 
	#DSA_FLAG_FIPS_METHOD
 0x0400

	)

113 
	#DSA_FLAG_NON_FIPS_ALLOW
 0x0400

	)

115 #ifde‡ 
__˝lu•lus


123 
	sDSA_SIG_°


125 
BIGNUM
 *
r
;

126 
BIGNUM
 *
s
;

127 } 
	tDSA_SIG
;

129 
	sdß_mëhod


131 c⁄° *
«me
;

132 
DSA_SIG
 * (*
dß_do_sign
)(c⁄° *
dg°
, 
dÀn
, 
DSA
 *
dß
);

133 (*
dß_sign_£tup
)(
DSA
 *
dß
, 
BN_CTX
 *
˘x_ö
, 
BIGNUM
 **
kövp
,

134 
BIGNUM
 **
Ω
);

135 (*
dß_do_vîify
)(c⁄° *
dg°
, 
dg°_Àn
,

136 
DSA_SIG
 *
sig
, 
DSA
 *
dß
);

137 (*
dß_mod_exp
)(
DSA
 *
dß
, 
BIGNUM
 *
º
, BIGNUM *
a1
, BIGNUM *
p1
,

138 
BIGNUM
 *
a2
, BIGNUM *
p2
, BIGNUM *
m
, 
BN_CTX
 *
˘x
,

139 
BN_MONT_CTX
 *
ö_m⁄t
);

140 (*
bn_mod_exp
)(
DSA
 *
dß
, 
BIGNUM
 *
r
, BIGNUM *
a
, c⁄° BIGNUM *
p
,

141 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
,

142 
BN_MONT_CTX
 *
m_˘x
);

143 (*
öô
)(
DSA
 *
dß
);

144 (*
föish
)(
DSA
 *
dß
);

145 
Êags
;

146 *
≠p_d©a
;

148 (*
dß_∑ømgí
)(
DSA
 *
dß
, 
bôs
,

149 c⁄° *
£ed
, 
£ed_Àn
,

150 *
cou¡î_ªt
, *
h_ªt
,

151 
BN_GENCB
 *
cb
);

153 (*
dß_keygí
)(
DSA
 *
dß
);

156 
	sdß_°


160 
∑d
;

161 
vîsi⁄
;

162 
wrôe_∑øms
;

163 
BIGNUM
 *
p
;

164 
BIGNUM
 *
q
;

165 
BIGNUM
 *
g
;

167 
BIGNUM
 *
pub_key
;

168 
BIGNUM
 *
¥iv_key
;

170 
BIGNUM
 *
köv
;

171 
BIGNUM
 *
r
;

173 
Êags
;

175 
BN_MONT_CTX
 *
mëhod_m⁄t_p
;

176 
ª„ªn˚s
;

177 
CRYPTO_EX_DATA
 
ex_d©a
;

178 c⁄° 
DSA_METHOD
 *
mëh
;

180 
ENGINE
 *
ígöe
;

183 
	#d2i_DSA∑øms_Â
(
Â
,
x
Ë(
DSA
 *)
	`ASN1_d2i_Â
((*(*)())
DSA_√w
, \

184 (*(*)())
d2i_DSA∑øms
,(
Â
),(**)(
x
))

	)

185 
	#i2d_DSA∑øms_Â
(
Â
,
x
Ë
	`ASN1_i2d_Â
(
i2d_DSA∑øms
,(fp), \

186 (*)(
x
))

	)

187 
	#d2i_DSA∑øms_bio
(
bp
,
x
Ë
	`ASN1_d2i_bio_of
(
DSA
,
DSA_√w
,
d2i_DSA∑øms
,bp,x)

	)

188 
	#i2d_DSA∑øms_bio
(
bp
,
x
Ë
	`ASN1_i2d_bio_of_c⁄°
(
DSA
,
i2d_DSA∑øms
,bp,x)

	)

191 
DSA
 *
DSA∑øms_dup
(DSA *
x
);

192 
DSA_SIG
 * 
DSA_SIG_√w
();

193 
DSA_SIG_‰ì
(
DSA_SIG
 *
a
);

194 
i2d_DSA_SIG
(c⁄° 
DSA_SIG
 *
a
, **
µ
);

195 
DSA_SIG
 * 
d2i_DSA_SIG
(DSA_SIG **
v
, c⁄° **
µ
, 
Àngth
);

197 
DSA_SIG
 * 
DSA_do_sign
(c⁄° *
dg°
,
dÀn
,
DSA
 *
dß
);

198 
DSA_do_vîify
(c⁄° *
dg°
,
dg°_Àn
,

199 
DSA_SIG
 *
sig
,
DSA
 *
dß
);

201 c⁄° 
DSA_METHOD
 *
DSA_O≥nSSL
();

203 
DSA_£t_deÁu…_mëhod
(c⁄° 
DSA_METHOD
 *);

204 c⁄° 
DSA_METHOD
 *
DSA_gë_deÁu…_mëhod
();

205 
DSA_£t_mëhod
(
DSA
 *
dß
, c⁄° 
DSA_METHOD
 *);

207 
DSA
 * 
DSA_√w
();

208 
DSA
 * 
DSA_√w_mëhod
(
ENGINE
 *
ígöe
);

209 
DSA_‰ì
 (
DSA
 *
r
);

211 
DSA_up_ªf
(
DSA
 *
r
);

212 
DSA_size
(c⁄° 
DSA
 *);

214 
DSA_sign_£tup
–
DSA
 *
dß
,
BN_CTX
 *
˘x_ö
,
BIGNUM
 **
kövp
,BIGNUM **
Ω
);

215 
DSA_sign
(
ty≥
,c⁄° *
dg°
,
dÀn
,

216 *
sig
, *
sigÀn
, 
DSA
 *
dß
);

217 
DSA_vîify
(
ty≥
,c⁄° *
dg°
,
dg°_Àn
,

218 c⁄° *
sigbuf
, 
sigÀn
, 
DSA
 *
dß
);

219 
DSA_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

220 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

221 
DSA_£t_ex_d©a
(
DSA
 *
d
, 
idx
, *
¨g
);

222 *
DSA_gë_ex_d©a
(
DSA
 *
d
, 
idx
);

224 
DSA
 * 
d2i_DSAPublicKey
(DSA **
a
, c⁄° **
µ
, 
Àngth
);

225 
DSA
 * 
d2i_DSAPriv©eKey
(DSA **
a
, c⁄° **
µ
, 
Àngth
);

226 
DSA
 * 
d2i_DSA∑øms
(DSA **
a
, c⁄° **
µ
, 
Àngth
);

229 #i‚de‡
OPENSSL_NO_DEPRECATED


230 
DSA
 * 
DSA_gíî©e_∑ømëîs
(
bôs
,

231 *
£ed
,
£ed_Àn
,

232 *
cou¡î_ªt
, *
h_ªt
,

233 (*
ˇŒback
)(, , *),*
cb_¨g
);

237 
DSA_gíî©e_∑ømëîs_ex
(
DSA
 *
dß
, 
bôs
,

238 c⁄° *
£ed
,
£ed_Àn
,

239 *
cou¡î_ªt
, *
h_ªt
, 
BN_GENCB
 *
cb
);

241 
DSA_gíî©e_key
(
DSA
 *
a
);

242 
i2d_DSAPublicKey
(c⁄° 
DSA
 *
a
, **
µ
);

243 
i2d_DSAPriv©eKey
(c⁄° 
DSA
 *
a
, **
µ
);

244 
i2d_DSA∑øms
(c⁄° 
DSA
 *
a
,**
µ
);

246 #i‚de‡
OPENSSL_NO_BIO


247 
DSA∑øms_¥öt
(
BIO
 *
bp
, c⁄° 
DSA
 *
x
);

248 
DSA_¥öt
(
BIO
 *
bp
, c⁄° 
DSA
 *
x
, 
off
);

250 #i‚de‡
OPENSSL_NO_FP_API


251 
DSA∑øms_¥öt_Â
(
FILE
 *
Â
, c⁄° 
DSA
 *
x
);

252 
DSA_¥öt_Â
(
FILE
 *
bp
, c⁄° 
DSA
 *
x
, 
off
);

255 
	#DSS_¥ime_checks
 50

	)

258 
	#DSA_is_¥ime
(
n
, 
ˇŒback
, 
cb_¨g
) \

259 
	`BN_is_¥ime
(
n
, 
DSS_¥ime_checks
, 
ˇŒback
, 
NULL
, 
cb_¨g
)

	)

261 #i‚de‡
OPENSSL_NO_DH


264 
DH
 *
DSA_dup_DH
(c⁄° 
DSA
 *
r
);

267 
	#EVP_PKEY_CTX_£t_dß_∑ømgí_bôs
(
˘x
, 
nbôs
) \

268 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DSA
, 
EVP_PKEY_OP_PARAMGEN
, \

269 
EVP_PKEY_CTRL_DSA_PARAMGEN_BITS
, 
nbôs
, 
NULL
)

	)

271 
	#EVP_PKEY_CTRL_DSA_PARAMGEN_BITS
 (
EVP_PKEY_ALG_CTRL
 + 1)

	)

272 
	#EVP_PKEY_CTRL_DSA_PARAMGEN_Q_BITS
 (
EVP_PKEY_ALG_CTRL
 + 2)

	)

273 
	#EVP_PKEY_CTRL_DSA_PARAMGEN_MD
 (
EVP_PKEY_ALG_CTRL
 + 3)

	)

279 
ERR_lﬂd_DSA_°rögs
();

284 
	#DSA_F_D2I_DSA_SIG
 110

	)

285 
	#DSA_F_DO_DSA_PRINT
 104

	)

286 
	#DSA_F_DSAPARAMS_PRINT
 100

	)

287 
	#DSA_F_DSAPARAMS_PRINT_FP
 101

	)

288 
	#DSA_F_DSA_DO_SIGN
 112

	)

289 
	#DSA_F_DSA_DO_VERIFY
 113

	)

290 
	#DSA_F_DSA_GENERATE_KEY
 124

	)

291 
	#DSA_F_DSA_GENERATE_PARAMETERS_EX
 123

	)

292 
	#DSA_F_DSA_NEW_METHOD
 103

	)

293 
	#DSA_F_DSA_PARAM_DECODE
 119

	)

294 
	#DSA_F_DSA_PRINT_FP
 105

	)

295 
	#DSA_F_DSA_PRIV_DECODE
 115

	)

296 
	#DSA_F_DSA_PRIV_ENCODE
 116

	)

297 
	#DSA_F_DSA_PUB_DECODE
 117

	)

298 
	#DSA_F_DSA_PUB_ENCODE
 118

	)

299 
	#DSA_F_DSA_SIGN
 106

	)

300 
	#DSA_F_DSA_SIGN_SETUP
 107

	)

301 
	#DSA_F_DSA_SIG_NEW
 109

	)

302 
	#DSA_F_DSA_SIG_PRINT
 125

	)

303 
	#DSA_F_DSA_VERIFY
 108

	)

304 
	#DSA_F_I2D_DSA_SIG
 111

	)

305 
	#DSA_F_OLD_DSA_PRIV_DECODE
 122

	)

306 
	#DSA_F_PKEY_DSA_CTRL
 120

	)

307 
	#DSA_F_PKEY_DSA_KEYGEN
 121

	)

308 
	#DSA_F_SIG_CB
 114

	)

311 
	#DSA_R_BAD_Q_VALUE
 102

	)

312 
	#DSA_R_BN_DECODE_ERROR
 108

	)

313 
	#DSA_R_BN_ERROR
 109

	)

314 
	#DSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE
 100

	)

315 
	#DSA_R_DECODE_ERROR
 104

	)

316 
	#DSA_R_INVALID_DIGEST_TYPE
 106

	)

317 
	#DSA_R_MISSING_PARAMETERS
 101

	)

318 
	#DSA_R_MODULUS_TOO_LARGE
 103

	)

319 
	#DSA_R_NEED_NEW_SETUP_VALUES
 110

	)

320 
	#DSA_R_NON_FIPS_DSA_METHOD
 111

	)

321 
	#DSA_R_NO_PARAMETERS_SET
 107

	)

322 
	#DSA_R_PARAMETER_ENCODING_ERROR
 105

	)

324 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ec.h

76 #i‚de‡
HEADER_EC_H


77 
	#HEADER_EC_H


	)

79 
	~<›ís¶/›ís¶c⁄f.h
>

81 #ifde‡
OPENSSL_NO_EC


82 #îr‹ 
EC
 
is
 
dißbÀd
.

85 
	~<›ís¶/a¢1.h
>

86 
	~<›ís¶/symhacks.h
>

87 #i‚de‡
OPENSSL_NO_DEPRECATED


88 
	~<›ís¶/bn.h
>

91 #ifde‡ 
__˝lu•lus


93 #ñi‡
deföed
(
__SUNPRO_C
)

94 #i‡
__SUNPRO_C
 >= 0x520

95 #¥agm®
îr‹_mesßges
 (
off
,
E_ARRAY_OF_INCOMPLETE_NONAME
,
E_ARRAY_OF_INCOMPLETE
)

100 #i‚de‡
OPENSSL_ECC_MAX_FIELD_BITS


101 
	#OPENSSL_ECC_MAX_FIELD_BITS
 661

	)

109 
POINT_CONVERSION_COMPRESSED
 = 2,

111 
POINT_CONVERSION_UNCOMPRESSED
 = 4,

114 
POINT_CONVERSION_HYBRID
 = 6

115 } 
	tpoöt_c⁄vîsi⁄_f‹m_t
;

118 
ec_mëhod_°
 
	tEC_METHOD
;

120 
ec_group_°


129 
	tEC_GROUP
;

131 
ec_poöt_°
 
	tEC_POINT
;

142 c⁄° 
EC_METHOD
 *
EC_GFp_sim∂e_mëhod
();

147 c⁄° 
EC_METHOD
 *
EC_GFp_m⁄t_mëhod
();

152 c⁄° 
EC_METHOD
 *
EC_GFp_ni°_mëhod
();

154 #i‚de‡
OPENSSL_NO_EC_NISTP_64_GCC_128


158 c⁄° 
EC_METHOD
 *
EC_GFp_ni°p224_mëhod
();

163 c⁄° 
EC_METHOD
 *
EC_GFp_ni°p256_mëhod
();

168 c⁄° 
EC_METHOD
 *
EC_GFp_ni°p521_mëhod
();

171 #i‚de‡
OPENSSL_NO_EC2M


179 c⁄° 
EC_METHOD
 *
EC_GF2m_sim∂e_mëhod
();

192 
EC_GROUP
 *
EC_GROUP_√w
(c⁄° 
EC_METHOD
 *
mëh
);

197 
EC_GROUP_‰ì
(
EC_GROUP
 *
group
);

202 
EC_GROUP_˛ór_‰ì
(
EC_GROUP
 *
group
);

209 
EC_GROUP_c›y
(
EC_GROUP
 *
d°
, c⁄° EC_GROUP *
§c
);

216 
EC_GROUP
 *
EC_GROUP_dup
(c⁄° EC_GROUP *
§c
);

222 c⁄° 
EC_METHOD
 *
EC_GROUP_mëhod_of
(c⁄° 
EC_GROUP
 *
group
);

228 
EC_METHOD_gë_fõld_ty≥
(c⁄° 
EC_METHOD
 *
mëh
);

238 
EC_GROUP_£t_gíî©‹
(
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
gíî©‹
, c⁄° 
BIGNUM
 *
‹dî
, c⁄° BIGNUM *
coÁ˘‹
);

244 c⁄° 
EC_POINT
 *
EC_GROUP_gë0_gíî©‹
(c⁄° 
EC_GROUP
 *
group
);

252 
EC_GROUP_gë_‹dî
(c⁄° 
EC_GROUP
 *
group
, 
BIGNUM
 *
‹dî
, 
BN_CTX
 *
˘x
);

260 
EC_GROUP_gë_coÁ˘‹
(c⁄° 
EC_GROUP
 *
group
, 
BIGNUM
 *
coÁ˘‹
, 
BN_CTX
 *
˘x
);

266 
EC_GROUP_£t_curve_«me
(
EC_GROUP
 *
group
, 
nid
);

272 
EC_GROUP_gë_curve_«me
(c⁄° 
EC_GROUP
 *
group
);

274 
EC_GROUP_£t_a¢1_Êag
(
EC_GROUP
 *
group
, 
Êag
);

275 
EC_GROUP_gë_a¢1_Êag
(c⁄° 
EC_GROUP
 *
group
);

277 
EC_GROUP_£t_poöt_c⁄vîsi⁄_f‹m
(
EC_GROUP
 *
group
, 
poöt_c⁄vîsi⁄_f‹m_t
 
f‹m
);

278 
poöt_c⁄vîsi⁄_f‹m_t
 
EC_GROUP_gë_poöt_c⁄vîsi⁄_f‹m
(c⁄° 
EC_GROUP
 *);

280 *
EC_GROUP_gë0_£ed
(c⁄° 
EC_GROUP
 *
x
);

281 
size_t
 
EC_GROUP_gë_£ed_Àn
(c⁄° 
EC_GROUP
 *);

282 
size_t
 
EC_GROUP_£t_£ed
(
EC_GROUP
 *, c⁄° *, size_à
Àn
);

292 
EC_GROUP_£t_curve_GFp
(
EC_GROUP
 *
group
, c⁄° 
BIGNUM
 *
p
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, 
BN_CTX
 *
˘x
);

302 
EC_GROUP_gë_curve_GFp
(c⁄° 
EC_GROUP
 *
group
, 
BIGNUM
 *
p
, BIGNUM *
a
, BIGNUM *
b
, 
BN_CTX
 *
˘x
);

304 #i‚de‡
OPENSSL_NO_EC2M


313 
EC_GROUP_£t_curve_GF2m
(
EC_GROUP
 *
group
, c⁄° 
BIGNUM
 *
p
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, 
BN_CTX
 *
˘x
);

323 
EC_GROUP_gë_curve_GF2m
(c⁄° 
EC_GROUP
 *
group
, 
BIGNUM
 *
p
, BIGNUM *
a
, BIGNUM *
b
, 
BN_CTX
 *
˘x
);

329 
EC_GROUP_gë_degªe
(c⁄° 
EC_GROUP
 *
group
);

336 
EC_GROUP_check
(c⁄° 
EC_GROUP
 *
group
, 
BN_CTX
 *
˘x
);

343 
EC_GROUP_check_dis¸imö™t
(c⁄° 
EC_GROUP
 *
group
, 
BN_CTX
 *
˘x
);

351 
EC_GROUP_cmp
(c⁄° 
EC_GROUP
 *
a
, c⁄° EC_GROUP *
b
, 
BN_CTX
 *
˘x
);

364 
EC_GROUP
 *
EC_GROUP_√w_curve_GFp
(c⁄° 
BIGNUM
 *
p
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, 
BN_CTX
 *
˘x
);

365 #i‚de‡
OPENSSL_NO_EC2M


374 
EC_GROUP
 *
EC_GROUP_√w_curve_GF2m
(c⁄° 
BIGNUM
 *
p
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, 
BN_CTX
 *
˘x
);

381 
EC_GROUP
 *
EC_GROUP_√w_by_curve_«me
(
nid
);

389 
nid
;

390 c⁄° *
commít
;

391 } 
	tEC_buûtö_curve
;

397 
size_t
 
EC_gë_buûtö_curves
(
EC_buûtö_curve
 *
r
, size_à
nôems
);

408 
EC_POINT
 *
EC_POINT_√w
(c⁄° 
EC_GROUP
 *
group
);

413 
EC_POINT_‰ì
(
EC_POINT
 *
poöt
);

418 
EC_POINT_˛ór_‰ì
(
EC_POINT
 *
poöt
);

425 
EC_POINT_c›y
(
EC_POINT
 *
d°
, c⁄° EC_POINT *
§c
);

433 
EC_POINT
 *
EC_POINT_dup
(c⁄° EC_POINT *
§c
, c⁄° 
EC_GROUP
 *
group
);

439 c⁄° 
EC_METHOD
 *
EC_POINT_mëhod_of
(c⁄° 
EC_POINT
 *
poöt
);

446 
EC_POINT_£t_to_öföôy
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
poöt
);

457 
EC_POINT_£t_J¥oje˘ive_co‹dö©es_GFp
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
p
,

458 c⁄° 
BIGNUM
 *
x
, c⁄° BIGNUM *
y
, c⁄° BIGNUM *
z
, 
BN_CTX
 *
˘x
);

469 
EC_POINT_gë_J¥oje˘ive_co‹dö©es_GFp
(c⁄° 
EC_GROUP
 *
group
,

470 c⁄° 
EC_POINT
 *
p
, 
BIGNUM
 *
x
, BIGNUM *
y
, BIGNUM *
z
, 
BN_CTX
 *
˘x
);

480 
EC_POINT_£t_afföe_co‹dö©es_GFp
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
p
,

481 c⁄° 
BIGNUM
 *
x
, c⁄° BIGNUM *
y
, 
BN_CTX
 *
˘x
);

491 
EC_POINT_gë_afföe_co‹dö©es_GFp
(c⁄° 
EC_GROUP
 *
group
,

492 c⁄° 
EC_POINT
 *
p
, 
BIGNUM
 *
x
, BIGNUM *
y
, 
BN_CTX
 *
˘x
);

502 
EC_POINT_£t_com¥es£d_co‹dö©es_GFp
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
p
,

503 c⁄° 
BIGNUM
 *
x
, 
y_bô
, 
BN_CTX
 *
˘x
);

504 #i‚de‡
OPENSSL_NO_EC2M


513 
EC_POINT_£t_afföe_co‹dö©es_GF2m
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
p
,

514 c⁄° 
BIGNUM
 *
x
, c⁄° BIGNUM *
y
, 
BN_CTX
 *
˘x
);

524 
EC_POINT_gë_afföe_co‹dö©es_GF2m
(c⁄° 
EC_GROUP
 *
group
,

525 c⁄° 
EC_POINT
 *
p
, 
BIGNUM
 *
x
, BIGNUM *
y
, 
BN_CTX
 *
˘x
);

535 
EC_POINT_£t_com¥es£d_co‹dö©es_GF2m
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
p
,

536 c⁄° 
BIGNUM
 *
x
, 
y_bô
, 
BN_CTX
 *
˘x
);

548 
size_t
 
EC_POINT_poöt2o˘
(c⁄° 
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
p
,

549 
poöt_c⁄vîsi⁄_f‹m_t
 
f‹m
,

550 *
buf
, 
size_t
 
Àn
, 
BN_CTX
 *
˘x
);

560 
EC_POINT_o˘2poöt
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
p
,

561 c⁄° *
buf
, 
size_t
 
Àn
, 
BN_CTX
 *
˘x
);

564 
BIGNUM
 *
EC_POINT_poöt2bn
(c⁄° 
EC_GROUP
 *, c⁄° 
EC_POINT
 *,

565 
poöt_c⁄vîsi⁄_f‹m_t
 
f‹m
, 
BIGNUM
 *, 
BN_CTX
 *);

566 
EC_POINT
 *
EC_POINT_bn2poöt
(c⁄° 
EC_GROUP
 *, c⁄° 
BIGNUM
 *,

567 
EC_POINT
 *, 
BN_CTX
 *);

568 *
EC_POINT_poöt2hex
(c⁄° 
EC_GROUP
 *, c⁄° 
EC_POINT
 *,

569 
poöt_c⁄vîsi⁄_f‹m_t
 
f‹m
, 
BN_CTX
 *);

570 
EC_POINT
 *
EC_POINT_hex2poöt
(c⁄° 
EC_GROUP
 *, const *,

571 
EC_POINT
 *, 
BN_CTX
 *);

586 
EC_POINT_add
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
r
, c⁄° EC_POINT *
a
, c⁄° EC_POINT *
b
, 
BN_CTX
 *
˘x
);

595 
EC_POINT_dbl
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
r
, c⁄° EC_POINT *
a
, 
BN_CTX
 *
˘x
);

603 
EC_POINT_övît
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
a
, 
BN_CTX
 *
˘x
);

610 
EC_POINT_is_©_öföôy
(c⁄° 
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
p
);

618 
EC_POINT_is_⁄_curve
(c⁄° 
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
poöt
, 
BN_CTX
 *
˘x
);

627 
EC_POINT_cmp
(c⁄° 
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
a
, c⁄° EC_POINT *
b
, 
BN_CTX
 *
˘x
);

629 
EC_POINT_make_afföe
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
poöt
, 
BN_CTX
 *
˘x
);

630 
EC_POINTs_make_afföe
(c⁄° 
EC_GROUP
 *
group
, 
size_t
 
num
, 
EC_POINT
 *
poöts
[], 
BN_CTX
 *
˘x
);

642 
EC_POINTs_mul
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
r
, c⁄° 
BIGNUM
 *
n
, 
size_t
 
num
, c⁄° EC_POINT *
p
[], c⁄° BIGNUM *
m
[], 
BN_CTX
 *
˘x
);

653 
EC_POINT_mul
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
r
, c⁄° 
BIGNUM
 *
n
, c⁄° EC_POINT *
q
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
);

660 
EC_GROUP_¥ecompuã_mu…
(
EC_GROUP
 *
group
, 
BN_CTX
 *
˘x
);

666 
EC_GROUP_have_¥ecompuã_mu…
(c⁄° 
EC_GROUP
 *
group
);

675 
EC_GROUP_gë_basis_ty≥
(c⁄° 
EC_GROUP
 *);

676 #i‚de‡
OPENSSL_NO_EC2M


677 
EC_GROUP_gë_åöomül_basis
(c⁄° 
EC_GROUP
 *, *
k
);

678 
EC_GROUP_gë_≥¡™omül_basis
(c⁄° 
EC_GROUP
 *, *
k1
,

679 *
k2
, *
k3
);

682 
	#OPENSSL_EC_NAMED_CURVE
 0x001

	)

684 
e˝k_∑ømëîs_°
 
	tECPKPARAMETERS
;

686 
EC_GROUP
 *
d2i_ECPKP¨amëîs
(EC_GROUP **, c⁄° **
ö
, 
Àn
);

687 
i2d_ECPKP¨amëîs
(c⁄° 
EC_GROUP
 *, **
out
);

689 
	#d2i_ECPKP¨amëîs_bio
(
bp
,
x
Ë
	`ASN1_d2i_bio_of
(
EC_GROUP
,
NULL
,
d2i_ECPKP¨amëîs
,bp,x)

	)

690 
	#i2d_ECPKP¨amëîs_bio
(
bp
,
x
Ë
	`ASN1_i2d_bio_of_c⁄°
(
EC_GROUP
,
i2d_ECPKP¨amëîs
,bp,x)

	)

691 
	#d2i_ECPKP¨amëîs_Â
(
Â
,
x
Ë(
EC_GROUP
 *)
	`ASN1_d2i_Â
(
NULL
, \

692 (*(*)())
d2i_ECPKP¨amëîs
,(
Â
),(**)(
x
))

	)

693 
	#i2d_ECPKP¨amëîs_Â
(
Â
,
x
Ë
	`ASN1_i2d_Â
(
i2d_ECPKP¨amëîs
,(fp), \

694 (*)(
x
))

	)

696 #i‚de‡
OPENSSL_NO_BIO


697 
ECPKP¨amëîs_¥öt
(
BIO
 *
bp
, c⁄° 
EC_GROUP
 *
x
, 
off
);

699 #i‚de‡
OPENSSL_NO_FP_API


700 
ECPKP¨amëîs_¥öt_Â
(
FILE
 *
Â
, c⁄° 
EC_GROUP
 *
x
, 
off
);

708 
ec_key_°
 
	tEC_KEY
;

711 
	#EC_PKEY_NO_PARAMETERS
 0x001

	)

712 
	#EC_PKEY_NO_PUBKEY
 0x002

	)

715 
	#EC_FLAG_NON_FIPS_ALLOW
 0x1

	)

716 
	#EC_FLAG_FIPS_CHECKED
 0x2

	)

721 
EC_KEY
 *
EC_KEY_√w
();

723 
EC_KEY_gë_Êags
(c⁄° 
EC_KEY
 *
key
);

725 
EC_KEY_£t_Êags
(
EC_KEY
 *
key
, 
Êags
);

727 
EC_KEY_˛ór_Êags
(
EC_KEY
 *
key
, 
Êags
);

734 
EC_KEY
 *
EC_KEY_√w_by_curve_«me
(
nid
);

739 
EC_KEY_‰ì
(
EC_KEY
 *
key
);

746 
EC_KEY
 *
EC_KEY_c›y
(EC_KEY *
d°
, c⁄° EC_KEY *
§c
);

752 
EC_KEY
 *
EC_KEY_dup
(c⁄° EC_KEY *
§c
);

758 
EC_KEY_up_ªf
(
EC_KEY
 *
key
);

764 c⁄° 
EC_GROUP
 *
EC_KEY_gë0_group
(c⁄° 
EC_KEY
 *
key
);

772 
EC_KEY_£t_group
(
EC_KEY
 *
key
, c⁄° 
EC_GROUP
 *
group
);

778 c⁄° 
BIGNUM
 *
EC_KEY_gë0_¥iv©e_key
(c⁄° 
EC_KEY
 *
key
);

786 
EC_KEY_£t_¥iv©e_key
(
EC_KEY
 *
key
, c⁄° 
BIGNUM
 *
¥v
);

792 c⁄° 
EC_POINT
 *
EC_KEY_gë0_public_key
(c⁄° 
EC_KEY
 *
key
);

800 
EC_KEY_£t_public_key
(
EC_KEY
 *
key
, c⁄° 
EC_POINT
 *
pub
);

802 
EC_KEY_gë_íc_Êags
(c⁄° 
EC_KEY
 *
key
);

803 
EC_KEY_£t_íc_Êags
(
EC_KEY
 *
eckey
, 
Êags
);

804 
poöt_c⁄vîsi⁄_f‹m_t
 
EC_KEY_gë_c⁄v_f‹m
(c⁄° 
EC_KEY
 *
key
);

805 
EC_KEY_£t_c⁄v_f‹m
(
EC_KEY
 *
eckey
, 
poöt_c⁄vîsi⁄_f‹m_t
 
cf‹m
);

807 *
EC_KEY_gë_key_mëhod_d©a
(
EC_KEY
 *
key
,

808 *(*
dup_func
)(*), (*
‰ì_func
)(*), (*
˛ór_‰ì_func
)(*));

817 *
EC_KEY_ö£π_key_mëhod_d©a
(
EC_KEY
 *
key
, *
d©a
,

818 *(*
dup_func
)(*), (*
‰ì_func
)(*), (*
˛ór_‰ì_func
)(*));

820 
EC_KEY_£t_a¢1_Êag
(
EC_KEY
 *
eckey
, 
a¢1_Êag
);

828 
EC_KEY_¥ecompuã_mu…
(
EC_KEY
 *
key
, 
BN_CTX
 *
˘x
);

834 
EC_KEY_gíî©e_key
(
EC_KEY
 *
key
);

840 
EC_KEY_check_key
(c⁄° 
EC_KEY
 *
key
);

849 
EC_KEY_£t_public_key_afföe_co‹dö©es
(
EC_KEY
 *
key
, 
BIGNUM
 *
x
, BIGNUM *
y
);

862 
EC_KEY
 *
d2i_ECPriv©eKey
(EC_KEY **
key
, c⁄° **
ö
, 
Àn
);

870 
i2d_ECPriv©eKey
(
EC_KEY
 *
key
, **
out
);

884 
EC_KEY
 *
d2i_ECP¨amëîs
(EC_KEY **
key
, c⁄° **
ö
, 
Àn
);

892 
i2d_ECP¨amëîs
(
EC_KEY
 *
key
, **
out
);

907 
EC_KEY
 *
o2i_ECPublicKey
(EC_KEY **
key
, c⁄° **
ö
, 
Àn
);

915 
i2o_ECPublicKey
(
EC_KEY
 *
key
, **
out
);

917 #i‚de‡
OPENSSL_NO_BIO


923 
ECP¨amëîs_¥öt
(
BIO
 *
bp
, c⁄° 
EC_KEY
 *
key
);

931 
EC_KEY_¥öt
(
BIO
 *
bp
, c⁄° 
EC_KEY
 *
key
, 
off
);

934 #i‚de‡
OPENSSL_NO_FP_API


940 
ECP¨amëîs_¥öt_Â
(
FILE
 *
Â
, c⁄° 
EC_KEY
 *
key
);

948 
EC_KEY_¥öt_Â
(
FILE
 *
Â
, c⁄° 
EC_KEY
 *
key
, 
off
);

952 
	#ECP¨amëîs_dup
(
x
Ë
	`ASN1_dup_of
(
EC_KEY
,
i2d_ECP¨amëîs
,
d2i_ECP¨amëîs
,x)

	)

954 #i‚de‡
__˝lu•lus


955 #i‡
deföed
(
__SUNPRO_C
)

956 #i‡
__SUNPRO_C
 >= 0x520

957 #¥agm®
îr‹_mesßges
 (,
E_ARRAY_OF_INCOMPLETE_NONAME
,
E_ARRAY_OF_INCOMPLETE
)

962 
	#EVP_PKEY_CTX_£t_ec_∑ømgí_curve_nid
(
˘x
, 
nid
) \

963 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_EC
, 
EVP_PKEY_OP_PARAMGEN
, \

964 
EVP_PKEY_CTRL_EC_PARAMGEN_CURVE_NID
, 
nid
, 
NULL
)

	)

967 
	#EVP_PKEY_CTRL_EC_PARAMGEN_CURVE_NID
 (
EVP_PKEY_ALG_CTRL
 + 1)

	)

973 
ERR_lﬂd_EC_°rögs
();

978 
	#EC_F_BN_TO_FELEM
 224

	)

979 
	#EC_F_COMPUTE_WNAF
 143

	)

980 
	#EC_F_D2I_ECPARAMETERS
 144

	)

981 
	#EC_F_D2I_ECPKPARAMETERS
 145

	)

982 
	#EC_F_D2I_ECPRIVATEKEY
 146

	)

983 
	#EC_F_DO_EC_KEY_PRINT
 221

	)

984 
	#EC_F_ECKEY_PARAM2TYPE
 223

	)

985 
	#EC_F_ECKEY_PARAM_DECODE
 212

	)

986 
	#EC_F_ECKEY_PRIV_DECODE
 213

	)

987 
	#EC_F_ECKEY_PRIV_ENCODE
 214

	)

988 
	#EC_F_ECKEY_PUB_DECODE
 215

	)

989 
	#EC_F_ECKEY_PUB_ENCODE
 216

	)

990 
	#EC_F_ECKEY_TYPE2PARAM
 220

	)

991 
	#EC_F_ECPARAMETERS_PRINT
 147

	)

992 
	#EC_F_ECPARAMETERS_PRINT_FP
 148

	)

993 
	#EC_F_ECPKPARAMETERS_PRINT
 149

	)

994 
	#EC_F_ECPKPARAMETERS_PRINT_FP
 150

	)

995 
	#EC_F_ECP_NIST_MOD_192
 203

	)

996 
	#EC_F_ECP_NIST_MOD_224
 204

	)

997 
	#EC_F_ECP_NIST_MOD_256
 205

	)

998 
	#EC_F_ECP_NIST_MOD_521
 206

	)

999 
	#EC_F_EC_ASN1_GROUP2CURVE
 153

	)

1000 
	#EC_F_EC_ASN1_GROUP2FIELDID
 154

	)

1001 
	#EC_F_EC_ASN1_GROUP2PARAMETERS
 155

	)

1002 
	#EC_F_EC_ASN1_GROUP2PKPARAMETERS
 156

	)

1003 
	#EC_F_EC_ASN1_PARAMETERS2GROUP
 157

	)

1004 
	#EC_F_EC_ASN1_PKPARAMETERS2GROUP
 158

	)

1005 
	#EC_F_EC_EX_DATA_SET_DATA
 211

	)

1006 
	#EC_F_EC_GF2M_MONTGOMERY_POINT_MULTIPLY
 208

	)

1007 
	#EC_F_EC_GF2M_SIMPLE_GROUP_CHECK_DISCRIMINANT
 159

	)

1008 
	#EC_F_EC_GF2M_SIMPLE_GROUP_SET_CURVE
 195

	)

1009 
	#EC_F_EC_GF2M_SIMPLE_OCT2POINT
 160

	)

1010 
	#EC_F_EC_GF2M_SIMPLE_POINT2OCT
 161

	)

1011 
	#EC_F_EC_GF2M_SIMPLE_POINT_GET_AFFINE_COORDINATES
 162

	)

1012 
	#EC_F_EC_GF2M_SIMPLE_POINT_SET_AFFINE_COORDINATES
 163

	)

1013 
	#EC_F_EC_GF2M_SIMPLE_SET_COMPRESSED_COORDINATES
 164

	)

1014 
	#EC_F_EC_GFP_MONT_FIELD_DECODE
 133

	)

1015 
	#EC_F_EC_GFP_MONT_FIELD_ENCODE
 134

	)

1016 
	#EC_F_EC_GFP_MONT_FIELD_MUL
 131

	)

1017 
	#EC_F_EC_GFP_MONT_FIELD_SET_TO_ONE
 209

	)

1018 
	#EC_F_EC_GFP_MONT_FIELD_SQR
 132

	)

1019 
	#EC_F_EC_GFP_MONT_GROUP_SET_CURVE
 189

	)

1020 
	#EC_F_EC_GFP_MONT_GROUP_SET_CURVE_GFP
 135

	)

1021 
	#EC_F_EC_GFP_NISTP224_GROUP_SET_CURVE
 225

	)

1022 
	#EC_F_EC_GFP_NISTP224_POINTS_MUL
 228

	)

1023 
	#EC_F_EC_GFP_NISTP224_POINT_GET_AFFINE_COORDINATES
 226

	)

1024 
	#EC_F_EC_GFP_NISTP256_GROUP_SET_CURVE
 230

	)

1025 
	#EC_F_EC_GFP_NISTP256_POINTS_MUL
 231

	)

1026 
	#EC_F_EC_GFP_NISTP256_POINT_GET_AFFINE_COORDINATES
 232

	)

1027 
	#EC_F_EC_GFP_NISTP521_GROUP_SET_CURVE
 233

	)

1028 
	#EC_F_EC_GFP_NISTP521_POINTS_MUL
 234

	)

1029 
	#EC_F_EC_GFP_NISTP521_POINT_GET_AFFINE_COORDINATES
 235

	)

1030 
	#EC_F_EC_GFP_NIST_FIELD_MUL
 200

	)

1031 
	#EC_F_EC_GFP_NIST_FIELD_SQR
 201

	)

1032 
	#EC_F_EC_GFP_NIST_GROUP_SET_CURVE
 202

	)

1033 
	#EC_F_EC_GFP_SIMPLE_GROUP_CHECK_DISCRIMINANT
 165

	)

1034 
	#EC_F_EC_GFP_SIMPLE_GROUP_SET_CURVE
 166

	)

1035 
	#EC_F_EC_GFP_SIMPLE_GROUP_SET_CURVE_GFP
 100

	)

1036 
	#EC_F_EC_GFP_SIMPLE_GROUP_SET_GENERATOR
 101

	)

1037 
	#EC_F_EC_GFP_SIMPLE_MAKE_AFFINE
 102

	)

1038 
	#EC_F_EC_GFP_SIMPLE_OCT2POINT
 103

	)

1039 
	#EC_F_EC_GFP_SIMPLE_POINT2OCT
 104

	)

1040 
	#EC_F_EC_GFP_SIMPLE_POINTS_MAKE_AFFINE
 137

	)

1041 
	#EC_F_EC_GFP_SIMPLE_POINT_GET_AFFINE_COORDINATES
 167

	)

1042 
	#EC_F_EC_GFP_SIMPLE_POINT_GET_AFFINE_COORDINATES_GFP
 105

	)

1043 
	#EC_F_EC_GFP_SIMPLE_POINT_SET_AFFINE_COORDINATES
 168

	)

1044 
	#EC_F_EC_GFP_SIMPLE_POINT_SET_AFFINE_COORDINATES_GFP
 128

	)

1045 
	#EC_F_EC_GFP_SIMPLE_SET_COMPRESSED_COORDINATES
 169

	)

1046 
	#EC_F_EC_GFP_SIMPLE_SET_COMPRESSED_COORDINATES_GFP
 129

	)

1047 
	#EC_F_EC_GROUP_CHECK
 170

	)

1048 
	#EC_F_EC_GROUP_CHECK_DISCRIMINANT
 171

	)

1049 
	#EC_F_EC_GROUP_COPY
 106

	)

1050 
	#EC_F_EC_GROUP_GET0_GENERATOR
 139

	)

1051 
	#EC_F_EC_GROUP_GET_COFACTOR
 140

	)

1052 
	#EC_F_EC_GROUP_GET_CURVE_GF2M
 172

	)

1053 
	#EC_F_EC_GROUP_GET_CURVE_GFP
 130

	)

1054 
	#EC_F_EC_GROUP_GET_DEGREE
 173

	)

1055 
	#EC_F_EC_GROUP_GET_ORDER
 141

	)

1056 
	#EC_F_EC_GROUP_GET_PENTANOMIAL_BASIS
 193

	)

1057 
	#EC_F_EC_GROUP_GET_TRINOMIAL_BASIS
 194

	)

1058 
	#EC_F_EC_GROUP_NEW
 108

	)

1059 
	#EC_F_EC_GROUP_NEW_BY_CURVE_NAME
 174

	)

1060 
	#EC_F_EC_GROUP_NEW_FROM_DATA
 175

	)

1061 
	#EC_F_EC_GROUP_PRECOMPUTE_MULT
 142

	)

1062 
	#EC_F_EC_GROUP_SET_CURVE_GF2M
 176

	)

1063 
	#EC_F_EC_GROUP_SET_CURVE_GFP
 109

	)

1064 
	#EC_F_EC_GROUP_SET_EXTRA_DATA
 110

	)

1065 
	#EC_F_EC_GROUP_SET_GENERATOR
 111

	)

1066 
	#EC_F_EC_KEY_CHECK_KEY
 177

	)

1067 
	#EC_F_EC_KEY_COPY
 178

	)

1068 
	#EC_F_EC_KEY_GENERATE_KEY
 179

	)

1069 
	#EC_F_EC_KEY_NEW
 182

	)

1070 
	#EC_F_EC_KEY_PRINT
 180

	)

1071 
	#EC_F_EC_KEY_PRINT_FP
 181

	)

1072 
	#EC_F_EC_KEY_SET_PUBLIC_KEY_AFFINE_COORDINATES
 229

	)

1073 
	#EC_F_EC_POINTS_MAKE_AFFINE
 136

	)

1074 
	#EC_F_EC_POINT_ADD
 112

	)

1075 
	#EC_F_EC_POINT_CMP
 113

	)

1076 
	#EC_F_EC_POINT_COPY
 114

	)

1077 
	#EC_F_EC_POINT_DBL
 115

	)

1078 
	#EC_F_EC_POINT_GET_AFFINE_COORDINATES_GF2M
 183

	)

1079 
	#EC_F_EC_POINT_GET_AFFINE_COORDINATES_GFP
 116

	)

1080 
	#EC_F_EC_POINT_GET_JPROJECTIVE_COORDINATES_GFP
 117

	)

1081 
	#EC_F_EC_POINT_INVERT
 210

	)

1082 
	#EC_F_EC_POINT_IS_AT_INFINITY
 118

	)

1083 
	#EC_F_EC_POINT_IS_ON_CURVE
 119

	)

1084 
	#EC_F_EC_POINT_MAKE_AFFINE
 120

	)

1085 
	#EC_F_EC_POINT_MUL
 184

	)

1086 
	#EC_F_EC_POINT_NEW
 121

	)

1087 
	#EC_F_EC_POINT_OCT2POINT
 122

	)

1088 
	#EC_F_EC_POINT_POINT2OCT
 123

	)

1089 
	#EC_F_EC_POINT_SET_AFFINE_COORDINATES_GF2M
 185

	)

1090 
	#EC_F_EC_POINT_SET_AFFINE_COORDINATES_GFP
 124

	)

1091 
	#EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GF2M
 186

	)

1092 
	#EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GFP
 125

	)

1093 
	#EC_F_EC_POINT_SET_JPROJECTIVE_COORDINATES_GFP
 126

	)

1094 
	#EC_F_EC_POINT_SET_TO_INFINITY
 127

	)

1095 
	#EC_F_EC_PRE_COMP_DUP
 207

	)

1096 
	#EC_F_EC_PRE_COMP_NEW
 196

	)

1097 
	#EC_F_EC_WNAF_MUL
 187

	)

1098 
	#EC_F_EC_WNAF_PRECOMPUTE_MULT
 188

	)

1099 
	#EC_F_I2D_ECPARAMETERS
 190

	)

1100 
	#EC_F_I2D_ECPKPARAMETERS
 191

	)

1101 
	#EC_F_I2D_ECPRIVATEKEY
 192

	)

1102 
	#EC_F_I2O_ECPUBLICKEY
 151

	)

1103 
	#EC_F_NISTP224_PRE_COMP_NEW
 227

	)

1104 
	#EC_F_NISTP256_PRE_COMP_NEW
 236

	)

1105 
	#EC_F_NISTP521_PRE_COMP_NEW
 237

	)

1106 
	#EC_F_O2I_ECPUBLICKEY
 152

	)

1107 
	#EC_F_OLD_EC_PRIV_DECODE
 222

	)

1108 
	#EC_F_PKEY_EC_CTRL
 197

	)

1109 
	#EC_F_PKEY_EC_CTRL_STR
 198

	)

1110 
	#EC_F_PKEY_EC_DERIVE
 217

	)

1111 
	#EC_F_PKEY_EC_KEYGEN
 199

	)

1112 
	#EC_F_PKEY_EC_PARAMGEN
 219

	)

1113 
	#EC_F_PKEY_EC_SIGN
 218

	)

1116 
	#EC_R_ASN1_ERROR
 115

	)

1117 
	#EC_R_ASN1_UNKNOWN_FIELD
 116

	)

1118 
	#EC_R_BIGNUM_OUT_OF_RANGE
 144

	)

1119 
	#EC_R_BUFFER_TOO_SMALL
 100

	)

1120 
	#EC_R_COORDINATES_OUT_OF_RANGE
 146

	)

1121 
	#EC_R_D2I_ECPKPARAMETERS_FAILURE
 117

	)

1122 
	#EC_R_DECODE_ERROR
 142

	)

1123 
	#EC_R_DISCRIMINANT_IS_ZERO
 118

	)

1124 
	#EC_R_EC_GROUP_NEW_BY_NAME_FAILURE
 119

	)

1125 
	#EC_R_FIELD_TOO_LARGE
 143

	)

1126 
	#EC_R_GF2M_NOT_SUPPORTED
 147

	)

1127 
	#EC_R_GROUP2PKPARAMETERS_FAILURE
 120

	)

1128 
	#EC_R_I2D_ECPKPARAMETERS_FAILURE
 121

	)

1129 
	#EC_R_INCOMPATIBLE_OBJECTS
 101

	)

1130 
	#EC_R_INVALID_ARGUMENT
 112

	)

1131 
	#EC_R_INVALID_COMPRESSED_POINT
 110

	)

1132 
	#EC_R_INVALID_COMPRESSION_BIT
 109

	)

1133 
	#EC_R_INVALID_CURVE
 141

	)

1134 
	#EC_R_INVALID_DIGEST_TYPE
 138

	)

1135 
	#EC_R_INVALID_ENCODING
 102

	)

1136 
	#EC_R_INVALID_FIELD
 103

	)

1137 
	#EC_R_INVALID_FORM
 104

	)

1138 
	#EC_R_INVALID_GROUP_ORDER
 122

	)

1139 
	#EC_R_INVALID_PENTANOMIAL_BASIS
 132

	)

1140 
	#EC_R_INVALID_PRIVATE_KEY
 123

	)

1141 
	#EC_R_INVALID_TRINOMIAL_BASIS
 137

	)

1142 
	#EC_R_KEYS_NOT_SET
 140

	)

1143 
	#EC_R_MISSING_PARAMETERS
 124

	)

1144 
	#EC_R_MISSING_PRIVATE_KEY
 125

	)

1145 
	#EC_R_NOT_A_NIST_PRIME
 135

	)

1146 
	#EC_R_NOT_A_SUPPORTED_NIST_PRIME
 136

	)

1147 
	#EC_R_NOT_IMPLEMENTED
 126

	)

1148 
	#EC_R_NOT_INITIALIZED
 111

	)

1149 
	#EC_R_NO_FIELD_MOD
 133

	)

1150 
	#EC_R_NO_PARAMETERS_SET
 139

	)

1151 
	#EC_R_PASSED_NULL_PARAMETER
 134

	)

1152 
	#EC_R_PKPARAMETERS2GROUP_FAILURE
 127

	)

1153 
	#EC_R_POINT_AT_INFINITY
 106

	)

1154 
	#EC_R_POINT_IS_NOT_ON_CURVE
 107

	)

1155 
	#EC_R_SLOT_FULL
 108

	)

1156 
	#EC_R_UNDEFINED_GENERATOR
 113

	)

1157 
	#EC_R_UNDEFINED_ORDER
 128

	)

1158 
	#EC_R_UNKNOWN_GROUP
 129

	)

1159 
	#EC_R_UNKNOWN_ORDER
 114

	)

1160 
	#EC_R_UNSUPPORTED_FIELD
 131

	)

1161 
	#EC_R_WRONG_CURVE_PARAMETERS
 145

	)

1162 
	#EC_R_WRONG_ORDER
 130

	)

1164 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ecdh.h

69 #i‚de‡
HEADER_ECDH_H


70 
	#HEADER_ECDH_H


	)

72 
	~<›ís¶/›ís¶c⁄f.h
>

74 #ifde‡
OPENSSL_NO_ECDH


75 #îr‹ 
ECDH
 
is
 
dißbÀd
.

78 
	~<›ís¶/ec.h
>

79 
	~<›ís¶/os¶_typ.h
>

80 #i‚de‡
OPENSSL_NO_DEPRECATED


81 
	~<›ís¶/bn.h
>

84 #ifde‡
__˝lu•lus


88 c⁄° 
ECDH_METHOD
 *
ECDH_O≥nSSL
();

90 
ECDH_£t_deÁu…_mëhod
(c⁄° 
ECDH_METHOD
 *);

91 c⁄° 
ECDH_METHOD
 *
ECDH_gë_deÁu…_mëhod
();

92 
ECDH_£t_mëhod
(
EC_KEY
 *, c⁄° 
ECDH_METHOD
 *);

94 
ECDH_compuã_key
(*
out
, 
size_t
 
ouéí
, c⁄° 
EC_POINT
 *
pub_key
, 
EC_KEY
 *
ecdh
,

95 *(*
KDF
)(c⁄° *
ö
, 
size_t
 
öÀn
, *
out
, size_à*
ouéí
));

97 
ECDH_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w


98 *
√w_func
, 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

99 
ECDH_£t_ex_d©a
(
EC_KEY
 *
d
, 
idx
, *
¨g
);

100 *
ECDH_gë_ex_d©a
(
EC_KEY
 *
d
, 
idx
);

107 
ERR_lﬂd_ECDH_°rögs
();

112 
	#ECDH_F_ECDH_CHECK
 102

	)

113 
	#ECDH_F_ECDH_COMPUTE_KEY
 100

	)

114 
	#ECDH_F_ECDH_DATA_NEW_METHOD
 101

	)

117 
	#ECDH_R_KDF_FAILED
 102

	)

118 
	#ECDH_R_NON_FIPS_METHOD
 103

	)

119 
	#ECDH_R_NO_PRIVATE_VALUE
 100

	)

120 
	#ECDH_R_POINT_ARITHMETIC_FAILURE
 101

	)

122 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ecdsa.h

59 #i‚de‡
HEADER_ECDSA_H


60 
	#HEADER_ECDSA_H


	)

62 
	~<›ís¶/›ís¶c⁄f.h
>

64 #ifde‡
OPENSSL_NO_ECDSA


65 #îr‹ 
ECDSA
 
is
 
dißbÀd
.

68 
	~<›ís¶/ec.h
>

69 
	~<›ís¶/os¶_typ.h
>

70 #i‚de‡
OPENSSL_NO_DEPRECATED


71 
	~<›ís¶/bn.h
>

74 #ifde‡
__˝lu•lus


78 
	sECDSA_SIG_°


80 
BIGNUM
 *
r
;

81 
BIGNUM
 *
s
;

82 } 
	tECDSA_SIG
;

87 
ECDSA_SIG
 *
ECDSA_SIG_√w
();

92 
ECDSA_SIG_‰ì
(
ECDSA_SIG
 *
sig
);

100 
i2d_ECDSA_SIG
(c⁄° 
ECDSA_SIG
 *
sig
, **
µ
);

109 
ECDSA_SIG
 *
d2i_ECDSA_SIG
(ECDSA_SIG **
sig
, c⁄° **
µ
, 
Àn
);

118 
ECDSA_SIG
 *
ECDSA_do_sign
(c⁄° *
dg°
,
dg°_Àn
,
EC_KEY
 *
eckey
);

130 
ECDSA_SIG
 *
ECDSA_do_sign_ex
(c⁄° *
dg°
, 
dg°Àn
,

131 c⁄° 
BIGNUM
 *
köv
, c⁄° BIGNUM *
Ω
, 
EC_KEY
 *
eckey
);

142 
ECDSA_do_vîify
(c⁄° *
dg°
, 
dg°_Àn
,

143 c⁄° 
ECDSA_SIG
 *
sig
, 
EC_KEY
* 
eckey
);

145 c⁄° 
ECDSA_METHOD
 *
ECDSA_O≥nSSL
();

150 
ECDSA_£t_deÁu…_mëhod
(c⁄° 
ECDSA_METHOD
 *
mëh
);

155 c⁄° 
ECDSA_METHOD
 *
ECDSA_gë_deÁu…_mëhod
();

162 
ECDSA_£t_mëhod
(
EC_KEY
 *
eckey
, c⁄° 
ECDSA_METHOD
 *
mëh
);

168 
ECDSA_size
(c⁄° 
EC_KEY
 *
eckey
);

177 
ECDSA_sign_£tup
(
EC_KEY
 *
eckey
, 
BN_CTX
 *
˘x
, 
BIGNUM
 **
köv
,

178 
BIGNUM
 **
Ω
);

190 
ECDSA_sign
(
ty≥
, c⁄° *
dg°
, 
dg°Àn
,

191 *
sig
, *
sigÀn
, 
EC_KEY
 *
eckey
);

207 
ECDSA_sign_ex
(
ty≥
, c⁄° *
dg°
, 
dg°Àn
,

208 *
sig
, *
sigÀn
, c⁄° 
BIGNUM
 *
köv
,

209 c⁄° 
BIGNUM
 *
Ω
, 
EC_KEY
 *
eckey
);

222 
ECDSA_vîify
(
ty≥
, c⁄° *
dg°
, 
dg°Àn
,

223 c⁄° *
sig
, 
sigÀn
, 
EC_KEY
 *
eckey
);

226 
ECDSA_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w


227 *
√w_func
, 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

228 
ECDSA_£t_ex_d©a
(
EC_KEY
 *
d
, 
idx
, *
¨g
);

229 *
ECDSA_gë_ex_d©a
(
EC_KEY
 *
d
, 
idx
);

236 
ERR_lﬂd_ECDSA_°rögs
();

241 
	#ECDSA_F_ECDSA_CHECK
 104

	)

242 
	#ECDSA_F_ECDSA_DATA_NEW_METHOD
 100

	)

243 
	#ECDSA_F_ECDSA_DO_SIGN
 101

	)

244 
	#ECDSA_F_ECDSA_DO_VERIFY
 102

	)

245 
	#ECDSA_F_ECDSA_SIGN_SETUP
 103

	)

248 
	#ECDSA_R_BAD_SIGNATURE
 100

	)

249 
	#ECDSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE
 101

	)

250 
	#ECDSA_R_ERR_EC_LIB
 102

	)

251 
	#ECDSA_R_MISSING_PARAMETERS
 103

	)

252 
	#ECDSA_R_NEED_NEW_SETUP_VALUES
 106

	)

253 
	#ECDSA_R_NON_FIPS_METHOD
 107

	)

254 
	#ECDSA_R_RANDOM_NUMBER_GENERATION_FAILED
 104

	)

255 
	#ECDSA_R_SIGNATURE_MALLOC_FAILED
 105

	)

257 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/evp.h

59 #i‚de‡
HEADER_ENVELOPE_H


60 
	#HEADER_ENVELOPE_H


	)

62 #ifde‡
OPENSSL_ALGORITHM_DEFINES


63 
	~<›ís¶/›ís¶c⁄f.h
>

65 
	#OPENSSL_ALGORITHM_DEFINES


	)

66 
	~<›ís¶/›ís¶c⁄f.h
>

67 #unde‡
OPENSSL_ALGORITHM_DEFINES


70 
	~<›ís¶/os¶_typ.h
>

72 
	~<›ís¶/symhacks.h
>

74 #i‚de‡
OPENSSL_NO_BIO


75 
	~<›ís¶/bio.h
>

85 
	#EVP_MAX_MD_SIZE
 64

	)

86 
	#EVP_MAX_KEY_LENGTH
 64

	)

87 
	#EVP_MAX_IV_LENGTH
 16

	)

88 
	#EVP_MAX_BLOCK_LENGTH
 32

	)

90 
	#PKCS5_SALT_LEN
 8

	)

92 
	#PKCS5_DEFAULT_ITER
 2048

	)

94 
	~<›ís¶/obje˘s.h
>

96 
	#EVP_PK_RSA
 0x0001

	)

97 
	#EVP_PK_DSA
 0x0002

	)

98 
	#EVP_PK_DH
 0x0004

	)

99 
	#EVP_PK_EC
 0x0008

	)

100 
	#EVP_PKT_SIGN
 0x0010

	)

101 
	#EVP_PKT_ENC
 0x0020

	)

102 
	#EVP_PKT_EXCH
 0x0040

	)

103 
	#EVP_PKS_RSA
 0x0100

	)

104 
	#EVP_PKS_DSA
 0x0200

	)

105 
	#EVP_PKS_EC
 0x0400

	)

106 
	#EVP_PKT_EXP
 0x1000

	)

108 
	#EVP_PKEY_NONE
 
NID_undef


	)

109 
	#EVP_PKEY_RSA
 
NID_rßEn¸y±i⁄


	)

110 
	#EVP_PKEY_RSA2
 
NID_rß


	)

111 
	#EVP_PKEY_DSA
 
NID_dß


	)

112 
	#EVP_PKEY_DSA1
 
NID_dß_2


	)

113 
	#EVP_PKEY_DSA2
 
NID_dßWôhSHA


	)

114 
	#EVP_PKEY_DSA3
 
NID_dßWôhSHA1


	)

115 
	#EVP_PKEY_DSA4
 
NID_dßWôhSHA1_2


	)

116 
	#EVP_PKEY_DH
 
NID_dhKeyAgªemít


	)

117 
	#EVP_PKEY_EC
 
NID_X9_62_id_ecPublicKey


	)

118 
	#EVP_PKEY_HMAC
 
NID_hmac


	)

119 
	#EVP_PKEY_CMAC
 
NID_cmac


	)

121 #ifdef 
__˝lu•lus


128 
	sevp_pkey_°


130 
ty≥
;

131 
ßve_ty≥
;

132 
ª„ªn˚s
;

133 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
amëh
;

134 
ENGINE
 *
ígöe
;

136 *
±r
;

137 #i‚de‡
OPENSSL_NO_RSA


138 
rß_°
 *
rß
;

140 #i‚de‡
OPENSSL_NO_DSA


141 
dß_°
 *
dß
;

143 #i‚de‡
OPENSSL_NO_DH


144 
dh_°
 *
dh
;

146 #i‚de‡
OPENSSL_NO_EC


147 
ec_key_°
 *
ec
;

149 } 
pkey
;

150 
ßve_∑ømëîs
;

151 
STACK_OF
(
X509_ATTRIBUTE
Ë*
©åibuãs
;

154 
	#EVP_PKEY_MO_SIGN
 0x0001

	)

155 
	#EVP_PKEY_MO_VERIFY
 0x0002

	)

156 
	#EVP_PKEY_MO_ENCRYPT
 0x0004

	)

157 
	#EVP_PKEY_MO_DECRYPT
 0x0008

	)

159 #i‚de‡
EVP_MD


160 
	sív_md_°


162 
ty≥
;

163 
pkey_ty≥
;

164 
md_size
;

165 
Êags
;

166 (*
öô
)(
EVP_MD_CTX
 *
˘x
);

167 (*
upd©e
)(
EVP_MD_CTX
 *
˘x
,c⁄° *
d©a
,
size_t
 
cou¡
);

168 (*
föÆ
)(
EVP_MD_CTX
 *
˘x
,*
md
);

169 (*
c›y
)(
EVP_MD_CTX
 *
to
,c⁄° EVP_MD_CTX *
‰om
);

170 (*
˛ónup
)(
EVP_MD_CTX
 *
˘x
);

173 (*
sign
)(
ty≥
, c⁄° *
m
, 
m_Àngth
,

174 *
sigªt
, *
sigÀn
, *
key
);

175 (*
vîify
)(
ty≥
, c⁄° *
m
, 
m_Àngth
,

176 c⁄° *
sigbuf
, 
sigÀn
,

177 *
key
);

178 
ªquúed_pkey_ty≥
[5];

179 
block_size
;

180 
˘x_size
;

182 (*
md_˘æ
)(
EVP_MD_CTX
 *
˘x
, 
cmd
, 
p1
, *
p2
);

185 
	tevp_sign_mëhod
(
	tty≥
,c⁄° *
	tm
,

186 
	tm_Àngth
,*
	tsigªt
,

187 *
	tsigÀn
, *
	tkey
);

188 
	tevp_vîify_mëhod
(
	tty≥
,c⁄° *
	tm
,

189 
	tm_Àngth
,c⁄° *
	tsigbuf
,

190 
	tsigÀn
, *
	tkey
);

192 
	#EVP_MD_FLAG_ONESHOT
 0x0001

	)

195 
	#EVP_MD_FLAG_PKEY_DIGEST
 0x0002

	)

202 
	#EVP_MD_FLAG_PKEY_METHOD_SIGNATURE
 0x0004

	)

206 
	#EVP_MD_FLAG_DIGALGID_MASK
 0x0018

	)

210 
	#EVP_MD_FLAG_DIGALGID_NULL
 0x0000

	)

214 
	#EVP_MD_FLAG_DIGALGID_ABSENT
 0x0008

	)

218 
	#EVP_MD_FLAG_DIGALGID_CUSTOM
 0x0018

	)

220 
	#EVP_MD_FLAG_FIPS
 0x0400

	)

224 
	#EVP_MD_CTRL_DIGALGID
 0x1

	)

225 
	#EVP_MD_CTRL_MICALG
 0x2

	)

229 
	#EVP_MD_CTRL_ALG_CTRL
 0x1000

	)

231 
	#EVP_PKEY_NULL_mëhod
 
NULL
,NULL,{0,0,0,0}

	)

233 #i‚de‡
OPENSSL_NO_DSA


234 
	#EVP_PKEY_DSA_mëhod
 (
evp_sign_mëhod
 *)
DSA_sign
, \

235 (
evp_vîify_mëhod
 *)
DSA_vîify
, \

236 {
EVP_PKEY_DSA
,
EVP_PKEY_DSA2
,
EVP_PKEY_DSA3
, \

237 
EVP_PKEY_DSA4
,0}

	)

239 
	#EVP_PKEY_DSA_mëhod
 
EVP_PKEY_NULL_mëhod


	)

242 #i‚de‡
OPENSSL_NO_ECDSA


243 
	#EVP_PKEY_ECDSA_mëhod
 (
evp_sign_mëhod
 *)
ECDSA_sign
, \

244 (
evp_vîify_mëhod
 *)
ECDSA_vîify
, \

245 {
EVP_PKEY_EC
,0,0,0}

	)

247 
	#EVP_PKEY_ECDSA_mëhod
 
EVP_PKEY_NULL_mëhod


	)

250 #i‚de‡
OPENSSL_NO_RSA


251 
	#EVP_PKEY_RSA_mëhod
 (
evp_sign_mëhod
 *)
RSA_sign
, \

252 (
evp_vîify_mëhod
 *)
RSA_vîify
, \

253 {
EVP_PKEY_RSA
,
EVP_PKEY_RSA2
,0,0}

	)

254 
	#EVP_PKEY_RSA_ASN1_OCTET_STRING_mëhod
 \

255 (
evp_sign_mëhod
 *)
RSA_sign_ASN1_OCTET_STRING
, \

256 (
evp_vîify_mëhod
 *)
RSA_vîify_ASN1_OCTET_STRING
, \

257 {
EVP_PKEY_RSA
,
EVP_PKEY_RSA2
,0,0}

	)

259 
	#EVP_PKEY_RSA_mëhod
 
EVP_PKEY_NULL_mëhod


	)

260 
	#EVP_PKEY_RSA_ASN1_OCTET_STRING_mëhod
 
EVP_PKEY_NULL_mëhod


	)

265 
	sív_md_˘x_°


267 c⁄° 
EVP_MD
 *
dige°
;

268 
ENGINE
 *
ígöe
;

269 
Êags
;

270 *
md_d©a
;

272 
EVP_PKEY_CTX
 *
p˘x
;

274 (*
upd©e
)(
EVP_MD_CTX
 *
˘x
,c⁄° *
d©a
,
size_t
 
cou¡
);

279 
	#EVP_MD_CTX_FLAG_ONESHOT
 0x0001

	)

281 
	#EVP_MD_CTX_FLAG_CLEANED
 0x0002

	)

283 
	#EVP_MD_CTX_FLAG_REUSE
 0x0004

	)

289 
	#EVP_MD_CTX_FLAG_NON_FIPS_ALLOW
 0x0008

	)

296 
	#EVP_MD_CTX_FLAG_PAD_MASK
 0xF0

	)

297 
	#EVP_MD_CTX_FLAG_PAD_PKCS1
 0x00

	)

298 
	#EVP_MD_CTX_FLAG_PAD_X931
 0x10

	)

299 
	#EVP_MD_CTX_FLAG_PAD_PSS
 0x20

	)

301 
	#EVP_MD_CTX_FLAG_NO_INIT
 0x0100

	)

303 
	sevp_cùhî_°


305 
nid
;

306 
block_size
;

307 
key_Àn
;

308 
iv_Àn
;

309 
Êags
;

310 (*
öô
)(
EVP_CIPHER_CTX
 *
˘x
, c⁄° *
key
,

311 c⁄° *
iv
, 
íc
);

312 (*
do_cùhî
)(
EVP_CIPHER_CTX
 *
˘x
, *
out
,

313 c⁄° *
ö
, 
size_t
 
öl
);

314 (*
˛ónup
)(
EVP_CIPHER_CTX
 *);

315 
˘x_size
;

316 (*
£t_a¢1_∑ømëîs
)(
EVP_CIPHER_CTX
 *, 
ASN1_TYPE
 *);

317 (*
gë_a¢1_∑ømëîs
)(
EVP_CIPHER_CTX
 *, 
ASN1_TYPE
 *);

318 (*
˘æ
)(
EVP_CIPHER_CTX
 *, 
ty≥
, 
¨g
, *
±r
);

319 *
≠p_d©a
;

326 
	#EVP_CIPH_STREAM_CIPHER
 0x0

	)

327 
	#EVP_CIPH_ECB_MODE
 0x1

	)

328 
	#EVP_CIPH_CBC_MODE
 0x2

	)

329 
	#EVP_CIPH_CFB_MODE
 0x3

	)

330 
	#EVP_CIPH_OFB_MODE
 0x4

	)

331 
	#EVP_CIPH_CTR_MODE
 0x5

	)

332 
	#EVP_CIPH_GCM_MODE
 0x6

	)

333 
	#EVP_CIPH_CCM_MODE
 0x7

	)

334 
	#EVP_CIPH_XTS_MODE
 0x10001

	)

335 
	#EVP_CIPH_MODE
 0xF0007

	)

337 
	#EVP_CIPH_VARIABLE_LENGTH
 0x8

	)

339 
	#EVP_CIPH_CUSTOM_IV
 0x10

	)

341 
	#EVP_CIPH_ALWAYS_CALL_INIT
 0x20

	)

343 
	#EVP_CIPH_CTRL_INIT
 0x40

	)

345 
	#EVP_CIPH_CUSTOM_KEY_LENGTH
 0x80

	)

347 
	#EVP_CIPH_NO_PADDING
 0x100

	)

349 
	#EVP_CIPH_RAND_KEY
 0x200

	)

351 
	#EVP_CIPH_CUSTOM_COPY
 0x400

	)

353 
	#EVP_CIPH_FLAG_DEFAULT_ASN1
 0x1000

	)

355 
	#EVP_CIPH_FLAG_LENGTH_BITS
 0x2000

	)

357 
	#EVP_CIPH_FLAG_FIPS
 0x4000

	)

359 
	#EVP_CIPH_FLAG_NON_FIPS_ALLOW
 0x8000

	)

363 
	#EVP_CIPH_FLAG_CUSTOM_CIPHER
 0x100000

	)

364 
	#EVP_CIPH_FLAG_AEAD_CIPHER
 0x200000

	)

368 
	#EVP_CTRL_INIT
 0x0

	)

369 
	#EVP_CTRL_SET_KEY_LENGTH
 0x1

	)

370 
	#EVP_CTRL_GET_RC2_KEY_BITS
 0x2

	)

371 
	#EVP_CTRL_SET_RC2_KEY_BITS
 0x3

	)

372 
	#EVP_CTRL_GET_RC5_ROUNDS
 0x4

	)

373 
	#EVP_CTRL_SET_RC5_ROUNDS
 0x5

	)

374 
	#EVP_CTRL_RAND_KEY
 0x6

	)

375 
	#EVP_CTRL_PBE_PRF_NID
 0x7

	)

376 
	#EVP_CTRL_COPY
 0x8

	)

377 
	#EVP_CTRL_GCM_SET_IVLEN
 0x9

	)

378 
	#EVP_CTRL_GCM_GET_TAG
 0x10

	)

379 
	#EVP_CTRL_GCM_SET_TAG
 0x11

	)

380 
	#EVP_CTRL_GCM_SET_IV_FIXED
 0x12

	)

381 
	#EVP_CTRL_GCM_IV_GEN
 0x13

	)

382 
	#EVP_CTRL_CCM_SET_IVLEN
 
EVP_CTRL_GCM_SET_IVLEN


	)

383 
	#EVP_CTRL_CCM_GET_TAG
 
EVP_CTRL_GCM_GET_TAG


	)

384 
	#EVP_CTRL_CCM_SET_TAG
 
EVP_CTRL_GCM_SET_TAG


	)

385 
	#EVP_CTRL_CCM_SET_L
 0x14

	)

386 
	#EVP_CTRL_CCM_SET_MSGLEN
 0x15

	)

391 
	#EVP_CTRL_AEAD_TLS1_AAD
 0x16

	)

393 
	#EVP_CTRL_AEAD_SET_MAC_KEY
 0x17

	)

395 
	#EVP_CTRL_GCM_SET_IV_INV
 0x18

	)

399 
	#EVP_GCM_TLS_FIXED_IV_LEN
 4

	)

401 
	#EVP_GCM_TLS_EXPLICIT_IV_LEN
 8

	)

403 
	#EVP_GCM_TLS_TAG_LEN
 16

	)

405 
	sevp_cùhî_öfo_°


407 c⁄° 
EVP_CIPHER
 *
cùhî
;

408 
iv
[
EVP_MAX_IV_LENGTH
];

409 } 
	tEVP_CIPHER_INFO
;

411 
	sevp_cùhî_˘x_°


413 c⁄° 
EVP_CIPHER
 *
cùhî
;

414 
ENGINE
 *
ígöe
;

415 
í¸y±
;

416 
buf_Àn
;

418 
oiv
[
EVP_MAX_IV_LENGTH
];

419 
iv
[
EVP_MAX_IV_LENGTH
];

420 
buf
[
EVP_MAX_BLOCK_LENGTH
];

421 
num
;

423 *
≠p_d©a
;

424 
key_Àn
;

425 
Êags
;

426 *
cùhî_d©a
;

427 
föÆ_u£d
;

428 
block_mask
;

429 
föÆ
[
EVP_MAX_BLOCK_LENGTH
];

432 
	sevp_Encode_Ctx_°


434 
num
;

435 
Àngth
;

440 
íc_d©a
[80];

441 
löe_num
;

442 
ex≥˘_∆
;

443 } 
	tEVP_ENCODE_CTX
;

446 (
EVP_PBE_KEYGEN
)(
	tEVP_CIPHER_CTX
 *
	t˘x
, c⁄° *
	t∑ss
, 
	t∑s¶í
,

447 
	tASN1_TYPE
 *
	t∑øm
, c⁄° 
	tEVP_CIPHER
 *
	tcùhî
,

448 c⁄° 
	tEVP_MD
 *
	tmd
, 
	tí_de
);

450 #i‚de‡
OPENSSL_NO_RSA


451 
	#EVP_PKEY_assign_RSA
(
pkey
,
rß
Ë
	`EVP_PKEY_assign
(’key),
EVP_PKEY_RSA
,\

452 (*)(
rß
))

	)

455 #i‚de‡
OPENSSL_NO_DSA


456 
	#EVP_PKEY_assign_DSA
(
pkey
,
dß
Ë
	`EVP_PKEY_assign
(’key),
EVP_PKEY_DSA
,\

457 (*)(
dß
))

	)

460 #i‚de‡
OPENSSL_NO_DH


461 
	#EVP_PKEY_assign_DH
(
pkey
,
dh
Ë
	`EVP_PKEY_assign
(’key),
EVP_PKEY_DH
,\

462 (*)(
dh
))

	)

465 #i‚de‡
OPENSSL_NO_EC


466 
	#EVP_PKEY_assign_EC_KEY
(
pkey
,
eckey
Ë
	`EVP_PKEY_assign
(’key),
EVP_PKEY_EC
,\

467 (*)(
eckey
))

	)

471 
	#EVP_gë_dige°bynid
(
a
Ë
	`EVP_gë_dige°by«me
(
	`OBJ_nid2¢
◊))

	)

472 
	#EVP_gë_dige°byobj
(
a
Ë
	`EVP_gë_dige°bynid
(
	`OBJ_obj2nid
◊))

	)

473 
	#EVP_gë_cùhîbynid
(
a
Ë
	`EVP_gë_cùhîby«me
(
	`OBJ_nid2¢
◊))

	)

474 
	#EVP_gë_cùhîbyobj
(
a
Ë
	`EVP_gë_cùhîbynid
(
	`OBJ_obj2nid
◊))

	)

476 
EVP_MD_ty≥
(c⁄° 
EVP_MD
 *
md
);

477 
	#EVP_MD_nid
(
e
Ë
	`EVP_MD_ty≥
”)

	)

478 
	#EVP_MD_«me
(
e
Ë
	`OBJ_nid2¢
(
	`EVP_MD_nid
”))

	)

479 
EVP_MD_pkey_ty≥
(c⁄° 
EVP_MD
 *
md
);

480 
EVP_MD_size
(c⁄° 
EVP_MD
 *
md
);

481 
EVP_MD_block_size
(c⁄° 
EVP_MD
 *
md
);

482 
EVP_MD_Êags
(c⁄° 
EVP_MD
 *
md
);

484 c⁄° 
EVP_MD
 *
EVP_MD_CTX_md
(c⁄° 
EVP_MD_CTX
 *
˘x
);

485 
	#EVP_MD_CTX_size
(
e
Ë
	`EVP_MD_size
(
	`EVP_MD_CTX_md
”))

	)

486 
	#EVP_MD_CTX_block_size
(
e
Ë
	`EVP_MD_block_size
(
	`EVP_MD_CTX_md
”))

	)

487 
	#EVP_MD_CTX_ty≥
(
e
Ë
	`EVP_MD_ty≥
(
	`EVP_MD_CTX_md
”))

	)

489 
EVP_CIPHER_nid
(c⁄° 
EVP_CIPHER
 *
cùhî
);

490 
	#EVP_CIPHER_«me
(
e
Ë
	`OBJ_nid2¢
(
	`EVP_CIPHER_nid
”))

	)

491 
EVP_CIPHER_block_size
(c⁄° 
EVP_CIPHER
 *
cùhî
);

492 
EVP_CIPHER_key_Àngth
(c⁄° 
EVP_CIPHER
 *
cùhî
);

493 
EVP_CIPHER_iv_Àngth
(c⁄° 
EVP_CIPHER
 *
cùhî
);

494 
EVP_CIPHER_Êags
(c⁄° 
EVP_CIPHER
 *
cùhî
);

495 
	#EVP_CIPHER_mode
(
e
Ë(
	`EVP_CIPHER_Êags
”Ë& 
EVP_CIPH_MODE
)

	)

497 c⁄° 
EVP_CIPHER
 * 
EVP_CIPHER_CTX_cùhî
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

498 
EVP_CIPHER_CTX_nid
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

499 
EVP_CIPHER_CTX_block_size
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

500 
EVP_CIPHER_CTX_key_Àngth
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

501 
EVP_CIPHER_CTX_iv_Àngth
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

502 
EVP_CIPHER_CTX_c›y
(
EVP_CIPHER_CTX
 *
out
, c⁄° EVP_CIPHER_CTX *
ö
);

503 * 
EVP_CIPHER_CTX_gë_≠p_d©a
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

504 
EVP_CIPHER_CTX_£t_≠p_d©a
(
EVP_CIPHER_CTX
 *
˘x
, *
d©a
);

505 
	#EVP_CIPHER_CTX_ty≥
(
c
Ë
	`EVP_CIPHER_ty≥
(
	`EVP_CIPHER_CTX_cùhî
(c))

	)

506 
EVP_CIPHER_CTX_Êags
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

507 
	#EVP_CIPHER_CTX_mode
(
e
Ë(
	`EVP_CIPHER_CTX_Êags
”Ë& 
EVP_CIPH_MODE
)

	)

509 
	#EVP_ENCODE_LENGTH
(
l
Ë((÷+2)/3*4)+÷/48+1)*2+80)

	)

510 
	#EVP_DECODE_LENGTH
(
l
Ë(÷+3)/4*3+80)

	)

512 
	#EVP_SignInô_ex
(
a
,
b
,
c
Ë
	`EVP_Dige°Inô_ex
◊,b,c)

	)

513 
	#EVP_SignInô
(
a
,
b
Ë
	`EVP_Dige°Inô
◊,b)

	)

514 
	#EVP_SignUpd©e
(
a
,
b
,
c
Ë
	`EVP_Dige°Upd©e
◊,b,c)

	)

515 
	#EVP_VîifyInô_ex
(
a
,
b
,
c
Ë
	`EVP_Dige°Inô_ex
◊,b,c)

	)

516 
	#EVP_VîifyInô
(
a
,
b
Ë
	`EVP_Dige°Inô
◊,b)

	)

517 
	#EVP_VîifyUpd©e
(
a
,
b
,
c
Ë
	`EVP_Dige°Upd©e
◊,b,c)

	)

518 
	#EVP_O≥nUpd©e
(
a
,
b
,
c
,
d
,
e
Ë
	`EVP_De¸y±Upd©e
◊,b,c,d,e)

	)

519 
	#EVP_SólUpd©e
(
a
,
b
,
c
,
d
,
e
Ë
	`EVP_En¸y±Upd©e
◊,b,c,d,e)

	)

520 
	#EVP_Dige°SignUpd©e
(
a
,
b
,
c
Ë
	`EVP_Dige°Upd©e
◊,b,c)

	)

521 
	#EVP_Dige°VîifyUpd©e
(
a
,
b
,
c
Ë
	`EVP_Dige°Upd©e
◊,b,c)

	)

523 #ifde‡
CONST_STRICT


524 
BIO_£t_md
(
BIO
 *,c⁄° 
EVP_MD
 *
md
);

526 
	#BIO_£t_md
(
b
,
md
Ë
	`BIO_˘æ
(b,
BIO_C_SET_MD
,0,(*)md)

	)

528 
	#BIO_gë_md
(
b
,
mdp
Ë
	`BIO_˘æ
(b,
BIO_C_GET_MD
,0,(*)mdp)

	)

529 
	#BIO_gë_md_˘x
(
b
,
md˝
Ë
	`BIO_˘æ
(b,
BIO_C_GET_MD_CTX
,0,(*)md˝)

	)

530 
	#BIO_£t_md_˘x
(
b
,
md˝
Ë
	`BIO_˘æ
(b,
BIO_C_SET_MD_CTX
,0,(*)md˝)

	)

531 
	#BIO_gë_cùhî_°©us
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_GET_CIPHER_STATUS
,0,
NULL
)

	)

532 
	#BIO_gë_cùhî_˘x
(
b
,
c_µ
Ë
	`BIO_˘æ
(b,
BIO_C_GET_CIPHER_CTX
,0,(*)c_µ)

	)

534 
EVP_Cùhî
(
EVP_CIPHER_CTX
 *
c
,

535 *
out
,

536 c⁄° *
ö
,

537 
öl
);

539 
	#EVP_add_cùhî_Æüs
(
n
,
Æüs
) \

540 
	`OBJ_NAME_add
((
Æüs
),
OBJ_NAME_TYPE_CIPHER_METH
|
OBJ_NAME_ALIAS
,(
n
))

	)

541 
	#EVP_add_dige°_Æüs
(
n
,
Æüs
) \

542 
	`OBJ_NAME_add
((
Æüs
),
OBJ_NAME_TYPE_MD_METH
|
OBJ_NAME_ALIAS
,(
n
))

	)

543 
	#EVP_dñëe_cùhî_Æüs
(
Æüs
) \

544 
	`OBJ_NAME_ªmove
(
Æüs
,
OBJ_NAME_TYPE_CIPHER_METH
|
OBJ_NAME_ALIAS
);

	)

545 
	#EVP_dñëe_dige°_Æüs
(
Æüs
) \

546 
	`OBJ_NAME_ªmove
(
Æüs
,
OBJ_NAME_TYPE_MD_METH
|
OBJ_NAME_ALIAS
);

	)

548 
EVP_MD_CTX_öô
(
EVP_MD_CTX
 *
˘x
);

549 
EVP_MD_CTX_˛ónup
(
EVP_MD_CTX
 *
˘x
);

550 
EVP_MD_CTX
 *
EVP_MD_CTX_¸óã
();

551 
EVP_MD_CTX_de°roy
(
EVP_MD_CTX
 *
˘x
);

552 
EVP_MD_CTX_c›y_ex
(
EVP_MD_CTX
 *
out
,c⁄° EVP_MD_CTX *
ö
);

553 
EVP_MD_CTX_£t_Êags
(
EVP_MD_CTX
 *
˘x
, 
Êags
);

554 
EVP_MD_CTX_˛ór_Êags
(
EVP_MD_CTX
 *
˘x
, 
Êags
);

555 
EVP_MD_CTX_ã°_Êags
(c⁄° 
EVP_MD_CTX
 *
˘x
,
Êags
);

556 
EVP_Dige°Inô_ex
(
EVP_MD_CTX
 *
˘x
, c⁄° 
EVP_MD
 *
ty≥
, 
ENGINE
 *
im∂
);

557 
EVP_Dige°Upd©e
(
EVP_MD_CTX
 *
˘x
,c⁄° *
d
,

558 
size_t
 
˙t
);

559 
EVP_Dige°FöÆ_ex
(
EVP_MD_CTX
 *
˘x
,*
md
,*
s
);

560 
EVP_Dige°
(c⁄° *
d©a
, 
size_t
 
cou¡
,

561 *
md
, *
size
, c⁄° 
EVP_MD
 *
ty≥
, 
ENGINE
 *
im∂
);

563 
EVP_MD_CTX_c›y
(
EVP_MD_CTX
 *
out
,c⁄° EVP_MD_CTX *
ö
);

564 
EVP_Dige°Inô
(
EVP_MD_CTX
 *
˘x
, c⁄° 
EVP_MD
 *
ty≥
);

565 
EVP_Dige°FöÆ
(
EVP_MD_CTX
 *
˘x
,*
md
,*
s
);

567 
EVP_ªad_pw_°rög
(*
buf
,
Àngth
,c⁄° *
¥om±
,
vîify
);

568 
EVP_ªad_pw_°rög_mö
(*
buf
,
möÀn
,
maxÀn
,c⁄° *
¥om±
,
vîify
);

569 
EVP_£t_pw_¥om±
(c⁄° *
¥om±
);

570 * 
EVP_gë_pw_¥om±
();

572 
EVP_ByãsToKey
(c⁄° 
EVP_CIPHER
 *
ty≥
,c⁄° 
EVP_MD
 *
md
,

573 c⁄° *
ß…
, c⁄° *
d©a
,

574 
d©Æ
, 
cou¡
, *
key
,*
iv
);

576 
EVP_CIPHER_CTX_£t_Êags
(
EVP_CIPHER_CTX
 *
˘x
, 
Êags
);

577 
EVP_CIPHER_CTX_˛ór_Êags
(
EVP_CIPHER_CTX
 *
˘x
, 
Êags
);

578 
EVP_CIPHER_CTX_ã°_Êags
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
,
Êags
);

580 
EVP_En¸y±Inô
(
EVP_CIPHER_CTX
 *
˘x
,c⁄° 
EVP_CIPHER
 *
cùhî
,

581 c⁄° *
key
, c⁄° *
iv
);

582 
EVP_En¸y±Inô_ex
(
EVP_CIPHER_CTX
 *
˘x
,c⁄° 
EVP_CIPHER
 *
cùhî
, 
ENGINE
 *
im∂
,

583 c⁄° *
key
, c⁄° *
iv
);

584 
EVP_En¸y±Upd©e
(
EVP_CIPHER_CTX
 *
˘x
, *
out
,

585 *
oué
, c⁄° *
ö
, 
öl
);

586 
EVP_En¸y±FöÆ_ex
(
EVP_CIPHER_CTX
 *
˘x
, *
out
, *
oué
);

587 
EVP_En¸y±FöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
out
, *
oué
);

589 
EVP_De¸y±Inô
(
EVP_CIPHER_CTX
 *
˘x
,c⁄° 
EVP_CIPHER
 *
cùhî
,

590 c⁄° *
key
, c⁄° *
iv
);

591 
EVP_De¸y±Inô_ex
(
EVP_CIPHER_CTX
 *
˘x
,c⁄° 
EVP_CIPHER
 *
cùhî
, 
ENGINE
 *
im∂
,

592 c⁄° *
key
, c⁄° *
iv
);

593 
EVP_De¸y±Upd©e
(
EVP_CIPHER_CTX
 *
˘x
, *
out
,

594 *
oué
, c⁄° *
ö
, 
öl
);

595 
EVP_De¸y±FöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
outm
, *
oué
);

596 
EVP_De¸y±FöÆ_ex
(
EVP_CIPHER_CTX
 *
˘x
, *
outm
, *
oué
);

598 
EVP_CùhîInô
(
EVP_CIPHER_CTX
 *
˘x
,c⁄° 
EVP_CIPHER
 *
cùhî
,

599 c⁄° *
key
,c⁄° *
iv
,

600 
íc
);

601 
EVP_CùhîInô_ex
(
EVP_CIPHER_CTX
 *
˘x
,c⁄° 
EVP_CIPHER
 *
cùhî
, 
ENGINE
 *
im∂
,

602 c⁄° *
key
,c⁄° *
iv
,

603 
íc
);

604 
EVP_CùhîUpd©e
(
EVP_CIPHER_CTX
 *
˘x
, *
out
,

605 *
oué
, c⁄° *
ö
, 
öl
);

606 
EVP_CùhîFöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
outm
, *
oué
);

607 
EVP_CùhîFöÆ_ex
(
EVP_CIPHER_CTX
 *
˘x
, *
outm
, *
oué
);

609 
EVP_SignFöÆ
(
EVP_MD_CTX
 *
˘x
,*
md
,*
s
,

610 
EVP_PKEY
 *
pkey
);

612 
EVP_VîifyFöÆ
(
EVP_MD_CTX
 *
˘x
,c⁄° *
sigbuf
,

613 
sigÀn
,
EVP_PKEY
 *
pkey
);

615 
EVP_Dige°SignInô
(
EVP_MD_CTX
 *
˘x
, 
EVP_PKEY_CTX
 **
p˘x
,

616 c⁄° 
EVP_MD
 *
ty≥
, 
ENGINE
 *
e
, 
EVP_PKEY
 *
pkey
);

617 
EVP_Dige°SignFöÆ
(
EVP_MD_CTX
 *
˘x
,

618 *
sigªt
, 
size_t
 *
sigÀn
);

620 
EVP_Dige°VîifyInô
(
EVP_MD_CTX
 *
˘x
, 
EVP_PKEY_CTX
 **
p˘x
,

621 c⁄° 
EVP_MD
 *
ty≥
, 
ENGINE
 *
e
, 
EVP_PKEY
 *
pkey
);

622 
EVP_Dige°VîifyFöÆ
(
EVP_MD_CTX
 *
˘x
,

623 *
sig
, 
size_t
 
sigÀn
);

625 
EVP_O≥nInô
(
EVP_CIPHER_CTX
 *
˘x
,c⁄° 
EVP_CIPHER
 *
ty≥
,

626 c⁄° *
ek
, 
ekl
, c⁄° *
iv
,

627 
EVP_PKEY
 *
¥iv
);

628 
EVP_O≥nFöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
out
, *
oué
);

630 
EVP_SólInô
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° 
EVP_CIPHER
 *
ty≥
,

631 **
ek
, *
ekl
, *
iv
,

632 
EVP_PKEY
 **
pubk
, 
≈ubk
);

633 
EVP_SólFöÆ
(
EVP_CIPHER_CTX
 *
˘x
,*
out
,*
oué
);

635 
EVP_EncodeInô
(
EVP_ENCODE_CTX
 *
˘x
);

636 
EVP_EncodeUpd©e
(
EVP_ENCODE_CTX
 *
˘x
,*
out
,*
oué
,

637 c⁄° *
ö
,
öl
);

638 
EVP_EncodeFöÆ
(
EVP_ENCODE_CTX
 *
˘x
,*
out
,*
oué
);

639 
EVP_EncodeBlock
(*
t
, c⁄° *
f
, 
n
);

641 
EVP_DecodeInô
(
EVP_ENCODE_CTX
 *
˘x
);

642 
EVP_DecodeUpd©e
(
EVP_ENCODE_CTX
 *
˘x
,*
out
,*
oué
,

643 c⁄° *
ö
, 
öl
);

644 
EVP_DecodeFöÆ
(
EVP_ENCODE_CTX
 *
˘x
, 

645 *
out
, *
oué
);

646 
EVP_DecodeBlock
(*
t
, c⁄° *
f
, 
n
);

648 
EVP_CIPHER_CTX_öô
(
EVP_CIPHER_CTX
 *
a
);

649 
EVP_CIPHER_CTX_˛ónup
(
EVP_CIPHER_CTX
 *
a
);

650 
EVP_CIPHER_CTX
 *
EVP_CIPHER_CTX_√w
();

651 
EVP_CIPHER_CTX_‰ì
(
EVP_CIPHER_CTX
 *
a
);

652 
EVP_CIPHER_CTX_£t_key_Àngth
(
EVP_CIPHER_CTX
 *
x
, 
keyÀn
);

653 
EVP_CIPHER_CTX_£t_∑ddög
(
EVP_CIPHER_CTX
 *
c
, 
∑d
);

654 
EVP_CIPHER_CTX_˘æ
(
EVP_CIPHER_CTX
 *
˘x
, 
ty≥
, 
¨g
, *
±r
);

655 
EVP_CIPHER_CTX_ønd_key
(
EVP_CIPHER_CTX
 *
˘x
, *
key
);

657 #i‚de‡
OPENSSL_NO_BIO


658 
BIO_METHOD
 *
BIO_f_md
();

659 
BIO_METHOD
 *
BIO_f_ba£64
();

660 
BIO_METHOD
 *
BIO_f_cùhî
();

661 
BIO_METHOD
 *
BIO_f_ªlübÀ
();

662 
BIO_£t_cùhî
(
BIO
 *
b
,c⁄° 
EVP_CIPHER
 *
c
,c⁄° *
k
,

663 c⁄° *
i
, 
íc
);

666 c⁄° 
EVP_MD
 *
EVP_md_nuŒ
();

667 #i‚de‡
OPENSSL_NO_MD2


668 c⁄° 
EVP_MD
 *
EVP_md2
();

670 #i‚de‡
OPENSSL_NO_MD4


671 c⁄° 
EVP_MD
 *
EVP_md4
();

673 #i‚de‡
OPENSSL_NO_MD5


674 c⁄° 
EVP_MD
 *
EVP_md5
();

676 #i‚de‡
OPENSSL_NO_SHA


677 c⁄° 
EVP_MD
 *
EVP_sha
();

678 c⁄° 
EVP_MD
 *
EVP_sha1
();

679 c⁄° 
EVP_MD
 *
EVP_dss
();

680 c⁄° 
EVP_MD
 *
EVP_dss1
();

681 c⁄° 
EVP_MD
 *
EVP_ecdß
();

683 #i‚de‡
OPENSSL_NO_SHA256


684 c⁄° 
EVP_MD
 *
EVP_sha224
();

685 c⁄° 
EVP_MD
 *
EVP_sha256
();

687 #i‚de‡
OPENSSL_NO_SHA512


688 c⁄° 
EVP_MD
 *
EVP_sha384
();

689 c⁄° 
EVP_MD
 *
EVP_sha512
();

691 #i‚de‡
OPENSSL_NO_MDC2


692 c⁄° 
EVP_MD
 *
EVP_mdc2
();

694 #i‚de‡
OPENSSL_NO_RIPEMD


695 c⁄° 
EVP_MD
 *
EVP_rùemd160
();

697 #i‚de‡
OPENSSL_NO_WHIRLPOOL


698 c⁄° 
EVP_MD
 *
EVP_whúÕoﬁ
();

700 c⁄° 
EVP_CIPHER
 *
EVP_íc_nuŒ
();

701 #i‚de‡
OPENSSL_NO_DES


702 c⁄° 
EVP_CIPHER
 *
EVP_des_ecb
();

703 c⁄° 
EVP_CIPHER
 *
EVP_des_ede
();

704 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3
();

705 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_ecb
();

706 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_ecb
();

707 c⁄° 
EVP_CIPHER
 *
EVP_des_cfb64
();

708 
	#EVP_des_cfb
 
EVP_des_cfb64


	)

709 c⁄° 
EVP_CIPHER
 *
EVP_des_cfb1
();

710 c⁄° 
EVP_CIPHER
 *
EVP_des_cfb8
();

711 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_cfb64
();

712 
	#EVP_des_ede_cfb
 
EVP_des_ede_cfb64


	)

714 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_cfb1
();

715 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_cfb8
();

717 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_cfb64
();

718 
	#EVP_des_ede3_cfb
 
EVP_des_ede3_cfb64


	)

719 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_cfb1
();

720 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_cfb8
();

721 c⁄° 
EVP_CIPHER
 *
EVP_des_ofb
();

722 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_ofb
();

723 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_ofb
();

724 c⁄° 
EVP_CIPHER
 *
EVP_des_cbc
();

725 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_cbc
();

726 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_cbc
();

727 c⁄° 
EVP_CIPHER
 *
EVP_desx_cbc
();

731 #ifde‡
OPENSSL_OPENBSD_DEV_CRYPTO


732 c⁄° 
EVP_CIPHER
 *
EVP_dev_¸y±o_des_ede3_cbc
();

733 c⁄° 
EVP_CIPHER
 *
EVP_dev_¸y±o_rc4
();

734 c⁄° 
EVP_MD
 *
EVP_dev_¸y±o_md5
();

738 #i‚de‡
OPENSSL_NO_RC4


739 c⁄° 
EVP_CIPHER
 *
EVP_rc4
();

740 c⁄° 
EVP_CIPHER
 *
EVP_rc4_40
();

741 #i‚de‡
OPENSSL_NO_MD5


742 c⁄° 
EVP_CIPHER
 *
EVP_rc4_hmac_md5
();

745 #i‚de‡
OPENSSL_NO_IDEA


746 c⁄° 
EVP_CIPHER
 *
EVP_idó_ecb
();

747 c⁄° 
EVP_CIPHER
 *
EVP_idó_cfb64
();

748 
	#EVP_idó_cfb
 
EVP_idó_cfb64


	)

749 c⁄° 
EVP_CIPHER
 *
EVP_idó_ofb
();

750 c⁄° 
EVP_CIPHER
 *
EVP_idó_cbc
();

752 #i‚de‡
OPENSSL_NO_RC2


753 c⁄° 
EVP_CIPHER
 *
EVP_rc2_ecb
();

754 c⁄° 
EVP_CIPHER
 *
EVP_rc2_cbc
();

755 c⁄° 
EVP_CIPHER
 *
EVP_rc2_40_cbc
();

756 c⁄° 
EVP_CIPHER
 *
EVP_rc2_64_cbc
();

757 c⁄° 
EVP_CIPHER
 *
EVP_rc2_cfb64
();

758 
	#EVP_rc2_cfb
 
EVP_rc2_cfb64


	)

759 c⁄° 
EVP_CIPHER
 *
EVP_rc2_ofb
();

761 #i‚de‡
OPENSSL_NO_BF


762 c⁄° 
EVP_CIPHER
 *
EVP_bf_ecb
();

763 c⁄° 
EVP_CIPHER
 *
EVP_bf_cbc
();

764 c⁄° 
EVP_CIPHER
 *
EVP_bf_cfb64
();

765 
	#EVP_bf_cfb
 
EVP_bf_cfb64


	)

766 c⁄° 
EVP_CIPHER
 *
EVP_bf_ofb
();

768 #i‚de‡
OPENSSL_NO_CAST


769 c⁄° 
EVP_CIPHER
 *
EVP_ˇ°5_ecb
();

770 c⁄° 
EVP_CIPHER
 *
EVP_ˇ°5_cbc
();

771 c⁄° 
EVP_CIPHER
 *
EVP_ˇ°5_cfb64
();

772 
	#EVP_ˇ°5_cfb
 
EVP_ˇ°5_cfb64


	)

773 c⁄° 
EVP_CIPHER
 *
EVP_ˇ°5_ofb
();

775 #i‚de‡
OPENSSL_NO_RC5


776 c⁄° 
EVP_CIPHER
 *
EVP_rc5_32_12_16_cbc
();

777 c⁄° 
EVP_CIPHER
 *
EVP_rc5_32_12_16_ecb
();

778 c⁄° 
EVP_CIPHER
 *
EVP_rc5_32_12_16_cfb64
();

779 
	#EVP_rc5_32_12_16_cfb
 
EVP_rc5_32_12_16_cfb64


	)

780 c⁄° 
EVP_CIPHER
 *
EVP_rc5_32_12_16_ofb
();

782 #i‚de‡
OPENSSL_NO_AES


783 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_ecb
();

784 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cbc
();

785 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cfb1
();

786 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cfb8
();

787 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cfb128
();

788 
	#EVP_´s_128_cfb
 
EVP_´s_128_cfb128


	)

789 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_ofb
();

790 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_˘r
();

791 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_ccm
();

792 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_gcm
();

793 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_xts
();

794 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_ecb
();

795 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_cbc
();

796 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_cfb1
();

797 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_cfb8
();

798 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_cfb128
();

799 
	#EVP_´s_192_cfb
 
EVP_´s_192_cfb128


	)

800 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_ofb
();

801 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_˘r
();

802 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_ccm
();

803 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_gcm
();

804 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_ecb
();

805 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cbc
();

806 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cfb1
();

807 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cfb8
();

808 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cfb128
();

809 
	#EVP_´s_256_cfb
 
EVP_´s_256_cfb128


	)

810 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_ofb
();

811 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_˘r
();

812 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_ccm
();

813 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_gcm
();

814 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_xts
();

815 #i‡!
deföed
(
OPENSSL_NO_SHA
Ë&& !deföed(
OPENSSL_NO_SHA1
)

816 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cbc_hmac_sha1
();

817 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cbc_hmac_sha1
();

820 #i‚de‡
OPENSSL_NO_CAMELLIA


821 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_ecb
();

822 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_cbc
();

823 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_cfb1
();

824 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_cfb8
();

825 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_cfb128
();

826 
	#EVP_ˇmñlü_128_cfb
 
EVP_ˇmñlü_128_cfb128


	)

827 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_ofb
();

828 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_ecb
();

829 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_cbc
();

830 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_cfb1
();

831 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_cfb8
();

832 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_cfb128
();

833 
	#EVP_ˇmñlü_192_cfb
 
EVP_ˇmñlü_192_cfb128


	)

834 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_ofb
();

835 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_ecb
();

836 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_cbc
();

837 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_cfb1
();

838 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_cfb8
();

839 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_cfb128
();

840 
	#EVP_ˇmñlü_256_cfb
 
EVP_ˇmñlü_256_cfb128


	)

841 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_ofb
();

844 #i‚de‡
OPENSSL_NO_SEED


845 c⁄° 
EVP_CIPHER
 *
EVP_£ed_ecb
();

846 c⁄° 
EVP_CIPHER
 *
EVP_£ed_cbc
();

847 c⁄° 
EVP_CIPHER
 *
EVP_£ed_cfb128
();

848 
	#EVP_£ed_cfb
 
EVP_£ed_cfb128


	)

849 c⁄° 
EVP_CIPHER
 *
EVP_£ed_ofb
();

852 
OPENSSL_add_Æl_Æg‹ôhms_noc⁄f
();

853 
OPENSSL_add_Æl_Æg‹ôhms_c⁄f
();

855 #ifde‡
OPENSSL_LOAD_CONF


856 
	#O≥nSSL_add_Æl_Æg‹ôhms
() \

857 
	`OPENSSL_add_Æl_Æg‹ôhms_c⁄f
()

	)

859 
	#O≥nSSL_add_Æl_Æg‹ôhms
() \

860 
	`OPENSSL_add_Æl_Æg‹ôhms_noc⁄f
()

	)

863 
O≥nSSL_add_Æl_cùhîs
();

864 
O≥nSSL_add_Æl_dige°s
();

865 
	#SSLóy_add_Æl_Æg‹ôhms
(Ë
	`O≥nSSL_add_Æl_Æg‹ôhms
()

	)

866 
	#SSLóy_add_Æl_cùhîs
(Ë
	`O≥nSSL_add_Æl_cùhîs
()

	)

867 
	#SSLóy_add_Æl_dige°s
(Ë
	`O≥nSSL_add_Æl_dige°s
()

	)

869 
EVP_add_cùhî
(c⁄° 
EVP_CIPHER
 *
cùhî
);

870 
EVP_add_dige°
(c⁄° 
EVP_MD
 *
dige°
);

872 c⁄° 
EVP_CIPHER
 *
EVP_gë_cùhîby«me
(c⁄° *
«me
);

873 c⁄° 
EVP_MD
 *
EVP_gë_dige°by«me
(c⁄° *
«me
);

874 
EVP_˛ónup
();

876 
EVP_CIPHER_do_Æl
((*
‚
)(c⁄° 
EVP_CIPHER
 *
cùh
,

877 c⁄° *
‰om
, c⁄° *
to
, *
x
), *
¨g
);

878 
EVP_CIPHER_do_Æl_s‹ãd
((*
‚
)(c⁄° 
EVP_CIPHER
 *
cùh
,

879 c⁄° *
‰om
, c⁄° *
to
, *
x
), *
¨g
);

881 
EVP_MD_do_Æl
((*
‚
)(c⁄° 
EVP_MD
 *
cùh
,

882 c⁄° *
‰om
, c⁄° *
to
, *
x
), *
¨g
);

883 
EVP_MD_do_Æl_s‹ãd
((*
‚
)(c⁄° 
EVP_MD
 *
cùh
,

884 c⁄° *
‰om
, c⁄° *
to
, *
x
), *
¨g
);

886 
EVP_PKEY_de¸y±_ﬁd
(*
dec_key
,

887 c⁄° *
íc_key
,
íc_key_Àn
,

888 
EVP_PKEY
 *
¥iv©e_key
);

889 
EVP_PKEY_í¸y±_ﬁd
(*
íc_key
,

890 c⁄° *
key
,
key_Àn
,

891 
EVP_PKEY
 *
pub_key
);

892 
EVP_PKEY_ty≥
(
ty≥
);

893 
EVP_PKEY_id
(c⁄° 
EVP_PKEY
 *
pkey
);

894 
EVP_PKEY_ba£_id
(c⁄° 
EVP_PKEY
 *
pkey
);

895 
EVP_PKEY_bôs
(
EVP_PKEY
 *
pkey
);

896 
EVP_PKEY_size
(
EVP_PKEY
 *
pkey
);

897 
EVP_PKEY_£t_ty≥
(
EVP_PKEY
 *
pkey
,
ty≥
);

898 
EVP_PKEY_£t_ty≥_°r
(
EVP_PKEY
 *
pkey
, c⁄° *
°r
, 
Àn
);

899 
EVP_PKEY_assign
(
EVP_PKEY
 *
pkey
,
ty≥
,*
key
);

900 * 
EVP_PKEY_gë0
(
EVP_PKEY
 *
pkey
);

902 #i‚de‡
OPENSSL_NO_RSA


903 
rß_°
;

904 
EVP_PKEY_£t1_RSA
(
EVP_PKEY
 *
pkey
,
rß_°
 *
key
);

905 
rß_°
 *
EVP_PKEY_gë1_RSA
(
EVP_PKEY
 *
pkey
);

907 #i‚de‡
OPENSSL_NO_DSA


908 
dß_°
;

909 
EVP_PKEY_£t1_DSA
(
EVP_PKEY
 *
pkey
,
dß_°
 *
key
);

910 
dß_°
 *
EVP_PKEY_gë1_DSA
(
EVP_PKEY
 *
pkey
);

912 #i‚de‡
OPENSSL_NO_DH


913 
dh_°
;

914 
EVP_PKEY_£t1_DH
(
EVP_PKEY
 *
pkey
,
dh_°
 *
key
);

915 
dh_°
 *
EVP_PKEY_gë1_DH
(
EVP_PKEY
 *
pkey
);

917 #i‚de‡
OPENSSL_NO_EC


918 
ec_key_°
;

919 
EVP_PKEY_£t1_EC_KEY
(
EVP_PKEY
 *
pkey
,
ec_key_°
 *
key
);

920 
ec_key_°
 *
EVP_PKEY_gë1_EC_KEY
(
EVP_PKEY
 *
pkey
);

923 
EVP_PKEY
 * 
EVP_PKEY_√w
();

924 
EVP_PKEY_‰ì
(
EVP_PKEY
 *
pkey
);

926 
EVP_PKEY
 * 
d2i_PublicKey
(
ty≥
,EVP_PKEY **
a
, c⁄° **
µ
,

927 
Àngth
);

928 
i2d_PublicKey
(
EVP_PKEY
 *
a
, **
µ
);

930 
EVP_PKEY
 * 
d2i_Priv©eKey
(
ty≥
,EVP_PKEY **
a
, c⁄° **
µ
,

931 
Àngth
);

932 
EVP_PKEY
 * 
d2i_AutoPriv©eKey
(EVP_PKEY **
a
, c⁄° **
µ
,

933 
Àngth
);

934 
i2d_Priv©eKey
(
EVP_PKEY
 *
a
, **
µ
);

936 
EVP_PKEY_c›y_∑ømëîs
(
EVP_PKEY
 *
to
, c⁄° EVP_PKEY *
‰om
);

937 
EVP_PKEY_missög_∑ømëîs
(c⁄° 
EVP_PKEY
 *
pkey
);

938 
EVP_PKEY_ßve_∑ømëîs
(
EVP_PKEY
 *
pkey
,
mode
);

939 
EVP_PKEY_cmp_∑ømëîs
(c⁄° 
EVP_PKEY
 *
a
, c⁄° EVP_PKEY *
b
);

941 
EVP_PKEY_cmp
(c⁄° 
EVP_PKEY
 *
a
, c⁄° EVP_PKEY *
b
);

943 
EVP_PKEY_¥öt_public
(
BIO
 *
out
, c⁄° 
EVP_PKEY
 *
pkey
,

944 
ödít
, 
ASN1_PCTX
 *
p˘x
);

945 
EVP_PKEY_¥öt_¥iv©e
(
BIO
 *
out
, c⁄° 
EVP_PKEY
 *
pkey
,

946 
ödít
, 
ASN1_PCTX
 *
p˘x
);

947 
EVP_PKEY_¥öt_∑øms
(
BIO
 *
out
, c⁄° 
EVP_PKEY
 *
pkey
,

948 
ödít
, 
ASN1_PCTX
 *
p˘x
);

950 
EVP_PKEY_gë_deÁu…_dige°_nid
(
EVP_PKEY
 *
pkey
, *
≤id
);

952 
EVP_CIPHER_ty≥
(c⁄° 
EVP_CIPHER
 *
˘x
);

955 
EVP_CIPHER_∑øm_to_a¢1
(
EVP_CIPHER_CTX
 *
c
, 
ASN1_TYPE
 *
ty≥
);

956 
EVP_CIPHER_a¢1_to_∑øm
(
EVP_CIPHER_CTX
 *
c
, 
ASN1_TYPE
 *
ty≥
);

959 
EVP_CIPHER_£t_a¢1_iv
(
EVP_CIPHER_CTX
 *
c
,
ASN1_TYPE
 *
ty≥
);

960 
EVP_CIPHER_gë_a¢1_iv
(
EVP_CIPHER_CTX
 *
c
,
ASN1_TYPE
 *
ty≥
);

963 
PKCS5_PBE_keyivgí
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° *
∑ss
, 
∑s¶í
,

964 
ASN1_TYPE
 *
∑øm
, c⁄° 
EVP_CIPHER
 *
cùhî
, c⁄° 
EVP_MD
 *
md
,

965 
í_de
);

966 
PKCS5_PBKDF2_HMAC_SHA1
(c⁄° *
∑ss
, 
∑s¶í
,

967 c⁄° *
ß…
, 
ß…Àn
, 
ôî
,

968 
keyÀn
, *
out
);

969 
PKCS5_PBKDF2_HMAC
(c⁄° *
∑ss
, 
∑s¶í
,

970 c⁄° *
ß…
, 
ß…Àn
, 
ôî
,

971 c⁄° 
EVP_MD
 *
dige°
,

972 
keyÀn
, *
out
);

973 
PKCS5_v2_PBE_keyivgí
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° *
∑ss
, 
∑s¶í
,

974 
ASN1_TYPE
 *
∑øm
, c⁄° 
EVP_CIPHER
 *
cùhî
, c⁄° 
EVP_MD
 *
md
,

975 
í_de
);

977 
PKCS5_PBE_add
();

979 
EVP_PBE_CùhîInô
 (
ASN1_OBJECT
 *
pbe_obj
, c⁄° *
∑ss
, 
∑s¶í
,

980 
ASN1_TYPE
 *
∑øm
, 
EVP_CIPHER_CTX
 *
˘x
, 
í_de
);

985 
	#EVP_PBE_TYPE_OUTER
 0x0

	)

987 
	#EVP_PBE_TYPE_PRF
 0x1

	)

989 
EVP_PBE_Æg_add_ty≥
(
pbe_ty≥
, 
pbe_nid
, 
cùhî_nid
, 
md_nid
,

990 
EVP_PBE_KEYGEN
 *
keygí
);

991 
EVP_PBE_Æg_add
(
nid
, c⁄° 
EVP_CIPHER
 *
cùhî
, c⁄° 
EVP_MD
 *
md
,

992 
EVP_PBE_KEYGEN
 *
keygí
);

993 
EVP_PBE_föd
(
ty≥
, 
pbe_nid
,

994 *
p˙id
, *
pmnid
, 
EVP_PBE_KEYGEN
 **
pkeygí
);

995 
EVP_PBE_˛ónup
();

997 
	#ASN1_PKEY_ALIAS
 0x1

	)

998 
	#ASN1_PKEY_DYNAMIC
 0x2

	)

999 
	#ASN1_PKEY_SIGPARAM_NULL
 0x4

	)

1001 
	#ASN1_PKEY_CTRL_PKCS7_SIGN
 0x1

	)

1002 
	#ASN1_PKEY_CTRL_PKCS7_ENCRYPT
 0x2

	)

1003 
	#ASN1_PKEY_CTRL_DEFAULT_MD_NID
 0x3

	)

1004 
	#ASN1_PKEY_CTRL_CMS_SIGN
 0x5

	)

1005 
	#ASN1_PKEY_CTRL_CMS_ENVELOPE
 0x7

	)

1007 
EVP_PKEY_a¢1_gë_cou¡
();

1008 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
EVP_PKEY_a¢1_gë0
(
idx
);

1009 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
EVP_PKEY_a¢1_föd
(
ENGINE
 **
≥
, 
ty≥
);

1010 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
EVP_PKEY_a¢1_föd_°r
(
ENGINE
 **
≥
,

1011 c⁄° *
°r
, 
Àn
);

1012 
EVP_PKEY_a¢1_add0
(c⁄° 
EVP_PKEY_ASN1_METHOD
 *
amëh
);

1013 
EVP_PKEY_a¢1_add_Æüs
(
to
, 
‰om
);

1014 
EVP_PKEY_a¢1_gë0_öfo
(*
µkey_id
, *
pkey_ba£_id
, *
µkey_Êags
,

1015 c⁄° **
pöfo
, c⁄° **
µem_°r
,

1016 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
amëh
);

1018 c⁄° 
EVP_PKEY_ASN1_METHOD
* 
EVP_PKEY_gë0_a¢1
(
EVP_PKEY
 *
pkey
);

1019 
EVP_PKEY_ASN1_METHOD
* 
EVP_PKEY_a¢1_√w
(
id
, 
Êags
,

1020 c⁄° *
≥m_°r
, c⁄° *
öfo
);

1021 
EVP_PKEY_a¢1_c›y
(
EVP_PKEY_ASN1_METHOD
 *
d°
,

1022 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
§c
);

1023 
EVP_PKEY_a¢1_‰ì
(
EVP_PKEY_ASN1_METHOD
 *
amëh
);

1024 
EVP_PKEY_a¢1_£t_public
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1025 (*
pub_decode
)(
EVP_PKEY
 *
pk
, 
X509_PUBKEY
 *
pub
),

1026 (*
pub_ícode
)(
X509_PUBKEY
 *
pub
, c⁄° 
EVP_PKEY
 *
pk
),

1027 (*
pub_cmp
)(c⁄° 
EVP_PKEY
 *
a
, c⁄° EVP_PKEY *
b
),

1028 (*
pub_¥öt
)(
BIO
 *
out
, c⁄° 
EVP_PKEY
 *
pkey
, 
ödít
,

1029 
ASN1_PCTX
 *
p˘x
),

1030 (*
pkey_size
)(c⁄° 
EVP_PKEY
 *
pk
),

1031 (*
pkey_bôs
)(c⁄° 
EVP_PKEY
 *
pk
));

1032 
EVP_PKEY_a¢1_£t_¥iv©e
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1033 (*
¥iv_decode
)(
EVP_PKEY
 *
pk
, 
PKCS8_PRIV_KEY_INFO
 *
p8öf
),

1034 (*
¥iv_ícode
)(
PKCS8_PRIV_KEY_INFO
 *
p8
, c⁄° 
EVP_PKEY
 *
pk
),

1035 (*
¥iv_¥öt
)(
BIO
 *
out
, c⁄° 
EVP_PKEY
 *
pkey
, 
ödít
,

1036 
ASN1_PCTX
 *
p˘x
));

1037 
EVP_PKEY_a¢1_£t_∑øm
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1038 (*
∑øm_decode
)(
EVP_PKEY
 *
pkey
,

1039 c⁄° **
pdî
, 
dîÀn
),

1040 (*
∑øm_ícode
)(c⁄° 
EVP_PKEY
 *
pkey
, **
pdî
),

1041 (*
∑øm_missög
)(c⁄° 
EVP_PKEY
 *
pk
),

1042 (*
∑øm_c›y
)(
EVP_PKEY
 *
to
, c⁄° EVP_PKEY *
‰om
),

1043 (*
∑øm_cmp
)(c⁄° 
EVP_PKEY
 *
a
, c⁄° EVP_PKEY *
b
),

1044 (*
∑øm_¥öt
)(
BIO
 *
out
, c⁄° 
EVP_PKEY
 *
pkey
, 
ödít
,

1045 
ASN1_PCTX
 *
p˘x
));

1047 
EVP_PKEY_a¢1_£t_‰ì
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1048 (*
pkey_‰ì
)(
EVP_PKEY
 *
pkey
));

1049 
EVP_PKEY_a¢1_£t_˘æ
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1050 (*
pkey_˘æ
)(
EVP_PKEY
 *
pkey
, 
›
,

1051 
¨g1
, *
¨g2
));

1054 
	#EVP_PKEY_OP_UNDEFINED
 0

	)

1055 
	#EVP_PKEY_OP_PARAMGEN
 (1<<1)

	)

1056 
	#EVP_PKEY_OP_KEYGEN
 (1<<2)

	)

1057 
	#EVP_PKEY_OP_SIGN
 (1<<3)

	)

1058 
	#EVP_PKEY_OP_VERIFY
 (1<<4)

	)

1059 
	#EVP_PKEY_OP_VERIFYRECOVER
 (1<<5)

	)

1060 
	#EVP_PKEY_OP_SIGNCTX
 (1<<6)

	)

1061 
	#EVP_PKEY_OP_VERIFYCTX
 (1<<7)

	)

1062 
	#EVP_PKEY_OP_ENCRYPT
 (1<<8)

	)

1063 
	#EVP_PKEY_OP_DECRYPT
 (1<<9)

	)

1064 
	#EVP_PKEY_OP_DERIVE
 (1<<10)

	)

1066 
	#EVP_PKEY_OP_TYPE_SIG
 \

1067 (
EVP_PKEY_OP_SIGN
 | 
EVP_PKEY_OP_VERIFY
 | 
EVP_PKEY_OP_VERIFYRECOVER
 \

1068 | 
EVP_PKEY_OP_SIGNCTX
 | 
EVP_PKEY_OP_VERIFYCTX
)

	)

1070 
	#EVP_PKEY_OP_TYPE_CRYPT
 \

1071 (
EVP_PKEY_OP_ENCRYPT
 | 
EVP_PKEY_OP_DECRYPT
)

	)

1073 
	#EVP_PKEY_OP_TYPE_NOGEN
 \

1074 (
EVP_PKEY_OP_SIG
 | 
EVP_PKEY_OP_CRYPT
 | 
EVP_PKEY_OP_DERIVE
)

	)

1076 
	#EVP_PKEY_OP_TYPE_GEN
 \

1077 (
EVP_PKEY_OP_PARAMGEN
 | 
EVP_PKEY_OP_KEYGEN
)

	)

1079 
	#EVP_PKEY_CTX_£t_sig«tuª_md
(
˘x
, 
md
) \

1080 
	`EVP_PKEY_CTX_˘æ
(
˘x
, -1, 
EVP_PKEY_OP_TYPE_SIG
, \

1081 
EVP_PKEY_CTRL_MD
, 0, (*)
md
)

	)

1083 
	#EVP_PKEY_CTRL_MD
 1

	)

1084 
	#EVP_PKEY_CTRL_PEER_KEY
 2

	)

1086 
	#EVP_PKEY_CTRL_PKCS7_ENCRYPT
 3

	)

1087 
	#EVP_PKEY_CTRL_PKCS7_DECRYPT
 4

	)

1089 
	#EVP_PKEY_CTRL_PKCS7_SIGN
 5

	)

1091 
	#EVP_PKEY_CTRL_SET_MAC_KEY
 6

	)

1093 
	#EVP_PKEY_CTRL_DIGESTINIT
 7

	)

1096 
	#EVP_PKEY_CTRL_SET_IV
 8

	)

1098 
	#EVP_PKEY_CTRL_CMS_ENCRYPT
 9

	)

1099 
	#EVP_PKEY_CTRL_CMS_DECRYPT
 10

	)

1100 
	#EVP_PKEY_CTRL_CMS_SIGN
 11

	)

1102 
	#EVP_PKEY_CTRL_CIPHER
 12

	)

1104 
	#EVP_PKEY_ALG_CTRL
 0x1000

	)

1107 
	#EVP_PKEY_FLAG_AUTOARGLEN
 2

	)

1111 
	#EVP_PKEY_FLAG_SIGCTX_CUSTOM
 4

	)

1113 c⁄° 
EVP_PKEY_METHOD
 *
EVP_PKEY_mëh_föd
(
ty≥
);

1114 
EVP_PKEY_METHOD
* 
EVP_PKEY_mëh_√w
(
id
, 
Êags
);

1115 
EVP_PKEY_mëh_gë0_öfo
(*
µkey_id
, *
pÊags
,

1116 c⁄° 
EVP_PKEY_METHOD
 *
mëh
);

1117 
EVP_PKEY_mëh_c›y
(
EVP_PKEY_METHOD
 *
d°
, c⁄° EVP_PKEY_METHOD *
§c
);

1118 
EVP_PKEY_mëh_‰ì
(
EVP_PKEY_METHOD
 *
pmëh
);

1119 
EVP_PKEY_mëh_add0
(c⁄° 
EVP_PKEY_METHOD
 *
pmëh
);

1121 
EVP_PKEY_CTX
 *
EVP_PKEY_CTX_√w
(
EVP_PKEY
 *
pkey
, 
ENGINE
 *
e
);

1122 
EVP_PKEY_CTX
 *
EVP_PKEY_CTX_√w_id
(
id
, 
ENGINE
 *
e
);

1123 
EVP_PKEY_CTX
 *
EVP_PKEY_CTX_dup
(EVP_PKEY_CTX *
˘x
);

1124 
EVP_PKEY_CTX_‰ì
(
EVP_PKEY_CTX
 *
˘x
);

1126 
EVP_PKEY_CTX_˘æ
(
EVP_PKEY_CTX
 *
˘x
, 
keyty≥
, 
›ty≥
,

1127 
cmd
, 
p1
, *
p2
);

1128 
EVP_PKEY_CTX_˘æ_°r
(
EVP_PKEY_CTX
 *
˘x
, c⁄° *
ty≥
,

1129 c⁄° *
vÆue
);

1131 
EVP_PKEY_CTX_gë_›î©i⁄
(
EVP_PKEY_CTX
 *
˘x
);

1132 
EVP_PKEY_CTX_£t0_keygí_öfo
(
EVP_PKEY_CTX
 *
˘x
, *
d©
, 
d©Àn
);

1134 
EVP_PKEY
 *
EVP_PKEY_√w_mac_key
(
ty≥
, 
ENGINE
 *
e
,

1135 c⁄° *
key
, 
keyÀn
);

1137 
EVP_PKEY_CTX_£t_d©a
(
EVP_PKEY_CTX
 *
˘x
, *
d©a
);

1138 *
EVP_PKEY_CTX_gë_d©a
(
EVP_PKEY_CTX
 *
˘x
);

1139 
EVP_PKEY
 *
EVP_PKEY_CTX_gë0_pkey
(
EVP_PKEY_CTX
 *
˘x
);

1141 
EVP_PKEY
 *
EVP_PKEY_CTX_gë0_≥îkey
(
EVP_PKEY_CTX
 *
˘x
);

1143 
EVP_PKEY_CTX_£t_≠p_d©a
(
EVP_PKEY_CTX
 *
˘x
, *
d©a
);

1144 *
EVP_PKEY_CTX_gë_≠p_d©a
(
EVP_PKEY_CTX
 *
˘x
);

1146 
EVP_PKEY_sign_öô
(
EVP_PKEY_CTX
 *
˘x
);

1147 
EVP_PKEY_sign
(
EVP_PKEY_CTX
 *
˘x
,

1148 *
sig
, 
size_t
 *
sigÀn
,

1149 c⁄° *
tbs
, 
size_t
 
tb¶í
);

1150 
EVP_PKEY_vîify_öô
(
EVP_PKEY_CTX
 *
˘x
);

1151 
EVP_PKEY_vîify
(
EVP_PKEY_CTX
 *
˘x
,

1152 c⁄° *
sig
, 
size_t
 
sigÀn
,

1153 c⁄° *
tbs
, 
size_t
 
tb¶í
);

1154 
EVP_PKEY_vîify_ªcovî_öô
(
EVP_PKEY_CTX
 *
˘x
);

1155 
EVP_PKEY_vîify_ªcovî
(
EVP_PKEY_CTX
 *
˘x
,

1156 *
rout
, 
size_t
 *
rouéí
,

1157 c⁄° *
sig
, 
size_t
 
sigÀn
);

1158 
EVP_PKEY_í¸y±_öô
(
EVP_PKEY_CTX
 *
˘x
);

1159 
EVP_PKEY_í¸y±
(
EVP_PKEY_CTX
 *
˘x
,

1160 *
out
, 
size_t
 *
ouéí
,

1161 c⁄° *
ö
, 
size_t
 
öÀn
);

1162 
EVP_PKEY_de¸y±_öô
(
EVP_PKEY_CTX
 *
˘x
);

1163 
EVP_PKEY_de¸y±
(
EVP_PKEY_CTX
 *
˘x
,

1164 *
out
, 
size_t
 *
ouéí
,

1165 c⁄° *
ö
, 
size_t
 
öÀn
);

1167 
EVP_PKEY_dîive_öô
(
EVP_PKEY_CTX
 *
˘x
);

1168 
EVP_PKEY_dîive_£t_≥î
(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY
 *
≥î
);

1169 
EVP_PKEY_dîive
(
EVP_PKEY_CTX
 *
˘x
, *
key
, 
size_t
 *
keyÀn
);

1171 
	tEVP_PKEY_gí_cb
(
	tEVP_PKEY_CTX
 *
	t˘x
);

1173 
EVP_PKEY_∑ømgí_öô
(
EVP_PKEY_CTX
 *
˘x
);

1174 
EVP_PKEY_∑ømgí
(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY
 **
µkey
);

1175 
EVP_PKEY_keygí_öô
(
EVP_PKEY_CTX
 *
˘x
);

1176 
EVP_PKEY_keygí
(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY
 **
µkey
);

1178 
EVP_PKEY_CTX_£t_cb
(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY_gí_cb
 *
cb
);

1179 
EVP_PKEY_gí_cb
 *
EVP_PKEY_CTX_gë_cb
(
EVP_PKEY_CTX
 *
˘x
);

1181 
EVP_PKEY_CTX_gë_keygí_öfo
(
EVP_PKEY_CTX
 *
˘x
, 
idx
);

1183 
EVP_PKEY_mëh_£t_öô
(
EVP_PKEY_METHOD
 *
pmëh
,

1184 (*
öô
)(
EVP_PKEY_CTX
 *
˘x
));

1186 
EVP_PKEY_mëh_£t_c›y
(
EVP_PKEY_METHOD
 *
pmëh
,

1187 (*
c›y
)(
EVP_PKEY_CTX
 *
d°
, EVP_PKEY_CTX *
§c
));

1189 
EVP_PKEY_mëh_£t_˛ónup
(
EVP_PKEY_METHOD
 *
pmëh
,

1190 (*
˛ónup
)(
EVP_PKEY_CTX
 *
˘x
));

1192 
EVP_PKEY_mëh_£t_∑ømgí
(
EVP_PKEY_METHOD
 *
pmëh
,

1193 (*
∑ømgí_öô
)(
EVP_PKEY_CTX
 *
˘x
),

1194 (*
∑ømgí
)(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY
 *
pkey
));

1196 
EVP_PKEY_mëh_£t_keygí
(
EVP_PKEY_METHOD
 *
pmëh
,

1197 (*
keygí_öô
)(
EVP_PKEY_CTX
 *
˘x
),

1198 (*
keygí
)(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY
 *
pkey
));

1200 
EVP_PKEY_mëh_£t_sign
(
EVP_PKEY_METHOD
 *
pmëh
,

1201 (*
sign_öô
)(
EVP_PKEY_CTX
 *
˘x
),

1202 (*
sign
)(
EVP_PKEY_CTX
 *
˘x
, *
sig
, 
size_t
 *
sigÀn
,

1203 c⁄° *
tbs
, 
size_t
 
tb¶í
));

1205 
EVP_PKEY_mëh_£t_vîify
(
EVP_PKEY_METHOD
 *
pmëh
,

1206 (*
vîify_öô
)(
EVP_PKEY_CTX
 *
˘x
),

1207 (*
vîify
)(
EVP_PKEY_CTX
 *
˘x
, c⁄° *
sig
, 
size_t
 
sigÀn
,

1208 c⁄° *
tbs
, 
size_t
 
tb¶í
));

1210 
EVP_PKEY_mëh_£t_vîify_ªcovî
(
EVP_PKEY_METHOD
 *
pmëh
,

1211 (*
vîify_ªcovî_öô
)(
EVP_PKEY_CTX
 *
˘x
),

1212 (*
vîify_ªcovî
)(
EVP_PKEY_CTX
 *
˘x
,

1213 *
sig
, 
size_t
 *
sigÀn
,

1214 c⁄° *
tbs
, 
size_t
 
tb¶í
));

1216 
EVP_PKEY_mëh_£t_sign˘x
(
EVP_PKEY_METHOD
 *
pmëh
,

1217 (*
sign˘x_öô
)(
EVP_PKEY_CTX
 *
˘x
, 
EVP_MD_CTX
 *
m˘x
),

1218 (*
sign˘x
)(
EVP_PKEY_CTX
 *
˘x
, *
sig
, 
size_t
 *
sigÀn
,

1219 
EVP_MD_CTX
 *
m˘x
));

1221 
EVP_PKEY_mëh_£t_vîify˘x
(
EVP_PKEY_METHOD
 *
pmëh
,

1222 (*
vîify˘x_öô
)(
EVP_PKEY_CTX
 *
˘x
, 
EVP_MD_CTX
 *
m˘x
),

1223 (*
vîify˘x
)(
EVP_PKEY_CTX
 *
˘x
, c⁄° *
sig
,
sigÀn
,

1224 
EVP_MD_CTX
 *
m˘x
));

1226 
EVP_PKEY_mëh_£t_í¸y±
(
EVP_PKEY_METHOD
 *
pmëh
,

1227 (*
í¸y±_öô
)(
EVP_PKEY_CTX
 *
˘x
),

1228 (*
í¸y±‚
)(
EVP_PKEY_CTX
 *
˘x
, *
out
, 
size_t
 *
ouéí
,

1229 c⁄° *
ö
, 
size_t
 
öÀn
));

1231 
EVP_PKEY_mëh_£t_de¸y±
(
EVP_PKEY_METHOD
 *
pmëh
,

1232 (*
de¸y±_öô
)(
EVP_PKEY_CTX
 *
˘x
),

1233 (*
de¸y±
)(
EVP_PKEY_CTX
 *
˘x
, *
out
, 
size_t
 *
ouéí
,

1234 c⁄° *
ö
, 
size_t
 
öÀn
));

1236 
EVP_PKEY_mëh_£t_dîive
(
EVP_PKEY_METHOD
 *
pmëh
,

1237 (*
dîive_öô
)(
EVP_PKEY_CTX
 *
˘x
),

1238 (*
dîive
)(
EVP_PKEY_CTX
 *
˘x
, *
key
, 
size_t
 *
keyÀn
));

1240 
EVP_PKEY_mëh_£t_˘æ
(
EVP_PKEY_METHOD
 *
pmëh
,

1241 (*
˘æ
)(
EVP_PKEY_CTX
 *
˘x
, 
ty≥
, 
p1
, *
p2
),

1242 (*
˘æ_°r
)(
EVP_PKEY_CTX
 *
˘x
,

1243 c⁄° *
ty≥
, c⁄° *
vÆue
));

1245 
EVP_add_Æg_moduÀ
();

1251 
ERR_lﬂd_EVP_°rögs
();

1256 
	#EVP_F_AESNI_INIT_KEY
 165

	)

1257 
	#EVP_F_AESNI_XTS_CIPHER
 176

	)

1258 
	#EVP_F_AES_INIT_KEY
 133

	)

1259 
	#EVP_F_AES_XTS
 172

	)

1260 
	#EVP_F_AES_XTS_CIPHER
 175

	)

1261 
	#EVP_F_ALG_MODULE_INIT
 177

	)

1262 
	#EVP_F_CAMELLIA_INIT_KEY
 159

	)

1263 
	#EVP_F_CMAC_INIT
 173

	)

1264 
	#EVP_F_D2I_PKEY
 100

	)

1265 
	#EVP_F_DO_SIGVER_INIT
 161

	)

1266 
	#EVP_F_DSAPKEY2PKCS8
 134

	)

1267 
	#EVP_F_DSA_PKEY2PKCS8
 135

	)

1268 
	#EVP_F_ECDSA_PKEY2PKCS8
 129

	)

1269 
	#EVP_F_ECKEY_PKEY2PKCS8
 132

	)

1270 
	#EVP_F_EVP_CIPHERINIT_EX
 123

	)

1271 
	#EVP_F_EVP_CIPHER_CTX_COPY
 163

	)

1272 
	#EVP_F_EVP_CIPHER_CTX_CTRL
 124

	)

1273 
	#EVP_F_EVP_CIPHER_CTX_SET_KEY_LENGTH
 122

	)

1274 
	#EVP_F_EVP_DECRYPTFINAL_EX
 101

	)

1275 
	#EVP_F_EVP_DIGESTINIT_EX
 128

	)

1276 
	#EVP_F_EVP_ENCRYPTFINAL_EX
 127

	)

1277 
	#EVP_F_EVP_MD_CTX_COPY_EX
 110

	)

1278 
	#EVP_F_EVP_MD_SIZE
 162

	)

1279 
	#EVP_F_EVP_OPENINIT
 102

	)

1280 
	#EVP_F_EVP_PBE_ALG_ADD
 115

	)

1281 
	#EVP_F_EVP_PBE_ALG_ADD_TYPE
 160

	)

1282 
	#EVP_F_EVP_PBE_CIPHERINIT
 116

	)

1283 
	#EVP_F_EVP_PKCS82PKEY
 111

	)

1284 
	#EVP_F_EVP_PKCS82PKEY_BROKEN
 136

	)

1285 
	#EVP_F_EVP_PKEY2PKCS8_BROKEN
 113

	)

1286 
	#EVP_F_EVP_PKEY_COPY_PARAMETERS
 103

	)

1287 
	#EVP_F_EVP_PKEY_CTX_CTRL
 137

	)

1288 
	#EVP_F_EVP_PKEY_CTX_CTRL_STR
 150

	)

1289 
	#EVP_F_EVP_PKEY_CTX_DUP
 156

	)

1290 
	#EVP_F_EVP_PKEY_DECRYPT
 104

	)

1291 
	#EVP_F_EVP_PKEY_DECRYPT_INIT
 138

	)

1292 
	#EVP_F_EVP_PKEY_DECRYPT_OLD
 151

	)

1293 
	#EVP_F_EVP_PKEY_DERIVE
 153

	)

1294 
	#EVP_F_EVP_PKEY_DERIVE_INIT
 154

	)

1295 
	#EVP_F_EVP_PKEY_DERIVE_SET_PEER
 155

	)

1296 
	#EVP_F_EVP_PKEY_ENCRYPT
 105

	)

1297 
	#EVP_F_EVP_PKEY_ENCRYPT_INIT
 139

	)

1298 
	#EVP_F_EVP_PKEY_ENCRYPT_OLD
 152

	)

1299 
	#EVP_F_EVP_PKEY_GET1_DH
 119

	)

1300 
	#EVP_F_EVP_PKEY_GET1_DSA
 120

	)

1301 
	#EVP_F_EVP_PKEY_GET1_ECDSA
 130

	)

1302 
	#EVP_F_EVP_PKEY_GET1_EC_KEY
 131

	)

1303 
	#EVP_F_EVP_PKEY_GET1_RSA
 121

	)

1304 
	#EVP_F_EVP_PKEY_KEYGEN
 146

	)

1305 
	#EVP_F_EVP_PKEY_KEYGEN_INIT
 147

	)

1306 
	#EVP_F_EVP_PKEY_NEW
 106

	)

1307 
	#EVP_F_EVP_PKEY_PARAMGEN
 148

	)

1308 
	#EVP_F_EVP_PKEY_PARAMGEN_INIT
 149

	)

1309 
	#EVP_F_EVP_PKEY_SIGN
 140

	)

1310 
	#EVP_F_EVP_PKEY_SIGN_INIT
 141

	)

1311 
	#EVP_F_EVP_PKEY_VERIFY
 142

	)

1312 
	#EVP_F_EVP_PKEY_VERIFY_INIT
 143

	)

1313 
	#EVP_F_EVP_PKEY_VERIFY_RECOVER
 144

	)

1314 
	#EVP_F_EVP_PKEY_VERIFY_RECOVER_INIT
 145

	)

1315 
	#EVP_F_EVP_RIJNDAEL
 126

	)

1316 
	#EVP_F_EVP_SIGNFINAL
 107

	)

1317 
	#EVP_F_EVP_VERIFYFINAL
 108

	)

1318 
	#EVP_F_FIPS_CIPHERINIT
 166

	)

1319 
	#EVP_F_FIPS_CIPHER_CTX_COPY
 170

	)

1320 
	#EVP_F_FIPS_CIPHER_CTX_CTRL
 167

	)

1321 
	#EVP_F_FIPS_CIPHER_CTX_SET_KEY_LENGTH
 171

	)

1322 
	#EVP_F_FIPS_DIGESTINIT
 168

	)

1323 
	#EVP_F_FIPS_MD_CTX_COPY
 169

	)

1324 
	#EVP_F_HMAC_INIT_EX
 174

	)

1325 
	#EVP_F_INT_CTX_NEW
 157

	)

1326 
	#EVP_F_PKCS5_PBE_KEYIVGEN
 117

	)

1327 
	#EVP_F_PKCS5_V2_PBE_KEYIVGEN
 118

	)

1328 
	#EVP_F_PKCS5_V2_PBKDF2_KEYIVGEN
 164

	)

1329 
	#EVP_F_PKCS8_SET_BROKEN
 112

	)

1330 
	#EVP_F_PKEY_SET_TYPE
 158

	)

1331 
	#EVP_F_RC2_MAGIC_TO_METH
 109

	)

1332 
	#EVP_F_RC5_CTRL
 125

	)

1335 
	#EVP_R_AES_IV_SETUP_FAILED
 162

	)

1336 
	#EVP_R_AES_KEY_SETUP_FAILED
 143

	)

1337 
	#EVP_R_ASN1_LIB
 140

	)

1338 
	#EVP_R_BAD_BLOCK_LENGTH
 136

	)

1339 
	#EVP_R_BAD_DECRYPT
 100

	)

1340 
	#EVP_R_BAD_KEY_LENGTH
 137

	)

1341 
	#EVP_R_BN_DECODE_ERROR
 112

	)

1342 
	#EVP_R_BN_PUBKEY_ERROR
 113

	)

1343 
	#EVP_R_BUFFER_TOO_SMALL
 155

	)

1344 
	#EVP_R_CAMELLIA_KEY_SETUP_FAILED
 157

	)

1345 
	#EVP_R_CIPHER_PARAMETER_ERROR
 122

	)

1346 
	#EVP_R_COMMAND_NOT_SUPPORTED
 147

	)

1347 
	#EVP_R_CTRL_NOT_IMPLEMENTED
 132

	)

1348 
	#EVP_R_CTRL_OPERATION_NOT_IMPLEMENTED
 133

	)

1349 
	#EVP_R_DATA_NOT_MULTIPLE_OF_BLOCK_LENGTH
 138

	)

1350 
	#EVP_R_DECODE_ERROR
 114

	)

1351 
	#EVP_R_DIFFERENT_KEY_TYPES
 101

	)

1352 
	#EVP_R_DIFFERENT_PARAMETERS
 153

	)

1353 
	#EVP_R_DISABLED_FOR_FIPS
 163

	)

1354 
	#EVP_R_ENCODE_ERROR
 115

	)

1355 
	#EVP_R_ERROR_LOADING_SECTION
 165

	)

1356 
	#EVP_R_ERROR_SETTING_FIPS_MODE
 166

	)

1357 
	#EVP_R_EVP_PBE_CIPHERINIT_ERROR
 119

	)

1358 
	#EVP_R_EXPECTING_AN_RSA_KEY
 127

	)

1359 
	#EVP_R_EXPECTING_A_DH_KEY
 128

	)

1360 
	#EVP_R_EXPECTING_A_DSA_KEY
 129

	)

1361 
	#EVP_R_EXPECTING_A_ECDSA_KEY
 141

	)

1362 
	#EVP_R_EXPECTING_A_EC_KEY
 142

	)

1363 
	#EVP_R_FIPS_MODE_NOT_SUPPORTED
 167

	)

1364 
	#EVP_R_INITIALIZATION_ERROR
 134

	)

1365 
	#EVP_R_INPUT_NOT_INITIALIZED
 111

	)

1366 
	#EVP_R_INVALID_DIGEST
 152

	)

1367 
	#EVP_R_INVALID_FIPS_MODE
 168

	)

1368 
	#EVP_R_INVALID_KEY_LENGTH
 130

	)

1369 
	#EVP_R_INVALID_OPERATION
 148

	)

1370 
	#EVP_R_IV_TOO_LARGE
 102

	)

1371 
	#EVP_R_KEYGEN_FAILURE
 120

	)

1372 
	#EVP_R_MESSAGE_DIGEST_IS_NULL
 159

	)

1373 
	#EVP_R_METHOD_NOT_SUPPORTED
 144

	)

1374 
	#EVP_R_MISSING_PARAMETERS
 103

	)

1375 
	#EVP_R_NO_CIPHER_SET
 131

	)

1376 
	#EVP_R_NO_DEFAULT_DIGEST
 158

	)

1377 
	#EVP_R_NO_DIGEST_SET
 139

	)

1378 
	#EVP_R_NO_DSA_PARAMETERS
 116

	)

1379 
	#EVP_R_NO_KEY_SET
 154

	)

1380 
	#EVP_R_NO_OPERATION_SET
 149

	)

1381 
	#EVP_R_NO_SIGN_FUNCTION_CONFIGURED
 104

	)

1382 
	#EVP_R_NO_VERIFY_FUNCTION_CONFIGURED
 105

	)

1383 
	#EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE
 150

	)

1384 
	#EVP_R_OPERATON_NOT_INITIALIZED
 151

	)

1385 
	#EVP_R_PKCS8_UNKNOWN_BROKEN_TYPE
 117

	)

1386 
	#EVP_R_PRIVATE_KEY_DECODE_ERROR
 145

	)

1387 
	#EVP_R_PRIVATE_KEY_ENCODE_ERROR
 146

	)

1388 
	#EVP_R_PUBLIC_KEY_NOT_RSA
 106

	)

1389 
	#EVP_R_TOO_LARGE
 164

	)

1390 
	#EVP_R_UNKNOWN_CIPHER
 160

	)

1391 
	#EVP_R_UNKNOWN_DIGEST
 161

	)

1392 
	#EVP_R_UNKNOWN_OPTION
 169

	)

1393 
	#EVP_R_UNKNOWN_PBE_ALGORITHM
 121

	)

1394 
	#EVP_R_UNSUPORTED_NUMBER_OF_ROUNDS
 135

	)

1395 
	#EVP_R_UNSUPPORTED_ALGORITHM
 156

	)

1396 
	#EVP_R_UNSUPPORTED_CIPHER
 107

	)

1397 
	#EVP_R_UNSUPPORTED_KEYLENGTH
 123

	)

1398 
	#EVP_R_UNSUPPORTED_KEY_DERIVATION_FUNCTION
 124

	)

1399 
	#EVP_R_UNSUPPORTED_KEY_SIZE
 108

	)

1400 
	#EVP_R_UNSUPPORTED_PRF
 125

	)

1401 
	#EVP_R_UNSUPPORTED_PRIVATE_KEY_ALGORITHM
 118

	)

1402 
	#EVP_R_UNSUPPORTED_SALT_TYPE
 126

	)

1403 
	#EVP_R_WRONG_FINAL_BLOCK_LENGTH
 109

	)

1404 
	#EVP_R_WRONG_PUBLIC_KEY_TYPE
 110

	)

1406 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/pem2.h

60 #ifde‡
__˝lu•lus


64 #i‚de‡
HEADER_PEM_H


65 
ERR_lﬂd_PEM_°rögs
();

68 #ifde‡
__˝lu•lus


	@/usr/include/openssl/pkcs7.h

59 #i‚de‡
HEADER_PKCS7_H


60 
	#HEADER_PKCS7_H


	)

62 
	~<›ís¶/a¢1.h
>

63 
	~<›ís¶/bio.h
>

64 
	~<›ís¶/e_os2.h
>

66 
	~<›ís¶/symhacks.h
>

67 
	~<›ís¶/os¶_typ.h
>

69 #ifde‡ 
__˝lu•lus


73 #ifde‡
OPENSSL_SYS_WIN32


75 #unde‡
PKCS7_ISSUER_AND_SERIAL


76 #unde‡
PKCS7_SIGNER_INFO


86 
	spkcs7_issuî_™d_£rül_°


88 
X509_NAME
 *
issuî
;

89 
ASN1_INTEGER
 *
£rül
;

90 } 
	tPKCS7_ISSUER_AND_SERIAL
;

92 
	spkcs7_sig√r_öfo_°


94 
ASN1_INTEGER
 *
vîsi⁄
;

95 
PKCS7_ISSUER_AND_SERIAL
 *
issuî_™d_£rül
;

96 
X509_ALGOR
 *
dige°_Æg
;

97 
STACK_OF
(
X509_ATTRIBUTE
Ë*
auth_©å
;

98 
X509_ALGOR
 *
dige°_íc_Æg
;

99 
ASN1_OCTET_STRING
 *
íc_dige°
;

100 
STACK_OF
(
X509_ATTRIBUTE
Ë*
u«uth_©å
;

103 
EVP_PKEY
 *
pkey
;

104 } 
	tPKCS7_SIGNER_INFO
;

106 
DECLARE_STACK_OF
(
PKCS7_SIGNER_INFO
)

107 
DECLARE_ASN1_SET_OF
(
PKCS7_SIGNER_INFO
)

109 
	spkcs7_ªcù_öfo_°


111 
ASN1_INTEGER
 *
vîsi⁄
;

112 
PKCS7_ISSUER_AND_SERIAL
 *
issuî_™d_£rül
;

113 
X509_ALGOR
 *
key_íc_Æg‹
;

114 
ASN1_OCTET_STRING
 *
íc_key
;

115 
X509
 *
˚π
;

116 } 
	tPKCS7_RECIP_INFO
;

118 
DECLARE_STACK_OF
(
PKCS7_RECIP_INFO
)

119 
DECLARE_ASN1_SET_OF
(
PKCS7_RECIP_INFO
)

121 
	spkcs7_sig√d_°


123 
ASN1_INTEGER
 *
vîsi⁄
;

124 
STACK_OF
(
X509_ALGOR
Ë*
md_Ægs
;

125 
STACK_OF
(
X509
Ë*
˚π
;

126 
STACK_OF
(
X509_CRL
Ë*
¸l
;

127 
STACK_OF
(
PKCS7_SIGNER_INFO
Ë*
sig√r_öfo
;

129 
pkcs7_°
 *
c⁄ã¡s
;

130 } 
	tPKCS7_SIGNED
;

134 
	spkcs7_íc_c⁄ã¡_°


136 
ASN1_OBJECT
 *
c⁄ã¡_ty≥
;

137 
X509_ALGOR
 *
Æg‹ôhm
;

138 
ASN1_OCTET_STRING
 *
íc_d©a
;

139 c⁄° 
EVP_CIPHER
 *
cùhî
;

140 } 
	tPKCS7_ENC_CONTENT
;

142 
	spkcs7_ívñ›ed_°


144 
ASN1_INTEGER
 *
vîsi⁄
;

145 
STACK_OF
(
PKCS7_RECIP_INFO
Ë*
ªcùõ¡öfo
;

146 
PKCS7_ENC_CONTENT
 *
íc_d©a
;

147 } 
	tPKCS7_ENVELOPE
;

149 
	spkcs7_sig√d™dívñ›ed_°


151 
ASN1_INTEGER
 *
vîsi⁄
;

152 
STACK_OF
(
X509_ALGOR
Ë*
md_Ægs
;

153 
STACK_OF
(
X509
Ë*
˚π
;

154 
STACK_OF
(
X509_CRL
Ë*
¸l
;

155 
STACK_OF
(
PKCS7_SIGNER_INFO
Ë*
sig√r_öfo
;

157 
PKCS7_ENC_CONTENT
 *
íc_d©a
;

158 
STACK_OF
(
PKCS7_RECIP_INFO
Ë*
ªcùõ¡öfo
;

159 } 
	tPKCS7_SIGN_ENVELOPE
;

161 
	spkcs7_dige°_°


163 
ASN1_INTEGER
 *
vîsi⁄
;

164 
X509_ALGOR
 *
md
;

165 
pkcs7_°
 *
c⁄ã¡s
;

166 
ASN1_OCTET_STRING
 *
dige°
;

167 } 
	tPKCS7_DIGEST
;

169 
	spkcs7_í¸y±ed_°


171 
ASN1_INTEGER
 *
vîsi⁄
;

172 
PKCS7_ENC_CONTENT
 *
íc_d©a
;

173 } 
	tPKCS7_ENCRYPT
;

175 
	spkcs7_°


179 *
a¢1
;

180 
Àngth
;

182 
	#PKCS7_S_HEADER
 0

	)

183 
	#PKCS7_S_BODY
 1

	)

184 
	#PKCS7_S_TAIL
 2

	)

185 
°©e
;

187 
dëached
;

189 
ASN1_OBJECT
 *
ty≥
;

194 *
±r
;

197 
ASN1_OCTET_STRING
 *
d©a
;

200 
PKCS7_SIGNED
 *
sign
;

203 
PKCS7_ENVELOPE
 *
ívñ›ed
;

206 
PKCS7_SIGN_ENVELOPE
 *
sig√d_™d_ívñ›ed
;

209 
PKCS7_DIGEST
 *
dige°
;

212 
PKCS7_ENCRYPT
 *
í¸y±ed
;

215 
ASN1_TYPE
 *
Ÿhî
;

216 } 
d
;

217 } 
	tPKCS7
;

219 
DECLARE_STACK_OF
(
PKCS7
)

220 
DECLARE_ASN1_SET_OF
(
PKCS7
)

221 
DECLARE_PKCS12_STACK_OF
(
PKCS7
)

223 
	#PKCS7_OP_SET_DETACHED_SIGNATURE
 1

	)

224 
	#PKCS7_OP_GET_DETACHED_SIGNATURE
 2

	)

226 
	#PKCS7_gë_sig√d_©åibuãs
(
si
Ë((si)->
auth_©å
)

	)

227 
	#PKCS7_gë_©åibuãs
(
si
Ë((si)->
u«uth_©å
)

	)

229 
	#PKCS7_ty≥_is_sig√d
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_sig√d
)

	)

230 
	#PKCS7_ty≥_is_í¸y±ed
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_í¸y±ed
)

	)

231 
	#PKCS7_ty≥_is_ívñ›ed
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_ívñ›ed
)

	)

232 
	#PKCS7_ty≥_is_sig√dAndEnvñ›ed
(
a
) \

233 (
	`OBJ_obj2nid
((
a
)->
ty≥
Ë=
NID_pkcs7_sig√dAndEnvñ›ed
)

	)

234 
	#PKCS7_ty≥_is_d©a
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_d©a
)

	)

235 
	#PKCS7_ty≥_is_dige°
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_dige°
)

	)

237 
	#PKCS7_£t_dëached
(
p
,
v
) \

238 
	`PKCS7_˘æ
(
p
,
PKCS7_OP_SET_DETACHED_SIGNATURE
,
v
,
NULL
)

	)

239 
	#PKCS7_gë_dëached
(
p
) \

240 
	`PKCS7_˘æ
(
p
,
PKCS7_OP_GET_DETACHED_SIGNATURE
,0,
NULL
)

	)

242 
	#PKCS7_is_dëached
(
p7
Ë(
	`PKCS7_ty≥_is_sig√d
’7Ë&& 
	`PKCS7_gë_dëached
’7))

	)

246 
	#PKCS7_TEXT
 0x1

	)

247 
	#PKCS7_NOCERTS
 0x2

	)

248 
	#PKCS7_NOSIGS
 0x4

	)

249 
	#PKCS7_NOCHAIN
 0x8

	)

250 
	#PKCS7_NOINTERN
 0x10

	)

251 
	#PKCS7_NOVERIFY
 0x20

	)

252 
	#PKCS7_DETACHED
 0x40

	)

253 
	#PKCS7_BINARY
 0x80

	)

254 
	#PKCS7_NOATTR
 0x100

	)

255 
	#PKCS7_NOSMIMECAP
 0x200

	)

256 
	#PKCS7_NOOLDMIMETYPE
 0x400

	)

257 
	#PKCS7_CRLFEOL
 0x800

	)

258 
	#PKCS7_STREAM
 0x1000

	)

259 
	#PKCS7_NOCRL
 0x2000

	)

260 
	#PKCS7_PARTIAL
 0x4000

	)

261 
	#PKCS7_REUSE_DIGEST
 0x8000

	)

265 
	#SMIME_TEXT
 
PKCS7_TEXT


	)

266 
	#SMIME_NOCERTS
 
PKCS7_NOCERTS


	)

267 
	#SMIME_NOSIGS
 
PKCS7_NOSIGS


	)

268 
	#SMIME_NOCHAIN
 
PKCS7_NOCHAIN


	)

269 
	#SMIME_NOINTERN
 
PKCS7_NOINTERN


	)

270 
	#SMIME_NOVERIFY
 
PKCS7_NOVERIFY


	)

271 
	#SMIME_DETACHED
 
PKCS7_DETACHED


	)

272 
	#SMIME_BINARY
 
PKCS7_BINARY


	)

273 
	#SMIME_NOATTR
 
PKCS7_NOATTR


	)

275 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_ISSUER_AND_SERIAL
)

277 
PKCS7_ISSUER_AND_SERIAL_dige°
(
PKCS7_ISSUER_AND_SERIAL
 *
d©a
,c⁄° 
EVP_MD
 *
ty≥
,

278 *
md
,*
Àn
);

279 #i‚de‡
OPENSSL_NO_FP_API


280 
PKCS7
 *
d2i_PKCS7_Â
(
FILE
 *
Â
,PKCS7 **
p7
);

281 
i2d_PKCS7_Â
(
FILE
 *
Â
,
PKCS7
 *
p7
);

283 
PKCS7
 *
PKCS7_dup
(PKCS7 *
p7
);

284 
PKCS7
 *
d2i_PKCS7_bio
(
BIO
 *
bp
,PKCS7 **
p7
);

285 
i2d_PKCS7_bio
(
BIO
 *
bp
,
PKCS7
 *
p7
);

286 
i2d_PKCS7_bio_°ªam
(
BIO
 *
out
, 
PKCS7
 *
p7
, BIO *
ö
, 
Êags
);

287 
PEM_wrôe_bio_PKCS7_°ªam
(
BIO
 *
out
, 
PKCS7
 *
p7
, BIO *
ö
, 
Êags
);

289 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_SIGNER_INFO
)

290 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_RECIP_INFO
)

291 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_SIGNED
)

292 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_ENC_CONTENT
)

293 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_ENVELOPE
)

294 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_SIGN_ENVELOPE
)

295 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_DIGEST
)

296 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_ENCRYPT
)

297 
DECLARE_ASN1_FUNCTIONS
(
PKCS7
)

299 
DECLARE_ASN1_ITEM
(
PKCS7_ATTR_SIGN
)

300 
DECLARE_ASN1_ITEM
(
PKCS7_ATTR_VERIFY
)

302 
DECLARE_ASN1_NDEF_FUNCTION
(
PKCS7
)

303 
DECLARE_ASN1_PRINT_FUNCTION
(
PKCS7
)

305 
PKCS7_˘æ
(
PKCS7
 *
p7
, 
cmd
, 
œrg
, *
∑rg
);

307 
PKCS7_£t_ty≥
(
PKCS7
 *
p7
, 
ty≥
);

308 
PKCS7_£t0_ty≥_Ÿhî
(
PKCS7
 *
p7
, 
ty≥
, 
ASN1_TYPE
 *
Ÿhî
);

309 
PKCS7_£t_c⁄ã¡
(
PKCS7
 *
p7
, PKCS7 *
p7_d©a
);

310 
PKCS7_SIGNER_INFO_£t
(
PKCS7_SIGNER_INFO
 *
p7i
, 
X509
 *
x509
, 
EVP_PKEY
 *
pkey
,

311 c⁄° 
EVP_MD
 *
dg°
);

312 
PKCS7_SIGNER_INFO_sign
(
PKCS7_SIGNER_INFO
 *
si
);

313 
PKCS7_add_sig√r
(
PKCS7
 *
p7
, 
PKCS7_SIGNER_INFO
 *
p7i
);

314 
PKCS7_add_˚πifiˇã
(
PKCS7
 *
p7
, 
X509
 *
x509
);

315 
PKCS7_add_¸l
(
PKCS7
 *
p7
, 
X509_CRL
 *
x509
);

316 
PKCS7_c⁄ã¡_√w
(
PKCS7
 *
p7
, 
nid
);

317 
PKCS7_d©aVîify
(
X509_STORE
 *
˚π_°‹e
, 
X509_STORE_CTX
 *
˘x
,

318 
BIO
 *
bio
, 
PKCS7
 *
p7
, 
PKCS7_SIGNER_INFO
 *
si
);

319 
PKCS7_sig«tuªVîify
(
BIO
 *
bio
, 
PKCS7
 *
p7
, 
PKCS7_SIGNER_INFO
 *
si
,

320 
X509
 *
x509
);

322 
BIO
 *
PKCS7_d©aInô
(
PKCS7
 *
p7
, BIO *
bio
);

323 
PKCS7_d©aFöÆ
(
PKCS7
 *
p7
, 
BIO
 *
bio
);

324 
BIO
 *
PKCS7_d©aDecode
(
PKCS7
 *
p7
, 
EVP_PKEY
 *
pkey
, BIO *
ö_bio
, 
X509
 *
p˚π
);

327 
PKCS7_SIGNER_INFO
 *
PKCS7_add_sig«tuª
(
PKCS7
 *
p7
, 
X509
 *
x509
,

328 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
dg°
);

329 
X509
 *
PKCS7_˚π_‰om_sig√r_öfo
(
PKCS7
 *
p7
, 
PKCS7_SIGNER_INFO
 *
si
);

330 
PKCS7_£t_dige°
(
PKCS7
 *
p7
, c⁄° 
EVP_MD
 *
md
);

331 
STACK_OF
(
PKCS7_SIGNER_INFO
Ë*
PKCS7_gë_sig√r_öfo
(
PKCS7
 *
p7
);

333 
PKCS7_RECIP_INFO
 *
PKCS7_add_ªcùõ¡
(
PKCS7
 *
p7
, 
X509
 *
x509
);

334 
PKCS7_SIGNER_INFO_gë0_Ægs
(
PKCS7_SIGNER_INFO
 *
si
, 
EVP_PKEY
 **
pk
,

335 
X509_ALGOR
 **
pdig
, X509_ALGOR **
psig
);

336 
PKCS7_RECIP_INFO_gë0_Æg
(
PKCS7_RECIP_INFO
 *
ri
, 
X509_ALGOR
 **
≥nc
);

337 
PKCS7_add_ªcùõ¡_öfo
(
PKCS7
 *
p7
, 
PKCS7_RECIP_INFO
 *
ri
);

338 
PKCS7_RECIP_INFO_£t
(
PKCS7_RECIP_INFO
 *
p7i
, 
X509
 *
x509
);

339 
PKCS7_£t_cùhî
(
PKCS7
 *
p7
, c⁄° 
EVP_CIPHER
 *
cùhî
);

340 
PKCS7_°ªam
(***
bound¨y
, 
PKCS7
 *
p7
);

342 
PKCS7_ISSUER_AND_SERIAL
 *
PKCS7_gë_issuî_™d_£rül
(
PKCS7
 *
p7
, 
idx
);

343 
ASN1_OCTET_STRING
 *
PKCS7_dige°_‰om_©åibuãs
(
STACK_OF
(
X509_ATTRIBUTE
Ë*
sk
);

344 
PKCS7_add_sig√d_©åibuã
(
PKCS7_SIGNER_INFO
 *
p7si
,
nid
,
ty≥
,

345 *
d©a
);

346 
PKCS7_add_©åibuã
 (
PKCS7_SIGNER_INFO
 *
p7si
, 
nid
, 
©πy≥
,

347 *
vÆue
);

348 
ASN1_TYPE
 *
PKCS7_gë_©åibuã
(
PKCS7_SIGNER_INFO
 *
si
, 
nid
);

349 
ASN1_TYPE
 *
PKCS7_gë_sig√d_©åibuã
(
PKCS7_SIGNER_INFO
 *
si
, 
nid
);

350 
PKCS7_£t_sig√d_©åibuãs
(
PKCS7_SIGNER_INFO
 *
p7si
,

351 
STACK_OF
(
X509_ATTRIBUTE
Ë*
sk
);

352 
PKCS7_£t_©åibuãs
(
PKCS7_SIGNER_INFO
 *
p7si
,
STACK_OF
(
X509_ATTRIBUTE
Ë*
sk
);

355 
PKCS7
 *
PKCS7_sign
(
X509
 *
sign˚π
, 
EVP_PKEY
 *
pkey
, 
STACK_OF
(X509Ë*
˚πs
,

356 
BIO
 *
d©a
, 
Êags
);

358 
PKCS7_SIGNER_INFO
 *
PKCS7_sign_add_sig√r
(
PKCS7
 *
p7
,

359 
X509
 *
sign˚π
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
,

360 
Êags
);

362 
PKCS7_föÆ
(
PKCS7
 *
p7
, 
BIO
 *
d©a
, 
Êags
);

363 
PKCS7_vîify
(
PKCS7
 *
p7
, 
STACK_OF
(
X509
Ë*
˚πs
, 
X509_STORE
 *
°‹e
,

364 
BIO
 *
öd©a
, BIO *
out
, 
Êags
);

365 
STACK_OF
(
X509
Ë*
PKCS7_gë0_sig√rs
(
PKCS7
 *
p7
, STACK_OF(X509Ë*
˚πs
, 
Êags
);

366 
PKCS7
 *
PKCS7_í¸y±
(
STACK_OF
(
X509
Ë*
˚πs
, 
BIO
 *
ö
, c⁄° 
EVP_CIPHER
 *
cùhî
,

367 
Êags
);

368 
PKCS7_de¸y±
(
PKCS7
 *
p7
, 
EVP_PKEY
 *
pkey
, 
X509
 *
˚π
, 
BIO
 *
d©a
, 
Êags
);

370 
PKCS7_add_©åib_smimeˇp
(
PKCS7_SIGNER_INFO
 *
si
,

371 
STACK_OF
(
X509_ALGOR
Ë*
ˇp
);

372 
STACK_OF
(
X509_ALGOR
Ë*
PKCS7_gë_smimeˇp
(
PKCS7_SIGNER_INFO
 *
si
);

373 
PKCS7_sim∂e_smimeˇp
(
STACK_OF
(
X509_ALGOR
Ë*
sk
, 
nid
, 
¨g
);

375 
PKCS7_add_©åib_c⁄ã¡_ty≥
(
PKCS7_SIGNER_INFO
 *
si
, 
ASN1_OBJECT
 *
coid
);

376 
PKCS7_add0_©åib_signög_time
(
PKCS7_SIGNER_INFO
 *
si
, 
ASN1_TIME
 *
t
);

377 
PKCS7_add1_©åib_dige°
(
PKCS7_SIGNER_INFO
 *
si
,

378 c⁄° *
md
, 
mdÀn
);

380 
SMIME_wrôe_PKCS7
(
BIO
 *
bio
, 
PKCS7
 *
p7
, BIO *
d©a
, 
Êags
);

381 
PKCS7
 *
SMIME_ªad_PKCS7
(
BIO
 *
bio
, BIO **
bc⁄t
);

383 
BIO
 *
BIO_√w_PKCS7
(BIO *
out
, 
PKCS7
 *
p7
);

390 
ERR_lﬂd_PKCS7_°rögs
();

395 
	#PKCS7_F_B64_READ_PKCS7
 120

	)

396 
	#PKCS7_F_B64_WRITE_PKCS7
 121

	)

397 
	#PKCS7_F_DO_PKCS7_SIGNED_ATTRIB
 136

	)

398 
	#PKCS7_F_I2D_PKCS7_BIO_STREAM
 140

	)

399 
	#PKCS7_F_PKCS7_ADD0_ATTRIB_SIGNING_TIME
 135

	)

400 
	#PKCS7_F_PKCS7_ADD_ATTRIB_SMIMECAP
 118

	)

401 
	#PKCS7_F_PKCS7_ADD_CERTIFICATE
 100

	)

402 
	#PKCS7_F_PKCS7_ADD_CRL
 101

	)

403 
	#PKCS7_F_PKCS7_ADD_RECIPIENT_INFO
 102

	)

404 
	#PKCS7_F_PKCS7_ADD_SIGNATURE
 131

	)

405 
	#PKCS7_F_PKCS7_ADD_SIGNER
 103

	)

406 
	#PKCS7_F_PKCS7_BIO_ADD_DIGEST
 125

	)

407 
	#PKCS7_F_PKCS7_COPY_EXISTING_DIGEST
 138

	)

408 
	#PKCS7_F_PKCS7_CTRL
 104

	)

409 
	#PKCS7_F_PKCS7_DATADECODE
 112

	)

410 
	#PKCS7_F_PKCS7_DATAFINAL
 128

	)

411 
	#PKCS7_F_PKCS7_DATAINIT
 105

	)

412 
	#PKCS7_F_PKCS7_DATASIGN
 106

	)

413 
	#PKCS7_F_PKCS7_DATAVERIFY
 107

	)

414 
	#PKCS7_F_PKCS7_DECRYPT
 114

	)

415 
	#PKCS7_F_PKCS7_DECRYPT_RINFO
 133

	)

416 
	#PKCS7_F_PKCS7_ENCODE_RINFO
 132

	)

417 
	#PKCS7_F_PKCS7_ENCRYPT
 115

	)

418 
	#PKCS7_F_PKCS7_FINAL
 134

	)

419 
	#PKCS7_F_PKCS7_FIND_DIGEST
 127

	)

420 
	#PKCS7_F_PKCS7_GET0_SIGNERS
 124

	)

421 
	#PKCS7_F_PKCS7_RECIP_INFO_SET
 130

	)

422 
	#PKCS7_F_PKCS7_SET_CIPHER
 108

	)

423 
	#PKCS7_F_PKCS7_SET_CONTENT
 109

	)

424 
	#PKCS7_F_PKCS7_SET_DIGEST
 126

	)

425 
	#PKCS7_F_PKCS7_SET_TYPE
 110

	)

426 
	#PKCS7_F_PKCS7_SIGN
 116

	)

427 
	#PKCS7_F_PKCS7_SIGNATUREVERIFY
 113

	)

428 
	#PKCS7_F_PKCS7_SIGNER_INFO_SET
 129

	)

429 
	#PKCS7_F_PKCS7_SIGNER_INFO_SIGN
 139

	)

430 
	#PKCS7_F_PKCS7_SIGN_ADD_SIGNER
 137

	)

431 
	#PKCS7_F_PKCS7_SIMPLE_SMIMECAP
 119

	)

432 
	#PKCS7_F_PKCS7_VERIFY
 117

	)

433 
	#PKCS7_F_SMIME_READ_PKCS7
 122

	)

434 
	#PKCS7_F_SMIME_TEXT
 123

	)

437 
	#PKCS7_R_CERTIFICATE_VERIFY_ERROR
 117

	)

438 
	#PKCS7_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER
 144

	)

439 
	#PKCS7_R_CIPHER_NOT_INITIALIZED
 116

	)

440 
	#PKCS7_R_CONTENT_AND_DATA_PRESENT
 118

	)

441 
	#PKCS7_R_CTRL_ERROR
 152

	)

442 
	#PKCS7_R_DECODE_ERROR
 130

	)

443 
	#PKCS7_R_DECRYPTED_KEY_IS_WRONG_LENGTH
 100

	)

444 
	#PKCS7_R_DECRYPT_ERROR
 119

	)

445 
	#PKCS7_R_DIGEST_FAILURE
 101

	)

446 
	#PKCS7_R_ENCRYPTION_CTRL_FAILURE
 149

	)

447 
	#PKCS7_R_ENCRYPTION_NOT_SUPPORTED_FOR_THIS_KEY_TYPE
 150

	)

448 
	#PKCS7_R_ERROR_ADDING_RECIPIENT
 120

	)

449 
	#PKCS7_R_ERROR_SETTING_CIPHER
 121

	)

450 
	#PKCS7_R_INVALID_MIME_TYPE
 131

	)

451 
	#PKCS7_R_INVALID_NULL_POINTER
 143

	)

452 
	#PKCS7_R_INVALID_SIGNED_DATA_TYPE
 155

	)

453 
	#PKCS7_R_MIME_NO_CONTENT_TYPE
 132

	)

454 
	#PKCS7_R_MIME_PARSE_ERROR
 133

	)

455 
	#PKCS7_R_MIME_SIG_PARSE_ERROR
 134

	)

456 
	#PKCS7_R_MISSING_CERIPEND_INFO
 103

	)

457 
	#PKCS7_R_NO_CONTENT
 122

	)

458 
	#PKCS7_R_NO_CONTENT_TYPE
 135

	)

459 
	#PKCS7_R_NO_DEFAULT_DIGEST
 151

	)

460 
	#PKCS7_R_NO_MATCHING_DIGEST_TYPE_FOUND
 154

	)

461 
	#PKCS7_R_NO_MULTIPART_BODY_FAILURE
 136

	)

462 
	#PKCS7_R_NO_MULTIPART_BOUNDARY
 137

	)

463 
	#PKCS7_R_NO_RECIPIENT_MATCHES_CERTIFICATE
 115

	)

464 
	#PKCS7_R_NO_RECIPIENT_MATCHES_KEY
 146

	)

465 
	#PKCS7_R_NO_SIGNATURES_ON_DATA
 123

	)

466 
	#PKCS7_R_NO_SIGNERS
 142

	)

467 
	#PKCS7_R_NO_SIG_CONTENT_TYPE
 138

	)

468 
	#PKCS7_R_OPERATION_NOT_SUPPORTED_ON_THIS_TYPE
 104

	)

469 
	#PKCS7_R_PKCS7_ADD_SIGNATURE_ERROR
 124

	)

470 
	#PKCS7_R_PKCS7_ADD_SIGNER_ERROR
 153

	)

471 
	#PKCS7_R_PKCS7_DATAFINAL
 126

	)

472 
	#PKCS7_R_PKCS7_DATAFINAL_ERROR
 125

	)

473 
	#PKCS7_R_PKCS7_DATASIGN
 145

	)

474 
	#PKCS7_R_PKCS7_PARSE_ERROR
 139

	)

475 
	#PKCS7_R_PKCS7_SIG_PARSE_ERROR
 140

	)

476 
	#PKCS7_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE
 127

	)

477 
	#PKCS7_R_SIGNATURE_FAILURE
 105

	)

478 
	#PKCS7_R_SIGNER_CERTIFICATE_NOT_FOUND
 128

	)

479 
	#PKCS7_R_SIGNING_CTRL_FAILURE
 147

	)

480 
	#PKCS7_R_SIGNING_NOT_SUPPORTED_FOR_THIS_KEY_TYPE
 148

	)

481 
	#PKCS7_R_SIG_INVALID_MIME_TYPE
 141

	)

482 
	#PKCS7_R_SMIME_TEXT_ERROR
 129

	)

483 
	#PKCS7_R_UNABLE_TO_FIND_CERTIFICATE
 106

	)

484 
	#PKCS7_R_UNABLE_TO_FIND_MEM_BIO
 107

	)

485 
	#PKCS7_R_UNABLE_TO_FIND_MESSAGE_DIGEST
 108

	)

486 
	#PKCS7_R_UNKNOWN_DIGEST_TYPE
 109

	)

487 
	#PKCS7_R_UNKNOWN_OPERATION
 110

	)

488 
	#PKCS7_R_UNSUPPORTED_CIPHER_TYPE
 111

	)

489 
	#PKCS7_R_UNSUPPORTED_CONTENT_TYPE
 112

	)

490 
	#PKCS7_R_WRONG_CONTENT_TYPE
 113

	)

491 
	#PKCS7_R_WRONG_PKCS7_TYPE
 114

	)

493 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/pqueue.h

60 #i‚de‡
HEADER_PQUEUE_H


61 
	#HEADER_PQUEUE_H


	)

63 
	~<°dio.h
>

64 
	~<°dlib.h
>

65 
	~<°rög.h
>

67 #ifde‡ 
__˝lu•lus


70 
_pqueue
 *
	tpqueue
;

72 
	s_pôem


74 
¥i‹ôy
[8];

75 *
d©a
;

76 
_pôem
 *
√xt
;

77 } 
	tpôem
;

79 
_pôem
 *
	tpôî©‹
;

81 
pôem
 *
pôem_√w
(*
¥io64be
, *
d©a
);

82 
pôem_‰ì
(
pôem
 *
ôem
);

84 
pqueue
 
pqueue_√w
();

85 
pqueue_‰ì
(
pqueue
 
pq
);

87 
pôem
 *
pqueue_ö£π
(
pqueue
 
pq
,Öôem *
ôem
);

88 
pôem
 *
pqueue_≥ek
(
pqueue
 
pq
);

89 
pôem
 *
pqueue_p›
(
pqueue
 
pq
);

90 
pôem
 *
pqueue_föd
(
pqueue
 
pq
, *
¥io64be
);

91 
pôem
 *
pqueue_ôî©‹
(
pqueue
 
pq
);

92 
pôem
 *
pqueue_√xt
(
pôî©‹
 *
ôî
);

94 
pqueue_¥öt
(
pqueue
 
pq
);

95 
pqueue_size
(
pqueue
 
pq
);

97 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/rsa.h

59 #i‚de‡
HEADER_RSA_H


60 
	#HEADER_RSA_H


	)

62 
	~<›ís¶/a¢1.h
>

64 #i‚de‡
OPENSSL_NO_BIO


65 
	~<›ís¶/bio.h
>

67 
	~<›ís¶/¸y±o.h
>

68 
	~<›ís¶/os¶_typ.h
>

69 #i‚de‡
OPENSSL_NO_DEPRECATED


70 
	~<›ís¶/bn.h
>

73 #ifde‡
OPENSSL_NO_RSA


74 #îr‹ 
RSA
 
is
 
dißbÀd
.

77 #ifde‡ 
__˝lu•lus


85 
	srß_mëh_°


87 c⁄° *
«me
;

88 (*
rß_pub_íc
)(
Êí
,c⁄° *
‰om
,

89 *
to
,

90 
RSA
 *
rß
,
∑ddög
);

91 (*
rß_pub_dec
)(
Êí
,c⁄° *
‰om
,

92 *
to
,

93 
RSA
 *
rß
,
∑ddög
);

94 (*
rß_¥iv_íc
)(
Êí
,c⁄° *
‰om
,

95 *
to
,

96 
RSA
 *
rß
,
∑ddög
);

97 (*
rß_¥iv_dec
)(
Êí
,c⁄° *
‰om
,

98 *
to
,

99 
RSA
 *
rß
,
∑ddög
);

100 (*
rß_mod_exp
)(
BIGNUM
 *
r0
,c⁄° BIGNUM *
I
,
RSA
 *
rß
,
BN_CTX
 *
˘x
);

101 (*
bn_mod_exp
)(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

102 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
,

103 
BN_MONT_CTX
 *
m_˘x
);

104 (*
öô
)(
RSA
 *
rß
);

105 (*
föish
)(
RSA
 *
rß
);

106 
Êags
;

107 *
≠p_d©a
;

115 (*
rß_sign
)(
ty≥
,

116 c⁄° *
m
, 
m_Àngth
,

117 *
sigªt
, *
sigÀn
, c⁄° 
RSA
 *
rß
);

118 (*
rß_vîify
)(
dty≥
,

119 c⁄° *
m
, 
m_Àngth
,

120 c⁄° *
sigbuf
, 
sigÀn
,

121 c⁄° 
RSA
 *
rß
);

126 (*
rß_keygí
)(
RSA
 *
rß
, 
bôs
, 
BIGNUM
 *
e
, 
BN_GENCB
 *
cb
);

129 
	srß_°


133 
∑d
;

134 
vîsi⁄
;

135 c⁄° 
RSA_METHOD
 *
mëh
;

137 
ENGINE
 *
ígöe
;

138 
BIGNUM
 *
n
;

139 
BIGNUM
 *
e
;

140 
BIGNUM
 *
d
;

141 
BIGNUM
 *
p
;

142 
BIGNUM
 *
q
;

143 
BIGNUM
 *
dmp1
;

144 
BIGNUM
 *
dmq1
;

145 
BIGNUM
 *
iqmp
;

147 
CRYPTO_EX_DATA
 
ex_d©a
;

148 
ª„ªn˚s
;

149 
Êags
;

152 
BN_MONT_CTX
 *
_mëhod_mod_n
;

153 
BN_MONT_CTX
 *
_mëhod_mod_p
;

154 
BN_MONT_CTX
 *
_mëhod_mod_q
;

158 *
bignum_d©a
;

159 
BN_BLINDING
 *
blödög
;

160 
BN_BLINDING
 *
mt_blödög
;

163 #i‚de‡
OPENSSL_RSA_MAX_MODULUS_BITS


164 
	#OPENSSL_RSA_MAX_MODULUS_BITS
 16384

	)

167 #i‚de‡
OPENSSL_RSA_SMALL_MODULUS_BITS


168 
	#OPENSSL_RSA_SMALL_MODULUS_BITS
 3072

	)

170 #i‚de‡
OPENSSL_RSA_MAX_PUBEXP_BITS


171 
	#OPENSSL_RSA_MAX_PUBEXP_BITS
 64

	)

174 
	#RSA_3
 0x3L

	)

175 
	#RSA_F4
 0x10001L

	)

177 
	#RSA_METHOD_FLAG_NO_CHECK
 0x0001

	)

179 
	#RSA_FLAG_CACHE_PUBLIC
 0x0002

	)

180 
	#RSA_FLAG_CACHE_PRIVATE
 0x0004

	)

181 
	#RSA_FLAG_BLINDING
 0x0008

	)

182 
	#RSA_FLAG_THREAD_SAFE
 0x0010

	)

188 
	#RSA_FLAG_EXT_PKEY
 0x0020

	)

192 
	#RSA_FLAG_SIGN_VER
 0x0040

	)

194 
	#RSA_FLAG_NO_BLINDING
 0x0080

	)

199 
	#RSA_FLAG_NO_CONSTTIME
 0x0100

	)

209 #i‚de‡
OPENSSL_NO_DEPRECATED


210 
	#RSA_FLAG_NO_EXP_CONSTTIME
 
RSA_FLAG_NO_CONSTTIME


	)

221 
	#EVP_PKEY_CTX_£t_rß_∑ddög
(
˘x
, 
∑d
) \

222 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, -1, 
EVP_PKEY_CTRL_RSA_PADDING
, \

223 
∑d
, 
NULL
)

	)

225 
	#EVP_PKEY_CTX_gë_rß_∑ddög
(
˘x
, 
µad
) \

226 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, -1, \

227 
EVP_PKEY_CTRL_GET_RSA_PADDING
, 0, 
µad
)

	)

229 
	#EVP_PKEY_CTX_£t_rß_pss_ß…Àn
(
˘x
, 
Àn
) \

230 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, \

231 (
EVP_PKEY_OP_SIGN
|
EVP_PKEY_OP_VERIFY
), \

232 
EVP_PKEY_CTRL_RSA_PSS_SALTLEN
, \

233 
Àn
, 
NULL
)

	)

235 
	#EVP_PKEY_CTX_gë_rß_pss_ß…Àn
(
˘x
, 
∂í
) \

236 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, \

237 (
EVP_PKEY_OP_SIGN
|
EVP_PKEY_OP_VERIFY
), \

238 
EVP_PKEY_CTRL_GET_RSA_PSS_SALTLEN
, \

239 0, 
∂í
)

	)

241 
	#EVP_PKEY_CTX_£t_rß_keygí_bôs
(
˘x
, 
bôs
) \

242 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, 
EVP_PKEY_OP_KEYGEN
, \

243 
EVP_PKEY_CTRL_RSA_KEYGEN_BITS
, 
bôs
, 
NULL
)

	)

245 
	#EVP_PKEY_CTX_£t_rß_keygí_pubexp
(
˘x
, 
pubexp
) \

246 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, 
EVP_PKEY_OP_KEYGEN
, \

247 
EVP_PKEY_CTRL_RSA_KEYGEN_PUBEXP
, 0, 
pubexp
)

	)

249 
	#EVP_PKEY_CTX_£t_rß_mgf1_md
(
˘x
, 
md
) \

250 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, 
EVP_PKEY_OP_TYPE_SIG
, \

251 
EVP_PKEY_CTRL_RSA_MGF1_MD
, 0, (*)
md
)

	)

253 
	#EVP_PKEY_CTX_gë_rß_mgf1_md
(
˘x
, 
pmd
) \

254 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, 
EVP_PKEY_OP_TYPE_SIG
, \

255 
EVP_PKEY_CTRL_GET_RSA_MGF1_MD
, 0, (*)
pmd
)

	)

257 
	#EVP_PKEY_CTRL_RSA_PADDING
 (
EVP_PKEY_ALG_CTRL
 + 1)

	)

258 
	#EVP_PKEY_CTRL_RSA_PSS_SALTLEN
 (
EVP_PKEY_ALG_CTRL
 + 2)

	)

260 
	#EVP_PKEY_CTRL_RSA_KEYGEN_BITS
 (
EVP_PKEY_ALG_CTRL
 + 3)

	)

261 
	#EVP_PKEY_CTRL_RSA_KEYGEN_PUBEXP
 (
EVP_PKEY_ALG_CTRL
 + 4)

	)

262 
	#EVP_PKEY_CTRL_RSA_MGF1_MD
 (
EVP_PKEY_ALG_CTRL
 + 5)

	)

264 
	#EVP_PKEY_CTRL_GET_RSA_PADDING
 (
EVP_PKEY_ALG_CTRL
 + 6)

	)

265 
	#EVP_PKEY_CTRL_GET_RSA_PSS_SALTLEN
 (
EVP_PKEY_ALG_CTRL
 + 7)

	)

266 
	#EVP_PKEY_CTRL_GET_RSA_MGF1_MD
 (
EVP_PKEY_ALG_CTRL
 + 8)

	)

268 
	#RSA_PKCS1_PADDING
 1

	)

269 
	#RSA_SSLV23_PADDING
 2

	)

270 
	#RSA_NO_PADDING
 3

	)

271 
	#RSA_PKCS1_OAEP_PADDING
 4

	)

272 
	#RSA_X931_PADDING
 5

	)

274 
	#RSA_PKCS1_PSS_PADDING
 6

	)

276 
	#RSA_PKCS1_PADDING_SIZE
 11

	)

278 
	#RSA_£t_≠p_d©a
(
s
,
¨g
Ë
	`RSA_£t_ex_d©a
(s,0,¨g)

	)

279 
	#RSA_gë_≠p_d©a
(
s
Ë
	`RSA_gë_ex_d©a
(s,0)

	)

281 
RSA
 * 
RSA_√w
();

282 
RSA
 * 
RSA_√w_mëhod
(
ENGINE
 *
ígöe
);

283 
RSA_size
(c⁄° 
RSA
 *
rß
);

286 #i‚de‡
OPENSSL_NO_DEPRECATED


287 
RSA
 * 
RSA_gíî©e_key
(
bôs
, 
e
,

288 (*
ˇŒback
)(,,*),*
cb_¨g
);

292 
RSA_gíî©e_key_ex
(
RSA
 *
rß
, 
bôs
, 
BIGNUM
 *
e
, 
BN_GENCB
 *
cb
);

294 
RSA_check_key
(c⁄° 
RSA
 *);

296 
RSA_public_í¸y±
(
Êí
, c⁄° *
‰om
,

297 *
to
, 
RSA
 *
rß
,
∑ddög
);

298 
RSA_¥iv©e_í¸y±
(
Êí
, c⁄° *
‰om
,

299 *
to
, 
RSA
 *
rß
,
∑ddög
);

300 
RSA_public_de¸y±
(
Êí
, c⁄° *
‰om
,

301 *
to
, 
RSA
 *
rß
,
∑ddög
);

302 
RSA_¥iv©e_de¸y±
(
Êí
, c⁄° *
‰om
,

303 *
to
, 
RSA
 *
rß
,
∑ddög
);

304 
RSA_‰ì
 (
RSA
 *
r
);

306 
RSA_up_ªf
(
RSA
 *
r
);

308 
RSA_Êags
(c⁄° 
RSA
 *
r
);

310 
RSA_£t_deÁu…_mëhod
(c⁄° 
RSA_METHOD
 *
mëh
);

311 c⁄° 
RSA_METHOD
 *
RSA_gë_deÁu…_mëhod
();

312 c⁄° 
RSA_METHOD
 *
RSA_gë_mëhod
(c⁄° 
RSA
 *
rß
);

313 
RSA_£t_mëhod
(
RSA
 *
rß
, c⁄° 
RSA_METHOD
 *
mëh
);

316 
RSA_mem‹y_lock
(
RSA
 *
r
);

319 c⁄° 
RSA_METHOD
 *
RSA_PKCS1_SSLóy
();

321 c⁄° 
RSA_METHOD
 *
RSA_nuŒ_mëhod
();

323 
DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
RSA
, 
RSAPublicKey
)

324 
DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
RSA
, 
RSAPriv©eKey
)

326 
	srß_pss_∑øms_°


328 
X509_ALGOR
 *
hashAlg‹ôhm
;

329 
X509_ALGOR
 *
maskGíAlg‹ôhm
;

330 
ASN1_INTEGER
 *
ß…Lígth
;

331 
ASN1_INTEGER
 *
åaûîFõld
;

332 } 
	tRSA_PSS_PARAMS
;

334 
DECLARE_ASN1_FUNCTIONS
(
RSA_PSS_PARAMS
)

336 #i‚de‡
OPENSSL_NO_FP_API


337 
RSA_¥öt_Â
(
FILE
 *
Â
, c⁄° 
RSA
 *
r
,
off£t
);

340 #i‚de‡
OPENSSL_NO_BIO


341 
RSA_¥öt
(
BIO
 *
bp
, c⁄° 
RSA
 *
r
,
off£t
);

344 #i‚de‡
OPENSSL_NO_RC4


345 
i2d_RSA_NET
(c⁄° 
RSA
 *
a
, **
µ
,

346 (*
cb
)(*
buf
, 
Àn
, c⁄° *
¥om±
, 
vîify
),

347 
sgckey
);

348 
RSA
 *
d2i_RSA_NET
(RSA **
a
, c⁄° **
µ
, 
Àngth
,

349 (*
cb
)(*
buf
, 
Àn
, c⁄° *
¥om±
, 
vîify
),

350 
sgckey
);

352 
i2d_Nësˇ≥_RSA
(c⁄° 
RSA
 *
a
, **
µ
,

353 (*
cb
)(*
buf
, 
Àn
, c⁄° *
¥om±
,

354 
vîify
));

355 
RSA
 *
d2i_Nësˇ≥_RSA
(RSA **
a
, c⁄° **
µ
, 
Àngth
,

356 (*
cb
)(*
buf
, 
Àn
, c⁄° *
¥om±
,

357 
vîify
));

362 
RSA_sign
(
ty≥
, c⁄° *
m
, 
m_Àngth
,

363 *
sigªt
, *
sigÀn
, 
RSA
 *
rß
);

364 
RSA_vîify
(
ty≥
, c⁄° *
m
, 
m_Àngth
,

365 c⁄° *
sigbuf
, 
sigÀn
, 
RSA
 *
rß
);

369 
RSA_sign_ASN1_OCTET_STRING
(
ty≥
,

370 c⁄° *
m
, 
m_Àngth
,

371 *
sigªt
, *
sigÀn
, 
RSA
 *
rß
);

372 
RSA_vîify_ASN1_OCTET_STRING
(
ty≥
,

373 c⁄° *
m
, 
m_Àngth
,

374 *
sigbuf
, 
sigÀn
, 
RSA
 *
rß
);

376 
RSA_blödög_⁄
(
RSA
 *
rß
, 
BN_CTX
 *
˘x
);

377 
RSA_blödög_off
(
RSA
 *
rß
);

378 
BN_BLINDING
 *
RSA_£tup_blödög
(
RSA
 *
rß
, 
BN_CTX
 *
˘x
);

380 
RSA_∑ddög_add_PKCS1_ty≥_1
(*
to
,
éí
,

381 c⁄° *
f
,
Ê
);

382 
RSA_∑ddög_check_PKCS1_ty≥_1
(*
to
,
éí
,

383 c⁄° *
f
,
Ê
,
rß_Àn
);

384 
RSA_∑ddög_add_PKCS1_ty≥_2
(*
to
,
éí
,

385 c⁄° *
f
,
Ê
);

386 
RSA_∑ddög_check_PKCS1_ty≥_2
(*
to
,
éí
,

387 c⁄° *
f
,
Ê
,
rß_Àn
);

388 
PKCS1_MGF1
(*
mask
, 
Àn
,

389 c⁄° *
£ed
, 
£edÀn
, c⁄° 
EVP_MD
 *
dg°
);

390 
RSA_∑ddög_add_PKCS1_OAEP
(*
to
,
éí
,

391 c⁄° *
f
,
Ê
,

392 c⁄° *
p
,
∂
);

393 
RSA_∑ddög_check_PKCS1_OAEP
(*
to
,
éí
,

394 c⁄° *
f
,
Ê
,
rß_Àn
,

395 c⁄° *
p
,
∂
);

396 
RSA_∑ddög_add_SSLv23
(*
to
,
éí
,

397 c⁄° *
f
,
Ê
);

398 
RSA_∑ddög_check_SSLv23
(*
to
,
éí
,

399 c⁄° *
f
,
Ê
,
rß_Àn
);

400 
RSA_∑ddög_add_n⁄e
(*
to
,
éí
,

401 c⁄° *
f
,
Ê
);

402 
RSA_∑ddög_check_n⁄e
(*
to
,
éí
,

403 c⁄° *
f
,
Ê
,
rß_Àn
);

404 
RSA_∑ddög_add_X931
(*
to
,
éí
,

405 c⁄° *
f
,
Ê
);

406 
RSA_∑ddög_check_X931
(*
to
,
éí
,

407 c⁄° *
f
,
Ê
,
rß_Àn
);

408 
RSA_X931_hash_id
(
nid
);

410 
RSA_vîify_PKCS1_PSS
(
RSA
 *
rß
, c⁄° *
mHash
,

411 c⁄° 
EVP_MD
 *
Hash
, c⁄° *
EM
, 
sLí
);

412 
RSA_∑ddög_add_PKCS1_PSS
(
RSA
 *
rß
, *
EM
,

413 c⁄° *
mHash
,

414 c⁄° 
EVP_MD
 *
Hash
, 
sLí
);

416 
RSA_vîify_PKCS1_PSS_mgf1
(
RSA
 *
rß
, c⁄° *
mHash
,

417 c⁄° 
EVP_MD
 *
Hash
, c⁄° EVP_MD *
mgf1Hash
,

418 c⁄° *
EM
, 
sLí
);

420 
RSA_∑ddög_add_PKCS1_PSS_mgf1
(
RSA
 *
rß
, *
EM
,

421 c⁄° *
mHash
,

422 c⁄° 
EVP_MD
 *
Hash
, c⁄° EVP_MD *
mgf1Hash
, 
sLí
);

424 
RSA_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

425 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

426 
RSA_£t_ex_d©a
(
RSA
 *
r
,
idx
,*
¨g
);

427 *
RSA_gë_ex_d©a
(c⁄° 
RSA
 *
r
, 
idx
);

429 
RSA
 *
RSAPublicKey_dup
(RSA *
rß
);

430 
RSA
 *
RSAPriv©eKey_dup
(RSA *
rß
);

438 
	#RSA_FLAG_FIPS_METHOD
 0x0400

	)

445 
	#RSA_FLAG_NON_FIPS_ALLOW
 0x0400

	)

449 
	#RSA_FLAG_CHECKED
 0x0800

	)

455 
ERR_lﬂd_RSA_°rögs
();

460 
	#RSA_F_CHECK_PADDING_MD
 140

	)

461 
	#RSA_F_DO_RSA_PRINT
 146

	)

462 
	#RSA_F_INT_RSA_VERIFY
 145

	)

463 
	#RSA_F_MEMORY_LOCK
 100

	)

464 
	#RSA_F_OLD_RSA_PRIV_DECODE
 147

	)

465 
	#RSA_F_PKEY_RSA_CTRL
 143

	)

466 
	#RSA_F_PKEY_RSA_CTRL_STR
 144

	)

467 
	#RSA_F_PKEY_RSA_SIGN
 142

	)

468 
	#RSA_F_PKEY_RSA_VERIFY
 154

	)

469 
	#RSA_F_PKEY_RSA_VERIFYRECOVER
 141

	)

470 
	#RSA_F_RSA_BUILTIN_KEYGEN
 129

	)

471 
	#RSA_F_RSA_CHECK_KEY
 123

	)

472 
	#RSA_F_RSA_EAY_PRIVATE_DECRYPT
 101

	)

473 
	#RSA_F_RSA_EAY_PRIVATE_ENCRYPT
 102

	)

474 
	#RSA_F_RSA_EAY_PUBLIC_DECRYPT
 103

	)

475 
	#RSA_F_RSA_EAY_PUBLIC_ENCRYPT
 104

	)

476 
	#RSA_F_RSA_GENERATE_KEY
 105

	)

477 
	#RSA_F_RSA_GENERATE_KEY_EX
 155

	)

478 
	#RSA_F_RSA_ITEM_VERIFY
 156

	)

479 
	#RSA_F_RSA_MEMORY_LOCK
 130

	)

480 
	#RSA_F_RSA_NEW_METHOD
 106

	)

481 
	#RSA_F_RSA_NULL
 124

	)

482 
	#RSA_F_RSA_NULL_MOD_EXP
 131

	)

483 
	#RSA_F_RSA_NULL_PRIVATE_DECRYPT
 132

	)

484 
	#RSA_F_RSA_NULL_PRIVATE_ENCRYPT
 133

	)

485 
	#RSA_F_RSA_NULL_PUBLIC_DECRYPT
 134

	)

486 
	#RSA_F_RSA_NULL_PUBLIC_ENCRYPT
 135

	)

487 
	#RSA_F_RSA_PADDING_ADD_NONE
 107

	)

488 
	#RSA_F_RSA_PADDING_ADD_PKCS1_OAEP
 121

	)

489 
	#RSA_F_RSA_PADDING_ADD_PKCS1_PSS
 125

	)

490 
	#RSA_F_RSA_PADDING_ADD_PKCS1_PSS_MGF1
 148

	)

491 
	#RSA_F_RSA_PADDING_ADD_PKCS1_TYPE_1
 108

	)

492 
	#RSA_F_RSA_PADDING_ADD_PKCS1_TYPE_2
 109

	)

493 
	#RSA_F_RSA_PADDING_ADD_SSLV23
 110

	)

494 
	#RSA_F_RSA_PADDING_ADD_X931
 127

	)

495 
	#RSA_F_RSA_PADDING_CHECK_NONE
 111

	)

496 
	#RSA_F_RSA_PADDING_CHECK_PKCS1_OAEP
 122

	)

497 
	#RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_1
 112

	)

498 
	#RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_2
 113

	)

499 
	#RSA_F_RSA_PADDING_CHECK_SSLV23
 114

	)

500 
	#RSA_F_RSA_PADDING_CHECK_X931
 128

	)

501 
	#RSA_F_RSA_PRINT
 115

	)

502 
	#RSA_F_RSA_PRINT_FP
 116

	)

503 
	#RSA_F_RSA_PRIVATE_DECRYPT
 150

	)

504 
	#RSA_F_RSA_PRIVATE_ENCRYPT
 151

	)

505 
	#RSA_F_RSA_PRIV_DECODE
 137

	)

506 
	#RSA_F_RSA_PRIV_ENCODE
 138

	)

507 
	#RSA_F_RSA_PUBLIC_DECRYPT
 152

	)

508 
	#RSA_F_RSA_PUBLIC_ENCRYPT
 153

	)

509 
	#RSA_F_RSA_PUB_DECODE
 139

	)

510 
	#RSA_F_RSA_SETUP_BLINDING
 136

	)

511 
	#RSA_F_RSA_SIGN
 117

	)

512 
	#RSA_F_RSA_SIGN_ASN1_OCTET_STRING
 118

	)

513 
	#RSA_F_RSA_VERIFY
 119

	)

514 
	#RSA_F_RSA_VERIFY_ASN1_OCTET_STRING
 120

	)

515 
	#RSA_F_RSA_VERIFY_PKCS1_PSS
 126

	)

516 
	#RSA_F_RSA_VERIFY_PKCS1_PSS_MGF1
 149

	)

519 
	#RSA_R_ALGORITHM_MISMATCH
 100

	)

520 
	#RSA_R_BAD_E_VALUE
 101

	)

521 
	#RSA_R_BAD_FIXED_HEADER_DECRYPT
 102

	)

522 
	#RSA_R_BAD_PAD_BYTE_COUNT
 103

	)

523 
	#RSA_R_BAD_SIGNATURE
 104

	)

524 
	#RSA_R_BLOCK_TYPE_IS_NOT_01
 106

	)

525 
	#RSA_R_BLOCK_TYPE_IS_NOT_02
 107

	)

526 
	#RSA_R_DATA_GREATER_THAN_MOD_LEN
 108

	)

527 
	#RSA_R_DATA_TOO_LARGE
 109

	)

528 
	#RSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE
 110

	)

529 
	#RSA_R_DATA_TOO_LARGE_FOR_MODULUS
 132

	)

530 
	#RSA_R_DATA_TOO_SMALL
 111

	)

531 
	#RSA_R_DATA_TOO_SMALL_FOR_KEY_SIZE
 122

	)

532 
	#RSA_R_DIGEST_TOO_BIG_FOR_RSA_KEY
 112

	)

533 
	#RSA_R_DMP1_NOT_CONGRUENT_TO_D
 124

	)

534 
	#RSA_R_DMQ1_NOT_CONGRUENT_TO_D
 125

	)

535 
	#RSA_R_D_E_NOT_CONGRUENT_TO_1
 123

	)

536 
	#RSA_R_FIRST_OCTET_INVALID
 133

	)

537 
	#RSA_R_ILLEGAL_OR_UNSUPPORTED_PADDING_MODE
 144

	)

538 
	#RSA_R_INVALID_DIGEST_LENGTH
 143

	)

539 
	#RSA_R_INVALID_HEADER
 137

	)

540 
	#RSA_R_INVALID_KEYBITS
 145

	)

541 
	#RSA_R_INVALID_MESSAGE_LENGTH
 131

	)

542 
	#RSA_R_INVALID_MGF1_MD
 156

	)

543 
	#RSA_R_INVALID_PADDING
 138

	)

544 
	#RSA_R_INVALID_PADDING_MODE
 141

	)

545 
	#RSA_R_INVALID_PSS_PARAMETERS
 149

	)

546 
	#RSA_R_INVALID_PSS_SALTLEN
 146

	)

547 
	#RSA_R_INVALID_SALT_LENGTH
 150

	)

548 
	#RSA_R_INVALID_TRAILER
 139

	)

549 
	#RSA_R_INVALID_X931_DIGEST
 142

	)

550 
	#RSA_R_IQMP_NOT_INVERSE_OF_Q
 126

	)

551 
	#RSA_R_KEY_SIZE_TOO_SMALL
 120

	)

552 
	#RSA_R_LAST_OCTET_INVALID
 134

	)

553 
	#RSA_R_MODULUS_TOO_LARGE
 105

	)

554 
	#RSA_R_NON_FIPS_RSA_METHOD
 157

	)

555 
	#RSA_R_NO_PUBLIC_EXPONENT
 140

	)

556 
	#RSA_R_NULL_BEFORE_BLOCK_MISSING
 113

	)

557 
	#RSA_R_N_DOES_NOT_EQUAL_P_Q
 127

	)

558 
	#RSA_R_OAEP_DECODING_ERROR
 121

	)

559 
	#RSA_R_OPERATION_NOT_ALLOWED_IN_FIPS_MODE
 158

	)

560 
	#RSA_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE
 148

	)

561 
	#RSA_R_PADDING_CHECK_FAILED
 114

	)

562 
	#RSA_R_PKCS_DECODING_ERROR
 159

	)

563 
	#RSA_R_P_NOT_PRIME
 128

	)

564 
	#RSA_R_Q_NOT_PRIME
 129

	)

565 
	#RSA_R_RSA_OPERATIONS_NOT_SUPPORTED
 130

	)

566 
	#RSA_R_SLEN_CHECK_FAILED
 136

	)

567 
	#RSA_R_SLEN_RECOVERY_FAILED
 135

	)

568 
	#RSA_R_SSLV3_ROLLBACK_ATTACK
 115

	)

569 
	#RSA_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD
 116

	)

570 
	#RSA_R_UNKNOWN_ALGORITHM_TYPE
 117

	)

571 
	#RSA_R_UNKNOWN_MASK_DIGEST
 151

	)

572 
	#RSA_R_UNKNOWN_PADDING_TYPE
 118

	)

573 
	#RSA_R_UNKNOWN_PSS_DIGEST
 152

	)

574 
	#RSA_R_UNSUPPORTED_MASK_ALGORITHM
 153

	)

575 
	#RSA_R_UNSUPPORTED_MASK_PARAMETER
 154

	)

576 
	#RSA_R_UNSUPPORTED_SIGNATURE_TYPE
 155

	)

577 
	#RSA_R_VALUE_MISSING
 147

	)

578 
	#RSA_R_WRONG_SIGNATURE_LENGTH
 119

	)

580 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/sha.h

59 #i‚de‡
HEADER_SHA_H


60 
	#HEADER_SHA_H


	)

62 
	~<°ddef.h
>

63 
	~<›ís¶/e_os2.h
>

64 
	~<°ddef.h
>

66 #ifde‡ 
__˝lu•lus


70 #i‡
deföed
(
OPENSSL_NO_SHA
Ë|| (deföed(
OPENSSL_NO_SHA0
Ë&& deföed(
OPENSSL_NO_SHA1
))

71 #îr‹ 
SHA
 
is
 
dißbÀd
.

74 #i‡
deföed
(
OPENSSL_FIPS
)

75 
	#FIPS_SHA_SIZE_T
 
size_t


	)

85 #i‡
deföed
(
__LP32__
)

86 
	#SHA_LONG
 

	)

87 #ñi‡
deföed
(
OPENSSL_SYS_CRAY
Ë|| deföed(
__ILP64__
)

88 
	#SHA_LONG
 

	)

89 
	#SHA_LONG_LOG2
 3

	)

91 
	#SHA_LONG
 

	)

94 
	#SHA_LBLOCK
 16

	)

95 
	#SHA_CBLOCK
 (
SHA_LBLOCK
*4Ë

	)

98 
	#SHA_LAST_BLOCK
 (
SHA_CBLOCK
-8)

	)

99 
	#SHA_DIGEST_LENGTH
 20

	)

101 
	sSHA°©e_°


103 
SHA_LONG
 
h0
,
h1
,
h2
,
h3
,
h4
;

104 
SHA_LONG
 
Nl
,
Nh
;

105 
SHA_LONG
 
d©a
[
SHA_LBLOCK
];

106 
num
;

107 } 
	tSHA_CTX
;

109 #i‚de‡
OPENSSL_NO_SHA0


110 #ifde‡
OPENSSL_FIPS


111 
¥iv©e_SHA_Inô
(
SHA_CTX
 *
c
);

113 
SHA_Inô
(
SHA_CTX
 *
c
);

114 
SHA_Upd©e
(
SHA_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

115 
SHA_FöÆ
(*
md
, 
SHA_CTX
 *
c
);

116 *
SHA
(c⁄° *
d
, 
size_t
 
n
, *
md
);

117 
SHA_Tønsf‹m
(
SHA_CTX
 *
c
, c⁄° *
d©a
);

119 #i‚de‡
OPENSSL_NO_SHA1


120 #ifde‡
OPENSSL_FIPS


121 
¥iv©e_SHA1_Inô
(
SHA_CTX
 *
c
);

123 
SHA1_Inô
(
SHA_CTX
 *
c
);

124 
SHA1_Upd©e
(
SHA_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

125 
SHA1_FöÆ
(*
md
, 
SHA_CTX
 *
c
);

126 *
SHA1
(c⁄° *
d
, 
size_t
 
n
, *
md
);

127 
SHA1_Tønsf‹m
(
SHA_CTX
 *
c
, c⁄° *
d©a
);

130 
	#SHA256_CBLOCK
 (
SHA_LBLOCK
*4Ë

	)

133 
	#SHA224_DIGEST_LENGTH
 28

	)

134 
	#SHA256_DIGEST_LENGTH
 32

	)

136 
	sSHA256°©e_°


138 
SHA_LONG
 
h
[8];

139 
SHA_LONG
 
Nl
,
Nh
;

140 
SHA_LONG
 
d©a
[
SHA_LBLOCK
];

141 
num
,
md_Àn
;

142 } 
	tSHA256_CTX
;

144 #i‚de‡
OPENSSL_NO_SHA256


145 #ifde‡
OPENSSL_FIPS


146 
¥iv©e_SHA224_Inô
(
SHA256_CTX
 *
c
);

147 
¥iv©e_SHA256_Inô
(
SHA256_CTX
 *
c
);

149 
SHA224_Inô
(
SHA256_CTX
 *
c
);

150 
SHA224_Upd©e
(
SHA256_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

151 
SHA224_FöÆ
(*
md
, 
SHA256_CTX
 *
c
);

152 *
SHA224
(c⁄° *
d
, 
size_t
 
n
,*
md
);

153 
SHA256_Inô
(
SHA256_CTX
 *
c
);

154 
SHA256_Upd©e
(
SHA256_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

155 
SHA256_FöÆ
(*
md
, 
SHA256_CTX
 *
c
);

156 *
SHA256
(c⁄° *
d
, 
size_t
 
n
,*
md
);

157 
SHA256_Tønsf‹m
(
SHA256_CTX
 *
c
, c⁄° *
d©a
);

160 
	#SHA384_DIGEST_LENGTH
 48

	)

161 
	#SHA512_DIGEST_LENGTH
 64

	)

163 #i‚de‡
OPENSSL_NO_SHA512


169 
	#SHA512_CBLOCK
 (
SHA_LBLOCK
*8Ë

	)

172 #i‡(
deföed
(
_WIN32
Ë|| deföed(
_WIN64
)Ë&& !deföed(
__MINGW32__
)

173 
	#SHA_LONG64
 
__öt64


	)

174 
	#U64
(
C
ËC##
UI64


	)

175 #ñi‡
deföed
(
__¨ch64__
)

176 
	#SHA_LONG64
 

	)

177 
	#U64
(
C
ËC##
UL


	)

179 
	#SHA_LONG64
 

	)

180 
	#U64
(
C
ËC##
ULL


	)

183 
	sSHA512°©e_°


185 
SHA_LONG64
 
h
[8];

186 
SHA_LONG64
 
Nl
,
Nh
;

188 
SHA_LONG64
 
d
[
SHA_LBLOCK
];

189 
p
[
SHA512_CBLOCK
];

190 } 
u
;

191 
num
,
md_Àn
;

192 } 
	tSHA512_CTX
;

195 #i‚de‡
OPENSSL_NO_SHA512


196 #ifde‡
OPENSSL_FIPS


197 
¥iv©e_SHA384_Inô
(
SHA512_CTX
 *
c
);

198 
¥iv©e_SHA512_Inô
(
SHA512_CTX
 *
c
);

200 
SHA384_Inô
(
SHA512_CTX
 *
c
);

201 
SHA384_Upd©e
(
SHA512_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

202 
SHA384_FöÆ
(*
md
, 
SHA512_CTX
 *
c
);

203 *
SHA384
(c⁄° *
d
, 
size_t
 
n
,*
md
);

204 
SHA512_Inô
(
SHA512_CTX
 *
c
);

205 
SHA512_Upd©e
(
SHA512_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

206 
SHA512_FöÆ
(*
md
, 
SHA512_CTX
 *
c
);

207 *
SHA512
(c⁄° *
d
, 
size_t
 
n
,*
md
);

208 
SHA512_Tønsf‹m
(
SHA512_CTX
 *
c
, c⁄° *
d©a
);

211 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/x509_vfy.h

59 #i‚de‡
HEADER_X509_H


60 
	~<›ís¶/x509.h
>

65 #i‚de‡
HEADER_X509_VFY_H


66 
	#HEADER_X509_VFY_H


	)

68 
	~<›ís¶/›ís¶c⁄f.h
>

69 #i‚de‡
OPENSSL_NO_LHASH


70 
	~<›ís¶/lhash.h
>

72 
	~<›ís¶/bio.h
>

73 
	~<›ís¶/¸y±o.h
>

74 
	~<›ís¶/symhacks.h
>

76 #ifde‡ 
__˝lu•lus


82 
	sx509_hash_dú_°


84 
num_dús
;

85 **
dús
;

86 *
dús_ty≥
;

87 
num_dús_Ælo˚d
;

88 } 
	tX509_HASH_DIR_CTX
;

91 
	sx509_fûe_°


93 
	gnum_∑ths
;

94 
	gnum_Ælo˚d
;

95 **
	g∑ths
;

96 *
	g∑th_ty≥
;

97 } 
	tX509_CERT_FILE_CTX
;

117 
	#X509_LU_RETRY
 -1

	)

118 
	#X509_LU_FAIL
 0

	)

119 
	#X509_LU_X509
 1

	)

120 
	#X509_LU_CRL
 2

	)

121 
	#X509_LU_PKEY
 3

	)

123 
	sx509_obje˘_°


126 
	gty≥
;

128 *
	g±r
;

129 
X509
 *
	gx509
;

130 
X509_CRL
 *
	g¸l
;

131 
EVP_PKEY
 *
	gpkey
;

132 } 
	gd©a
;

133 } 
	tX509_OBJECT
;

135 
x509_lookup_°
 
	tX509_LOOKUP
;

137 
DECLARE_STACK_OF
(
X509_LOOKUP
)

138 
DECLARE_STACK_OF
(
X509_OBJECT
)

141 
	sx509_lookup_mëhod_°


143 c⁄° *
	g«me
;

144 (*
	g√w_ôem
)(
X509_LOOKUP
 *
	g˘x
);

145 (*
	g‰ì
)(
X509_LOOKUP
 *
	g˘x
);

146 (*
	göô
)(
X509_LOOKUP
 *
	g˘x
);

147 (*
	gshutdown
)(
X509_LOOKUP
 *
	g˘x
);

148 (*
	g˘æ
)(
X509_LOOKUP
 *
	g˘x
,
	gcmd
,c⁄° *
	g¨gc
,
	g¨gl
,

149 **
	gªt
);

150 (*
	ggë_by_subje˘
)(
X509_LOOKUP
 *
	g˘x
,
	gty≥
,
X509_NAME
 *
	g«me
,

151 
X509_OBJECT
 *
	gªt
);

152 (*
	ggë_by_issuî_£rül
)(
X509_LOOKUP
 *
	g˘x
,
	gty≥
,
X509_NAME
 *
	g«me
,

153 
ASN1_INTEGER
 *
	g£rül
,
X509_OBJECT
 *
	gªt
);

154 (*
	ggë_by_fögî¥öt
)(
X509_LOOKUP
 *
	g˘x
,
	gty≥
,

155 *
	gbyãs
,
	gÀn
,

156 
X509_OBJECT
 *
	gªt
);

157 (*
	ggë_by_Æüs
)(
X509_LOOKUP
 *
	g˘x
,
	gty≥
,*
	g°r
,
	gÀn
,

158 
X509_OBJECT
 *
	gªt
);

159 } 
	tX509_LOOKUP_METHOD
;

166 
	sX509_VERIFY_PARAM_°


168 *
	g«me
;

169 
time_t
 
	gcheck_time
;

170 
	göh_Êags
;

171 
	gÊags
;

172 
	gpuΩo£
;

173 
	gåu°
;

174 
	gdïth
;

175 
STACK_OF
(
ASN1_OBJECT
Ë*
	gpﬁicõs
;

176 } 
	tX509_VERIFY_PARAM
;

178 
DECLARE_STACK_OF
(
X509_VERIFY_PARAM
)

183 
	sx509_°‹e_°


186 
	gˇche
;

187 
STACK_OF
(
X509_OBJECT
Ë*
	gobjs
;

190 
STACK_OF
(
X509_LOOKUP
Ë*
	ggë_˚π_mëhods
;

192 
X509_VERIFY_PARAM
 *
	g∑øm
;

195 (*
	gvîify
)(
X509_STORE_CTX
 *
	g˘x
);

196 (*
	gvîify_cb
)(
	gok
,
X509_STORE_CTX
 *
	g˘x
);

197 (*
	ggë_issuî
)(
X509
 **
	gissuî
, 
X509_STORE_CTX
 *
	g˘x
, X509 *
	gx
);

198 (*
	gcheck_issued
)(
X509_STORE_CTX
 *
	g˘x
, 
X509
 *
	gx
, X509 *
	gissuî
);

199 (*
	gcheck_ªvoˇti⁄
)(
X509_STORE_CTX
 *
	g˘x
);

200 (*
	ggë_¸l
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_CRL
 **
	g¸l
, 
X509
 *
	gx
);

201 (*
	gcheck_¸l
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_CRL
 *
	g¸l
);

202 (*
	g˚π_¸l
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_CRL
 *
	g¸l
, 
X509
 *
	gx
);

203 
STACK_OF
(
X509
Ë* (*
	glookup_˚πs
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_NAME
 *
	gnm
);

204 
STACK_OF
(
X509_CRL
Ë* (*
	glookup_¸ls
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_NAME
 *
	gnm
);

205 (*
	g˛ónup
)(
X509_STORE_CTX
 *
	g˘x
);

207 
CRYPTO_EX_DATA
 
	gex_d©a
;

208 
	gª„ªn˚s
;

211 
X509_STORE_£t_dïth
(
X509_STORE
 *
°‹e
, 
dïth
);

213 
	#X509_STORE_£t_vîify_cb_func
(
˘x
,
func
Ë((˘x)->
vîify_cb
=(func))

	)

214 
	#X509_STORE_£t_vîify_func
(
˘x
,
func
Ë((˘x)->
vîify
=(func))

	)

217 
	sx509_lookup_°


219 
	göô
;

220 
	gskù
;

221 
X509_LOOKUP_METHOD
 *
	gmëhod
;

222 *
	gmëhod_d©a
;

224 
X509_STORE
 *
	g°‹e_˘x
;

230 
	sx509_°‹e_˘x_°


232 
X509_STORE
 *
	g˘x
;

233 
	gcuºít_mëhod
;

236 
X509
 *
	g˚π
;

237 
STACK_OF
(
X509
Ë*
	gu¡ru°ed
;

238 
STACK_OF
(
X509_CRL
Ë*
	g¸ls
;

240 
X509_VERIFY_PARAM
 *
	g∑øm
;

241 *
	gŸhî_˘x
;

244 (*
	gvîify
)(
X509_STORE_CTX
 *
	g˘x
);

245 (*
	gvîify_cb
)(
	gok
,
X509_STORE_CTX
 *
	g˘x
);

246 (*
	ggë_issuî
)(
X509
 **
	gissuî
, 
X509_STORE_CTX
 *
	g˘x
, X509 *
	gx
);

247 (*
	gcheck_issued
)(
X509_STORE_CTX
 *
	g˘x
, 
X509
 *
	gx
, X509 *
	gissuî
);

248 (*
	gcheck_ªvoˇti⁄
)(
X509_STORE_CTX
 *
	g˘x
);

249 (*
	ggë_¸l
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_CRL
 **
	g¸l
, 
X509
 *
	gx
);

250 (*
	gcheck_¸l
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_CRL
 *
	g¸l
);

251 (*
	g˚π_¸l
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_CRL
 *
	g¸l
, 
X509
 *
	gx
);

252 (*
	gcheck_pﬁicy
)(
X509_STORE_CTX
 *
	g˘x
);

253 
STACK_OF
(
X509
Ë* (*
	glookup_˚πs
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_NAME
 *
	gnm
);

254 
STACK_OF
(
X509_CRL
Ë* (*
	glookup_¸ls
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_NAME
 *
	gnm
);

255 (*
	g˛ónup
)(
X509_STORE_CTX
 *
	g˘x
);

258 
	gvÆid
;

259 
	gœ°_u¡ru°ed
;

260 
STACK_OF
(
X509
Ë*
	gchaö
;

261 
X509_POLICY_TREE
 *
	gåì
;

263 
	gex∂icô_pﬁicy
;

266 
	gîr‹_dïth
;

267 
	gîr‹
;

268 
X509
 *
	gcuºít_˚π
;

269 
X509
 *
	gcuºít_issuî
;

270 
X509_CRL
 *
	gcuºít_¸l
;

272 
	gcuºít_¸l_sc‹e
;

273 
	gcuºít_ªas⁄s
;

275 
X509_STORE_CTX
 *
	g∑ª¡
;

277 
CRYPTO_EX_DATA
 
	gex_d©a
;

280 
X509_STORE_CTX_£t_dïth
(
X509_STORE_CTX
 *
˘x
, 
dïth
);

282 
	#X509_STORE_CTX_£t_≠p_d©a
(
˘x
,
d©a
) \

283 
	`X509_STORE_CTX_£t_ex_d©a
(
˘x
,0,
d©a
)

	)

284 
	#X509_STORE_CTX_gë_≠p_d©a
(
˘x
) \

285 
	`X509_STORE_CTX_gë_ex_d©a
(
˘x
,0)

	)

287 
	#X509_L_FILE_LOAD
 1

	)

288 
	#X509_L_ADD_DIR
 2

	)

290 
	#X509_LOOKUP_lﬂd_fûe
(
x
,
«me
,
ty≥
) \

291 
	`X509_LOOKUP_˘æ
((
x
),
X509_L_FILE_LOAD
,(
«me
),()(
ty≥
),
NULL
)

	)

293 
	#X509_LOOKUP_add_dú
(
x
,
«me
,
ty≥
) \

294 
	`X509_LOOKUP_˘æ
((
x
),
X509_L_ADD_DIR
,(
«me
),()(
ty≥
),
NULL
)

	)

296 
	#X509_V_OK
 0

	)

299 
	#X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT
 2

	)

300 
	#X509_V_ERR_UNABLE_TO_GET_CRL
 3

	)

301 
	#X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE
 4

	)

302 
	#X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE
 5

	)

303 
	#X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY
 6

	)

304 
	#X509_V_ERR_CERT_SIGNATURE_FAILURE
 7

	)

305 
	#X509_V_ERR_CRL_SIGNATURE_FAILURE
 8

	)

306 
	#X509_V_ERR_CERT_NOT_YET_VALID
 9

	)

307 
	#X509_V_ERR_CERT_HAS_EXPIRED
 10

	)

308 
	#X509_V_ERR_CRL_NOT_YET_VALID
 11

	)

309 
	#X509_V_ERR_CRL_HAS_EXPIRED
 12

	)

310 
	#X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD
 13

	)

311 
	#X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD
 14

	)

312 
	#X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD
 15

	)

313 
	#X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD
 16

	)

314 
	#X509_V_ERR_OUT_OF_MEM
 17

	)

315 
	#X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT
 18

	)

316 
	#X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN
 19

	)

317 
	#X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY
 20

	)

318 
	#X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE
 21

	)

319 
	#X509_V_ERR_CERT_CHAIN_TOO_LONG
 22

	)

320 
	#X509_V_ERR_CERT_REVOKED
 23

	)

321 
	#X509_V_ERR_INVALID_CA
 24

	)

322 
	#X509_V_ERR_PATH_LENGTH_EXCEEDED
 25

	)

323 
	#X509_V_ERR_INVALID_PURPOSE
 26

	)

324 
	#X509_V_ERR_CERT_UNTRUSTED
 27

	)

325 
	#X509_V_ERR_CERT_REJECTED
 28

	)

327 
	#X509_V_ERR_SUBJECT_ISSUER_MISMATCH
 29

	)

328 
	#X509_V_ERR_AKID_SKID_MISMATCH
 30

	)

329 
	#X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH
 31

	)

330 
	#X509_V_ERR_KEYUSAGE_NO_CERTSIGN
 32

	)

332 
	#X509_V_ERR_UNABLE_TO_GET_CRL_ISSUER
 33

	)

333 
	#X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION
 34

	)

334 
	#X509_V_ERR_KEYUSAGE_NO_CRL_SIGN
 35

	)

335 
	#X509_V_ERR_UNHANDLED_CRITICAL_CRL_EXTENSION
 36

	)

336 
	#X509_V_ERR_INVALID_NON_CA
 37

	)

337 
	#X509_V_ERR_PROXY_PATH_LENGTH_EXCEEDED
 38

	)

338 
	#X509_V_ERR_KEYUSAGE_NO_DIGITAL_SIGNATURE
 39

	)

339 
	#X509_V_ERR_PROXY_CERTIFICATES_NOT_ALLOWED
 40

	)

341 
	#X509_V_ERR_INVALID_EXTENSION
 41

	)

342 
	#X509_V_ERR_INVALID_POLICY_EXTENSION
 42

	)

343 
	#X509_V_ERR_NO_EXPLICIT_POLICY
 43

	)

344 
	#X509_V_ERR_DIFFERENT_CRL_SCOPE
 44

	)

345 
	#X509_V_ERR_UNSUPPORTED_EXTENSION_FEATURE
 45

	)

347 
	#X509_V_ERR_UNNESTED_RESOURCE
 46

	)

349 
	#X509_V_ERR_PERMITTED_VIOLATION
 47

	)

350 
	#X509_V_ERR_EXCLUDED_VIOLATION
 48

	)

351 
	#X509_V_ERR_SUBTREE_MINMAX
 49

	)

352 
	#X509_V_ERR_UNSUPPORTED_CONSTRAINT_TYPE
 51

	)

353 
	#X509_V_ERR_UNSUPPORTED_CONSTRAINT_SYNTAX
 52

	)

354 
	#X509_V_ERR_UNSUPPORTED_NAME_SYNTAX
 53

	)

355 
	#X509_V_ERR_CRL_PATH_VALIDATION_ERROR
 54

	)

358 
	#X509_V_ERR_APPLICATION_VERIFICATION
 50

	)

363 
	#X509_V_FLAG_CB_ISSUER_CHECK
 0x1

	)

365 
	#X509_V_FLAG_USE_CHECK_TIME
 0x2

	)

367 
	#X509_V_FLAG_CRL_CHECK
 0x4

	)

369 
	#X509_V_FLAG_CRL_CHECK_ALL
 0x8

	)

371 
	#X509_V_FLAG_IGNORE_CRITICAL
 0x10

	)

373 
	#X509_V_FLAG_X509_STRICT
 0x20

	)

375 
	#X509_V_FLAG_ALLOW_PROXY_CERTS
 0x40

	)

377 
	#X509_V_FLAG_POLICY_CHECK
 0x80

	)

379 
	#X509_V_FLAG_EXPLICIT_POLICY
 0x100

	)

381 
	#X509_V_FLAG_INHIBIT_ANY
 0x200

	)

383 
	#X509_V_FLAG_INHIBIT_MAP
 0x400

	)

385 
	#X509_V_FLAG_NOTIFY_POLICY
 0x800

	)

387 
	#X509_V_FLAG_EXTENDED_CRL_SUPPORT
 0x1000

	)

389 
	#X509_V_FLAG_USE_DELTAS
 0x2000

	)

391 
	#X509_V_FLAG_CHECK_SS_SIGNATURE
 0x4000

	)

394 
	#X509_VP_FLAG_DEFAULT
 0x1

	)

395 
	#X509_VP_FLAG_OVERWRITE
 0x2

	)

396 
	#X509_VP_FLAG_RESET_FLAGS
 0x4

	)

397 
	#X509_VP_FLAG_LOCKED
 0x8

	)

398 
	#X509_VP_FLAG_ONCE
 0x10

	)

401 
	#X509_V_FLAG_POLICY_MASK
 (
X509_V_FLAG_POLICY_CHECK
 \

402 | 
X509_V_FLAG_EXPLICIT_POLICY
 \

403 | 
X509_V_FLAG_INHIBIT_ANY
 \

404 | 
X509_V_FLAG_INHIBIT_MAP
)

	)

406 
X509_OBJECT_idx_by_subje˘
(
STACK_OF
(
X509_OBJECT
Ë*
h
, 
ty≥
,

407 
X509_NAME
 *
«me
);

408 
X509_OBJECT
 *
X509_OBJECT_ªåõve_by_subje˘
(
STACK_OF
(X509_OBJECTË*
h
,
ty≥
,
X509_NAME
 *
«me
);

409 
X509_OBJECT
 *
X509_OBJECT_ªåõve_m©ch
(
STACK_OF
(X509_OBJECTË*
h
, X509_OBJECT *
x
);

410 
X509_OBJECT_up_ªf_cou¡
(
X509_OBJECT
 *
a
);

411 
X509_OBJECT_‰ì_c⁄ã¡s
(
X509_OBJECT
 *
a
);

412 
X509_STORE
 *
X509_STORE_√w
();

413 
X509_STORE_‰ì
(
X509_STORE
 *
v
);

415 
STACK_OF
(
X509
)* 
X509_STORE_gë1_˚πs
(
X509_STORE_CTX
 *
°
, 
X509_NAME
 *
nm
);

416 
STACK_OF
(
X509_CRL
)* 
X509_STORE_gë1_¸ls
(
X509_STORE_CTX
 *
°
, 
X509_NAME
 *
nm
);

417 
X509_STORE_£t_Êags
(
X509_STORE
 *
˘x
, 
Êags
);

418 
X509_STORE_£t_puΩo£
(
X509_STORE
 *
˘x
, 
puΩo£
);

419 
X509_STORE_£t_åu°
(
X509_STORE
 *
˘x
, 
åu°
);

420 
X509_STORE_£t1_∑øm
(
X509_STORE
 *
˘x
, 
X509_VERIFY_PARAM
 *
pm
);

422 
X509_STORE_£t_vîify_cb
(
X509_STORE
 *
˘x
,

423 (*
vîify_cb
)(, 
X509_STORE_CTX
 *));

425 
X509_STORE_CTX
 *
X509_STORE_CTX_√w
();

427 
X509_STORE_CTX_gë1_issuî
(
X509
 **
issuî
, 
X509_STORE_CTX
 *
˘x
, X509 *
x
);

429 
X509_STORE_CTX_‰ì
(
X509_STORE_CTX
 *
˘x
);

430 
X509_STORE_CTX_öô
(
X509_STORE_CTX
 *
˘x
, 
X509_STORE
 *
°‹e
,

431 
X509
 *
x509
, 
STACK_OF
(X509Ë*
chaö
);

432 
X509_STORE_CTX_åu°ed_°ack
(
X509_STORE_CTX
 *
˘x
, 
STACK_OF
(
X509
Ë*
sk
);

433 
X509_STORE_CTX_˛ónup
(
X509_STORE_CTX
 *
˘x
);

435 
X509_LOOKUP
 *
X509_STORE_add_lookup
(
X509_STORE
 *
v
, 
X509_LOOKUP_METHOD
 *
m
);

437 
X509_LOOKUP_METHOD
 *
X509_LOOKUP_hash_dú
();

438 
X509_LOOKUP_METHOD
 *
X509_LOOKUP_fûe
();

440 
X509_STORE_add_˚π
(
X509_STORE
 *
˘x
, 
X509
 *
x
);

441 
X509_STORE_add_¸l
(
X509_STORE
 *
˘x
, 
X509_CRL
 *
x
);

443 
X509_STORE_gë_by_subje˘
(
X509_STORE_CTX
 *
vs
,
ty≥
,
X509_NAME
 *
«me
,

444 
X509_OBJECT
 *
ªt
);

446 
X509_LOOKUP_˘æ
(
X509_LOOKUP
 *
˘x
, 
cmd
, c⁄° *
¨gc
,

447 
¨gl
, **
ªt
);

449 #i‚de‡
OPENSSL_NO_STDIO


450 
X509_lﬂd_˚π_fûe
(
X509_LOOKUP
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

451 
X509_lﬂd_¸l_fûe
(
X509_LOOKUP
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

452 
X509_lﬂd_˚π_¸l_fûe
(
X509_LOOKUP
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

456 
X509_LOOKUP
 *
X509_LOOKUP_√w
(
X509_LOOKUP_METHOD
 *
mëhod
);

457 
X509_LOOKUP_‰ì
(
X509_LOOKUP
 *
˘x
);

458 
X509_LOOKUP_öô
(
X509_LOOKUP
 *
˘x
);

459 
X509_LOOKUP_by_subje˘
(
X509_LOOKUP
 *
˘x
, 
ty≥
, 
X509_NAME
 *
«me
,

460 
X509_OBJECT
 *
ªt
);

461 
X509_LOOKUP_by_issuî_£rül
(
X509_LOOKUP
 *
˘x
, 
ty≥
, 
X509_NAME
 *
«me
,

462 
ASN1_INTEGER
 *
£rül
, 
X509_OBJECT
 *
ªt
);

463 
X509_LOOKUP_by_fögî¥öt
(
X509_LOOKUP
 *
˘x
, 
ty≥
,

464 *
byãs
, 
Àn
, 
X509_OBJECT
 *
ªt
);

465 
X509_LOOKUP_by_Æüs
(
X509_LOOKUP
 *
˘x
, 
ty≥
, *
°r
,

466 
Àn
, 
X509_OBJECT
 *
ªt
);

467 
X509_LOOKUP_shutdown
(
X509_LOOKUP
 *
˘x
);

469 #i‚de‡
OPENSSL_NO_STDIO


470 
X509_STORE_lﬂd_loˇti⁄s
 (
X509_STORE
 *
˘x
,

471 c⁄° *
fûe
, c⁄° *
dú
);

472 
X509_STORE_£t_deÁu…_∑ths
(
X509_STORE
 *
˘x
);

475 
X509_STORE_CTX_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

476 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

477 
X509_STORE_CTX_£t_ex_d©a
(
X509_STORE_CTX
 *
˘x
,
idx
,*
d©a
);

478 * 
X509_STORE_CTX_gë_ex_d©a
(
X509_STORE_CTX
 *
˘x
,
idx
);

479 
X509_STORE_CTX_gë_îr‹
(
X509_STORE_CTX
 *
˘x
);

480 
X509_STORE_CTX_£t_îr‹
(
X509_STORE_CTX
 *
˘x
,
s
);

481 
X509_STORE_CTX_gë_îr‹_dïth
(
X509_STORE_CTX
 *
˘x
);

482 
X509
 * 
X509_STORE_CTX_gë_cuºít_˚π
(
X509_STORE_CTX
 *
˘x
);

483 
X509
 *
X509_STORE_CTX_gë0_cuºít_issuî
(
X509_STORE_CTX
 *
˘x
);

484 
X509_CRL
 *
X509_STORE_CTX_gë0_cuºít_¸l
(
X509_STORE_CTX
 *
˘x
);

485 
X509_STORE_CTX
 *
X509_STORE_CTX_gë0_∑ª¡_˘x
(X509_STORE_CTX *
˘x
);

486 
STACK_OF
(
X509
Ë*
X509_STORE_CTX_gë_chaö
(
X509_STORE_CTX
 *
˘x
);

487 
STACK_OF
(
X509
Ë*
X509_STORE_CTX_gë1_chaö
(
X509_STORE_CTX
 *
˘x
);

488 
X509_STORE_CTX_£t_˚π
(
X509_STORE_CTX
 *
c
,
X509
 *
x
);

489 
X509_STORE_CTX_£t_chaö
(
X509_STORE_CTX
 *
c
,
STACK_OF
(
X509
Ë*
sk
);

490 
X509_STORE_CTX_£t0_¸ls
(
X509_STORE_CTX
 *
c
,
STACK_OF
(
X509_CRL
Ë*
sk
);

491 
X509_STORE_CTX_£t_puΩo£
(
X509_STORE_CTX
 *
˘x
, 
puΩo£
);

492 
X509_STORE_CTX_£t_åu°
(
X509_STORE_CTX
 *
˘x
, 
åu°
);

493 
X509_STORE_CTX_puΩo£_öhîô
(
X509_STORE_CTX
 *
˘x
, 
def_puΩo£
,

494 
puΩo£
, 
åu°
);

495 
X509_STORE_CTX_£t_Êags
(
X509_STORE_CTX
 *
˘x
, 
Êags
);

496 
X509_STORE_CTX_£t_time
(
X509_STORE_CTX
 *
˘x
, 
Êags
,

497 
time_t
 
t
);

498 
X509_STORE_CTX_£t_vîify_cb
(
X509_STORE_CTX
 *
˘x
,

499 (*
vîify_cb
)(, 
X509_STORE_CTX
 *));

501 
X509_POLICY_TREE
 *
X509_STORE_CTX_gë0_pﬁicy_åì
(
X509_STORE_CTX
 *
˘x
);

502 
X509_STORE_CTX_gë_ex∂icô_pﬁicy
(
X509_STORE_CTX
 *
˘x
);

504 
X509_VERIFY_PARAM
 *
X509_STORE_CTX_gë0_∑øm
(
X509_STORE_CTX
 *
˘x
);

505 
X509_STORE_CTX_£t0_∑øm
(
X509_STORE_CTX
 *
˘x
, 
X509_VERIFY_PARAM
 *
∑øm
);

506 
X509_STORE_CTX_£t_deÁu…
(
X509_STORE_CTX
 *
˘x
, c⁄° *
«me
);

510 
X509_VERIFY_PARAM
 *
X509_VERIFY_PARAM_√w
();

511 
X509_VERIFY_PARAM_‰ì
(
X509_VERIFY_PARAM
 *
∑øm
);

512 
X509_VERIFY_PARAM_öhîô
(
X509_VERIFY_PARAM
 *
to
,

513 c⁄° 
X509_VERIFY_PARAM
 *
‰om
);

514 
X509_VERIFY_PARAM_£t1
(
X509_VERIFY_PARAM
 *
to
,

515 c⁄° 
X509_VERIFY_PARAM
 *
‰om
);

516 
X509_VERIFY_PARAM_£t1_«me
(
X509_VERIFY_PARAM
 *
∑øm
, c⁄° *
«me
);

517 
X509_VERIFY_PARAM_£t_Êags
(
X509_VERIFY_PARAM
 *
∑øm
, 
Êags
);

518 
X509_VERIFY_PARAM_˛ór_Êags
(
X509_VERIFY_PARAM
 *
∑øm
,

519 
Êags
);

520 
X509_VERIFY_PARAM_gë_Êags
(
X509_VERIFY_PARAM
 *
∑øm
);

521 
X509_VERIFY_PARAM_£t_puΩo£
(
X509_VERIFY_PARAM
 *
∑øm
, 
puΩo£
);

522 
X509_VERIFY_PARAM_£t_åu°
(
X509_VERIFY_PARAM
 *
∑øm
, 
åu°
);

523 
X509_VERIFY_PARAM_£t_dïth
(
X509_VERIFY_PARAM
 *
∑øm
, 
dïth
);

524 
X509_VERIFY_PARAM_£t_time
(
X509_VERIFY_PARAM
 *
∑øm
, 
time_t
 
t
);

525 
X509_VERIFY_PARAM_add0_pﬁicy
(
X509_VERIFY_PARAM
 *
∑øm
,

526 
ASN1_OBJECT
 *
pﬁicy
);

527 
X509_VERIFY_PARAM_£t1_pﬁicõs
(
X509_VERIFY_PARAM
 *
∑øm
,

528 
STACK_OF
(
ASN1_OBJECT
Ë*
pﬁicõs
);

529 
X509_VERIFY_PARAM_gë_dïth
(c⁄° 
X509_VERIFY_PARAM
 *
∑øm
);

531 
X509_VERIFY_PARAM_add0_èbÀ
(
X509_VERIFY_PARAM
 *
∑øm
);

532 c⁄° 
X509_VERIFY_PARAM
 *
X509_VERIFY_PARAM_lookup
(c⁄° *
«me
);

533 
X509_VERIFY_PARAM_èbÀ_˛ónup
();

535 
X509_pﬁicy_check
(
X509_POLICY_TREE
 **
±ªe
, *
≥x∂icô_pﬁicy
,

536 
STACK_OF
(
X509
Ë*
˚πs
,

537 
STACK_OF
(
ASN1_OBJECT
Ë*
pﬁicy_oids
,

538 
Êags
);

540 
X509_pﬁicy_åì_‰ì
(
X509_POLICY_TREE
 *
åì
);

542 
X509_pﬁicy_åì_Àvñ_cou¡
(c⁄° 
X509_POLICY_TREE
 *
åì
);

543 
X509_POLICY_LEVEL
 *

544 
X509_pﬁicy_åì_gë0_Àvñ
(c⁄° 
X509_POLICY_TREE
 *
åì
, 
i
);

546 
STACK_OF
(
X509_POLICY_NODE
) *

547 
X509_pﬁicy_åì_gë0_pﬁicõs
(c⁄° 
X509_POLICY_TREE
 *
åì
);

549 
STACK_OF
(
X509_POLICY_NODE
) *

550 
X509_pﬁicy_åì_gë0_u£r_pﬁicõs
(c⁄° 
X509_POLICY_TREE
 *
åì
);

552 
X509_pﬁicy_Àvñ_node_cou¡
(
X509_POLICY_LEVEL
 *
Àvñ
);

554 
X509_POLICY_NODE
 *
X509_pﬁicy_Àvñ_gë0_node
(
X509_POLICY_LEVEL
 *
Àvñ
, 
i
);

556 c⁄° 
ASN1_OBJECT
 *
X509_pﬁicy_node_gë0_pﬁicy
(c⁄° 
X509_POLICY_NODE
 *
node
);

558 
STACK_OF
(
POLICYQUALINFO
) *

559 
X509_pﬁicy_node_gë0_quÆifõrs
(c⁄° 
X509_POLICY_NODE
 *
node
);

560 c⁄° 
X509_POLICY_NODE
 *

561 
X509_pﬁicy_node_gë0_∑ª¡
(c⁄° 
X509_POLICY_NODE
 *
node
);

563 #ifde‡ 
__˝lu•lus


	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

54 
	#__STDC_ISO_10646__
 201103L

	)

57 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/sys/cdefs.h

18 #i‚def 
_SYS_CDEFS_H


19 
	#_SYS_CDEFS_H
 1

	)

22 #i‚de‡
_FEATURES_H


23 
	~<„©uªs.h
>

29 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


34 #unde‡
__P


35 #unde‡
__PMT


37 #ifde‡
__GNUC__


41 #i‡
__GNUC_PREREQ
 (4, 6Ë&& !
deföed
 
_LIBC


42 
	#__LEAF
 , 
__Àaf__


	)

43 
	#__LEAF_ATTR
 
	`__©åibuã__
 ((
__Àaf__
))

	)

45 
	#__LEAF


	)

46 
	#__LEAF_ATTR


	)

54 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

55 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
))

	)

56 
	#__THROWNL
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

57 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
)Ë
	)
fct

59 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

60 
	#__THROW
 
	`throw
 ()

	)

61 
	#__THROWNL
 
	`throw
 ()

	)

62 
	#__NTH
(
f˘
Ë
__LEAF_ATTR
 f˘ 
	`throw
 ()

	)

64 
	#__THROW


	)

65 
	#__THROWNL


	)

66 
	#__NTH
(
f˘
Ë
	)
fct

72 
	#__ölöe


	)

74 
	#__THROW


	)

75 
	#__THROWNL


	)

76 
	#__NTH
(
f˘
Ë
	)
fct

82 
	#__P
(
¨gs
Ë
	)
args

83 
	#__PMT
(
¨gs
Ë
	)
args

88 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

89 
	#__STRING
(
x
Ë#x

	)

92 
	#__±r_t
 *

	)

93 
	#__l⁄g_doubÀ_t
 

	)

97 #ifdef 
__˝lu•lus


98 
	#__BEGIN_DECLS
 "C" {

	)

99 
	#__END_DECLS
 }

	)

101 
	#__BEGIN_DECLS


	)

102 
	#__END_DECLS


	)

111 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


112 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

113 
	#__END_NAMESPACE_STD
 }

	)

114 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

115 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

116 
	#__END_NAMESPACE_C99
 }

	)

117 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

122 
	#__BEGIN_NAMESPACE_STD


	)

123 
	#__END_NAMESPACE_STD


	)

124 
	#__USING_NAMESPACE_STD
(
«me
)

	)

125 
	#__BEGIN_NAMESPACE_C99


	)

126 
	#__END_NAMESPACE_C99


	)

127 
	#__USING_NAMESPACE_C99
(
«me
)

	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

134 
	#__f‹tify_fun˘i⁄
 
__exã∫_Æways_ölöe
 
__©åibuã_¨tificül__


	)

136 #i‡
__GNUC_PREREQ
 (4,3)

137 
	#__w¨nde˛
(
«me
, 
msg
) \

138 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

139 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

140 
	#__îr‹de˛
(
«me
, 
msg
) \

141 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

143 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

144 
	#__w¨«âr
(
msg
)

	)

145 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

149 #i‡
__GNUC_PREREQ
 (2,97)

151 
	#__Êex¨r
 []

	)

153 #ifde‡
__GNUC__


154 
	#__Êex¨r
 [0]

	)

156 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

157 
	#__Êex¨r
 []

	)

160 
	#__Êex¨r
 [1]

	)

176 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

178 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

179 #ifde‡
__˝lu•lus


180 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

181 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

182 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

183 
«me
 
¥Ÿo
 
__THROWNL
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

185 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

186 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

187 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

188 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROWNL


	)

190 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

191 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

204 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

205 
	#__©åibuã__
(
xyz
Ë

	)

211 #i‡
__GNUC_PREREQ
 (2,96)

212 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

214 
	#__©åibuã_mÆloc__


	)

219 #i‡
__GNUC_PREREQ
 (4, 3)

220 
	#__©åibuã_Æloc_size__
(
∑øms
) \

221 
	`__©åibuã__
 ((
__Æloc_size__
 
∑øms
))

	)

223 
	#__©åibuã_Æloc_size__
(
∑øms
Ë

	)

229 #i‡
__GNUC_PREREQ
 (2,96)

230 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

232 
	#__©åibuã_puª__


	)

236 #i‡
__GNUC_PREREQ
 (2,5)

237 
	#__©åibuã_c⁄°__
 
	`__©åibuã__
 ((
__c⁄°__
))

	)

239 
	#__©åibuã_c⁄°__


	)

245 #i‡
__GNUC_PREREQ
 (3,1)

246 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

247 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

249 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

250 
	#__©åibuã_noölöe__


	)

254 #i‡
__GNUC_PREREQ
 (3,2)

255 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

257 
	#__©åibuã_dïªˇãd__


	)

266 #i‡
__GNUC_PREREQ
 (2,8)

267 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

269 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

276 #i‡
__GNUC_PREREQ
 (2,97)

277 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

278 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

280 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

285 #i‡
__GNUC_PREREQ
 (3,3)

286 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

288 
	#__n⁄nuŒ
(
∑øms
)

	)

293 #i‡
__GNUC_PREREQ
 (3,4)

294 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

295 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

296 #i‡
__USE_FORTIFY_LEVEL
 > 0

297 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

300 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

302 #i‚de‡
__wur


303 
	#__wur


	)

307 #i‡
__GNUC_PREREQ
 (3,2)

308 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

310 
	#__Æways_ölöe
 
__ölöe


	)

315 #i‡
__GNUC_PREREQ
 (4,3)

316 
	#__©åibuã_¨tificül__
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

318 
	#__©åibuã_¨tificül__


	)

321 #ifde‡
__GNUC__


326 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__GNUC_GNU_INLINE__


327 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

328 
	#__exã∫_Æways_ölöe
 \

329 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

331 
	#__exã∫_ölöe
 
__ölöe


	)

332 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

335 
	#__exã∫_ölöe


	)

336 
	#__exã∫_Æways_ölöe


	)

341 #i‡
__GNUC_PREREQ
 (4,3)

342 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

343 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

350 #i‡!
__GNUC_PREREQ
 (2,8)

351 
	#__exãnsi⁄__


	)

355 #i‡!
__GNUC_PREREQ
 (2,92)

356 
	#__ª°ri˘


	)

362 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


363 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

365 #ifde‡
__GNUC__


366 
	#__ª°ri˘_¨r


	)

368 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

369 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

372 
	#__ª°ri˘_¨r


	)

377 #i‡
__GNUC__
 >= 3

378 
	#__glibc_u∆ikñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 0)

	)

379 
	#__glibc_likñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 1)

	)

381 
	#__glibc_u∆ikñy
(
c⁄d
Ë(c⁄d)

	)

382 
	#__glibc_likñy
(
c⁄d
Ë(c⁄d)

	)

385 
	~<bôs/w‹dsize.h
>

387 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


388 
	#__LDBL_COMPAT
 1

	)

389 #ifde‡
__REDIRECT


390 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

391 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

392 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

393 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

394 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

395 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

396 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

397 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

398 
	#__LDBL_REDIR_DECL
(
«me
) \

399 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

400 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

401 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

402 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

403 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

406 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


407 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

408 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

409 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

410 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

411 
	#__LDBL_REDIR_DECL
(
«me
)

	)

412 #ifde‡
__REDIRECT


413 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

414 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

415 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/sys/times.h

22 #i‚def 
_SYS_TIMES_H


23 
	#_SYS_TIMES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	#__√ed_˛ock_t


	)

28 
	~<time.h
>

31 
__BEGIN_DECLS


34 
	stms


36 
˛ock_t
 
	mtms_utime
;

37 
˛ock_t
 
	mtms_°ime
;

39 
˛ock_t
 
	mtms_cutime
;

40 
˛ock_t
 
	mtms_c°ime
;

48 
˛ock_t
 
	$times
 (
tms
 *
__buf„r
Ë
__THROW
;

50 
__END_DECLS


	@/usr/include/asm-generic/ioctls.h

1 #i‚de‡
__ASM_GENERIC_IOCTLS_H


2 
	#__ASM_GENERIC_IOCTLS_H


	)

4 
	~<löux/io˘l.h
>

19 
	#TCGETS
 0x5401

	)

20 
	#TCSETS
 0x5402

	)

21 
	#TCSETSW
 0x5403

	)

22 
	#TCSETSF
 0x5404

	)

23 
	#TCGETA
 0x5405

	)

24 
	#TCSETA
 0x5406

	)

25 
	#TCSETAW
 0x5407

	)

26 
	#TCSETAF
 0x5408

	)

27 
	#TCSBRK
 0x5409

	)

28 
	#TCXONC
 0x540A

	)

29 
	#TCFLSH
 0x540B

	)

30 
	#TIOCEXCL
 0x540C

	)

31 
	#TIOCNXCL
 0x540D

	)

32 
	#TIOCSCTTY
 0x540E

	)

33 
	#TIOCGPGRP
 0x540F

	)

34 
	#TIOCSPGRP
 0x5410

	)

35 
	#TIOCOUTQ
 0x5411

	)

36 
	#TIOCSTI
 0x5412

	)

37 
	#TIOCGWINSZ
 0x5413

	)

38 
	#TIOCSWINSZ
 0x5414

	)

39 
	#TIOCMGET
 0x5415

	)

40 
	#TIOCMBIS
 0x5416

	)

41 
	#TIOCMBIC
 0x5417

	)

42 
	#TIOCMSET
 0x5418

	)

43 
	#TIOCGSOFTCAR
 0x5419

	)

44 
	#TIOCSSOFTCAR
 0x541A

	)

45 
	#FIONREAD
 0x541B

	)

46 
	#TIOCINQ
 
FIONREAD


	)

47 
	#TIOCLINUX
 0x541C

	)

48 
	#TIOCCONS
 0x541D

	)

49 
	#TIOCGSERIAL
 0x541E

	)

50 
	#TIOCSSERIAL
 0x541F

	)

51 
	#TIOCPKT
 0x5420

	)

52 
	#FIONBIO
 0x5421

	)

53 
	#TIOCNOTTY
 0x5422

	)

54 
	#TIOCSETD
 0x5423

	)

55 
	#TIOCGETD
 0x5424

	)

56 
	#TCSBRKP
 0x5425

	)

57 
	#TIOCSBRK
 0x5427

	)

58 
	#TIOCCBRK
 0x5428

	)

59 
	#TIOCGSID
 0x5429

	)

60 
	#TCGETS2
 
	`_IOR
('T', 0x2A, 
ãrmios2
)

	)

61 
	#TCSETS2
 
	`_IOW
('T', 0x2B, 
ãrmios2
)

	)

62 
	#TCSETSW2
 
	`_IOW
('T', 0x2C, 
ãrmios2
)

	)

63 
	#TCSETSF2
 
	`_IOW
('T', 0x2D, 
ãrmios2
)

	)

64 
	#TIOCGRS485
 0x542E

	)

65 #i‚de‡
TIOCSRS485


66 
	#TIOCSRS485
 0x542F

	)

68 
	#TIOCGPTN
 
	`_IOR
('T', 0x30, Ë

	)

69 
	#TIOCSPTLCK
 
	`_IOW
('T', 0x31, Ë

	)

70 
	#TIOCGDEV
 
	`_IOR
('T', 0x32, Ë

	)

71 
	#TCGETX
 0x5432

	)

72 
	#TCSETX
 0x5433

	)

73 
	#TCSETXF
 0x5434

	)

74 
	#TCSETXW
 0x5435

	)

75 
	#TIOCSIG
 
	`_IOW
('T', 0x36, Ë

	)

76 
	#TIOCVHANGUP
 0x5437

	)

77 
	#TIOCGPKT
 
	`_IOR
('T', 0x38, Ë

	)

78 
	#TIOCGPTLCK
 
	`_IOR
('T', 0x39, Ë

	)

79 
	#TIOCGEXCL
 
	`_IOR
('T', 0x40, Ë

	)

81 
	#FIONCLEX
 0x5450

	)

82 
	#FIOCLEX
 0x5451

	)

83 
	#FIOASYNC
 0x5452

	)

84 
	#TIOCSERCONFIG
 0x5453

	)

85 
	#TIOCSERGWILD
 0x5454

	)

86 
	#TIOCSERSWILD
 0x5455

	)

87 
	#TIOCGLCKTRMIOS
 0x5456

	)

88 
	#TIOCSLCKTRMIOS
 0x5457

	)

89 
	#TIOCSERGSTRUCT
 0x5458

	)

90 
	#TIOCSERGETLSR
 0x5459

	)

91 
	#TIOCSERGETMULTI
 0x545A

	)

92 
	#TIOCSERSETMULTI
 0x545B

	)

94 
	#TIOCMIWAIT
 0x545C

	)

95 
	#TIOCGICOUNT
 0x545D

	)

101 #i‚de‡
FIOQSIZE


102 
	#FIOQSIZE
 0x5460

	)

106 
	#TIOCPKT_DATA
 0

	)

107 
	#TIOCPKT_FLUSHREAD
 1

	)

108 
	#TIOCPKT_FLUSHWRITE
 2

	)

109 
	#TIOCPKT_STOP
 4

	)

110 
	#TIOCPKT_START
 8

	)

111 
	#TIOCPKT_NOSTOP
 16

	)

112 
	#TIOCPKT_DOSTOP
 32

	)

113 
	#TIOCPKT_IOCTL
 64

	)

115 
	#TIOCSER_TEMT
 0x01

	)

	@/usr/include/asm-generic/socket.h

1 #i‚de‡
__ASM_GENERIC_SOCKET_H


2 
	#__ASM_GENERIC_SOCKET_H


	)

4 
	~<asm/sockios.h
>

7 
	#SOL_SOCKET
 1

	)

9 
	#SO_DEBUG
 1

	)

10 
	#SO_REUSEADDR
 2

	)

11 
	#SO_TYPE
 3

	)

12 
	#SO_ERROR
 4

	)

13 
	#SO_DONTROUTE
 5

	)

14 
	#SO_BROADCAST
 6

	)

15 
	#SO_SNDBUF
 7

	)

16 
	#SO_RCVBUF
 8

	)

17 
	#SO_SNDBUFFORCE
 32

	)

18 
	#SO_RCVBUFFORCE
 33

	)

19 
	#SO_KEEPALIVE
 9

	)

20 
	#SO_OOBINLINE
 10

	)

21 
	#SO_NO_CHECK
 11

	)

22 
	#SO_PRIORITY
 12

	)

23 
	#SO_LINGER
 13

	)

24 
	#SO_BSDCOMPAT
 14

	)

25 
	#SO_REUSEPORT
 15

	)

26 #i‚de‡
SO_PASSCRED


27 
	#SO_PASSCRED
 16

	)

28 
	#SO_PEERCRED
 17

	)

29 
	#SO_RCVLOWAT
 18

	)

30 
	#SO_SNDLOWAT
 19

	)

31 
	#SO_RCVTIMEO
 20

	)

32 
	#SO_SNDTIMEO
 21

	)

36 
	#SO_SECURITY_AUTHENTICATION
 22

	)

37 
	#SO_SECURITY_ENCRYPTION_TRANSPORT
 23

	)

38 
	#SO_SECURITY_ENCRYPTION_NETWORK
 24

	)

40 
	#SO_BINDTODEVICE
 25

	)

43 
	#SO_ATTACH_FILTER
 26

	)

44 
	#SO_DETACH_FILTER
 27

	)

45 
	#SO_GET_FILTER
 
SO_ATTACH_FILTER


	)

47 
	#SO_PEERNAME
 28

	)

48 
	#SO_TIMESTAMP
 29

	)

49 
	#SCM_TIMESTAMP
 
SO_TIMESTAMP


	)

51 
	#SO_ACCEPTCONN
 30

	)

53 
	#SO_PEERSEC
 31

	)

54 
	#SO_PASSSEC
 34

	)

55 
	#SO_TIMESTAMPNS
 35

	)

56 
	#SCM_TIMESTAMPNS
 
SO_TIMESTAMPNS


	)

58 
	#SO_MARK
 36

	)

60 
	#SO_TIMESTAMPING
 37

	)

61 
	#SCM_TIMESTAMPING
 
SO_TIMESTAMPING


	)

63 
	#SO_PROTOCOL
 38

	)

64 
	#SO_DOMAIN
 39

	)

66 
	#SO_RXQ_OVFL
 40

	)

68 
	#SO_WIFI_STATUS
 41

	)

69 
	#SCM_WIFI_STATUS
 
SO_WIFI_STATUS


	)

70 
	#SO_PEEK_OFF
 42

	)

73 
	#SO_NOFCS
 43

	)

75 
	#SO_LOCK_FILTER
 44

	)

77 
	#SO_SELECT_ERR_QUEUE
 45

	)

79 
	#SO_BUSY_POLL
 46

	)

81 
	#SO_MAX_PACING_RATE
 47

	)

83 
	#SO_BPF_EXTENSIONS
 48

	)

	@/usr/include/asm/errno.h

1 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/asm/param.h

1 
	~<asm-gíîic/∑øm.h
>

	@/usr/include/bits/libc-lock.h

19 #i‚de‡
_BITS_LIBC_LOCK_H


20 
	#_BITS_LIBC_LOCK_H
 1

	)

22 
	~<±hªad.h
>

23 
	#__√ed_NULL


	)

24 
	~<°ddef.h
>

28 #i‡
deföed
 
_LIBC
 || deföed 
_IO_MTSAFE_IO


29 #i‡(
deföed
 
NOT_IN_libc
 && !deföed 
IS_IN_lib±hªad
Ë|| !deföed 
_LIBC


30 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__libc_lock_ªcursive_t
;

32 °ru˘ { 
	mlock
; 
	m˙t
; *
	mow√r
; } 
	t__libc_lock_ªcursive_t
;

35 
__libc_lock_ªcursive_›aque__
 
	t__libc_lock_ªcursive_t
;

45 
	#__libc_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

46 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

50 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

51 #i‡
LLL_LOCK_INITIALIZER
 == 0

52 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

53 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

55 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

56 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

58 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

59 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

61 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

62 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

63 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

64 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

68 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

69 
	#__libc_lock_öô_ªcursive
(
NAME
) \

70 ((
NAME
Ë(
__libc_lock_ªcursive_t
Ë
_LIBC_LOCK_RECURSIVE_INITIALIZER
, 0)

	)

72 
	#__libc_lock_öô_ªcursive
(
NAME
) \

74 i‡(
__±hªad_muãx_öô
 !
NULL
) \

76 
±hªad_muãx©å_t
 
__©å
; \

77 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

78 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

79 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

80 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

82 } 0)

	)

86 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

87 
	#__libc_lock_föi_ªcursive
(
NAME
Ë((Ë0)

	)

89 
	#__libc_lock_föi_ªcursive
(
NAME
) \

90 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_de°roy
, (&(
NAME
).
muãx
), 0)

	)

94 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

95 
	#__libc_lock_lock_ªcursive
(
NAME
) \

97 *
£lf
 = 
THREAD_SELF
; \

98 i‡((
NAME
).
ow√r
 !
£lf
) \

100 
	`Œl_lock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

101 (
NAME
).
ow√r
 = 
£lf
; \

103 ++(
NAME
).
˙t
; \

104 } 0)

	)

106 
	#__libc_lock_lock_ªcursive
(
NAME
) \

107 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
).
muãx
), 0)

	)

111 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

112 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

114 
ªsu…
 = 0; \

115 *
£lf
 = 
THREAD_SELF
; \

116 i‡((
NAME
).
ow√r
 !
£lf
) \

118 i‡(
	`Œl_åylock
 ((
NAME
).
lock
) == 0) \

120 (
NAME
).
ow√r
 = 
£lf
; \

121 (
NAME
).
˙t
 = 1; \

124 
ªsu…
 = 
EBUSY
; \

127 ++(
NAME
).
˙t
; \

128 
ªsu…
; \

129 })

	)

131 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

132 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
).
muãx
), 0)

	)

136 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

138 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

140 i‡(--(
NAME
).
˙t
 == 0) \

142 (
NAME
).
ow√r
 = 
NULL
; \

143 
	`Œl_u∆ock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

145 } 0)

	)

147 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

148 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
).
muãx
), 0)

	)

155 
_±hªad_˛ónup_push_de„r
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

156 (*
routöe
Ë(*), *
¨g
);

157 
	`_±hªad_˛ónup_p›_ª°‹e
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

158 
execuã
);

161 
	#__libc_˛ónup_ªgi⁄_°¨t
(
DOIT
, 
FCT
, 
ARG
) \

162 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

163 
_avaû
; \

164 i‡(
DOIT
) { \

165 
_avaû
 = 
	`PTFAVAIL
 (
_±hªad_˛ónup_push_de„r
); \

166 i‡(
_avaû
) { \

167 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_push_de„r
, (&
_buf„r
, 
FCT
, \

168 
ARG
)); \

170 
_buf„r
.
__routöe
 = (
FCT
); \

171 
_buf„r
.
__¨g
 = (
ARG
); \

174 
_avaû
 = 0; \

175 }

	)

178 
	#__libc_˛ónup_ªgi⁄_íd
(
DOIT
) \

179 i‡(
_avaû
) { \

180 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_p›_ª°‹e
, (&
_buf„r
, 
DOIT
));\

181 } i‡(
DOIT
) \

182 
_buf„r
.
	`__routöe
 (_buf„r.
__¨g
); \

183 
	}

	)
}

188 #ifde‡
_LIBC


189 
	~"libc-lockP.h
"

	@/usr/include/gconv.h

22 #i‚de‡
_GCONV_H


23 
	#_GCONV_H
 1

	)

25 
	~<„©uªs.h
>

26 
	#__√ed_mb°©e_t


	)

27 
	#__√ed_wöt_t


	)

28 
	~<wch¨.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

59 
	m__GCONV_SWAP
 = 0x0004

64 
	g__gc⁄v_°ï
;

65 
	g__gc⁄v_°ï_d©a
;

66 
	g__gc⁄v_lﬂded_obje˘
;

67 
	g__gc⁄v_å™s_d©a
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

85 
	t__gc⁄v_°ï_d©a
 *, *,

89 
	tsize_t
 *);

92 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
) (*, const *,

97 (*
	t__gc⁄v_å™s_quîy_f˘
) (const *, const ***,

98 
	tsize_t
 *);

101 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

102 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

104 
	s__gc⁄v_å™s_d©a


107 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

108 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

109 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

110 *
__d©a
;

111 
__gc⁄v_å™s_d©a
 *
__√xt
;

116 
	s__gc⁄v_°ï


118 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

119 c⁄° *
__mod«me
;

121 
__cou¡î
;

123 *
__‰om_«me
;

124 *
__to_«me
;

126 
__gc⁄v_f˘
 
__f˘
;

127 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

128 
__gc⁄v_öô_f˘
 
__öô_f˘
;

129 
__gc⁄v_íd_f˘
 
__íd_f˘
;

133 
__mö_√eded_‰om
;

134 
__max_√eded_‰om
;

135 
__mö_√eded_to
;

136 
__max_√eded_to
;

139 
__°©eful
;

141 *
__d©a
;

146 
	s__gc⁄v_°ï_d©a


148 *
__outbuf
;

149 *
__outbu„nd
;

153 
__Êags
;

157 
__övoˇti⁄_cou¡î
;

161 
__öã∫Æ_u£
;

163 
__mb°©e_t
 *
__°©ï
;

164 
__mb°©e_t
 
__°©e
;

168 
__gc⁄v_å™s_d©a
 *
__å™s
;

173 
	s__gc⁄v_öfo


175 
size_t
 
__n°ïs
;

176 
__gc⁄v_°ï
 *
__°ïs
;

177 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

178 } *
	t__gc⁄v_t
;

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_chÊags


	)

11 
	#__°ub_Áâach


	)

12 
	#__°ub_fchÊags


	)

13 
	#__°ub_fdëach


	)

14 
	#__°ub_gây


	)

15 
	#__°ub_lchmod


	)

16 
	#__°ub_ªvoke


	)

17 
	#__°ub_£éogö


	)

18 
	#__°ub_sigªtu∫


	)

19 
	#__°ub_s°k


	)

20 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_Áâach


	)

13 
	#__°ub_fchÊags


	)

14 
	#__°ub_fdëach


	)

15 
	#__°ub_gëmsg


	)

16 
	#__°ub_gây


	)

17 
	#__°ub_lchmod


	)

18 
	#__°ub_putmsg


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-x32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_¸óã_moduÀ


	)

13 
	#__°ub_Áâach


	)

14 
	#__°ub_fchÊags


	)

15 
	#__°ub_fdëach


	)

16 
	#__°ub_gë_kî√l_syms


	)

17 
	#__°ub_gëmsg


	)

18 
	#__°ub_gây


	)

19 
	#__°ub_lchmod


	)

20 
	#__°ub_nfs£rv˘l


	)

21 
	#__°ub_putmsg


	)

22 
	#__°ub_quîy_moduÀ


	)

23 
	#__°ub_ªvoke


	)

24 
	#__°ub_£éogö


	)

25 
	#__°ub_sigªtu∫


	)

26 
	#__°ub_s°k


	)

27 
	#__°ub_°ty


	)

28 
	#__°ub_u£lib


	)

	@/usr/include/krb5/krb5.h

2 #i‚de‡
KRB5_KRB5_H_INCLUDED


3 
	#KRB5_KRB5_H_INCLUDED


	)

55 #i‚de‡
KRB5_GENERAL__


56 
	#KRB5_GENERAL__


	)

63 #i‚de‡
KRB5_DEPRECATED


64 
	#KRB5_DEPRECATED
 0

	)

67 #i‡
deföed
(
__MACH__
Ë&& deföed(
__APPLE__
)

68 
	~<T¨gëC⁄dôi⁄Æs.h
>

69 #i‡
TARGET_RT_MAC_CFM


74 #i‡
deföed
(
_MSDOS
Ë|| deföed(
_WIN32
)

75 
	~<wö-mac.h
>

78 #i‚de‡
KRB5_CONFIG__


79 #i‚de‡
KRB5_CALLCONV


80 
	#KRB5_CALLCONV


	)

81 
	#KRB5_CALLCONV_C


	)

85 #i‚de‡
KRB5_CALLCONV_WRONG


86 
	#KRB5_CALLCONV_WRONG


	)

89 #i‚de‡
THREEPARAMOPEN


90 
	#THREEPARAMOPEN
(
x
,
y
,
z
Ë
	`›í
(x,y,z)

	)

93 
	#KRB5_OLD_CRYPTO


	)

95 
	~<°dlib.h
>

96 
	~<limôs.h
>

97 
	~<°d¨g.h
>

99 #i‚de‡
KRB5INT_BEGIN_DECLS


100 #i‡
deföed
(
__˝lu•lus
)

101 
	#KRB5INT_BEGIN_DECLS
 "C" {

	)

102 
	#KRB5INT_END_DECLS
 }

	)

104 
	#KRB5INT_BEGIN_DECLS


	)

105 
	#KRB5INT_END_DECLS


	)

109 
KRB5INT_BEGIN_DECLS


111 #i‡
TARGET_OS_MAC


112 #¥agm®
∑ck
(
push
,2)

115 #i‡(
__GNUC__
 * 10000 + 
__GNUC_MINOR__
 * 100 + 
__GNUC_PATCHLEVEL__
) >= 30203

116 
	#KRB5_ATTR_DEPRECATED
 
	`__©åibuã__
((
dïªˇãd
))

	)

117 #ñi‡
deföed
 
_WIN32


118 
	#KRB5_ATTR_DEPRECATED
 
	`__de˛•ec
(
dïªˇãd
)

	)

120 
	#KRB5_ATTR_DEPRECATED


	)

124 
_¥ofûe_t
;

135 
	tkrb5_o˘ë
;

137 #i‡
INT_MAX
 == 0x7fff

138 
	tkrb5_öt16
;

139 
	tkrb5_ui_2
;

140 #ñi‡
SHRT_MAX
 == 0x7fff

141 
	tkrb5_öt16
;

142 
	tkrb5_ui_2
;

144 #îr‹ 
undeföed
 16 
bô
 
ty≥


147 #i‡
INT_MAX
 == 0x7fffffffL

148 
	tkrb5_öt32
;

149 
	tkrb5_ui_4
;

150 #ñi‡
LONG_MAX
 == 0x7fffffffL

151 
	tkrb5_öt32
;

152 
	tkrb5_ui_4
;

153 #ñi‡
SHRT_MAX
 == 0x7fffffffL

154 
	tkrb5_öt32
;

155 
	tkrb5_ui_4
;

157 #îr‹: 
undeföed
 32 
bô
 
ty≥


160 
	#VALID_INT_BITS
 
INT_MAX


	)

161 
	#VALID_UINT_BITS
 
UINT_MAX


	)

163 
	#KRB5_INT32_MAX
 2147483647

	)

166 
	#KRB5_INT32_MIN
 (-
KRB5_INT32_MAX
-1)

	)

168 
	#KRB5_INT16_MAX
 65535

	)

171 
	#KRB5_INT16_MIN
 (-
KRB5_INT16_MAX
-1)

	)

185 #i‚de‡
FALSE


186 
	#FALSE
 0

	)

188 #i‚de‡
TRUE


189 
	#TRUE
 1

	)

192 
	tkrb5_boﬁón
;

193 
	tkrb5_msgty≥
;

194 
	tkrb5_kvno
;

196 
krb5_öt32
 
	tkrb5_addπy≥
;

197 
krb5_öt32
 
	tkrb5_í˘y≥
;

198 
krb5_öt32
 
	tkrb5_cksumty≥
;

199 
krb5_öt32
 
	tkrb5_authd©©y≥
;

200 
krb5_öt32
 
	tkrb5_keyußge
;

201 
krb5_öt32
 
	tkrb5_¸y±Ÿy≥
;

203 
krb5_öt32
 
	tkrb5_¥óuthty≥
;

204 
krb5_öt32
 
	tkrb5_Êags
;

205 
krb5_öt32
 
	tkrb5_time°amp
;

206 
krb5_öt32
 
	tkrb5_îr‹_code
;

207 
krb5_öt32
 
	tkrb5_dñèt
;

209 
krb5_îr‹_code
 
	tkrb5_magic
;

211 
	s_krb5_d©a
 {

212 
krb5_magic
 
	mmagic
;

213 
	mÀngth
;

214 *
	md©a
;

215 } 
	tkrb5_d©a
;

218 
	s_krb5_o˘ë_d©a
 {

219 
krb5_magic
 
	mmagic
;

220 
	mÀngth
;

221 
krb5_o˘ë
 *
	md©a
;

222 } 
	tkrb5_o˘ë_d©a
;

225 
	#SALT_TYPE_AFS_LENGTH
 
UINT_MAX


	)

226 
	#SALT_TYPE_NO_LENGTH
 
UINT_MAX


	)

228 * 
	tkrb5_poöãr
;

229 c⁄° * 
	tkrb5_c⁄°_poöãr
;

231 
	skrb5_¥öcùÆ_d©a
 {

232 
krb5_magic
 
	mmagic
;

233 
krb5_d©a
 
	mªÆm
;

234 
krb5_d©a
 *
	md©a
;

235 
krb5_öt32
 
	mÀngth
;

236 
krb5_öt32
 
	mty≥
;

237 } 
	tkrb5_¥öcùÆ_d©a
;

239 
krb5_¥öcùÆ_d©a
 * 
	tkrb5_¥öcùÆ
;

245 
	#KRB5_NT_UNKNOWN
 0

	)

246 
	#KRB5_NT_PRINCIPAL
 1

	)

248 
	#KRB5_NT_SRV_INST
 2

	)

249 
	#KRB5_NT_SRV_HST
 3

	)

251 
	#KRB5_NT_SRV_XHST
 4

	)

252 
	#KRB5_NT_UID
 5

	)

253 
	#KRB5_NT_X500_PRINCIPAL
 6

	)

254 
	#KRB5_NT_SMTP_NAME
 7

	)

255 
	#KRB5_NT_ENTERPRISE_PRINCIPAL
 10

	)

256 
	#KRB5_NT_WELLKNOWN
 11

	)

257 
	#KRB5_WELLKNOWN_NAMESTR
 "WELLKNOWN"

	)

259 
	#KRB5_NT_MS_PRINCIPAL
 -128

	)

260 
	#KRB5_NT_MS_PRINCIPAL_AND_ID
 -129

	)

261 
	#KRB5_NT_ENT_PRINCIPAL_AND_ID
 -130

	)

264 c⁄° 
	tkrb5_¥öcùÆ_d©a
 *
	tkrb5_c⁄°_¥öcùÆ
;

266 
	#krb5_¥öc_ªÆm
(
c⁄ãxt
, 
¥öc
Ë(&’röc)->
ªÆm
)

	)

267 
	#krb5_¥öc_£t_ªÆm
(
c⁄ãxt
, 
¥öc
,
vÆue
Ë(’röc)->
ªÆm
 = *(vÆue))

	)

268 
	#krb5_¥öc_£t_ªÆm_Àngth
(
c⁄ãxt
, 
¥öc
,
vÆue
Ë’röc)->
ªÆm
.
Àngth
 = (vÆue)

	)

269 
	#krb5_¥öc_£t_ªÆm_d©a
(
c⁄ãxt
, 
¥öc
,
vÆue
Ë’röc)->
ªÆm
.
d©a
 = (vÆue)

	)

270 
	#krb5_¥öc_size
(
c⁄ãxt
, 
¥öc
Ë’röc)->
Àngth


	)

271 
	#krb5_¥öc_ty≥
(
c⁄ãxt
, 
¥öc
Ë’röc)->
ty≥


	)

272 
	#krb5_¥öc_«me
(
c⁄ãxt
, 
¥öc
Ë’röc)->
d©a


	)

273 
	#krb5_¥öc_comp⁄ít
(
c⁄ãxt
, 
¥öc
,
i
) \

274 (((
i
Ë< 
	`krb5_¥öc_size
(
c⁄ãxt
, 
¥öc
)) \

275 ? (
¥öc
)->
d©a
 + (
i
) \

276 : 
NULL
)

	)

279 
	#KRB5_REFERRAL_REALM
 ""

	)

292 
krb5_boﬁón
 
KRB5_CALLCONV


293 
krb5_is_ª„ºÆ_ªÆm
(c⁄° 
krb5_d©a
 *
r
);

302 c⁄° 
krb5_d©a
 *
KRB5_CALLCONV


303 
krb5_™⁄ymous_ªÆm
();

312 
krb5_c⁄°_¥öcùÆ
 
KRB5_CALLCONV


313 
krb5_™⁄ymous_¥öcùÆ
();

315 
	#KRB5_ANONYMOUS_REALMSTR
 "WELLKNOWN:ANONYMOUS"

	)

316 
	#KRB5_ANONYMOUS_PRINCSTR
 "ANONYMOUS"

	)

326 
	s_krb5_addªss
 {

327 
krb5_magic
 
	mmagic
;

328 
krb5_addπy≥
 
	maddπy≥
;

329 
	mÀngth
;

330 
krb5_o˘ë
 *
	mc⁄ã¡s
;

331 } 
	tkrb5_addªss
;

334 
	#ADDRTYPE_INET
 0x0002

	)

335 
	#ADDRTYPE_CHAOS
 0x0005

	)

336 
	#ADDRTYPE_XNS
 0x0006

	)

337 
	#ADDRTYPE_ISO
 0x0007

	)

338 
	#ADDRTYPE_DDP
 0x0010

	)

339 
	#ADDRTYPE_NETBIOS
 0x0014

	)

340 
	#ADDRTYPE_INET6
 0x0018

	)

342 
	#ADDRTYPE_ADDRPORT
 0x0100

	)

343 
	#ADDRTYPE_IPPORT
 0x0101

	)

346 
	#ADDRTYPE_IS_LOCAL
(
addπy≥
Ë◊ddπy≥ & 0x8000)

	)

353 
	g_krb5_c⁄ãxt
;

354 
_krb5_c⁄ãxt
 * 
	tkrb5_c⁄ãxt
;

356 
	g_krb5_auth_c⁄ãxt
;

357 
_krb5_auth_c⁄ãxt
 * 
	tkrb5_auth_c⁄ãxt
;

359 
	g_krb5_¸y±osy°em_íåy
;

366 
	s_krb5_keyblock
 {

367 
krb5_magic
 
	mmagic
;

368 
krb5_í˘y≥
 
	mí˘y≥
;

369 
	mÀngth
;

370 
krb5_o˘ë
 *
	mc⁄ã¡s
;

371 } 
	tkrb5_keyblock
;

373 
	gkrb5_key_°
;

382 
krb5_key_°
 *
	tkrb5_key
;

384 #ifde‡
KRB5_OLD_CRYPTO


385 
	s_krb5_í¸y±_block
 {

386 
krb5_magic
 
	mmagic
;

387 
krb5_í˘y≥
 
	m¸y±o_íåy
;

390 
krb5_keyblock
 *
	mkey
;

391 } 
	tkrb5_í¸y±_block
;

394 
	s_krb5_checksum
 {

395 
krb5_magic
 
	mmagic
;

396 
krb5_cksumty≥
 
	mchecksum_ty≥
;

397 
	mÀngth
;

398 
krb5_o˘ë
 *
	mc⁄ã¡s
;

399 } 
	tkrb5_checksum
;

401 
	s_krb5_íc_d©a
 {

402 
krb5_magic
 
	mmagic
;

403 
krb5_í˘y≥
 
	mí˘y≥
;

404 
krb5_kvno
 
	mkvno
;

405 
krb5_d©a
 
	mcùhîãxt
;

406 } 
	tkrb5_íc_d©a
;

418 
	s_krb5_¸y±o_iov
 {

419 
krb5_¸y±Ÿy≥
 
	mÊags
;

420 
krb5_d©a
 
	md©a
;

421 } 
	tkrb5_¸y±o_iov
;

424 
	#ENCTYPE_NULL
 0x0000

	)

425 
	#ENCTYPE_DES_CBC_CRC
 0x0001

	)

426 
	#ENCTYPE_DES_CBC_MD4
 0x0002

	)

427 
	#ENCTYPE_DES_CBC_MD5
 0x0003

	)

428 
	#ENCTYPE_DES_CBC_RAW
 0x0004

	)

429 
	#ENCTYPE_DES3_CBC_SHA
 0x0005

	)

430 
	#ENCTYPE_DES3_CBC_RAW
 0x0006

	)

431 
	#ENCTYPE_DES_HMAC_SHA1
 0x0008

	)

433 
	#ENCTYPE_DSA_SHA1_CMS
 0x0009

	)

434 
	#ENCTYPE_MD5_RSA_CMS
 0x000®

	)

435 
	#ENCTYPE_SHA1_RSA_CMS
 0x000b

	)

436 
	#ENCTYPE_RC2_CBC_ENV
 0x000¯

	)

437 
	#ENCTYPE_RSA_ENV
 0x000d

	)

438 
	#ENCTYPE_RSA_ES_OAEP_ENV
 0x000ê

	)

439 
	#ENCTYPE_DES3_CBC_ENV
 0x000‡

	)

441 
	#ENCTYPE_DES3_CBC_SHA1
 0x0010

	)

442 
	#ENCTYPE_AES128_CTS_HMAC_SHA1_96
 0x0011

	)

443 
	#ENCTYPE_AES256_CTS_HMAC_SHA1_96
 0x0012

	)

444 
	#ENCTYPE_ARCFOUR_HMAC
 0x0017

	)

445 
	#ENCTYPE_ARCFOUR_HMAC_EXP
 0x0018

	)

446 
	#ENCTYPE_CAMELLIA128_CTS_CMAC
 0x0019

	)

447 
	#ENCTYPE_CAMELLIA256_CTS_CMAC
 0x001®

	)

448 
	#ENCTYPE_UNKNOWN
 0x01ff

	)

450 
	#CKSUMTYPE_CRC32
 0x0001

	)

451 
	#CKSUMTYPE_RSA_MD4
 0x0002

	)

452 
	#CKSUMTYPE_RSA_MD4_DES
 0x0003

	)

453 
	#CKSUMTYPE_DESCBC
 0x0004

	)

456 
	#CKSUMTYPE_RSA_MD5
 0x0007

	)

457 
	#CKSUMTYPE_RSA_MD5_DES
 0x0008

	)

458 
	#CKSUMTYPE_NIST_SHA
 0x0009

	)

459 
	#CKSUMTYPE_HMAC_SHA1_DES3
 0x000c

	)

460 
	#CKSUMTYPE_HMAC_SHA1_96_AES128
 0x000‡

	)

462 
	#CKSUMTYPE_HMAC_SHA1_96_AES256
 0x0010

	)

464 
	#CKSUMTYPE_CMAC_CAMELLIA128
 0x0011

	)

465 
	#CKSUMTYPE_CMAC_CAMELLIA256
 0x0012

	)

466 
	#CKSUMTYPE_MD5_HMAC_ARCFOUR
 -137

	)

467 
	#CKSUMTYPE_HMAC_MD5_ARCFOUR
 -138

	)

479 
	mKRB5_C_RANDSOURCE_OLDAPI
 = 0,

480 
	mKRB5_C_RANDSOURCE_OSRAND
 = 1,

481 
	mKRB5_C_RANDSOURCE_TRUSTEDPARTY
 = 2,

487 
	mKRB5_C_RANDSOURCE_TIMING
 = 3,

488 
	mKRB5_C_RANDSOURCE_EXTERNAL_PROTOCOL
 = 4,

489 
	mKRB5_C_RANDSOURCE_MAX
 = 5

492 #i‚de‡
krb5_roundup


494 
	#krb5_roundup
(
x
, 
y
Ë((((xË+ (yË- 1)/(y))*(y))

	)

500 
	#krb5_x
(
±r
,
¨gs
Ë(’å)?((*’å)Ë¨gs):(
	`ab‹t
(),1))

	)

501 
	#krb5_xc
(
±r
,
¨gs
Ë(’å)?((*’å)Ë¨gs):(
	`ab‹t
(),(*)0))

	)

503 
	#krb5_x
(
±r
,
¨gs
Ë((*’å)Ë¨gs)

	)

504 
	#krb5_xc
(
±r
,
¨gs
Ë((*’å)Ë¨gs)

	)

530 
krb5_îr‹_code
 
KRB5_CALLCONV


531 
krb5_c_í¸y±
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_keyblock
 *
key
,

532 
krb5_keyußge
 
ußge
, c⁄° 
krb5_d©a
 *
cùhî_°©e
,

533 c⁄° 
krb5_d©a
 *
öput
, 
krb5_íc_d©a
 *
ouçut
);

559 
krb5_îr‹_code
 
KRB5_CALLCONV


560 
krb5_c_de¸y±
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_keyblock
 *
key
,

561 
krb5_keyußge
 
ußge
, c⁄° 
krb5_d©a
 *
cùhî_°©e
,

562 c⁄° 
krb5_íc_d©a
 *
öput
, 
krb5_d©a
 *
ouçut
);

577 
krb5_îr‹_code
 
KRB5_CALLCONV


578 
krb5_c_í¸y±_Àngth
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_í˘y≥
 
í˘y≥
,

579 
size_t
 
öpuéí
, size_à*
Àngth
);

590 
krb5_îr‹_code
 
KRB5_CALLCONV


591 
krb5_c_block_size
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_í˘y≥
 
í˘y≥
,

592 
size_t
 *
blocksize
);

604 
krb5_îr‹_code
 
KRB5_CALLCONV


605 
krb5_c_keyÀngths
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_í˘y≥
 
í˘y≥
,

606 
size_t
 *
keybyãs
, size_à*
keyÀngth
);

618 
krb5_îr‹_code
 
KRB5_CALLCONV


619 
krb5_c_öô_°©e
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_keyblock
 *
key
,

620 
krb5_keyußge
 
ußge
, 
krb5_d©a
 *
√w_°©e
);

631 
krb5_îr‹_code
 
KRB5_CALLCONV


632 
krb5_c_‰ì_°©e
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_keyblock
 *
key
,

633 
krb5_d©a
 *
°©e
);

650 
krb5_îr‹_code
 
KRB5_CALLCONV


651 
krb5_c_¥f
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_keyblock
 *
keyblock
,

652 
krb5_d©a
 *
öput
, krb5_d©®*
ouçut
);

663 
krb5_îr‹_code
 
KRB5_CALLCONV


664 
krb5_c_¥f_Àngth
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_í˘y≥
 
í˘y≥
, 
size_t
 *
Àn
);

684 
krb5_îr‹_code
 
KRB5_CALLCONV


685 
krb5_c_fx_cf2_sim∂e
(
krb5_c⁄ãxt
 
c⁄ãxt
,

686 
krb5_keyblock
 *
k1
, c⁄° *
≥µî1
,

687 
krb5_keyblock
 *
k2
, c⁄° *
≥µî2
,

688 
krb5_keyblock
 **
out
);

702 
krb5_îr‹_code
 
KRB5_CALLCONV


703 
krb5_c_make_øndom_key
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_í˘y≥
 
í˘y≥
,

704 
krb5_keyblock
 *
k5_øndom_key
);

724 
krb5_îr‹_code
 
KRB5_CALLCONV


725 
krb5_c_øndom_to_key
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_í˘y≥
 
í˘y≥
,

726 
krb5_d©a
 *
øndom_d©a
, 
krb5_keyblock
 *
k5_øndom_key
);

741 
krb5_îr‹_code
 
KRB5_CALLCONV


742 
krb5_c_øndom_add_íå›y
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
øndsour˚
,

743 c⁄° 
krb5_d©a
 *
d©a
);

757 
krb5_îr‹_code
 
KRB5_CALLCONV


758 
krb5_c_øndom_make_o˘ës
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_d©a
 *
d©a
);

774 
krb5_îr‹_code
 
KRB5_CALLCONV


775 
krb5_c_øndom_os_íå›y
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
°r⁄g
, *
suc˚ss
);

778 
krb5_îr‹_code
 
KRB5_CALLCONV


779 
krb5_c_øndom_£ed
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_d©a
 *
d©a
);

796 
krb5_îr‹_code
 
KRB5_CALLCONV


797 
krb5_c_°rög_to_key
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_í˘y≥
 
í˘y≥
,

798 c⁄° 
krb5_d©a
 *
°rög
, c⁄° krb5_d©®*
ß…
,

799 
krb5_keyblock
 *
key
);

818 
krb5_îr‹_code
 
KRB5_CALLCONV


819 
krb5_c_°rög_to_key_wôh_∑øms
(
krb5_c⁄ãxt
 
c⁄ãxt
,

820 
krb5_í˘y≥
 
í˘y≥
,

821 c⁄° 
krb5_d©a
 *
°rög
,

822 c⁄° 
krb5_d©a
 *
ß…
,

823 c⁄° 
krb5_d©a
 *
∑øms
,

824 
krb5_keyblock
 *
key
);

839 
krb5_îr‹_code
 
KRB5_CALLCONV


840 
krb5_c_í˘y≥_com∑ª
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_í˘y≥
 
e1
, krb5_í˘y≥ 
e2
,

841 
krb5_boﬁón
 *
simû¨
);

868 
krb5_îr‹_code
 
KRB5_CALLCONV


869 
krb5_c_make_checksum
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cksumty≥
 
cksumty≥
,

870 c⁄° 
krb5_keyblock
 *
key
, 
krb5_keyußge
 
ußge
,

871 c⁄° 
krb5_d©a
 *
öput
, 
krb5_checksum
 *
cksum
);

894 
krb5_îr‹_code
 
KRB5_CALLCONV


895 
krb5_c_vîify_checksum
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_keyblock
 *
key
,

896 
krb5_keyußge
 
ußge
, c⁄° 
krb5_d©a
 *
d©a
,

897 c⁄° 
krb5_checksum
 *
cksum
, 
krb5_boﬁón
 *
vÆid
);

908 
krb5_îr‹_code
 
KRB5_CALLCONV


909 
krb5_c_checksum_Àngth
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cksumty≥
 
cksumty≥
,

910 
size_t
 *
Àngth
);

925 
krb5_îr‹_code
 
KRB5_CALLCONV


926 
krb5_c_keyed_checksum_ty≥s
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_í˘y≥
 
í˘y≥
,

927 *
cou¡
, 
krb5_cksumty≥
 **
cksumty≥s
);

932 
	#KRB5_KEYUSAGE_AS_REQ_PA_ENC_TS
 1

	)

933 
	#KRB5_KEYUSAGE_KDC_REP_TICKET
 2

	)

934 
	#KRB5_KEYUSAGE_AS_REP_ENCPART
 3

	)

935 
	#KRB5_KEYUSAGE_TGS_REQ_AD_SESSKEY
 4

	)

936 
	#KRB5_KEYUSAGE_TGS_REQ_AD_SUBKEY
 5

	)

937 
	#KRB5_KEYUSAGE_TGS_REQ_AUTH_CKSUM
 6

	)

938 
	#KRB5_KEYUSAGE_TGS_REQ_AUTH
 7

	)

939 
	#KRB5_KEYUSAGE_TGS_REP_ENCPART_SESSKEY
 8

	)

940 
	#KRB5_KEYUSAGE_TGS_REP_ENCPART_SUBKEY
 9

	)

941 
	#KRB5_KEYUSAGE_AP_REQ_AUTH_CKSUM
 10

	)

942 
	#KRB5_KEYUSAGE_AP_REQ_AUTH
 11

	)

943 
	#KRB5_KEYUSAGE_AP_REP_ENCPART
 12

	)

944 
	#KRB5_KEYUSAGE_KRB_PRIV_ENCPART
 13

	)

945 
	#KRB5_KEYUSAGE_KRB_CRED_ENCPART
 14

	)

946 
	#KRB5_KEYUSAGE_KRB_SAFE_CKSUM
 15

	)

947 
	#KRB5_KEYUSAGE_APP_DATA_ENCRYPT
 16

	)

948 
	#KRB5_KEYUSAGE_APP_DATA_CKSUM
 17

	)

949 
	#KRB5_KEYUSAGE_KRB_ERROR_CKSUM
 18

	)

950 
	#KRB5_KEYUSAGE_AD_KDCISSUED_CKSUM
 19

	)

951 
	#KRB5_KEYUSAGE_AD_MTE
 20

	)

952 
	#KRB5_KEYUSAGE_AD_ITE
 21

	)

956 
	#KRB5_KEYUSAGE_GSS_TOK_MIC
 22

	)

957 
	#KRB5_KEYUSAGE_GSS_TOK_WRAP_INTEG
 23

	)

958 
	#KRB5_KEYUSAGE_GSS_TOK_WRAP_PRIV
 24

	)

961 
	#KRB5_KEYUSAGE_PA_SAM_CHALLENGE_CKSUM
 25

	)

963 
	#KRB5_KEYUSAGE_PA_SAM_CHALLENGE_TRACKID
 26

	)

965 
	#KRB5_KEYUSAGE_PA_SAM_RESPONSE
 27

	)

969 
	#KRB5_KEYUSAGE_PA_S4U_X509_USER_REQUEST
 26

	)

971 
	#KRB5_KEYUSAGE_PA_S4U_X509_USER_REPLY
 27

	)

974 
	#KRB5_KEYUSAGE_PA_REFERRAL
 26

	)

976 
	#KRB5_KEYUSAGE_AD_SIGNEDPATH
 -21

	)

977 
	#KRB5_KEYUSAGE_IAKERB_FINISHED
 42

	)

978 
	#KRB5_KEYUSAGE_PA_PKINIT_KX
 44

	)

979 
	#KRB5_KEYUSAGE_PA_OTP_REQUEST
 45

	)

981 
	#KRB5_KEYUSAGE_FAST_REQ_CHKSUM
 50

	)

982 
	#KRB5_KEYUSAGE_FAST_ENC
 51

	)

983 
	#KRB5_KEYUSAGE_FAST_REP
 52

	)

984 
	#KRB5_KEYUSAGE_FAST_FINISHED
 53

	)

985 
	#KRB5_KEYUSAGE_ENC_CHALLENGE_CLIENT
 54

	)

986 
	#KRB5_KEYUSAGE_ENC_CHALLENGE_KDC
 55

	)

987 
	#KRB5_KEYUSAGE_AS_REQ
 56

	)

997 
krb5_boﬁón
 
KRB5_CALLCONV


998 
krb5_c_vÆid_í˘y≥
(
krb5_í˘y≥
 
kty≥
);

1007 
krb5_boﬁón
 
KRB5_CALLCONV


1008 
krb5_c_vÆid_cksumty≥
(
krb5_cksumty≥
 
˘y≥
);

1018 
krb5_boﬁón
 
KRB5_CALLCONV


1019 
krb5_c_is_cﬁl_¥oof_cksum
(
krb5_cksumty≥
 
˘y≥
);

1028 
krb5_boﬁón
 
KRB5_CALLCONV


1029 
krb5_c_is_keyed_cksum
(
krb5_cksumty≥
 
˘y≥
);

1035 
	#KRB5_CRYPTO_TYPE_EMPTY
 0

	)

1036 
	#KRB5_CRYPTO_TYPE_HEADER
 1

	)

1037 
	#KRB5_CRYPTO_TYPE_DATA
 2

	)

1038 
	#KRB5_CRYPTO_TYPE_SIGN_ONLY
 3

	)

1039 
	#KRB5_CRYPTO_TYPE_PADDING
 4

	)

1040 
	#KRB5_CRYPTO_TYPE_TRAILER
 5

	)

1041 
	#KRB5_CRYPTO_TYPE_CHECKSUM
 6

	)

1042 
	#KRB5_CRYPTO_TYPE_STREAM
 7

	)

1068 
krb5_îr‹_code
 
KRB5_CALLCONV


1069 
krb5_c_make_checksum_iov
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cksumty≥
 
cksumty≥
,

1070 c⁄° 
krb5_keyblock
 *
key
, 
krb5_keyußge
 
ußge
,

1071 
krb5_¸y±o_iov
 *
d©a
, 
size_t
 
num_d©a
);

1095 
krb5_îr‹_code
 
KRB5_CALLCONV


1096 
krb5_c_vîify_checksum_iov
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cksumty≥
 
cksumty≥
,

1097 c⁄° 
krb5_keyblock
 *
key
, 
krb5_keyußge
 
ußge
,

1098 c⁄° 
krb5_¸y±o_iov
 *
d©a
, 
size_t
 
num_d©a
,

1099 
krb5_boﬁón
 *
vÆid
);

1131 
krb5_îr‹_code
 
KRB5_CALLCONV


1132 
krb5_c_í¸y±_iov
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_keyblock
 *
keyblock
,

1133 
krb5_keyußge
 
ußge
, c⁄° 
krb5_d©a
 *
cùhî_°©e
,

1134 
krb5_¸y±o_iov
 *
d©a
, 
size_t
 
num_d©a
);

1166 
krb5_îr‹_code
 
KRB5_CALLCONV


1167 
krb5_c_de¸y±_iov
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_keyblock
 *
keyblock
,

1168 
krb5_keyußge
 
ußge
, c⁄° 
krb5_d©a
 *
cùhî_°©e
,

1169 
krb5_¸y±o_iov
 *
d©a
, 
size_t
 
num_d©a
);

1181 
krb5_îr‹_code
 
KRB5_CALLCONV


1182 
krb5_c_¸y±o_Àngth
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_í˘y≥
 
í˘y≥
,

1183 
krb5_¸y±Ÿy≥
 
ty≥
, *
size
);

1200 
krb5_îr‹_code
 
KRB5_CALLCONV


1201 
krb5_c_¸y±o_Àngth_iov
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_í˘y≥
 
í˘y≥
,

1202 
krb5_¸y±o_iov
 *
d©a
, 
size_t
 
num_d©a
);

1217 
krb5_îr‹_code
 
KRB5_CALLCONV


1218 
krb5_c_∑ddög_Àngth
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_í˘y≥
 
í˘y≥
,

1219 
size_t
 
d©a_Àngth
, *
size
);

1233 
krb5_îr‹_code
 
KRB5_CALLCONV


1234 
krb5_k_¸óã_key
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_keyblock
 *
key_d©a
,

1235 
krb5_key
 *
out
);

1238 
KRB5_CALLCONV


1239 
krb5_k_ª„ªn˚_key
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_key
 
key
);

1242 
KRB5_CALLCONV


1243 
krb5_k_‰ì_key
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_key
 
key
);

1246 
krb5_îr‹_code
 
KRB5_CALLCONV


1247 
krb5_k_key_keyblock
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_key
 
key
,

1248 
krb5_keyblock
 **
key_d©a
);

1251 
krb5_í˘y≥
 
KRB5_CALLCONV


1252 
krb5_k_key_í˘y≥
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_key
 
key
);

1277 
krb5_îr‹_code
 
KRB5_CALLCONV


1278 
krb5_k_í¸y±
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_key
 
key
, 
krb5_keyußge
 
ußge
,

1279 c⁄° 
krb5_d©a
 *
cùhî_°©e
, c⁄° krb5_d©®*
öput
,

1280 
krb5_íc_d©a
 *
ouçut
);

1312 
krb5_îr‹_code
 
KRB5_CALLCONV


1313 
krb5_k_í¸y±_iov
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_key
 
key
, 
krb5_keyußge
 
ußge
,

1314 c⁄° 
krb5_d©a
 *
cùhî_°©e
, 
krb5_¸y±o_iov
 *
d©a
,

1315 
size_t
 
num_d©a
);

1341 
krb5_îr‹_code
 
KRB5_CALLCONV


1342 
krb5_k_de¸y±
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_key
 
key
, 
krb5_keyußge
 
ußge
,

1343 c⁄° 
krb5_d©a
 *
cùhî_°©e
, c⁄° 
krb5_íc_d©a
 *
öput
,

1344 
krb5_d©a
 *
ouçut
);

1376 
krb5_îr‹_code
 
KRB5_CALLCONV


1377 
krb5_k_de¸y±_iov
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_key
 
key
, 
krb5_keyußge
 
ußge
,

1378 c⁄° 
krb5_d©a
 *
cùhî_°©e
, 
krb5_¸y±o_iov
 *
d©a
,

1379 
size_t
 
num_d©a
);

1405 
krb5_îr‹_code
 
KRB5_CALLCONV


1406 
krb5_k_make_checksum
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cksumty≥
 
cksumty≥
,

1407 
krb5_key
 
key
, 
krb5_keyußge
 
ußge
, c⁄° 
krb5_d©a
 *
öput
,

1408 
krb5_checksum
 *
cksum
);

1431 
krb5_îr‹_code
 
KRB5_CALLCONV


1432 
krb5_k_make_checksum_iov
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cksumty≥
 
cksumty≥
,

1433 
krb5_key
 
key
, 
krb5_keyußge
 
ußge
,

1434 
krb5_¸y±o_iov
 *
d©a
, 
size_t
 
num_d©a
);

1457 
krb5_îr‹_code
 
KRB5_CALLCONV


1458 
krb5_k_vîify_checksum
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_key
 
key
, 
krb5_keyußge
 
ußge
,

1459 c⁄° 
krb5_d©a
 *
d©a
, c⁄° 
krb5_checksum
 *
cksum
,

1460 
krb5_boﬁón
 *
vÆid
);

1484 
krb5_îr‹_code
 
KRB5_CALLCONV


1485 
krb5_k_vîify_checksum_iov
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cksumty≥
 
cksumty≥
,

1486 
krb5_key
 
key
, 
krb5_keyußge
 
ußge
,

1487 c⁄° 
krb5_¸y±o_iov
 *
d©a
, 
size_t
 
num_d©a
,

1488 
krb5_boﬁón
 *
vÆid
);

1508 
krb5_îr‹_code
 
KRB5_CALLCONV


1509 
krb5_k_¥f
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_key
 
key
, 
krb5_d©a
 *
öput
, krb5_d©®*
ouçut
);

1511 #ifde‡
KRB5_OLD_CRYPTO


1517 
krb5_îr‹_code
 
KRB5_CALLCONV


1518 
krb5_í¸y±
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_c⁄°_poöãr
 
ö±r
,

1519 
krb5_poöãr
 
ouçå
, 
size_t
 
size
, 
krb5_í¸y±_block
 *
eblock
,

1520 
krb5_poöãr
 
ivec
);

1523 
krb5_îr‹_code
 
KRB5_CALLCONV


1524 
krb5_de¸y±
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_c⁄°_poöãr
 
ö±r
,

1525 
krb5_poöãr
 
ouçå
, 
size_t
 
size
, 
krb5_í¸y±_block
 *
eblock
,

1526 
krb5_poöãr
 
ivec
);

1529 
krb5_îr‹_code
 
KRB5_CALLCONV


1530 
krb5_¥o˚ss_key
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_í¸y±_block
 *
eblock
,

1531 c⁄° 
krb5_keyblock
 * 
key
);

1534 
krb5_îr‹_code
 
KRB5_CALLCONV


1535 
krb5_föish_key
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_í¸y±_block
 * 
eblock
);

1538 
krb5_îr‹_code
 
KRB5_CALLCONV


1539 
krb5_°rög_to_key
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_í¸y±_block
 *
eblock
,

1540 
krb5_keyblock
 * 
keyblock
, c⁄° 
krb5_d©a
 *
d©a
,

1541 c⁄° 
krb5_d©a
 *
ß…
);

1544 
krb5_îr‹_code
 
KRB5_CALLCONV


1545 
krb5_öô_øndom_key
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_í¸y±_block
 *
eblock
,

1546 c⁄° 
krb5_keyblock
 *
keyblock
, 
krb5_poöãr
 *
±r
);

1549 
krb5_îr‹_code
 
KRB5_CALLCONV


1550 
krb5_föish_øndom_key
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_í¸y±_block
 *
eblock
,

1551 
krb5_poöãr
 *
±r
);

1554 
krb5_îr‹_code
 
KRB5_CALLCONV


1555 
krb5_øndom_key
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_í¸y±_block
 *
eblock
,

1556 
krb5_poöãr
 
±r
, 
krb5_keyblock
 **
keyblock
);

1559 
krb5_í˘y≥
 
KRB5_CALLCONV


1560 
krb5_eblock_í˘y≥
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_í¸y±_block
 *
eblock
);

1563 
krb5_îr‹_code
 
KRB5_CALLCONV


1564 
krb5_u£_í˘y≥
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_í¸y±_block
 *
eblock
,

1565 
krb5_í˘y≥
 
í˘y≥
);

1568 
size_t
 
KRB5_CALLCONV


1569 
krb5_í¸y±_size
(
size_t
 
Àngth
, 
krb5_í˘y≥
 
¸y±o
);

1572 
size_t
 
KRB5_CALLCONV


1573 
krb5_checksum_size
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cksumty≥
 
˘y≥
);

1576 
krb5_îr‹_code
 
KRB5_CALLCONV


1577 
krb5_ˇlcuœã_checksum
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cksumty≥
 
˘y≥
,

1578 
krb5_c⁄°_poöãr
 
ö
, 
size_t
 
ö_Àngth
,

1579 
krb5_c⁄°_poöãr
 
£ed
, 
size_t
 
£ed_Àngth
,

1580 
krb5_checksum
 * 
outcksum
);

1583 
krb5_îr‹_code
 
KRB5_CALLCONV


1584 
krb5_vîify_checksum
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cksumty≥
 
˘y≥
,

1585 c⁄° 
krb5_checksum
 * 
cksum
, 
krb5_c⁄°_poöãr
 
ö
,

1586 
size_t
 
ö_Àngth
, 
krb5_c⁄°_poöãr
 
£ed
,

1587 
size_t
 
£ed_Àngth
);

1603 
	#KDC_OPT_FORWARDABLE
 0x40000000

	)

1604 
	#KDC_OPT_FORWARDED
 0x20000000

	)

1605 
	#KDC_OPT_PROXIABLE
 0x10000000

	)

1606 
	#KDC_OPT_PROXY
 0x08000000

	)

1607 
	#KDC_OPT_ALLOW_POSTDATE
 0x04000000

	)

1608 
	#KDC_OPT_POSTDATED
 0x02000000

	)

1610 
	#KDC_OPT_RENEWABLE
 0x00800000

	)

1616 
	#KDC_OPT_CNAME_IN_ADDL_TKT
 0x00020000

	)

1617 
	#KDC_OPT_CANONICALIZE
 0x00010000

	)

1618 
	#KDC_OPT_REQUEST_ANONYMOUS
 0x00008000

	)

1628 
	#KDC_OPT_DISABLE_TRANSITED_CHECK
 0x00000020

	)

1629 
	#KDC_OPT_RENEWABLE_OK
 0x00000010

	)

1630 
	#KDC_OPT_ENC_TKT_IN_SKEY
 0x00000008

	)

1632 
	#KDC_OPT_RENEW
 0x00000002

	)

1633 
	#KDC_OPT_VALIDATE
 0x00000001

	)

1642 
	#KDC_TKT_COMMON_MASK
 0x54800000

	)

1652 
	#AP_OPTS_RESERVED
 0x80000000

	)

1653 
	#AP_OPTS_USE_SESSION_KEY
 0x40000000

	)

1654 
	#AP_OPTS_MUTUAL_REQUIRED
 0x20000000

	)

1656 
	#AP_OPTS_ETYPE_NEGOTIATION
 0x00000002

	)

1657 
	#AP_OPTS_USE_SUBKEY
 0x00000001

	)

1690 
	#AP_OPTS_WIRE_MASK
 0xfffffff0

	)

1694 
	#AD_TYPE_RESERVED
 0x8000

	)

1695 
	#AD_TYPE_EXTERNAL
 0x4000

	)

1696 
	#AD_TYPE_REGISTERED
 0x2000

	)

1698 
	#AD_TYPE_FIELD_TYPE_MASK
 0x1fff

	)

1704 
	#TKT_FLG_FORWARDABLE
 0x40000000

	)

1705 
	#TKT_FLG_FORWARDED
 0x20000000

	)

1706 
	#TKT_FLG_PROXIABLE
 0x10000000

	)

1707 
	#TKT_FLG_PROXY
 0x08000000

	)

1708 
	#TKT_FLG_MAY_POSTDATE
 0x04000000

	)

1709 
	#TKT_FLG_POSTDATED
 0x02000000

	)

1710 
	#TKT_FLG_INVALID
 0x01000000

	)

1711 
	#TKT_FLG_RENEWABLE
 0x00800000

	)

1712 
	#TKT_FLG_INITIAL
 0x00400000

	)

1713 
	#TKT_FLG_PRE_AUTH
 0x00200000

	)

1714 
	#TKT_FLG_HW_AUTH
 0x00100000

	)

1715 
	#TKT_FLG_TRANSIT_POLICY_CHECKED
 0x00080000

	)

1716 
	#TKT_FLG_OK_AS_DELEGATE
 0x00040000

	)

1717 
	#TKT_FLG_ENC_PA_REP
 0x00010000

	)

1718 
	#TKT_FLG_ANONYMOUS
 0x00008000

	)

1736 
	#LR_TYPE_THIS_SERVER_ONLY
 0x8000

	)

1738 
	#LR_TYPE_INTERPRETATION_MASK
 0x7fff

	)

1741 
	#MSEC_DIRBIT
 0x8000

	)

1742 
	#MSEC_VAL_MASK
 0x7fff

	)

1753 
	#KRB5_PVNO
 5

	)

1757 
	#KRB5_AS_REQ
 ((
krb5_msgty≥
)10Ë

	)

1758 
	#KRB5_AS_REP
 ((
krb5_msgty≥
)11Ë

	)

1759 
	#KRB5_TGS_REQ
 ((
krb5_msgty≥
)12Ë

	)

1760 
	#KRB5_TGS_REP
 ((
krb5_msgty≥
)13Ë

	)

1761 
	#KRB5_AP_REQ
 ((
krb5_msgty≥
)14Ë

	)

1762 
	#KRB5_AP_REP
 ((
krb5_msgty≥
)15Ë

	)

1763 
	#KRB5_SAFE
 ((
krb5_msgty≥
)20Ë

	)

1764 
	#KRB5_PRIV
 ((
krb5_msgty≥
)21Ë

	)

1765 
	#KRB5_CRED
 ((
krb5_msgty≥
)22Ë

	)

1766 
	#KRB5_ERROR
 ((
krb5_msgty≥
)30Ë

	)

1769 
	#KRB5_LRQ_NONE
 0

	)

1770 
	#KRB5_LRQ_ALL_LAST_TGT
 1

	)

1771 
	#KRB5_LRQ_ONE_LAST_TGT
 (-1)

	)

1772 
	#KRB5_LRQ_ALL_LAST_INITIAL
 2

	)

1773 
	#KRB5_LRQ_ONE_LAST_INITIAL
 (-2)

	)

1774 
	#KRB5_LRQ_ALL_LAST_TGT_ISSUED
 3

	)

1775 
	#KRB5_LRQ_ONE_LAST_TGT_ISSUED
 (-3)

	)

1776 
	#KRB5_LRQ_ALL_LAST_RENEWAL
 4

	)

1777 
	#KRB5_LRQ_ONE_LAST_RENEWAL
 (-4)

	)

1778 
	#KRB5_LRQ_ALL_LAST_REQ
 5

	)

1779 
	#KRB5_LRQ_ONE_LAST_REQ
 (-5)

	)

1780 
	#KRB5_LRQ_ALL_PW_EXPTIME
 6

	)

1781 
	#KRB5_LRQ_ONE_PW_EXPTIME
 (-6)

	)

1782 
	#KRB5_LRQ_ALL_ACCT_EXPTIME
 7

	)

1783 
	#KRB5_LRQ_ONE_ACCT_EXPTIME
 (-7)

	)

1786 
	#KRB5_PADATA_NONE
 0

	)

1787 
	#KRB5_PADATA_AP_REQ
 1

	)

1788 
	#KRB5_PADATA_TGS_REQ
 
KRB5_PADATA_AP_REQ


	)

1789 
	#KRB5_PADATA_ENC_TIMESTAMP
 2

	)

1790 
	#KRB5_PADATA_PW_SALT
 3

	)

1792 
	#KRB5_PADATA_ENC_ENCKEY
 4

	)

1794 
	#KRB5_PADATA_ENC_UNIX_TIME
 5

	)

1795 
	#KRB5_PADATA_ENC_SANDIA_SECURID
 6

	)

1796 
	#KRB5_PADATA_SESAME
 7

	)

1797 
	#KRB5_PADATA_OSF_DCE
 8

	)

1798 
	#KRB5_CYBERSAFE_SECUREID
 9

	)

1799 
	#KRB5_PADATA_AFS3_SALT
 10

	)

1800 
	#KRB5_PADATA_ETYPE_INFO
 11

	)

1801 
	#KRB5_PADATA_SAM_CHALLENGE
 12

	)

1802 
	#KRB5_PADATA_SAM_RESPONSE
 13

	)

1803 
	#KRB5_PADATA_PK_AS_REQ_OLD
 14

	)

1804 
	#KRB5_PADATA_PK_AS_REP_OLD
 15

	)

1805 
	#KRB5_PADATA_PK_AS_REQ
 16

	)

1806 
	#KRB5_PADATA_PK_AS_REP
 17

	)

1807 
	#KRB5_PADATA_ETYPE_INFO2
 19

	)

1808 
	#KRB5_PADATA_USE_SPECIFIED_KVNO
 20

	)

1809 
	#KRB5_PADATA_SVR_REFERRAL_INFO
 20

	)

1810 
	#KRB5_PADATA_SAM_REDIRECT
 21

	)

1811 
	#KRB5_PADATA_GET_FROM_TYPED_DATA
 22

	)

1812 
	#KRB5_PADATA_REFERRAL
 25

	)

1813 
	#KRB5_PADATA_SAM_CHALLENGE_2
 30

	)

1814 
	#KRB5_PADATA_SAM_RESPONSE_2
 31

	)

1816 
	#KRB5_PADATA_PAC_REQUEST
 128

	)

1817 
	#KRB5_PADATA_FOR_USER
 129

	)

1818 
	#KRB5_PADATA_S4U_X509_USER
 130

	)

1819 
	#KRB5_PADATA_AS_CHECKSUM
 132

	)

1820 
	#KRB5_PADATA_FX_COOKIE
 133

	)

1821 
	#KRB5_PADATA_FX_FAST
 136

	)

1822 
	#KRB5_PADATA_FX_ERROR
 137

	)

1823 
	#KRB5_PADATA_ENCRYPTED_CHALLENGE
 138

	)

1824 
	#KRB5_PADATA_OTP_CHALLENGE
 141

	)

1825 
	#KRB5_PADATA_OTP_REQUEST
 142

	)

1826 
	#KRB5_PADATA_OTP_PIN_CHANGE
 144

	)

1827 
	#KRB5_PADATA_PKINIT_KX
 147

	)

1828 
	#KRB5_ENCPADATA_REQ_ENC_PA_REP
 149

	)

1830 
	#KRB5_SAM_USE_SAD_AS_KEY
 0x80000000

	)

1831 
	#KRB5_SAM_SEND_ENCRYPTED_SAD
 0x40000000

	)

1832 
	#KRB5_SAM_MUST_PK_ENCRYPT_SAD
 0x20000000

	)

1835 
	#KRB5_DOMAIN_X500_COMPRESS
 1

	)

1838 
	#KRB5_ALTAUTH_ATT_CHALLENGE_RESPONSE
 64

	)

1845 
	#KRB5_AUTHDATA_IF_RELEVANT
 1

	)

1846 
	#KRB5_AUTHDATA_KDC_ISSUED
 4

	)

1847 
	#KRB5_AUTHDATA_AND_OR
 5

	)

1848 
	#KRB5_AUTHDATA_MANDATORY_FOR_KDC
 8

	)

1849 
	#KRB5_AUTHDATA_INITIAL_VERIFIED_CAS
 9

	)

1850 
	#KRB5_AUTHDATA_OSF_DCE
 64

	)

1851 
	#KRB5_AUTHDATA_SESAME
 65

	)

1852 
	#KRB5_AUTHDATA_WIN2K_PAC
 128

	)

1853 
	#KRB5_AUTHDATA_ETYPE_NEGOTIATION
 129

	)

1854 
	#KRB5_AUTHDATA_SIGNTICKET
 512

	)

1855 
	#KRB5_AUTHDATA_FX_ARMOR
 71

	)

1859 
	#KRB5_KPASSWD_SUCCESS
 0

	)

1860 
	#KRB5_KPASSWD_MALFORMED
 1

	)

1861 
	#KRB5_KPASSWD_HARDERROR
 2

	)

1862 
	#KRB5_KPASSWD_AUTHERROR
 3

	)

1863 
	#KRB5_KPASSWD_SOFTERROR
 4

	)

1866 
	#KRB5_KPASSWD_ACCESSDENIED
 5

	)

1867 
	#KRB5_KPASSWD_BAD_VERSION
 6

	)

1869 
	#KRB5_KPASSWD_INITIAL_FLAG_NEEDED
 7

	)

1877 
	s_krb5_tickë_times
 {

1878 
krb5_time°amp
 
	mauthtime
;

1881 
krb5_time°amp
 
	m°¨âime
;

1882 
krb5_time°amp
 
	mídtime
;

1883 
krb5_time°amp
 
	mª√w_tûl
;

1884 } 
	tkrb5_tickë_times
;

1887 
	s_krb5_authd©a
 {

1888 
krb5_magic
 
	mmagic
;

1889 
krb5_authd©©y≥
 
	mad_ty≥
;

1890 
	mÀngth
;

1891 
krb5_o˘ë
 *
	mc⁄ã¡s
;

1892 } 
	tkrb5_authd©a
;

1895 
	s_krb5_å™sôed
 {

1896 
krb5_magic
 
	mmagic
;

1897 
krb5_o˘ë
 
	må_ty≥
;

1898 
krb5_d©a
 
	må_c⁄ã¡s
;

1899 } 
	tkrb5_å™sôed
;

1902 
	s_krb5_íc_tkt_∑π
 {

1903 
krb5_magic
 
	mmagic
;

1905 
krb5_Êags
 
	mÊags
;

1906 
krb5_keyblock
 *
	m£ssi⁄
;

1907 
krb5_¥öcùÆ
 
	m˛õ¡
;

1908 
krb5_å™sôed
 
	må™sôed
;

1909 
krb5_tickë_times
 
	mtimes
;

1910 
krb5_addªss
 **
	mˇddrs
;

1911 
krb5_authd©a
 **
	mauth‹iz©i⁄_d©a
;

1912 } 
	tkrb5_íc_tkt_∑π
;

1920 
	s_krb5_tickë
 {

1921 
krb5_magic
 
	mmagic
;

1923 
krb5_¥öcùÆ
 
	m£rvî
;

1924 
krb5_íc_d©a
 
	míc_∑π
;

1925 
krb5_íc_tkt_∑π
 *
	míc_∑π2
;

1926 } 
	tkrb5_tickë
;

1934 
	s_krb5_authítiˇt‹
 {

1935 
krb5_magic
 
	mmagic
;

1936 
krb5_¥öcùÆ
 
	m˛õ¡
;

1937 
krb5_checksum
 *
	mchecksum
;

1938 
krb5_öt32
 
	mcu£c
;

1939 
krb5_time°amp
 
	m˘ime
;

1940 
krb5_keyblock
 *
	msubkey
;

1941 
krb5_ui_4
 
	m£q_numbî
;

1942 
krb5_authd©a
 **
	mauth‹iz©i⁄_d©a
;

1943 } 
	tkrb5_authítiˇt‹
;

1946 
	s_krb5_tkt_authít
 {

1947 
krb5_magic
 
	mmagic
;

1948 
krb5_tickë
 *
	mtickë
;

1949 
krb5_authítiˇt‹
 *
	mauthítiˇt‹
;

1950 
krb5_Êags
 
	m≠_›ti⁄s
;

1951 } 
	tkrb5_tkt_authít
;

1954 
	s_krb5_¸eds
 {

1955 
krb5_magic
 
	mmagic
;

1956 
krb5_¥öcùÆ
 
	m˛õ¡
;

1957 
krb5_¥öcùÆ
 
	m£rvî
;

1958 
krb5_keyblock
 
	mkeyblock
;

1959 
krb5_tickë_times
 
	mtimes
;

1960 
krb5_boﬁón
 
	mis_skey
;

1962 
krb5_Êags
 
	mtickë_Êags
;

1963 
krb5_addªss
 **
	maddªs£s
;

1964 
krb5_d©a
 
	mtickë
;

1965 
krb5_d©a
 
	m£c⁄d_tickë
;

1968 
krb5_authd©a
 **
	mauthd©a
;

1969 } 
	tkrb5_¸eds
;

1972 
	s_krb5_œ°_ªq_íåy
 {

1973 
krb5_magic
 
	mmagic
;

1974 
krb5_öt32
 
	mÃ_ty≥
;

1975 
krb5_time°amp
 
	mvÆue
;

1976 } 
	tkrb5_œ°_ªq_íåy
;

1979 
	s_krb5_∑_d©a
 {

1980 
krb5_magic
 
	mmagic
;

1981 
krb5_¥óuthty≥
 
	m∑_ty≥
;

1982 
	mÀngth
;

1983 
krb5_o˘ë
 *
	mc⁄ã¡s
;

1984 } 
	tkrb5_∑_d©a
;

1987 
	s_krb5_ty≥d_d©a
 {

1988 
krb5_magic
 
	mmagic
;

1989 
krb5_öt32
 
	mty≥
;

1990 
	mÀngth
;

1991 
krb5_o˘ë
 *
	md©a
;

1992 } 
	tkrb5_ty≥d_d©a
;

1995 
	s_krb5_kdc_ªq
 {

1996 
krb5_magic
 
	mmagic
;

1997 
krb5_msgty≥
 
	mmsg_ty≥
;

1998 
krb5_∑_d©a
 **
	m∑d©a
;

2000 
krb5_Êags
 
	mkdc_›ti⁄s
;

2001 
krb5_¥öcùÆ
 
	m˛õ¡
;

2002 
krb5_¥öcùÆ
 
	m£rvî
;

2003 
krb5_time°amp
 
	m‰om
;

2004 
krb5_time°amp
 
	mtûl
;

2005 
krb5_time°amp
 
	mπime
;

2006 
krb5_öt32
 
	mn⁄˚
;

2007 
	mnkty≥s
;

2008 
krb5_í˘y≥
 *
	mkty≥
;

2009 
krb5_addªss
 **
	maddªs£s
;

2010 
krb5_íc_d©a
 
	mauth‹iz©i⁄_d©a
;

2011 
krb5_authd©a
 **
	mu√nc_authd©a
;

2012 
krb5_tickë
 **
	m£c⁄d_tickë
;

2013 } 
	tkrb5_kdc_ªq
;

2020 
	s_krb5_íc_kdc_ªp_∑π
 {

2021 
krb5_magic
 
	mmagic
;

2023 
krb5_msgty≥
 
	mmsg_ty≥
;

2024 
krb5_keyblock
 *
	m£ssi⁄
;

2025 
krb5_œ°_ªq_íåy
 **
	mœ°_ªq
;

2026 
krb5_öt32
 
	mn⁄˚
;

2027 
krb5_time°amp
 
	mkey_exp
;

2028 
krb5_Êags
 
	mÊags
;

2029 
krb5_tickë_times
 
	mtimes
;

2030 
krb5_¥öcùÆ
 
	m£rvî
;

2031 
krb5_addªss
 **
	mˇddrs
;

2032 
krb5_∑_d©a
 **
	míc_∑d©a
;

2033 } 
	tkrb5_íc_kdc_ªp_∑π
;

2036 
	s_krb5_kdc_ªp
 {

2037 
krb5_magic
 
	mmagic
;

2039 
krb5_msgty≥
 
	mmsg_ty≥
;

2040 
krb5_∑_d©a
 **
	m∑d©a
;

2041 
krb5_¥öcùÆ
 
	m˛õ¡
;

2042 
krb5_tickë
 *
	mtickë
;

2043 
krb5_íc_d©a
 
	míc_∑π
;

2044 
krb5_íc_kdc_ªp_∑π
 *
	míc_∑π2
;

2045 } 
	tkrb5_kdc_ªp
;

2048 
	s_krb5_îr‹
 {

2049 
krb5_magic
 
	mmagic
;

2051 
krb5_time°amp
 
	m˘ime
;

2052 
krb5_öt32
 
	mcu£c
;

2053 
krb5_öt32
 
	msu£c
;

2054 
krb5_time°amp
 
	m°ime
;

2055 
krb5_ui_4
 
	mîr‹
;

2056 
krb5_¥öcùÆ
 
	m˛õ¡
;

2057 
krb5_¥öcùÆ
 
	m£rvî
;

2058 
krb5_d©a
 
	mãxt
;

2059 
krb5_d©a
 
	me_d©a
;

2060 } 
	tkrb5_îr‹
;

2063 
	s_krb5_≠_ªq
 {

2064 
krb5_magic
 
	mmagic
;

2065 
krb5_Êags
 
	m≠_›ti⁄s
;

2066 
krb5_tickë
 *
	mtickë
;

2067 
krb5_íc_d©a
 
	mauthítiˇt‹
;

2068 } 
	tkrb5_≠_ªq
;

2075 
	s_krb5_≠_ªp
 {

2076 
krb5_magic
 
	mmagic
;

2077 
krb5_íc_d©a
 
	míc_∑π
;

2078 } 
	tkrb5_≠_ªp
;

2081 
	s_krb5_≠_ªp_íc_∑π
 {

2082 
krb5_magic
 
	mmagic
;

2083 
krb5_time°amp
 
	m˘ime
;

2084 
krb5_öt32
 
	mcu£c
;

2085 
krb5_keyblock
 *
	msubkey
;

2086 
krb5_ui_4
 
	m£q_numbî
;

2087 } 
	tkrb5_≠_ªp_íc_∑π
;

2090 
	s_krb5_ª•⁄£
 {

2091 
krb5_magic
 
	mmagic
;

2092 
krb5_o˘ë
 
	mmesßge_ty≥
;

2093 
krb5_d©a
 
	mª•⁄£
;

2094 
krb5_öt32
 
	mex≥˘ed_n⁄˚
;

2095 
krb5_time°amp
 
	mªque°_time
;

2096 } 
	tkrb5_ª•⁄£
;

2099 
	s_krb5_¸ed_öfo
 {

2100 
krb5_magic
 
	mmagic
;

2101 
krb5_keyblock
 *
	m£ssi⁄
;

2102 
krb5_¥öcùÆ
 
	m˛õ¡
;

2103 
krb5_¥öcùÆ
 
	m£rvî
;

2104 
krb5_Êags
 
	mÊags
;

2105 
krb5_tickë_times
 
	mtimes
;

2106 
krb5_addªss
 **
	mˇddrs
;

2107 } 
	tkrb5_¸ed_öfo
;

2110 
	s_krb5_¸ed_íc_∑π
 {

2111 
krb5_magic
 
	mmagic
;

2112 
krb5_öt32
 
	mn⁄˚
;

2113 
krb5_time°amp
 
	mtime°amp
;

2114 
krb5_öt32
 
	mu£c
;

2115 
krb5_addªss
 *
	ms_addªss
;

2116 
krb5_addªss
 *
	mr_addªss
;

2117 
krb5_¸ed_öfo
 **
	mtickë_öfo
;

2118 } 
	tkrb5_¸ed_íc_∑π
;

2121 
	s_krb5_¸ed
 {

2122 
krb5_magic
 
	mmagic
;

2123 
krb5_tickë
 **
	mtickës
;

2124 
krb5_íc_d©a
 
	míc_∑π
;

2125 
krb5_¸ed_íc_∑π
 *
	míc_∑π2
;

2126 } 
	tkrb5_¸ed
;

2129 
	s_∑sswd_phø£_ñemít
 {

2130 
krb5_magic
 
	mmagic
;

2131 
krb5_d©a
 *
	m∑sswd
;

2132 
krb5_d©a
 *
	mphø£
;

2133 } 
	t∑sswd_phø£_ñemít
;

2136 
	s_krb5_pwd_d©a
 {

2137 
krb5_magic
 
	mmagic
;

2138 
	m£quí˚_cou¡
;

2139 
∑sswd_phø£_ñemít
 **
	mñemít
;

2140 } 
	tkrb5_pwd_d©a
;

2143 
	s_krb5_∑_svr_ª„ºÆ_d©a
 {

2145 
krb5_¥öcùÆ
 
	m¥öcùÆ
;

2146 } 
	tkrb5_∑_svr_ª„ºÆ_d©a
;

2149 
	s_krb5_∑_£rvî_ª„ºÆ_d©a
 {

2150 
krb5_d©a
 *
	mª„ºed_ªÆm
;

2151 
krb5_¥öcùÆ
 
	måue_¥öcùÆ_«me
;

2152 
krb5_¥öcùÆ
 
	mªque°ed_¥öcùÆ_«me
;

2153 
krb5_time°amp
 
	mª„ºÆ_vÆid_u¡û
;

2154 
krb5_checksum
 
	mªp_cksum
;

2155 } 
	tkrb5_∑_£rvî_ª„ºÆ_d©a
;

2157 
	s_krb5_∑_∑c_ªq
 {

2159 
krb5_boﬁón
 
	mö˛ude_∑c
;

2160 } 
	tkrb5_∑_∑c_ªq
;

2170 
	#KRB5_AUTH_CONTEXT_DO_TIME
 0x00000001

	)

2172 
	#KRB5_AUTH_CONTEXT_RET_TIME
 0x00000002

	)

2174 
	#KRB5_AUTH_CONTEXT_DO_SEQUENCE
 0x00000004

	)

2176 
	#KRB5_AUTH_CONTEXT_RET_SEQUENCE
 0x00000008

	)

2177 
	#KRB5_AUTH_CONTEXT_PERMIT_ALL
 0x00000010

	)

2178 
	#KRB5_AUTH_CONTEXT_USE_SUBKEY
 0x00000020

	)

2187 
	skrb5_ª∂ay_d©a
 {

2188 
krb5_time°amp
 
	mtime°amp
;

2189 
krb5_öt32
 
	mu£c
;

2190 
krb5_ui_4
 
	m£q
;

2191 } 
	tkrb5_ª∂ay_d©a
;

2196 
	#KRB5_AUTH_CONTEXT_GENERATE_LOCAL_ADDR
 0x00000001

	)

2198 
	#KRB5_AUTH_CONTEXT_GENERATE_REMOTE_ADDR
 0x00000002

	)

2200 
	#KRB5_AUTH_CONTEXT_GENERATE_LOCAL_FULL_ADDR
 0x00000004

	)

2202 
	#KRB5_AUTH_CONTEXT_GENERATE_REMOTE_FULL_ADDR
 0x00000008

	)

2205 
	gkrb5_îr‹_code


2206 (
	tKRB5_CALLCONV
 * 
	tkrb5_mk_ªq_checksum_func
)(
	tkrb5_c⁄ãxt
, 
	tkrb5_auth_c⁄ãxt
,

2207 *, 
	tkrb5_d©a
 **);

2219 
krb5_poöãr
 
	tkrb5_cc_curs‹
;

2221 
	g_krb5_cˇche
;

2222 
_krb5_cˇche
 *
	tkrb5_cˇche
;

2223 
	g_krb5_cc_›s
;

2224 
_krb5_cc_›s
 
	tkrb5_cc_›s
;

2226 
	g_krb5_cccﬁ_curs‹
;

2228 
_krb5_cccﬁ_curs‹
 *
	tkrb5_cccﬁ_curs‹
;

2232 
	#KRB5_TC_MATCH_TIMES
 0x00000001

	)

2234 
	#KRB5_TC_MATCH_IS_SKEY
 0x00000002

	)

2236 
	#KRB5_TC_MATCH_FLAGS
 0x00000004

	)

2238 
	#KRB5_TC_MATCH_TIMES_EXACT
 0x00000008

	)

2240 
	#KRB5_TC_MATCH_FLAGS_EXACT
 0x00000010

	)

2242 
	#KRB5_TC_MATCH_AUTHDATA
 0x00000020

	)

2244 
	#KRB5_TC_MATCH_SRV_NAMEONLY
 0x00000040

	)

2246 
	#KRB5_TC_MATCH_2ND_TKT
 0x00000080

	)

2248 
	#KRB5_TC_MATCH_KTYPE
 0x00000100

	)

2250 
	#KRB5_TC_SUPPORTED_KTYPES
 0x00000200

	)

2254 
	#KRB5_TC_OPENCLOSE
 0x00000001

	)

2255 
	#KRB5_TC_NOTICKET
 0x00000002

	)

2271 c⁄° * 
KRB5_CALLCONV


2272 
krb5_cc_gë_«me
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
ˇche
);

2285 
krb5_îr‹_code
 
KRB5_CALLCONV


2286 
krb5_cc_gë_fuŒ_«me
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
ˇche
,

2287 **
fuŒ«me_out
);

2289 #i‡
KRB5_DEPRECATED


2290 
krb5_îr‹_code
 
KRB5_CALLCONV


2291 
krb5_cc_gí_√w
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 *
ˇche
);

2309 
krb5_îr‹_code
 
KRB5_CALLCONV


2310 
krb5_cc_öôülize
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
ˇche
,

2311 
krb5_¥öcùÆ
 
¥öcùÆ
);

2327 
krb5_îr‹_code
 
KRB5_CALLCONV


2328 
krb5_cc_de°roy
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
ˇche
);

2344 
krb5_îr‹_code
 
KRB5_CALLCONV


2345 
krb5_cc_˛o£
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
ˇche
);

2362 
krb5_îr‹_code
 
KRB5_CALLCONV


2363 
krb5_cc_°‹e_¸ed
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
ˇche
, 
krb5_¸eds
 *
¸eds
);

2398 
krb5_îr‹_code
 
KRB5_CALLCONV


2399 
krb5_cc_ªåõve_¸ed
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
ˇche
,

2400 
krb5_Êags
 
Êags
, 
krb5_¸eds
 *
m¸eds
,

2401 
krb5_¸eds
 *
¸eds
);

2420 
krb5_îr‹_code
 
KRB5_CALLCONV


2421 
krb5_cc_gë_¥öcùÆ
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
ˇche
,

2422 
krb5_¥öcùÆ
 *
¥öcùÆ
);

2438 
krb5_îr‹_code
 
KRB5_CALLCONV


2439 
krb5_cc_°¨t_£q_gë
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
ˇche
,

2440 
krb5_cc_curs‹
 *
curs‹
);

2459 
krb5_îr‹_code
 
KRB5_CALLCONV


2460 
krb5_cc_√xt_¸ed
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
ˇche
,

2461 
krb5_cc_curs‹
 *
curs‹
, 
krb5_¸eds
 *
¸eds
);

2477 
krb5_îr‹_code
 
KRB5_CALLCONV


2478 
krb5_cc_íd_£q_gë
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
ˇche
,

2479 
krb5_cc_curs‹
 *
curs‹
);

2496 
krb5_îr‹_code
 
KRB5_CALLCONV


2497 
krb5_cc_ªmove_¸ed
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
ˇche
, 
krb5_Êags
 
Êags
,

2498 
krb5_¸eds
 *
¸eds
);

2511 
krb5_îr‹_code
 
KRB5_CALLCONV


2512 
krb5_cc_£t_Êags
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
ˇche
, 
krb5_Êags
 
Êags
);

2525 
krb5_îr‹_code
 
KRB5_CALLCONV


2526 
krb5_cc_gë_Êags
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
ˇche
, 
krb5_Êags
 *
Êags
);

2537 c⁄° * 
KRB5_CALLCONV


2538 
krb5_cc_gë_ty≥
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
ˇche
);

2555 
krb5_îr‹_code
 
KRB5_CALLCONV


2556 
krb5_cc_move
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
§c
, krb5_cˇchê
d°
);

2567 
krb5_îr‹_code
 
KRB5_CALLCONV


2568 
krb5_cc_œ°_ch™ge_time
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
cˇche
,

2569 
krb5_time°amp
 *
ch™ge_time
);

2581 
krb5_îr‹_code
 
KRB5_CALLCONV


2582 
krb5_cc_lock
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
cˇche
);

2594 
krb5_îr‹_code
 
KRB5_CALLCONV


2595 
krb5_cc_u∆ock
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
cˇche
);

2613 
krb5_îr‹_code
 
KRB5_CALLCONV


2614 
krb5_cccﬁ_curs‹_√w
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cccﬁ_curs‹
 *
curs‹
);

2632 
krb5_îr‹_code
 
KRB5_CALLCONV


2633 
krb5_cccﬁ_curs‹_√xt
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cccﬁ_curs‹
 
curs‹
,

2634 
krb5_cˇche
 *
cˇche
);

2646 
krb5_îr‹_code
 
KRB5_CALLCONV


2647 
krb5_cccﬁ_curs‹_‰ì
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cccﬁ_curs‹
 *
curs‹
);

2659 
krb5_îr‹_code
 
KRB5_CALLCONV


2660 
krb5_cccﬁ_have_c⁄ã¡
(
krb5_c⁄ãxt
 
c⁄ãxt
);

2676 
krb5_îr‹_code
 
KRB5_CALLCONV


2677 
krb5_cccﬁ_œ°_ch™ge_time
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_time°amp
 *
ch™ge_time
);

2693 
krb5_îr‹_code
 
KRB5_CALLCONV


2694 
krb5_cccﬁ_lock
(
krb5_c⁄ãxt
 
c⁄ãxt
);

2705 
krb5_îr‹_code
 
KRB5_CALLCONV


2706 
krb5_cccﬁ_u∆ock
(
krb5_c⁄ãxt
 
c⁄ãxt
);

2721 
krb5_îr‹_code
 
KRB5_CALLCONV


2722 
krb5_cc_√w_unique
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° *
ty≥
, c⁄° *
höt
,

2723 
krb5_cˇche
 *
id
);

2733 
	gkrb5_rc_°
;

2734 
krb5_rc_°
 *
	tkrb5_rˇche
;

2746 
	#MAX_KEYTAB_NAME_LEN
 1100

	)

2748 
krb5_poöãr
 
	tkrb5_kt_curs‹
;

2751 
	skrb5_keyèb_íåy_°
 {

2752 
krb5_magic
 
	mmagic
;

2753 
krb5_¥öcùÆ
 
	m¥öcùÆ
;

2754 
krb5_time°amp
 
	mtime°amp
;

2755 
krb5_kvno
 
	mvno
;

2756 
krb5_keyblock
 
	mkey
;

2757 } 
	tkrb5_keyèb_íåy
;

2759 
	g_krb5_kt
;

2760 
_krb5_kt
 *
	tkrb5_keyèb
;

2771 c⁄° * 
KRB5_CALLCONV


2772 
krb5_kt_gë_ty≥
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_keyèb
 
keyèb
);

2794 
krb5_îr‹_code
 
KRB5_CALLCONV


2795 
krb5_kt_gë_«me
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_keyèb
 
keyèb
, *
«me
,

2796 
«mñí
);

2806 
krb5_îr‹_code
 
KRB5_CALLCONV


2807 
krb5_kt_˛o£
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_keyèb
 
keyèb
);

2835 
krb5_îr‹_code
 
KRB5_CALLCONV


2836 
krb5_kt_gë_íåy
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_keyèb
 
keyèb
,

2837 
krb5_c⁄°_¥öcùÆ
 
¥öcùÆ
, 
krb5_kvno
 
vno
,

2838 
krb5_í˘y≥
 
í˘y≥
, 
krb5_keyèb_íåy
 *
íåy
);

2857 
krb5_îr‹_code
 
KRB5_CALLCONV


2858 
krb5_kt_°¨t_£q_gë
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_keyèb
 
keyèb
,

2859 
krb5_kt_curs‹
 *
curs‹
);

2880 
krb5_îr‹_code
 
KRB5_CALLCONV


2881 
krb5_kt_√xt_íåy
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_keyèb
 
keyèb
,

2882 
krb5_keyèb_íåy
 *
íåy
, 
krb5_kt_curs‹
 *
curs‹
);

2899 
krb5_îr‹_code
 
KRB5_CALLCONV


2900 
krb5_kt_íd_£q_gë
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_keyèb
 
keyèb
,

2901 
krb5_kt_curs‹
 *
curs‹
);

2914 
krb5_îr‹_code
 
KRB5_CALLCONV


2915 
krb5_kt_have_c⁄ã¡
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_keyèb
 
keyèb
);

2925 
	#KRB5_INIT_CONTEXT_SECURE
 0x1

	)

2926 
	#KRB5_INIT_CONTEXT_KDC
 0x2

	)

2945 
krb5_îr‹_code
 
KRB5_CALLCONV


2946 
krb5_öô_c⁄ãxt
(
krb5_c⁄ãxt
 *
c⁄ãxt
);

2964 
krb5_îr‹_code
 
KRB5_CALLCONV


2965 
krb5_öô_£cuª_c⁄ãxt
(
krb5_c⁄ãxt
 *
c⁄ãxt
);

2983 
krb5_îr‹_code
 
KRB5_CALLCONV


2984 
krb5_öô_c⁄ãxt_¥ofûe
(
_¥ofûe_t
 *
¥ofûe
, 
krb5_Êags
 
Êags
,

2985 
krb5_c⁄ãxt
 *
c⁄ãxt
);

2995 
KRB5_CALLCONV


2996 
krb5_‰ì_c⁄ãxt
(
krb5_c⁄ãxt
 
c⁄ãxt
);

3012 
krb5_îr‹_code
 
KRB5_CALLCONV


3013 
krb5_c›y_c⁄ãxt
(
krb5_c⁄ãxt
 
˘x
, krb5_c⁄ãxà*
n˘x_out
);

3033 
krb5_îr‹_code
 
KRB5_CALLCONV


3034 
krb5_£t_deÁu…_tgs_í˘y≥s
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_í˘y≥
 *
ëy≥s
);

3050 
krb5_îr‹_code
 
KRB5_CALLCONV


3051 
krb5_gë_≥rmôãd_í˘y≥s
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_í˘y≥
 **
kty≥s
);

3059 
krb5_boﬁón
 
KRB5_CALLCONV


3060 
krb5_is_thªad_ß„
();

3076 
krb5_îr‹_code
 
KRB5_CALLCONV


3077 
krb5_£rvî_de¸y±_tickë_keyèb
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_keyèb
 
kt
,

3078 
krb5_tickë
 *
tickë
);

3088 
KRB5_CALLCONV


3089 
krb5_‰ì_tgt_¸eds
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_¸eds
 **
tgts
);

3094 
	#KRB5_GC_USER_USER
 1

	)

3095 
	#KRB5_GC_CACHED
 2

	)

3096 
	#KRB5_GC_CANONICALIZE
 4

	)

3097 
	#KRB5_GC_NO_STORE
 8

	)

3098 
	#KRB5_GC_FORWARDABLE
 16

	)

3099 
	#KRB5_GC_NO_TRANSIT_CHECK
 32

	)

3100 
	#KRB5_GC_CONSTRAINED_DELEGATION
 64

	)

3142 
krb5_îr‹_code
 
KRB5_CALLCONV


3143 
krb5_gë_¸edítüls
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_Êags
 
›ti⁄s
,

3144 
krb5_cˇche
 
cˇche
, 
krb5_¸eds
 *
ö_¸eds
,

3145 
krb5_¸eds
 **
out_¸eds
);

3148 
krb5_îr‹_code
 
KRB5_CALLCONV


3149 
krb5_gë_¸edítüls_vÆid©e
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_Êags
 
›ti⁄s
,

3150 
krb5_cˇche
 
cˇche
, 
krb5_¸eds
 *
ö_¸eds
,

3151 
krb5_¸eds
 **
out_¸eds
);

3154 
krb5_îr‹_code
 
KRB5_CALLCONV


3155 
krb5_gë_¸edítüls_ª√w
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_Êags
 
›ti⁄s
,

3156 
krb5_cˇche
 
cˇche
, 
krb5_¸eds
 *
ö_¸eds
,

3157 
krb5_¸eds
 **
out_¸eds
);

3181 
krb5_îr‹_code
 
KRB5_CALLCONV


3182 
krb5_mk_ªq
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 *
auth_c⁄ãxt
,

3183 
krb5_Êags
 
≠_ªq_›ti⁄s
, *
£rvi˚
, *
ho°«me
,

3184 
krb5_d©a
 *
ö_d©a
, 
krb5_cˇche
 
cˇche
, krb5_d©®*
outbuf
);

3223 
krb5_îr‹_code
 
KRB5_CALLCONV


3224 
krb5_mk_ªq_exãnded
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 *
auth_c⁄ãxt
,

3225 
krb5_Êags
 
≠_ªq_›ti⁄s
, 
krb5_d©a
 *
ö_d©a
,

3226 
krb5_¸eds
 *
ö_¸eds
, 
krb5_d©a
 *
outbuf
);

3248 
krb5_îr‹_code
 
KRB5_CALLCONV


3249 
krb5_mk_ªp
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
, 
krb5_d©a
 *
outbuf
);

3262 
krb5_îr‹_code
 
KRB5_CALLCONV


3263 
krb5_mk_ªp_d˚
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
, 
krb5_d©a
 *
outbuf
);

3281 
krb5_îr‹_code
 
KRB5_CALLCONV


3282 
krb5_rd_ªp
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

3283 c⁄° 
krb5_d©a
 *
öbuf
, 
krb5_≠_ªp_íc_∑π
 **
ª∂
);

3298 
krb5_îr‹_code
 
KRB5_CALLCONV


3299 
krb5_rd_ªp_d˚
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

3300 c⁄° 
krb5_d©a
 *
öbuf
, 
krb5_ui_4
 *
n⁄˚
);

3314 
krb5_îr‹_code
 
KRB5_CALLCONV


3315 
krb5_mk_îr‹
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_îr‹
 *
dec_îr
,

3316 
krb5_d©a
 *
íc_îr
);

3331 
krb5_îr‹_code
 
KRB5_CALLCONV


3332 
krb5_rd_îr‹
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_d©a
 *
íc_îrbuf
,

3333 
krb5_îr‹
 **
dec_îr‹
);

3371 
krb5_îr‹_code
 
KRB5_CALLCONV


3372 
krb5_rd_ß„
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

3373 c⁄° 
krb5_d©a
 *
öbuf
, krb5_d©®*
outbuf
,

3374 
krb5_ª∂ay_d©a
 *
outd©a
);

3411 
krb5_îr‹_code
 
KRB5_CALLCONV


3412 
krb5_rd_¥iv
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

3413 c⁄° 
krb5_d©a
 *
öbuf
, krb5_d©®*
outbuf
,

3414 
krb5_ª∂ay_d©a
 *
outd©a
);

3448 
krb5_îr‹_code
 
KRB5_CALLCONV


3449 
krb5_∑r£_«me
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° *
«me
,

3450 
krb5_¥öcùÆ
 *
¥öcùÆ_out
);

3452 
	#KRB5_PRINCIPAL_PARSE_NO_REALM
 0x1

	)

3453 
	#KRB5_PRINCIPAL_PARSE_REQUIRE_REALM
 0x2

	)

3454 
	#KRB5_PRINCIPAL_PARSE_ENTERPRISE
 0x4

	)

3456 
	#KRB5_PRINCIPAL_PARSE_IGNORE_REALM
 0x8

	)

3489 
krb5_îr‹_code
 
KRB5_CALLCONV


3490 
krb5_∑r£_«me_Êags
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° *
«me
,

3491 
Êags
, 
krb5_¥öcùÆ
 *
¥öcùÆ_out
);

3510 
krb5_îr‹_code
 
KRB5_CALLCONV


3511 
krb5_u≈¨£_«me
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_c⁄°_¥öcùÆ
 
¥öcùÆ
,

3512 **
«me
);

3537 
krb5_îr‹_code
 
KRB5_CALLCONV


3538 
krb5_u≈¨£_«me_ext
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_c⁄°_¥öcùÆ
 
¥öcùÆ
,

3539 **
«me
, *
size
);

3541 
	#KRB5_PRINCIPAL_UNPARSE_SHORT
 0x1

	)

3542 
	#KRB5_PRINCIPAL_UNPARSE_NO_REALM
 0x2

	)

3543 
	#KRB5_PRINCIPAL_UNPARSE_DISPLAY
 0x4

	)

3568 
krb5_îr‹_code
 
KRB5_CALLCONV


3569 
krb5_u≈¨£_«me_Êags
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_c⁄°_¥öcùÆ
 
¥öcùÆ
,

3570 
Êags
, **
«me
);

3588 
krb5_îr‹_code
 
KRB5_CALLCONV


3589 
krb5_u≈¨£_«me_Êags_ext
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_c⁄°_¥öcùÆ
 
¥öcùÆ
,

3590 
Êags
, **
«me
, *
size
);

3607 
krb5_îr‹_code
 
KRB5_CALLCONV


3608 
krb5_£t_¥öcùÆ_ªÆm
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_¥öcùÆ
 
¥öcùÆ
,

3609 c⁄° *
ªÆm
);

3625 
krb5_boﬁón
 
KRB5_CALLCONV_WRONG


3626 
krb5_addªss_£¨ch
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_addªss
 *
addr
,

3627 
krb5_addªss
 *c⁄° *
addæi°
);

3639 
krb5_boﬁón
 
KRB5_CALLCONV


3640 
krb5_addªss_com∑ª
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_addªss
 *
addr1
,

3641 c⁄° 
krb5_addªss
 *
addr2
);

3657 
KRB5_CALLCONV


3658 
krb5_addªss_‹dî
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_addªss
 *
addr1
,

3659 c⁄° 
krb5_addªss
 *
addr2
);

3671 
krb5_boﬁón
 
KRB5_CALLCONV


3672 
krb5_ªÆm_com∑ª
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_c⁄°_¥öcùÆ
 
¥öc1
,

3673 
krb5_c⁄°_¥öcùÆ
 
¥öc2
);

3685 
krb5_boﬁón
 
KRB5_CALLCONV


3686 
krb5_¥öcùÆ_com∑ª
(
krb5_c⁄ãxt
 
c⁄ãxt
,

3687 
krb5_c⁄°_¥öcùÆ
 
¥öc1
,

3688 
krb5_c⁄°_¥öcùÆ
 
¥öc2
);

3703 
krb5_boﬁón
 
KRB5_CALLCONV


3704 
krb5_¥öcùÆ_com∑ª_™y_ªÆm
(
krb5_c⁄ãxt
 
c⁄ãxt
,

3705 
krb5_c⁄°_¥öcùÆ
 
¥öc1
,

3706 
krb5_c⁄°_¥öcùÆ
 
¥öc2
);

3708 
	#KRB5_PRINCIPAL_COMPARE_IGNORE_REALM
 1

	)

3709 
	#KRB5_PRINCIPAL_COMPARE_ENTERPRISE
 2

	)

3710 
	#KRB5_PRINCIPAL_COMPARE_CASEFOLD
 4

	)

3711 
	#KRB5_PRINCIPAL_COMPARE_UTF8
 8

	)

3732 
krb5_boﬁón
 
KRB5_CALLCONV


3733 
krb5_¥öcùÆ_com∑ª_Êags
(
krb5_c⁄ãxt
 
c⁄ãxt
,

3734 
krb5_c⁄°_¥öcùÆ
 
¥öc1
,

3735 
krb5_c⁄°_¥öcùÆ
 
¥öc2
,

3736 
Êags
);

3755 
krb5_îr‹_code
 
KRB5_CALLCONV


3756 
krb5_öô_keyblock
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_í˘y≥
 
í˘y≥
,

3757 
size_t
 
Àngth
, 
krb5_keyblock
 **
out
);

3771 
krb5_îr‹_code
 
KRB5_CALLCONV


3772 
krb5_c›y_keyblock
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_keyblock
 *
‰om
,

3773 
krb5_keyblock
 **
to
);

3787 
krb5_îr‹_code
 
KRB5_CALLCONV


3788 
krb5_c›y_keyblock_c⁄ã¡s
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_keyblock
 *
‰om
,

3789 
krb5_keyblock
 *
to
);

3803 
krb5_îr‹_code
 
KRB5_CALLCONV


3804 
krb5_c›y_¸eds
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_¸eds
 *
ö¸ed
, krb5_¸ed†**
out¸ed
);

3818 
krb5_îr‹_code
 
KRB5_CALLCONV


3819 
krb5_c›y_d©a
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_d©a
 *
öd©a
, krb5_d©®**
outd©a
);

3834 
krb5_îr‹_code
 
KRB5_CALLCONV


3835 
krb5_c›y_¥öcùÆ
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_c⁄°_¥öcùÆ
 
ö¥öc
,

3836 
krb5_¥öcùÆ
 *
ouçröc
);

3850 
krb5_îr‹_code
 
KRB5_CALLCONV


3851 
krb5_c›y_addªs£s
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_addªss
 *c⁄° *
öaddr
,

3852 
krb5_addªss
 ***
ouèddr
);

3866 
krb5_îr‹_code
 
KRB5_CALLCONV


3867 
krb5_c›y_tickë
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_tickë
 *
‰om
, krb5_tickë **
±o
);

3884 
krb5_îr‹_code
 
KRB5_CALLCONV


3885 
krb5_c›y_authd©a
(
krb5_c⁄ãxt
 
c⁄ãxt
,

3886 
krb5_authd©a
 *c⁄° *
ö_authd©
, krb5_authd©®***
out
);

3906 
krb5_îr‹_code
 
KRB5_CALLCONV


3907 
krb5_föd_authd©a
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_authd©a
 *c⁄° *
tickë_authd©a
,

3908 
krb5_authd©a
 *c⁄° *
≠_ªq_authd©a
,

3909 
krb5_authd©©y≥
 
ad_ty≥
, 
krb5_authd©a
 ***
ªsu…s
);

3928 
krb5_îr‹_code
 
KRB5_CALLCONV


3929 
krb5_mîge_authd©a
(
krb5_c⁄ãxt
 
c⁄ãxt
,

3930 
krb5_authd©a
 *c⁄° *
öauthd©1
,

3931 
krb5_authd©a
 * c⁄° *
öauthd©2
,

3932 
krb5_authd©a
 ***
ouèuthd©
);

3947 
krb5_îr‹_code
 
KRB5_CALLCONV


3948 
krb5_c›y_authítiˇt‹
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_authítiˇt‹
 *
auth‰om
,

3949 
krb5_authítiˇt‹
 **
authto
);

3964 
krb5_îr‹_code
 
KRB5_CALLCONV


3965 
krb5_c›y_checksum
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_checksum
 *
ck‰om
,

3966 
krb5_checksum
 **
ckto
);

3982 
krb5_îr‹_code
 
KRB5_CALLCONV


3983 
krb5_gë_£rvî_rˇche
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_d©a
 *
põ˚
,

3984 
krb5_rˇche
 *
r˝å
);

4015 
krb5_îr‹_code
 
KRB5_CALLCONV_C


4016 
krb5_buûd_¥öcùÆ_ext
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_¥öcùÆ
 * 
¥öc
,

4017 
æí
, c⁄° * 
ªÆm
, ...);

4045 
krb5_îr‹_code
 
KRB5_CALLCONV_C


4046 
	$krb5_buûd_¥öcùÆ
(
krb5_c⁄ãxt
 
c⁄ãxt
,

4047 
krb5_¥öcùÆ
 * 
¥öc
,

4048 
æí
,

4049 c⁄° * 
ªÆm
, ...)

4050 #i‡
__GNUC__
 >= 4

4051 
	`__©åibuã__
 ((
£¡öñ
))

4054 #i‡
KRB5_DEPRECATED


4056 
KRB5_ATTR_DEPRECATED
 
krb5_îr‹_code
 
KRB5_CALLCONV


4057 
	`krb5_buûd_¥öcùÆ_va
(
krb5_c⁄ãxt
 
c⁄ãxt
,

4058 
krb5_¥öcùÆ
 
¥öc
,

4059 
æí
,

4060 c⁄° *
ªÆm
,

4061 
va_li°
 
≠
);

4092 
krb5_îr‹_code
 
KRB5_CALLCONV


4093 
	`krb5_buûd_¥öcùÆ_Æloc_va
(
krb5_c⁄ãxt
 
c⁄ãxt
,

4094 
krb5_¥öcùÆ
 *
¥öc
,

4095 
æí
,

4096 c⁄° *
ªÆm
,

4097 
va_li°
 
≠
);

4115 
krb5_îr‹_code
 
KRB5_CALLCONV


4116 
	`krb5_425_c⁄v_¥öcùÆ
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° *
«me
,

4117 c⁄° *
ö°™˚
, c⁄° *
ªÆm
,

4118 
krb5_¥öcùÆ
 *
¥öc
);

4141 
krb5_îr‹_code
 
KRB5_CALLCONV


4142 
	`krb5_524_c⁄v_¥öcùÆ
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_c⁄°_¥öcùÆ
 
¥öc
,

4143 *
«me
, *
ö°
, *
ªÆm
);

4147 
¸edítüls
;

4156 
KRB5_CALLCONV


4157 
	`krb5_524_c⁄vît_¸eds
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_¸eds
 *
v5¸eds
,

4158 
¸edítüls
 *
v4¸eds
);

4160 #i‡
KRB5_DEPRECATED


4161 
	#krb524_c⁄vît_¸eds_kdc
 
krb5_524_c⁄vît_¸eds


	)

4162 
	#krb524_öô_ës
(
x
Ë(0)

	)

4192 
krb5_îr‹_code
 
KRB5_CALLCONV


4193 
	`krb5_kt_ªsﬁve
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° *
«me
, 
krb5_keyèb
 *
ktid
);

4207 
krb5_îr‹_code
 
KRB5_CALLCONV


4208 
	`krb5_kt_dup
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_keyèb
 
ö
, krb5_keyèb *
out
);

4228 
krb5_îr‹_code
 
KRB5_CALLCONV


4229 
	`krb5_kt_deÁu…_«me
(
krb5_c⁄ãxt
 
c⁄ãxt
, *
«me
, 
«me_size
);

4245 
krb5_îr‹_code
 
KRB5_CALLCONV


4246 
	`krb5_kt_deÁu…
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_keyèb
 *
id
);

4263 
krb5_îr‹_code
 
KRB5_CALLCONV


4264 
	`krb5_kt_˛õ¡_deÁu…
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_keyèb
 *
keyèb_out
);

4276 
krb5_îr‹_code
 
KRB5_CALLCONV


4277 
	`krb5_‰ì_keyèb_íåy_c⁄ã¡s
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_keyèb_íåy
 *
íåy
);

4280 
krb5_îr‹_code
 
KRB5_CALLCONV


4281 
	`krb5_kt_‰ì_íåy
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_keyèb_íåy
 *
íåy
);

4301 
krb5_îr‹_code
 
KRB5_CALLCONV


4302 
	`krb5_kt_ªmove_íåy
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_keyèb
 
id
, 
krb5_keyèb_íåy
 *
íåy
);

4320 
krb5_îr‹_code
 
KRB5_CALLCONV


4321 
	`krb5_kt_add_íåy
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_keyèb
 
id
, 
krb5_keyèb_íåy
 *
íåy
);

4332 
krb5_îr‹_code
 
KRB5_CALLCONV_WRONG


4333 
	`krb5_¥öcùÆ2ß…
(
krb5_c⁄ãxt
 
c⁄ãxt
,

4334 
krb5_c⁄°_¥öcùÆ
 
¥
, 
krb5_d©a
 *
ªt
);

4360 
krb5_îr‹_code
 
KRB5_CALLCONV


4361 
	`krb5_cc_ªsﬁve
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° *
«me
, 
krb5_cˇche
 *
ˇche
);

4373 
krb5_îr‹_code
 
KRB5_CALLCONV


4374 
	`krb5_cc_dup
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
ö
, krb5_cˇchê*
out
);

4399 c⁄° *
KRB5_CALLCONV


4400 
	`krb5_cc_deÁu…_«me
(
krb5_c⁄ãxt
 
c⁄ãxt
);

4422 
krb5_îr‹_code
 
KRB5_CALLCONV


4423 
	`krb5_cc_£t_deÁu…_«me
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° *
«me
);

4444 
krb5_îr‹_code
 
KRB5_CALLCONV


4445 
	`krb5_cc_deÁu…
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 *
cˇche
);

4456 
krb5_îr‹_code
 
KRB5_CALLCONV


4457 
	`krb5_cc_c›y_¸eds
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
öcc
, krb5_cˇchê
outcc
);

4476 
krb5_îr‹_code
 
KRB5_CALLCONV


4477 
	`krb5_cc_gë_c⁄fig
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
id
,

4478 
krb5_c⁄°_¥öcùÆ
 
¥öcùÆ
,

4479 c⁄° *
key
, 
krb5_d©a
 *
d©a
);

4500 
krb5_îr‹_code
 
KRB5_CALLCONV


4501 
	`krb5_cc_£t_c⁄fig
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
id
,

4502 
krb5_c⁄°_¥öcùÆ
 
¥öcùÆ
,

4503 c⁄° *
key
, 
krb5_d©a
 *
d©a
);

4515 
krb5_boﬁón
 
KRB5_CALLCONV


4516 
	`krb5_is_c⁄fig_¥öcùÆ
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_c⁄°_¥öcùÆ
 
¥öcùÆ
);

4532 
krb5_îr‹_code
 
KRB5_CALLCONV


4533 
	`krb5_cc_swôch
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
ˇche
);

4546 
krb5_boﬁón
 
KRB5_CALLCONV


4547 
	`krb5_cc_suµ‹t_swôch
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° *
ty≥
);

4566 
krb5_îr‹_code
 
KRB5_CALLCONV


4567 
	`krb5_cc_ˇche_m©ch
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_¥öcùÆ
 
˛õ¡
,

4568 
krb5_cˇche
 *
ˇche_out
);

4604 
krb5_îr‹_code
 
KRB5_CALLCONV


4605 
	`krb5_cc_£À˘
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_¥öcùÆ
 
£rvî
,

4606 
krb5_cˇche
 *
ˇche_out
, 
krb5_¥öcùÆ
 *
¥öc_out
);

4615 
KRB5_CALLCONV


4616 
	`krb5_‰ì_¥öcùÆ
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_¥öcùÆ
 
vÆ
);

4626 
KRB5_CALLCONV


4627 
	`krb5_‰ì_authítiˇt‹
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_authítiˇt‹
 *
vÆ
);

4639 
KRB5_CALLCONV


4640 
	`krb5_‰ì_addªs£s
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_addªss
 **
vÆ
);

4652 
KRB5_CALLCONV


4653 
	`krb5_‰ì_authd©a
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_authd©a
 **
vÆ
);

4663 
KRB5_CALLCONV


4664 
	`krb5_‰ì_tickë
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_tickë
 *
vÆ
);

4674 
KRB5_CALLCONV


4675 
	`krb5_‰ì_îr‹
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_îr‹
 *
vÆ
);

4685 
KRB5_CALLCONV


4686 
	`krb5_‰ì_¸eds
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_¸eds
 *
vÆ
);

4696 
KRB5_CALLCONV


4697 
	`krb5_‰ì_¸ed_c⁄ã¡s
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_¸eds
 *
vÆ
);

4707 
KRB5_CALLCONV


4708 
	`krb5_‰ì_checksum
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_checksum
 *
vÆ
);

4718 
KRB5_CALLCONV


4719 
	`krb5_‰ì_checksum_c⁄ã¡s
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_checksum
 *
vÆ
);

4729 
KRB5_CALLCONV


4730 
	`krb5_‰ì_keyblock
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_keyblock
 *
vÆ
);

4740 
KRB5_CALLCONV


4741 
	`krb5_‰ì_keyblock_c⁄ã¡s
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_keyblock
 *
key
);

4751 
KRB5_CALLCONV


4752 
	`krb5_‰ì_≠_ªp_íc_∑π
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_≠_ªp_íc_∑π
 *
vÆ
);

4762 
KRB5_CALLCONV


4763 
	`krb5_‰ì_d©a
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_d©a
 *
vÆ
);

4766 
KRB5_CALLCONV


4767 
	`krb5_‰ì_o˘ë_d©a
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_o˘ë_d©a
 *
vÆ
);

4777 
KRB5_CALLCONV


4778 
	`krb5_‰ì_d©a_c⁄ã¡s
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_d©a
 *
vÆ
);

4786 
KRB5_CALLCONV


4787 
	`krb5_‰ì_u≈¨£d_«me
(
krb5_c⁄ãxt
 
c⁄ãxt
, *
vÆ
);

4797 
KRB5_CALLCONV


4798 
	`krb5_‰ì_°rög
(
krb5_c⁄ãxt
 
c⁄ãxt
, *
vÆ
);

4808 
KRB5_CALLCONV


4809 
	`krb5_‰ì_í˘y≥s
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_í˘y≥
 *
vÆ
);

4817 
KRB5_CALLCONV


4818 
	`krb5_‰ì_cksumty≥s
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cksumty≥
 *
vÆ
);

4838 
krb5_îr‹_code
 
KRB5_CALLCONV


4839 
	`krb5_us_timeofday
(
krb5_c⁄ãxt
 
c⁄ãxt
,

4840 
krb5_time°amp
 *
£c⁄ds
, 
krb5_öt32
 *
mi¸o£c⁄ds
);

4856 
krb5_îr‹_code
 
KRB5_CALLCONV


4857 
	`krb5_timeofday
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_time°amp
 *
timîë
);

4873 
krb5_îr‹_code
 
KRB5_CALLCONV


4874 
	`krb5_check_˛ockskew
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_time°amp
 
d©e
);

4887 
krb5_îr‹_code
 
KRB5_CALLCONV


4888 
	`krb5_os_loˇœddr
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_addªss
 ***
addr
);

4906 
krb5_îr‹_code
 
KRB5_CALLCONV


4907 
	`krb5_gë_deÁu…_ªÆm
(
krb5_c⁄ãxt
 
c⁄ãxt
, **
Ãólm
);

4922 
krb5_îr‹_code
 
KRB5_CALLCONV


4923 
	`krb5_£t_deÁu…_ªÆm
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° *
Ãólm
);

4931 
KRB5_CALLCONV


4932 
	`krb5_‰ì_deÁu…_ªÆm
(
krb5_c⁄ãxt
 
c⁄ãxt
, *
Ãólm
);

4963 
krb5_îr‹_code
 
KRB5_CALLCONV


4964 
	`krb5_¢ame_to_¥öcùÆ
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° *
ho°«me
, c⁄° *
¢ame
,

4965 
krb5_öt32
 
ty≥
, 
krb5_¥öcùÆ
 *
ªt_¥öc
);

4987 
krb5_boﬁón
 
KRB5_CALLCONV


4988 
	`krb5_¢ame_m©ch
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_c⁄°_¥öcùÆ
 
m©chög
,

4989 
krb5_c⁄°_¥öcùÆ
 
¥öc
);

5013 
krb5_îr‹_code
 
KRB5_CALLCONV


5014 
	`krb5_ch™ge_∑ssw‹d
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_¸eds
 *
¸eds
, *
√wpw
,

5015 *
ªsu…_code
, 
krb5_d©a
 *
ªsu…_code_°rög
,

5016 
krb5_d©a
 *
ªsu…_°rög
);

5048 
krb5_îr‹_code
 
KRB5_CALLCONV


5049 
	`krb5_£t_∑ssw‹d
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_¸eds
 *
¸eds
, *
√wpw
,

5050 
krb5_¥öcùÆ
 
ch™ge_∑ssw‹d_f‹
, *
ªsu…_code
,

5051 
krb5_d©a
 *
ªsu…_code_°rög
, krb5_d©®*
ªsu…_°rög
);

5083 
krb5_îr‹_code
 
KRB5_CALLCONV


5084 
	`krb5_£t_∑ssw‹d_usög_cˇche
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
cˇche
,

5085 *
√wpw
, 
krb5_¥öcùÆ
 
ch™ge_∑ssw‹d_f‹
,

5086 *
ªsu…_code
, 
krb5_d©a
 *
ªsu…_code_°rög
,

5087 
krb5_d©a
 *
ªsu…_°rög
);

5111 
krb5_îr‹_code
 
KRB5_CALLCONV


5112 
	`krb5_chpw_mesßge
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_d©a
 *
£rvî_°rög
,

5113 **
mesßge_out
);

5132 
krb5_îr‹_code
 
KRB5_CALLCONV


5133 
	`krb5_gë_¥ofûe
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
_¥ofûe_t
 ** 
¥ofûe
);

5135 #i‡
KRB5_DEPRECATED


5137 
KRB5_ATTR_DEPRECATED
 
krb5_îr‹_code
 
KRB5_CALLCONV


5138 
	`krb5_gë_ö_tkt_wôh_∑ssw‹d
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_Êags
 
›ti⁄s
,

5139 
krb5_addªss
 *c⁄° *
addrs
, 
krb5_í˘y≥
 *
kty≥s
,

5140 
krb5_¥óuthty≥
 *
¥e_auth_ty≥s
,

5141 c⁄° *
∑ssw‹d
, 
krb5_cˇche
 
cˇche
,

5142 
krb5_¸eds
 *
¸eds
, 
krb5_kdc_ªp
 **
ªt_as_ª∂y
);

5145 
KRB5_ATTR_DEPRECATED
 
krb5_îr‹_code
 
KRB5_CALLCONV


5146 
	`krb5_gë_ö_tkt_wôh_skey
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_Êags
 
›ti⁄s
,

5147 
krb5_addªss
 *c⁄° *
addrs
, 
krb5_í˘y≥
 *
kty≥s
,

5148 
krb5_¥óuthty≥
 *
¥e_auth_ty≥s
,

5149 c⁄° 
krb5_keyblock
 *
key
, 
krb5_cˇche
 
cˇche
,

5150 
krb5_¸eds
 *
¸eds
, 
krb5_kdc_ªp
 **
ªt_as_ª∂y
);

5153 
KRB5_ATTR_DEPRECATED
 
krb5_îr‹_code
 
KRB5_CALLCONV


5154 
	`krb5_gë_ö_tkt_wôh_keyèb
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_Êags
 
›ti⁄s
,

5155 
krb5_addªss
 *c⁄° *
addrs
, 
krb5_í˘y≥
 *
kty≥s
,

5156 
krb5_¥óuthty≥
 *
¥e_auth_ty≥s
,

5157 
krb5_keyèb
 
¨g_keyèb
, 
krb5_cˇche
 
cˇche
,

5158 
krb5_¸eds
 *
¸eds
, 
krb5_kdc_ªp
 **
ªt_as_ª∂y
);

5218 
krb5_îr‹_code
 
KRB5_CALLCONV


5219 
	`krb5_rd_ªq
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 *
auth_c⁄ãxt
,

5220 c⁄° 
krb5_d©a
 *
öbuf
, 
krb5_c⁄°_¥öcùÆ
 
£rvî
,

5221 
krb5_keyèb
 
keyèb
, 
krb5_Êags
 *
≠_ªq_›ti⁄s
,

5222 
krb5_tickë
 **
tickë
);

5246 
krb5_îr‹_code
 
KRB5_CALLCONV


5247 
	`krb5_kt_ªad_£rvi˚_key
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_poöãr
 
key¥oˇrg
,

5248 
krb5_¥öcùÆ
 
¥öcùÆ
, 
krb5_kvno
 
vno
,

5249 
krb5_í˘y≥
 
í˘y≥
, 
krb5_keyblock
 **
key
);

5289 
krb5_îr‹_code
 
KRB5_CALLCONV


5290 
	`krb5_mk_ß„
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

5291 c⁄° 
krb5_d©a
 *
u£rd©a
, krb5_d©®*
outbuf
,

5292 
krb5_ª∂ay_d©a
 *
outd©a
);

5328 
krb5_îr‹_code
 
KRB5_CALLCONV


5329 
	`krb5_mk_¥iv
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

5330 c⁄° 
krb5_d©a
 *
u£rd©a
, krb5_d©®*
outbuf
,

5331 
krb5_ª∂ay_d©a
 *
outd©a
);

5382 
krb5_îr‹_code
 
KRB5_CALLCONV


5383 
	`krb5_£ndauth
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 *
auth_c⁄ãxt
,

5384 
krb5_poöãr
 
fd
, *
≠∂_vîsi⁄
, 
krb5_¥öcùÆ
 
˛õ¡
,

5385 
krb5_¥öcùÆ
 
£rvî
, 
krb5_Êags
 
≠_ªq_›ti⁄s
,

5386 
krb5_d©a
 *
ö_d©a
, 
krb5_¸eds
 *
ö_¸eds
, 
krb5_cˇche
 
cˇche
,

5387 
krb5_îr‹
 **
îr‹
, 
krb5_≠_ªp_íc_∑π
 **
ªp_ªsu…
,

5388 
krb5_¸eds
 **
out_¸eds
);

5412 
krb5_îr‹_code
 
KRB5_CALLCONV


5413 
	`krb5_ªcvauth
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 *
auth_c⁄ãxt
,

5414 
krb5_poöãr
 
fd
, *
≠∂_vîsi⁄
, 
krb5_¥öcùÆ
 
£rvî
,

5415 
krb5_öt32
 
Êags
, 
krb5_keyèb
 
keyèb
, 
krb5_tickë
 **
tickë
);

5434 
krb5_îr‹_code
 
KRB5_CALLCONV


5435 
	`krb5_ªcvauth_vîsi⁄
(
krb5_c⁄ãxt
 
c⁄ãxt
,

5436 
krb5_auth_c⁄ãxt
 *
auth_c⁄ãxt
,

5437 
krb5_poöãr
 
fd
,

5438 
krb5_¥öcùÆ
 
£rvî
,

5439 
krb5_öt32
 
Êags
,

5440 
krb5_keyèb
 
keyèb
,

5441 
krb5_tickë
 **
tickë
,

5442 
krb5_d©a
 *
vîsi⁄
);

5471 
krb5_îr‹_code
 
KRB5_CALLCONV


5472 
	`krb5_mk_n¸ed
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

5473 
krb5_¸eds
 **
µ¸eds
, 
krb5_d©a
 **
µd©a
,

5474 
krb5_ª∂ay_d©a
 *
outd©a
);

5497 
krb5_îr‹_code
 
KRB5_CALLCONV


5498 
	`krb5_mk_1¸ed
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

5499 
krb5_¸eds
 *
p¸eds
, 
krb5_d©a
 **
µd©a
,

5500 
krb5_ª∂ay_d©a
 *
outd©a
);

5522 
krb5_îr‹_code
 
KRB5_CALLCONV


5523 
	`krb5_rd_¸ed
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

5524 
krb5_d©a
 *
p¸edd©a
, 
krb5_¸eds
 ***
µp¸eds
,

5525 
krb5_ª∂ay_d©a
 *
outd©a
);

5556 
krb5_îr‹_code
 
KRB5_CALLCONV


5557 
	`krb5_fwd_tgt_¸eds
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

5558 *
rho°
, 
krb5_¥öcùÆ
 
˛õ¡
, krb5_¥öcùÆ 
£rvî
,

5559 
krb5_cˇche
 
cc
, 
f‹w¨dabÀ
, 
krb5_d©a
 *
outbuf
);

5580 
krb5_îr‹_code
 
KRB5_CALLCONV


5581 
	`krb5_auth_c⁄_öô
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 *
auth_c⁄ãxt
);

5593 
krb5_îr‹_code
 
KRB5_CALLCONV


5594 
	`krb5_auth_c⁄_‰ì
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
);

5611 
krb5_îr‹_code
 
KRB5_CALLCONV


5612 
	`krb5_auth_c⁄_£tÊags
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
, 
krb5_öt32
 
Êags
);

5629 
krb5_îr‹_code
 
KRB5_CALLCONV


5630 
	`krb5_auth_c⁄_gëÊags
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

5631 
krb5_öt32
 *
Êags
);

5647 
krb5_îr‹_code
 
KRB5_CALLCONV


5648 
	`krb5_auth_c⁄_£t_checksum_func
–
krb5_c⁄ãxt
 
c⁄ãxt
,

5649 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

5650 
krb5_mk_ªq_checksum_func
 
func
,

5651 *
d©a
);

5663 
krb5_îr‹_code
 
KRB5_CALLCONV


5664 
	`krb5_auth_c⁄_gë_checksum_func
–
krb5_c⁄ãxt
 
c⁄ãxt
,

5665 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

5666 
krb5_mk_ªq_checksum_func
 *
func
,

5667 **
d©a
);

5685 
krb5_îr‹_code
 
KRB5_CALLCONV_WRONG


5686 
	`krb5_auth_c⁄_£èddrs
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

5687 
krb5_addªss
 *
loˇl_addr
, krb5_addªs†*
ªmŸe_addr
);

5699 
krb5_îr‹_code
 
KRB5_CALLCONV


5700 
	`krb5_auth_c⁄_gëaddrs
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

5701 
krb5_addªss
 **
loˇl_addr
, krb5_addªs†**
ªmŸe_addr
);

5719 
krb5_îr‹_code
 
KRB5_CALLCONV


5720 
	`krb5_auth_c⁄_£ç‹ts
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

5721 
krb5_addªss
 *
loˇl_p‹t
, krb5_addªs†*
ªmŸe_p‹t
);

5732 
krb5_îr‹_code
 
KRB5_CALLCONV


5733 
	`krb5_auth_c⁄_£tu£ru£rkey
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

5734 
krb5_keyblock
 *
keyblock
);

5749 
krb5_îr‹_code
 
KRB5_CALLCONV


5750 
	`krb5_auth_c⁄_gëkey
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

5751 
krb5_keyblock
 **
keyblock
);

5765 
krb5_îr‹_code
 
KRB5_CALLCONV


5766 
	`krb5_auth_c⁄_gëkey_k
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

5767 
krb5_key
 *
key
);

5782 
krb5_îr‹_code
 
KRB5_CALLCONV


5783 
	`krb5_auth_c⁄_gë£ndsubkey
(
krb5_c⁄ãxt
 
˘x
, 
krb5_auth_c⁄ãxt
 
ac
, 
krb5_keyblock
 **
keyblock
);

5797 
krb5_îr‹_code
 
KRB5_CALLCONV


5798 
	`krb5_auth_c⁄_gë£ndsubkey_k
(
krb5_c⁄ãxt
 
˘x
, 
krb5_auth_c⁄ãxt
 
ac
,

5799 
krb5_key
 *
key
);

5814 
krb5_îr‹_code
 
KRB5_CALLCONV


5815 
	`krb5_auth_c⁄_gëªcvsubkey
(
krb5_c⁄ãxt
 
˘x
, 
krb5_auth_c⁄ãxt
 
ac
, 
krb5_keyblock
 **
keyblock
);

5829 
krb5_îr‹_code
 
KRB5_CALLCONV


5830 
	`krb5_auth_c⁄_gëªcvsubkey_k
(
krb5_c⁄ãxt
 
˘x
, 
krb5_auth_c⁄ãxt
 
ac
, 
krb5_key
 *
key
);

5843 
krb5_îr‹_code
 
KRB5_CALLCONV


5844 
	`krb5_auth_c⁄_£t£ndsubkey
(
krb5_c⁄ãxt
 
˘x
, 
krb5_auth_c⁄ãxt
 
ac
,

5845 
krb5_keyblock
 *
keyblock
);

5861 
krb5_îr‹_code
 
KRB5_CALLCONV


5862 
	`krb5_auth_c⁄_£t£ndsubkey_k
(
krb5_c⁄ãxt
 
˘x
, 
krb5_auth_c⁄ãxt
 
ac
, 
krb5_key
 
key
);

5875 
krb5_îr‹_code
 
KRB5_CALLCONV


5876 
	`krb5_auth_c⁄_£åecvsubkey
(
krb5_c⁄ãxt
 
˘x
, 
krb5_auth_c⁄ãxt
 
ac
,

5877 
krb5_keyblock
 *
keyblock
);

5893 
krb5_îr‹_code
 
KRB5_CALLCONV


5894 
	`krb5_auth_c⁄_£åecvsubkey_k
(
krb5_c⁄ãxt
 
˘x
, 
krb5_auth_c⁄ãxt
 
ac
,

5895 
krb5_key
 
key
);

5897 #i‡
KRB5_DEPRECATED


5899 
KRB5_ATTR_DEPRECATED
 
krb5_îr‹_code
 
KRB5_CALLCONV


5900 
	`krb5_auth_c⁄_gëloˇlsubkey
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

5901 
krb5_keyblock
 **
keyblock
);

5904 
KRB5_ATTR_DEPRECATED
 
krb5_îr‹_code
 
KRB5_CALLCONV


5905 
	`krb5_auth_c⁄_gëªmŸesubkey
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

5906 
krb5_keyblock
 **
keyblock
);

5922 
krb5_îr‹_code
 
KRB5_CALLCONV


5923 
	`krb5_auth_c⁄_gëloˇl£qnumbî
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

5924 
krb5_öt32
 *
£qnumbî
);

5939 
krb5_îr‹_code
 
KRB5_CALLCONV


5940 
	`krb5_auth_c⁄_gëªmŸe£qnumbî
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

5941 
krb5_öt32
 *
£qnumbî
);

5943 #i‡
KRB5_DEPRECATED


5949 
KRB5_ATTR_DEPRECATED
 
krb5_îr‹_code
 
KRB5_CALLCONV


5950 
	`krb5_auth_c⁄_öôive˘‹
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
);

5966 
krb5_îr‹_code
 
KRB5_CALLCONV


5967 
	`krb5_auth_c⁄_£åˇche
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

5968 
krb5_rˇche
 
rˇche
);

5982 
krb5_îr‹_code
 
KRB5_CALLCONV_WRONG


5983 
	`krb5_auth_c⁄_gërˇche
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

5984 
krb5_rˇche
 *
rˇche
);

5998 
krb5_îr‹_code
 
KRB5_CALLCONV


5999 
	`krb5_auth_c⁄_gëauthítiˇt‹
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

6000 
krb5_authítiˇt‹
 **
authítiˇt‹
);

6014 
krb5_îr‹_code
 
KRB5_CALLCONV


6015 
	`krb5_auth_c⁄_£t_ªq_cksumty≥
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

6016 
krb5_cksumty≥
 
cksumty≥
);

6018 
	#KRB5_REALM_BRANCH_CHAR
 '.'

	)

6059 
krb5_îr‹_code
 
KRB5_CALLCONV


6060 
	`krb5_ªad_∑ssw‹d
(
krb5_c⁄ãxt
 
c⁄ãxt
,

6061 c⁄° *
¥om±
, c⁄° *
¥om±2
,

6062 *
ªtu∫_pwd
, *
size_ªtu∫
);

6087 
krb5_îr‹_code
 
KRB5_CALLCONV


6088 
	`krb5_™ame_to_loˇ ame
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_c⁄°_¥öcùÆ
 
™ame
,

6089 
 size_ö
, *
 ame
);

6114 
krb5_îr‹_code
 
KRB5_CALLCONV


6115 
	`krb5_gë_ho°_ªÆm
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° *
ho°
, ***
ªÆm•
);

6132 
krb5_îr‹_code
 
KRB5_CALLCONV


6133 
	`krb5_gë_ÁŒback_ho°_ªÆm
(
krb5_c⁄ãxt
 
c⁄ãxt
,

6134 
krb5_d©a
 *
hd©a
, ***
ªÆm•
);

6147 
krb5_îr‹_code
 
KRB5_CALLCONV


6148 
	`krb5_‰ì_ho°_ªÆm
(
krb5_c⁄ãxt
 
c⁄ãxt
, *c⁄° *
ªÆmli°
);

6163 
krb5_boﬁón
 
KRB5_CALLCONV


6164 
	`krb5_ku£rok
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_¥öcùÆ
 
¥öcùÆ
, c⁄° *
lu£r
);

6185 
krb5_îr‹_code
 
KRB5_CALLCONV


6186 
	`krb5_auth_c⁄_gíaddrs
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_auth_c⁄ãxt
 
auth_c⁄ãxt
,

6187 
öfd
, 
Êags
);

6202 
krb5_îr‹_code
 
KRB5_CALLCONV


6203 
	`krb5_£t_ªÆ_time
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_time°amp
 
£c⁄ds
,

6204 
krb5_öt32
 
mi¸o£c⁄ds
);

6217 
krb5_îr‹_code
 
KRB5_CALLCONV


6218 
	`krb5_gë_time_off£ts
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_time°amp
 *
£c⁄ds
, 
krb5_öt32
 *
mi¸o£c⁄ds
);

6229 
krb5_îr‹_code
 
KRB5_CALLCONV


6230 
	`krb5_°rög_to_í˘y≥
(*
°rög
, 
krb5_í˘y≥
 *
í˘y≥p
);

6240 
krb5_îr‹_code
 
KRB5_CALLCONV


6241 
	`krb5_°rög_to_ß…ty≥
(*
°rög
, 
krb5_öt32
 *
ß…ty≥p
);

6251 
krb5_îr‹_code
 
KRB5_CALLCONV


6252 
	`krb5_°rög_to_cksumty≥
(*
°rög
, 
krb5_cksumty≥
 *
cksumty≥p
);

6262 
krb5_îr‹_code
 
KRB5_CALLCONV


6263 
	`krb5_°rög_to_time°amp
(*
°rög
, 
krb5_time°amp
 *
time°amµ
);

6273 
krb5_îr‹_code
 
KRB5_CALLCONV


6274 
	`krb5_°rög_to_dñèt
(*
°rög
, 
krb5_dñèt
 *
dñèç
);

6285 
krb5_îr‹_code
 
KRB5_CALLCONV


6286 
	`krb5_í˘y≥_to_°rög
(
krb5_í˘y≥
 
í˘y≥
, *
buf„r
, 
size_t
 
buÊí
);

6304 
krb5_îr‹_code
 
KRB5_CALLCONV


6305 
	`krb5_í˘y≥_to_«me
(
krb5_í˘y≥
 
í˘y≥
, 
krb5_boﬁón
 
sh‹ã°
,

6306 *
buf„r
, 
size_t
 
buÊí
);

6317 
krb5_îr‹_code
 
KRB5_CALLCONV


6318 
	`krb5_ß…ty≥_to_°rög
(
krb5_öt32
 
ß…ty≥
, *
buf„r
, 
size_t
 
buÊí
);

6329 
krb5_îr‹_code
 
KRB5_CALLCONV


6330 
	`krb5_cksumty≥_to_°rög
(
krb5_cksumty≥
 
cksumty≥
, *
buf„r
, 
size_t
 
buÊí
);

6344 
krb5_îr‹_code
 
KRB5_CALLCONV


6345 
	`krb5_time°amp_to_°rög
(
krb5_time°amp
 
time°amp
, *
buf„r
, 
size_t
 
buÊí
);

6361 
krb5_îr‹_code
 
KRB5_CALLCONV


6362 
	`krb5_time°amp_to_sf°rög
(
krb5_time°amp
 
time°amp
, *
buf„r
,

6363 
size_t
 
buÊí
, *
∑d
);

6374 
krb5_îr‹_code
 
KRB5_CALLCONV


6375 
	`krb5_dñèt_to_°rög
(
krb5_dñèt
 
dñèt
, *
buf„r
, 
size_t
 
buÊí
);

6378 
	#KRB5_TGS_NAME
 "krbtgt"

	)

6379 
	#KRB5_TGS_NAME_SIZE
 6

	)

6382 
	#KRB5_RECVAUTH_SKIP_VERSION
 0x0001

	)

6383 
	#KRB5_RECVAUTH_BADAUTHVERS
 0x0002

	)

6387 
	s_krb5_¥om±
 {

6388 *
¥om±
;

6389 
hiddí
;

6390 
krb5_d©a
 *
ª∂y
;

6391 } 
	tkrb5_¥om±
;

6394 
krb5_îr‹_code


6395 (
	tKRB5_CALLCONV
 *
	tkrb5_¥om±î_f˘
)(
	tkrb5_c⁄ãxt
 
	tc⁄ãxt
, *
	td©a
,

6396 c⁄° *
	t«me
, c⁄° *
	tb™√r
,

6397 
	tnum_¥om±s
, 
	tkrb5_¥om±
 
	t¥om±s
[]);

6424 
krb5_îr‹_code
 
KRB5_CALLCONV


6425 
	`krb5_¥om±î_posix
(
krb5_c⁄ãxt
 
c⁄ãxt
, *
d©a
, c⁄° *
«me
,

6426 c⁄° *
b™√r
, 
num_¥om±s
,

6427 
krb5_¥om±
 
¥om±s
[]);

6437 
	#KRB5_RESPONDER_QUESTION_PASSWORD
 "∑ssw‹d"

	)

6474 
	#KRB5_RESPONDER_QUESTION_OTP
 "Ÿp"

	)

6479 
	#KRB5_RESPONDER_OTP_FORMAT_DECIMAL
 0

	)

6480 
	#KRB5_RESPONDER_OTP_FORMAT_HEXADECIMAL
 1

	)

6481 
	#KRB5_RESPONDER_OTP_FORMAT_ALPHANUMERIC
 2

	)

6486 
	#KRB5_RESPONDER_OTP_FLAGS_COLLECT_TOKEN
 0x0001

	)

6491 
	#KRB5_RESPONDER_OTP_FLAGS_COLLECT_PIN
 0x0002

	)

6498 
	#KRB5_RESPONDER_OTP_FLAGS_NEXTOTP
 0x0004

	)

6507 
	#KRB5_RESPONDER_OTP_FLAGS_SEPARATE_PIN
 0x0008

	)

6533 
	#KRB5_RESPONDER_QUESTION_PKINIT
 "pköô"

	)

6539 
	#KRB5_RESPONDER_PKINIT_FLAGS_TOKEN_USER_PIN_COUNT_LOW
 (1 << 0)

	)

6545 
	#KRB5_RESPONDER_PKINIT_FLAGS_TOKEN_USER_PIN_FINAL_TRY
 (1 << 1)

	)

6551 
	#KRB5_RESPONDER_PKINIT_FLAGS_TOKEN_USER_PIN_LOCKED
 (1 << 2)

	)

6566 
krb5_ª•⁄dî_c⁄ãxt_°
 *
	tkrb5_ª•⁄dî_c⁄ãxt
;

6582 c⁄° * c⁄° * 
KRB5_CALLCONV


6583 
	`krb5_ª•⁄dî_li°_que°i⁄s
(
krb5_c⁄ãxt
 
˘x
, 
krb5_ª•⁄dî_c⁄ãxt
 
r˘x
);

6601 c⁄° * 
KRB5_CALLCONV


6602 
	`krb5_ª•⁄dî_gë_chÆÀnge
(
krb5_c⁄ãxt
 
˘x
, 
krb5_ª•⁄dî_c⁄ãxt
 
r˘x
,

6603 c⁄° *
que°i⁄
);

6620 
krb5_îr‹_code
 
KRB5_CALLCONV


6621 
	`krb5_ª•⁄dî_£t_™swî
(
krb5_c⁄ãxt
 
˘x
, 
krb5_ª•⁄dî_c⁄ãxt
 
r˘x
,

6622 c⁄° *
que°i⁄
, c⁄° *
™swî
);

6644 
krb5_îr‹_code


6645 (
	tKRB5_CALLCONV
 *
	tkrb5_ª•⁄dî_‚
)(
	tkrb5_c⁄ãxt
 
	t˘x
, *
	td©a
,

6646 
	tkrb5_ª•⁄dî_c⁄ãxt
 
	tr˘x
);

6648 
	s_krb5_ª•⁄dî_Ÿp_tokíöfo
 {

6649 
krb5_Êags
 
Êags
;

6650 
krb5_öt32
 
f‹m©
;

6651 
krb5_öt32
 
Àngth
;

6652 *
víd‹
;

6653 *
chÆÀnge
;

6654 *
tokí_id
;

6655 *
Æg_id
;

6656 } 
	tkrb5_ª•⁄dî_Ÿp_tokíöfo
;

6658 
	s_krb5_ª•⁄dî_Ÿp_chÆÀnge
 {

6659 *
£rvi˚
;

6660 
krb5_ª•⁄dî_Ÿp_tokíöfo
 **
tokíöfo
;

6661 } 
	tkrb5_ª•⁄dî_Ÿp_chÆÀnge
;

6680 
krb5_îr‹_code
 
KRB5_CALLCONV


6681 
	`krb5_ª•⁄dî_Ÿp_gë_chÆÀnge
(
krb5_c⁄ãxt
 
˘x
,

6682 
krb5_ª•⁄dî_c⁄ãxt
 
r˘x
,

6683 
krb5_ª•⁄dî_Ÿp_chÆÀnge
 **
chl
);

6696 
krb5_îr‹_code
 
KRB5_CALLCONV


6697 
	`krb5_ª•⁄dî_Ÿp_£t_™swî
(
krb5_c⁄ãxt
 
˘x
, 
krb5_ª•⁄dî_c⁄ãxt
 
r˘x
,

6698 
size_t
 
ti
, c⁄° *
vÆue
, c⁄° *
pö
);

6709 
KRB5_CALLCONV


6710 
	`krb5_ª•⁄dî_Ÿp_chÆÀnge_‰ì
(
krb5_c⁄ãxt
 
˘x
,

6711 
krb5_ª•⁄dî_c⁄ãxt
 
r˘x
,

6712 
krb5_ª•⁄dî_Ÿp_chÆÀnge
 *
chl
);

6714 
	s_krb5_ª•⁄dî_pköô_idítôy
 {

6715 *
idítôy
;

6716 
krb5_öt32
 
tokí_Êags
;

6717 } 
	tkrb5_ª•⁄dî_pköô_idítôy
;

6719 
	s_krb5_ª•⁄dî_pköô_chÆÀnge
 {

6720 
krb5_ª•⁄dî_pköô_idítôy
 **
idítôõs
;

6721 } 
	tkrb5_ª•⁄dî_pköô_chÆÀnge
;

6740 
krb5_îr‹_code
 
KRB5_CALLCONV


6741 
	`krb5_ª•⁄dî_pköô_gë_chÆÀnge
(
krb5_c⁄ãxt
 
˘x
,

6742 
krb5_ª•⁄dî_c⁄ãxt
 
r˘x
,

6743 
krb5_ª•⁄dî_pköô_chÆÀnge
 **
chl_out
);

6755 
krb5_îr‹_code
 
KRB5_CALLCONV


6756 
	`krb5_ª•⁄dî_pköô_£t_™swî
(
krb5_c⁄ãxt
 
˘x
, 
krb5_ª•⁄dî_c⁄ãxt
 
r˘x
,

6757 c⁄° *
idítôy
, c⁄° *
pö
);

6768 
KRB5_CALLCONV


6769 
	`krb5_ª•⁄dî_pköô_chÆÀnge_‰ì
(
krb5_c⁄ãxt
 
˘x
,

6770 
krb5_ª•⁄dî_c⁄ãxt
 
r˘x
,

6771 
krb5_ª•⁄dî_pköô_chÆÀnge
 *
chl
);

6774 
	s_krb5_gë_öô_¸eds_›t
 {

6775 
krb5_Êags
 
Êags
;

6776 
krb5_dñèt
 
tkt_li„
;

6777 
krb5_dñèt
 
ª√w_li„
;

6778 
f‹w¨dabÀ
;

6779 
¥oxübÀ
;

6780 
krb5_í˘y≥
 *
ëy≥_li°
;

6781 
ëy≥_li°_Àngth
;

6782 
krb5_addªss
 **
addªss_li°
;

6783 
krb5_¥óuthty≥
 *
¥óuth_li°
;

6784 
¥óuth_li°_Àngth
;

6785 
krb5_d©a
 *
ß…
;

6786 } 
	tkrb5_gë_öô_¸eds_›t
;

6788 
	#KRB5_GET_INIT_CREDS_OPT_TKT_LIFE
 0x0001

	)

6789 
	#KRB5_GET_INIT_CREDS_OPT_RENEW_LIFE
 0x0002

	)

6790 
	#KRB5_GET_INIT_CREDS_OPT_FORWARDABLE
 0x0004

	)

6791 
	#KRB5_GET_INIT_CREDS_OPT_PROXIABLE
 0x0008

	)

6792 
	#KRB5_GET_INIT_CREDS_OPT_ETYPE_LIST
 0x0010

	)

6793 
	#KRB5_GET_INIT_CREDS_OPT_ADDRESS_LIST
 0x0020

	)

6794 
	#KRB5_GET_INIT_CREDS_OPT_PREAUTH_LIST
 0x0040

	)

6795 
	#KRB5_GET_INIT_CREDS_OPT_SALT
 0x0080

	)

6796 
	#KRB5_GET_INIT_CREDS_OPT_CHG_PWD_PRMPT
 0x0100

	)

6797 
	#KRB5_GET_INIT_CREDS_OPT_CANONICALIZE
 0x0200

	)

6798 
	#KRB5_GET_INIT_CREDS_OPT_ANONYMOUS
 0x0400

	)

6814 
krb5_îr‹_code
 
KRB5_CALLCONV


6815 
	`krb5_gë_öô_¸eds_›t_Æloc
(
krb5_c⁄ãxt
 
c⁄ãxt
,

6816 
krb5_gë_öô_¸eds_›t
 **
›t
);

6826 
KRB5_CALLCONV


6827 
	`krb5_gë_öô_¸eds_›t_‰ì
(
krb5_c⁄ãxt
 
c⁄ãxt
,

6828 
krb5_gë_öô_¸eds_›t
 *
›t
);

6831 
KRB5_CALLCONV


6832 
	`krb5_gë_öô_¸eds_›t_öô
(
krb5_gë_öô_¸eds_›t
 *
›t
);

6840 
KRB5_CALLCONV


6841 
	`krb5_gë_öô_¸eds_›t_£t_tkt_li„
(
krb5_gë_öô_¸eds_›t
 *
›t
,

6842 
krb5_dñèt
 
tkt_li„
);

6850 
KRB5_CALLCONV


6851 
	`krb5_gë_öô_¸eds_›t_£t_ª√w_li„
(
krb5_gë_öô_¸eds_›t
 *
›t
,

6852 
krb5_dñèt
 
ª√w_li„
);

6860 
KRB5_CALLCONV


6861 
	`krb5_gë_öô_¸eds_›t_£t_f‹w¨dabÀ
(
krb5_gë_öô_¸eds_›t
 *
›t
,

6862 
f‹w¨dabÀ
);

6870 
KRB5_CALLCONV


6871 
	`krb5_gë_öô_¸eds_›t_£t_¥oxübÀ
(
krb5_gë_öô_¸eds_›t
 *
›t
,

6872 
¥oxübÀ
);

6880 
KRB5_CALLCONV


6881 
	`krb5_gë_öô_¸eds_›t_£t_ˇn⁄iˇlize
(
krb5_gë_öô_¸eds_›t
 *
›t
,

6882 
ˇn⁄iˇlize
);

6895 
KRB5_CALLCONV


6896 
	`krb5_gë_öô_¸eds_›t_£t_™⁄ymous
(
krb5_gë_öô_¸eds_›t
 *
›t
,

6897 
™⁄ymous
);

6906 
KRB5_CALLCONV


6907 
	`krb5_gë_öô_¸eds_›t_£t_ëy≥_li°
(
krb5_gë_öô_¸eds_›t
 *
›t
,

6908 
krb5_í˘y≥
 *
ëy≥_li°
,

6909 
ëy≥_li°_Àngth
);

6917 
KRB5_CALLCONV


6918 
	`krb5_gë_öô_¸eds_›t_£t_addªss_li°
(
krb5_gë_öô_¸eds_›t
 *
›t
,

6919 
krb5_addªss
 **
addªs£s
);

6932 
KRB5_CALLCONV


6933 
	`krb5_gë_öô_¸eds_›t_£t_¥óuth_li°
(
krb5_gë_öô_¸eds_›t
 *
›t
,

6934 
krb5_¥óuthty≥
 *
¥óuth_li°
,

6935 
¥óuth_li°_Àngth
);

6948 
KRB5_CALLCONV


6949 
	`krb5_gë_öô_¸eds_›t_£t_ß…
(
krb5_gë_öô_¸eds_›t
 *
›t
,

6950 
krb5_d©a
 *
ß…
);

6962 
KRB5_CALLCONV


6963 
	`krb5_gë_öô_¸eds_›t_£t_ch™ge_∑ssw‹d_¥om±
(
krb5_gë_öô_¸eds_›t
 *
›t
,

6964 
¥om±
);

6967 
	s_krb5_gic_›t_∑_d©a
 {

6968 *
©å
;

6969 *
vÆue
;

6970 } 
	tkrb5_gic_›t_∑_d©a
;

6984 
krb5_îr‹_code
 
KRB5_CALLCONV


6985 
	`krb5_gë_öô_¸eds_›t_£t_∑
(
krb5_c⁄ãxt
 
c⁄ãxt
,

6986 
krb5_gë_öô_¸eds_›t
 *
›t
, c⁄° *
©å
,

6987 c⁄° *
vÆue
);

7004 
krb5_îr‹_code
 
KRB5_CALLCONV


7005 
	`krb5_gë_öô_¸eds_›t_£t_Á°_cˇche_«me
(
krb5_c⁄ãxt
 
c⁄ãxt
,

7006 
krb5_gë_öô_¸eds_›t
 *
›t
,

7007 c⁄° *
Á°_cˇche_«me
);

7021 
krb5_îr‹_code
 
KRB5_CALLCONV


7022 
	`krb5_gë_öô_¸eds_›t_£t_Á°_cˇche
(
krb5_c⁄ãxt
 
c⁄ãxt
,

7023 
krb5_gë_öô_¸eds_›t
 *
›t
,

7024 
krb5_cˇche
 
cˇche
);

7042 
krb5_îr‹_code
 
KRB5_CALLCONV


7043 
	`krb5_gë_öô_¸eds_›t_£t_ö_cˇche
(
krb5_c⁄ãxt
 
c⁄ãxt
,

7044 
krb5_gë_öô_¸eds_›t
 *
›t
,

7045 
krb5_cˇche
 
cˇche
);

7060 
krb5_îr‹_code
 
KRB5_CALLCONV


7061 
	`krb5_gë_öô_¸eds_›t_£t_out_cˇche
(
krb5_c⁄ãxt
 
c⁄ãxt
,

7062 
krb5_gë_öô_¸eds_›t
 *
›t
,

7063 
krb5_cˇche
 
cˇche
);

7078 
krb5_îr‹_code
 
KRB5_CALLCONV


7079 
	`krb5_gë_öô_¸eds_›t_£t_Á°_Êags
(
krb5_c⁄ãxt
 
c⁄ãxt
,

7080 
krb5_gë_öô_¸eds_›t
 *
›t
,

7081 
krb5_Êags
 
Êags
);

7093 
krb5_îr‹_code
 
KRB5_CALLCONV


7094 
	`krb5_gë_öô_¸eds_›t_gë_Á°_Êags
(
krb5_c⁄ãxt
 
c⁄ãxt
,

7095 
krb5_gë_öô_¸eds_›t
 *
›t
,

7096 
krb5_Êags
 *
out_Êags
);

7099 
	#KRB5_FAST_REQUIRED
 0x0001

	)

7102 (
	tKRB5_CALLCONV
 *
	tkrb5_expúe_ˇŒback_func
)(
	tkrb5_c⁄ãxt
 
	tc⁄ãxt
, *
	td©a
,

7103 
	tkrb5_time°amp
 
	t∑ssw‹d_expú©i⁄
,

7104 
	tkrb5_time°amp
 
	taccou¡_expú©i⁄
,

7105 
	tkrb5_boﬁón
 
	tis_œ°_ªq
);

7146 
krb5_îr‹_code
 
KRB5_CALLCONV


7147 
	`krb5_gë_öô_¸eds_›t_£t_expúe_ˇŒback
(
krb5_c⁄ãxt
 
c⁄ãxt
,

7148 
krb5_gë_öô_¸eds_›t
 *
›t
,

7149 
krb5_expúe_ˇŒback_func
 
cb
,

7150 *
d©a
);

7162 
krb5_îr‹_code
 
KRB5_CALLCONV


7163 
	`krb5_gë_öô_¸eds_›t_£t_ª•⁄dî
(
krb5_c⁄ãxt
 
c⁄ãxt
,

7164 
krb5_gë_öô_¸eds_›t
 *
›t
,

7165 
krb5_ª•⁄dî_‚
 
ª•⁄dî
, *
d©a
);

7211 
krb5_îr‹_code
 
KRB5_CALLCONV


7212 
	`krb5_gë_öô_¸eds_∑ssw‹d
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_¸eds
 *
¸eds
,

7213 
krb5_¥öcùÆ
 
˛õ¡
, c⁄° *
∑ssw‹d
,

7214 
krb5_¥om±î_f˘
 
¥om±î
, *
d©a
,

7215 
krb5_dñèt
 
°¨t_time
,

7216 c⁄° *
ö_tkt_£rvi˚
,

7217 
krb5_gë_öô_¸eds_›t
 *
k5_gic_›ti⁄s
);

7219 
_krb5_öô_¸eds_c⁄ãxt
;

7220 
_krb5_öô_¸eds_c⁄ãxt
 *
	tkrb5_öô_¸eds_c⁄ãxt
;

7222 
	#KRB5_INIT_CREDS_STEP_FLAG_CONTINUE
 0x1

	)

7230 
KRB5_CALLCONV


7231 
	`krb5_öô_¸eds_‰ì
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_öô_¸eds_c⁄ãxt
 
˘x
);

7245 
krb5_îr‹_code
 
KRB5_CALLCONV


7246 
	`krb5_öô_¸eds_gë
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_öô_¸eds_c⁄ãxt
 
˘x
);

7262 
krb5_îr‹_code
 
KRB5_CALLCONV


7263 
	`krb5_öô_¸eds_gë_¸eds
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_öô_¸eds_c⁄ãxt
 
˘x
,

7264 
krb5_¸eds
 *
¸eds
);

7275 
krb5_îr‹_code
 
KRB5_CALLCONV


7276 
	`krb5_öô_¸eds_gë_îr‹
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_öô_¸eds_c⁄ãxt
 
˘x
,

7277 
krb5_îr‹
 **
îr‹
);

7295 
krb5_îr‹_code
 
KRB5_CALLCONV


7296 
	`krb5_öô_¸eds_öô
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_¥öcùÆ
 
˛õ¡
,

7297 
krb5_¥om±î_f˘
 
¥om±î
, *
d©a
,

7298 
krb5_dñèt
 
°¨t_time
, 
krb5_gë_öô_¸eds_›t
 *
›ti⁄s
,

7299 
krb5_öô_¸eds_c⁄ãxt
 *
˘x
);

7313 
krb5_îr‹_code
 
KRB5_CALLCONV


7314 
	`krb5_öô_¸eds_£t_keyèb
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_öô_¸eds_c⁄ãxt
 
˘x
,

7315 
krb5_keyèb
 
keyèb
);

7344 
krb5_îr‹_code
 
KRB5_CALLCONV


7345 
	`krb5_öô_¸eds_°ï
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_öô_¸eds_c⁄ãxt
 
˘x
,

7346 
krb5_d©a
 *
ö
, krb5_d©®*
out
, krb5_d©®*
ªÆm
,

7347 *
Êags
);

7361 
krb5_îr‹_code
 
KRB5_CALLCONV


7362 
	`krb5_öô_¸eds_£t_∑ssw‹d
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_öô_¸eds_c⁄ãxt
 
˘x
,

7363 c⁄° *
∑ssw‹d
);

7378 
krb5_îr‹_code
 
KRB5_CALLCONV


7379 
	`krb5_öô_¸eds_£t_£rvi˚
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_öô_¸eds_c⁄ãxt
 
˘x
,

7380 c⁄° *
£rvi˚
);

7394 
krb5_îr‹_code
 
KRB5_CALLCONV


7395 
	`krb5_öô_¸eds_gë_times
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_öô_¸eds_c⁄ãxt
 
˘x
,

7396 
krb5_tickë_times
 *
times
);

7398 
_krb5_tkt_¸eds_c⁄ãxt
;

7399 
_krb5_tkt_¸eds_c⁄ãxt
 *
	tkrb5_tkt_¸eds_c⁄ãxt
;

7425 
krb5_îr‹_code
 
KRB5_CALLCONV


7426 
	`krb5_tkt_¸eds_öô
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
cˇche
,

7427 
krb5_¸eds
 *
¸eds
, 
krb5_Êags
 
›ti⁄s
,

7428 
krb5_tkt_¸eds_c⁄ãxt
 *
˘x
);

7444 
krb5_îr‹_code
 
KRB5_CALLCONV


7445 
	`krb5_tkt_¸eds_gë
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_tkt_¸eds_c⁄ãxt
 
˘x
);

7463 
krb5_îr‹_code
 
KRB5_CALLCONV


7464 
	`krb5_tkt_¸eds_gë_¸eds
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_tkt_¸eds_c⁄ãxt
 
˘x
,

7465 
krb5_¸eds
 *
¸eds
);

7475 
KRB5_CALLCONV


7476 
	`krb5_tkt_¸eds_‰ì
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_tkt_¸eds_c⁄ãxt
 
˘x
);

7478 
	#KRB5_TKT_CREDS_STEP_FLAG_CONTINUE
 0x1

	)

7508 
krb5_îr‹_code
 
KRB5_CALLCONV


7509 
	`krb5_tkt_¸eds_°ï
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_tkt_¸eds_c⁄ãxt
 
˘x
,

7510 
krb5_d©a
 *
ö
, krb5_d©®*
out
, krb5_d©®*
ªÆm
,

7511 *
Êags
);

7527 
krb5_îr‹_code
 
KRB5_CALLCONV


7528 
	`krb5_tkt_¸eds_gë_times
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_tkt_¸eds_c⁄ãxt
 
˘x
,

7529 
krb5_tickë_times
 *
times
);

7555 
krb5_îr‹_code
 
KRB5_CALLCONV


7556 
	`krb5_gë_öô_¸eds_keyèb
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_¸eds
 *
¸eds
,

7557 
krb5_¥öcùÆ
 
˛õ¡
, 
krb5_keyèb
 
¨g_keyèb
,

7558 
krb5_dñèt
 
°¨t_time
, c⁄° *
ö_tkt_£rvi˚
,

7559 
krb5_gë_öô_¸eds_›t
 *
k5_gic_›ti⁄s
);

7561 
	s_krb5_vîify_öô_¸eds_›t
 {

7562 
krb5_Êags
 
Êags
;

7563 
≠_ªq_noÁû
;

7564 } 
	tkrb5_vîify_öô_¸eds_›t
;

7566 
	#KRB5_VERIFY_INIT_CREDS_OPT_AP_REQ_NOFAIL
 0x0001

	)

7573 
KRB5_CALLCONV


7574 
	`krb5_vîify_öô_¸eds_›t_öô
(
krb5_vîify_öô_¸eds_›t
 *
k5_vic_›ti⁄s
);

7591 
KRB5_CALLCONV


7592 
	`krb5_vîify_öô_¸eds_›t_£t_≠_ªq_noÁû
(
krb5_vîify_öô_¸eds_›t
 * 
k5_vic_›ti⁄s
,

7593 
≠_ªq_noÁû
);

7626 
krb5_îr‹_code
 
KRB5_CALLCONV


7627 
	`krb5_vîify_öô_¸eds
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_¸eds
 *
¸eds
,

7628 
krb5_¥öcùÆ
 
£rvî
, 
krb5_keyèb
 
keyèb
,

7629 
krb5_cˇche
 *
cˇche
,

7630 
krb5_vîify_öô_¸eds_›t
 *
›ti⁄s
);

7665 
krb5_îr‹_code
 
KRB5_CALLCONV


7666 
	`krb5_gë_vÆid©ed_¸eds
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_¸eds
 *
¸eds
,

7667 
krb5_¥öcùÆ
 
˛õ¡
, 
krb5_cˇche
 
cˇche
,

7668 c⁄° *
ö_tkt_£rvi˚
);

7691 
krb5_îr‹_code
 
KRB5_CALLCONV


7692 
	`krb5_gë_ª√wed_¸eds
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_¸eds
 *
¸eds
,

7693 
krb5_¥öcùÆ
 
˛õ¡
, 
krb5_cˇche
 
cˇche
,

7694 c⁄° *
ö_tkt_£rvi˚
);

7704 
krb5_îr‹_code
 
KRB5_CALLCONV


7705 
	`krb5_decode_tickë
(c⁄° 
krb5_d©a
 *
code
, 
krb5_tickë
 **
ªp
);

7722 
KRB5_CALLCONV


7723 
	`krb5_≠pdeÁu…_°rög
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° *
≠≤ame
,

7724 c⁄° 
krb5_d©a
 *
ªÆm
, c⁄° *
›ti⁄
,

7725 c⁄° *
deÁu…_vÆue
, ** 
ªt_vÆue
);

7742 
KRB5_CALLCONV


7743 
	`krb5_≠pdeÁu…_boﬁón
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° *
≠≤ame
,

7744 c⁄° 
krb5_d©a
 *
ªÆm
, c⁄° *
›ti⁄
,

7745 
deÁu…_vÆue
, *
ªt_vÆue
);

7751 
	#KRB5_PROMPT_TYPE_PASSWORD
 0x1

	)

7753 
	#KRB5_PROMPT_TYPE_NEW_PASSWORD
 0x2

	)

7755 
	#KRB5_PROMPT_TYPE_NEW_PASSWORD_AGAIN
 0x3

	)

7757 
	#KRB5_PROMPT_TYPE_PREAUTH
 0x4

	)

7759 
krb5_öt32
 
	tkrb5_¥om±_ty≥
;

7774 
krb5_¥om±_ty≥
* 
KRB5_CALLCONV


7775 
	`krb5_gë_¥om±_ty≥s
(
krb5_c⁄ãxt
 
c⁄ãxt
);

7786 
KRB5_CALLCONV_C


7787 
	$krb5_£t_îr‹_mesßge
(
krb5_c⁄ãxt
 
˘x
, 
krb5_îr‹_code
 
code
, c⁄° *
fmt
, ...)

7788 #i‡!
	`deföed
(
__˝lu•lus
Ë&& (
__GNUC__
 > 2)

7789 
	`__©åibuã__
((
	$__f‹m©__
(
__¥ötf__
, 3, 4)))

7801 
KRB5_CALLCONV


7802 
	$krb5_v£t_îr‹_mesßge
(
krb5_c⁄ãxt
 
˘x
, 
krb5_îr‹_code
 
code
,

7803 c⁄° *
fmt
, 
va_li°
 
¨gs
)

7804 #i‡!
	`deföed
(
__˝lu•lus
Ë&& (
__GNUC__
 > 2)

7805 
	`__©åibuã__
((
	$__f‹m©__
(
__¥ötf__
, 3, 0)))

7815 
KRB5_CALLCONV


7816 
	`krb5_c›y_îr‹_mesßge
(
krb5_c⁄ãxt
 
de°_˘x
, krb5_c⁄ãxà
§c_˘x
);

7838 c⁄° * 
KRB5_CALLCONV


7839 
	`krb5_gë_îr‹_mesßge
(
krb5_c⁄ãxt
 
˘x
, 
krb5_îr‹_code
 
code
);

7847 
KRB5_CALLCONV


7848 
	`krb5_‰ì_îr‹_mesßge
(
krb5_c⁄ãxt
 
˘x
, c⁄° *
msg
);

7858 
KRB5_CALLCONV


7859 
	`krb5_˛ór_îr‹_mesßge
(
krb5_c⁄ãxt
 
˘x
);

7873 
krb5_îr‹_code
 
KRB5_CALLCONV


7874 
	`krb5_decode_authd©a_c⁄èöî
(
krb5_c⁄ãxt
 
c⁄ãxt
,

7875 
krb5_authd©©y≥
 
ty≥
,

7876 c⁄° 
krb5_authd©a
 *
c⁄èöî
,

7877 
krb5_authd©a
 ***
authd©a
);

7892 
krb5_îr‹_code
 
KRB5_CALLCONV


7893 
	`krb5_ícode_authd©a_c⁄èöî
(
krb5_c⁄ãxt
 
c⁄ãxt
,

7894 
krb5_authd©©y≥
 
ty≥
,

7895 
krb5_authd©a
 * c⁄°*
authd©a
,

7896 
krb5_authd©a
 ***
c⁄èöî
);

7914 
krb5_îr‹_code
 
KRB5_CALLCONV


7915 
	`krb5_make_authd©a_kdc_issued
(
krb5_c⁄ãxt
 
c⁄ãxt
,

7916 c⁄° 
krb5_keyblock
 *
key
,

7917 
krb5_c⁄°_¥öcùÆ
 
issuî
,

7918 
krb5_authd©a
 *c⁄° *
authd©a
,

7919 
krb5_authd©a
 ***
ad_kdcissued
);

7935 
krb5_îr‹_code
 
KRB5_CALLCONV


7936 
	`krb5_vîify_authd©a_kdc_issued
(
krb5_c⁄ãxt
 
c⁄ãxt
,

7937 c⁄° 
krb5_keyblock
 *
key
,

7938 c⁄° 
krb5_authd©a
 *
ad_kdcissued
,

7939 
krb5_¥öcùÆ
 *
issuî
,

7940 
krb5_authd©a
 ***
authd©a
);

7947 
	#KRB5_PAC_LOGON_INFO
 1

	)

7948 
	#KRB5_PAC_CREDENTIALS_INFO
 2

	)

7949 
	#KRB5_PAC_SERVER_CHECKSUM
 6

	)

7950 
	#KRB5_PAC_PRIVSVR_CHECKSUM
 7

	)

7951 
	#KRB5_PAC_CLIENT_INFO
 10

	)

7952 
	#KRB5_PAC_DELEGATION_INFO
 11

	)

7953 
	#KRB5_PAC_UPN_DNS_INFO
 12

	)

7955 
krb5_∑c_d©a
;

7957 
krb5_∑c_d©a
 *
	tkrb5_∑c
;

7981 
krb5_îr‹_code
 
KRB5_CALLCONV


7982 
	`krb5_∑c_add_buf„r
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_∑c
 
∑c
, 
krb5_ui_4
 
ty≥
,

7983 c⁄° 
krb5_d©a
 *
d©a
);

7993 
KRB5_CALLCONV


7994 
	`krb5_∑c_‰ì
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_∑c
 
∑c
);

8008 
krb5_îr‹_code
 
KRB5_CALLCONV


8009 
	`krb5_∑c_gë_buf„r
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_∑c
 
∑c
, 
krb5_ui_4
 
ty≥
,

8010 
krb5_d©a
 *
d©a
);

8022 
krb5_îr‹_code
 
KRB5_CALLCONV


8023 
	`krb5_∑c_gë_ty≥s
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_∑c
 
∑c
, 
size_t
 *
Àn
,

8024 
krb5_ui_4
 **
ty≥s
);

8036 
krb5_îr‹_code
 
KRB5_CALLCONV


8037 
	`krb5_∑c_öô
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_∑c
 *
∑c
);

8051 
krb5_îr‹_code
 
KRB5_CALLCONV


8052 
	`krb5_∑c_∑r£
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° *
±r
, 
size_t
 
Àn
,

8053 
krb5_∑c
 *
∑c
);

8081 
krb5_îr‹_code
 
KRB5_CALLCONV


8082 
	`krb5_∑c_vîify
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_∑c
 
∑c
,

8083 
krb5_time°amp
 
authtime
, 
krb5_c⁄°_¥öcùÆ
 
¥öcùÆ
,

8084 c⁄° 
krb5_keyblock
 *
£rvî
, c⁄° krb5_keyblock *
¥ivsvr
);

8104 
krb5_îr‹_code
 
KRB5_CALLCONV


8105 
	`krb5_∑c_sign
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_∑c
 
∑c
, 
krb5_time°amp
 
authtime
,

8106 
krb5_c⁄°_¥öcùÆ
 
¥öcùÆ
, c⁄° 
krb5_keyblock
 *
£rvî_key
,

8107 c⁄° 
krb5_keyblock
 *
¥ivsvr_key
, 
krb5_d©a
 *
d©a
);

8120 
krb5_îr‹_code
 
KRB5_CALLCONV


8121 
	`krb5_Ælow_wók_¸y±o
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_boﬁón
 
íabÀ
);

8130 
	s_krb5_åa˚_öfo
 {

8131 c⁄° *
mesßge
;

8132 } 
	tkrb5_åa˚_öfo
;

8135 (
	tKRB5_CALLCONV
 *
	tkrb5_åa˚_ˇŒback
)(
	tkrb5_c⁄ãxt
 
	tc⁄ãxt
,

8136 c⁄° 
	tkrb5_åa˚_öfo
 *
	töfo
,

8137 *
	tcb_d©a
);

8162 
krb5_îr‹_code
 
KRB5_CALLCONV


8163 
	`krb5_£t_åa˚_ˇŒback
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_åa˚_ˇŒback
 
‚
,

8164 *
cb_d©a
);

8182 
krb5_îr‹_code
 
KRB5_CALLCONV


8183 
	`krb5_£t_åa˚_fûíame
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° *
fûíame
);

8185 #i‡
TARGET_OS_MAC


8186 #¥agm®
	`∑ck
(
p›
)

8189 
KRB5INT_END_DECLS


8193 
	#krb5_c⁄°
 c⁄°

	)

8195 #unde‡
KRB5_ATTR_DEPRECATED


8205 
	~<ë/com_îr.h
>

8207 
	#KRB5KDC_ERR_NONE
 (-1765328384L)

	)

8208 
	#KRB5KDC_ERR_NAME_EXP
 (-1765328383L)

	)

8209 
	#KRB5KDC_ERR_SERVICE_EXP
 (-1765328382L)

	)

8210 
	#KRB5KDC_ERR_BAD_PVNO
 (-1765328381L)

	)

8211 
	#KRB5KDC_ERR_C_OLD_MAST_KVNO
 (-1765328380L)

	)

8212 
	#KRB5KDC_ERR_S_OLD_MAST_KVNO
 (-1765328379L)

	)

8213 
	#KRB5KDC_ERR_C_PRINCIPAL_UNKNOWN
 (-1765328378L)

	)

8214 
	#KRB5KDC_ERR_S_PRINCIPAL_UNKNOWN
 (-1765328377L)

	)

8215 
	#KRB5KDC_ERR_PRINCIPAL_NOT_UNIQUE
 (-1765328376L)

	)

8216 
	#KRB5KDC_ERR_NULL_KEY
 (-1765328375L)

	)

8217 
	#KRB5KDC_ERR_CANNOT_POSTDATE
 (-1765328374L)

	)

8218 
	#KRB5KDC_ERR_NEVER_VALID
 (-1765328373L)

	)

8219 
	#KRB5KDC_ERR_POLICY
 (-1765328372L)

	)

8220 
	#KRB5KDC_ERR_BADOPTION
 (-1765328371L)

	)

8221 
	#KRB5KDC_ERR_ETYPE_NOSUPP
 (-1765328370L)

	)

8222 
	#KRB5KDC_ERR_SUMTYPE_NOSUPP
 (-1765328369L)

	)

8223 
	#KRB5KDC_ERR_PADATA_TYPE_NOSUPP
 (-1765328368L)

	)

8224 
	#KRB5KDC_ERR_TRTYPE_NOSUPP
 (-1765328367L)

	)

8225 
	#KRB5KDC_ERR_CLIENT_REVOKED
 (-1765328366L)

	)

8226 
	#KRB5KDC_ERR_SERVICE_REVOKED
 (-1765328365L)

	)

8227 
	#KRB5KDC_ERR_TGT_REVOKED
 (-1765328364L)

	)

8228 
	#KRB5KDC_ERR_CLIENT_NOTYET
 (-1765328363L)

	)

8229 
	#KRB5KDC_ERR_SERVICE_NOTYET
 (-1765328362L)

	)

8230 
	#KRB5KDC_ERR_KEY_EXP
 (-1765328361L)

	)

8231 
	#KRB5KDC_ERR_PREAUTH_FAILED
 (-1765328360L)

	)

8232 
	#KRB5KDC_ERR_PREAUTH_REQUIRED
 (-1765328359L)

	)

8233 
	#KRB5KDC_ERR_SERVER_NOMATCH
 (-1765328358L)

	)

8234 
	#KRB5KDC_ERR_MUST_USE_USER2USER
 (-1765328357L)

	)

8235 
	#KRB5KDC_ERR_PATH_NOT_ACCEPTED
 (-1765328356L)

	)

8236 
	#KRB5KDC_ERR_SVC_UNAVAILABLE
 (-1765328355L)

	)

8237 
	#KRB5PLACEHOLD_30
 (-1765328354L)

	)

8238 
	#KRB5KRB_AP_ERR_BAD_INTEGRITY
 (-1765328353L)

	)

8239 
	#KRB5KRB_AP_ERR_TKT_EXPIRED
 (-1765328352L)

	)

8240 
	#KRB5KRB_AP_ERR_TKT_NYV
 (-1765328351L)

	)

8241 
	#KRB5KRB_AP_ERR_REPEAT
 (-1765328350L)

	)

8242 
	#KRB5KRB_AP_ERR_NOT_US
 (-1765328349L)

	)

8243 
	#KRB5KRB_AP_ERR_BADMATCH
 (-1765328348L)

	)

8244 
	#KRB5KRB_AP_ERR_SKEW
 (-1765328347L)

	)

8245 
	#KRB5KRB_AP_ERR_BADADDR
 (-1765328346L)

	)

8246 
	#KRB5KRB_AP_ERR_BADVERSION
 (-1765328345L)

	)

8247 
	#KRB5KRB_AP_ERR_MSG_TYPE
 (-1765328344L)

	)

8248 
	#KRB5KRB_AP_ERR_MODIFIED
 (-1765328343L)

	)

8249 
	#KRB5KRB_AP_ERR_BADORDER
 (-1765328342L)

	)

8250 
	#KRB5KRB_AP_ERR_ILL_CR_TKT
 (-1765328341L)

	)

8251 
	#KRB5KRB_AP_ERR_BADKEYVER
 (-1765328340L)

	)

8252 
	#KRB5KRB_AP_ERR_NOKEY
 (-1765328339L)

	)

8253 
	#KRB5KRB_AP_ERR_MUT_FAIL
 (-1765328338L)

	)

8254 
	#KRB5KRB_AP_ERR_BADDIRECTION
 (-1765328337L)

	)

8255 
	#KRB5KRB_AP_ERR_METHOD
 (-1765328336L)

	)

8256 
	#KRB5KRB_AP_ERR_BADSEQ
 (-1765328335L)

	)

8257 
	#KRB5KRB_AP_ERR_INAPP_CKSUM
 (-1765328334L)

	)

8258 
	#KRB5KRB_AP_PATH_NOT_ACCEPTED
 (-1765328333L)

	)

8259 
	#KRB5KRB_ERR_RESPONSE_TOO_BIG
 (-1765328332L)

	)

8260 
	#KRB5PLACEHOLD_53
 (-1765328331L)

	)

8261 
	#KRB5PLACEHOLD_54
 (-1765328330L)

	)

8262 
	#KRB5PLACEHOLD_55
 (-1765328329L)

	)

8263 
	#KRB5PLACEHOLD_56
 (-1765328328L)

	)

8264 
	#KRB5PLACEHOLD_57
 (-1765328327L)

	)

8265 
	#KRB5PLACEHOLD_58
 (-1765328326L)

	)

8266 
	#KRB5PLACEHOLD_59
 (-1765328325L)

	)

8267 
	#KRB5KRB_ERR_GENERIC
 (-1765328324L)

	)

8268 
	#KRB5KRB_ERR_FIELD_TOOLONG
 (-1765328323L)

	)

8269 
	#KRB5KDC_ERR_CLIENT_NOT_TRUSTED
 (-1765328322L)

	)

8270 
	#KRB5KDC_ERR_KDC_NOT_TRUSTED
 (-1765328321L)

	)

8271 
	#KRB5KDC_ERR_INVALID_SIG
 (-1765328320L)

	)

8272 
	#KRB5KDC_ERR_DH_KEY_PARAMETERS_NOT_ACCEPTED
 (-1765328319L)

	)

8273 
	#KRB5KDC_ERR_CERTIFICATE_MISMATCH
 (-1765328318L)

	)

8274 
	#KRB5KRB_AP_ERR_NO_TGT
 (-1765328317L)

	)

8275 
	#KRB5KDC_ERR_WRONG_REALM
 (-1765328316L)

	)

8276 
	#KRB5KRB_AP_ERR_USER_TO_USER_REQUIRED
 (-1765328315L)

	)

8277 
	#KRB5KDC_ERR_CANT_VERIFY_CERTIFICATE
 (-1765328314L)

	)

8278 
	#KRB5KDC_ERR_INVALID_CERTIFICATE
 (-1765328313L)

	)

8279 
	#KRB5KDC_ERR_REVOKED_CERTIFICATE
 (-1765328312L)

	)

8280 
	#KRB5KDC_ERR_REVOCATION_STATUS_UNKNOWN
 (-1765328311L)

	)

8281 
	#KRB5KDC_ERR_REVOCATION_STATUS_UNAVAILABLE
 (-1765328310L)

	)

8282 
	#KRB5KDC_ERR_CLIENT_NAME_MISMATCH
 (-1765328309L)

	)

8283 
	#KRB5KDC_ERR_KDC_NAME_MISMATCH
 (-1765328308L)

	)

8284 
	#KRB5KDC_ERR_INCONSISTENT_KEY_PURPOSE
 (-1765328307L)

	)

8285 
	#KRB5KDC_ERR_DIGEST_IN_CERT_NOT_ACCEPTED
 (-1765328306L)

	)

8286 
	#KRB5KDC_ERR_PA_CHECKSUM_MUST_BE_INCLUDED
 (-1765328305L)

	)

8287 
	#KRB5KDC_ERR_DIGEST_IN_SIGNED_DATA_NOT_ACCEPTED
 (-1765328304L)

	)

8288 
	#KRB5KDC_ERR_PUBLIC_KEY_ENCRYPTION_NOT_SUPPORTED
 (-1765328303L)

	)

8289 
	#KRB5PLACEHOLD_82
 (-1765328302L)

	)

8290 
	#KRB5PLACEHOLD_83
 (-1765328301L)

	)

8291 
	#KRB5PLACEHOLD_84
 (-1765328300L)

	)

8292 
	#KRB5KRB_AP_ERR_IAKERB_KDC_NOT_FOUND
 (-1765328299L)

	)

8293 
	#KRB5KRB_AP_ERR_IAKERB_KDC_NO_RESPONSE
 (-1765328298L)

	)

8294 
	#KRB5PLACEHOLD_87
 (-1765328297L)

	)

8295 
	#KRB5PLACEHOLD_88
 (-1765328296L)

	)

8296 
	#KRB5PLACEHOLD_89
 (-1765328295L)

	)

8297 
	#KRB5PLACEHOLD_90
 (-1765328294L)

	)

8298 
	#KRB5PLACEHOLD_91
 (-1765328293L)

	)

8299 
	#KRB5PLACEHOLD_92
 (-1765328292L)

	)

8300 
	#KRB5KDC_ERR_UNKNOWN_CRITICAL_FAST_OPTION
 (-1765328291L)

	)

8301 
	#KRB5PLACEHOLD_94
 (-1765328290L)

	)

8302 
	#KRB5PLACEHOLD_95
 (-1765328289L)

	)

8303 
	#KRB5PLACEHOLD_96
 (-1765328288L)

	)

8304 
	#KRB5PLACEHOLD_97
 (-1765328287L)

	)

8305 
	#KRB5PLACEHOLD_98
 (-1765328286L)

	)

8306 
	#KRB5PLACEHOLD_99
 (-1765328285L)

	)

8307 
	#KRB5KDC_ERR_NO_ACCEPTABLE_KDF
 (-1765328284L)

	)

8308 
	#KRB5PLACEHOLD_101
 (-1765328283L)

	)

8309 
	#KRB5PLACEHOLD_102
 (-1765328282L)

	)

8310 
	#KRB5PLACEHOLD_103
 (-1765328281L)

	)

8311 
	#KRB5PLACEHOLD_104
 (-1765328280L)

	)

8312 
	#KRB5PLACEHOLD_105
 (-1765328279L)

	)

8313 
	#KRB5PLACEHOLD_106
 (-1765328278L)

	)

8314 
	#KRB5PLACEHOLD_107
 (-1765328277L)

	)

8315 
	#KRB5PLACEHOLD_108
 (-1765328276L)

	)

8316 
	#KRB5PLACEHOLD_109
 (-1765328275L)

	)

8317 
	#KRB5PLACEHOLD_110
 (-1765328274L)

	)

8318 
	#KRB5PLACEHOLD_111
 (-1765328273L)

	)

8319 
	#KRB5PLACEHOLD_112
 (-1765328272L)

	)

8320 
	#KRB5PLACEHOLD_113
 (-1765328271L)

	)

8321 
	#KRB5PLACEHOLD_114
 (-1765328270L)

	)

8322 
	#KRB5PLACEHOLD_115
 (-1765328269L)

	)

8323 
	#KRB5PLACEHOLD_116
 (-1765328268L)

	)

8324 
	#KRB5PLACEHOLD_117
 (-1765328267L)

	)

8325 
	#KRB5PLACEHOLD_118
 (-1765328266L)

	)

8326 
	#KRB5PLACEHOLD_119
 (-1765328265L)

	)

8327 
	#KRB5PLACEHOLD_120
 (-1765328264L)

	)

8328 
	#KRB5PLACEHOLD_121
 (-1765328263L)

	)

8329 
	#KRB5PLACEHOLD_122
 (-1765328262L)

	)

8330 
	#KRB5PLACEHOLD_123
 (-1765328261L)

	)

8331 
	#KRB5PLACEHOLD_124
 (-1765328260L)

	)

8332 
	#KRB5PLACEHOLD_125
 (-1765328259L)

	)

8333 
	#KRB5PLACEHOLD_126
 (-1765328258L)

	)

8334 
	#KRB5PLACEHOLD_127
 (-1765328257L)

	)

8335 
	#KRB5_ERR_RCSID
 (-1765328256L)

	)

8336 
	#KRB5_LIBOS_BADLOCKFLAG
 (-1765328255L)

	)

8337 
	#KRB5_LIBOS_CANTREADPWD
 (-1765328254L)

	)

8338 
	#KRB5_LIBOS_BADPWDMATCH
 (-1765328253L)

	)

8339 
	#KRB5_LIBOS_PWDINTR
 (-1765328252L)

	)

8340 
	#KRB5_PARSE_ILLCHAR
 (-1765328251L)

	)

8341 
	#KRB5_PARSE_MALFORMED
 (-1765328250L)

	)

8342 
	#KRB5_CONFIG_CANTOPEN
 (-1765328249L)

	)

8343 
	#KRB5_CONFIG_BADFORMAT
 (-1765328248L)

	)

8344 
	#KRB5_CONFIG_NOTENUFSPACE
 (-1765328247L)

	)

8345 
	#KRB5_BADMSGTYPE
 (-1765328246L)

	)

8346 
	#KRB5_CC_BADNAME
 (-1765328245L)

	)

8347 
	#KRB5_CC_UNKNOWN_TYPE
 (-1765328244L)

	)

8348 
	#KRB5_CC_NOTFOUND
 (-1765328243L)

	)

8349 
	#KRB5_CC_END
 (-1765328242L)

	)

8350 
	#KRB5_NO_TKT_SUPPLIED
 (-1765328241L)

	)

8351 
	#KRB5KRB_AP_WRONG_PRINC
 (-1765328240L)

	)

8352 
	#KRB5KRB_AP_ERR_TKT_INVALID
 (-1765328239L)

	)

8353 
	#KRB5_PRINC_NOMATCH
 (-1765328238L)

	)

8354 
	#KRB5_KDCREP_MODIFIED
 (-1765328237L)

	)

8355 
	#KRB5_KDCREP_SKEW
 (-1765328236L)

	)

8356 
	#KRB5_IN_TKT_REALM_MISMATCH
 (-1765328235L)

	)

8357 
	#KRB5_PROG_ETYPE_NOSUPP
 (-1765328234L)

	)

8358 
	#KRB5_PROG_KEYTYPE_NOSUPP
 (-1765328233L)

	)

8359 
	#KRB5_WRONG_ETYPE
 (-1765328232L)

	)

8360 
	#KRB5_PROG_SUMTYPE_NOSUPP
 (-1765328231L)

	)

8361 
	#KRB5_REALM_UNKNOWN
 (-1765328230L)

	)

8362 
	#KRB5_SERVICE_UNKNOWN
 (-1765328229L)

	)

8363 
	#KRB5_KDC_UNREACH
 (-1765328228L)

	)

8364 
	#KRB5_NO_LOCALNAME
 (-1765328227L)

	)

8365 
	#KRB5_MUTUAL_FAILED
 (-1765328226L)

	)

8366 
	#KRB5_RC_TYPE_EXISTS
 (-1765328225L)

	)

8367 
	#KRB5_RC_MALLOC
 (-1765328224L)

	)

8368 
	#KRB5_RC_TYPE_NOTFOUND
 (-1765328223L)

	)

8369 
	#KRB5_RC_UNKNOWN
 (-1765328222L)

	)

8370 
	#KRB5_RC_REPLAY
 (-1765328221L)

	)

8371 
	#KRB5_RC_IO
 (-1765328220L)

	)

8372 
	#KRB5_RC_NOIO
 (-1765328219L)

	)

8373 
	#KRB5_RC_PARSE
 (-1765328218L)

	)

8374 
	#KRB5_RC_IO_EOF
 (-1765328217L)

	)

8375 
	#KRB5_RC_IO_MALLOC
 (-1765328216L)

	)

8376 
	#KRB5_RC_IO_PERM
 (-1765328215L)

	)

8377 
	#KRB5_RC_IO_IO
 (-1765328214L)

	)

8378 
	#KRB5_RC_IO_UNKNOWN
 (-1765328213L)

	)

8379 
	#KRB5_RC_IO_SPACE
 (-1765328212L)

	)

8380 
	#KRB5_TRANS_CANTOPEN
 (-1765328211L)

	)

8381 
	#KRB5_TRANS_BADFORMAT
 (-1765328210L)

	)

8382 
	#KRB5_LNAME_CANTOPEN
 (-1765328209L)

	)

8383 
	#KRB5_LNAME_NOTRANS
 (-1765328208L)

	)

8384 
	#KRB5_LNAME_BADFORMAT
 (-1765328207L)

	)

8385 
	#KRB5_CRYPTO_INTERNAL
 (-1765328206L)

	)

8386 
	#KRB5_KT_BADNAME
 (-1765328205L)

	)

8387 
	#KRB5_KT_UNKNOWN_TYPE
 (-1765328204L)

	)

8388 
	#KRB5_KT_NOTFOUND
 (-1765328203L)

	)

8389 
	#KRB5_KT_END
 (-1765328202L)

	)

8390 
	#KRB5_KT_NOWRITE
 (-1765328201L)

	)

8391 
	#KRB5_KT_IOERR
 (-1765328200L)

	)

8392 
	#KRB5_NO_TKT_IN_RLM
 (-1765328199L)

	)

8393 
	#KRB5DES_BAD_KEYPAR
 (-1765328198L)

	)

8394 
	#KRB5DES_WEAK_KEY
 (-1765328197L)

	)

8395 
	#KRB5_BAD_ENCTYPE
 (-1765328196L)

	)

8396 
	#KRB5_BAD_KEYSIZE
 (-1765328195L)

	)

8397 
	#KRB5_BAD_MSIZE
 (-1765328194L)

	)

8398 
	#KRB5_CC_TYPE_EXISTS
 (-1765328193L)

	)

8399 
	#KRB5_KT_TYPE_EXISTS
 (-1765328192L)

	)

8400 
	#KRB5_CC_IO
 (-1765328191L)

	)

8401 
	#KRB5_FCC_PERM
 (-1765328190L)

	)

8402 
	#KRB5_FCC_NOFILE
 (-1765328189L)

	)

8403 
	#KRB5_FCC_INTERNAL
 (-1765328188L)

	)

8404 
	#KRB5_CC_WRITE
 (-1765328187L)

	)

8405 
	#KRB5_CC_NOMEM
 (-1765328186L)

	)

8406 
	#KRB5_CC_FORMAT
 (-1765328185L)

	)

8407 
	#KRB5_CC_NOT_KTYPE
 (-1765328184L)

	)

8408 
	#KRB5_INVALID_FLAGS
 (-1765328183L)

	)

8409 
	#KRB5_NO_2ND_TKT
 (-1765328182L)

	)

8410 
	#KRB5_NOCREDS_SUPPLIED
 (-1765328181L)

	)

8411 
	#KRB5_SENDAUTH_BADAUTHVERS
 (-1765328180L)

	)

8412 
	#KRB5_SENDAUTH_BADAPPLVERS
 (-1765328179L)

	)

8413 
	#KRB5_SENDAUTH_BADRESPONSE
 (-1765328178L)

	)

8414 
	#KRB5_SENDAUTH_REJECTED
 (-1765328177L)

	)

8415 
	#KRB5_PREAUTH_BAD_TYPE
 (-1765328176L)

	)

8416 
	#KRB5_PREAUTH_NO_KEY
 (-1765328175L)

	)

8417 
	#KRB5_PREAUTH_FAILED
 (-1765328174L)

	)

8418 
	#KRB5_RCACHE_BADVNO
 (-1765328173L)

	)

8419 
	#KRB5_CCACHE_BADVNO
 (-1765328172L)

	)

8420 
	#KRB5_KEYTAB_BADVNO
 (-1765328171L)

	)

8421 
	#KRB5_PROG_ATYPE_NOSUPP
 (-1765328170L)

	)

8422 
	#KRB5_RC_REQUIRED
 (-1765328169L)

	)

8423 
	#KRB5_ERR_BAD_HOSTNAME
 (-1765328168L)

	)

8424 
	#KRB5_ERR_HOST_REALM_UNKNOWN
 (-1765328167L)

	)

8425 
	#KRB5_SNAME_UNSUPP_NAMETYPE
 (-1765328166L)

	)

8426 
	#KRB5KRB_AP_ERR_V4_REPLY
 (-1765328165L)

	)

8427 
	#KRB5_REALM_CANT_RESOLVE
 (-1765328164L)

	)

8428 
	#KRB5_TKT_NOT_FORWARDABLE
 (-1765328163L)

	)

8429 
	#KRB5_FWD_BAD_PRINCIPAL
 (-1765328162L)

	)

8430 
	#KRB5_GET_IN_TKT_LOOP
 (-1765328161L)

	)

8431 
	#KRB5_CONFIG_NODEFREALM
 (-1765328160L)

	)

8432 
	#KRB5_SAM_UNSUPPORTED
 (-1765328159L)

	)

8433 
	#KRB5_SAM_INVALID_ETYPE
 (-1765328158L)

	)

8434 
	#KRB5_SAM_NO_CHECKSUM
 (-1765328157L)

	)

8435 
	#KRB5_SAM_BAD_CHECKSUM
 (-1765328156L)

	)

8436 
	#KRB5_KT_NAME_TOOLONG
 (-1765328155L)

	)

8437 
	#KRB5_KT_KVNONOTFOUND
 (-1765328154L)

	)

8438 
	#KRB5_APPL_EXPIRED
 (-1765328153L)

	)

8439 
	#KRB5_LIB_EXPIRED
 (-1765328152L)

	)

8440 
	#KRB5_CHPW_PWDNULL
 (-1765328151L)

	)

8441 
	#KRB5_CHPW_FAIL
 (-1765328150L)

	)

8442 
	#KRB5_KT_FORMAT
 (-1765328149L)

	)

8443 
	#KRB5_NOPERM_ETYPE
 (-1765328148L)

	)

8444 
	#KRB5_CONFIG_ETYPE_NOSUPP
 (-1765328147L)

	)

8445 
	#KRB5_OBSOLETE_FN
 (-1765328146L)

	)

8446 
	#KRB5_EAI_FAIL
 (-1765328145L)

	)

8447 
	#KRB5_EAI_NODATA
 (-1765328144L)

	)

8448 
	#KRB5_EAI_NONAME
 (-1765328143L)

	)

8449 
	#KRB5_EAI_SERVICE
 (-1765328142L)

	)

8450 
	#KRB5_ERR_NUMERIC_REALM
 (-1765328141L)

	)

8451 
	#KRB5_ERR_BAD_S2K_PARAMS
 (-1765328140L)

	)

8452 
	#KRB5_ERR_NO_SERVICE
 (-1765328139L)

	)

8453 
	#KRB5_CC_READONLY
 (-1765328138L)

	)

8454 
	#KRB5_CC_NOSUPP
 (-1765328137L)

	)

8455 
	#KRB5_DELTAT_BADFORMAT
 (-1765328136L)

	)

8456 
	#KRB5_PLUGIN_NO_HANDLE
 (-1765328135L)

	)

8457 
	#KRB5_PLUGIN_OP_NOTSUPP
 (-1765328134L)

	)

8458 
	#KRB5_ERR_INVALID_UTF8
 (-1765328133L)

	)

8459 
	#KRB5_ERR_FAST_REQUIRED
 (-1765328132L)

	)

8460 
	#KRB5_LOCAL_ADDR_REQUIRED
 (-1765328131L)

	)

8461 
	#KRB5_REMOTE_ADDR_REQUIRED
 (-1765328130L)

	)

8462 
	#KRB5_TRACE_NOSUPP
 (-1765328129L)

	)

8463 c⁄° 
îr‹_èbÀ
 
ë_krb5_îr‹_èbÀ
;

8464 
	`öôülize_krb5_îr‹_èbÀ
();

8467 
	`öôülize_krb5_îr‹_èbÀ_r
(
ë_li°
 **
li°
);

8469 
	#ERROR_TABLE_BASE_krb5
 (-1765328384L)

	)

8472 
	#öô_krb5_îr_tbl
 
öôülize_krb5_îr‹_èbÀ


	)

8473 
	#krb5_îr_ba£
 
ERROR_TABLE_BASE_krb5


	)

8479 
	~<ë/com_îr.h
>

8481 
	#KRB5_PLUGIN_VER_NOTSUPP
 (-1750600192L)

	)

8482 
	#KRB5_PLUGIN_BAD_MODULE_SPEC
 (-1750600191L)

	)

8483 
	#KRB5_PLUGIN_NAME_NOTFOUND
 (-1750600190L)

	)

8484 
	#KRB5KDC_ERR_DISCARD
 (-1750600189L)

	)

8485 
	#KRB5_DCC_CANNOT_CREATE
 (-1750600188L)

	)

8486 
	#KRB5_KCC_INVALID_ANCHOR
 (-1750600187L)

	)

8487 
	#KRB5_KCC_UNKNOWN_VERSION
 (-1750600186L)

	)

8488 
	#KRB5_KCC_INVALID_UID
 (-1750600185L)

	)

8489 c⁄° 
îr‹_èbÀ
 
ë_k5e1_îr‹_èbÀ
;

8490 
	`öôülize_k5e1_îr‹_èbÀ
();

8493 
	`öôülize_k5e1_îr‹_èbÀ_r
(
ë_li°
 **
li°
);

8495 
	#ERROR_TABLE_BASE_k5e1
 (-1750600192L)

	)

8498 
	#öô_k5e1_îr_tbl
 
öôülize_k5e1_îr‹_èbÀ


	)

8499 
	#k5e1_îr_ba£
 
ERROR_TABLE_BASE_k5e1


	)

8505 
	~<ë/com_îr.h
>

8507 
	#KRB5_KDB_RCSID
 (-1780008448L)

	)

8508 
	#KRB5_KDB_INUSE
 (-1780008447L)

	)

8509 
	#KRB5_KDB_UK_SERROR
 (-1780008446L)

	)

8510 
	#KRB5_KDB_UK_RERROR
 (-1780008445L)

	)

8511 
	#KRB5_KDB_UNAUTH
 (-1780008444L)

	)

8512 
	#KRB5_KDB_NOENTRY
 (-1780008443L)

	)

8513 
	#KRB5_KDB_ILL_WILDCARD
 (-1780008442L)

	)

8514 
	#KRB5_KDB_DB_INUSE
 (-1780008441L)

	)

8515 
	#KRB5_KDB_DB_CHANGED
 (-1780008440L)

	)

8516 
	#KRB5_KDB_TRUNCATED_RECORD
 (-1780008439L)

	)

8517 
	#KRB5_KDB_RECURSIVELOCK
 (-1780008438L)

	)

8518 
	#KRB5_KDB_NOTLOCKED
 (-1780008437L)

	)

8519 
	#KRB5_KDB_BADLOCKMODE
 (-1780008436L)

	)

8520 
	#KRB5_KDB_DBNOTINITED
 (-1780008435L)

	)

8521 
	#KRB5_KDB_DBINITED
 (-1780008434L)

	)

8522 
	#KRB5_KDB_ILLDIRECTION
 (-1780008433L)

	)

8523 
	#KRB5_KDB_NOMASTERKEY
 (-1780008432L)

	)

8524 
	#KRB5_KDB_BADMASTERKEY
 (-1780008431L)

	)

8525 
	#KRB5_KDB_INVALIDKEYSIZE
 (-1780008430L)

	)

8526 
	#KRB5_KDB_CANTREAD_STORED
 (-1780008429L)

	)

8527 
	#KRB5_KDB_BADSTORED_MKEY
 (-1780008428L)

	)

8528 
	#KRB5_KDB_NOACTMASTERKEY
 (-1780008427L)

	)

8529 
	#KRB5_KDB_KVNONOMATCH
 (-1780008426L)

	)

8530 
	#KRB5_KDB_STORED_MKEY_NOTCURRENT
 (-1780008425L)

	)

8531 
	#KRB5_KDB_CANTLOCK_DB
 (-1780008424L)

	)

8532 
	#KRB5_KDB_DB_CORRUPT
 (-1780008423L)

	)

8533 
	#KRB5_KDB_BAD_VERSION
 (-1780008422L)

	)

8534 
	#KRB5_KDB_BAD_SALTTYPE
 (-1780008421L)

	)

8535 
	#KRB5_KDB_BAD_ENCTYPE
 (-1780008420L)

	)

8536 
	#KRB5_KDB_BAD_CREATEFLAGS
 (-1780008419L)

	)

8537 
	#KRB5_KDB_NO_PERMITTED_KEY
 (-1780008418L)

	)

8538 
	#KRB5_KDB_NO_MATCHING_KEY
 (-1780008417L)

	)

8539 
	#KRB5_KDB_DBTYPE_NOTFOUND
 (-1780008416L)

	)

8540 
	#KRB5_KDB_DBTYPE_NOSUP
 (-1780008415L)

	)

8541 
	#KRB5_KDB_DBTYPE_INIT
 (-1780008414L)

	)

8542 
	#KRB5_KDB_SERVER_INTERNAL_ERR
 (-1780008413L)

	)

8543 
	#KRB5_KDB_ACCESS_ERROR
 (-1780008412L)

	)

8544 
	#KRB5_KDB_INTERNAL_ERROR
 (-1780008411L)

	)

8545 
	#KRB5_KDB_CONSTRAINT_VIOLATION
 (-1780008410L)

	)

8546 
	#KRB5_LOG_CONV
 (-1780008409L)

	)

8547 
	#KRB5_LOG_UNSTABLE
 (-1780008408L)

	)

8548 
	#KRB5_LOG_CORRUPT
 (-1780008407L)

	)

8549 
	#KRB5_LOG_ERROR
 (-1780008406L)

	)

8550 
	#KRB5_KDB_DBTYPE_MISMATCH
 (-1780008405L)

	)

8551 
	#KRB5_KDB_POLICY_REF
 (-1780008404L)

	)

8552 
	#KRB5_KDB_STRINGS_TOOLONG
 (-1780008403L)

	)

8553 c⁄° 
îr‹_èbÀ
 
ë_kdb5_îr‹_èbÀ
;

8554 
	`öôülize_kdb5_îr‹_èbÀ
();

8557 
	`öôülize_kdb5_îr‹_èbÀ_r
(
ë_li°
 **
li°
);

8559 
	#ERROR_TABLE_BASE_kdb5
 (-1780008448L)

	)

8562 
	#öô_kdb5_îr_tbl
 
öôülize_kdb5_îr‹_èbÀ


	)

8563 
	#kdb5_îr_ba£
 
ERROR_TABLE_BASE_kdb5


	)

8569 
	~<ë/com_îr.h
>

8571 
	#KV5M_NONE
 (-1760647424L)

	)

8572 
	#KV5M_PRINCIPAL
 (-1760647423L)

	)

8573 
	#KV5M_DATA
 (-1760647422L)

	)

8574 
	#KV5M_KEYBLOCK
 (-1760647421L)

	)

8575 
	#KV5M_CHECKSUM
 (-1760647420L)

	)

8576 
	#KV5M_ENCRYPT_BLOCK
 (-1760647419L)

	)

8577 
	#KV5M_ENC_DATA
 (-1760647418L)

	)

8578 
	#KV5M_CRYPTOSYSTEM_ENTRY
 (-1760647417L)

	)

8579 
	#KV5M_CS_TABLE_ENTRY
 (-1760647416L)

	)

8580 
	#KV5M_CHECKSUM_ENTRY
 (-1760647415L)

	)

8581 
	#KV5M_AUTHDATA
 (-1760647414L)

	)

8582 
	#KV5M_TRANSITED
 (-1760647413L)

	)

8583 
	#KV5M_ENC_TKT_PART
 (-1760647412L)

	)

8584 
	#KV5M_TICKET
 (-1760647411L)

	)

8585 
	#KV5M_AUTHENTICATOR
 (-1760647410L)

	)

8586 
	#KV5M_TKT_AUTHENT
 (-1760647409L)

	)

8587 
	#KV5M_CREDS
 (-1760647408L)

	)

8588 
	#KV5M_LAST_REQ_ENTRY
 (-1760647407L)

	)

8589 
	#KV5M_PA_DATA
 (-1760647406L)

	)

8590 
	#KV5M_KDC_REQ
 (-1760647405L)

	)

8591 
	#KV5M_ENC_KDC_REP_PART
 (-1760647404L)

	)

8592 
	#KV5M_KDC_REP
 (-1760647403L)

	)

8593 
	#KV5M_ERROR
 (-1760647402L)

	)

8594 
	#KV5M_AP_REQ
 (-1760647401L)

	)

8595 
	#KV5M_AP_REP
 (-1760647400L)

	)

8596 
	#KV5M_AP_REP_ENC_PART
 (-1760647399L)

	)

8597 
	#KV5M_RESPONSE
 (-1760647398L)

	)

8598 
	#KV5M_SAFE
 (-1760647397L)

	)

8599 
	#KV5M_PRIV
 (-1760647396L)

	)

8600 
	#KV5M_PRIV_ENC_PART
 (-1760647395L)

	)

8601 
	#KV5M_CRED
 (-1760647394L)

	)

8602 
	#KV5M_CRED_INFO
 (-1760647393L)

	)

8603 
	#KV5M_CRED_ENC_PART
 (-1760647392L)

	)

8604 
	#KV5M_PWD_DATA
 (-1760647391L)

	)

8605 
	#KV5M_ADDRESS
 (-1760647390L)

	)

8606 
	#KV5M_KEYTAB_ENTRY
 (-1760647389L)

	)

8607 
	#KV5M_CONTEXT
 (-1760647388L)

	)

8608 
	#KV5M_OS_CONTEXT
 (-1760647387L)

	)

8609 
	#KV5M_ALT_METHOD
 (-1760647386L)

	)

8610 
	#KV5M_ETYPE_INFO_ENTRY
 (-1760647385L)

	)

8611 
	#KV5M_DB_CONTEXT
 (-1760647384L)

	)

8612 
	#KV5M_AUTH_CONTEXT
 (-1760647383L)

	)

8613 
	#KV5M_KEYTAB
 (-1760647382L)

	)

8614 
	#KV5M_RCACHE
 (-1760647381L)

	)

8615 
	#KV5M_CCACHE
 (-1760647380L)

	)

8616 
	#KV5M_PREAUTH_OPS
 (-1760647379L)

	)

8617 
	#KV5M_SAM_CHALLENGE
 (-1760647378L)

	)

8618 
	#KV5M_SAM_CHALLENGE_2
 (-1760647377L)

	)

8619 
	#KV5M_SAM_KEY
 (-1760647376L)

	)

8620 
	#KV5M_ENC_SAM_RESPONSE_ENC
 (-1760647375L)

	)

8621 
	#KV5M_ENC_SAM_RESPONSE_ENC_2
 (-1760647374L)

	)

8622 
	#KV5M_SAM_RESPONSE
 (-1760647373L)

	)

8623 
	#KV5M_SAM_RESPONSE_2
 (-1760647372L)

	)

8624 
	#KV5M_PREDICTED_SAM_RESPONSE
 (-1760647371L)

	)

8625 
	#KV5M_PASSWD_PHRASE_ELEMENT
 (-1760647370L)

	)

8626 
	#KV5M_GSS_OID
 (-1760647369L)

	)

8627 
	#KV5M_GSS_QUEUE
 (-1760647368L)

	)

8628 
	#KV5M_FAST_ARMORED_REQ
 (-1760647367L)

	)

8629 
	#KV5M_FAST_REQ
 (-1760647366L)

	)

8630 
	#KV5M_FAST_RESPONSE
 (-1760647365L)

	)

8631 
	#KV5M_AUTHDATA_CONTEXT
 (-1760647364L)

	)

8632 c⁄° 
îr‹_èbÀ
 
ë_kv5m_îr‹_èbÀ
;

8633 
	`öôülize_kv5m_îr‹_èbÀ
();

8636 
	`öôülize_kv5m_îr‹_èbÀ_r
(
ë_li°
 **
li°
);

8638 
	#ERROR_TABLE_BASE_kv5m
 (-1760647424L)

	)

8641 
	#öô_kv5m_îr_tbl
 
öôülize_kv5m_îr‹_èbÀ


	)

8642 
	#kv5m_îr_ba£
 
ERROR_TABLE_BASE_kv5m


	)

8648 
	~<ë/com_îr.h
>

8650 
	#KRB524_BADKEY
 (-1750206208L)

	)

8651 
	#KRB524_BADADDR
 (-1750206207L)

	)

8652 
	#KRB524_BADPRINC
 (-1750206206L)

	)

8653 
	#KRB524_BADREALM
 (-1750206205L)

	)

8654 
	#KRB524_V4ERR
 (-1750206204L)

	)

8655 
	#KRB524_ENCFULL
 (-1750206203L)

	)

8656 
	#KRB524_DECEMPTY
 (-1750206202L)

	)

8657 
	#KRB524_NOTRESP
 (-1750206201L)

	)

8658 
	#KRB524_KRB4_DISABLED
 (-1750206200L)

	)

8659 c⁄° 
îr‹_èbÀ
 
ë_k524_îr‹_èbÀ
;

8660 
	`öôülize_k524_îr‹_èbÀ
();

8663 
	`öôülize_k524_îr‹_èbÀ_r
(
ë_li°
 **
li°
);

8665 
	#ERROR_TABLE_BASE_k524
 (-1750206208L)

	)

8668 
	#öô_k524_îr_tbl
 
öôülize_k524_îr‹_èbÀ


	)

8669 
	#k524_îr_ba£
 
ERROR_TABLE_BASE_k524


	)

8675 
	~<ë/com_îr.h
>

8677 
	#ASN1_BAD_TIMEFORMAT
 (1859794432L)

	)

8678 
	#ASN1_MISSING_FIELD
 (1859794433L)

	)

8679 
	#ASN1_MISPLACED_FIELD
 (1859794434L)

	)

8680 
	#ASN1_TYPE_MISMATCH
 (1859794435L)

	)

8681 
	#ASN1_OVERFLOW
 (1859794436L)

	)

8682 
	#ASN1_OVERRUN
 (1859794437L)

	)

8683 
	#ASN1_BAD_ID
 (1859794438L)

	)

8684 
	#ASN1_BAD_LENGTH
 (1859794439L)

	)

8685 
	#ASN1_BAD_FORMAT
 (1859794440L)

	)

8686 
	#ASN1_PARSE_ERROR
 (1859794441L)

	)

8687 
	#ASN1_BAD_GMTIME
 (1859794442L)

	)

8688 
	#ASN1_MISMATCH_INDEF
 (1859794443L)

	)

8689 
	#ASN1_MISSING_EOC
 (1859794444L)

	)

8690 
	#ASN1_OMITTED
 (1859794445L)

	)

8691 c⁄° 
îr‹_èbÀ
 
ë_a¢1_îr‹_èbÀ
;

8692 
	`öôülize_a¢1_îr‹_èbÀ
();

8695 
	`öôülize_a¢1_îr‹_èbÀ_r
(
ë_li°
 **
li°
);

8697 
	#ERROR_TABLE_BASE_a¢1
 (1859794432L)

	)

8700 
	#öô_a¢1_îr_tbl
 
öôülize_a¢1_îr‹_èbÀ


	)

8701 
	#a¢1_îr_ba£
 
ERROR_TABLE_BASE_a¢1


	)

	@/usr/include/openssl/bn.h

125 #i‚de‡
HEADER_BN_H


126 
	#HEADER_BN_H


	)

128 
	~<›ís¶/e_os2.h
>

129 #i‚de‡
OPENSSL_NO_FP_API


130 
	~<°dio.h
>

132 
	~<›ís¶/os¶_typ.h
>

133 
	~<›ís¶/¸y±o.h
>

135 #ifde‡ 
__˝lu•lus


151 #i‚de‡
OPENSSL_SMALL_FOOTPRINT


152 
	#BN_MUL_COMBA


	)

153 
	#BN_SQR_COMBA


	)

154 
	#BN_RECURSION


	)

168 #i‡
deföed
(
OPENSSL_SYS_MSDOS
Ë|| deföed(
OPENSSL_SYS_WINDOWS
) || \

169 
deföed
(
OPENSSL_SYS_WIN32
Ë|| 
	$deföed
(
löux
)

170 #i‚de‡
BN_DIV2W


171 
	#BN_DIV2W


	)

178 #ifde‡
SIXTY_FOUR_BIT_LONG


179 
	#BN_ULLONG
 

	)

180 
	#BN_ULONG
 

	)

181 
	#BN_LONG
 

	)

182 
	#BN_BITS
 128

	)

183 
	#BN_BYTES
 8

	)

184 
	#BN_BITS2
 64

	)

185 
	#BN_BITS4
 32

	)

186 
	#BN_MASK
 (0xffffffffffffffffffffffffffffffffLL)

	)

187 
	#BN_MASK2
 (0xffffffffffffffffL)

	)

188 
	#BN_MASK2l
 (0xffffffffL)

	)

189 
	#BN_MASK2h
 (0xffffffff00000000L)

	)

190 
	#BN_MASK2h1
 (0xffffffff80000000L)

	)

191 
	#BN_TBIT
 (0x8000000000000000L)

	)

192 
	#BN_DEC_CONV
 (10000000000000000000UL)

	)

193 
	#BN_DEC_FMT1
 "%lu"

	)

194 
	#BN_DEC_FMT2
 "%019lu"

	)

195 
	#BN_DEC_NUM
 19

	)

196 
	#BN_HEX_FMT1
 "%lX"

	)

197 
	#BN_HEX_FMT2
 "%016lX"

	)

205 #ifde‡
SIXTY_FOUR_BIT


206 #unde‡
BN_LLONG


207 #unde‡
BN_ULLONG


208 
	#BN_ULONG
 

	)

209 
	#BN_LONG
 

	)

210 
	#BN_BITS
 128

	)

211 
	#BN_BYTES
 8

	)

212 
	#BN_BITS2
 64

	)

213 
	#BN_BITS4
 32

	)

214 
	#BN_MASK2
 (0xffffffffffffffffLL)

	)

215 
	#BN_MASK2l
 (0xffffffffL)

	)

216 
	#BN_MASK2h
 (0xffffffff00000000LL)

	)

217 
	#BN_MASK2h1
 (0xffffffff80000000LL)

	)

218 
	#BN_TBIT
 (0x8000000000000000LL)

	)

219 
	#BN_DEC_CONV
 (10000000000000000000ULL)

	)

220 
	#BN_DEC_FMT1
 "%Œu"

	)

221 
	#BN_DEC_FMT2
 "%019Œu"

	)

222 
	#BN_DEC_NUM
 19

	)

223 
	#BN_HEX_FMT1
 "%ŒX"

	)

224 
	#BN_HEX_FMT2
 "%016ŒX"

	)

227 #ifde‡
THIRTY_TWO_BIT


228 #ifde‡
BN_LLONG


229 #i‡
	`deföed
(
_WIN32
Ë&& !deföed(
__GNUC__
)

230 
	#BN_ULLONG
 
__öt64


	)

231 
	#BN_MASK
 (0xffffffffffffffff
I64
)

	)

233 
	#BN_ULLONG
 

	)

234 
	#BN_MASK
 (0xffffffffffffffffLL)

	)

237 
	#BN_ULONG
 

	)

238 
	#BN_LONG
 

	)

239 
	#BN_BITS
 64

	)

240 
	#BN_BYTES
 4

	)

241 
	#BN_BITS2
 32

	)

242 
	#BN_BITS4
 16

	)

243 
	#BN_MASK2
 (0xffffffffL)

	)

244 
	#BN_MASK2l
 (0xffff)

	)

245 
	#BN_MASK2h1
 (0xffff8000L)

	)

246 
	#BN_MASK2h
 (0xffff0000L)

	)

247 
	#BN_TBIT
 (0x80000000L)

	)

248 
	#BN_DEC_CONV
 (1000000000L)

	)

249 
	#BN_DEC_FMT1
 "%u"

	)

250 
	#BN_DEC_FMT2
 "%09u"

	)

251 
	#BN_DEC_NUM
 9

	)

252 
	#BN_HEX_FMT1
 "%X"

	)

253 
	#BN_HEX_FMT2
 "%08X"

	)

264 #i‡
	`deföed
(
OPENSSL_SYS_VMS
)

265 #i‡
__INITIAL_POINTER_SIZE
 == 64

266 
	#PTR_SIZE_INT
 

	)

268 
	#PTR_SIZE_INT
 

	)

271 
	#PTR_SIZE_INT
 
size_t


	)

274 
	#BN_DEFAULT_BITS
 1280

	)

276 
	#BN_FLG_MALLOCED
 0x01

	)

277 
	#BN_FLG_STATIC_DATA
 0x02

	)

278 
	#BN_FLG_CONSTTIME
 0x04

	)

284 #i‚de‡
OPENSSL_NO_DEPRECATED


285 
	#BN_FLG_EXP_CONSTTIME
 
BN_FLG_CONSTTIME


	)

290 #i‚de‡
OPENSSL_NO_DEPRECATED


291 
	#BN_FLG_FREE
 0x8000

	)

293 
	#BN_£t_Êags
(
b
,
n
Ë((b)->
Êags
|=“))

	)

294 
	#BN_gë_Êags
(
b
,
n
Ë((b)->
Êags
&“))

	)

298 
	#BN_wôh_Êags
(
de°
,
b
,
n
Ë((de°)->
d
=(b)->d, \

299 (
de°
)->
t›
=(
b
)->top, \

300 (
de°
)->
dmax
=(
b
)->dmax, \

301 (
de°
)->
√g
=(
b
)->neg, \

302 (
de°
)->
Êags
=(((de°)->Êag†& 
BN_FLG_MALLOCED
) \

303 | ((
b
)->
Êags
 & ~
BN_FLG_MALLOCED
) \

304 | 
BN_FLG_STATIC_DATA
 \

305 | (
n
)))

	)

309 
bignum_°
 
	tBIGNUM
;

311 
bignum_˘x
 
	tBN_CTX
;

312 
bn_blödög_°
 
	tBN_BLINDING
;

313 
bn_m⁄t_˘x_°
 
	tBN_MONT_CTX
;

314 
bn_ª˝_˘x_°
 
	tBN_RECP_CTX
;

315 
bn_gícb_°
 
	tBN_GENCB
;

318 
	sbignum_°


320 
BN_ULONG
 *
d
;

321 
t›
;

323 
dmax
;

324 
√g
;

325 
Êags
;

329 
	sbn_m⁄t_˘x_°


331 
ri
;

332 
BIGNUM
 
RR
;

333 
BIGNUM
 
N
;

334 
BIGNUM
 
Ni
;

336 
BN_ULONG
 
n0
[2];

338 
Êags
;

344 
	sbn_ª˝_˘x_°


346 
BIGNUM
 
N
;

347 
BIGNUM
 
Nr
;

348 
num_bôs
;

349 
shi·
;

350 
Êags
;

354 
	sbn_gícb_°


356 
vî
;

357 *
¨g
;

361 (*
cb_1
)(, , *);

363 (*
cb_2
)(, , 
BN_GENCB
 *);

364 } 
cb
;

367 
	`BN_GENCB_ˇŒ
(
BN_GENCB
 *
cb
, 
a
, 
b
);

369 
	#BN_GENCB_£t_ﬁd
(
gícb
, 
ˇŒback
, 
cb_¨g
) { \

370 
BN_GENCB
 *
tmp_gícb
 = (
gícb
); \

371 
tmp_gícb
->
vî
 = 1; \

372 
tmp_gícb
->
¨g
 = (
cb_¨g
); \

373 
tmp_gícb
->
cb
.
cb_1
 = (
ˇŒback
); }

	)

375 
	#BN_GENCB_£t
(
gícb
, 
ˇŒback
, 
cb_¨g
) { \

376 
BN_GENCB
 *
tmp_gícb
 = (
gícb
); \

377 
tmp_gícb
->
vî
 = 2; \

378 
tmp_gícb
->
¨g
 = (
cb_¨g
); \

379 
tmp_gícb
->
cb
.
cb_2
 = (
ˇŒback
); }

	)

381 
	#BN_¥ime_checks
 0

	)

389 
	#BN_¥ime_checks_f‹_size
(
b
) ((b) >= 1300 ? 2 : \

390 (
b
) >= 850 ? 3 : \

391 (
b
) >= 650 ? 4 : \

392 (
b
) >= 550 ? 5 : \

393 (
b
) >= 450 ? 6 : \

394 (
b
) >= 400 ? 7 : \

395 (
b
) >= 350 ? 8 : \

396 (
b
) >= 300 ? 9 : \

397 (
b
) >= 250 ? 12 : \

398 (
b
) >= 200 ? 15 : \

399 (
b
) >= 150 ? 18 : \

400  27)

	)

402 
	#BN_num_byãs
(
a
Ë((
	`BN_num_bôs
◊)+7)/8)

	)

405 
	#BN_abs_is_w‹d
(
a
,
w
Ë(((◊)->
t›
 =1Ë&& (◊)->
d
[0] =(
BN_ULONG
)(w))) || \

406 (((
w
Ë=0Ë&& ((
a
)->
t›
 =0)))

	)

407 
	#BN_is_zîo
(
a
Ë(◊)->
t›
 =0)

	)

408 
	#BN_is_⁄e
(
a
Ë(
	`BN_abs_is_w‹d
(◊),1Ë&& !◊)->
√g
)

	)

409 
	#BN_is_w‹d
(
a
,
w
Ë(
	`BN_abs_is_w‹d
(◊),(w)Ë&& (!(wË|| !◊)->
√g
))

	)

410 
	#BN_is_odd
(
a
Ë((◊)->
t›
 > 0Ë&& (◊)->
d
[0] & 1))

	)

412 
	#BN_⁄e
(
a
Ë(
	`BN_£t_w‹d
(◊),1))

	)

413 
	#BN_zîo_ex
(
a
) \

415 
BIGNUM
 *
_tmp_bn
 = (
a
); \

416 
_tmp_bn
->
t›
 = 0; \

417 
_tmp_bn
->
√g
 = 0; \

418 } 0)

	)

419 #ifde‡
OPENSSL_NO_DEPRECATED


420 
	#BN_zîo
(
a
Ë
	`BN_zîo_ex
◊)

	)

422 
	#BN_zîo
(
a
Ë(
	`BN_£t_w‹d
(◊),0))

	)

425 c⁄° 
BIGNUM
 *
	`BN_vÆue_⁄e
();

426 * 
	`BN_›ti⁄s
();

427 
BN_CTX
 *
	`BN_CTX_√w
();

428 #i‚de‡
OPENSSL_NO_DEPRECATED


429 
	`BN_CTX_öô
(
BN_CTX
 *
c
);

431 
	`BN_CTX_‰ì
(
BN_CTX
 *
c
);

432 
	`BN_CTX_°¨t
(
BN_CTX
 *
˘x
);

433 
BIGNUM
 *
	`BN_CTX_gë
(
BN_CTX
 *
˘x
);

434 
	`BN_CTX_íd
(
BN_CTX
 *
˘x
);

435 
	`BN_ønd
(
BIGNUM
 *
∫d
, 
bôs
, 
t›
,
bŸtom
);

436 
	`BN_p£udo_ønd
(
BIGNUM
 *
∫d
, 
bôs
, 
t›
,
bŸtom
);

437 
	`BN_ønd_ønge
(
BIGNUM
 *
∫d
, c⁄° BIGNUM *
ønge
);

438 
	`BN_p£udo_ønd_ønge
(
BIGNUM
 *
∫d
, c⁄° BIGNUM *
ønge
);

439 
	`BN_num_bôs
(c⁄° 
BIGNUM
 *
a
);

440 
	`BN_num_bôs_w‹d
(
BN_ULONG
);

441 
BIGNUM
 *
	`BN_√w
();

442 
	`BN_öô
(
BIGNUM
 *);

443 
	`BN_˛ór_‰ì
(
BIGNUM
 *
a
);

444 
BIGNUM
 *
	`BN_c›y
(BIGNUM *
a
, c⁄° BIGNUM *
b
);

445 
	`BN_sw≠
(
BIGNUM
 *
a
, BIGNUM *
b
);

446 
BIGNUM
 *
	`BN_bö2bn
(c⁄° *
s
,
Àn
,BIGNUM *
ªt
);

447 
	`BN_bn2bö
(c⁄° 
BIGNUM
 *
a
, *
to
);

448 
BIGNUM
 *
	`BN_mpi2bn
(c⁄° *
s
,
Àn
,BIGNUM *
ªt
);

449 
	`BN_bn2mpi
(c⁄° 
BIGNUM
 *
a
, *
to
);

450 
	`BN_sub
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

451 
	`BN_usub
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

452 
	`BN_uadd
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

453 
	`BN_add
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

454 
	`BN_mul
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, 
BN_CTX
 *
˘x
);

455 
	`BN_sqr
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
,
BN_CTX
 *
˘x
);

460 
	`BN_£t_√g©ive
(
BIGNUM
 *
b
, 
n
);

465 
	#BN_is_√g©ive
(
a
Ë(◊)->
√g
 !0)

	)

467 
	`BN_div
(
BIGNUM
 *
dv
, BIGNUM *
ªm
, c⁄° BIGNUM *
m
, c⁄° BIGNUM *
d
,

468 
BN_CTX
 *
˘x
);

469 
	#BN_mod
(
ªm
,
m
,
d
,
˘x
Ë
	`BN_div
(
NULL
,‘em),(m),(d),(˘x))

	)

470 
	`BN_¬mod
(
BIGNUM
 *
r
, c⁄° BIGNUM *
m
, c⁄° BIGNUM *
d
, 
BN_CTX
 *
˘x
);

471 
	`BN_mod_add
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
);

472 
	`BN_mod_add_quick
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
m
);

473 
	`BN_mod_sub
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
);

474 
	`BN_mod_sub_quick
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
m
);

475 
	`BN_mod_mul
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

476 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
);

477 
	`BN_mod_sqr
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
);

478 
	`BN_mod_lshi·1
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
);

479 
	`BN_mod_lshi·1_quick
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
m
);

480 
	`BN_mod_lshi·
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
n
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
);

481 
	`BN_mod_lshi·_quick
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
n
, c⁄° BIGNUM *
m
);

483 
BN_ULONG
 
	`BN_mod_w‹d
(c⁄° 
BIGNUM
 *
a
, BN_ULONG 
w
);

484 
BN_ULONG
 
	`BN_div_w‹d
(
BIGNUM
 *
a
, BN_ULONG 
w
);

485 
	`BN_mul_w‹d
(
BIGNUM
 *
a
, 
BN_ULONG
 
w
);

486 
	`BN_add_w‹d
(
BIGNUM
 *
a
, 
BN_ULONG
 
w
);

487 
	`BN_sub_w‹d
(
BIGNUM
 *
a
, 
BN_ULONG
 
w
);

488 
	`BN_£t_w‹d
(
BIGNUM
 *
a
, 
BN_ULONG
 
w
);

489 
BN_ULONG
 
	`BN_gë_w‹d
(c⁄° 
BIGNUM
 *
a
);

491 
	`BN_cmp
(c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
b
);

492 
	`BN_‰ì
(
BIGNUM
 *
a
);

493 
	`BN_is_bô_£t
(c⁄° 
BIGNUM
 *
a
, 
n
);

494 
	`BN_lshi·
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
n
);

495 
	`BN_lshi·1
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
);

496 
	`BN_exp
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,
BN_CTX
 *
˘x
);

498 
	`BN_mod_exp
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

499 c⁄° 
BIGNUM
 *
m
,
BN_CTX
 *
˘x
);

500 
	`BN_mod_exp_m⁄t
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

501 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
, 
BN_MONT_CTX
 *
m_˘x
);

502 
	`BN_mod_exp_m⁄t_c⁄°time
(
BIGNUM
 *
º
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

503 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
, 
BN_MONT_CTX
 *
ö_m⁄t
);

504 
	`BN_mod_exp_m⁄t_w‹d
(
BIGNUM
 *
r
, 
BN_ULONG
 
a
, c⁄° BIGNUM *
p
,

505 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
, 
BN_MONT_CTX
 *
m_˘x
);

506 
	`BN_mod_exp2_m⁄t
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a1
, c⁄° BIGNUM *
p1
,

507 c⁄° 
BIGNUM
 *
a2
, c⁄° BIGNUM *
p2
,c⁄° BIGNUM *
m
,

508 
BN_CTX
 *
˘x
,
BN_MONT_CTX
 *
m_˘x
);

509 
	`BN_mod_exp_sim∂e
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

510 c⁄° 
BIGNUM
 *
m
,
BN_CTX
 *
˘x
);

512 
	`BN_mask_bôs
(
BIGNUM
 *
a
,
n
);

513 #i‚de‡
OPENSSL_NO_FP_API


514 
	`BN_¥öt_Â
(
FILE
 *
Â
, c⁄° 
BIGNUM
 *
a
);

516 #ifde‡
HEADER_BIO_H


517 
	`BN_¥öt
(
BIO
 *
Â
, c⁄° 
BIGNUM
 *
a
);

519 
	`BN_¥öt
(*
Â
, c⁄° 
BIGNUM
 *
a
);

521 
	`BN_ªcùroˇl
(
BIGNUM
 *
r
, c⁄° BIGNUM *
m
, 
Àn
, 
BN_CTX
 *
˘x
);

522 
	`BN_rshi·
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
n
);

523 
	`BN_rshi·1
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
);

524 
	`BN_˛ór
(
BIGNUM
 *
a
);

525 
BIGNUM
 *
	`BN_dup
(c⁄° BIGNUM *
a
);

526 
	`BN_ucmp
(c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
b
);

527 
	`BN_£t_bô
(
BIGNUM
 *
a
, 
n
);

528 
	`BN_˛ór_bô
(
BIGNUM
 *
a
, 
n
);

529 * 
	`BN_bn2hex
(c⁄° 
BIGNUM
 *
a
);

530 * 
	`BN_bn2dec
(c⁄° 
BIGNUM
 *
a
);

531 
	`BN_hex2bn
(
BIGNUM
 **
a
, c⁄° *
°r
);

532 
	`BN_dec2bn
(
BIGNUM
 **
a
, c⁄° *
°r
);

533 
	`BN_asc2bn
(
BIGNUM
 **
a
, c⁄° *
°r
);

534 
	`BN_gcd
(
BIGNUM
 *
r
,c⁄° BIGNUM *
a
,c⁄° BIGNUM *
b
,
BN_CTX
 *
˘x
);

535 
	`BN_kr⁄eckî
(c⁄° 
BIGNUM
 *
a
,c⁄° BIGNUM *
b
,
BN_CTX
 *
˘x
);

536 
BIGNUM
 *
	`BN_mod_övî£
(BIGNUM *
ªt
,

537 c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
n
,
BN_CTX
 *
˘x
);

538 
BIGNUM
 *
	`BN_mod_sqπ
(BIGNUM *
ªt
,

539 c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
n
,
BN_CTX
 *
˘x
);

541 
	`BN_c⁄°time_sw≠
(
BN_ULONG
 
sw≠
, 
BIGNUM
 *
a
, BIGNUM *
b
, 
nw‹ds
);

544 #i‚de‡
OPENSSL_NO_DEPRECATED


545 
BIGNUM
 *
	`BN_gíî©e_¥ime
(BIGNUM *
ªt
,
bôs
,
ß„
,

546 c⁄° 
BIGNUM
 *
add
, c⁄° BIGNUM *
ªm
,

547 (*
ˇŒback
)(,,*),*
cb_¨g
);

548 
	`BN_is_¥ime
(c⁄° 
BIGNUM
 *
p
,
nchecks
,

549 (*
ˇŒback
)(,,*),

550 
BN_CTX
 *
˘x
,*
cb_¨g
);

551 
	`BN_is_¥ime_Á°ã°
(c⁄° 
BIGNUM
 *
p
,
nchecks
,

552 (*
ˇŒback
)(,,*),
BN_CTX
 *
˘x
,*
cb_¨g
,

553 
do_åül_divisi⁄
);

557 
	`BN_gíî©e_¥ime_ex
(
BIGNUM
 *
ªt
,
bôs
,
ß„
, c⁄° BIGNUM *
add
,

558 c⁄° 
BIGNUM
 *
ªm
, 
BN_GENCB
 *
cb
);

559 
	`BN_is_¥ime_ex
(c⁄° 
BIGNUM
 *
p
,
nchecks
, 
BN_CTX
 *
˘x
, 
BN_GENCB
 *
cb
);

560 
	`BN_is_¥ime_Á°ã°_ex
(c⁄° 
BIGNUM
 *
p
,
nchecks
, 
BN_CTX
 *
˘x
,

561 
do_åül_divisi⁄
, 
BN_GENCB
 *
cb
);

563 
	`BN_X931_gíî©e_Xpq
(
BIGNUM
 *
Xp
, BIGNUM *
Xq
, 
nbôs
, 
BN_CTX
 *
˘x
);

565 
	`BN_X931_dîive_¥ime_ex
(
BIGNUM
 *
p
, BIGNUM *
p1
, BIGNUM *
p2
,

566 c⁄° 
BIGNUM
 *
Xp
, c⁄° BIGNUM *
Xp1
, c⁄° BIGNUM *
Xp2
,

567 c⁄° 
BIGNUM
 *
e
, 
BN_CTX
 *
˘x
, 
BN_GENCB
 *
cb
);

568 
	`BN_X931_gíî©e_¥ime_ex
(
BIGNUM
 *
p
, BIGNUM *
p1
, BIGNUM *
p2
,

569 
BIGNUM
 *
Xp1
, BIGNUM *
Xp2
,

570 c⁄° 
BIGNUM
 *
Xp
,

571 c⁄° 
BIGNUM
 *
e
, 
BN_CTX
 *
˘x
,

572 
BN_GENCB
 *
cb
);

574 
BN_MONT_CTX
 *
	`BN_MONT_CTX_√w
();

575 
	`BN_MONT_CTX_öô
(
BN_MONT_CTX
 *
˘x
);

576 
	`BN_mod_mul_m⁄tgomîy
(
BIGNUM
 *
r
,c⁄° BIGNUM *
a
,c⁄° BIGNUM *
b
,

577 
BN_MONT_CTX
 *
m⁄t
, 
BN_CTX
 *
˘x
);

578 
	#BN_to_m⁄tgomîy
(
r
,
a
,
m⁄t
,
˘x
Ë
	`BN_mod_mul_m⁄tgomîy
(\

579 (
r
),(
a
),&((
m⁄t
)->
RR
),(m⁄t),(
˘x
))

	)

580 
	`BN_‰om_m⁄tgomîy
(
BIGNUM
 *
r
,c⁄° BIGNUM *
a
,

581 
BN_MONT_CTX
 *
m⁄t
, 
BN_CTX
 *
˘x
);

582 
	`BN_MONT_CTX_‰ì
(
BN_MONT_CTX
 *
m⁄t
);

583 
	`BN_MONT_CTX_£t
(
BN_MONT_CTX
 *
m⁄t
,c⁄° 
BIGNUM
 *
mod
,
BN_CTX
 *
˘x
);

584 
BN_MONT_CTX
 *
	`BN_MONT_CTX_c›y
(BN_MONT_CTX *
to
,BN_MONT_CTX *
‰om
);

585 
BN_MONT_CTX
 *
	`BN_MONT_CTX_£t_locked
(BN_MONT_CTX **
pm⁄t
, 
lock
,

586 c⁄° 
BIGNUM
 *
mod
, 
BN_CTX
 *
˘x
);

589 
	#BN_BLINDING_NO_UPDATE
 0x00000001

	)

590 
	#BN_BLINDING_NO_RECREATE
 0x00000002

	)

592 
BN_BLINDING
 *
	`BN_BLINDING_√w
(c⁄° 
BIGNUM
 *
A
, c⁄° BIGNUM *
Ai
, BIGNUM *
mod
);

593 
	`BN_BLINDING_‰ì
(
BN_BLINDING
 *
b
);

594 
	`BN_BLINDING_upd©e
(
BN_BLINDING
 *
b
,
BN_CTX
 *
˘x
);

595 
	`BN_BLINDING_c⁄vît
(
BIGNUM
 *
n
, 
BN_BLINDING
 *
b
, 
BN_CTX
 *
˘x
);

596 
	`BN_BLINDING_övît
(
BIGNUM
 *
n
, 
BN_BLINDING
 *
b
, 
BN_CTX
 *
˘x
);

597 
	`BN_BLINDING_c⁄vît_ex
(
BIGNUM
 *
n
, BIGNUM *
r
, 
BN_BLINDING
 *
b
, 
BN_CTX
 *);

598 
	`BN_BLINDING_övît_ex
(
BIGNUM
 *
n
, c⁄° BIGNUM *
r
, 
BN_BLINDING
 *
b
, 
BN_CTX
 *);

599 #i‚de‡
OPENSSL_NO_DEPRECATED


600 
	`BN_BLINDING_gë_thªad_id
(c⁄° 
BN_BLINDING
 *);

601 
	`BN_BLINDING_£t_thªad_id
(
BN_BLINDING
 *, );

603 
CRYPTO_THREADID
 *
	`BN_BLINDING_thªad_id
(
BN_BLINDING
 *);

604 
	`BN_BLINDING_gë_Êags
(c⁄° 
BN_BLINDING
 *);

605 
	`BN_BLINDING_£t_Êags
(
BN_BLINDING
 *, );

606 
BN_BLINDING
 *
	`BN_BLINDING_¸óã_∑øm
(BN_BLINDING *
b
,

607 c⁄° 
BIGNUM
 *
e
, BIGNUM *
m
, 
BN_CTX
 *
˘x
,

608 (*
bn_mod_exp
)(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

609 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
, 
BN_MONT_CTX
 *
m_˘x
),

610 
BN_MONT_CTX
 *
m_˘x
);

612 #i‚de‡
OPENSSL_NO_DEPRECATED


613 
	`BN_£t_∑øms
(
mul
,
high
,
low
,
m⁄t
);

614 
	`BN_gë_∑øms
(
which
);

617 
	`BN_RECP_CTX_öô
(
BN_RECP_CTX
 *
ª˝
);

618 
BN_RECP_CTX
 *
	`BN_RECP_CTX_√w
();

619 
	`BN_RECP_CTX_‰ì
(
BN_RECP_CTX
 *
ª˝
);

620 
	`BN_RECP_CTX_£t
(
BN_RECP_CTX
 *
ª˝
,c⁄° 
BIGNUM
 *
rdiv
,
BN_CTX
 *
˘x
);

621 
	`BN_mod_mul_ªcùroˇl
(
BIGNUM
 *
r
, c⁄° BIGNUM *
x
, c⁄° BIGNUM *
y
,

622 
BN_RECP_CTX
 *
ª˝
,
BN_CTX
 *
˘x
);

623 
	`BN_mod_exp_ª˝
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

624 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
);

625 
	`BN_div_ª˝
(
BIGNUM
 *
dv
, BIGNUM *
ªm
, c⁄° BIGNUM *
m
,

626 
BN_RECP_CTX
 *
ª˝
, 
BN_CTX
 *
˘x
);

628 #i‚de‡
OPENSSL_NO_EC2M


639 
	`BN_GF2m_add
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

640 
	#BN_GF2m_sub
(
r
, 
a
, 
b
Ë
	`BN_GF2m_add
‘,á, b)

	)

641 
	`BN_GF2m_mod
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
);

642 
	`BN_GF2m_mod_mul
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

643 c⁄° 
BIGNUM
 *
p
, 
BN_CTX
 *
˘x
);

644 
	`BN_GF2m_mod_sqr
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

645 
BN_CTX
 *
˘x
);

646 
	`BN_GF2m_mod_öv
(
BIGNUM
 *
r
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
p
,

647 
BN_CTX
 *
˘x
);

648 
	`BN_GF2m_mod_div
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

649 c⁄° 
BIGNUM
 *
p
, 
BN_CTX
 *
˘x
);

650 
	`BN_GF2m_mod_exp
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

651 c⁄° 
BIGNUM
 *
p
, 
BN_CTX
 *
˘x
);

652 
	`BN_GF2m_mod_sqπ
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

653 
BN_CTX
 *
˘x
);

654 
	`BN_GF2m_mod_sﬁve_quad
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

655 
BN_CTX
 *
˘x
);

656 
	#BN_GF2m_cmp
(
a
, 
b
Ë
	`BN_ucmp
(◊), (b))

	)

662 
	`BN_GF2m_mod_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° 
p
[]);

664 
	`BN_GF2m_mod_mul_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

665 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

666 
	`BN_GF2m_mod_sqr_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° 
p
[],

667 
BN_CTX
 *
˘x
);

668 
	`BN_GF2m_mod_öv_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
b
, c⁄° 
p
[],

669 
BN_CTX
 *
˘x
);

670 
	`BN_GF2m_mod_div_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

671 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

672 
	`BN_GF2m_mod_exp_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

673 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

674 
	`BN_GF2m_mod_sqπ_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
,

675 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

676 
	`BN_GF2m_mod_sﬁve_quad_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
,

677 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

678 
	`BN_GF2m_pﬁy2¨r
(c⁄° 
BIGNUM
 *
a
, 
p
[], 
max
);

679 
	`BN_GF2m_¨r2pﬁy
(c⁄° 
p
[], 
BIGNUM
 *
a
);

685 
	`BN_ni°_mod_192
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

686 
	`BN_ni°_mod_224
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

687 
	`BN_ni°_mod_256
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

688 
	`BN_ni°_mod_384
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

689 
	`BN_ni°_mod_521
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

691 c⁄° 
BIGNUM
 *
	`BN_gë0_ni°_¥ime_192
();

692 c⁄° 
BIGNUM
 *
	`BN_gë0_ni°_¥ime_224
();

693 c⁄° 
BIGNUM
 *
	`BN_gë0_ni°_¥ime_256
();

694 c⁄° 
BIGNUM
 *
	`BN_gë0_ni°_¥ime_384
();

695 c⁄° 
BIGNUM
 *
	`BN_gë0_ni°_¥ime_521
();

699 
	#bn_ex∑nd
(
a
,
bôs
Ë((((((bôs+
BN_BITS2
-1))/BN_BITS2)Ë<◊)->
dmax
)?\

700 (
a
):
	`bn_ex∑nd2
(◊),(
bôs
+
BN_BITS2
-1)/BN_BITS2))

	)

701 
	#bn_wex∑nd
(
a
,
w‹ds
Ë(((w‹dsË<◊)->
dmax
)?◊):
	`bn_ex∑nd2
(◊),(w‹ds)))

	)

702 
BIGNUM
 *
	`bn_ex∑nd2
(BIGNUM *
a
, 
w‹ds
);

703 #i‚de‡
OPENSSL_NO_DEPRECATED


704 
BIGNUM
 *
	`bn_dup_ex∑nd
(c⁄° BIGNUM *
a
, 
w‹ds
);

735 #ifde‡
BN_DEBUG


738 
	~<as£π.h
>

740 #ifde‡
BN_DEBUG_RAND


742 #i‚de‡
RAND_p£udo_byãs


743 
	`RAND_p£udo_byãs
(*
buf
,
num
);

744 
	#BN_DEBUG_TRIX


	)

746 
	#bn_pﬁluã
(
a
) \

748 c⁄° 
BIGNUM
 *
_bnum1
 = (
a
); \

749 if(
_bnum1
->
t›
 < _bnum1->
dmax
) { \

750 
_tmp_ch¨
; \

754 
BN_ULONG
 *
_nŸ_c⁄°
; \

755 
	`mem˝y
(&
_nŸ_c⁄°
, &
_bnum1
->
d
, (
BN_ULONG
*)); \

756 
	`RAND_p£udo_byãs
(&
_tmp_ch¨
, 1); \

757 
	`mem£t
((*)(
_nŸ_c⁄°
 + 
_bnum1
->
t›
), 
_tmp_ch¨
, \

758 (
_bnum1
->
dmax
 - _bnum1->
t›
Ë* (
BN_ULONG
)); \

760 } 0)

	)

761 #ifde‡
BN_DEBUG_TRIX


762 #unde‡
RAND_p£udo_byãs


765 
	#bn_pﬁluã
(
a
)

	)

767 
	#bn_check_t›
(
a
) \

769 c⁄° 
BIGNUM
 *
_bnum2
 = (
a
); \

770 i‡(
_bnum2
 !
NULL
) { \

771 
	`as£π
((
_bnum2
->
t›
 == 0) || \

772 (
_bnum2
->
d
[_bnum2->
t›
 - 1] != 0)); \

773 
	`bn_pﬁluã
(
_bnum2
); \

775 } 0)

	)

777 
	#bn_fix_t›
(
a
Ë
	`bn_check_t›
◊)

	)

779 
	#bn_check_size
(
bn
, 
bôs
Ë
	`bn_wcheck_size
(bn, ((bôs+
BN_BITS2
-1))/BN_BITS2)

	)

780 
	#bn_wcheck_size
(
bn
, 
w‹ds
) \

782 c⁄° 
BIGNUM
 *
_bnum2
 = (
bn
); \

783 
	`as£π
((
w‹ds
Ë<(
_bnum2
)->
dmax
 && (w‹dsË>(_bnum2)->
t›
); \

785 ()(
_bnum2
); \

786 } 0)

	)

790 
	#bn_pﬁluã
(
a
)

	)

791 
	#bn_check_t›
(
a
)

	)

792 
	#bn_fix_t›
(
a
Ë
	`bn_c‹ª˘_t›
◊)

	)

793 
	#bn_check_size
(
bn
, 
bôs
)

	)

794 
	#bn_wcheck_size
(
bn
, 
w‹ds
)

	)

798 
	#bn_c‹ª˘_t›
(
a
) \

800 
BN_ULONG
 *
·l
; \

801 
tmp_t›
 = (
a
)->
t›
; \

802 i‡(
tmp_t›
 > 0) \

804 
·l
&((
a
)->
d
[
tmp_t›
-1]);Åmp_top > 0;Åmp_top--) \

805 i‡(*(
·l
--)) ; \

806 (
a
)->
t›
 = 
tmp_t›
; \

808 
	`bn_pﬁluã
(
a
); \

809 }

	)

811 
BN_ULONG
 
	`bn_mul_add_w‹ds
(BN_ULONG *
Ω
, c⁄° BN_ULONG *
≠
, 
num
, BN_ULONG 
w
);

812 
BN_ULONG
 
	`bn_mul_w‹ds
(BN_ULONG *
Ω
, c⁄° BN_ULONG *
≠
, 
num
, BN_ULONG 
w
);

813 
	`bn_sqr_w‹ds
(
BN_ULONG
 *
Ω
, c⁄° BN_ULONG *
≠
, 
num
);

814 
BN_ULONG
 
	`bn_div_w‹ds
(BN_ULONG 
h
, BN_ULONG 
l
, BN_ULONG 
d
);

815 
BN_ULONG
 
	`bn_add_w‹ds
(BN_ULONG *
Ω
, c⁄° BN_ULONG *
≠
, c⁄° BN_ULONG *
bp
,
num
);

816 
BN_ULONG
 
	`bn_sub_w‹ds
(BN_ULONG *
Ω
, c⁄° BN_ULONG *
≠
, c⁄° BN_ULONG *
bp
,
num
);

819 
BIGNUM
 *
	`gë_rfc2409_¥ime_768
(BIGNUM *
bn
);

820 
BIGNUM
 *
	`gë_rfc2409_¥ime_1024
(BIGNUM *
bn
);

823 
BIGNUM
 *
	`gë_rfc3526_¥ime_1536
(BIGNUM *
bn
);

824 
BIGNUM
 *
	`gë_rfc3526_¥ime_2048
(BIGNUM *
bn
);

825 
BIGNUM
 *
	`gë_rfc3526_¥ime_3072
(BIGNUM *
bn
);

826 
BIGNUM
 *
	`gë_rfc3526_¥ime_4096
(BIGNUM *
bn
);

827 
BIGNUM
 *
	`gë_rfc3526_¥ime_6144
(BIGNUM *
bn
);

828 
BIGNUM
 *
	`gë_rfc3526_¥ime_8192
(BIGNUM *
bn
);

830 
	`BN_b¡e°_ønd
(
BIGNUM
 *
∫d
, 
bôs
, 
t›
,
bŸtom
);

836 
	`ERR_lﬂd_BN_°rögs
();

841 
	#BN_F_BNRAND
 127

	)

842 
	#BN_F_BN_BLINDING_CONVERT_EX
 100

	)

843 
	#BN_F_BN_BLINDING_CREATE_PARAM
 128

	)

844 
	#BN_F_BN_BLINDING_INVERT_EX
 101

	)

845 
	#BN_F_BN_BLINDING_NEW
 102

	)

846 
	#BN_F_BN_BLINDING_UPDATE
 103

	)

847 
	#BN_F_BN_BN2DEC
 104

	)

848 
	#BN_F_BN_BN2HEX
 105

	)

849 
	#BN_F_BN_CTX_GET
 116

	)

850 
	#BN_F_BN_CTX_NEW
 106

	)

851 
	#BN_F_BN_CTX_START
 129

	)

852 
	#BN_F_BN_DIV
 107

	)

853 
	#BN_F_BN_DIV_NO_BRANCH
 138

	)

854 
	#BN_F_BN_DIV_RECP
 130

	)

855 
	#BN_F_BN_EXP
 123

	)

856 
	#BN_F_BN_EXPAND2
 108

	)

857 
	#BN_F_BN_EXPAND_INTERNAL
 120

	)

858 
	#BN_F_BN_GF2M_MOD
 131

	)

859 
	#BN_F_BN_GF2M_MOD_EXP
 132

	)

860 
	#BN_F_BN_GF2M_MOD_MUL
 133

	)

861 
	#BN_F_BN_GF2M_MOD_SOLVE_QUAD
 134

	)

862 
	#BN_F_BN_GF2M_MOD_SOLVE_QUAD_ARR
 135

	)

863 
	#BN_F_BN_GF2M_MOD_SQR
 136

	)

864 
	#BN_F_BN_GF2M_MOD_SQRT
 137

	)

865 
	#BN_F_BN_MOD_EXP2_MONT
 118

	)

866 
	#BN_F_BN_MOD_EXP_MONT
 109

	)

867 
	#BN_F_BN_MOD_EXP_MONT_CONSTTIME
 124

	)

868 
	#BN_F_BN_MOD_EXP_MONT_WORD
 117

	)

869 
	#BN_F_BN_MOD_EXP_RECP
 125

	)

870 
	#BN_F_BN_MOD_EXP_SIMPLE
 126

	)

871 
	#BN_F_BN_MOD_INVERSE
 110

	)

872 
	#BN_F_BN_MOD_INVERSE_NO_BRANCH
 139

	)

873 
	#BN_F_BN_MOD_LSHIFT_QUICK
 119

	)

874 
	#BN_F_BN_MOD_MUL_RECIPROCAL
 111

	)

875 
	#BN_F_BN_MOD_SQRT
 121

	)

876 
	#BN_F_BN_MPI2BN
 112

	)

877 
	#BN_F_BN_NEW
 113

	)

878 
	#BN_F_BN_RAND
 114

	)

879 
	#BN_F_BN_RAND_RANGE
 122

	)

880 
	#BN_F_BN_USUB
 115

	)

883 
	#BN_R_ARG2_LT_ARG3
 100

	)

884 
	#BN_R_BAD_RECIPROCAL
 101

	)

885 
	#BN_R_BIGNUM_TOO_LONG
 114

	)

886 
	#BN_R_CALLED_WITH_EVEN_MODULUS
 102

	)

887 
	#BN_R_DIV_BY_ZERO
 103

	)

888 
	#BN_R_ENCODING_ERROR
 104

	)

889 
	#BN_R_EXPAND_ON_STATIC_BIGNUM_DATA
 105

	)

890 
	#BN_R_INPUT_NOT_REDUCED
 110

	)

891 
	#BN_R_INVALID_LENGTH
 106

	)

892 
	#BN_R_INVALID_RANGE
 115

	)

893 
	#BN_R_NOT_A_SQUARE
 111

	)

894 
	#BN_R_NOT_INITIALIZED
 107

	)

895 
	#BN_R_NO_INVERSE
 108

	)

896 
	#BN_R_NO_SOLUTION
 116

	)

897 
	#BN_R_P_IS_NOT_PRIME
 112

	)

898 
	#BN_R_TOO_MANY_ITERATIONS
 113

	)

899 
	#BN_R_TOO_MANY_TEMPORARY_VARIABLES
 109

	)

901 #ifde‡ 
__˝lu•lus


902 
	}
}

	@/usr/include/openssl/objects.h

59 #i‚de‡
HEADER_OBJECTS_H


60 
	#HEADER_OBJECTS_H


	)

62 
	#USE_OBJ_MAC


	)

64 #ifde‡
USE_OBJ_MAC


65 
	~<›ís¶/obj_mac.h
>

67 
	#SN_undef
 "UNDEF"

	)

68 
	#LN_undef
 "undeföed"

	)

69 
	#NID_undef
 0

	)

70 
	#OBJ_undef
 0L

	)

72 
	#SN_Alg‹ôhm
 "Alg‹ôhm"

	)

73 
	#LN_Æg‹ôhm
 "Æg‹ôhm"

	)

74 
	#NID_Æg‹ôhm
 38

	)

75 
	#OBJ_Æg‹ôhm
 1L,3L,14L,3L,2L

	)

77 
	#LN_rßdsi
 "rßdsi"

	)

78 
	#NID_rßdsi
 1

	)

79 
	#OBJ_rßdsi
 1L,2L,840L,113549L

	)

81 
	#LN_pkcs
 "pkcs"

	)

82 
	#NID_pkcs
 2

	)

83 
	#OBJ_pkcs
 
OBJ_rßdsi
,1L

	)

85 
	#SN_md2
 "MD2"

	)

86 
	#LN_md2
 "md2"

	)

87 
	#NID_md2
 3

	)

88 
	#OBJ_md2
 
OBJ_rßdsi
,2L,2L

	)

90 
	#SN_md5
 "MD5"

	)

91 
	#LN_md5
 "md5"

	)

92 
	#NID_md5
 4

	)

93 
	#OBJ_md5
 
OBJ_rßdsi
,2L,5L

	)

95 
	#SN_rc4
 "RC4"

	)

96 
	#LN_rc4
 "rc4"

	)

97 
	#NID_rc4
 5

	)

98 
	#OBJ_rc4
 
OBJ_rßdsi
,3L,4L

	)

100 
	#LN_rßEn¸y±i⁄
 "rßEn¸y±i⁄"

	)

101 
	#NID_rßEn¸y±i⁄
 6

	)

102 
	#OBJ_rßEn¸y±i⁄
 
OBJ_pkcs
,1L,1L

	)

104 
	#SN_md2WôhRSAEn¸y±i⁄
 "RSA-MD2"

	)

105 
	#LN_md2WôhRSAEn¸y±i⁄
 "md2WôhRSAEn¸y±i⁄"

	)

106 
	#NID_md2WôhRSAEn¸y±i⁄
 7

	)

107 
	#OBJ_md2WôhRSAEn¸y±i⁄
 
OBJ_pkcs
,1L,2L

	)

109 
	#SN_md5WôhRSAEn¸y±i⁄
 "RSA-MD5"

	)

110 
	#LN_md5WôhRSAEn¸y±i⁄
 "md5WôhRSAEn¸y±i⁄"

	)

111 
	#NID_md5WôhRSAEn¸y±i⁄
 8

	)

112 
	#OBJ_md5WôhRSAEn¸y±i⁄
 
OBJ_pkcs
,1L,4L

	)

114 
	#SN_pbeWôhMD2AndDES_CBC
 "PBE-MD2-DES"

	)

115 
	#LN_pbeWôhMD2AndDES_CBC
 "pbeWôhMD2AndDES-CBC"

	)

116 
	#NID_pbeWôhMD2AndDES_CBC
 9

	)

117 
	#OBJ_pbeWôhMD2AndDES_CBC
 
OBJ_pkcs
,5L,1L

	)

119 
	#SN_pbeWôhMD5AndDES_CBC
 "PBE-MD5-DES"

	)

120 
	#LN_pbeWôhMD5AndDES_CBC
 "pbeWôhMD5AndDES-CBC"

	)

121 
	#NID_pbeWôhMD5AndDES_CBC
 10

	)

122 
	#OBJ_pbeWôhMD5AndDES_CBC
 
OBJ_pkcs
,5L,3L

	)

124 
	#LN_X500
 "X500"

	)

125 
	#NID_X500
 11

	)

126 
	#OBJ_X500
 2L,5L

	)

128 
	#LN_X509
 "X509"

	)

129 
	#NID_X509
 12

	)

130 
	#OBJ_X509
 
OBJ_X500
,4L

	)

132 
	#SN_comm⁄Name
 "CN"

	)

133 
	#LN_comm⁄Name
 "comm⁄Name"

	)

134 
	#NID_comm⁄Name
 13

	)

135 
	#OBJ_comm⁄Name
 
OBJ_X509
,3L

	)

137 
	#SN_cou¡ryName
 "C"

	)

138 
	#LN_cou¡ryName
 "cou¡ryName"

	)

139 
	#NID_cou¡ryName
 14

	)

140 
	#OBJ_cou¡ryName
 
OBJ_X509
,6L

	)

142 
	#SN_loˇlôyName
 "L"

	)

143 
	#LN_loˇlôyName
 "loˇlôyName"

	)

144 
	#NID_loˇlôyName
 15

	)

145 
	#OBJ_loˇlôyName
 
OBJ_X509
,7L

	)

150 
	#SN_°©eOrProvö˚Name
 "ST"

	)

151 
	#LN_°©eOrProvö˚Name
 "°©eOrProvö˚Name"

	)

152 
	#NID_°©eOrProvö˚Name
 16

	)

153 
	#OBJ_°©eOrProvö˚Name
 
OBJ_X509
,8L

	)

155 
	#SN_‹g™iz©i⁄Name
 "O"

	)

156 
	#LN_‹g™iz©i⁄Name
 "‹g™iz©i⁄Name"

	)

157 
	#NID_‹g™iz©i⁄Name
 17

	)

158 
	#OBJ_‹g™iz©i⁄Name
 
OBJ_X509
,10L

	)

160 
	#SN_‹g™iz©i⁄ÆUnôName
 "OU"

	)

161 
	#LN_‹g™iz©i⁄ÆUnôName
 "‹g™iz©i⁄ÆUnôName"

	)

162 
	#NID_‹g™iz©i⁄ÆUnôName
 18

	)

163 
	#OBJ_‹g™iz©i⁄ÆUnôName
 
OBJ_X509
,11L

	)

165 
	#SN_rß
 "RSA"

	)

166 
	#LN_rß
 "rß"

	)

167 
	#NID_rß
 19

	)

168 
	#OBJ_rß
 
OBJ_X500
,8L,1L,1L

	)

170 
	#LN_pkcs7
 "pkcs7"

	)

171 
	#NID_pkcs7
 20

	)

172 
	#OBJ_pkcs7
 
OBJ_pkcs
,7L

	)

174 
	#LN_pkcs7_d©a
 "pkcs7-d©a"

	)

175 
	#NID_pkcs7_d©a
 21

	)

176 
	#OBJ_pkcs7_d©a
 
OBJ_pkcs7
,1L

	)

178 
	#LN_pkcs7_sig√d
 "pkcs7-sig√dD©a"

	)

179 
	#NID_pkcs7_sig√d
 22

	)

180 
	#OBJ_pkcs7_sig√d
 
OBJ_pkcs7
,2L

	)

182 
	#LN_pkcs7_ívñ›ed
 "pkcs7-ívñ›edD©a"

	)

183 
	#NID_pkcs7_ívñ›ed
 23

	)

184 
	#OBJ_pkcs7_ívñ›ed
 
OBJ_pkcs7
,3L

	)

186 
	#LN_pkcs7_sig√dAndEnvñ›ed
 "pkcs7-sig√dAndEnvñ›edD©a"

	)

187 
	#NID_pkcs7_sig√dAndEnvñ›ed
 24

	)

188 
	#OBJ_pkcs7_sig√dAndEnvñ›ed
 
OBJ_pkcs7
,4L

	)

190 
	#LN_pkcs7_dige°
 "pkcs7-dige°D©a"

	)

191 
	#NID_pkcs7_dige°
 25

	)

192 
	#OBJ_pkcs7_dige°
 
OBJ_pkcs7
,5L

	)

194 
	#LN_pkcs7_í¸y±ed
 "pkcs7-í¸y±edD©a"

	)

195 
	#NID_pkcs7_í¸y±ed
 26

	)

196 
	#OBJ_pkcs7_í¸y±ed
 
OBJ_pkcs7
,6L

	)

198 
	#LN_pkcs3
 "pkcs3"

	)

199 
	#NID_pkcs3
 27

	)

200 
	#OBJ_pkcs3
 
OBJ_pkcs
,3L

	)

202 
	#LN_dhKeyAgªemít
 "dhKeyAgªemít"

	)

203 
	#NID_dhKeyAgªemít
 28

	)

204 
	#OBJ_dhKeyAgªemít
 
OBJ_pkcs3
,1L

	)

206 
	#SN_des_ecb
 "DES-ECB"

	)

207 
	#LN_des_ecb
 "des-ecb"

	)

208 
	#NID_des_ecb
 29

	)

209 
	#OBJ_des_ecb
 
OBJ_Æg‹ôhm
,6L

	)

211 
	#SN_des_cfb64
 "DES-CFB"

	)

212 
	#LN_des_cfb64
 "des-cfb"

	)

213 
	#NID_des_cfb64
 30

	)

215 
	#OBJ_des_cfb64
 
OBJ_Æg‹ôhm
,9L

	)

217 
	#SN_des_cbc
 "DES-CBC"

	)

218 
	#LN_des_cbc
 "des-cbc"

	)

219 
	#NID_des_cbc
 31

	)

221 
	#OBJ_des_cbc
 
OBJ_Æg‹ôhm
,7L

	)

223 
	#SN_des_ede
 "DES-EDE"

	)

224 
	#LN_des_ede
 "des-ede"

	)

225 
	#NID_des_ede
 32

	)

227 
	#OBJ_des_ede
 
OBJ_Æg‹ôhm
,17L

	)

229 
	#SN_des_ede3
 "DES-EDE3"

	)

230 
	#LN_des_ede3
 "des-ede3"

	)

231 
	#NID_des_ede3
 33

	)

233 
	#SN_idó_cbc
 "IDEA-CBC"

	)

234 
	#LN_idó_cbc
 "idó-cbc"

	)

235 
	#NID_idó_cbc
 34

	)

236 
	#OBJ_idó_cbc
 1L,3L,6L,1L,4L,1L,188L,7L,1L,1L,2L

	)

238 
	#SN_idó_cfb64
 "IDEA-CFB"

	)

239 
	#LN_idó_cfb64
 "idó-cfb"

	)

240 
	#NID_idó_cfb64
 35

	)

242 
	#SN_idó_ecb
 "IDEA-ECB"

	)

243 
	#LN_idó_ecb
 "idó-ecb"

	)

244 
	#NID_idó_ecb
 36

	)

246 
	#SN_rc2_cbc
 "RC2-CBC"

	)

247 
	#LN_rc2_cbc
 "rc2-cbc"

	)

248 
	#NID_rc2_cbc
 37

	)

249 
	#OBJ_rc2_cbc
 
OBJ_rßdsi
,3L,2L

	)

251 
	#SN_rc2_ecb
 "RC2-ECB"

	)

252 
	#LN_rc2_ecb
 "rc2-ecb"

	)

253 
	#NID_rc2_ecb
 38

	)

255 
	#SN_rc2_cfb64
 "RC2-CFB"

	)

256 
	#LN_rc2_cfb64
 "rc2-cfb"

	)

257 
	#NID_rc2_cfb64
 39

	)

259 
	#SN_rc2_ofb64
 "RC2-OFB"

	)

260 
	#LN_rc2_ofb64
 "rc2-ofb"

	)

261 
	#NID_rc2_ofb64
 40

	)

263 
	#SN_sha
 "SHA"

	)

264 
	#LN_sha
 "sha"

	)

265 
	#NID_sha
 41

	)

266 
	#OBJ_sha
 
OBJ_Æg‹ôhm
,18L

	)

268 
	#SN_shaWôhRSAEn¸y±i⁄
 "RSA-SHA"

	)

269 
	#LN_shaWôhRSAEn¸y±i⁄
 "shaWôhRSAEn¸y±i⁄"

	)

270 
	#NID_shaWôhRSAEn¸y±i⁄
 42

	)

271 
	#OBJ_shaWôhRSAEn¸y±i⁄
 
OBJ_Æg‹ôhm
,15L

	)

273 
	#SN_des_ede_cbc
 "DES-EDE-CBC"

	)

274 
	#LN_des_ede_cbc
 "des-ede-cbc"

	)

275 
	#NID_des_ede_cbc
 43

	)

277 
	#SN_des_ede3_cbc
 "DES-EDE3-CBC"

	)

278 
	#LN_des_ede3_cbc
 "des-ede3-cbc"

	)

279 
	#NID_des_ede3_cbc
 44

	)

280 
	#OBJ_des_ede3_cbc
 
OBJ_rßdsi
,3L,7L

	)

282 
	#SN_des_ofb64
 "DES-OFB"

	)

283 
	#LN_des_ofb64
 "des-ofb"

	)

284 
	#NID_des_ofb64
 45

	)

285 
	#OBJ_des_ofb64
 
OBJ_Æg‹ôhm
,8L

	)

287 
	#SN_idó_ofb64
 "IDEA-OFB"

	)

288 
	#LN_idó_ofb64
 "idó-ofb"

	)

289 
	#NID_idó_ofb64
 46

	)

291 
	#LN_pkcs9
 "pkcs9"

	)

292 
	#NID_pkcs9
 47

	)

293 
	#OBJ_pkcs9
 
OBJ_pkcs
,9L

	)

295 
	#SN_pkcs9_emaûAddªss
 "Emaû"

	)

296 
	#LN_pkcs9_emaûAddªss
 "emaûAddªss"

	)

297 
	#NID_pkcs9_emaûAddªss
 48

	)

298 
	#OBJ_pkcs9_emaûAddªss
 
OBJ_pkcs9
,1L

	)

300 
	#LN_pkcs9_un°ru˘uªdName
 "un°ru˘uªdName"

	)

301 
	#NID_pkcs9_un°ru˘uªdName
 49

	)

302 
	#OBJ_pkcs9_un°ru˘uªdName
 
OBJ_pkcs9
,2L

	)

304 
	#LN_pkcs9_c⁄ã¡Ty≥
 "c⁄ã¡Ty≥"

	)

305 
	#NID_pkcs9_c⁄ã¡Ty≥
 50

	)

306 
	#OBJ_pkcs9_c⁄ã¡Ty≥
 
OBJ_pkcs9
,3L

	)

308 
	#LN_pkcs9_mesßgeDige°
 "mesßgeDige°"

	)

309 
	#NID_pkcs9_mesßgeDige°
 51

	)

310 
	#OBJ_pkcs9_mesßgeDige°
 
OBJ_pkcs9
,4L

	)

312 
	#LN_pkcs9_signögTime
 "signögTime"

	)

313 
	#NID_pkcs9_signögTime
 52

	)

314 
	#OBJ_pkcs9_signögTime
 
OBJ_pkcs9
,5L

	)

316 
	#LN_pkcs9_cou¡îsig«tuª
 "cou¡îsig«tuª"

	)

317 
	#NID_pkcs9_cou¡îsig«tuª
 53

	)

318 
	#OBJ_pkcs9_cou¡îsig«tuª
 
OBJ_pkcs9
,6L

	)

320 
	#LN_pkcs9_chÆÀngePassw‹d
 "chÆÀngePassw‹d"

	)

321 
	#NID_pkcs9_chÆÀngePassw‹d
 54

	)

322 
	#OBJ_pkcs9_chÆÀngePassw‹d
 
OBJ_pkcs9
,7L

	)

324 
	#LN_pkcs9_un°ru˘uªdAddªss
 "un°ru˘uªdAddªss"

	)

325 
	#NID_pkcs9_un°ru˘uªdAddªss
 55

	)

326 
	#OBJ_pkcs9_un°ru˘uªdAddªss
 
OBJ_pkcs9
,8L

	)

328 
	#LN_pkcs9_extCîtAâribuãs
 "exãndedCîtifiˇãAâribuãs"

	)

329 
	#NID_pkcs9_extCîtAâribuãs
 56

	)

330 
	#OBJ_pkcs9_extCîtAâribuãs
 
OBJ_pkcs9
,9L

	)

332 
	#SN_√tsˇ≥
 "Nësˇ≥"

	)

333 
	#LN_√tsˇ≥
 "Nësˇ≥ Communiˇti⁄†C‹p."

	)

334 
	#NID_√tsˇ≥
 57

	)

335 
	#OBJ_√tsˇ≥
 2L,16L,840L,1L,113730L

	)

337 
	#SN_√tsˇ≥_˚π_exãnsi⁄
 "nsCîtExt"

	)

338 
	#LN_√tsˇ≥_˚π_exãnsi⁄
 "Nësˇ≥ Cîtifiˇã Exãnsi⁄"

	)

339 
	#NID_√tsˇ≥_˚π_exãnsi⁄
 58

	)

340 
	#OBJ_√tsˇ≥_˚π_exãnsi⁄
 
OBJ_√tsˇ≥
,1L

	)

342 
	#SN_√tsˇ≥_d©a_ty≥
 "nsD©aTy≥"

	)

343 
	#LN_√tsˇ≥_d©a_ty≥
 "Nësˇ≥ D©®Ty≥"

	)

344 
	#NID_√tsˇ≥_d©a_ty≥
 59

	)

345 
	#OBJ_√tsˇ≥_d©a_ty≥
 
OBJ_√tsˇ≥
,2L

	)

347 
	#SN_des_ede_cfb64
 "DES-EDE-CFB"

	)

348 
	#LN_des_ede_cfb64
 "des-ede-cfb"

	)

349 
	#NID_des_ede_cfb64
 60

	)

351 
	#SN_des_ede3_cfb64
 "DES-EDE3-CFB"

	)

352 
	#LN_des_ede3_cfb64
 "des-ede3-cfb"

	)

353 
	#NID_des_ede3_cfb64
 61

	)

355 
	#SN_des_ede_ofb64
 "DES-EDE-OFB"

	)

356 
	#LN_des_ede_ofb64
 "des-ede-ofb"

	)

357 
	#NID_des_ede_ofb64
 62

	)

359 
	#SN_des_ede3_ofb64
 "DES-EDE3-OFB"

	)

360 
	#LN_des_ede3_ofb64
 "des-ede3-ofb"

	)

361 
	#NID_des_ede3_ofb64
 63

	)

364 
	#SN_sha1
 "SHA1"

	)

365 
	#LN_sha1
 "sha1"

	)

366 
	#NID_sha1
 64

	)

367 
	#OBJ_sha1
 
OBJ_Æg‹ôhm
,26L

	)

371 
	#SN_sha1WôhRSAEn¸y±i⁄
 "RSA-SHA1"

	)

372 
	#LN_sha1WôhRSAEn¸y±i⁄
 "sha1WôhRSAEn¸y±i⁄"

	)

373 
	#NID_sha1WôhRSAEn¸y±i⁄
 65

	)

374 
	#OBJ_sha1WôhRSAEn¸y±i⁄
 
OBJ_pkcs
,1L,5L

	)

376 
	#SN_dßWôhSHA
 "DSA-SHA"

	)

377 
	#LN_dßWôhSHA
 "dßWôhSHA"

	)

378 
	#NID_dßWôhSHA
 66

	)

379 
	#OBJ_dßWôhSHA
 
OBJ_Æg‹ôhm
,13L

	)

381 
	#SN_dß_2
 "DSA-ﬁd"

	)

382 
	#LN_dß_2
 "dßEn¸y±i⁄-ﬁd"

	)

383 
	#NID_dß_2
 67

	)

384 
	#OBJ_dß_2
 
OBJ_Æg‹ôhm
,12L

	)

387 
	#SN_pbeWôhSHA1AndRC2_CBC
 "PBE-SHA1-RC2-64"

	)

388 
	#LN_pbeWôhSHA1AndRC2_CBC
 "pbeWôhSHA1AndRC2-CBC"

	)

389 
	#NID_pbeWôhSHA1AndRC2_CBC
 68

	)

390 
	#OBJ_pbeWôhSHA1AndRC2_CBC
 
OBJ_pkcs
,5L,11L

	)

396 
	#LN_id_pbkdf2
 "PBKDF2"

	)

397 
	#NID_id_pbkdf2
 69

	)

398 
	#OBJ_id_pbkdf2
 
OBJ_pkcs
,5L,12L

	)

400 
	#SN_dßWôhSHA1_2
 "DSA-SHA1-ﬁd"

	)

401 
	#LN_dßWôhSHA1_2
 "dßWôhSHA1-ﬁd"

	)

402 
	#NID_dßWôhSHA1_2
 70

	)

404 
	#OBJ_dßWôhSHA1_2
 
OBJ_Æg‹ôhm
,27L

	)

406 
	#SN_√tsˇ≥_˚π_ty≥
 "nsCîtTy≥"

	)

407 
	#LN_√tsˇ≥_˚π_ty≥
 "Nësˇ≥ CîàTy≥"

	)

408 
	#NID_√tsˇ≥_˚π_ty≥
 71

	)

409 
	#OBJ_√tsˇ≥_˚π_ty≥
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,1L

	)

411 
	#SN_√tsˇ≥_ba£_uæ
 "nsBa£Uæ"

	)

412 
	#LN_√tsˇ≥_ba£_uæ
 "Nësˇ≥ Ba£ Uæ"

	)

413 
	#NID_√tsˇ≥_ba£_uæ
 72

	)

414 
	#OBJ_√tsˇ≥_ba£_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,2L

	)

416 
	#SN_√tsˇ≥_ªvoˇti⁄_uæ
 "nsRevoˇti⁄Uæ"

	)

417 
	#LN_√tsˇ≥_ªvoˇti⁄_uæ
 "Nësˇ≥ Revoˇti⁄ Uæ"

	)

418 
	#NID_√tsˇ≥_ªvoˇti⁄_uæ
 73

	)

419 
	#OBJ_√tsˇ≥_ªvoˇti⁄_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,3L

	)

421 
	#SN_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 "nsCaRevoˇti⁄Uæ"

	)

422 
	#LN_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 "Nësˇ≥ CA Revoˇti⁄ Uæ"

	)

423 
	#NID_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 74

	)

424 
	#OBJ_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,4L

	)

426 
	#SN_√tsˇ≥_ª√wÆ_uæ
 "nsRíewÆUæ"

	)

427 
	#LN_√tsˇ≥_ª√wÆ_uæ
 "Nësˇ≥ RíewÆ Uæ"

	)

428 
	#NID_√tsˇ≥_ª√wÆ_uæ
 75

	)

429 
	#OBJ_√tsˇ≥_ª√wÆ_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,7L

	)

431 
	#SN_√tsˇ≥_ˇ_pﬁicy_uæ
 "nsCaPﬁicyUæ"

	)

432 
	#LN_√tsˇ≥_ˇ_pﬁicy_uæ
 "Nësˇ≥ CA Pﬁicy Uæ"

	)

433 
	#NID_√tsˇ≥_ˇ_pﬁicy_uæ
 76

	)

434 
	#OBJ_√tsˇ≥_ˇ_pﬁicy_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,8L

	)

436 
	#SN_√tsˇ≥_s¶_£rvî_«me
 "nsS¶SîvîName"

	)

437 
	#LN_√tsˇ≥_s¶_£rvî_«me
 "Nësˇ≥ SSL Sîvî Name"

	)

438 
	#NID_√tsˇ≥_s¶_£rvî_«me
 77

	)

439 
	#OBJ_√tsˇ≥_s¶_£rvî_«me
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,12L

	)

441 
	#SN_√tsˇ≥_commít
 "nsCommít"

	)

442 
	#LN_√tsˇ≥_commít
 "Nësˇ≥ Commít"

	)

443 
	#NID_√tsˇ≥_commít
 78

	)

444 
	#OBJ_√tsˇ≥_commít
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,13L

	)

446 
	#SN_√tsˇ≥_˚π_£quí˚
 "nsCîtSequí˚"

	)

447 
	#LN_√tsˇ≥_˚π_£quí˚
 "Nësˇ≥ Cîtifiˇã Sequí˚"

	)

448 
	#NID_√tsˇ≥_˚π_£quí˚
 79

	)

449 
	#OBJ_√tsˇ≥_˚π_£quí˚
 
OBJ_√tsˇ≥_d©a_ty≥
,5L

	)

451 
	#SN_desx_cbc
 "DESX-CBC"

	)

452 
	#LN_desx_cbc
 "desx-cbc"

	)

453 
	#NID_desx_cbc
 80

	)

455 
	#SN_id_˚
 "id-˚"

	)

456 
	#NID_id_˚
 81

	)

457 
	#OBJ_id_˚
 2L,5L,29L

	)

459 
	#SN_subje˘_key_idítifõr
 "subje˘KeyIdítifõr"

	)

460 
	#LN_subje˘_key_idítifõr
 "X509v3 Subje˘ Key Idítifõr"

	)

461 
	#NID_subje˘_key_idítifõr
 82

	)

462 
	#OBJ_subje˘_key_idítifõr
 
OBJ_id_˚
,14L

	)

464 
	#SN_key_ußge
 "keyUßge"

	)

465 
	#LN_key_ußge
 "X509v3 Key Ußge"

	)

466 
	#NID_key_ußge
 83

	)

467 
	#OBJ_key_ußge
 
OBJ_id_˚
,15L

	)

469 
	#SN_¥iv©e_key_ußge_≥riod
 "¥iv©eKeyUßgePîiod"

	)

470 
	#LN_¥iv©e_key_ußge_≥riod
 "X509v3 Priv©êKey UßgêPîiod"

	)

471 
	#NID_¥iv©e_key_ußge_≥riod
 84

	)

472 
	#OBJ_¥iv©e_key_ußge_≥riod
 
OBJ_id_˚
,16L

	)

474 
	#SN_subje˘_Æt_«me
 "subje˘A…Name"

	)

475 
	#LN_subje˘_Æt_«me
 "X509v3 Subje˘ A…î«tivêName"

	)

476 
	#NID_subje˘_Æt_«me
 85

	)

477 
	#OBJ_subje˘_Æt_«me
 
OBJ_id_˚
,17L

	)

479 
	#SN_issuî_Æt_«me
 "issuîA…Name"

	)

480 
	#LN_issuî_Æt_«me
 "X509v3 Issuî A…î«tivêName"

	)

481 
	#NID_issuî_Æt_«me
 86

	)

482 
	#OBJ_issuî_Æt_«me
 
OBJ_id_˚
,18L

	)

484 
	#SN_basic_c⁄°øöts
 "basicC⁄°øöts"

	)

485 
	#LN_basic_c⁄°øöts
 "X509v3 Basi¯C⁄°øöts"

	)

486 
	#NID_basic_c⁄°øöts
 87

	)

487 
	#OBJ_basic_c⁄°øöts
 
OBJ_id_˚
,19L

	)

489 
	#SN_¸l_numbî
 "¸lNumbî"

	)

490 
	#LN_¸l_numbî
 "X509v3 CRL Numbî"

	)

491 
	#NID_¸l_numbî
 88

	)

492 
	#OBJ_¸l_numbî
 
OBJ_id_˚
,20L

	)

494 
	#SN_˚πifiˇã_pﬁicõs
 "˚πifiˇãPﬁicõs"

	)

495 
	#LN_˚πifiˇã_pﬁicõs
 "X509v3 Cîtifiˇã Pﬁicõs"

	)

496 
	#NID_˚πifiˇã_pﬁicõs
 89

	)

497 
	#OBJ_˚πifiˇã_pﬁicõs
 
OBJ_id_˚
,32L

	)

499 
	#SN_auth‹ôy_key_idítifõr
 "auth‹ôyKeyIdítifõr"

	)

500 
	#LN_auth‹ôy_key_idítifõr
 "X509v3 Auth‹ôy Key Idítifõr"

	)

501 
	#NID_auth‹ôy_key_idítifõr
 90

	)

502 
	#OBJ_auth‹ôy_key_idítifõr
 
OBJ_id_˚
,35L

	)

504 
	#SN_bf_cbc
 "BF-CBC"

	)

505 
	#LN_bf_cbc
 "bf-cbc"

	)

506 
	#NID_bf_cbc
 91

	)

507 
	#OBJ_bf_cbc
 1L,3L,6L,1L,4L,1L,3029L,1L,2L

	)

509 
	#SN_bf_ecb
 "BF-ECB"

	)

510 
	#LN_bf_ecb
 "bf-ecb"

	)

511 
	#NID_bf_ecb
 92

	)

513 
	#SN_bf_cfb64
 "BF-CFB"

	)

514 
	#LN_bf_cfb64
 "bf-cfb"

	)

515 
	#NID_bf_cfb64
 93

	)

517 
	#SN_bf_ofb64
 "BF-OFB"

	)

518 
	#LN_bf_ofb64
 "bf-ofb"

	)

519 
	#NID_bf_ofb64
 94

	)

521 
	#SN_mdc2
 "MDC2"

	)

522 
	#LN_mdc2
 "mdc2"

	)

523 
	#NID_mdc2
 95

	)

524 
	#OBJ_mdc2
 2L,5L,8L,3L,101L

	)

527 
	#SN_mdc2WôhRSA
 "RSA-MDC2"

	)

528 
	#LN_mdc2WôhRSA
 "mdc2wôhRSA"

	)

529 
	#NID_mdc2WôhRSA
 96

	)

530 
	#OBJ_mdc2WôhRSA
 2L,5L,8L,3L,100L

	)

532 
	#SN_rc4_40
 "RC4-40"

	)

533 
	#LN_rc4_40
 "rc4-40"

	)

534 
	#NID_rc4_40
 97

	)

536 
	#SN_rc2_40_cbc
 "RC2-40-CBC"

	)

537 
	#LN_rc2_40_cbc
 "rc2-40-cbc"

	)

538 
	#NID_rc2_40_cbc
 98

	)

540 
	#SN_givíName
 "G"

	)

541 
	#LN_givíName
 "givíName"

	)

542 
	#NID_givíName
 99

	)

543 
	#OBJ_givíName
 
OBJ_X509
,42L

	)

545 
	#SN_su∫ame
 "S"

	)

546 
	#LN_su∫ame
 "su∫ame"

	)

547 
	#NID_su∫ame
 100

	)

548 
	#OBJ_su∫ame
 
OBJ_X509
,4L

	)

550 
	#SN_öôüls
 "I"

	)

551 
	#LN_öôüls
 "öôüls"

	)

552 
	#NID_öôüls
 101

	)

553 
	#OBJ_öôüls
 
OBJ_X509
,43L

	)

555 
	#SN_uniqueIdítifõr
 "UID"

	)

556 
	#LN_uniqueIdítifõr
 "uniqueIdítifõr"

	)

557 
	#NID_uniqueIdítifõr
 102

	)

558 
	#OBJ_uniqueIdítifõr
 
OBJ_X509
,45L

	)

560 
	#SN_¸l_di°ributi⁄_poöts
 "¸lDi°ributi⁄Poöts"

	)

561 
	#LN_¸l_di°ributi⁄_poöts
 "X509v3 CRL Di°ributi⁄ Poöts"

	)

562 
	#NID_¸l_di°ributi⁄_poöts
 103

	)

563 
	#OBJ_¸l_di°ributi⁄_poöts
 
OBJ_id_˚
,31L

	)

565 
	#SN_md5WôhRSA
 "RSA-NP-MD5"

	)

566 
	#LN_md5WôhRSA
 "md5WôhRSA"

	)

567 
	#NID_md5WôhRSA
 104

	)

568 
	#OBJ_md5WôhRSA
 
OBJ_Æg‹ôhm
,3L

	)

570 
	#SN_£rülNumbî
 "SN"

	)

571 
	#LN_£rülNumbî
 "£rülNumbî"

	)

572 
	#NID_£rülNumbî
 105

	)

573 
	#OBJ_£rülNumbî
 
OBJ_X509
,5L

	)

575 
	#SN_tôÀ
 "T"

	)

576 
	#LN_tôÀ
 "tôÀ"

	)

577 
	#NID_tôÀ
 106

	)

578 
	#OBJ_tôÀ
 
OBJ_X509
,12L

	)

580 
	#SN_des¸ùti⁄
 "D"

	)

581 
	#LN_des¸ùti⁄
 "des¸ùti⁄"

	)

582 
	#NID_des¸ùti⁄
 107

	)

583 
	#OBJ_des¸ùti⁄
 
OBJ_X509
,13L

	)

586 
	#SN_ˇ°5_cbc
 "CAST5-CBC"

	)

587 
	#LN_ˇ°5_cbc
 "ˇ°5-cbc"

	)

588 
	#NID_ˇ°5_cbc
 108

	)

589 
	#OBJ_ˇ°5_cbc
 1L,2L,840L,113533L,7L,66L,10L

	)

591 
	#SN_ˇ°5_ecb
 "CAST5-ECB"

	)

592 
	#LN_ˇ°5_ecb
 "ˇ°5-ecb"

	)

593 
	#NID_ˇ°5_ecb
 109

	)

595 
	#SN_ˇ°5_cfb64
 "CAST5-CFB"

	)

596 
	#LN_ˇ°5_cfb64
 "ˇ°5-cfb"

	)

597 
	#NID_ˇ°5_cfb64
 110

	)

599 
	#SN_ˇ°5_ofb64
 "CAST5-OFB"

	)

600 
	#LN_ˇ°5_ofb64
 "ˇ°5-ofb"

	)

601 
	#NID_ˇ°5_ofb64
 111

	)

603 
	#LN_pbeWôhMD5AndCa°5_CBC
 "pbeWôhMD5AndCa°5CBC"

	)

604 
	#NID_pbeWôhMD5AndCa°5_CBC
 112

	)

605 
	#OBJ_pbeWôhMD5AndCa°5_CBC
 1L,2L,840L,113533L,7L,66L,12L

	)

611 
	#SN_dßWôhSHA1
 "DSA-SHA1"

	)

612 
	#LN_dßWôhSHA1
 "dßWôhSHA1"

	)

613 
	#NID_dßWôhSHA1
 113

	)

614 
	#OBJ_dßWôhSHA1
 1L,2L,840L,10040L,4L,3L

	)

616 
	#NID_md5_sha1
 114

	)

617 
	#SN_md5_sha1
 "MD5-SHA1"

	)

618 
	#LN_md5_sha1
 "md5-sha1"

	)

620 
	#SN_sha1WôhRSA
 "RSA-SHA1-2"

	)

621 
	#LN_sha1WôhRSA
 "sha1WôhRSA"

	)

622 
	#NID_sha1WôhRSA
 115

	)

623 
	#OBJ_sha1WôhRSA
 
OBJ_Æg‹ôhm
,29L

	)

625 
	#SN_dß
 "DSA"

	)

626 
	#LN_dß
 "dßEn¸y±i⁄"

	)

627 
	#NID_dß
 116

	)

628 
	#OBJ_dß
 1L,2L,840L,10040L,4L,1L

	)

630 
	#SN_rùemd160
 "RIPEMD160"

	)

631 
	#LN_rùemd160
 "rùemd160"

	)

632 
	#NID_rùemd160
 117

	)

633 
	#OBJ_rùemd160
 1L,3L,36L,3L,2L,1L

	)

637 
	#SN_rùemd160WôhRSA
 "RSA-RIPEMD160"

	)

638 
	#LN_rùemd160WôhRSA
 "rùemd160WôhRSA"

	)

639 
	#NID_rùemd160WôhRSA
 119

	)

640 
	#OBJ_rùemd160WôhRSA
 1L,3L,36L,3L,3L,1L,2L

	)

650 
	#SN_rc5_cbc
 "RC5-CBC"

	)

651 
	#LN_rc5_cbc
 "rc5-cbc"

	)

652 
	#NID_rc5_cbc
 120

	)

653 
	#OBJ_rc5_cbc
 
OBJ_rßdsi
,3L,8L

	)

655 
	#SN_rc5_ecb
 "RC5-ECB"

	)

656 
	#LN_rc5_ecb
 "rc5-ecb"

	)

657 
	#NID_rc5_ecb
 121

	)

659 
	#SN_rc5_cfb64
 "RC5-CFB"

	)

660 
	#LN_rc5_cfb64
 "rc5-cfb"

	)

661 
	#NID_rc5_cfb64
 122

	)

663 
	#SN_rc5_ofb64
 "RC5-OFB"

	)

664 
	#LN_rc5_ofb64
 "rc5-ofb"

	)

665 
	#NID_rc5_ofb64
 123

	)

667 
	#SN_æe_com¥essi⁄
 "RLE"

	)

668 
	#LN_æe_com¥essi⁄
 "ru¿Àngth com¥essi⁄"

	)

669 
	#NID_æe_com¥essi⁄
 124

	)

670 
	#OBJ_æe_com¥essi⁄
 1L,1L,1L,1L,666L,1L

	)

672 
	#SN_zlib_com¥essi⁄
 "ZLIB"

	)

673 
	#LN_zlib_com¥essi⁄
 "zlib com¥essi⁄"

	)

674 
	#NID_zlib_com¥essi⁄
 125

	)

675 
	#OBJ_zlib_com¥essi⁄
 1L,1L,1L,1L,666L,2L

	)

677 
	#SN_ext_key_ußge
 "exãndedKeyUßge"

	)

678 
	#LN_ext_key_ußge
 "X509v3 Exãnded Key Ußge"

	)

679 
	#NID_ext_key_ußge
 126

	)

680 
	#OBJ_ext_key_ußge
 
OBJ_id_˚
,37

	)

682 
	#SN_id_pkix
 "PKIX"

	)

683 
	#NID_id_pkix
 127

	)

684 
	#OBJ_id_pkix
 1L,3L,6L,1L,5L,5L,7L

	)

686 
	#SN_id_kp
 "id-kp"

	)

687 
	#NID_id_kp
 128

	)

688 
	#OBJ_id_kp
 
OBJ_id_pkix
,3L

	)

692 
	#SN_£rvî_auth
 "£rvîAuth"

	)

693 
	#LN_£rvî_auth
 "TLS Web Sîvî Authítiˇti⁄"

	)

694 
	#NID_£rvî_auth
 129

	)

695 
	#OBJ_£rvî_auth
 
OBJ_id_kp
,1L

	)

697 
	#SN_˛õ¡_auth
 "˛õ¡Auth"

	)

698 
	#LN_˛õ¡_auth
 "TLS Web Clõ¡ Authítiˇti⁄"

	)

699 
	#NID_˛õ¡_auth
 130

	)

700 
	#OBJ_˛õ¡_auth
 
OBJ_id_kp
,2L

	)

702 
	#SN_code_sign
 "codeSignög"

	)

703 
	#LN_code_sign
 "CodêSignög"

	)

704 
	#NID_code_sign
 131

	)

705 
	#OBJ_code_sign
 
OBJ_id_kp
,3L

	)

707 
	#SN_emaû_¥Ÿe˘
 "emaûPrŸe˘i⁄"

	)

708 
	#LN_emaû_¥Ÿe˘
 "E-maû PrŸe˘i⁄"

	)

709 
	#NID_emaû_¥Ÿe˘
 132

	)

710 
	#OBJ_emaû_¥Ÿe˘
 
OBJ_id_kp
,4L

	)

712 
	#SN_time_°amp
 "timeSèmpög"

	)

713 
	#LN_time_°amp
 "TimêSèmpög"

	)

714 
	#NID_time_°amp
 133

	)

715 
	#OBJ_time_°amp
 
OBJ_id_kp
,8L

	)

719 
	#SN_ms_code_öd
 "msCodeInd"

	)

720 
	#LN_ms_code_öd
 "Mi¸oso· IndividuÆ CodêSignög"

	)

721 
	#NID_ms_code_öd
 134

	)

722 
	#OBJ_ms_code_öd
 1L,3L,6L,1L,4L,1L,311L,2L,1L,21L

	)

724 
	#SN_ms_code_com
 "msCodeCom"

	)

725 
	#LN_ms_code_com
 "Mi¸oso· Commîcü»CodêSignög"

	)

726 
	#NID_ms_code_com
 135

	)

727 
	#OBJ_ms_code_com
 1L,3L,6L,1L,4L,1L,311L,2L,1L,22L

	)

729 
	#SN_ms_˘l_sign
 "msCTLSign"

	)

730 
	#LN_ms_˘l_sign
 "Mi¸oso· Tru° Li° Signög"

	)

731 
	#NID_ms_˘l_sign
 136

	)

732 
	#OBJ_ms_˘l_sign
 1L,3L,6L,1L,4L,1L,311L,10L,3L,1L

	)

734 
	#SN_ms_sgc
 "msSGC"

	)

735 
	#LN_ms_sgc
 "Mi¸oso· Sîvî G©ed Cry±o"

	)

736 
	#NID_ms_sgc
 137

	)

737 
	#OBJ_ms_sgc
 1L,3L,6L,1L,4L,1L,311L,10L,3L,3L

	)

739 
	#SN_ms_efs
 "msEFS"

	)

740 
	#LN_ms_efs
 "Mi¸oso· En¸y±ed FûêSy°em"

	)

741 
	#NID_ms_efs
 138

	)

742 
	#OBJ_ms_efs
 1L,3L,6L,1L,4L,1L,311L,10L,3L,4L

	)

746 
	#SN_ns_sgc
 "nsSGC"

	)

747 
	#LN_ns_sgc
 "Nësˇ≥ Sîvî G©ed Cry±o"

	)

748 
	#NID_ns_sgc
 139

	)

749 
	#OBJ_ns_sgc
 
OBJ_√tsˇ≥
,4L,1L

	)

751 
	#SN_dñè_¸l
 "dñèCRL"

	)

752 
	#LN_dñè_¸l
 "X509v3 Dñè CRL Indiˇt‹"

	)

753 
	#NID_dñè_¸l
 140

	)

754 
	#OBJ_dñè_¸l
 
OBJ_id_˚
,27L

	)

756 
	#SN_¸l_ªas⁄
 "CRLRós⁄"

	)

757 
	#LN_¸l_ªas⁄
 "CRL Rós⁄ Code"

	)

758 
	#NID_¸l_ªas⁄
 141

	)

759 
	#OBJ_¸l_ªas⁄
 
OBJ_id_˚
,21L

	)

761 
	#SN_övÆidôy_d©e
 "övÆidôyD©e"

	)

762 
	#LN_övÆidôy_d©e
 "InvÆidôy D©e"

	)

763 
	#NID_övÆidôy_d©e
 142

	)

764 
	#OBJ_övÆidôy_d©e
 
OBJ_id_˚
,24L

	)

766 
	#SN_sx√t
 "SXNëID"

	)

767 
	#LN_sx√t
 "Så⁄g Exå™ë ID"

	)

768 
	#NID_sx√t
 143

	)

769 
	#OBJ_sx√t
 1L,3L,101L,1L,4L,1L

	)

773 
	#OBJ_pkcs12
 
OBJ_pkcs
,12L

	)

774 
	#OBJ_pkcs12_pbeids
 
OBJ_pkcs12
, 1

	)

776 
	#SN_pbe_WôhSHA1And128BôRC4
 "PBE-SHA1-RC4-128"

	)

777 
	#LN_pbe_WôhSHA1And128BôRC4
 "pbeWôhSHA1And128BôRC4"

	)

778 
	#NID_pbe_WôhSHA1And128BôRC4
 144

	)

779 
	#OBJ_pbe_WôhSHA1And128BôRC4
 
OBJ_pkcs12_pbeids
, 1L

	)

781 
	#SN_pbe_WôhSHA1And40BôRC4
 "PBE-SHA1-RC4-40"

	)

782 
	#LN_pbe_WôhSHA1And40BôRC4
 "pbeWôhSHA1And40BôRC4"

	)

783 
	#NID_pbe_WôhSHA1And40BôRC4
 145

	)

784 
	#OBJ_pbe_WôhSHA1And40BôRC4
 
OBJ_pkcs12_pbeids
, 2L

	)

786 
	#SN_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 "PBE-SHA1-3DES"

	)

787 
	#LN_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 "pbeWôhSHA1And3-KeyTrùÀDES-CBC"

	)

788 
	#NID_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 146

	)

789 
	#OBJ_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 
OBJ_pkcs12_pbeids
, 3L

	)

791 
	#SN_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 "PBE-SHA1-2DES"

	)

792 
	#LN_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 "pbeWôhSHA1And2-KeyTrùÀDES-CBC"

	)

793 
	#NID_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 147

	)

794 
	#OBJ_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 
OBJ_pkcs12_pbeids
, 4L

	)

796 
	#SN_pbe_WôhSHA1And128BôRC2_CBC
 "PBE-SHA1-RC2-128"

	)

797 
	#LN_pbe_WôhSHA1And128BôRC2_CBC
 "pbeWôhSHA1And128BôRC2-CBC"

	)

798 
	#NID_pbe_WôhSHA1And128BôRC2_CBC
 148

	)

799 
	#OBJ_pbe_WôhSHA1And128BôRC2_CBC
 
OBJ_pkcs12_pbeids
, 5L

	)

801 
	#SN_pbe_WôhSHA1And40BôRC2_CBC
 "PBE-SHA1-RC2-40"

	)

802 
	#LN_pbe_WôhSHA1And40BôRC2_CBC
 "pbeWôhSHA1And40BôRC2-CBC"

	)

803 
	#NID_pbe_WôhSHA1And40BôRC2_CBC
 149

	)

804 
	#OBJ_pbe_WôhSHA1And40BôRC2_CBC
 
OBJ_pkcs12_pbeids
, 6L

	)

806 
	#OBJ_pkcs12_Vîsi⁄1
 
OBJ_pkcs12
, 10L

	)

808 
	#OBJ_pkcs12_BagIds
 
OBJ_pkcs12_Vîsi⁄1
, 1L

	)

810 
	#LN_keyBag
 "keyBag"

	)

811 
	#NID_keyBag
 150

	)

812 
	#OBJ_keyBag
 
OBJ_pkcs12_BagIds
, 1L

	)

814 
	#LN_pkcs8ShroudedKeyBag
 "pkcs8ShroudedKeyBag"

	)

815 
	#NID_pkcs8ShroudedKeyBag
 151

	)

816 
	#OBJ_pkcs8ShroudedKeyBag
 
OBJ_pkcs12_BagIds
, 2L

	)

818 
	#LN_˚πBag
 "˚πBag"

	)

819 
	#NID_˚πBag
 152

	)

820 
	#OBJ_˚πBag
 
OBJ_pkcs12_BagIds
, 3L

	)

822 
	#LN_¸lBag
 "¸lBag"

	)

823 
	#NID_¸lBag
 153

	)

824 
	#OBJ_¸lBag
 
OBJ_pkcs12_BagIds
, 4L

	)

826 
	#LN_£¸ëBag
 "£¸ëBag"

	)

827 
	#NID_£¸ëBag
 154

	)

828 
	#OBJ_£¸ëBag
 
OBJ_pkcs12_BagIds
, 5L

	)

830 
	#LN_ß„C⁄ã¡sBag
 "ß„C⁄ã¡sBag"

	)

831 
	#NID_ß„C⁄ã¡sBag
 155

	)

832 
	#OBJ_ß„C⁄ã¡sBag
 
OBJ_pkcs12_BagIds
, 6L

	)

834 
	#LN_‰õndlyName
 "‰õndlyName"

	)

835 
	#NID_‰õndlyName
 156

	)

836 
	#OBJ_‰õndlyName
 
OBJ_pkcs9
, 20L

	)

838 
	#LN_loˇlKeyID
 "loˇlKeyID"

	)

839 
	#NID_loˇlKeyID
 157

	)

840 
	#OBJ_loˇlKeyID
 
OBJ_pkcs9
, 21L

	)

842 
	#OBJ_˚πTy≥s
 
OBJ_pkcs9
, 22L

	)

844 
	#LN_x509Cîtifiˇã
 "x509Cîtifiˇã"

	)

845 
	#NID_x509Cîtifiˇã
 158

	)

846 
	#OBJ_x509Cîtifiˇã
 
OBJ_˚πTy≥s
, 1L

	)

848 
	#LN_sdsiCîtifiˇã
 "sdsiCîtifiˇã"

	)

849 
	#NID_sdsiCîtifiˇã
 159

	)

850 
	#OBJ_sdsiCîtifiˇã
 
OBJ_˚πTy≥s
, 2L

	)

852 
	#OBJ_¸lTy≥s
 
OBJ_pkcs9
, 23L

	)

854 
	#LN_x509Cæ
 "x509Cæ"

	)

855 
	#NID_x509Cæ
 160

	)

856 
	#OBJ_x509Cæ
 
OBJ_¸lTy≥s
, 1L

	)

860 
	#LN_pbes2
 "PBES2"

	)

861 
	#NID_pbes2
 161

	)

862 
	#OBJ_pbes2
 
OBJ_pkcs
,5L,13L

	)

864 
	#LN_pbmac1
 "PBMAC1"

	)

865 
	#NID_pbmac1
 162

	)

866 
	#OBJ_pbmac1
 
OBJ_pkcs
,5L,14L

	)

868 
	#LN_hmacWôhSHA1
 "hmacWôhSHA1"

	)

869 
	#NID_hmacWôhSHA1
 163

	)

870 
	#OBJ_hmacWôhSHA1
 
OBJ_rßdsi
,2L,7L

	)

874 
	#LN_id_qt_˝s
 "Pﬁicy QuÆifõ∏CPS"

	)

875 
	#SN_id_qt_˝s
 "id-qt-˝s"

	)

876 
	#NID_id_qt_˝s
 164

	)

877 
	#OBJ_id_qt_˝s
 
OBJ_id_pkix
,2L,1L

	)

879 
	#LN_id_qt_unŸi˚
 "Pﬁicy QuÆifõ∏U£∏NŸi˚"

	)

880 
	#SN_id_qt_unŸi˚
 "id-qt-unŸi˚"

	)

881 
	#NID_id_qt_unŸi˚
 165

	)

882 
	#OBJ_id_qt_unŸi˚
 
OBJ_id_pkix
,2L,2L

	)

884 
	#SN_rc2_64_cbc
 "RC2-64-CBC"

	)

885 
	#LN_rc2_64_cbc
 "rc2-64-cbc"

	)

886 
	#NID_rc2_64_cbc
 166

	)

888 
	#SN_SMIMEC≠abûôõs
 "SMIME-CAPS"

	)

889 
	#LN_SMIMEC≠abûôõs
 "S/MIME C≠abûôõs"

	)

890 
	#NID_SMIMEC≠abûôõs
 167

	)

891 
	#OBJ_SMIMEC≠abûôõs
 
OBJ_pkcs9
,15L

	)

893 
	#SN_pbeWôhMD2AndRC2_CBC
 "PBE-MD2-RC2-64"

	)

894 
	#LN_pbeWôhMD2AndRC2_CBC
 "pbeWôhMD2AndRC2-CBC"

	)

895 
	#NID_pbeWôhMD2AndRC2_CBC
 168

	)

896 
	#OBJ_pbeWôhMD2AndRC2_CBC
 
OBJ_pkcs
,5L,4L

	)

898 
	#SN_pbeWôhMD5AndRC2_CBC
 "PBE-MD5-RC2-64"

	)

899 
	#LN_pbeWôhMD5AndRC2_CBC
 "pbeWôhMD5AndRC2-CBC"

	)

900 
	#NID_pbeWôhMD5AndRC2_CBC
 169

	)

901 
	#OBJ_pbeWôhMD5AndRC2_CBC
 
OBJ_pkcs
,5L,6L

	)

903 
	#SN_pbeWôhSHA1AndDES_CBC
 "PBE-SHA1-DES"

	)

904 
	#LN_pbeWôhSHA1AndDES_CBC
 "pbeWôhSHA1AndDES-CBC"

	)

905 
	#NID_pbeWôhSHA1AndDES_CBC
 170

	)

906 
	#OBJ_pbeWôhSHA1AndDES_CBC
 
OBJ_pkcs
,5L,10L

	)

910 
	#LN_ms_ext_ªq
 "Mi¸oso· Exãnsi⁄ Reque°"

	)

911 
	#SN_ms_ext_ªq
 "msExtReq"

	)

912 
	#NID_ms_ext_ªq
 171

	)

913 
	#OBJ_ms_ext_ªq
 1L,3L,6L,1L,4L,1L,311L,2L,1L,14L

	)

915 
	#LN_ext_ªq
 "Exãnsi⁄ Reque°"

	)

916 
	#SN_ext_ªq
 "extReq"

	)

917 
	#NID_ext_ªq
 172

	)

918 
	#OBJ_ext_ªq
 
OBJ_pkcs9
,14L

	)

920 
	#SN_«me
 "«me"

	)

921 
	#LN_«me
 "«me"

	)

922 
	#NID_«me
 173

	)

923 
	#OBJ_«me
 
OBJ_X509
,41L

	)

925 
	#SN_dnQuÆifõr
 "dnQuÆifõr"

	)

926 
	#LN_dnQuÆifõr
 "dnQuÆifõr"

	)

927 
	#NID_dnQuÆifõr
 174

	)

928 
	#OBJ_dnQuÆifõr
 
OBJ_X509
,46L

	)

930 
	#SN_id_≥
 "id-≥"

	)

931 
	#NID_id_≥
 175

	)

932 
	#OBJ_id_≥
 
OBJ_id_pkix
,1L

	)

934 
	#SN_id_ad
 "id-ad"

	)

935 
	#NID_id_ad
 176

	)

936 
	#OBJ_id_ad
 
OBJ_id_pkix
,48L

	)

938 
	#SN_öfo_ac˚ss
 "auth‹ôyInfoAc˚ss"

	)

939 
	#LN_öfo_ac˚ss
 "Auth‹ôy Inf‹m©i⁄ Ac˚ss"

	)

940 
	#NID_öfo_ac˚ss
 177

	)

941 
	#OBJ_öfo_ac˚ss
 
OBJ_id_≥
,1L

	)

943 
	#SN_ad_OCSP
 "OCSP"

	)

944 
	#LN_ad_OCSP
 "OCSP"

	)

945 
	#NID_ad_OCSP
 178

	)

946 
	#OBJ_ad_OCSP
 
OBJ_id_ad
,1L

	)

948 
	#SN_ad_ˇ_issuîs
 "ˇIssuîs"

	)

949 
	#LN_ad_ˇ_issuîs
 "CA Issuîs"

	)

950 
	#NID_ad_ˇ_issuîs
 179

	)

951 
	#OBJ_ad_ˇ_issuîs
 
OBJ_id_ad
,2L

	)

953 
	#SN_OCSP_sign
 "OCSPSignög"

	)

954 
	#LN_OCSP_sign
 "OCSP Signög"

	)

955 
	#NID_OCSP_sign
 180

	)

956 
	#OBJ_OCSP_sign
 
OBJ_id_kp
,9L

	)

959 
	~<›ís¶/bio.h
>

960 
	~<›ís¶/a¢1.h
>

962 
	#OBJ_NAME_TYPE_UNDEF
 0x00

	)

963 
	#OBJ_NAME_TYPE_MD_METH
 0x01

	)

964 
	#OBJ_NAME_TYPE_CIPHER_METH
 0x02

	)

965 
	#OBJ_NAME_TYPE_PKEY_METH
 0x03

	)

966 
	#OBJ_NAME_TYPE_COMP_METH
 0x04

	)

967 
	#OBJ_NAME_TYPE_NUM
 0x05

	)

969 
	#OBJ_NAME_ALIAS
 0x8000

	)

971 
	#OBJ_BSEARCH_VALUE_ON_NOMATCH
 0x01

	)

972 
	#OBJ_BSEARCH_FIRST_VALUE_ON_MATCH
 0x02

	)

975 #ifde‡ 
__˝lu•lus


979 
	sobj_«me_°


981 
ty≥
;

982 
Æüs
;

983 c⁄° *
«me
;

984 c⁄° *
d©a
;

985 } 
	tOBJ_NAME
;

987 
	#OBJ_¸óã_™d_add_obje˘
(
a
,
b
,
c
Ë
	`OBJ_¸óã
◊,b,c)

	)

990 
OBJ_NAME_öô
();

991 
OBJ_NAME_√w_ödex
((*
hash_func
)(const *),

992 (*
cmp_func
)(const *, const *),

993 (*
‰ì_func
)(const *, , const *));

994 c⁄° *
OBJ_NAME_gë
(c⁄° *
«me
,
ty≥
);

995 
OBJ_NAME_add
(c⁄° *
«me
,
ty≥
,c⁄° *
d©a
);

996 
OBJ_NAME_ªmove
(c⁄° *
«me
,
ty≥
);

997 
OBJ_NAME_˛ónup
(
ty≥
);

998 
OBJ_NAME_do_Æl
(
ty≥
,(*
‚
)(c⁄° 
OBJ_NAME
 *,*
¨g
),

999 *
¨g
);

1000 
OBJ_NAME_do_Æl_s‹ãd
(
ty≥
,(*
‚
)(c⁄° 
OBJ_NAME
 *,*
¨g
),

1001 *
¨g
);

1003 
ASN1_OBJECT
 * 
OBJ_dup
(c⁄° ASN1_OBJECT *
o
);

1004 
ASN1_OBJECT
 * 
OBJ_nid2obj
(
n
);

1005 c⁄° * 
OBJ_nid2 
(
n
);

1006 c⁄° * 
OBJ_nid2¢
(
n
);

1007 
OBJ_obj2nid
(c⁄° 
ASN1_OBJECT
 *
o
);

1008 
ASN1_OBJECT
 * 
OBJ_txt2obj
(c⁄° *
s
, 
no_«me
);

1009 
OBJ_obj2txt
(*
buf
, 
buf_Àn
, c⁄° 
ASN1_OBJECT
 *
a
, 
no_«me
);

1010 
OBJ_txt2nid
(c⁄° *
s
);

1011 
OBJ_ 2nid
(c⁄° *
s
);

1012 
OBJ_¢2nid
(c⁄° *
s
);

1013 
OBJ_cmp
(c⁄° 
ASN1_OBJECT
 *
a
,c⁄° ASN1_OBJECT *
b
);

1014 c⁄° * 
OBJ_b£¨ch_
(c⁄° *
key
,c⁄° *
ba£
,
num
,
size
,

1015 (*
cmp
)(const *, const *));

1016 c⁄° * 
OBJ_b£¨ch_ex_
(c⁄° *
key
,c⁄° *
ba£
,
num
,

1017 
size
,

1018 (*
cmp
)(const *, const *),

1019 
Êags
);

1021 
	#_DECLARE_OBJ_BSEARCH_CMP_FN
(
sc›e
, 
ty≥1
, 
ty≥2
, 
nm
) \

1022 
nm
##
	`_cmp_BSEARCH_CMP_FN
(const *, const *); \

1023 
nm
##
	`_cmp
(
ty≥1
 c⁄° *, 
ty≥2
 const *); \

1024 
sc›e
 
ty≥2
 * 
OBJ_b£¨ch_
##
	`nm
(
ty≥1
 *
key
,Åy≥2 c⁄° *
ba£
, 
num
)

	)

1026 
	#DECLARE_OBJ_BSEARCH_CMP_FN
(
ty≥1
, 
ty≥2
, 
cmp
) \

1027 
	`_DECLARE_OBJ_BSEARCH_CMP_FN
(, 
ty≥1
, 
ty≥2
, 
cmp
)

	)

1028 
	#DECLARE_OBJ_BSEARCH_GLOBAL_CMP_FN
(
ty≥1
, 
ty≥2
, 
nm
) \

1029 
ty≥2
 * 
OBJ_b£¨ch_
##
	`nm
(
ty≥1
 *
key
,Åy≥2 c⁄° *
ba£
, 
num
)

	)

1058 
	#IMPLEMENT_OBJ_BSEARCH_CMP_FN
(
ty≥1
, 
ty≥2
, 
nm
) \

1059 
nm
##
	`_cmp_BSEARCH_CMP_FN
(c⁄° *
a_
, c⁄° *
b_
) \

1061 
ty≥1
 c⁄° *
a
 = 
a_
; \

1062 
ty≥2
 c⁄° *
b
 = 
b_
; \

1063  
nm
##
	`_cmp
(
a
,
b
); \

1065 
ty≥2
 *
OBJ_b£¨ch_
##
	`nm
(
ty≥1
 *
key
,Åy≥2 c⁄° *
ba£
, 
num
) \

1067  (
ty≥2
 *)
	`OBJ_b£¨ch_
(
key
, 
ba£
, 
num
, (type2), \

1068 
nm
##
_cmp_BSEARCH_CMP_FN
); \

1070 
	`dummy_¥ŸŸy≥
()

	)

1072 
	#IMPLEMENT_OBJ_BSEARCH_GLOBAL_CMP_FN
(
ty≥1
, 
ty≥2
, 
nm
) \

1073 
nm
##
	`_cmp_BSEARCH_CMP_FN
(c⁄° *
a_
, c⁄° *
b_
) \

1075 
ty≥1
 c⁄° *
a
 = 
a_
; \

1076 
ty≥2
 c⁄° *
b
 = 
b_
; \

1077  
nm
##
	`_cmp
(
a
,
b
); \

1079 
ty≥2
 *
OBJ_b£¨ch_
##
	`nm
(
ty≥1
 *
key
,Åy≥2 c⁄° *
ba£
, 
num
) \

1081  (
ty≥2
 *)
	`OBJ_b£¨ch_
(
key
, 
ba£
, 
num
, (type2), \

1082 
nm
##
_cmp_BSEARCH_CMP_FN
); \

1084 
	`dummy_¥ŸŸy≥
()

	)

1086 
	#OBJ_b£¨ch
(
ty≥1
,
key
,
ty≥2
,
ba£
,
num
,
cmp
) \

1087 ((
ty≥2
 *)
	`OBJ_b£¨ch_
(
	`CHECKED_PTR_OF
(
ty≥1
,
key
),CHECKED_PTR_OF—y≥2,
ba£
), \

1088 
num
,(
ty≥2
), \

1089 (()
	`CHECKED_PTR_OF
(
ty≥1
,
cmp
##
_ty≥_1
), \

1090 ()
	`CHECKED_PTR_OF
(
ty≥2
,
cmp
##
_ty≥_2
), \

1091 
cmp
##
_BSEARCH_CMP_FN
)))

	)

1093 
	#OBJ_b£¨ch_ex
(
ty≥1
,
key
,
ty≥2
,
ba£
,
num
,
cmp
,
Êags
) \

1094 ((
ty≥2
 *)
	`OBJ_b£¨ch_ex_
(
	`CHECKED_PTR_OF
(
ty≥1
,
key
),CHECKED_PTR_OF—y≥2,
ba£
), \

1095 
num
,(
ty≥2
), \

1096 (()
	`CHECKED_PTR_OF
(
ty≥1
,
cmp
##
_ty≥_1
), \

1097 ()
ty≥_2
=
	`CHECKED_PTR_OF
(
ty≥2
,
cmp
##
_ty≥_2
), \

1098 
cmp
##
_BSEARCH_CMP_FN
)),
Êags
)

	)

1100 
OBJ_√w_nid
(
num
);

1101 
OBJ_add_obje˘
(c⁄° 
ASN1_OBJECT
 *
obj
);

1102 
OBJ_¸óã
(c⁄° *
oid
,c⁄° *
¢
,c⁄° *
 
);

1103 
OBJ_˛ónup
();

1104 
OBJ_¸óã_obje˘s
(
BIO
 *
ö
);

1106 
OBJ_föd_sigid_Ægs
(
signid
, *
pdig_nid
, *
µkey_nid
);

1107 
OBJ_föd_sigid_by_Ægs
(*
psignid
, 
dig_nid
, 
pkey_nid
);

1108 
OBJ_add_sigid
(
signid
, 
dig_id
, 
pkey_id
);

1109 
OBJ_sigid_‰ì
();

1111 
obj_˛ónup_de„r
;

1112 
check_de„r
(
nid
);

1118 
ERR_lﬂd_OBJ_°rögs
();

1123 
	#OBJ_F_OBJ_ADD_OBJECT
 105

	)

1124 
	#OBJ_F_OBJ_CREATE
 100

	)

1125 
	#OBJ_F_OBJ_DUP
 101

	)

1126 
	#OBJ_F_OBJ_NAME_NEW_INDEX
 106

	)

1127 
	#OBJ_F_OBJ_NID2LN
 102

	)

1128 
	#OBJ_F_OBJ_NID2OBJ
 103

	)

1129 
	#OBJ_F_OBJ_NID2SN
 104

	)

1132 
	#OBJ_R_MALLOC_FAILURE
 100

	)

1133 
	#OBJ_R_UNKNOWN_NID
 101

	)

1135 #ifde‡ 
__˝lu•lus


	@/usr/include/wchar.h

23 #i‚de‡
_WCHAR_H


25 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


26 
	#_WCHAR_H
 1

	)

27 
	~<„©uªs.h
>

30 #ifde‡
_WCHAR_H


32 
	#__√ed___FILE


	)

33 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_FILE


	)

36 
	~<°dio.h
>

38 
	#__√ed___va_li°


	)

39 
	~<°d¨g.h
>

41 
	~<bôs/wch¨.h
>

44 
	#__√ed_size_t


	)

45 
	#__√ed_wch¨_t


	)

46 
	#__√ed_NULL


	)

48 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


49 #unde‡
__√ed_wöt_t


50 
	#__√ed_wöt_t


	)

51 
	~<°ddef.h
>

55 #i‚de‡
_WINT_T


60 
	#_WINT_T


	)

61 
	twöt_t
;

65 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

66 && 
deföed
 
__WINT_TYPE__


67 
__BEGIN_NAMESPACE_STD


68 
__WINT_TYPE__
 
	twöt_t
;

69 
	g__END_NAMESPACE_STD


74 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

75 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

79 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
____mb°©e_t_deföed


80 
	#____mb°©e_t_deföed
 1

	)

84 
	m__cou¡
;

87 #ifde‡
__WINT_TYPE__


88 
__WINT_TYPE__
 
	m__wch
;

90 
wöt_t
 
	m__wch
;

92 
	m__wchb
[4];

93 } 
	m__vÆue
;

94 } 
	t__mb°©e_t
;

96 #unde‡
__√ed_mb°©e_t


101 #ifde‡
_WCHAR_H


103 #i‚de‡
__mb°©e_t_deföed


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 
	#__mb°©e_t_deföed
 1

	)

111 #ifde‡
__USE_GNU


112 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

115 #i‚de‡
WCHAR_MIN


117 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

118 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

121 #i‚de‡
WEOF


122 
	#WEOF
 (0xffffffffu)

	)

127 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


128 
	~<w˘y≥.h
>

132 
__BEGIN_DECLS


134 
__BEGIN_NAMESPACE_STD


137 
tm
;

138 
__END_NAMESPACE_STD


142 
	$__USING_NAMESPACE_STD
(
tm
)

145 
__BEGIN_NAMESPACE_STD


147 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

150 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

151 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
;

155 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

158 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

159 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

160 
__THROW
;

163 
	$wcscmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
)

164 
__THROW
 
__©åibuã_puª__
;

166 
	$wc¢cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

167 
__THROW
 
__©åibuã_puª__
;

168 
__END_NAMESPACE_STD


170 #ifde‡
__USE_XOPEN2K8


172 
	$wcsˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

175 
	$wc¢ˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

176 
size_t
 
__n
Ë
__THROW
;

180 
	~<xloˇÀ.h
>

182 
	$wcsˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

183 
__loˇÀ_t
 
__loc
Ë
__THROW
;

185 
	$wc¢ˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

186 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


192 
	$wcscﬁl
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

196 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

197 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

198 
__END_NAMESPACE_STD


200 #ifde‡
__USE_XOPEN2K8


206 
	$wcscﬁl_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

207 
__loˇÀ_t
 
__loc
Ë
__THROW
;

212 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

213 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

216 
wch¨_t
 *
	$wcsdup
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

219 
__BEGIN_NAMESPACE_STD


221 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


222 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

223 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 "C++" c⁄° 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

227 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

228 
__THROW
 
__©åibuã_puª__
;

231 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


232 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

233 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 "C++" c⁄° 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

237 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

238 
__THROW
 
__©åibuã_puª__
;

240 
__END_NAMESPACE_STD


242 #ifde‡
__USE_GNU


245 
wch¨_t
 *
	$wcsch∫ul
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__wc
)

246 
__THROW
 
__©åibuã_puª__
;

249 
__BEGIN_NAMESPACE_STD


252 
size_t
 
	$wcsc•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ªje˘
)

253 
__THROW
 
__©åibuã_puª__
;

256 
size_t
 
	$wcs•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

257 
__THROW
 
__©åibuã_puª__
;

259 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


260 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

262 "C++" c⁄° 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
,

263 c⁄° 
wch¨_t
 *
__ac˚±
)

264 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

266 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

267 
__THROW
 
__©åibuã_puª__
;

270 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


271 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

273 "C++" c⁄° 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
,

274 c⁄° 
wch¨_t
 *
__√edÀ
)

275 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

277 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

278 
__THROW
 
__©åibuã_puª__
;

282 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

283 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

284 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

287 
size_t
 
	$wc¶í
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

288 
__END_NAMESPACE_STD


290 #ifde‡
__USE_XOPEN


292 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


293 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

295 "C++" c⁄° 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
,

296 c⁄° 
wch¨_t
 *
__√edÀ
)

297 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

299 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

300 
__THROW
 
__©åibuã_puª__
;

304 #ifde‡
__USE_XOPEN2K8


306 
size_t
 
	$wc¢Àn
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

307 
__THROW
 
__©åibuã_puª__
;

311 
__BEGIN_NAMESPACE_STD


313 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


314 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

316 "C++" c⁄° 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
,

317 
size_t
 
__n
)

318 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

320 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

321 
__THROW
 
__©åibuã_puª__
;

325 
	$wmemcmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

326 
__THROW
 
__©åibuã_puª__
;

329 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

330 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

334 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

335 
__THROW
;

338 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

339 
__END_NAMESPACE_STD


341 #ifde‡
__USE_GNU


344 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

345 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

346 
__THROW
;

350 
__BEGIN_NAMESPACE_STD


353 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

357 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

361 
	$mbsöô
 (c⁄° 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

365 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

366 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

367 
mb°©e_t
 *
__ª°ri˘
 
__p
Ë
__THROW
;

370 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

371 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

374 
size_t
 
	$__mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

375 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

376 
size_t
 
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

377 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

378 
__END_NAMESPACE_STD


380 #ifde‡
__USE_EXTERN_INLINES


386 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

387 
__exã∫_ölöe
 
wöt_t


388 
	`__NTH
 (
	$btowc
 (
__c
))

389 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

390 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

392 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

393 
__exã∫_ölöe
 

394 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

395 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

396 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

398 
__exã∫_ölöe
 
size_t


399 
__NTH
 (
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

400 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

401 {  (
__ps
 !
NULL


402 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

405 
__BEGIN_NAMESPACE_STD


408 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

409 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

410 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

414 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

415 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

416 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

417 
__END_NAMESPACE_STD


420 #ifdef 
__USE_XOPEN2K8


423 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

424 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

425 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

429 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

430 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

431 
size_t
 
__nwc
, size_à
__Àn
,

432 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

437 #ifde‡
__USE_XOPEN


439 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

443 
	$wcswidth
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

447 
__BEGIN_NAMESPACE_STD


450 
	$wc°od
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

451 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

452 
__END_NAMESPACE_STD


454 #ifde‡
__USE_ISOC99


455 
__BEGIN_NAMESPACE_C99


457 
	$wc°of
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

458 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

459 
	$wc°ﬁd
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

460 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

461 
__END_NAMESPACE_C99


465 
__BEGIN_NAMESPACE_STD


468 
	$wc°ﬁ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

469 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

473 
	$wc°oul
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

474 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

475 
__THROW
;

476 
__END_NAMESPACE_STD


478 #ifde‡
__USE_ISOC99


479 
__BEGIN_NAMESPACE_C99


482 
__exãnsi⁄__


483 
	$wc°ﬁl
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

484 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

485 
__THROW
;

489 
__exãnsi⁄__


490 
	$wc°ouŒ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

491 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

492 
__ba£
Ë
__THROW
;

493 
__END_NAMESPACE_C99


496 #ifde‡
__USE_GNU


499 
__exãnsi⁄__


500 
	$wc°oq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

501 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

502 
__THROW
;

506 
__exãnsi⁄__


507 
	$wc°ouq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

508 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

509 
__ba£
Ë
__THROW
;

512 #ifde‡
__USE_GNU


526 
	~<xloˇÀ.h
>

530 
	$wc°ﬁ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

531 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

532 
__loˇÀ_t
 
__loc
Ë
__THROW
;

534 
	$wc°oul_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

535 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

536 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

538 
__exãnsi⁄__


539 
	$wc°ﬁl_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

540 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

541 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

543 
__exãnsi⁄__


544 
	$wc°ouŒ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

545 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

546 
__ba£
, 
__loˇÀ_t
 
__loc
)

547 
__THROW
;

549 
	$wc°od_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

550 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

551 
__THROW
;

553 
	$wc°of_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

554 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

555 
__THROW
;

557 
	$wc°ﬁd_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

558 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

559 
__loˇÀ_t
 
__loc
Ë
__THROW
;

563 #ifde‡
__USE_XOPEN2K8


566 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

567 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

571 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

572 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

573 
__THROW
;

580 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

583 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


584 
__BEGIN_NAMESPACE_STD


587 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

594 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

595 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

601 
	`w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

605 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

606 
__THROW
 ;

612 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

613 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

614 
__gnuc_va_li°
 
__¨g
)

620 
	`vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

621 
__gnuc_va_li°
 
__¨g
)

625 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

626 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

627 
__gnuc_va_li°
 
__¨g
)

628 
__THROW
 ;

635 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

636 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

642 
	`wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
	$swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

646 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

647 
__THROW
 ;

649 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

650 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

651 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

652 #ifde‡
__REDIRECT


656 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

657 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

658 
__isoc99_fwsˇnf
)

660 
	`__REDIRECT
 (
wsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

661 
__isoc99_wsˇnf
)

663 
	`__REDIRECT_NTH
 (
swsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

664 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

665 ...), 
__isoc99_swsˇnf
)

668 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

669 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

670 
	`__isoc99_wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

671 
	$__isoc99_swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

672 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

673 
__THROW
;

674 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

675 
	#wsˇnf
 
__isoc99_wsˇnf


	)

676 
	#swsˇnf
 
__isoc99_swsˇnf


	)

680 
__END_NAMESPACE_STD


683 #ifde‡
__USE_ISOC99


684 
__BEGIN_NAMESPACE_C99


689 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

690 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

691 
__gnuc_va_li°
 
__¨g
)

697 
	`vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

698 
__gnuc_va_li°
 
__¨g
)

701 
	$vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

702 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

703 
__gnuc_va_li°
 
__¨g
)

704 
__THROW
 ;

706 #i‡!
deföed
 
__USE_GNU
 \

707 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

708 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

709 #ifde‡
__REDIRECT


710 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

711 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

712 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

714 
	`__REDIRECT
 (
vwsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

715 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

717 
	`__REDIRECT_NTH
 (
vswsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

718 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

719 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

722 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

723 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

724 
__gnuc_va_li°
 
__¨g
);

725 
	`__isoc99_vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

726 
__gnuc_va_li°
 
__¨g
);

727 
	$__isoc99_vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

728 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

729 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

730 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

731 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

732 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

736 
__END_NAMESPACE_C99


740 
__BEGIN_NAMESPACE_STD


745 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

746 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

752 
wöt_t
 
	`gëwch¨
 ();

759 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

760 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

766 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

774 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

775 
__FILE
 *
__ª°ri˘
 
__°ªam
);

781 
	`Âutws
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

782 
__FILE
 *
__ª°ri˘
 
__°ªam
);

789 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

790 
__END_NAMESPACE_STD


793 #ifde‡
__USE_GNU


801 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

802 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

810 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

818 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

827 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

828 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

837 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

838 
__FILE
 *
__ª°ri˘
 
__°ªam
);

846 
	`Âutws_u∆ocked
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

847 
__FILE
 *
__ª°ri˘
 
__°ªam
);

851 
__BEGIN_NAMESPACE_C99


855 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

856 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

857 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

858 
__END_NAMESPACE_C99


860 #ifde‡
__USE_GNU


861 
	~<xloˇÀ.h
>

865 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

866 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

867 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

868 
__loˇÀ_t
 
__loc
Ë
__THROW
;

877 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


878 
	#__√ed_iswxxx


	)

879 
	~<w˘y≥.h
>

883 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


884 
	~<bôs/wch¨2.h
>

887 #ifde‡
__LDBL_COMPAT


888 
	~<bôs/wch¨-ldbl.h
>

891 
__END_DECLS


899 #unde‡
__√ed_mb°©e_t


900 #unde‡
__√ed_wöt_t


	@/usr/include/asm-generic/errno.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_H


2 
	#_ASM_GENERIC_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o-ba£.h
>

6 
	#EDEADLK
 35

	)

7 
	#ENAMETOOLONG
 36

	)

8 
	#ENOLCK
 37

	)

9 
	#ENOSYS
 38

	)

10 
	#ENOTEMPTY
 39

	)

11 
	#ELOOP
 40

	)

12 
	#EWOULDBLOCK
 
EAGAIN


	)

13 
	#ENOMSG
 42

	)

14 
	#EIDRM
 43

	)

15 
	#ECHRNG
 44

	)

16 
	#EL2NSYNC
 45

	)

17 
	#EL3HLT
 46

	)

18 
	#EL3RST
 47

	)

19 
	#ELNRNG
 48

	)

20 
	#EUNATCH
 49

	)

21 
	#ENOCSI
 50

	)

22 
	#EL2HLT
 51

	)

23 
	#EBADE
 52

	)

24 
	#EBADR
 53

	)

25 
	#EXFULL
 54

	)

26 
	#ENOANO
 55

	)

27 
	#EBADRQC
 56

	)

28 
	#EBADSLT
 57

	)

30 
	#EDEADLOCK
 
EDEADLK


	)

32 
	#EBFONT
 59

	)

33 
	#ENOSTR
 60

	)

34 
	#ENODATA
 61

	)

35 
	#ETIME
 62

	)

36 
	#ENOSR
 63

	)

37 
	#ENONET
 64

	)

38 
	#ENOPKG
 65

	)

39 
	#EREMOTE
 66

	)

40 
	#ENOLINK
 67

	)

41 
	#EADV
 68

	)

42 
	#ESRMNT
 69

	)

43 
	#ECOMM
 70

	)

44 
	#EPROTO
 71

	)

45 
	#EMULTIHOP
 72

	)

46 
	#EDOTDOT
 73

	)

47 
	#EBADMSG
 74

	)

48 
	#EOVERFLOW
 75

	)

49 
	#ENOTUNIQ
 76

	)

50 
	#EBADFD
 77

	)

51 
	#EREMCHG
 78

	)

52 
	#ELIBACC
 79

	)

53 
	#ELIBBAD
 80

	)

54 
	#ELIBSCN
 81

	)

55 
	#ELIBMAX
 82

	)

56 
	#ELIBEXEC
 83

	)

57 
	#EILSEQ
 84

	)

58 
	#ERESTART
 85

	)

59 
	#ESTRPIPE
 86

	)

60 
	#EUSERS
 87

	)

61 
	#ENOTSOCK
 88

	)

62 
	#EDESTADDRREQ
 89

	)

63 
	#EMSGSIZE
 90

	)

64 
	#EPROTOTYPE
 91

	)

65 
	#ENOPROTOOPT
 92

	)

66 
	#EPROTONOSUPPORT
 93

	)

67 
	#ESOCKTNOSUPPORT
 94

	)

68 
	#EOPNOTSUPP
 95

	)

69 
	#EPFNOSUPPORT
 96

	)

70 
	#EAFNOSUPPORT
 97

	)

71 
	#EADDRINUSE
 98

	)

72 
	#EADDRNOTAVAIL
 99

	)

73 
	#ENETDOWN
 100

	)

74 
	#ENETUNREACH
 101

	)

75 
	#ENETRESET
 102

	)

76 
	#ECONNABORTED
 103

	)

77 
	#ECONNRESET
 104

	)

78 
	#ENOBUFS
 105

	)

79 
	#EISCONN
 106

	)

80 
	#ENOTCONN
 107

	)

81 
	#ESHUTDOWN
 108

	)

82 
	#ETOOMANYREFS
 109

	)

83 
	#ETIMEDOUT
 110

	)

84 
	#ECONNREFUSED
 111

	)

85 
	#EHOSTDOWN
 112

	)

86 
	#EHOSTUNREACH
 113

	)

87 
	#EALREADY
 114

	)

88 
	#EINPROGRESS
 115

	)

89 
	#ESTALE
 116

	)

90 
	#EUCLEAN
 117

	)

91 
	#ENOTNAM
 118

	)

92 
	#ENAVAIL
 119

	)

93 
	#EISNAM
 120

	)

94 
	#EREMOTEIO
 121

	)

95 
	#EDQUOT
 122

	)

97 
	#ENOMEDIUM
 123

	)

98 
	#EMEDIUMTYPE
 124

	)

99 
	#ECANCELED
 125

	)

100 
	#ENOKEY
 126

	)

101 
	#EKEYEXPIRED
 127

	)

102 
	#EKEYREVOKED
 128

	)

103 
	#EKEYREJECTED
 129

	)

106 
	#EOWNERDEAD
 130

	)

107 
	#ENOTRECOVERABLE
 131

	)

109 
	#ERFKILL
 132

	)

111 
	#EHWPOISON
 133

	)

	@/usr/include/asm-generic/param.h

1 #i‚de‡
__ASM_GENERIC_PARAM_H


2 
	#__ASM_GENERIC_PARAM_H


	)

4 #i‚de‡
HZ


5 
	#HZ
 100

	)

8 #i‚de‡
EXEC_PAGESIZE


9 
	#EXEC_PAGESIZE
 4096

	)

12 #i‚de‡
NOGROUP


13 
	#NOGROUP
 (-1)

	)

16 
	#MAXHOSTNAMELEN
 64

	)

	@/usr/include/asm/sockios.h

1 
	~<asm-gíîic/sockios.h
>

	@/usr/include/assert.h

22 #ifdef 
_ASSERT_H


24 #unde‡
_ASSERT_H


25 #unde‡
as£π


26 #unde‡
__ASSERT_VOID_CAST


28 #ifdef 
__USE_GNU


29 #unde‡
as£π_≥º‹


34 
	#_ASSERT_H
 1

	)

35 
	~<„©uªs.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

38 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

40 
	#__ASSERT_VOID_CAST
 ()

	)

48 #ifdef 
NDEBUG


50 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

58 #ifdef 
__USE_GNU


59 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

64 #i‚de‡
_ASSERT_H_DECLS


65 
	#_ASSERT_H_DECLS


	)

66 
__BEGIN_DECLS


69 
	$__as£π_Áû
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
,

70 
__löe
, c⁄° *
__fun˘i⁄
)

71 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

74 
	$__as£π_≥º‹_Áû
 (
__î∫um
, c⁄° *
__fûe
,

75 
__löe
, c⁄° *
__fun˘i⁄
)

76 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

81 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

82 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

85 
__END_DECLS


88 
	#as£π
(
ex¥
) \

89 ((
ex¥
) \

90 ? 
	`__ASSERT_VOID_CAST
 (0) \

91 : 
	`__as£π_Áû
 (
	`__STRING
(
ex¥
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

93 #ifdef 
__USE_GNU


94 
	#as£π_≥º‹
(
î∫um
) \

95 (!(
î∫um
) \

96 ? 
	`__ASSERT_VOID_CAST
 (0) \

97 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

105 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

106 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

108 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

109 
	#__ASSERT_FUNCTION
 
__func__


	)

111 
	#__ASSERT_FUNCTION
 ((c⁄° *Ë0)

	)

118 #i‡
deföed
 
__USE_ISOC11
 && !deföed 
__˝lu•lus


120 #unde‡
°©ic_as£π


121 
	#°©ic_as£π
 
_Sètic_as£π


	)

	@/usr/include/bits/wchar-ldbl.h

19 #i‚de‡
_WCHAR_H


23 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


24 
__BEGIN_NAMESPACE_C99


25 
__LDBL_REDIR_DECL
 (
fw¥ötf
);

26 
__LDBL_REDIR_DECL
 (
w¥ötf
);

27 
__LDBL_REDIR_DECL
 (
sw¥ötf
);

28 
__LDBL_REDIR_DECL
 (
vfw¥ötf
);

29 
__LDBL_REDIR_DECL
 (
vw¥ötf
);

30 
__LDBL_REDIR_DECL
 (
vsw¥ötf
);

31 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

32 && !
deföed
 
	g__REDIRECT
 \

33 && (
deföed
 
	g__STRICT_ANSI__
 || deföed 
	g__USE_XOPEN2K
)

34 
	$__LDBL_REDIR1_DECL
 (
fwsˇnf
, 
__∆dbl___isoc99_fwsˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
wsˇnf
, 
__∆dbl___isoc99_wsˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
swsˇnf
, 
__∆dbl___isoc99_swsˇnf
)

38 
	`__LDBL_REDIR_DECL
 (
fwsˇnf
);

39 
	`__LDBL_REDIR_DECL
 (
wsˇnf
);

40 
	`__LDBL_REDIR_DECL
 (
swsˇnf
);

42 
__END_NAMESPACE_C99


45 #ifde‡
__USE_ISOC99


46 
__BEGIN_NAMESPACE_C99


47 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd
, 
wc°od
);

48 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

49 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

50 
	$__LDBL_REDIR1_DECL
 (
vfwsˇnf
, 
__∆dbl___isoc99_vfwsˇnf
)

51 
	$__LDBL_REDIR1_DECL
 (
vwsˇnf
, 
__∆dbl___isoc99_vwsˇnf
)

52 
	$__LDBL_REDIR1_DECL
 (
vswsˇnf
, 
__∆dbl___isoc99_vswsˇnf
)

54 
	`__LDBL_REDIR_DECL
 (
vfwsˇnf
);

55 
	`__LDBL_REDIR_DECL
 (
vwsˇnf
);

56 
	`__LDBL_REDIR_DECL
 (
vswsˇnf
);

58 
__END_NAMESPACE_C99


61 #ifde‡
__USE_GNU


62 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd_l
, 
wc°od_l
);

65 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


66 
	$__LDBL_REDIR_DECL
 (
__sw¥ötf_chk
)

67 
	$__LDBL_REDIR_DECL
 (
__vsw¥ötf_chk
)

68 #i‡
__USE_FORTIFY_LEVEL
 > 1

69 
	$__LDBL_REDIR_DECL
 (
__fw¥ötf_chk
)

70 
	$__LDBL_REDIR_DECL
 (
__w¥ötf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__vfw¥ötf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__vw¥ötf_chk
)

	@/usr/include/bits/wchar2.h

19 #i‚de‡
_WCHAR_H


24 
wch¨_t
 *
	$__wmem˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

25 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

26 
size_t
 
__ns1
Ë
__THROW
;

27 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_Æüs
,

28 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

29 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
),

30 
wmem˝y
);

31 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_chk_w¨n
,

32 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

33 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

34 
size_t
 
__ns1
), 
__wmem˝y_chk
)

35 
	`__w¨«âr
 ("wmemcpy called withÜength biggerÅhan size of destination "

38 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

39 
	`__NTH
 (
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, c⁄° wch¨_à*__ª°ri˘ 
__s2
,

40 
size_t
 
__n
))

42 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

44 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

45  
	`__wmem˝y_chk
 (
__s1
, 
__s2
, 
__n
,

46 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

48 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

49  
	`__wmem˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

50 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

52  
	`__wmem˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

53 
	}
}

56 
wch¨_t
 *
	$__wmemmove_chk
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

57 
size_t
 
__n
, size_à
__ns1
Ë
__THROW
;

58 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_Æüs
, (wch¨_à*
__s1
,

59 c⁄° 
wch¨_t
 *
__s2
,

60 
size_t
 
__n
), 
wmemmove
);

61 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_w¨n
,

62 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

63 
size_t
 
__n
, size_à
__ns1
), 
__wmemmove_chk
)

64 
	`__w¨«âr
 ("wmemmove called withÜength biggerÅhan size of destination "

67 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

68 
	`__NTH
 (
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
))

70 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

72 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

73  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
,

74 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

76 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

77  
	`__wmemmove_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

78 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

80  
	`__wmemmove_Æüs
 (
__s1
, 
__s2
, 
__n
);

81 
	}
}

84 #ifde‡
__USE_GNU


85 
wch¨_t
 *
	$__wmemp˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

86 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

87 
size_t
 
__ns1
Ë
__THROW
;

88 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_Æüs
,

89 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

90 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
,

91 
size_t
 
__n
), 
wmemp˝y
);

92 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_chk_w¨n
,

93 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

94 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

95 
size_t
 
__ns1
), 
__wmemp˝y_chk
)

96 
	`__w¨«âr
 ("wmempcpy called withÜength biggerÅhan size of destination "

99 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

100 
	`__NTH
 (
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, c⁄° wch¨_à*__ª°ri˘ 
__s2
,

101 
size_t
 
__n
))

103 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

105 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

106  
	`__wmemp˝y_chk
 (
__s1
, 
__s2
, 
__n
,

107 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

109 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

110  
	`__wmemp˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

111 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

113  
	`__wmemp˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

114 
	}
}

118 
wch¨_t
 *
	$__wmem£t_chk
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

119 
size_t
 
__ns
Ë
__THROW
;

120 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_Æüs
, (wch¨_à*
__s
, wch¨_à
__c
,

121 
size_t
 
__n
), 
wmem£t
);

122 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_chk_w¨n
,

123 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

124 
size_t
 
__ns
), 
__wmem£t_chk
)

125 
	`__w¨«âr
 ("wmemset called withÜength biggerÅhan size of destination "

128 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

129 
	`__NTH
 (
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
))

131 i‡(
	`__bos0
 (
__s
Ë!(
size_t
) -1)

133 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

134  
	`__wmem£t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__sË/  (
wch¨_t
));

136 i‡(
__n
 > 
	`__bos0
 (
__s
Ë/  (
wch¨_t
))

137  
	`__wmem£t_chk_w¨n
 (
__s
, 
__c
, 
__n
,

138 
	`__bos0
 (
__s
Ë/  (
wch¨_t
));

140  
	`__wmem£t_Æüs
 (
__s
, 
__c
, 
__n
);

141 
	}
}

144 
wch¨_t
 *
	$__wcs˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

146 
size_t
 
__n
Ë
__THROW
;

147 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcs˝y_Æüs
,

148 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

149 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcs˝y
);

151 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

152 
	`__NTH
 (
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

154 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

155  
	`__wcs˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

156  
	`__wcs˝y_Æüs
 (
__de°
, 
__§c
);

157 
	}
}

160 
wch¨_t
 *
	$__w˝˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

161 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

162 
size_t
 
__de°Àn
Ë
__THROW
;

163 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝˝y_Æüs
,

164 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

165 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
w˝˝y
);

167 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

168 
	`__NTH
 (
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

170 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

171  
	`__w˝˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

172  
	`__w˝˝y_Æüs
 (
__de°
, 
__§c
);

173 
	}
}

176 
wch¨_t
 *
	$__wc¢˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

177 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

178 
size_t
 
__de°Àn
Ë
__THROW
;

179 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_Æüs
,

180 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

181 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

182 
size_t
 
__n
), 
wc¢˝y
);

183 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_chk_w¨n
,

184 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

185 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

186 
size_t
 
__n
, size_à
__de°Àn
), 
__wc¢˝y_chk
)

187 
	`__w¨«âr
 ("wcsncpy called withÜength biggerÅhan size of destination "

190 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

191 
	`__NTH
 (
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

192 
size_t
 
__n
))

194 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

196 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

197  
	`__wc¢˝y_chk
 (
__de°
, 
__§c
, 
__n
,

198 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

199 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

200  
	`__wc¢˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

201 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

203  
	`__wc¢˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

204 
	}
}

207 
wch¨_t
 *
	$__w˝n˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

208 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

209 
size_t
 
__de°Àn
Ë
__THROW
;

210 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_Æüs
,

211 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

212 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

213 
size_t
 
__n
), 
w˝n˝y
);

214 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_chk_w¨n
,

215 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

216 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

217 
size_t
 
__n
, size_à
__de°Àn
), 
__w˝n˝y_chk
)

218 
	`__w¨«âr
 ("wcpncpy called withÜength biggerÅhan size of destination "

221 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

222 
	`__NTH
 (
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

223 
size_t
 
__n
))

225 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

227 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

228  
	`__w˝n˝y_chk
 (
__de°
, 
__§c
, 
__n
,

229 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

230 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

231  
	`__w˝n˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

232 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

234  
	`__w˝n˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

235 
	}
}

238 
wch¨_t
 *
	$__wcsˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

239 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

240 
size_t
 
__de°Àn
Ë
__THROW
;

241 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcsˇt_Æüs
,

242 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

243 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcsˇt
);

245 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

246 
	`__NTH
 (
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

248 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

249  
	`__wcsˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

250  
	`__wcsˇt_Æüs
 (
__de°
, 
__§c
);

251 
	}
}

254 
wch¨_t
 *
	$__wc¢ˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

255 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

256 
size_t
 
__n
, size_à
__de°Àn
Ë
__THROW
;

257 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢ˇt_Æüs
,

258 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

259 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

260 
size_t
 
__n
), 
wc¢ˇt
);

262 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

263 
	`__NTH
 (
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

264 
size_t
 
__n
))

266 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

267  
	`__wc¢ˇt_chk
 (
__de°
, 
__§c
, 
__n
,

268 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

269  
	`__wc¢ˇt_Æüs
 (
__de°
, 
__§c
, 
__n
);

270 
	}
}

273 
	$__sw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

274 
__Êag
, 
size_t
 
__s_Àn
,

275 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

276 
__THROW
 ;

278 
	`__REDIRECT_NTH_LDBL
 (
__sw¥ötf_Æüs
,

279 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

280 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...),

281 
sw¥ötf
);

283 #ifde‡
__va_¨g_∑ck


284 
__f‹tify_fun˘i⁄
 

285 
	`__NTH
 (
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

286 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...))

288 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

289  
	`__sw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

290 
	`__bos
 (
__s
Ë/  (
wch¨_t
),

291 
__fmt
, 
	`__va_¨g_∑ck
 ());

292  
	`__sw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
	`__va_¨g_∑ck
 ());

293 
	}
}

294 #ñi‡!
deföed
 
__˝lu•lus


296 
	#sw¥ötf
(
s
, 
n
, ...) \

297 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

298 ? 
	`__sw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

299 
	`__bos
 (
s
Ë/  (
wch¨_t
), 
__VA_ARGS__
) \

300 : 
	`sw¥ötf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

303 
	$__vsw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

304 
__Êag
, 
size_t
 
__s_Àn
,

305 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

306 
__gnuc_va_li°
 
__¨g
)

307 
__THROW
 ;

309 
	`__REDIRECT_NTH_LDBL
 (
__vsw¥ötf_Æüs
,

310 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

311 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
,

312 
__gnuc_va_li°
 
__≠
), 
vsw¥ötf
);

314 
__f‹tify_fun˘i⁄
 

315 
	`__NTH
 (
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

316 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

318 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

319  
	`__vsw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

320 
	`__bos
 (
__s
Ë/  (
wch¨_t
), 
__fmt
, 
__≠
);

321  
	`__vsw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
__≠
);

322 
	}
}

325 #i‡
__USE_FORTIFY_LEVEL
 > 1

327 
__fw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

328 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

329 
__w¥ötf_chk
 (
__Êag
, c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

331 
__vfw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

332 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

333 
__gnuc_va_li°
 
__≠
);

334 
__vw¥ötf_chk
 (
__Êag
, c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

335 
__gnuc_va_li°
 
__≠
);

337 #ifde‡
__va_¨g_∑ck


338 
__f‹tify_fun˘i⁄
 

339 
	$w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...)

341  
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

342 
	}
}

344 
__f‹tify_fun˘i⁄
 

345 
	$fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__fmt
, ...)

347  
	`__fw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

348 
	`__va_¨g_∑ck
 ());

349 
	}
}

350 #ñi‡!
deföed
 
__˝lu•lus


351 
	#w¥ötf
(...) \

352 
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

353 
	#fw¥ötf
(
°ªam
, ...) \

354 
	`__fw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

357 
__f‹tify_fun˘i⁄
 

358 
	$vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

360  
	`__vw¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

361 
	}
}

363 
__f‹tify_fun˘i⁄
 

364 
	$vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

365 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

367  
	`__vfw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

368 
	}
}

372 
wch¨_t
 *
	$__fgëws_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

373 
__FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

374 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_Æüs
,

375 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

376 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws
Ë
__wur
;

377 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_chk_w¨n
,

378 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

379 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgëws_chk
)

380 
__wur
 
	`__w¨«âr
 ("fgetws called with bigger sizeÅhanÜength "

383 
__f‹tify_fun˘i⁄
 
__wur
 
wch¨_t
 *

384 
	$fgëws
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

386 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

388 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

389  
	`__fgëws_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

390 
__n
, 
__°ªam
);

392 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

393  
	`__fgëws_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

394 
__n
, 
__°ªam
);

396  
	`__fgëws_Æüs
 (
__s
, 
__n
, 
__°ªam
);

397 
	}
}

399 #ifde‡
__USE_GNU


400 
wch¨_t
 *
	$__fgëws_u∆ocked_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
,

401 
__n
, 
__FILE
 *
__ª°ri˘
 
__°ªam
)

402 
__wur
;

403 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_Æüs
,

404 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

405 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws_u∆ocked
)

406 
__wur
;

407 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_chk_w¨n
,

408 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

409 
__FILE
 *
__ª°ri˘
 
__°ªam
),

410 
__fgëws_u∆ocked_chk
)

411 
__wur
 
	`__w¨«âr
 ("fgetws_unlocked called with bigger sizeÅhanÜength "

414 
__f‹tify_fun˘i⁄
 
__wur
 
wch¨_t
 *

415 
	$fgëws_u∆ocked
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

417 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

419 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

420  
	`__fgëws_u∆ocked_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

421 
__n
, 
__°ªam
);

423 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

424  
	`__fgëws_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

425 
__n
, 
__°ªam
);

427  
	`__fgëws_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

428 
	}
}

432 
size_t
 
	$__w¸tomb_chk
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

433 
mb°©e_t
 *
__ª°ri˘
 
__p
,

434 
size_t
 
__buÊí
Ë
__THROW
 
__wur
;

435 
size_t
 
	`__REDIRECT_NTH
 (
__w¸tomb_Æüs
,

436 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

437 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
w¸tomb
Ë
__wur
;

439 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


440 
	`__NTH
 (
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

441 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

446 
	#__WCHAR_MB_LEN_MAX
 16

	)

447 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__WCHAR_MB_LEN_MAX


450 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

451  
	`__w¸tomb_chk
 (
__s
, 
__wch¨
, 
__ps
, 
	`__bos
 (__s));

452  
	`__w¸tomb_Æüs
 (
__s
, 
__wch¨
, 
__ps
);

453 
	}
}

456 
size_t
 
	$__mb§towcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

457 c⁄° **
__ª°ri˘
 
__§c
,

458 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

459 
size_t
 
__d°Àn
Ë
__THROW
;

460 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_Æüs
,

461 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

462 c⁄° **
__ª°ri˘
 
__§c
,

463 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

464 
mb§towcs
);

465 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_chk_w¨n
,

466 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

467 c⁄° **
__ª°ri˘
 
__§c
,

468 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

469 
size_t
 
__d°Àn
), 
__mb§towcs_chk
)

470 
	`__w¨«âr
 ("mbsrtowcs called with dst buffer smallerÅhanÜen "

473 
__f‹tify_fun˘i⁄
 
size_t


474 
	`__NTH
 (
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° **__ª°ri˘ 
__§c
,

475 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

477 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

479 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

480  
	`__mb§towcs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

481 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

483 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

484  
	`__mb§towcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

485 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

487  
	`__mb§towcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

488 
	}
}

491 
size_t
 
	$__wc§tombs_chk
 (*
__ª°ri˘
 
__d°
,

492 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

493 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

494 
size_t
 
__d°Àn
Ë
__THROW
;

495 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_Æüs
,

496 (*
__ª°ri˘
 
__d°
,

497 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

498 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

499 
wc§tombs
);

500 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_chk_w¨n
,

501 (*
__ª°ri˘
 
__d°
,

502 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

503 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

504 
size_t
 
__d°Àn
), 
__wc§tombs_chk
)

505 
	`__w¨«âr
 ("wcsrtombs called with dst buffer smallerÅhanÜen");

507 
__f‹tify_fun˘i⁄
 
size_t


508 
	`__NTH
 (
	$wc§tombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 **__ª°ri˘ 
__§c
,

509 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

511 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

513 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

514  
	`__wc§tombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

516 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

517  
	`__wc§tombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

519  
	`__wc§tombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

520 
	}
}

523 #ifde‡
__USE_GNU


524 
size_t
 
	$__mb¢πowcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

525 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

526 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

527 
size_t
 
__d°Àn
Ë
__THROW
;

528 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_Æüs
,

529 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

530 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

531 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

532 
mb¢πowcs
);

533 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_chk_w¨n
,

534 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

535 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

536 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

537 
size_t
 
__d°Àn
), 
__mb¢πowcs_chk
)

538 
	`__w¨«âr
 ("mbsnrtowcs called with dst buffer smallerÅhanÜen "

541 
__f‹tify_fun˘i⁄
 
size_t


542 
	`__NTH
 (
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° **__ª°ri˘ 
__§c
,

543 
size_t
 
__nmc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

545 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

547 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

548  
	`__mb¢πowcs_chk
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

549 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

551 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

552  
	`__mb¢πowcs_chk_w¨n
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

553 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

555  
	`__mb¢πowcs_Æüs
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
);

556 
	}
}

559 
size_t
 
	$__wc¢πombs_chk
 (*
__ª°ri˘
 
__d°
,

560 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

561 
size_t
 
__nwc
, size_à
__Àn
,

562 
mb°©e_t
 *
__ª°ri˘
 
__ps
, 
size_t
 
__d°Àn
)

563 
__THROW
;

564 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_Æüs
,

565 (*
__ª°ri˘
 
__d°
,

566 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

567 
size_t
 
__nwc
, size_à
__Àn
,

568 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
wc¢πombs
);

569 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_chk_w¨n
,

570 (*
__ª°ri˘
 
__d°
,

571 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

572 
size_t
 
__nwc
, size_à
__Àn
,

573 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

574 
size_t
 
__d°Àn
), 
__wc¢πombs_chk
)

575 
	`__w¨«âr
 ("wcsnrtombs called with dst buffer smallerÅhanÜen");

577 
__f‹tify_fun˘i⁄
 
size_t


578 
	`__NTH
 (
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 **__ª°ri˘ 
__§c
,

579 
size_t
 
__nwc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

581 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

583 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

584  
	`__wc¢πombs_chk
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

585 
	`__bos
 (
__d°
));

587 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

588  
	`__wc¢πombs_chk_w¨n
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

589 
	`__bos
 (
__d°
));

591  
	`__wc¢πombs_Æüs
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
);

592 
	}
}

	@/usr/include/et/com_err.h

11 #i‡!
deföed
(
__COM_ERR_H
Ë&& !deföed(
__COM_ERR_H__
)

13 #ifde‡
__GNUC__


14 
	#COM_ERR_ATTR
(
x
Ë
	`__©åibuã__
(x)

	)

16 
	#COM_ERR_ATTR
(
x
)

	)

19 
	~<°ddef.h
>

20 
	~<°d¨g.h
>

22 
	tîrcode_t
;

24 
	sîr‹_èbÀ
 {

25 c⁄° * c⁄° * 
	mmsgs
;

26 
	mba£
;

27 
	mn_msgs
;

29 
	gë_li°
;

31 
	$com_îr
 (const *, , const *, ...)

32 
	`COM_ERR_ATTR
((
	`f‹m©
(
¥ötf
, 3, 4)));

34 
	$com_îr_va
 (c⁄° *
whﬂmi
, 
îrcode_t
 
code
, c⁄° *
fmt
,

35 
va_li°
 
¨gs
)

36 
	`COM_ERR_ATTR
((
	`f‹m©
(
¥ötf
, 3, 0)));

38 c⁄° *
	`îr‹_mesßge
 ();

39 (*
com_îr_hook
Ë(c⁄° *, , c⁄° *, 
va_li°
);

40 (*
	`£t_com_îr_hook
 ((*) (const *, ,

41 c⁄° *, 
va_li°
)))

42 (c⁄° *, , c⁄° *, 
va_li°
);

43 (*
	$ª£t_com_îr_hook
 ()) (const *, ,

44 c⁄° *, 
va_li°
);

45 
	`öô_îr‹_èbÀ
(c⁄° * c⁄° *
msgs
, 
ba£
, 
cou¡
);

46 *(*
	`£t_com_îr_gëãxt
 (*(*) (const *)))

49 
îrcode_t
 
	`add_îr‹_èbÀ
(c⁄° 
îr‹_èbÀ
 * 
ë
);

50 
îrcode_t
 
	`ªmove_îr‹_èbÀ
(c⁄° 
îr‹_èbÀ
 * 
ë
);

51 
	`add_to_îr‹_èbÀ
(
ë_li°
 *
√w_èbÀ
);

54 c⁄° *
	`com_right
(
ë_li°
 *
li°
, 
code
);

55 c⁄° *
	`com_right_r
(
ë_li°
 *
li°
, 
code
, *
°r
, 
size_t
 
Àn
);

56 
	`öôülize_îr‹_èbÀ_r
(
ë_li°
 **
li°
,

57 c⁄° **
mesßges
,

58 
num_îr‹s
,

59 
ba£
);

60 
	`‰ì_îr‹_èbÀ
(
ë_li°
 *
ë
);

63 
	`ë_li°_lock
();

64 
	`ë_li°_u∆ock
();

66 
	#__COM_ERR_H


	)

67 
	#__COM_ERR_H__


	)

	@/usr/include/linux/ioctl.h

1 #i‚de‡
_LINUX_IOCTL_H


2 
	#_LINUX_IOCTL_H


	)

4 
	~<asm/io˘l.h
>

	@/usr/include/openssl/obj_mac.h

65 
	#SN_undef
 "UNDEF"

	)

66 
	#LN_undef
 "undeföed"

	)

67 
	#NID_undef
 0

	)

68 
	#OBJ_undef
 0L

	)

70 
	#SN_ôu_t
 "ITU-T"

	)

71 
	#LN_ôu_t
 "ôu-t"

	)

72 
	#NID_ôu_t
 645

	)

73 
	#OBJ_ôu_t
 0L

	)

75 
	#NID_ccôt
 404

	)

76 
	#OBJ_ccôt
 
OBJ_ôu_t


	)

78 
	#SN_iso
 "ISO"

	)

79 
	#LN_iso
 "iso"

	)

80 
	#NID_iso
 181

	)

81 
	#OBJ_iso
 1L

	)

83 
	#SN_joöt_iso_ôu_t
 "JOINT-ISO-ITU-T"

	)

84 
	#LN_joöt_iso_ôu_t
 "joöt-iso-ôu-t"

	)

85 
	#NID_joöt_iso_ôu_t
 646

	)

86 
	#OBJ_joöt_iso_ôu_t
 2L

	)

88 
	#NID_joöt_iso_ccôt
 393

	)

89 
	#OBJ_joöt_iso_ccôt
 
OBJ_joöt_iso_ôu_t


	)

91 
	#SN_membî_body
 "membî-body"

	)

92 
	#LN_membî_body
 "ISO Membî Body"

	)

93 
	#NID_membî_body
 182

	)

94 
	#OBJ_membî_body
 
OBJ_iso
,2L

	)

96 
	#SN_idítifõd_‹g™iz©i⁄
 "idítifõd-‹g™iz©i⁄"

	)

97 
	#NID_idítifõd_‹g™iz©i⁄
 676

	)

98 
	#OBJ_idítifõd_‹g™iz©i⁄
 
OBJ_iso
,3L

	)

100 
	#SN_hmac_md5
 "HMAC-MD5"

	)

101 
	#LN_hmac_md5
 "hmac-md5"

	)

102 
	#NID_hmac_md5
 780

	)

103 
	#OBJ_hmac_md5
 
OBJ_idítifõd_‹g™iz©i⁄
,6L,1L,5L,5L,8L,1L,1L

	)

105 
	#SN_hmac_sha1
 "HMAC-SHA1"

	)

106 
	#LN_hmac_sha1
 "hmac-sha1"

	)

107 
	#NID_hmac_sha1
 781

	)

108 
	#OBJ_hmac_sha1
 
OBJ_idítifõd_‹g™iz©i⁄
,6L,1L,5L,5L,8L,1L,2L

	)

110 
	#SN_˚πicom_¨c
 "˚πicom-¨c"

	)

111 
	#NID_˚πicom_¨c
 677

	)

112 
	#OBJ_˚πicom_¨c
 
OBJ_idítifõd_‹g™iz©i⁄
,132L

	)

114 
	#SN_öã∫©i⁄Æ_‹g™iz©i⁄s
 "öã∫©i⁄Æ-‹g™iz©i⁄s"

	)

115 
	#LN_öã∫©i⁄Æ_‹g™iz©i⁄s
 "I¡î«ti⁄Æ Org™iz©i⁄s"

	)

116 
	#NID_öã∫©i⁄Æ_‹g™iz©i⁄s
 647

	)

117 
	#OBJ_öã∫©i⁄Æ_‹g™iz©i⁄s
 
OBJ_joöt_iso_ôu_t
,23L

	)

119 
	#SN_w≠
 "w≠"

	)

120 
	#NID_w≠
 678

	)

121 
	#OBJ_w≠
 
OBJ_öã∫©i⁄Æ_‹g™iz©i⁄s
,43L

	)

123 
	#SN_w≠_wsg
 "w≠-wsg"

	)

124 
	#NID_w≠_wsg
 679

	)

125 
	#OBJ_w≠_wsg
 
OBJ_w≠
,1L

	)

127 
	#SN_£À˘ed_©åibuã_ty≥s
 "£À˘ed-©åibuã-ty≥s"

	)

128 
	#LN_£À˘ed_©åibuã_ty≥s
 "Sñe˘ed Aâribuã Ty≥s"

	)

129 
	#NID_£À˘ed_©åibuã_ty≥s
 394

	)

130 
	#OBJ_£À˘ed_©åibuã_ty≥s
 
OBJ_joöt_iso_ôu_t
,5L,1L,5L

	)

132 
	#SN_˛óøn˚
 "˛óøn˚"

	)

133 
	#NID_˛óøn˚
 395

	)

134 
	#OBJ_˛óøn˚
 
OBJ_£À˘ed_©åibuã_ty≥s
,55L

	)

136 
	#SN_ISO_US
 "ISO-US"

	)

137 
	#LN_ISO_US
 "ISO US Membî Body"

	)

138 
	#NID_ISO_US
 183

	)

139 
	#OBJ_ISO_US
 
OBJ_membî_body
,840L

	)

141 
	#SN_X9_57
 "X9-57"

	)

142 
	#LN_X9_57
 "X9.57"

	)

143 
	#NID_X9_57
 184

	)

144 
	#OBJ_X9_57
 
OBJ_ISO_US
,10040L

	)

146 
	#SN_X9cm
 "X9cm"

	)

147 
	#LN_X9cm
 "X9.57 CM ?"

	)

148 
	#NID_X9cm
 185

	)

149 
	#OBJ_X9cm
 
OBJ_X9_57
,4L

	)

151 
	#SN_dß
 "DSA"

	)

152 
	#LN_dß
 "dßEn¸y±i⁄"

	)

153 
	#NID_dß
 116

	)

154 
	#OBJ_dß
 
OBJ_X9cm
,1L

	)

156 
	#SN_dßWôhSHA1
 "DSA-SHA1"

	)

157 
	#LN_dßWôhSHA1
 "dßWôhSHA1"

	)

158 
	#NID_dßWôhSHA1
 113

	)

159 
	#OBJ_dßWôhSHA1
 
OBJ_X9cm
,3L

	)

161 
	#SN_™si_X9_62
 "™si-X9-62"

	)

162 
	#LN_™si_X9_62
 "ANSI X9.62"

	)

163 
	#NID_™si_X9_62
 405

	)

164 
	#OBJ_™si_X9_62
 
OBJ_ISO_US
,10045L

	)

166 
	#OBJ_X9_62_id_fõldTy≥
 
OBJ_™si_X9_62
,1L

	)

168 
	#SN_X9_62_¥ime_fõld
 "¥ime-fõld"

	)

169 
	#NID_X9_62_¥ime_fõld
 406

	)

170 
	#OBJ_X9_62_¥ime_fõld
 
OBJ_X9_62_id_fõldTy≥
,1L

	)

172 
	#SN_X9_62_ch¨a˘îi°ic_two_fõld
 "ch¨a˘îi°ic-two-fõld"

	)

173 
	#NID_X9_62_ch¨a˘îi°ic_two_fõld
 407

	)

174 
	#OBJ_X9_62_ch¨a˘îi°ic_two_fõld
 
OBJ_X9_62_id_fõldTy≥
,2L

	)

176 
	#SN_X9_62_id_ch¨a˘îi°ic_two_basis
 "id-ch¨a˘îi°ic-two-basis"

	)

177 
	#NID_X9_62_id_ch¨a˘îi°ic_two_basis
 680

	)

178 
	#OBJ_X9_62_id_ch¨a˘îi°ic_two_basis
 
OBJ_X9_62_ch¨a˘îi°ic_two_fõld
,3L

	)

180 
	#SN_X9_62_⁄Basis
 "⁄Basis"

	)

181 
	#NID_X9_62_⁄Basis
 681

	)

182 
	#OBJ_X9_62_⁄Basis
 
OBJ_X9_62_id_ch¨a˘îi°ic_two_basis
,1L

	)

184 
	#SN_X9_62_çBasis
 "çBasis"

	)

185 
	#NID_X9_62_çBasis
 682

	)

186 
	#OBJ_X9_62_çBasis
 
OBJ_X9_62_id_ch¨a˘îi°ic_two_basis
,2L

	)

188 
	#SN_X9_62_µBasis
 "µBasis"

	)

189 
	#NID_X9_62_µBasis
 683

	)

190 
	#OBJ_X9_62_µBasis
 
OBJ_X9_62_id_ch¨a˘îi°ic_two_basis
,3L

	)

192 
	#OBJ_X9_62_id_publicKeyTy≥
 
OBJ_™si_X9_62
,2L

	)

194 
	#SN_X9_62_id_ecPublicKey
 "id-ecPublicKey"

	)

195 
	#NID_X9_62_id_ecPublicKey
 408

	)

196 
	#OBJ_X9_62_id_ecPublicKey
 
OBJ_X9_62_id_publicKeyTy≥
,1L

	)

198 
	#OBJ_X9_62_ñlùticCurve
 
OBJ_™si_X9_62
,3L

	)

200 
	#OBJ_X9_62_c_TwoCurve
 
OBJ_X9_62_ñlùticCurve
,0L

	)

202 
	#SN_X9_62_c2≤b163v1
 "c2≤b163v1"

	)

203 
	#NID_X9_62_c2≤b163v1
 684

	)

204 
	#OBJ_X9_62_c2≤b163v1
 
OBJ_X9_62_c_TwoCurve
,1L

	)

206 
	#SN_X9_62_c2≤b163v2
 "c2≤b163v2"

	)

207 
	#NID_X9_62_c2≤b163v2
 685

	)

208 
	#OBJ_X9_62_c2≤b163v2
 
OBJ_X9_62_c_TwoCurve
,2L

	)

210 
	#SN_X9_62_c2≤b163v3
 "c2≤b163v3"

	)

211 
	#NID_X9_62_c2≤b163v3
 686

	)

212 
	#OBJ_X9_62_c2≤b163v3
 
OBJ_X9_62_c_TwoCurve
,3L

	)

214 
	#SN_X9_62_c2≤b176v1
 "c2≤b176v1"

	)

215 
	#NID_X9_62_c2≤b176v1
 687

	)

216 
	#OBJ_X9_62_c2≤b176v1
 
OBJ_X9_62_c_TwoCurve
,4L

	)

218 
	#SN_X9_62_c2äb191v1
 "c2äb191v1"

	)

219 
	#NID_X9_62_c2äb191v1
 688

	)

220 
	#OBJ_X9_62_c2äb191v1
 
OBJ_X9_62_c_TwoCurve
,5L

	)

222 
	#SN_X9_62_c2äb191v2
 "c2äb191v2"

	)

223 
	#NID_X9_62_c2äb191v2
 689

	)

224 
	#OBJ_X9_62_c2äb191v2
 
OBJ_X9_62_c_TwoCurve
,6L

	)

226 
	#SN_X9_62_c2äb191v3
 "c2äb191v3"

	)

227 
	#NID_X9_62_c2äb191v3
 690

	)

228 
	#OBJ_X9_62_c2äb191v3
 
OBJ_X9_62_c_TwoCurve
,7L

	)

230 
	#SN_X9_62_c2⁄b191v4
 "c2⁄b191v4"

	)

231 
	#NID_X9_62_c2⁄b191v4
 691

	)

232 
	#OBJ_X9_62_c2⁄b191v4
 
OBJ_X9_62_c_TwoCurve
,8L

	)

234 
	#SN_X9_62_c2⁄b191v5
 "c2⁄b191v5"

	)

235 
	#NID_X9_62_c2⁄b191v5
 692

	)

236 
	#OBJ_X9_62_c2⁄b191v5
 
OBJ_X9_62_c_TwoCurve
,9L

	)

238 
	#SN_X9_62_c2≤b208w1
 "c2≤b208w1"

	)

239 
	#NID_X9_62_c2≤b208w1
 693

	)

240 
	#OBJ_X9_62_c2≤b208w1
 
OBJ_X9_62_c_TwoCurve
,10L

	)

242 
	#SN_X9_62_c2äb239v1
 "c2äb239v1"

	)

243 
	#NID_X9_62_c2äb239v1
 694

	)

244 
	#OBJ_X9_62_c2äb239v1
 
OBJ_X9_62_c_TwoCurve
,11L

	)

246 
	#SN_X9_62_c2äb239v2
 "c2äb239v2"

	)

247 
	#NID_X9_62_c2äb239v2
 695

	)

248 
	#OBJ_X9_62_c2äb239v2
 
OBJ_X9_62_c_TwoCurve
,12L

	)

250 
	#SN_X9_62_c2äb239v3
 "c2äb239v3"

	)

251 
	#NID_X9_62_c2äb239v3
 696

	)

252 
	#OBJ_X9_62_c2äb239v3
 
OBJ_X9_62_c_TwoCurve
,13L

	)

254 
	#SN_X9_62_c2⁄b239v4
 "c2⁄b239v4"

	)

255 
	#NID_X9_62_c2⁄b239v4
 697

	)

256 
	#OBJ_X9_62_c2⁄b239v4
 
OBJ_X9_62_c_TwoCurve
,14L

	)

258 
	#SN_X9_62_c2⁄b239v5
 "c2⁄b239v5"

	)

259 
	#NID_X9_62_c2⁄b239v5
 698

	)

260 
	#OBJ_X9_62_c2⁄b239v5
 
OBJ_X9_62_c_TwoCurve
,15L

	)

262 
	#SN_X9_62_c2≤b272w1
 "c2≤b272w1"

	)

263 
	#NID_X9_62_c2≤b272w1
 699

	)

264 
	#OBJ_X9_62_c2≤b272w1
 
OBJ_X9_62_c_TwoCurve
,16L

	)

266 
	#SN_X9_62_c2≤b304w1
 "c2≤b304w1"

	)

267 
	#NID_X9_62_c2≤b304w1
 700

	)

268 
	#OBJ_X9_62_c2≤b304w1
 
OBJ_X9_62_c_TwoCurve
,17L

	)

270 
	#SN_X9_62_c2äb359v1
 "c2äb359v1"

	)

271 
	#NID_X9_62_c2äb359v1
 701

	)

272 
	#OBJ_X9_62_c2äb359v1
 
OBJ_X9_62_c_TwoCurve
,18L

	)

274 
	#SN_X9_62_c2≤b368w1
 "c2≤b368w1"

	)

275 
	#NID_X9_62_c2≤b368w1
 702

	)

276 
	#OBJ_X9_62_c2≤b368w1
 
OBJ_X9_62_c_TwoCurve
,19L

	)

278 
	#SN_X9_62_c2äb431r1
 "c2äb431r1"

	)

279 
	#NID_X9_62_c2äb431r1
 703

	)

280 
	#OBJ_X9_62_c2äb431r1
 
OBJ_X9_62_c_TwoCurve
,20L

	)

282 
	#OBJ_X9_62_¥imeCurve
 
OBJ_X9_62_ñlùticCurve
,1L

	)

284 
	#SN_X9_62_¥ime192v1
 "¥ime192v1"

	)

285 
	#NID_X9_62_¥ime192v1
 409

	)

286 
	#OBJ_X9_62_¥ime192v1
 
OBJ_X9_62_¥imeCurve
,1L

	)

288 
	#SN_X9_62_¥ime192v2
 "¥ime192v2"

	)

289 
	#NID_X9_62_¥ime192v2
 410

	)

290 
	#OBJ_X9_62_¥ime192v2
 
OBJ_X9_62_¥imeCurve
,2L

	)

292 
	#SN_X9_62_¥ime192v3
 "¥ime192v3"

	)

293 
	#NID_X9_62_¥ime192v3
 411

	)

294 
	#OBJ_X9_62_¥ime192v3
 
OBJ_X9_62_¥imeCurve
,3L

	)

296 
	#SN_X9_62_¥ime239v1
 "¥ime239v1"

	)

297 
	#NID_X9_62_¥ime239v1
 412

	)

298 
	#OBJ_X9_62_¥ime239v1
 
OBJ_X9_62_¥imeCurve
,4L

	)

300 
	#SN_X9_62_¥ime239v2
 "¥ime239v2"

	)

301 
	#NID_X9_62_¥ime239v2
 413

	)

302 
	#OBJ_X9_62_¥ime239v2
 
OBJ_X9_62_¥imeCurve
,5L

	)

304 
	#SN_X9_62_¥ime239v3
 "¥ime239v3"

	)

305 
	#NID_X9_62_¥ime239v3
 414

	)

306 
	#OBJ_X9_62_¥ime239v3
 
OBJ_X9_62_¥imeCurve
,6L

	)

308 
	#SN_X9_62_¥ime256v1
 "¥ime256v1"

	)

309 
	#NID_X9_62_¥ime256v1
 415

	)

310 
	#OBJ_X9_62_¥ime256v1
 
OBJ_X9_62_¥imeCurve
,7L

	)

312 
	#OBJ_X9_62_id_ecSigTy≥
 
OBJ_™si_X9_62
,4L

	)

314 
	#SN_ecdß_wôh_SHA1
 "ecdß-wôh-SHA1"

	)

315 
	#NID_ecdß_wôh_SHA1
 416

	)

316 
	#OBJ_ecdß_wôh_SHA1
 
OBJ_X9_62_id_ecSigTy≥
,1L

	)

318 
	#SN_ecdß_wôh_Recommíded
 "ecdß-wôh-Recommíded"

	)

319 
	#NID_ecdß_wôh_Recommíded
 791

	)

320 
	#OBJ_ecdß_wôh_Recommíded
 
OBJ_X9_62_id_ecSigTy≥
,2L

	)

322 
	#SN_ecdß_wôh_S≥cifõd
 "ecdß-wôh-S≥cifõd"

	)

323 
	#NID_ecdß_wôh_S≥cifõd
 792

	)

324 
	#OBJ_ecdß_wôh_S≥cifõd
 
OBJ_X9_62_id_ecSigTy≥
,3L

	)

326 
	#SN_ecdß_wôh_SHA224
 "ecdß-wôh-SHA224"

	)

327 
	#NID_ecdß_wôh_SHA224
 793

	)

328 
	#OBJ_ecdß_wôh_SHA224
 
OBJ_ecdß_wôh_S≥cifõd
,1L

	)

330 
	#SN_ecdß_wôh_SHA256
 "ecdß-wôh-SHA256"

	)

331 
	#NID_ecdß_wôh_SHA256
 794

	)

332 
	#OBJ_ecdß_wôh_SHA256
 
OBJ_ecdß_wôh_S≥cifõd
,2L

	)

334 
	#SN_ecdß_wôh_SHA384
 "ecdß-wôh-SHA384"

	)

335 
	#NID_ecdß_wôh_SHA384
 795

	)

336 
	#OBJ_ecdß_wôh_SHA384
 
OBJ_ecdß_wôh_S≥cifõd
,3L

	)

338 
	#SN_ecdß_wôh_SHA512
 "ecdß-wôh-SHA512"

	)

339 
	#NID_ecdß_wôh_SHA512
 796

	)

340 
	#OBJ_ecdß_wôh_SHA512
 
OBJ_ecdß_wôh_S≥cifõd
,4L

	)

342 
	#OBJ_£cg_ñlùticCurve
 
OBJ_˚πicom_¨c
,0L

	)

344 
	#SN_£˝112r1
 "£˝112r1"

	)

345 
	#NID_£˝112r1
 704

	)

346 
	#OBJ_£˝112r1
 
OBJ_£cg_ñlùticCurve
,6L

	)

348 
	#SN_£˝112r2
 "£˝112r2"

	)

349 
	#NID_£˝112r2
 705

	)

350 
	#OBJ_£˝112r2
 
OBJ_£cg_ñlùticCurve
,7L

	)

352 
	#SN_£˝128r1
 "£˝128r1"

	)

353 
	#NID_£˝128r1
 706

	)

354 
	#OBJ_£˝128r1
 
OBJ_£cg_ñlùticCurve
,28L

	)

356 
	#SN_£˝128r2
 "£˝128r2"

	)

357 
	#NID_£˝128r2
 707

	)

358 
	#OBJ_£˝128r2
 
OBJ_£cg_ñlùticCurve
,29L

	)

360 
	#SN_£˝160k1
 "£˝160k1"

	)

361 
	#NID_£˝160k1
 708

	)

362 
	#OBJ_£˝160k1
 
OBJ_£cg_ñlùticCurve
,9L

	)

364 
	#SN_£˝160r1
 "£˝160r1"

	)

365 
	#NID_£˝160r1
 709

	)

366 
	#OBJ_£˝160r1
 
OBJ_£cg_ñlùticCurve
,8L

	)

368 
	#SN_£˝160r2
 "£˝160r2"

	)

369 
	#NID_£˝160r2
 710

	)

370 
	#OBJ_£˝160r2
 
OBJ_£cg_ñlùticCurve
,30L

	)

372 
	#SN_£˝192k1
 "£˝192k1"

	)

373 
	#NID_£˝192k1
 711

	)

374 
	#OBJ_£˝192k1
 
OBJ_£cg_ñlùticCurve
,31L

	)

376 
	#SN_£˝224k1
 "£˝224k1"

	)

377 
	#NID_£˝224k1
 712

	)

378 
	#OBJ_£˝224k1
 
OBJ_£cg_ñlùticCurve
,32L

	)

380 
	#SN_£˝224r1
 "£˝224r1"

	)

381 
	#NID_£˝224r1
 713

	)

382 
	#OBJ_£˝224r1
 
OBJ_£cg_ñlùticCurve
,33L

	)

384 
	#SN_£˝256k1
 "£˝256k1"

	)

385 
	#NID_£˝256k1
 714

	)

386 
	#OBJ_£˝256k1
 
OBJ_£cg_ñlùticCurve
,10L

	)

388 
	#SN_£˝384r1
 "£˝384r1"

	)

389 
	#NID_£˝384r1
 715

	)

390 
	#OBJ_£˝384r1
 
OBJ_£cg_ñlùticCurve
,34L

	)

392 
	#SN_£˝521r1
 "£˝521r1"

	)

393 
	#NID_£˝521r1
 716

	)

394 
	#OBJ_£˝521r1
 
OBJ_£cg_ñlùticCurve
,35L

	)

396 
	#SN_£˘113r1
 "£˘113r1"

	)

397 
	#NID_£˘113r1
 717

	)

398 
	#OBJ_£˘113r1
 
OBJ_£cg_ñlùticCurve
,4L

	)

400 
	#SN_£˘113r2
 "£˘113r2"

	)

401 
	#NID_£˘113r2
 718

	)

402 
	#OBJ_£˘113r2
 
OBJ_£cg_ñlùticCurve
,5L

	)

404 
	#SN_£˘131r1
 "£˘131r1"

	)

405 
	#NID_£˘131r1
 719

	)

406 
	#OBJ_£˘131r1
 
OBJ_£cg_ñlùticCurve
,22L

	)

408 
	#SN_£˘131r2
 "£˘131r2"

	)

409 
	#NID_£˘131r2
 720

	)

410 
	#OBJ_£˘131r2
 
OBJ_£cg_ñlùticCurve
,23L

	)

412 
	#SN_£˘163k1
 "£˘163k1"

	)

413 
	#NID_£˘163k1
 721

	)

414 
	#OBJ_£˘163k1
 
OBJ_£cg_ñlùticCurve
,1L

	)

416 
	#SN_£˘163r1
 "£˘163r1"

	)

417 
	#NID_£˘163r1
 722

	)

418 
	#OBJ_£˘163r1
 
OBJ_£cg_ñlùticCurve
,2L

	)

420 
	#SN_£˘163r2
 "£˘163r2"

	)

421 
	#NID_£˘163r2
 723

	)

422 
	#OBJ_£˘163r2
 
OBJ_£cg_ñlùticCurve
,15L

	)

424 
	#SN_£˘193r1
 "£˘193r1"

	)

425 
	#NID_£˘193r1
 724

	)

426 
	#OBJ_£˘193r1
 
OBJ_£cg_ñlùticCurve
,24L

	)

428 
	#SN_£˘193r2
 "£˘193r2"

	)

429 
	#NID_£˘193r2
 725

	)

430 
	#OBJ_£˘193r2
 
OBJ_£cg_ñlùticCurve
,25L

	)

432 
	#SN_£˘233k1
 "£˘233k1"

	)

433 
	#NID_£˘233k1
 726

	)

434 
	#OBJ_£˘233k1
 
OBJ_£cg_ñlùticCurve
,26L

	)

436 
	#SN_£˘233r1
 "£˘233r1"

	)

437 
	#NID_£˘233r1
 727

	)

438 
	#OBJ_£˘233r1
 
OBJ_£cg_ñlùticCurve
,27L

	)

440 
	#SN_£˘239k1
 "£˘239k1"

	)

441 
	#NID_£˘239k1
 728

	)

442 
	#OBJ_£˘239k1
 
OBJ_£cg_ñlùticCurve
,3L

	)

444 
	#SN_£˘283k1
 "£˘283k1"

	)

445 
	#NID_£˘283k1
 729

	)

446 
	#OBJ_£˘283k1
 
OBJ_£cg_ñlùticCurve
,16L

	)

448 
	#SN_£˘283r1
 "£˘283r1"

	)

449 
	#NID_£˘283r1
 730

	)

450 
	#OBJ_£˘283r1
 
OBJ_£cg_ñlùticCurve
,17L

	)

452 
	#SN_£˘409k1
 "£˘409k1"

	)

453 
	#NID_£˘409k1
 731

	)

454 
	#OBJ_£˘409k1
 
OBJ_£cg_ñlùticCurve
,36L

	)

456 
	#SN_£˘409r1
 "£˘409r1"

	)

457 
	#NID_£˘409r1
 732

	)

458 
	#OBJ_£˘409r1
 
OBJ_£cg_ñlùticCurve
,37L

	)

460 
	#SN_£˘571k1
 "£˘571k1"

	)

461 
	#NID_£˘571k1
 733

	)

462 
	#OBJ_£˘571k1
 
OBJ_£cg_ñlùticCurve
,38L

	)

464 
	#SN_£˘571r1
 "£˘571r1"

	)

465 
	#NID_£˘571r1
 734

	)

466 
	#OBJ_£˘571r1
 
OBJ_£cg_ñlùticCurve
,39L

	)

468 
	#OBJ_w≠_wsg_idm_ecid
 
OBJ_w≠_wsg
,4L

	)

470 
	#SN_w≠_wsg_idm_ecid_wés1
 "w≠-wsg-idm-ecid-wés1"

	)

471 
	#NID_w≠_wsg_idm_ecid_wés1
 735

	)

472 
	#OBJ_w≠_wsg_idm_ecid_wés1
 
OBJ_w≠_wsg_idm_ecid
,1L

	)

474 
	#SN_w≠_wsg_idm_ecid_wés3
 "w≠-wsg-idm-ecid-wés3"

	)

475 
	#NID_w≠_wsg_idm_ecid_wés3
 736

	)

476 
	#OBJ_w≠_wsg_idm_ecid_wés3
 
OBJ_w≠_wsg_idm_ecid
,3L

	)

478 
	#SN_w≠_wsg_idm_ecid_wés4
 "w≠-wsg-idm-ecid-wés4"

	)

479 
	#NID_w≠_wsg_idm_ecid_wés4
 737

	)

480 
	#OBJ_w≠_wsg_idm_ecid_wés4
 
OBJ_w≠_wsg_idm_ecid
,4L

	)

482 
	#SN_w≠_wsg_idm_ecid_wés5
 "w≠-wsg-idm-ecid-wés5"

	)

483 
	#NID_w≠_wsg_idm_ecid_wés5
 738

	)

484 
	#OBJ_w≠_wsg_idm_ecid_wés5
 
OBJ_w≠_wsg_idm_ecid
,5L

	)

486 
	#SN_w≠_wsg_idm_ecid_wés6
 "w≠-wsg-idm-ecid-wés6"

	)

487 
	#NID_w≠_wsg_idm_ecid_wés6
 739

	)

488 
	#OBJ_w≠_wsg_idm_ecid_wés6
 
OBJ_w≠_wsg_idm_ecid
,6L

	)

490 
	#SN_w≠_wsg_idm_ecid_wés7
 "w≠-wsg-idm-ecid-wés7"

	)

491 
	#NID_w≠_wsg_idm_ecid_wés7
 740

	)

492 
	#OBJ_w≠_wsg_idm_ecid_wés7
 
OBJ_w≠_wsg_idm_ecid
,7L

	)

494 
	#SN_w≠_wsg_idm_ecid_wés8
 "w≠-wsg-idm-ecid-wés8"

	)

495 
	#NID_w≠_wsg_idm_ecid_wés8
 741

	)

496 
	#OBJ_w≠_wsg_idm_ecid_wés8
 
OBJ_w≠_wsg_idm_ecid
,8L

	)

498 
	#SN_w≠_wsg_idm_ecid_wés9
 "w≠-wsg-idm-ecid-wés9"

	)

499 
	#NID_w≠_wsg_idm_ecid_wés9
 742

	)

500 
	#OBJ_w≠_wsg_idm_ecid_wés9
 
OBJ_w≠_wsg_idm_ecid
,9L

	)

502 
	#SN_w≠_wsg_idm_ecid_wés10
 "w≠-wsg-idm-ecid-wés10"

	)

503 
	#NID_w≠_wsg_idm_ecid_wés10
 743

	)

504 
	#OBJ_w≠_wsg_idm_ecid_wés10
 
OBJ_w≠_wsg_idm_ecid
,10L

	)

506 
	#SN_w≠_wsg_idm_ecid_wés11
 "w≠-wsg-idm-ecid-wés11"

	)

507 
	#NID_w≠_wsg_idm_ecid_wés11
 744

	)

508 
	#OBJ_w≠_wsg_idm_ecid_wés11
 
OBJ_w≠_wsg_idm_ecid
,11L

	)

510 
	#SN_w≠_wsg_idm_ecid_wés12
 "w≠-wsg-idm-ecid-wés12"

	)

511 
	#NID_w≠_wsg_idm_ecid_wés12
 745

	)

512 
	#OBJ_w≠_wsg_idm_ecid_wés12
 
OBJ_w≠_wsg_idm_ecid
,12L

	)

514 
	#SN_ˇ°5_cbc
 "CAST5-CBC"

	)

515 
	#LN_ˇ°5_cbc
 "ˇ°5-cbc"

	)

516 
	#NID_ˇ°5_cbc
 108

	)

517 
	#OBJ_ˇ°5_cbc
 
OBJ_ISO_US
,113533L,7L,66L,10L

	)

519 
	#SN_ˇ°5_ecb
 "CAST5-ECB"

	)

520 
	#LN_ˇ°5_ecb
 "ˇ°5-ecb"

	)

521 
	#NID_ˇ°5_ecb
 109

	)

523 
	#SN_ˇ°5_cfb64
 "CAST5-CFB"

	)

524 
	#LN_ˇ°5_cfb64
 "ˇ°5-cfb"

	)

525 
	#NID_ˇ°5_cfb64
 110

	)

527 
	#SN_ˇ°5_ofb64
 "CAST5-OFB"

	)

528 
	#LN_ˇ°5_ofb64
 "ˇ°5-ofb"

	)

529 
	#NID_ˇ°5_ofb64
 111

	)

531 
	#LN_pbeWôhMD5AndCa°5_CBC
 "pbeWôhMD5AndCa°5CBC"

	)

532 
	#NID_pbeWôhMD5AndCa°5_CBC
 112

	)

533 
	#OBJ_pbeWôhMD5AndCa°5_CBC
 
OBJ_ISO_US
,113533L,7L,66L,12L

	)

535 
	#SN_id_Passw‹dBa£dMAC
 "id-Passw‹dBa£dMAC"

	)

536 
	#LN_id_Passw‹dBa£dMAC
 "∑ssw‹d ba£d MAC"

	)

537 
	#NID_id_Passw‹dBa£dMAC
 782

	)

538 
	#OBJ_id_Passw‹dBa£dMAC
 
OBJ_ISO_US
,113533L,7L,66L,13L

	)

540 
	#SN_id_DHBa£dMac
 "id-DHBa£dMac"

	)

541 
	#LN_id_DHBa£dMac
 "Diffõ-Hñlm™ ba£d MAC"

	)

542 
	#NID_id_DHBa£dMac
 783

	)

543 
	#OBJ_id_DHBa£dMac
 
OBJ_ISO_US
,113533L,7L,66L,30L

	)

545 
	#SN_rßdsi
 "rßdsi"

	)

546 
	#LN_rßdsi
 "RSA D©®Securôy, Inc."

	)

547 
	#NID_rßdsi
 1

	)

548 
	#OBJ_rßdsi
 
OBJ_ISO_US
,113549L

	)

550 
	#SN_pkcs
 "pkcs"

	)

551 
	#LN_pkcs
 "RSA D©®Securôy, Inc. PKCS"

	)

552 
	#NID_pkcs
 2

	)

553 
	#OBJ_pkcs
 
OBJ_rßdsi
,1L

	)

555 
	#SN_pkcs1
 "pkcs1"

	)

556 
	#NID_pkcs1
 186

	)

557 
	#OBJ_pkcs1
 
OBJ_pkcs
,1L

	)

559 
	#LN_rßEn¸y±i⁄
 "rßEn¸y±i⁄"

	)

560 
	#NID_rßEn¸y±i⁄
 6

	)

561 
	#OBJ_rßEn¸y±i⁄
 
OBJ_pkcs1
,1L

	)

563 
	#SN_md2WôhRSAEn¸y±i⁄
 "RSA-MD2"

	)

564 
	#LN_md2WôhRSAEn¸y±i⁄
 "md2WôhRSAEn¸y±i⁄"

	)

565 
	#NID_md2WôhRSAEn¸y±i⁄
 7

	)

566 
	#OBJ_md2WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,2L

	)

568 
	#SN_md4WôhRSAEn¸y±i⁄
 "RSA-MD4"

	)

569 
	#LN_md4WôhRSAEn¸y±i⁄
 "md4WôhRSAEn¸y±i⁄"

	)

570 
	#NID_md4WôhRSAEn¸y±i⁄
 396

	)

571 
	#OBJ_md4WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,3L

	)

573 
	#SN_md5WôhRSAEn¸y±i⁄
 "RSA-MD5"

	)

574 
	#LN_md5WôhRSAEn¸y±i⁄
 "md5WôhRSAEn¸y±i⁄"

	)

575 
	#NID_md5WôhRSAEn¸y±i⁄
 8

	)

576 
	#OBJ_md5WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,4L

	)

578 
	#SN_sha1WôhRSAEn¸y±i⁄
 "RSA-SHA1"

	)

579 
	#LN_sha1WôhRSAEn¸y±i⁄
 "sha1WôhRSAEn¸y±i⁄"

	)

580 
	#NID_sha1WôhRSAEn¸y±i⁄
 65

	)

581 
	#OBJ_sha1WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,5L

	)

583 
	#SN_rßesO´p
 "RSAES-OAEP"

	)

584 
	#LN_rßesO´p
 "rßesO´p"

	)

585 
	#NID_rßesO´p
 919

	)

586 
	#OBJ_rßesO´p
 
OBJ_pkcs1
,7L

	)

588 
	#SN_mgf1
 "MGF1"

	)

589 
	#LN_mgf1
 "mgf1"

	)

590 
	#NID_mgf1
 911

	)

591 
	#OBJ_mgf1
 
OBJ_pkcs1
,8L

	)

593 
	#SN_rßsßPss
 "RSASSA-PSS"

	)

594 
	#LN_rßsßPss
 "rßsßPss"

	)

595 
	#NID_rßsßPss
 912

	)

596 
	#OBJ_rßsßPss
 
OBJ_pkcs1
,10L

	)

598 
	#SN_sha256WôhRSAEn¸y±i⁄
 "RSA-SHA256"

	)

599 
	#LN_sha256WôhRSAEn¸y±i⁄
 "sha256WôhRSAEn¸y±i⁄"

	)

600 
	#NID_sha256WôhRSAEn¸y±i⁄
 668

	)

601 
	#OBJ_sha256WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,11L

	)

603 
	#SN_sha384WôhRSAEn¸y±i⁄
 "RSA-SHA384"

	)

604 
	#LN_sha384WôhRSAEn¸y±i⁄
 "sha384WôhRSAEn¸y±i⁄"

	)

605 
	#NID_sha384WôhRSAEn¸y±i⁄
 669

	)

606 
	#OBJ_sha384WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,12L

	)

608 
	#SN_sha512WôhRSAEn¸y±i⁄
 "RSA-SHA512"

	)

609 
	#LN_sha512WôhRSAEn¸y±i⁄
 "sha512WôhRSAEn¸y±i⁄"

	)

610 
	#NID_sha512WôhRSAEn¸y±i⁄
 670

	)

611 
	#OBJ_sha512WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,13L

	)

613 
	#SN_sha224WôhRSAEn¸y±i⁄
 "RSA-SHA224"

	)

614 
	#LN_sha224WôhRSAEn¸y±i⁄
 "sha224WôhRSAEn¸y±i⁄"

	)

615 
	#NID_sha224WôhRSAEn¸y±i⁄
 671

	)

616 
	#OBJ_sha224WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,14L

	)

618 
	#SN_pkcs3
 "pkcs3"

	)

619 
	#NID_pkcs3
 27

	)

620 
	#OBJ_pkcs3
 
OBJ_pkcs
,3L

	)

622 
	#LN_dhKeyAgªemít
 "dhKeyAgªemít"

	)

623 
	#NID_dhKeyAgªemít
 28

	)

624 
	#OBJ_dhKeyAgªemít
 
OBJ_pkcs3
,1L

	)

626 
	#SN_pkcs5
 "pkcs5"

	)

627 
	#NID_pkcs5
 187

	)

628 
	#OBJ_pkcs5
 
OBJ_pkcs
,5L

	)

630 
	#SN_pbeWôhMD2AndDES_CBC
 "PBE-MD2-DES"

	)

631 
	#LN_pbeWôhMD2AndDES_CBC
 "pbeWôhMD2AndDES-CBC"

	)

632 
	#NID_pbeWôhMD2AndDES_CBC
 9

	)

633 
	#OBJ_pbeWôhMD2AndDES_CBC
 
OBJ_pkcs5
,1L

	)

635 
	#SN_pbeWôhMD5AndDES_CBC
 "PBE-MD5-DES"

	)

636 
	#LN_pbeWôhMD5AndDES_CBC
 "pbeWôhMD5AndDES-CBC"

	)

637 
	#NID_pbeWôhMD5AndDES_CBC
 10

	)

638 
	#OBJ_pbeWôhMD5AndDES_CBC
 
OBJ_pkcs5
,3L

	)

640 
	#SN_pbeWôhMD2AndRC2_CBC
 "PBE-MD2-RC2-64"

	)

641 
	#LN_pbeWôhMD2AndRC2_CBC
 "pbeWôhMD2AndRC2-CBC"

	)

642 
	#NID_pbeWôhMD2AndRC2_CBC
 168

	)

643 
	#OBJ_pbeWôhMD2AndRC2_CBC
 
OBJ_pkcs5
,4L

	)

645 
	#SN_pbeWôhMD5AndRC2_CBC
 "PBE-MD5-RC2-64"

	)

646 
	#LN_pbeWôhMD5AndRC2_CBC
 "pbeWôhMD5AndRC2-CBC"

	)

647 
	#NID_pbeWôhMD5AndRC2_CBC
 169

	)

648 
	#OBJ_pbeWôhMD5AndRC2_CBC
 
OBJ_pkcs5
,6L

	)

650 
	#SN_pbeWôhSHA1AndDES_CBC
 "PBE-SHA1-DES"

	)

651 
	#LN_pbeWôhSHA1AndDES_CBC
 "pbeWôhSHA1AndDES-CBC"

	)

652 
	#NID_pbeWôhSHA1AndDES_CBC
 170

	)

653 
	#OBJ_pbeWôhSHA1AndDES_CBC
 
OBJ_pkcs5
,10L

	)

655 
	#SN_pbeWôhSHA1AndRC2_CBC
 "PBE-SHA1-RC2-64"

	)

656 
	#LN_pbeWôhSHA1AndRC2_CBC
 "pbeWôhSHA1AndRC2-CBC"

	)

657 
	#NID_pbeWôhSHA1AndRC2_CBC
 68

	)

658 
	#OBJ_pbeWôhSHA1AndRC2_CBC
 
OBJ_pkcs5
,11L

	)

660 
	#LN_id_pbkdf2
 "PBKDF2"

	)

661 
	#NID_id_pbkdf2
 69

	)

662 
	#OBJ_id_pbkdf2
 
OBJ_pkcs5
,12L

	)

664 
	#LN_pbes2
 "PBES2"

	)

665 
	#NID_pbes2
 161

	)

666 
	#OBJ_pbes2
 
OBJ_pkcs5
,13L

	)

668 
	#LN_pbmac1
 "PBMAC1"

	)

669 
	#NID_pbmac1
 162

	)

670 
	#OBJ_pbmac1
 
OBJ_pkcs5
,14L

	)

672 
	#SN_pkcs7
 "pkcs7"

	)

673 
	#NID_pkcs7
 20

	)

674 
	#OBJ_pkcs7
 
OBJ_pkcs
,7L

	)

676 
	#LN_pkcs7_d©a
 "pkcs7-d©a"

	)

677 
	#NID_pkcs7_d©a
 21

	)

678 
	#OBJ_pkcs7_d©a
 
OBJ_pkcs7
,1L

	)

680 
	#LN_pkcs7_sig√d
 "pkcs7-sig√dD©a"

	)

681 
	#NID_pkcs7_sig√d
 22

	)

682 
	#OBJ_pkcs7_sig√d
 
OBJ_pkcs7
,2L

	)

684 
	#LN_pkcs7_ívñ›ed
 "pkcs7-ívñ›edD©a"

	)

685 
	#NID_pkcs7_ívñ›ed
 23

	)

686 
	#OBJ_pkcs7_ívñ›ed
 
OBJ_pkcs7
,3L

	)

688 
	#LN_pkcs7_sig√dAndEnvñ›ed
 "pkcs7-sig√dAndEnvñ›edD©a"

	)

689 
	#NID_pkcs7_sig√dAndEnvñ›ed
 24

	)

690 
	#OBJ_pkcs7_sig√dAndEnvñ›ed
 
OBJ_pkcs7
,4L

	)

692 
	#LN_pkcs7_dige°
 "pkcs7-dige°D©a"

	)

693 
	#NID_pkcs7_dige°
 25

	)

694 
	#OBJ_pkcs7_dige°
 
OBJ_pkcs7
,5L

	)

696 
	#LN_pkcs7_í¸y±ed
 "pkcs7-í¸y±edD©a"

	)

697 
	#NID_pkcs7_í¸y±ed
 26

	)

698 
	#OBJ_pkcs7_í¸y±ed
 
OBJ_pkcs7
,6L

	)

700 
	#SN_pkcs9
 "pkcs9"

	)

701 
	#NID_pkcs9
 47

	)

702 
	#OBJ_pkcs9
 
OBJ_pkcs
,9L

	)

704 
	#LN_pkcs9_emaûAddªss
 "emaûAddªss"

	)

705 
	#NID_pkcs9_emaûAddªss
 48

	)

706 
	#OBJ_pkcs9_emaûAddªss
 
OBJ_pkcs9
,1L

	)

708 
	#LN_pkcs9_un°ru˘uªdName
 "un°ru˘uªdName"

	)

709 
	#NID_pkcs9_un°ru˘uªdName
 49

	)

710 
	#OBJ_pkcs9_un°ru˘uªdName
 
OBJ_pkcs9
,2L

	)

712 
	#LN_pkcs9_c⁄ã¡Ty≥
 "c⁄ã¡Ty≥"

	)

713 
	#NID_pkcs9_c⁄ã¡Ty≥
 50

	)

714 
	#OBJ_pkcs9_c⁄ã¡Ty≥
 
OBJ_pkcs9
,3L

	)

716 
	#LN_pkcs9_mesßgeDige°
 "mesßgeDige°"

	)

717 
	#NID_pkcs9_mesßgeDige°
 51

	)

718 
	#OBJ_pkcs9_mesßgeDige°
 
OBJ_pkcs9
,4L

	)

720 
	#LN_pkcs9_signögTime
 "signögTime"

	)

721 
	#NID_pkcs9_signögTime
 52

	)

722 
	#OBJ_pkcs9_signögTime
 
OBJ_pkcs9
,5L

	)

724 
	#LN_pkcs9_cou¡îsig«tuª
 "cou¡îsig«tuª"

	)

725 
	#NID_pkcs9_cou¡îsig«tuª
 53

	)

726 
	#OBJ_pkcs9_cou¡îsig«tuª
 
OBJ_pkcs9
,6L

	)

728 
	#LN_pkcs9_chÆÀngePassw‹d
 "chÆÀngePassw‹d"

	)

729 
	#NID_pkcs9_chÆÀngePassw‹d
 54

	)

730 
	#OBJ_pkcs9_chÆÀngePassw‹d
 
OBJ_pkcs9
,7L

	)

732 
	#LN_pkcs9_un°ru˘uªdAddªss
 "un°ru˘uªdAddªss"

	)

733 
	#NID_pkcs9_un°ru˘uªdAddªss
 55

	)

734 
	#OBJ_pkcs9_un°ru˘uªdAddªss
 
OBJ_pkcs9
,8L

	)

736 
	#LN_pkcs9_extCîtAâribuãs
 "exãndedCîtifiˇãAâribuãs"

	)

737 
	#NID_pkcs9_extCîtAâribuãs
 56

	)

738 
	#OBJ_pkcs9_extCîtAâribuãs
 
OBJ_pkcs9
,9L

	)

740 
	#SN_ext_ªq
 "extReq"

	)

741 
	#LN_ext_ªq
 "Exãnsi⁄ Reque°"

	)

742 
	#NID_ext_ªq
 172

	)

743 
	#OBJ_ext_ªq
 
OBJ_pkcs9
,14L

	)

745 
	#SN_SMIMEC≠abûôõs
 "SMIME-CAPS"

	)

746 
	#LN_SMIMEC≠abûôõs
 "S/MIME C≠abûôõs"

	)

747 
	#NID_SMIMEC≠abûôõs
 167

	)

748 
	#OBJ_SMIMEC≠abûôõs
 
OBJ_pkcs9
,15L

	)

750 
	#SN_SMIME
 "SMIME"

	)

751 
	#LN_SMIME
 "S/MIME"

	)

752 
	#NID_SMIME
 188

	)

753 
	#OBJ_SMIME
 
OBJ_pkcs9
,16L

	)

755 
	#SN_id_smime_mod
 "id-smime-mod"

	)

756 
	#NID_id_smime_mod
 189

	)

757 
	#OBJ_id_smime_mod
 
OBJ_SMIME
,0L

	)

759 
	#SN_id_smime_˘
 "id-smime-˘"

	)

760 
	#NID_id_smime_˘
 190

	)

761 
	#OBJ_id_smime_˘
 
OBJ_SMIME
,1L

	)

763 
	#SN_id_smime_Ø
 "id-smime-Ø"

	)

764 
	#NID_id_smime_Ø
 191

	)

765 
	#OBJ_id_smime_Ø
 
OBJ_SMIME
,2L

	)

767 
	#SN_id_smime_Æg
 "id-smime-Æg"

	)

768 
	#NID_id_smime_Æg
 192

	)

769 
	#OBJ_id_smime_Æg
 
OBJ_SMIME
,3L

	)

771 
	#SN_id_smime_cd
 "id-smime-cd"

	)

772 
	#NID_id_smime_cd
 193

	)

773 
	#OBJ_id_smime_cd
 
OBJ_SMIME
,4L

	)

775 
	#SN_id_smime_•q
 "id-smime-•q"

	)

776 
	#NID_id_smime_•q
 194

	)

777 
	#OBJ_id_smime_•q
 
OBJ_SMIME
,5L

	)

779 
	#SN_id_smime_˘i
 "id-smime-˘i"

	)

780 
	#NID_id_smime_˘i
 195

	)

781 
	#OBJ_id_smime_˘i
 
OBJ_SMIME
,6L

	)

783 
	#SN_id_smime_mod_cms
 "id-smime-mod-cms"

	)

784 
	#NID_id_smime_mod_cms
 196

	)

785 
	#OBJ_id_smime_mod_cms
 
OBJ_id_smime_mod
,1L

	)

787 
	#SN_id_smime_mod_ess
 "id-smime-mod-ess"

	)

788 
	#NID_id_smime_mod_ess
 197

	)

789 
	#OBJ_id_smime_mod_ess
 
OBJ_id_smime_mod
,2L

	)

791 
	#SN_id_smime_mod_oid
 "id-smime-mod-oid"

	)

792 
	#NID_id_smime_mod_oid
 198

	)

793 
	#OBJ_id_smime_mod_oid
 
OBJ_id_smime_mod
,3L

	)

795 
	#SN_id_smime_mod_msg_v3
 "id-smime-mod-msg-v3"

	)

796 
	#NID_id_smime_mod_msg_v3
 199

	)

797 
	#OBJ_id_smime_mod_msg_v3
 
OBJ_id_smime_mod
,4L

	)

799 
	#SN_id_smime_mod_ës_eSig«tuª_88
 "id-smime-mod-ës-eSig«tuª-88"

	)

800 
	#NID_id_smime_mod_ës_eSig«tuª_88
 200

	)

801 
	#OBJ_id_smime_mod_ës_eSig«tuª_88
 
OBJ_id_smime_mod
,5L

	)

803 
	#SN_id_smime_mod_ës_eSig«tuª_97
 "id-smime-mod-ës-eSig«tuª-97"

	)

804 
	#NID_id_smime_mod_ës_eSig«tuª_97
 201

	)

805 
	#OBJ_id_smime_mod_ës_eSig«tuª_97
 
OBJ_id_smime_mod
,6L

	)

807 
	#SN_id_smime_mod_ës_eSigPﬁicy_88
 "id-smime-mod-ës-eSigPﬁicy-88"

	)

808 
	#NID_id_smime_mod_ës_eSigPﬁicy_88
 202

	)

809 
	#OBJ_id_smime_mod_ës_eSigPﬁicy_88
 
OBJ_id_smime_mod
,7L

	)

811 
	#SN_id_smime_mod_ës_eSigPﬁicy_97
 "id-smime-mod-ës-eSigPﬁicy-97"

	)

812 
	#NID_id_smime_mod_ës_eSigPﬁicy_97
 203

	)

813 
	#OBJ_id_smime_mod_ës_eSigPﬁicy_97
 
OBJ_id_smime_mod
,8L

	)

815 
	#SN_id_smime_˘_ª˚ùt
 "id-smime-˘-ª˚ùt"

	)

816 
	#NID_id_smime_˘_ª˚ùt
 204

	)

817 
	#OBJ_id_smime_˘_ª˚ùt
 
OBJ_id_smime_˘
,1L

	)

819 
	#SN_id_smime_˘_authD©a
 "id-smime-˘-authD©a"

	)

820 
	#NID_id_smime_˘_authD©a
 205

	)

821 
	#OBJ_id_smime_˘_authD©a
 
OBJ_id_smime_˘
,2L

	)

823 
	#SN_id_smime_˘_publishCît
 "id-smime-˘-publishCît"

	)

824 
	#NID_id_smime_˘_publishCît
 206

	)

825 
	#OBJ_id_smime_˘_publishCît
 
OBJ_id_smime_˘
,3L

	)

827 
	#SN_id_smime_˘_TSTInfo
 "id-smime-˘-TSTInfo"

	)

828 
	#NID_id_smime_˘_TSTInfo
 207

	)

829 
	#OBJ_id_smime_˘_TSTInfo
 
OBJ_id_smime_˘
,4L

	)

831 
	#SN_id_smime_˘_TDTInfo
 "id-smime-˘-TDTInfo"

	)

832 
	#NID_id_smime_˘_TDTInfo
 208

	)

833 
	#OBJ_id_smime_˘_TDTInfo
 
OBJ_id_smime_˘
,5L

	)

835 
	#SN_id_smime_˘_c⁄ã¡Info
 "id-smime-˘-c⁄ã¡Info"

	)

836 
	#NID_id_smime_˘_c⁄ã¡Info
 209

	)

837 
	#OBJ_id_smime_˘_c⁄ã¡Info
 
OBJ_id_smime_˘
,6L

	)

839 
	#SN_id_smime_˘_DVCSReque°D©a
 "id-smime-˘-DVCSReque°D©a"

	)

840 
	#NID_id_smime_˘_DVCSReque°D©a
 210

	)

841 
	#OBJ_id_smime_˘_DVCSReque°D©a
 
OBJ_id_smime_˘
,7L

	)

843 
	#SN_id_smime_˘_DVCSRe•⁄£D©a
 "id-smime-˘-DVCSRe•⁄£D©a"

	)

844 
	#NID_id_smime_˘_DVCSRe•⁄£D©a
 211

	)

845 
	#OBJ_id_smime_˘_DVCSRe•⁄£D©a
 
OBJ_id_smime_˘
,8L

	)

847 
	#SN_id_smime_˘_com¥es£dD©a
 "id-smime-˘-com¥es£dD©a"

	)

848 
	#NID_id_smime_˘_com¥es£dD©a
 786

	)

849 
	#OBJ_id_smime_˘_com¥es£dD©a
 
OBJ_id_smime_˘
,9L

	)

851 
	#SN_id_˘_asciiTextWôhCRLF
 "id-˘-asciiTextWôhCRLF"

	)

852 
	#NID_id_˘_asciiTextWôhCRLF
 787

	)

853 
	#OBJ_id_˘_asciiTextWôhCRLF
 
OBJ_id_smime_˘
,27L

	)

855 
	#SN_id_smime_Ø_ª˚ùtReque°
 "id-smime-Ø-ª˚ùtReque°"

	)

856 
	#NID_id_smime_Ø_ª˚ùtReque°
 212

	)

857 
	#OBJ_id_smime_Ø_ª˚ùtReque°
 
OBJ_id_smime_Ø
,1L

	)

859 
	#SN_id_smime_Ø_£curôyLabñ
 "id-smime-Ø-£curôyLabñ"

	)

860 
	#NID_id_smime_Ø_£curôyLabñ
 213

	)

861 
	#OBJ_id_smime_Ø_£curôyLabñ
 
OBJ_id_smime_Ø
,2L

	)

863 
	#SN_id_smime_Ø_mlEx∑ndHi°‹y
 "id-smime-Ø-mlEx∑ndHi°‹y"

	)

864 
	#NID_id_smime_Ø_mlEx∑ndHi°‹y
 214

	)

865 
	#OBJ_id_smime_Ø_mlEx∑ndHi°‹y
 
OBJ_id_smime_Ø
,3L

	)

867 
	#SN_id_smime_Ø_c⁄ã¡Höt
 "id-smime-Ø-c⁄ã¡Höt"

	)

868 
	#NID_id_smime_Ø_c⁄ã¡Höt
 215

	)

869 
	#OBJ_id_smime_Ø_c⁄ã¡Höt
 
OBJ_id_smime_Ø
,4L

	)

871 
	#SN_id_smime_Ø_msgSigDige°
 "id-smime-Ø-msgSigDige°"

	)

872 
	#NID_id_smime_Ø_msgSigDige°
 216

	)

873 
	#OBJ_id_smime_Ø_msgSigDige°
 
OBJ_id_smime_Ø
,5L

	)

875 
	#SN_id_smime_Ø_íˇpC⁄ã¡Ty≥
 "id-smime-Ø-íˇpC⁄ã¡Ty≥"

	)

876 
	#NID_id_smime_Ø_íˇpC⁄ã¡Ty≥
 217

	)

877 
	#OBJ_id_smime_Ø_íˇpC⁄ã¡Ty≥
 
OBJ_id_smime_Ø
,6L

	)

879 
	#SN_id_smime_Ø_c⁄ã¡Idítifõr
 "id-smime-Ø-c⁄ã¡Idítifõr"

	)

880 
	#NID_id_smime_Ø_c⁄ã¡Idítifõr
 218

	)

881 
	#OBJ_id_smime_Ø_c⁄ã¡Idítifõr
 
OBJ_id_smime_Ø
,7L

	)

883 
	#SN_id_smime_Ø_macVÆue
 "id-smime-Ø-macVÆue"

	)

884 
	#NID_id_smime_Ø_macVÆue
 219

	)

885 
	#OBJ_id_smime_Ø_macVÆue
 
OBJ_id_smime_Ø
,8L

	)

887 
	#SN_id_smime_Ø_equivÆítLabñs
 "id-smime-Ø-equivÆítLabñs"

	)

888 
	#NID_id_smime_Ø_equivÆítLabñs
 220

	)

889 
	#OBJ_id_smime_Ø_equivÆítLabñs
 
OBJ_id_smime_Ø
,9L

	)

891 
	#SN_id_smime_Ø_c⁄ã¡Re„ªn˚
 "id-smime-Ø-c⁄ã¡Re„ªn˚"

	)

892 
	#NID_id_smime_Ø_c⁄ã¡Re„ªn˚
 221

	)

893 
	#OBJ_id_smime_Ø_c⁄ã¡Re„ªn˚
 
OBJ_id_smime_Ø
,10L

	)

895 
	#SN_id_smime_Ø_í¸ypKeyPªf
 "id-smime-Ø-í¸ypKeyPªf"

	)

896 
	#NID_id_smime_Ø_í¸ypKeyPªf
 222

	)

897 
	#OBJ_id_smime_Ø_í¸ypKeyPªf
 
OBJ_id_smime_Ø
,11L

	)

899 
	#SN_id_smime_Ø_signögCîtifiˇã
 "id-smime-Ø-signögCîtifiˇã"

	)

900 
	#NID_id_smime_Ø_signögCîtifiˇã
 223

	)

901 
	#OBJ_id_smime_Ø_signögCîtifiˇã
 
OBJ_id_smime_Ø
,12L

	)

903 
	#SN_id_smime_Ø_smimeEn¸y±Cîts
 "id-smime-Ø-smimeEn¸y±Cîts"

	)

904 
	#NID_id_smime_Ø_smimeEn¸y±Cîts
 224

	)

905 
	#OBJ_id_smime_Ø_smimeEn¸y±Cîts
 
OBJ_id_smime_Ø
,13L

	)

907 
	#SN_id_smime_Ø_timeSèmpTokí
 "id-smime-Ø-timeSèmpTokí"

	)

908 
	#NID_id_smime_Ø_timeSèmpTokí
 225

	)

909 
	#OBJ_id_smime_Ø_timeSèmpTokí
 
OBJ_id_smime_Ø
,14L

	)

911 
	#SN_id_smime_Ø_ës_sigPﬁicyId
 "id-smime-Ø-ës-sigPﬁicyId"

	)

912 
	#NID_id_smime_Ø_ës_sigPﬁicyId
 226

	)

913 
	#OBJ_id_smime_Ø_ës_sigPﬁicyId
 
OBJ_id_smime_Ø
,15L

	)

915 
	#SN_id_smime_Ø_ës_commômítTy≥
 "id-smime-Ø-ës-commômítTy≥"

	)

916 
	#NID_id_smime_Ø_ës_commômítTy≥
 227

	)

917 
	#OBJ_id_smime_Ø_ës_commômítTy≥
 
OBJ_id_smime_Ø
,16L

	)

919 
	#SN_id_smime_Ø_ës_sig√rLoˇti⁄
 "id-smime-Ø-ës-sig√rLoˇti⁄"

	)

920 
	#NID_id_smime_Ø_ës_sig√rLoˇti⁄
 228

	)

921 
	#OBJ_id_smime_Ø_ës_sig√rLoˇti⁄
 
OBJ_id_smime_Ø
,17L

	)

923 
	#SN_id_smime_Ø_ës_sig√rAâr
 "id-smime-Ø-ës-sig√rAâr"

	)

924 
	#NID_id_smime_Ø_ës_sig√rAâr
 229

	)

925 
	#OBJ_id_smime_Ø_ës_sig√rAâr
 
OBJ_id_smime_Ø
,18L

	)

927 
	#SN_id_smime_Ø_ës_ŸhîSigCît
 "id-smime-Ø-ës-ŸhîSigCît"

	)

928 
	#NID_id_smime_Ø_ës_ŸhîSigCît
 230

	)

929 
	#OBJ_id_smime_Ø_ës_ŸhîSigCît
 
OBJ_id_smime_Ø
,19L

	)

931 
	#SN_id_smime_Ø_ës_c⁄ã¡Time°amp
 "id-smime-Ø-ës-c⁄ã¡Time°amp"

	)

932 
	#NID_id_smime_Ø_ës_c⁄ã¡Time°amp
 231

	)

933 
	#OBJ_id_smime_Ø_ës_c⁄ã¡Time°amp
 
OBJ_id_smime_Ø
,20L

	)

935 
	#SN_id_smime_Ø_ës_CîtifiˇãRefs
 "id-smime-Ø-ës-CîtifiˇãRefs"

	)

936 
	#NID_id_smime_Ø_ës_CîtifiˇãRefs
 232

	)

937 
	#OBJ_id_smime_Ø_ës_CîtifiˇãRefs
 
OBJ_id_smime_Ø
,21L

	)

939 
	#SN_id_smime_Ø_ës_Revoˇti⁄Refs
 "id-smime-Ø-ës-Revoˇti⁄Refs"

	)

940 
	#NID_id_smime_Ø_ës_Revoˇti⁄Refs
 233

	)

941 
	#OBJ_id_smime_Ø_ës_Revoˇti⁄Refs
 
OBJ_id_smime_Ø
,22L

	)

943 
	#SN_id_smime_Ø_ës_˚πVÆues
 "id-smime-Ø-ës-˚πVÆues"

	)

944 
	#NID_id_smime_Ø_ës_˚πVÆues
 234

	)

945 
	#OBJ_id_smime_Ø_ës_˚πVÆues
 
OBJ_id_smime_Ø
,23L

	)

947 
	#SN_id_smime_Ø_ës_ªvoˇti⁄VÆues
 "id-smime-Ø-ës-ªvoˇti⁄VÆues"

	)

948 
	#NID_id_smime_Ø_ës_ªvoˇti⁄VÆues
 235

	)

949 
	#OBJ_id_smime_Ø_ës_ªvoˇti⁄VÆues
 
OBJ_id_smime_Ø
,24L

	)

951 
	#SN_id_smime_Ø_ës_escTimeSèmp
 "id-smime-Ø-ës-escTimeSèmp"

	)

952 
	#NID_id_smime_Ø_ës_escTimeSèmp
 236

	)

953 
	#OBJ_id_smime_Ø_ës_escTimeSèmp
 
OBJ_id_smime_Ø
,25L

	)

955 
	#SN_id_smime_Ø_ës_˚πCRLTime°amp
 "id-smime-Ø-ës-˚πCRLTime°amp"

	)

956 
	#NID_id_smime_Ø_ës_˚πCRLTime°amp
 237

	)

957 
	#OBJ_id_smime_Ø_ës_˚πCRLTime°amp
 
OBJ_id_smime_Ø
,26L

	)

959 
	#SN_id_smime_Ø_ës_¨chiveTimeSèmp
 "id-smime-Ø-ës-¨chiveTimeSèmp"

	)

960 
	#NID_id_smime_Ø_ës_¨chiveTimeSèmp
 238

	)

961 
	#OBJ_id_smime_Ø_ës_¨chiveTimeSèmp
 
OBJ_id_smime_Ø
,27L

	)

963 
	#SN_id_smime_Ø_sig«tuªTy≥
 "id-smime-Ø-sig«tuªTy≥"

	)

964 
	#NID_id_smime_Ø_sig«tuªTy≥
 239

	)

965 
	#OBJ_id_smime_Ø_sig«tuªTy≥
 
OBJ_id_smime_Ø
,28L

	)

967 
	#SN_id_smime_Ø_dvcs_dvc
 "id-smime-Ø-dvcs-dvc"

	)

968 
	#NID_id_smime_Ø_dvcs_dvc
 240

	)

969 
	#OBJ_id_smime_Ø_dvcs_dvc
 
OBJ_id_smime_Ø
,29L

	)

971 
	#SN_id_smime_Æg_ESDHwôh3DES
 "id-smime-Æg-ESDHwôh3DES"

	)

972 
	#NID_id_smime_Æg_ESDHwôh3DES
 241

	)

973 
	#OBJ_id_smime_Æg_ESDHwôh3DES
 
OBJ_id_smime_Æg
,1L

	)

975 
	#SN_id_smime_Æg_ESDHwôhRC2
 "id-smime-Æg-ESDHwôhRC2"

	)

976 
	#NID_id_smime_Æg_ESDHwôhRC2
 242

	)

977 
	#OBJ_id_smime_Æg_ESDHwôhRC2
 
OBJ_id_smime_Æg
,2L

	)

979 
	#SN_id_smime_Æg_3DESwøp
 "id-smime-Æg-3DESwøp"

	)

980 
	#NID_id_smime_Æg_3DESwøp
 243

	)

981 
	#OBJ_id_smime_Æg_3DESwøp
 
OBJ_id_smime_Æg
,3L

	)

983 
	#SN_id_smime_Æg_RC2wøp
 "id-smime-Æg-RC2wøp"

	)

984 
	#NID_id_smime_Æg_RC2wøp
 244

	)

985 
	#OBJ_id_smime_Æg_RC2wøp
 
OBJ_id_smime_Æg
,4L

	)

987 
	#SN_id_smime_Æg_ESDH
 "id-smime-Æg-ESDH"

	)

988 
	#NID_id_smime_Æg_ESDH
 245

	)

989 
	#OBJ_id_smime_Æg_ESDH
 
OBJ_id_smime_Æg
,5L

	)

991 
	#SN_id_smime_Æg_CMS3DESwøp
 "id-smime-Æg-CMS3DESwøp"

	)

992 
	#NID_id_smime_Æg_CMS3DESwøp
 246

	)

993 
	#OBJ_id_smime_Æg_CMS3DESwøp
 
OBJ_id_smime_Æg
,6L

	)

995 
	#SN_id_smime_Æg_CMSRC2wøp
 "id-smime-Æg-CMSRC2wøp"

	)

996 
	#NID_id_smime_Æg_CMSRC2wøp
 247

	)

997 
	#OBJ_id_smime_Æg_CMSRC2wøp
 
OBJ_id_smime_Æg
,7L

	)

999 
	#SN_id_Æg_PWRI_KEK
 "id-Æg-PWRI-KEK"

	)

1000 
	#NID_id_Æg_PWRI_KEK
 893

	)

1001 
	#OBJ_id_Æg_PWRI_KEK
 
OBJ_id_smime_Æg
,9L

	)

1003 
	#SN_id_smime_cd_ld≠
 "id-smime-cd-ld≠"

	)

1004 
	#NID_id_smime_cd_ld≠
 248

	)

1005 
	#OBJ_id_smime_cd_ld≠
 
OBJ_id_smime_cd
,1L

	)

1007 
	#SN_id_smime_•q_ës_sqt_uri
 "id-smime-•q-ës-sqt-uri"

	)

1008 
	#NID_id_smime_•q_ës_sqt_uri
 249

	)

1009 
	#OBJ_id_smime_•q_ës_sqt_uri
 
OBJ_id_smime_•q
,1L

	)

1011 
	#SN_id_smime_•q_ës_sqt_unŸi˚
 "id-smime-•q-ës-sqt-unŸi˚"

	)

1012 
	#NID_id_smime_•q_ës_sqt_unŸi˚
 250

	)

1013 
	#OBJ_id_smime_•q_ës_sqt_unŸi˚
 
OBJ_id_smime_•q
,2L

	)

1015 
	#SN_id_smime_˘i_ës_¥oofOfOrigö
 "id-smime-˘i-ës-¥oofOfOrigö"

	)

1016 
	#NID_id_smime_˘i_ës_¥oofOfOrigö
 251

	)

1017 
	#OBJ_id_smime_˘i_ës_¥oofOfOrigö
 
OBJ_id_smime_˘i
,1L

	)

1019 
	#SN_id_smime_˘i_ës_¥oofOfRe˚ùt
 "id-smime-˘i-ës-¥oofOfRe˚ùt"

	)

1020 
	#NID_id_smime_˘i_ës_¥oofOfRe˚ùt
 252

	)

1021 
	#OBJ_id_smime_˘i_ës_¥oofOfRe˚ùt
 
OBJ_id_smime_˘i
,2L

	)

1023 
	#SN_id_smime_˘i_ës_¥oofOfDñivîy
 "id-smime-˘i-ës-¥oofOfDñivîy"

	)

1024 
	#NID_id_smime_˘i_ës_¥oofOfDñivîy
 253

	)

1025 
	#OBJ_id_smime_˘i_ës_¥oofOfDñivîy
 
OBJ_id_smime_˘i
,3L

	)

1027 
	#SN_id_smime_˘i_ës_¥oofOfSídî
 "id-smime-˘i-ës-¥oofOfSídî"

	)

1028 
	#NID_id_smime_˘i_ës_¥oofOfSídî
 254

	)

1029 
	#OBJ_id_smime_˘i_ës_¥oofOfSídî
 
OBJ_id_smime_˘i
,4L

	)

1031 
	#SN_id_smime_˘i_ës_¥oofOfAµrovÆ
 "id-smime-˘i-ës-¥oofOfAµrovÆ"

	)

1032 
	#NID_id_smime_˘i_ës_¥oofOfAµrovÆ
 255

	)

1033 
	#OBJ_id_smime_˘i_ës_¥oofOfAµrovÆ
 
OBJ_id_smime_˘i
,5L

	)

1035 
	#SN_id_smime_˘i_ës_¥oofOfCª©i⁄
 "id-smime-˘i-ës-¥oofOfCª©i⁄"

	)

1036 
	#NID_id_smime_˘i_ës_¥oofOfCª©i⁄
 256

	)

1037 
	#OBJ_id_smime_˘i_ës_¥oofOfCª©i⁄
 
OBJ_id_smime_˘i
,6L

	)

1039 
	#LN_‰õndlyName
 "‰õndlyName"

	)

1040 
	#NID_‰õndlyName
 156

	)

1041 
	#OBJ_‰õndlyName
 
OBJ_pkcs9
,20L

	)

1043 
	#LN_loˇlKeyID
 "loˇlKeyID"

	)

1044 
	#NID_loˇlKeyID
 157

	)

1045 
	#OBJ_loˇlKeyID
 
OBJ_pkcs9
,21L

	)

1047 
	#SN_ms_c•_«me
 "CSPName"

	)

1048 
	#LN_ms_c•_«me
 "Mi¸oso· CSP Name"

	)

1049 
	#NID_ms_c•_«me
 417

	)

1050 
	#OBJ_ms_c•_«me
 1L,3L,6L,1L,4L,1L,311L,17L,1L

	)

1052 
	#SN_LoˇlKeySë
 "LoˇlKeySë"

	)

1053 
	#LN_LoˇlKeySë
 "Mi¸oso· Loˇ»Key së"

	)

1054 
	#NID_LoˇlKeySë
 856

	)

1055 
	#OBJ_LoˇlKeySë
 1L,3L,6L,1L,4L,1L,311L,17L,2L

	)

1057 
	#OBJ_˚πTy≥s
 
OBJ_pkcs9
,22L

	)

1059 
	#LN_x509Cîtifiˇã
 "x509Cîtifiˇã"

	)

1060 
	#NID_x509Cîtifiˇã
 158

	)

1061 
	#OBJ_x509Cîtifiˇã
 
OBJ_˚πTy≥s
,1L

	)

1063 
	#LN_sdsiCîtifiˇã
 "sdsiCîtifiˇã"

	)

1064 
	#NID_sdsiCîtifiˇã
 159

	)

1065 
	#OBJ_sdsiCîtifiˇã
 
OBJ_˚πTy≥s
,2L

	)

1067 
	#OBJ_¸lTy≥s
 
OBJ_pkcs9
,23L

	)

1069 
	#LN_x509Cæ
 "x509Cæ"

	)

1070 
	#NID_x509Cæ
 160

	)

1071 
	#OBJ_x509Cæ
 
OBJ_¸lTy≥s
,1L

	)

1073 
	#OBJ_pkcs12
 
OBJ_pkcs
,12L

	)

1075 
	#OBJ_pkcs12_pbeids
 
OBJ_pkcs12
,1L

	)

1077 
	#SN_pbe_WôhSHA1And128BôRC4
 "PBE-SHA1-RC4-128"

	)

1078 
	#LN_pbe_WôhSHA1And128BôRC4
 "pbeWôhSHA1And128BôRC4"

	)

1079 
	#NID_pbe_WôhSHA1And128BôRC4
 144

	)

1080 
	#OBJ_pbe_WôhSHA1And128BôRC4
 
OBJ_pkcs12_pbeids
,1L

	)

1082 
	#SN_pbe_WôhSHA1And40BôRC4
 "PBE-SHA1-RC4-40"

	)

1083 
	#LN_pbe_WôhSHA1And40BôRC4
 "pbeWôhSHA1And40BôRC4"

	)

1084 
	#NID_pbe_WôhSHA1And40BôRC4
 145

	)

1085 
	#OBJ_pbe_WôhSHA1And40BôRC4
 
OBJ_pkcs12_pbeids
,2L

	)

1087 
	#SN_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 "PBE-SHA1-3DES"

	)

1088 
	#LN_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 "pbeWôhSHA1And3-KeyTrùÀDES-CBC"

	)

1089 
	#NID_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 146

	)

1090 
	#OBJ_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 
OBJ_pkcs12_pbeids
,3L

	)

1092 
	#SN_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 "PBE-SHA1-2DES"

	)

1093 
	#LN_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 "pbeWôhSHA1And2-KeyTrùÀDES-CBC"

	)

1094 
	#NID_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 147

	)

1095 
	#OBJ_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 
OBJ_pkcs12_pbeids
,4L

	)

1097 
	#SN_pbe_WôhSHA1And128BôRC2_CBC
 "PBE-SHA1-RC2-128"

	)

1098 
	#LN_pbe_WôhSHA1And128BôRC2_CBC
 "pbeWôhSHA1And128BôRC2-CBC"

	)

1099 
	#NID_pbe_WôhSHA1And128BôRC2_CBC
 148

	)

1100 
	#OBJ_pbe_WôhSHA1And128BôRC2_CBC
 
OBJ_pkcs12_pbeids
,5L

	)

1102 
	#SN_pbe_WôhSHA1And40BôRC2_CBC
 "PBE-SHA1-RC2-40"

	)

1103 
	#LN_pbe_WôhSHA1And40BôRC2_CBC
 "pbeWôhSHA1And40BôRC2-CBC"

	)

1104 
	#NID_pbe_WôhSHA1And40BôRC2_CBC
 149

	)

1105 
	#OBJ_pbe_WôhSHA1And40BôRC2_CBC
 
OBJ_pkcs12_pbeids
,6L

	)

1107 
	#OBJ_pkcs12_Vîsi⁄1
 
OBJ_pkcs12
,10L

	)

1109 
	#OBJ_pkcs12_BagIds
 
OBJ_pkcs12_Vîsi⁄1
,1L

	)

1111 
	#LN_keyBag
 "keyBag"

	)

1112 
	#NID_keyBag
 150

	)

1113 
	#OBJ_keyBag
 
OBJ_pkcs12_BagIds
,1L

	)

1115 
	#LN_pkcs8ShroudedKeyBag
 "pkcs8ShroudedKeyBag"

	)

1116 
	#NID_pkcs8ShroudedKeyBag
 151

	)

1117 
	#OBJ_pkcs8ShroudedKeyBag
 
OBJ_pkcs12_BagIds
,2L

	)

1119 
	#LN_˚πBag
 "˚πBag"

	)

1120 
	#NID_˚πBag
 152

	)

1121 
	#OBJ_˚πBag
 
OBJ_pkcs12_BagIds
,3L

	)

1123 
	#LN_¸lBag
 "¸lBag"

	)

1124 
	#NID_¸lBag
 153

	)

1125 
	#OBJ_¸lBag
 
OBJ_pkcs12_BagIds
,4L

	)

1127 
	#LN_£¸ëBag
 "£¸ëBag"

	)

1128 
	#NID_£¸ëBag
 154

	)

1129 
	#OBJ_£¸ëBag
 
OBJ_pkcs12_BagIds
,5L

	)

1131 
	#LN_ß„C⁄ã¡sBag
 "ß„C⁄ã¡sBag"

	)

1132 
	#NID_ß„C⁄ã¡sBag
 155

	)

1133 
	#OBJ_ß„C⁄ã¡sBag
 
OBJ_pkcs12_BagIds
,6L

	)

1135 
	#SN_md2
 "MD2"

	)

1136 
	#LN_md2
 "md2"

	)

1137 
	#NID_md2
 3

	)

1138 
	#OBJ_md2
 
OBJ_rßdsi
,2L,2L

	)

1140 
	#SN_md4
 "MD4"

	)

1141 
	#LN_md4
 "md4"

	)

1142 
	#NID_md4
 257

	)

1143 
	#OBJ_md4
 
OBJ_rßdsi
,2L,4L

	)

1145 
	#SN_md5
 "MD5"

	)

1146 
	#LN_md5
 "md5"

	)

1147 
	#NID_md5
 4

	)

1148 
	#OBJ_md5
 
OBJ_rßdsi
,2L,5L

	)

1150 
	#SN_md5_sha1
 "MD5-SHA1"

	)

1151 
	#LN_md5_sha1
 "md5-sha1"

	)

1152 
	#NID_md5_sha1
 114

	)

1154 
	#LN_hmacWôhMD5
 "hmacWôhMD5"

	)

1155 
	#NID_hmacWôhMD5
 797

	)

1156 
	#OBJ_hmacWôhMD5
 
OBJ_rßdsi
,2L,6L

	)

1158 
	#LN_hmacWôhSHA1
 "hmacWôhSHA1"

	)

1159 
	#NID_hmacWôhSHA1
 163

	)

1160 
	#OBJ_hmacWôhSHA1
 
OBJ_rßdsi
,2L,7L

	)

1162 
	#LN_hmacWôhSHA224
 "hmacWôhSHA224"

	)

1163 
	#NID_hmacWôhSHA224
 798

	)

1164 
	#OBJ_hmacWôhSHA224
 
OBJ_rßdsi
,2L,8L

	)

1166 
	#LN_hmacWôhSHA256
 "hmacWôhSHA256"

	)

1167 
	#NID_hmacWôhSHA256
 799

	)

1168 
	#OBJ_hmacWôhSHA256
 
OBJ_rßdsi
,2L,9L

	)

1170 
	#LN_hmacWôhSHA384
 "hmacWôhSHA384"

	)

1171 
	#NID_hmacWôhSHA384
 800

	)

1172 
	#OBJ_hmacWôhSHA384
 
OBJ_rßdsi
,2L,10L

	)

1174 
	#LN_hmacWôhSHA512
 "hmacWôhSHA512"

	)

1175 
	#NID_hmacWôhSHA512
 801

	)

1176 
	#OBJ_hmacWôhSHA512
 
OBJ_rßdsi
,2L,11L

	)

1178 
	#SN_rc2_cbc
 "RC2-CBC"

	)

1179 
	#LN_rc2_cbc
 "rc2-cbc"

	)

1180 
	#NID_rc2_cbc
 37

	)

1181 
	#OBJ_rc2_cbc
 
OBJ_rßdsi
,3L,2L

	)

1183 
	#SN_rc2_ecb
 "RC2-ECB"

	)

1184 
	#LN_rc2_ecb
 "rc2-ecb"

	)

1185 
	#NID_rc2_ecb
 38

	)

1187 
	#SN_rc2_cfb64
 "RC2-CFB"

	)

1188 
	#LN_rc2_cfb64
 "rc2-cfb"

	)

1189 
	#NID_rc2_cfb64
 39

	)

1191 
	#SN_rc2_ofb64
 "RC2-OFB"

	)

1192 
	#LN_rc2_ofb64
 "rc2-ofb"

	)

1193 
	#NID_rc2_ofb64
 40

	)

1195 
	#SN_rc2_40_cbc
 "RC2-40-CBC"

	)

1196 
	#LN_rc2_40_cbc
 "rc2-40-cbc"

	)

1197 
	#NID_rc2_40_cbc
 98

	)

1199 
	#SN_rc2_64_cbc
 "RC2-64-CBC"

	)

1200 
	#LN_rc2_64_cbc
 "rc2-64-cbc"

	)

1201 
	#NID_rc2_64_cbc
 166

	)

1203 
	#SN_rc4
 "RC4"

	)

1204 
	#LN_rc4
 "rc4"

	)

1205 
	#NID_rc4
 5

	)

1206 
	#OBJ_rc4
 
OBJ_rßdsi
,3L,4L

	)

1208 
	#SN_rc4_40
 "RC4-40"

	)

1209 
	#LN_rc4_40
 "rc4-40"

	)

1210 
	#NID_rc4_40
 97

	)

1212 
	#SN_des_ede3_cbc
 "DES-EDE3-CBC"

	)

1213 
	#LN_des_ede3_cbc
 "des-ede3-cbc"

	)

1214 
	#NID_des_ede3_cbc
 44

	)

1215 
	#OBJ_des_ede3_cbc
 
OBJ_rßdsi
,3L,7L

	)

1217 
	#SN_rc5_cbc
 "RC5-CBC"

	)

1218 
	#LN_rc5_cbc
 "rc5-cbc"

	)

1219 
	#NID_rc5_cbc
 120

	)

1220 
	#OBJ_rc5_cbc
 
OBJ_rßdsi
,3L,8L

	)

1222 
	#SN_rc5_ecb
 "RC5-ECB"

	)

1223 
	#LN_rc5_ecb
 "rc5-ecb"

	)

1224 
	#NID_rc5_ecb
 121

	)

1226 
	#SN_rc5_cfb64
 "RC5-CFB"

	)

1227 
	#LN_rc5_cfb64
 "rc5-cfb"

	)

1228 
	#NID_rc5_cfb64
 122

	)

1230 
	#SN_rc5_ofb64
 "RC5-OFB"

	)

1231 
	#LN_rc5_ofb64
 "rc5-ofb"

	)

1232 
	#NID_rc5_ofb64
 123

	)

1234 
	#SN_ms_ext_ªq
 "msExtReq"

	)

1235 
	#LN_ms_ext_ªq
 "Mi¸oso· Exãnsi⁄ Reque°"

	)

1236 
	#NID_ms_ext_ªq
 171

	)

1237 
	#OBJ_ms_ext_ªq
 1L,3L,6L,1L,4L,1L,311L,2L,1L,14L

	)

1239 
	#SN_ms_code_öd
 "msCodeInd"

	)

1240 
	#LN_ms_code_öd
 "Mi¸oso· IndividuÆ CodêSignög"

	)

1241 
	#NID_ms_code_öd
 134

	)

1242 
	#OBJ_ms_code_öd
 1L,3L,6L,1L,4L,1L,311L,2L,1L,21L

	)

1244 
	#SN_ms_code_com
 "msCodeCom"

	)

1245 
	#LN_ms_code_com
 "Mi¸oso· Commîcü»CodêSignög"

	)

1246 
	#NID_ms_code_com
 135

	)

1247 
	#OBJ_ms_code_com
 1L,3L,6L,1L,4L,1L,311L,2L,1L,22L

	)

1249 
	#SN_ms_˘l_sign
 "msCTLSign"

	)

1250 
	#LN_ms_˘l_sign
 "Mi¸oso· Tru° Li° Signög"

	)

1251 
	#NID_ms_˘l_sign
 136

	)

1252 
	#OBJ_ms_˘l_sign
 1L,3L,6L,1L,4L,1L,311L,10L,3L,1L

	)

1254 
	#SN_ms_sgc
 "msSGC"

	)

1255 
	#LN_ms_sgc
 "Mi¸oso· Sîvî G©ed Cry±o"

	)

1256 
	#NID_ms_sgc
 137

	)

1257 
	#OBJ_ms_sgc
 1L,3L,6L,1L,4L,1L,311L,10L,3L,3L

	)

1259 
	#SN_ms_efs
 "msEFS"

	)

1260 
	#LN_ms_efs
 "Mi¸oso· En¸y±ed FûêSy°em"

	)

1261 
	#NID_ms_efs
 138

	)

1262 
	#OBJ_ms_efs
 1L,3L,6L,1L,4L,1L,311L,10L,3L,4L

	)

1264 
	#SN_ms_sm¨tˇrd_logö
 "msSm¨tˇrdLogö"

	)

1265 
	#LN_ms_sm¨tˇrd_logö
 "Mi¸oso· Sm¨tˇrdlogö"

	)

1266 
	#NID_ms_sm¨tˇrd_logö
 648

	)

1267 
	#OBJ_ms_sm¨tˇrd_logö
 1L,3L,6L,1L,4L,1L,311L,20L,2L,2L

	)

1269 
	#SN_ms_u≤
 "msUPN"

	)

1270 
	#LN_ms_u≤
 "Mi¸oso· Univîß»PröcùÆ Name"

	)

1271 
	#NID_ms_u≤
 649

	)

1272 
	#OBJ_ms_u≤
 1L,3L,6L,1L,4L,1L,311L,20L,2L,3L

	)

1274 
	#SN_idó_cbc
 "IDEA-CBC"

	)

1275 
	#LN_idó_cbc
 "idó-cbc"

	)

1276 
	#NID_idó_cbc
 34

	)

1277 
	#OBJ_idó_cbc
 1L,3L,6L,1L,4L,1L,188L,7L,1L,1L,2L

	)

1279 
	#SN_idó_ecb
 "IDEA-ECB"

	)

1280 
	#LN_idó_ecb
 "idó-ecb"

	)

1281 
	#NID_idó_ecb
 36

	)

1283 
	#SN_idó_cfb64
 "IDEA-CFB"

	)

1284 
	#LN_idó_cfb64
 "idó-cfb"

	)

1285 
	#NID_idó_cfb64
 35

	)

1287 
	#SN_idó_ofb64
 "IDEA-OFB"

	)

1288 
	#LN_idó_ofb64
 "idó-ofb"

	)

1289 
	#NID_idó_ofb64
 46

	)

1291 
	#SN_bf_cbc
 "BF-CBC"

	)

1292 
	#LN_bf_cbc
 "bf-cbc"

	)

1293 
	#NID_bf_cbc
 91

	)

1294 
	#OBJ_bf_cbc
 1L,3L,6L,1L,4L,1L,3029L,1L,2L

	)

1296 
	#SN_bf_ecb
 "BF-ECB"

	)

1297 
	#LN_bf_ecb
 "bf-ecb"

	)

1298 
	#NID_bf_ecb
 92

	)

1300 
	#SN_bf_cfb64
 "BF-CFB"

	)

1301 
	#LN_bf_cfb64
 "bf-cfb"

	)

1302 
	#NID_bf_cfb64
 93

	)

1304 
	#SN_bf_ofb64
 "BF-OFB"

	)

1305 
	#LN_bf_ofb64
 "bf-ofb"

	)

1306 
	#NID_bf_ofb64
 94

	)

1308 
	#SN_id_pkix
 "PKIX"

	)

1309 
	#NID_id_pkix
 127

	)

1310 
	#OBJ_id_pkix
 1L,3L,6L,1L,5L,5L,7L

	)

1312 
	#SN_id_pkix_mod
 "id-pkix-mod"

	)

1313 
	#NID_id_pkix_mod
 258

	)

1314 
	#OBJ_id_pkix_mod
 
OBJ_id_pkix
,0L

	)

1316 
	#SN_id_≥
 "id-≥"

	)

1317 
	#NID_id_≥
 175

	)

1318 
	#OBJ_id_≥
 
OBJ_id_pkix
,1L

	)

1320 
	#SN_id_qt
 "id-qt"

	)

1321 
	#NID_id_qt
 259

	)

1322 
	#OBJ_id_qt
 
OBJ_id_pkix
,2L

	)

1324 
	#SN_id_kp
 "id-kp"

	)

1325 
	#NID_id_kp
 128

	)

1326 
	#OBJ_id_kp
 
OBJ_id_pkix
,3L

	)

1328 
	#SN_id_ô
 "id-ô"

	)

1329 
	#NID_id_ô
 260

	)

1330 
	#OBJ_id_ô
 
OBJ_id_pkix
,4L

	)

1332 
	#SN_id_pkù
 "id-pkù"

	)

1333 
	#NID_id_pkù
 261

	)

1334 
	#OBJ_id_pkù
 
OBJ_id_pkix
,5L

	)

1336 
	#SN_id_Æg
 "id-Æg"

	)

1337 
	#NID_id_Æg
 262

	)

1338 
	#OBJ_id_Æg
 
OBJ_id_pkix
,6L

	)

1340 
	#SN_id_cmc
 "id-cmc"

	)

1341 
	#NID_id_cmc
 263

	)

1342 
	#OBJ_id_cmc
 
OBJ_id_pkix
,7L

	)

1344 
	#SN_id_⁄
 "id-⁄"

	)

1345 
	#NID_id_⁄
 264

	)

1346 
	#OBJ_id_⁄
 
OBJ_id_pkix
,8L

	)

1348 
	#SN_id_pda
 "id-pda"

	)

1349 
	#NID_id_pda
 265

	)

1350 
	#OBJ_id_pda
 
OBJ_id_pkix
,9L

	)

1352 
	#SN_id_aˇ
 "id-aˇ"

	)

1353 
	#NID_id_aˇ
 266

	)

1354 
	#OBJ_id_aˇ
 
OBJ_id_pkix
,10L

	)

1356 
	#SN_id_qcs
 "id-qcs"

	)

1357 
	#NID_id_qcs
 267

	)

1358 
	#OBJ_id_qcs
 
OBJ_id_pkix
,11L

	)

1360 
	#SN_id_c˘
 "id-c˘"

	)

1361 
	#NID_id_c˘
 268

	)

1362 
	#OBJ_id_c˘
 
OBJ_id_pkix
,12L

	)

1364 
	#SN_id_µl
 "id-µl"

	)

1365 
	#NID_id_µl
 662

	)

1366 
	#OBJ_id_µl
 
OBJ_id_pkix
,21L

	)

1368 
	#SN_id_ad
 "id-ad"

	)

1369 
	#NID_id_ad
 176

	)

1370 
	#OBJ_id_ad
 
OBJ_id_pkix
,48L

	)

1372 
	#SN_id_pkix1_ex∂icô_88
 "id-pkix1-ex∂icô-88"

	)

1373 
	#NID_id_pkix1_ex∂icô_88
 269

	)

1374 
	#OBJ_id_pkix1_ex∂icô_88
 
OBJ_id_pkix_mod
,1L

	)

1376 
	#SN_id_pkix1_im∂icô_88
 "id-pkix1-im∂icô-88"

	)

1377 
	#NID_id_pkix1_im∂icô_88
 270

	)

1378 
	#OBJ_id_pkix1_im∂icô_88
 
OBJ_id_pkix_mod
,2L

	)

1380 
	#SN_id_pkix1_ex∂icô_93
 "id-pkix1-ex∂icô-93"

	)

1381 
	#NID_id_pkix1_ex∂icô_93
 271

	)

1382 
	#OBJ_id_pkix1_ex∂icô_93
 
OBJ_id_pkix_mod
,3L

	)

1384 
	#SN_id_pkix1_im∂icô_93
 "id-pkix1-im∂icô-93"

	)

1385 
	#NID_id_pkix1_im∂icô_93
 272

	)

1386 
	#OBJ_id_pkix1_im∂icô_93
 
OBJ_id_pkix_mod
,4L

	)

1388 
	#SN_id_mod_¸mf
 "id-mod-¸mf"

	)

1389 
	#NID_id_mod_¸mf
 273

	)

1390 
	#OBJ_id_mod_¸mf
 
OBJ_id_pkix_mod
,5L

	)

1392 
	#SN_id_mod_cmc
 "id-mod-cmc"

	)

1393 
	#NID_id_mod_cmc
 274

	)

1394 
	#OBJ_id_mod_cmc
 
OBJ_id_pkix_mod
,6L

	)

1396 
	#SN_id_mod_kó_¥ofûe_88
 "id-mod-kó-¥ofûe-88"

	)

1397 
	#NID_id_mod_kó_¥ofûe_88
 275

	)

1398 
	#OBJ_id_mod_kó_¥ofûe_88
 
OBJ_id_pkix_mod
,7L

	)

1400 
	#SN_id_mod_kó_¥ofûe_93
 "id-mod-kó-¥ofûe-93"

	)

1401 
	#NID_id_mod_kó_¥ofûe_93
 276

	)

1402 
	#OBJ_id_mod_kó_¥ofûe_93
 
OBJ_id_pkix_mod
,8L

	)

1404 
	#SN_id_mod_cmp
 "id-mod-cmp"

	)

1405 
	#NID_id_mod_cmp
 277

	)

1406 
	#OBJ_id_mod_cmp
 
OBJ_id_pkix_mod
,9L

	)

1408 
	#SN_id_mod_quÆifõd_˚π_88
 "id-mod-quÆifõd-˚π-88"

	)

1409 
	#NID_id_mod_quÆifõd_˚π_88
 278

	)

1410 
	#OBJ_id_mod_quÆifõd_˚π_88
 
OBJ_id_pkix_mod
,10L

	)

1412 
	#SN_id_mod_quÆifõd_˚π_93
 "id-mod-quÆifõd-˚π-93"

	)

1413 
	#NID_id_mod_quÆifõd_˚π_93
 279

	)

1414 
	#OBJ_id_mod_quÆifõd_˚π_93
 
OBJ_id_pkix_mod
,11L

	)

1416 
	#SN_id_mod_©åibuã_˚π
 "id-mod-©åibuã-˚π"

	)

1417 
	#NID_id_mod_©åibuã_˚π
 280

	)

1418 
	#OBJ_id_mod_©åibuã_˚π
 
OBJ_id_pkix_mod
,12L

	)

1420 
	#SN_id_mod_time°amp_¥Ÿocﬁ
 "id-mod-time°amp-¥Ÿocﬁ"

	)

1421 
	#NID_id_mod_time°amp_¥Ÿocﬁ
 281

	)

1422 
	#OBJ_id_mod_time°amp_¥Ÿocﬁ
 
OBJ_id_pkix_mod
,13L

	)

1424 
	#SN_id_mod_oc•
 "id-mod-oc•"

	)

1425 
	#NID_id_mod_oc•
 282

	)

1426 
	#OBJ_id_mod_oc•
 
OBJ_id_pkix_mod
,14L

	)

1428 
	#SN_id_mod_dvcs
 "id-mod-dvcs"

	)

1429 
	#NID_id_mod_dvcs
 283

	)

1430 
	#OBJ_id_mod_dvcs
 
OBJ_id_pkix_mod
,15L

	)

1432 
	#SN_id_mod_cmp2000
 "id-mod-cmp2000"

	)

1433 
	#NID_id_mod_cmp2000
 284

	)

1434 
	#OBJ_id_mod_cmp2000
 
OBJ_id_pkix_mod
,16L

	)

1436 
	#SN_öfo_ac˚ss
 "auth‹ôyInfoAc˚ss"

	)

1437 
	#LN_öfo_ac˚ss
 "Auth‹ôy Inf‹m©i⁄ Ac˚ss"

	)

1438 
	#NID_öfo_ac˚ss
 177

	)

1439 
	#OBJ_öfo_ac˚ss
 
OBJ_id_≥
,1L

	)

1441 
	#SN_biomëricInfo
 "biomëricInfo"

	)

1442 
	#LN_biomëricInfo
 "Biomëri¯Info"

	)

1443 
	#NID_biomëricInfo
 285

	)

1444 
	#OBJ_biomëricInfo
 
OBJ_id_≥
,2L

	)

1446 
	#SN_qcSèãmíts
 "qcSèãmíts"

	)

1447 
	#NID_qcSèãmíts
 286

	)

1448 
	#OBJ_qcSèãmíts
 
OBJ_id_≥
,3L

	)

1450 
	#SN_ac_audôE¡ôy
 "ac-audôE¡ôy"

	)

1451 
	#NID_ac_audôE¡ôy
 287

	)

1452 
	#OBJ_ac_audôE¡ôy
 
OBJ_id_≥
,4L

	)

1454 
	#SN_ac_èrgëög
 "ac-èrgëög"

	)

1455 
	#NID_ac_èrgëög
 288

	)

1456 
	#OBJ_ac_èrgëög
 
OBJ_id_≥
,5L

	)

1458 
	#SN_ØC⁄åﬁs
 "ØC⁄åﬁs"

	)

1459 
	#NID_ØC⁄åﬁs
 289

	)

1460 
	#OBJ_ØC⁄åﬁs
 
OBJ_id_≥
,6L

	)

1462 
	#SN_sbgp_ùAddrBlock
 "sbgp-ùAddrBlock"

	)

1463 
	#NID_sbgp_ùAddrBlock
 290

	)

1464 
	#OBJ_sbgp_ùAddrBlock
 
OBJ_id_≥
,7L

	)

1466 
	#SN_sbgp_aut⁄omousSysNum
 "sbgp-aut⁄omousSysNum"

	)

1467 
	#NID_sbgp_aut⁄omousSysNum
 291

	)

1468 
	#OBJ_sbgp_aut⁄omousSysNum
 
OBJ_id_≥
,8L

	)

1470 
	#SN_sbgp_rouãrIdítifõr
 "sbgp-rouãrIdítifõr"

	)

1471 
	#NID_sbgp_rouãrIdítifõr
 292

	)

1472 
	#OBJ_sbgp_rouãrIdítifõr
 
OBJ_id_≥
,9L

	)

1474 
	#SN_ac_¥oxyög
 "ac-¥oxyög"

	)

1475 
	#NID_ac_¥oxyög
 397

	)

1476 
	#OBJ_ac_¥oxyög
 
OBJ_id_≥
,10L

	)

1478 
	#SN_söfo_ac˚ss
 "subje˘InfoAc˚ss"

	)

1479 
	#LN_söfo_ac˚ss
 "Subje˘ Inf‹m©i⁄ Ac˚ss"

	)

1480 
	#NID_söfo_ac˚ss
 398

	)

1481 
	#OBJ_söfo_ac˚ss
 
OBJ_id_≥
,11L

	)

1483 
	#SN_¥oxyCîtInfo
 "¥oxyCîtInfo"

	)

1484 
	#LN_¥oxyCîtInfo
 "Proxy Cîtifiˇã Inf‹m©i⁄"

	)

1485 
	#NID_¥oxyCîtInfo
 663

	)

1486 
	#OBJ_¥oxyCîtInfo
 
OBJ_id_≥
,14L

	)

1488 
	#SN_id_qt_˝s
 "id-qt-˝s"

	)

1489 
	#LN_id_qt_˝s
 "Pﬁicy QuÆifõ∏CPS"

	)

1490 
	#NID_id_qt_˝s
 164

	)

1491 
	#OBJ_id_qt_˝s
 
OBJ_id_qt
,1L

	)

1493 
	#SN_id_qt_unŸi˚
 "id-qt-unŸi˚"

	)

1494 
	#LN_id_qt_unŸi˚
 "Pﬁicy QuÆifõ∏U£∏NŸi˚"

	)

1495 
	#NID_id_qt_unŸi˚
 165

	)

1496 
	#OBJ_id_qt_unŸi˚
 
OBJ_id_qt
,2L

	)

1498 
	#SN_ãxtNŸi˚
 "ãxtNŸi˚"

	)

1499 
	#NID_ãxtNŸi˚
 293

	)

1500 
	#OBJ_ãxtNŸi˚
 
OBJ_id_qt
,3L

	)

1502 
	#SN_£rvî_auth
 "£rvîAuth"

	)

1503 
	#LN_£rvî_auth
 "TLS Web Sîvî Authítiˇti⁄"

	)

1504 
	#NID_£rvî_auth
 129

	)

1505 
	#OBJ_£rvî_auth
 
OBJ_id_kp
,1L

	)

1507 
	#SN_˛õ¡_auth
 "˛õ¡Auth"

	)

1508 
	#LN_˛õ¡_auth
 "TLS Web Clõ¡ Authítiˇti⁄"

	)

1509 
	#NID_˛õ¡_auth
 130

	)

1510 
	#OBJ_˛õ¡_auth
 
OBJ_id_kp
,2L

	)

1512 
	#SN_code_sign
 "codeSignög"

	)

1513 
	#LN_code_sign
 "CodêSignög"

	)

1514 
	#NID_code_sign
 131

	)

1515 
	#OBJ_code_sign
 
OBJ_id_kp
,3L

	)

1517 
	#SN_emaû_¥Ÿe˘
 "emaûPrŸe˘i⁄"

	)

1518 
	#LN_emaû_¥Ÿe˘
 "E-maû PrŸe˘i⁄"

	)

1519 
	#NID_emaû_¥Ÿe˘
 132

	)

1520 
	#OBJ_emaû_¥Ÿe˘
 
OBJ_id_kp
,4L

	)

1522 
	#SN_ù£cEndSy°em
 "ù£cEndSy°em"

	)

1523 
	#LN_ù£cEndSy°em
 "IPSe¯End Sy°em"

	)

1524 
	#NID_ù£cEndSy°em
 294

	)

1525 
	#OBJ_ù£cEndSy°em
 
OBJ_id_kp
,5L

	)

1527 
	#SN_ù£cTu¬ñ
 "ù£cTu¬ñ"

	)

1528 
	#LN_ù£cTu¬ñ
 "IPSe¯Tu¬ñ"

	)

1529 
	#NID_ù£cTu¬ñ
 295

	)

1530 
	#OBJ_ù£cTu¬ñ
 
OBJ_id_kp
,6L

	)

1532 
	#SN_ù£cU£r
 "ù£cU£r"

	)

1533 
	#LN_ù£cU£r
 "IPSe¯U£r"

	)

1534 
	#NID_ù£cU£r
 296

	)

1535 
	#OBJ_ù£cU£r
 
OBJ_id_kp
,7L

	)

1537 
	#SN_time_°amp
 "timeSèmpög"

	)

1538 
	#LN_time_°amp
 "TimêSèmpög"

	)

1539 
	#NID_time_°amp
 133

	)

1540 
	#OBJ_time_°amp
 
OBJ_id_kp
,8L

	)

1542 
	#SN_OCSP_sign
 "OCSPSignög"

	)

1543 
	#LN_OCSP_sign
 "OCSP Signög"

	)

1544 
	#NID_OCSP_sign
 180

	)

1545 
	#OBJ_OCSP_sign
 
OBJ_id_kp
,9L

	)

1547 
	#SN_dvcs
 "DVCS"

	)

1548 
	#LN_dvcs
 "dvcs"

	)

1549 
	#NID_dvcs
 297

	)

1550 
	#OBJ_dvcs
 
OBJ_id_kp
,10L

	)

1552 
	#SN_id_ô_ˇPrŸEncCît
 "id-ô-ˇPrŸEncCît"

	)

1553 
	#NID_id_ô_ˇPrŸEncCît
 298

	)

1554 
	#OBJ_id_ô_ˇPrŸEncCît
 
OBJ_id_ô
,1L

	)

1556 
	#SN_id_ô_signKeyPaúTy≥s
 "id-ô-signKeyPaúTy≥s"

	)

1557 
	#NID_id_ô_signKeyPaúTy≥s
 299

	)

1558 
	#OBJ_id_ô_signKeyPaúTy≥s
 
OBJ_id_ô
,2L

	)

1560 
	#SN_id_ô_ícKeyPaúTy≥s
 "id-ô-ícKeyPaúTy≥s"

	)

1561 
	#NID_id_ô_ícKeyPaúTy≥s
 300

	)

1562 
	#OBJ_id_ô_ícKeyPaúTy≥s
 
OBJ_id_ô
,3L

	)

1564 
	#SN_id_ô_¥e„ºedSymmAlg
 "id-ô-¥e„ºedSymmAlg"

	)

1565 
	#NID_id_ô_¥e„ºedSymmAlg
 301

	)

1566 
	#OBJ_id_ô_¥e„ºedSymmAlg
 
OBJ_id_ô
,4L

	)

1568 
	#SN_id_ô_ˇKeyUpd©eInfo
 "id-ô-ˇKeyUpd©eInfo"

	)

1569 
	#NID_id_ô_ˇKeyUpd©eInfo
 302

	)

1570 
	#OBJ_id_ô_ˇKeyUpd©eInfo
 
OBJ_id_ô
,5L

	)

1572 
	#SN_id_ô_cuºítCRL
 "id-ô-cuºítCRL"

	)

1573 
	#NID_id_ô_cuºítCRL
 303

	)

1574 
	#OBJ_id_ô_cuºítCRL
 
OBJ_id_ô
,6L

	)

1576 
	#SN_id_ô_unsuµ‹ãdOIDs
 "id-ô-unsuµ‹ãdOIDs"

	)

1577 
	#NID_id_ô_unsuµ‹ãdOIDs
 304

	)

1578 
	#OBJ_id_ô_unsuµ‹ãdOIDs
 
OBJ_id_ô
,7L

	)

1580 
	#SN_id_ô_subs¸ùti⁄Reque°
 "id-ô-subs¸ùti⁄Reque°"

	)

1581 
	#NID_id_ô_subs¸ùti⁄Reque°
 305

	)

1582 
	#OBJ_id_ô_subs¸ùti⁄Reque°
 
OBJ_id_ô
,8L

	)

1584 
	#SN_id_ô_subs¸ùti⁄Re•⁄£
 "id-ô-subs¸ùti⁄Re•⁄£"

	)

1585 
	#NID_id_ô_subs¸ùti⁄Re•⁄£
 306

	)

1586 
	#OBJ_id_ô_subs¸ùti⁄Re•⁄£
 
OBJ_id_ô
,9L

	)

1588 
	#SN_id_ô_keyPaúP¨amReq
 "id-ô-keyPaúP¨amReq"

	)

1589 
	#NID_id_ô_keyPaúP¨amReq
 307

	)

1590 
	#OBJ_id_ô_keyPaúP¨amReq
 
OBJ_id_ô
,10L

	)

1592 
	#SN_id_ô_keyPaúP¨amRï
 "id-ô-keyPaúP¨amRï"

	)

1593 
	#NID_id_ô_keyPaúP¨amRï
 308

	)

1594 
	#OBJ_id_ô_keyPaúP¨amRï
 
OBJ_id_ô
,11L

	)

1596 
	#SN_id_ô_ªvPas•hø£
 "id-ô-ªvPas•hø£"

	)

1597 
	#NID_id_ô_ªvPas•hø£
 309

	)

1598 
	#OBJ_id_ô_ªvPas•hø£
 
OBJ_id_ô
,12L

	)

1600 
	#SN_id_ô_im∂icôC⁄fúm
 "id-ô-im∂icôC⁄fúm"

	)

1601 
	#NID_id_ô_im∂icôC⁄fúm
 310

	)

1602 
	#OBJ_id_ô_im∂icôC⁄fúm
 
OBJ_id_ô
,13L

	)

1604 
	#SN_id_ô_c⁄fúmWaôTime
 "id-ô-c⁄fúmWaôTime"

	)

1605 
	#NID_id_ô_c⁄fúmWaôTime
 311

	)

1606 
	#OBJ_id_ô_c⁄fúmWaôTime
 
OBJ_id_ô
,14L

	)

1608 
	#SN_id_ô_‹igPKIMesßge
 "id-ô-‹igPKIMesßge"

	)

1609 
	#NID_id_ô_‹igPKIMesßge
 312

	)

1610 
	#OBJ_id_ô_‹igPKIMesßge
 
OBJ_id_ô
,15L

	)

1612 
	#SN_id_ô_suµL™gTags
 "id-ô-suµL™gTags"

	)

1613 
	#NID_id_ô_suµL™gTags
 784

	)

1614 
	#OBJ_id_ô_suµL™gTags
 
OBJ_id_ô
,16L

	)

1616 
	#SN_id_ªgCål
 "id-ªgCål"

	)

1617 
	#NID_id_ªgCål
 313

	)

1618 
	#OBJ_id_ªgCål
 
OBJ_id_pkù
,1L

	)

1620 
	#SN_id_ªgInfo
 "id-ªgInfo"

	)

1621 
	#NID_id_ªgInfo
 314

	)

1622 
	#OBJ_id_ªgInfo
 
OBJ_id_pkù
,2L

	)

1624 
	#SN_id_ªgCål_ªgTokí
 "id-ªgCål-ªgTokí"

	)

1625 
	#NID_id_ªgCål_ªgTokí
 315

	)

1626 
	#OBJ_id_ªgCål_ªgTokí
 
OBJ_id_ªgCål
,1L

	)

1628 
	#SN_id_ªgCål_authítiˇt‹
 "id-ªgCål-authítiˇt‹"

	)

1629 
	#NID_id_ªgCål_authítiˇt‹
 316

	)

1630 
	#OBJ_id_ªgCål_authítiˇt‹
 
OBJ_id_ªgCål
,2L

	)

1632 
	#SN_id_ªgCål_pkiPubliˇti⁄Info
 "id-ªgCål-pkiPubliˇti⁄Info"

	)

1633 
	#NID_id_ªgCål_pkiPubliˇti⁄Info
 317

	)

1634 
	#OBJ_id_ªgCål_pkiPubliˇti⁄Info
 
OBJ_id_ªgCål
,3L

	)

1636 
	#SN_id_ªgCål_pkiArchiveO±i⁄s
 "id-ªgCål-pkiArchiveO±i⁄s"

	)

1637 
	#NID_id_ªgCål_pkiArchiveO±i⁄s
 318

	)

1638 
	#OBJ_id_ªgCål_pkiArchiveO±i⁄s
 
OBJ_id_ªgCål
,4L

	)

1640 
	#SN_id_ªgCål_ﬁdCîtID
 "id-ªgCål-ﬁdCîtID"

	)

1641 
	#NID_id_ªgCål_ﬁdCîtID
 319

	)

1642 
	#OBJ_id_ªgCål_ﬁdCîtID
 
OBJ_id_ªgCål
,5L

	)

1644 
	#SN_id_ªgCål_¥ŸocﬁEn¸Key
 "id-ªgCål-¥ŸocﬁEn¸Key"

	)

1645 
	#NID_id_ªgCål_¥ŸocﬁEn¸Key
 320

	)

1646 
	#OBJ_id_ªgCål_¥ŸocﬁEn¸Key
 
OBJ_id_ªgCål
,6L

	)

1648 
	#SN_id_ªgInfo_utf8Paús
 "id-ªgInfo-utf8Paús"

	)

1649 
	#NID_id_ªgInfo_utf8Paús
 321

	)

1650 
	#OBJ_id_ªgInfo_utf8Paús
 
OBJ_id_ªgInfo
,1L

	)

1652 
	#SN_id_ªgInfo_˚πReq
 "id-ªgInfo-˚πReq"

	)

1653 
	#NID_id_ªgInfo_˚πReq
 322

	)

1654 
	#OBJ_id_ªgInfo_˚πReq
 
OBJ_id_ªgInfo
,2L

	)

1656 
	#SN_id_Æg_des40
 "id-Æg-des40"

	)

1657 
	#NID_id_Æg_des40
 323

	)

1658 
	#OBJ_id_Æg_des40
 
OBJ_id_Æg
,1L

	)

1660 
	#SN_id_Æg_noSig«tuª
 "id-Æg-noSig«tuª"

	)

1661 
	#NID_id_Æg_noSig«tuª
 324

	)

1662 
	#OBJ_id_Æg_noSig«tuª
 
OBJ_id_Æg
,2L

	)

1664 
	#SN_id_Æg_dh_sig_hmac_sha1
 "id-Æg-dh-sig-hmac-sha1"

	)

1665 
	#NID_id_Æg_dh_sig_hmac_sha1
 325

	)

1666 
	#OBJ_id_Æg_dh_sig_hmac_sha1
 
OBJ_id_Æg
,3L

	)

1668 
	#SN_id_Æg_dh_p›
 "id-Æg-dh-p›"

	)

1669 
	#NID_id_Æg_dh_p›
 326

	)

1670 
	#OBJ_id_Æg_dh_p›
 
OBJ_id_Æg
,4L

	)

1672 
	#SN_id_cmc_°©usInfo
 "id-cmc-°©usInfo"

	)

1673 
	#NID_id_cmc_°©usInfo
 327

	)

1674 
	#OBJ_id_cmc_°©usInfo
 
OBJ_id_cmc
,1L

	)

1676 
	#SN_id_cmc_idítifiˇti⁄
 "id-cmc-idítifiˇti⁄"

	)

1677 
	#NID_id_cmc_idítifiˇti⁄
 328

	)

1678 
	#OBJ_id_cmc_idítifiˇti⁄
 
OBJ_id_cmc
,2L

	)

1680 
	#SN_id_cmc_idítôyProof
 "id-cmc-idítôyProof"

	)

1681 
	#NID_id_cmc_idítôyProof
 329

	)

1682 
	#OBJ_id_cmc_idítôyProof
 
OBJ_id_cmc
,3L

	)

1684 
	#SN_id_cmc_d©aRëu∫
 "id-cmc-d©aRëu∫"

	)

1685 
	#NID_id_cmc_d©aRëu∫
 330

	)

1686 
	#OBJ_id_cmc_d©aRëu∫
 
OBJ_id_cmc
,4L

	)

1688 
	#SN_id_cmc_å™ß˘i⁄Id
 "id-cmc-å™ß˘i⁄Id"

	)

1689 
	#NID_id_cmc_å™ß˘i⁄Id
 331

	)

1690 
	#OBJ_id_cmc_å™ß˘i⁄Id
 
OBJ_id_cmc
,5L

	)

1692 
	#SN_id_cmc_£ndîN⁄˚
 "id-cmc-£ndîN⁄˚"

	)

1693 
	#NID_id_cmc_£ndîN⁄˚
 332

	)

1694 
	#OBJ_id_cmc_£ndîN⁄˚
 
OBJ_id_cmc
,6L

	)

1696 
	#SN_id_cmc_ªcùõ¡N⁄˚
 "id-cmc-ªcùõ¡N⁄˚"

	)

1697 
	#NID_id_cmc_ªcùõ¡N⁄˚
 333

	)

1698 
	#OBJ_id_cmc_ªcùõ¡N⁄˚
 
OBJ_id_cmc
,7L

	)

1700 
	#SN_id_cmc_addExãnsi⁄s
 "id-cmc-addExãnsi⁄s"

	)

1701 
	#NID_id_cmc_addExãnsi⁄s
 334

	)

1702 
	#OBJ_id_cmc_addExãnsi⁄s
 
OBJ_id_cmc
,8L

	)

1704 
	#SN_id_cmc_í¸y±edPOP
 "id-cmc-í¸y±edPOP"

	)

1705 
	#NID_id_cmc_í¸y±edPOP
 335

	)

1706 
	#OBJ_id_cmc_í¸y±edPOP
 
OBJ_id_cmc
,9L

	)

1708 
	#SN_id_cmc_de¸y±edPOP
 "id-cmc-de¸y±edPOP"

	)

1709 
	#NID_id_cmc_de¸y±edPOP
 336

	)

1710 
	#OBJ_id_cmc_de¸y±edPOP
 
OBJ_id_cmc
,10L

	)

1712 
	#SN_id_cmc_ÃaPOPWô√ss
 "id-cmc-ÃaPOPWô√ss"

	)

1713 
	#NID_id_cmc_ÃaPOPWô√ss
 337

	)

1714 
	#OBJ_id_cmc_ÃaPOPWô√ss
 
OBJ_id_cmc
,11L

	)

1716 
	#SN_id_cmc_gëCît
 "id-cmc-gëCît"

	)

1717 
	#NID_id_cmc_gëCît
 338

	)

1718 
	#OBJ_id_cmc_gëCît
 
OBJ_id_cmc
,15L

	)

1720 
	#SN_id_cmc_gëCRL
 "id-cmc-gëCRL"

	)

1721 
	#NID_id_cmc_gëCRL
 339

	)

1722 
	#OBJ_id_cmc_gëCRL
 
OBJ_id_cmc
,16L

	)

1724 
	#SN_id_cmc_ªvokeReque°
 "id-cmc-ªvokeReque°"

	)

1725 
	#NID_id_cmc_ªvokeReque°
 340

	)

1726 
	#OBJ_id_cmc_ªvokeReque°
 
OBJ_id_cmc
,17L

	)

1728 
	#SN_id_cmc_ªgInfo
 "id-cmc-ªgInfo"

	)

1729 
	#NID_id_cmc_ªgInfo
 341

	)

1730 
	#OBJ_id_cmc_ªgInfo
 
OBJ_id_cmc
,18L

	)

1732 
	#SN_id_cmc_ª•⁄£Info
 "id-cmc-ª•⁄£Info"

	)

1733 
	#NID_id_cmc_ª•⁄£Info
 342

	)

1734 
	#OBJ_id_cmc_ª•⁄£Info
 
OBJ_id_cmc
,19L

	)

1736 
	#SN_id_cmc_quîyPídög
 "id-cmc-quîyPídög"

	)

1737 
	#NID_id_cmc_quîyPídög
 343

	)

1738 
	#OBJ_id_cmc_quîyPídög
 
OBJ_id_cmc
,21L

	)

1740 
	#SN_id_cmc_p›LökR™dom
 "id-cmc-p›LökR™dom"

	)

1741 
	#NID_id_cmc_p›LökR™dom
 344

	)

1742 
	#OBJ_id_cmc_p›LökR™dom
 
OBJ_id_cmc
,22L

	)

1744 
	#SN_id_cmc_p›LökWô√ss
 "id-cmc-p›LökWô√ss"

	)

1745 
	#NID_id_cmc_p›LökWô√ss
 345

	)

1746 
	#OBJ_id_cmc_p›LökWô√ss
 
OBJ_id_cmc
,23L

	)

1748 
	#SN_id_cmc_c⁄fúmCîtAc˚±™˚
 "id-cmc-c⁄fúmCîtAc˚±™˚"

	)

1749 
	#NID_id_cmc_c⁄fúmCîtAc˚±™˚
 346

	)

1750 
	#OBJ_id_cmc_c⁄fúmCîtAc˚±™˚
 
OBJ_id_cmc
,24L

	)

1752 
	#SN_id_⁄_≥rs⁄ÆD©a
 "id-⁄-≥rs⁄ÆD©a"

	)

1753 
	#NID_id_⁄_≥rs⁄ÆD©a
 347

	)

1754 
	#OBJ_id_⁄_≥rs⁄ÆD©a
 
OBJ_id_⁄
,1L

	)

1756 
	#SN_id_⁄_≥rm™ítIdítifõr
 "id-⁄-≥rm™ítIdítifõr"

	)

1757 
	#LN_id_⁄_≥rm™ítIdítifõr
 "Pîm™íàIdítifõr"

	)

1758 
	#NID_id_⁄_≥rm™ítIdítifõr
 858

	)

1759 
	#OBJ_id_⁄_≥rm™ítIdítifõr
 
OBJ_id_⁄
,3L

	)

1761 
	#SN_id_pda_d©eOfBúth
 "id-pda-d©eOfBúth"

	)

1762 
	#NID_id_pda_d©eOfBúth
 348

	)

1763 
	#OBJ_id_pda_d©eOfBúth
 
OBJ_id_pda
,1L

	)

1765 
	#SN_id_pda_∂a˚OfBúth
 "id-pda-∂a˚OfBúth"

	)

1766 
	#NID_id_pda_∂a˚OfBúth
 349

	)

1767 
	#OBJ_id_pda_∂a˚OfBúth
 
OBJ_id_pda
,2L

	)

1769 
	#SN_id_pda_gídî
 "id-pda-gídî"

	)

1770 
	#NID_id_pda_gídî
 351

	)

1771 
	#OBJ_id_pda_gídî
 
OBJ_id_pda
,3L

	)

1773 
	#SN_id_pda_cou¡ryOfCôizíshù
 "id-pda-cou¡ryOfCôizíshù"

	)

1774 
	#NID_id_pda_cou¡ryOfCôizíshù
 352

	)

1775 
	#OBJ_id_pda_cou¡ryOfCôizíshù
 
OBJ_id_pda
,4L

	)

1777 
	#SN_id_pda_cou¡ryOfResidí˚
 "id-pda-cou¡ryOfResidí˚"

	)

1778 
	#NID_id_pda_cou¡ryOfResidí˚
 353

	)

1779 
	#OBJ_id_pda_cou¡ryOfResidí˚
 
OBJ_id_pda
,5L

	)

1781 
	#SN_id_aˇ_authítiˇti⁄Info
 "id-aˇ-authítiˇti⁄Info"

	)

1782 
	#NID_id_aˇ_authítiˇti⁄Info
 354

	)

1783 
	#OBJ_id_aˇ_authítiˇti⁄Info
 
OBJ_id_aˇ
,1L

	)

1785 
	#SN_id_aˇ_ac˚ssIdítôy
 "id-aˇ-ac˚ssIdítôy"

	)

1786 
	#NID_id_aˇ_ac˚ssIdítôy
 355

	)

1787 
	#OBJ_id_aˇ_ac˚ssIdítôy
 
OBJ_id_aˇ
,2L

	)

1789 
	#SN_id_aˇ_ch¨gögIdítôy
 "id-aˇ-ch¨gögIdítôy"

	)

1790 
	#NID_id_aˇ_ch¨gögIdítôy
 356

	)

1791 
	#OBJ_id_aˇ_ch¨gögIdítôy
 
OBJ_id_aˇ
,3L

	)

1793 
	#SN_id_aˇ_group
 "id-aˇ-group"

	)

1794 
	#NID_id_aˇ_group
 357

	)

1795 
	#OBJ_id_aˇ_group
 
OBJ_id_aˇ
,4L

	)

1797 
	#SN_id_aˇ_rﬁe
 "id-aˇ-rﬁe"

	)

1798 
	#NID_id_aˇ_rﬁe
 358

	)

1799 
	#OBJ_id_aˇ_rﬁe
 
OBJ_id_aˇ
,5L

	)

1801 
	#SN_id_aˇ_ícAârs
 "id-aˇ-ícAârs"

	)

1802 
	#NID_id_aˇ_ícAârs
 399

	)

1803 
	#OBJ_id_aˇ_ícAârs
 
OBJ_id_aˇ
,6L

	)

1805 
	#SN_id_qcs_pkixQCSy¡ax_v1
 "id-qcs-pkixQCSy¡ax-v1"

	)

1806 
	#NID_id_qcs_pkixQCSy¡ax_v1
 359

	)

1807 
	#OBJ_id_qcs_pkixQCSy¡ax_v1
 
OBJ_id_qcs
,1L

	)

1809 
	#SN_id_c˘_¸s
 "id-c˘-¸s"

	)

1810 
	#NID_id_c˘_¸s
 360

	)

1811 
	#OBJ_id_c˘_¸s
 
OBJ_id_c˘
,1L

	)

1813 
	#SN_id_c˘_PKID©a
 "id-c˘-PKID©a"

	)

1814 
	#NID_id_c˘_PKID©a
 361

	)

1815 
	#OBJ_id_c˘_PKID©a
 
OBJ_id_c˘
,2L

	)

1817 
	#SN_id_c˘_PKIRe•⁄£
 "id-c˘-PKIRe•⁄£"

	)

1818 
	#NID_id_c˘_PKIRe•⁄£
 362

	)

1819 
	#OBJ_id_c˘_PKIRe•⁄£
 
OBJ_id_c˘
,3L

	)

1821 
	#SN_id_µl_™yL™guage
 "id-µl-™yL™guage"

	)

1822 
	#LN_id_µl_™yL™guage
 "AnyÜ™guage"

	)

1823 
	#NID_id_µl_™yL™guage
 664

	)

1824 
	#OBJ_id_µl_™yL™guage
 
OBJ_id_µl
,0L

	)

1826 
	#SN_id_µl_öhîôAŒ
 "id-µl-öhîôAŒ"

	)

1827 
	#LN_id_µl_öhîôAŒ
 "InhîôáŒ"

	)

1828 
	#NID_id_µl_öhîôAŒ
 665

	)

1829 
	#OBJ_id_µl_öhîôAŒ
 
OBJ_id_µl
,1L

	)

1831 
	#SN_Indïídít
 "id-µl-ödïídít"

	)

1832 
	#LN_Indïídít
 "Indïídít"

	)

1833 
	#NID_Indïídít
 667

	)

1834 
	#OBJ_Indïídít
 
OBJ_id_µl
,2L

	)

1836 
	#SN_ad_OCSP
 "OCSP"

	)

1837 
	#LN_ad_OCSP
 "OCSP"

	)

1838 
	#NID_ad_OCSP
 178

	)

1839 
	#OBJ_ad_OCSP
 
OBJ_id_ad
,1L

	)

1841 
	#SN_ad_ˇ_issuîs
 "ˇIssuîs"

	)

1842 
	#LN_ad_ˇ_issuîs
 "CA Issuîs"

	)

1843 
	#NID_ad_ˇ_issuîs
 179

	)

1844 
	#OBJ_ad_ˇ_issuîs
 
OBJ_id_ad
,2L

	)

1846 
	#SN_ad_timeSèmpög
 "ad_time°ampög"

	)

1847 
	#LN_ad_timeSèmpög
 "AD TimêSèmpög"

	)

1848 
	#NID_ad_timeSèmpög
 363

	)

1849 
	#OBJ_ad_timeSèmpög
 
OBJ_id_ad
,3L

	)

1851 
	#SN_ad_dvcs
 "AD_DVCS"

	)

1852 
	#LN_ad_dvcs
 "ad dvcs"

	)

1853 
	#NID_ad_dvcs
 364

	)

1854 
	#OBJ_ad_dvcs
 
OBJ_id_ad
,4L

	)

1856 
	#SN_ˇRïosô‹y
 "ˇRïosô‹y"

	)

1857 
	#LN_ˇRïosô‹y
 "CA Rïosô‹y"

	)

1858 
	#NID_ˇRïosô‹y
 785

	)

1859 
	#OBJ_ˇRïosô‹y
 
OBJ_id_ad
,5L

	)

1861 
	#OBJ_id_pkix_OCSP
 
OBJ_ad_OCSP


	)

1863 
	#SN_id_pkix_OCSP_basic
 "basicOCSPRe•⁄£"

	)

1864 
	#LN_id_pkix_OCSP_basic
 "Basi¯OCSP Re•⁄£"

	)

1865 
	#NID_id_pkix_OCSP_basic
 365

	)

1866 
	#OBJ_id_pkix_OCSP_basic
 
OBJ_id_pkix_OCSP
,1L

	)

1868 
	#SN_id_pkix_OCSP_N⁄˚
 "N⁄˚"

	)

1869 
	#LN_id_pkix_OCSP_N⁄˚
 "OCSP N⁄˚"

	)

1870 
	#NID_id_pkix_OCSP_N⁄˚
 366

	)

1871 
	#OBJ_id_pkix_OCSP_N⁄˚
 
OBJ_id_pkix_OCSP
,2L

	)

1873 
	#SN_id_pkix_OCSP_CæID
 "CæID"

	)

1874 
	#LN_id_pkix_OCSP_CæID
 "OCSP CRL ID"

	)

1875 
	#NID_id_pkix_OCSP_CæID
 367

	)

1876 
	#OBJ_id_pkix_OCSP_CæID
 
OBJ_id_pkix_OCSP
,3L

	)

1878 
	#SN_id_pkix_OCSP_ac˚±abÀRe•⁄£s
 "ac˚±abÀRe•⁄£s"

	)

1879 
	#LN_id_pkix_OCSP_ac˚±abÀRe•⁄£s
 "Ac˚±abÀ OCSP Re•⁄£s"

	)

1880 
	#NID_id_pkix_OCSP_ac˚±abÀRe•⁄£s
 368

	)

1881 
	#OBJ_id_pkix_OCSP_ac˚±abÀRe•⁄£s
 
OBJ_id_pkix_OCSP
,4L

	)

1883 
	#SN_id_pkix_OCSP_noCheck
 "noCheck"

	)

1884 
	#LN_id_pkix_OCSP_noCheck
 "OCSP NÿCheck"

	)

1885 
	#NID_id_pkix_OCSP_noCheck
 369

	)

1886 
	#OBJ_id_pkix_OCSP_noCheck
 
OBJ_id_pkix_OCSP
,5L

	)

1888 
	#SN_id_pkix_OCSP_¨chiveCutoff
 "¨chiveCutoff"

	)

1889 
	#LN_id_pkix_OCSP_¨chiveCutoff
 "OCSP ArchivêCutoff"

	)

1890 
	#NID_id_pkix_OCSP_¨chiveCutoff
 370

	)

1891 
	#OBJ_id_pkix_OCSP_¨chiveCutoff
 
OBJ_id_pkix_OCSP
,6L

	)

1893 
	#SN_id_pkix_OCSP_£rvi˚Loˇt‹
 "£rvi˚Loˇt‹"

	)

1894 
	#LN_id_pkix_OCSP_£rvi˚Loˇt‹
 "OCSP Sîvi˚ Loˇt‹"

	)

1895 
	#NID_id_pkix_OCSP_£rvi˚Loˇt‹
 371

	)

1896 
	#OBJ_id_pkix_OCSP_£rvi˚Loˇt‹
 
OBJ_id_pkix_OCSP
,7L

	)

1898 
	#SN_id_pkix_OCSP_exãndedSètus
 "exãndedSètus"

	)

1899 
	#LN_id_pkix_OCSP_exãndedSètus
 "Exãnded OCSP Sètus"

	)

1900 
	#NID_id_pkix_OCSP_exãndedSètus
 372

	)

1901 
	#OBJ_id_pkix_OCSP_exãndedSètus
 
OBJ_id_pkix_OCSP
,8L

	)

1903 
	#SN_id_pkix_OCSP_vÆid
 "vÆid"

	)

1904 
	#NID_id_pkix_OCSP_vÆid
 373

	)

1905 
	#OBJ_id_pkix_OCSP_vÆid
 
OBJ_id_pkix_OCSP
,9L

	)

1907 
	#SN_id_pkix_OCSP_∑th
 "∑th"

	)

1908 
	#NID_id_pkix_OCSP_∑th
 374

	)

1909 
	#OBJ_id_pkix_OCSP_∑th
 
OBJ_id_pkix_OCSP
,10L

	)

1911 
	#SN_id_pkix_OCSP_åu°RoŸ
 "åu°RoŸ"

	)

1912 
	#LN_id_pkix_OCSP_åu°RoŸ
 "Tru° RoŸ"

	)

1913 
	#NID_id_pkix_OCSP_åu°RoŸ
 375

	)

1914 
	#OBJ_id_pkix_OCSP_åu°RoŸ
 
OBJ_id_pkix_OCSP
,11L

	)

1916 
	#SN_Æg‹ôhm
 "Æg‹ôhm"

	)

1917 
	#LN_Æg‹ôhm
 "Æg‹ôhm"

	)

1918 
	#NID_Æg‹ôhm
 376

	)

1919 
	#OBJ_Æg‹ôhm
 1L,3L,14L,3L,2L

	)

1921 
	#SN_md5WôhRSA
 "RSA-NP-MD5"

	)

1922 
	#LN_md5WôhRSA
 "md5WôhRSA"

	)

1923 
	#NID_md5WôhRSA
 104

	)

1924 
	#OBJ_md5WôhRSA
 
OBJ_Æg‹ôhm
,3L

	)

1926 
	#SN_des_ecb
 "DES-ECB"

	)

1927 
	#LN_des_ecb
 "des-ecb"

	)

1928 
	#NID_des_ecb
 29

	)

1929 
	#OBJ_des_ecb
 
OBJ_Æg‹ôhm
,6L

	)

1931 
	#SN_des_cbc
 "DES-CBC"

	)

1932 
	#LN_des_cbc
 "des-cbc"

	)

1933 
	#NID_des_cbc
 31

	)

1934 
	#OBJ_des_cbc
 
OBJ_Æg‹ôhm
,7L

	)

1936 
	#SN_des_ofb64
 "DES-OFB"

	)

1937 
	#LN_des_ofb64
 "des-ofb"

	)

1938 
	#NID_des_ofb64
 45

	)

1939 
	#OBJ_des_ofb64
 
OBJ_Æg‹ôhm
,8L

	)

1941 
	#SN_des_cfb64
 "DES-CFB"

	)

1942 
	#LN_des_cfb64
 "des-cfb"

	)

1943 
	#NID_des_cfb64
 30

	)

1944 
	#OBJ_des_cfb64
 
OBJ_Æg‹ôhm
,9L

	)

1946 
	#SN_rßSig«tuª
 "rßSig«tuª"

	)

1947 
	#NID_rßSig«tuª
 377

	)

1948 
	#OBJ_rßSig«tuª
 
OBJ_Æg‹ôhm
,11L

	)

1950 
	#SN_dß_2
 "DSA-ﬁd"

	)

1951 
	#LN_dß_2
 "dßEn¸y±i⁄-ﬁd"

	)

1952 
	#NID_dß_2
 67

	)

1953 
	#OBJ_dß_2
 
OBJ_Æg‹ôhm
,12L

	)

1955 
	#SN_dßWôhSHA
 "DSA-SHA"

	)

1956 
	#LN_dßWôhSHA
 "dßWôhSHA"

	)

1957 
	#NID_dßWôhSHA
 66

	)

1958 
	#OBJ_dßWôhSHA
 
OBJ_Æg‹ôhm
,13L

	)

1960 
	#SN_shaWôhRSAEn¸y±i⁄
 "RSA-SHA"

	)

1961 
	#LN_shaWôhRSAEn¸y±i⁄
 "shaWôhRSAEn¸y±i⁄"

	)

1962 
	#NID_shaWôhRSAEn¸y±i⁄
 42

	)

1963 
	#OBJ_shaWôhRSAEn¸y±i⁄
 
OBJ_Æg‹ôhm
,15L

	)

1965 
	#SN_des_ede_ecb
 "DES-EDE"

	)

1966 
	#LN_des_ede_ecb
 "des-ede"

	)

1967 
	#NID_des_ede_ecb
 32

	)

1968 
	#OBJ_des_ede_ecb
 
OBJ_Æg‹ôhm
,17L

	)

1970 
	#SN_des_ede3_ecb
 "DES-EDE3"

	)

1971 
	#LN_des_ede3_ecb
 "des-ede3"

	)

1972 
	#NID_des_ede3_ecb
 33

	)

1974 
	#SN_des_ede_cbc
 "DES-EDE-CBC"

	)

1975 
	#LN_des_ede_cbc
 "des-ede-cbc"

	)

1976 
	#NID_des_ede_cbc
 43

	)

1978 
	#SN_des_ede_cfb64
 "DES-EDE-CFB"

	)

1979 
	#LN_des_ede_cfb64
 "des-ede-cfb"

	)

1980 
	#NID_des_ede_cfb64
 60

	)

1982 
	#SN_des_ede3_cfb64
 "DES-EDE3-CFB"

	)

1983 
	#LN_des_ede3_cfb64
 "des-ede3-cfb"

	)

1984 
	#NID_des_ede3_cfb64
 61

	)

1986 
	#SN_des_ede_ofb64
 "DES-EDE-OFB"

	)

1987 
	#LN_des_ede_ofb64
 "des-ede-ofb"

	)

1988 
	#NID_des_ede_ofb64
 62

	)

1990 
	#SN_des_ede3_ofb64
 "DES-EDE3-OFB"

	)

1991 
	#LN_des_ede3_ofb64
 "des-ede3-ofb"

	)

1992 
	#NID_des_ede3_ofb64
 63

	)

1994 
	#SN_desx_cbc
 "DESX-CBC"

	)

1995 
	#LN_desx_cbc
 "desx-cbc"

	)

1996 
	#NID_desx_cbc
 80

	)

1998 
	#SN_sha
 "SHA"

	)

1999 
	#LN_sha
 "sha"

	)

2000 
	#NID_sha
 41

	)

2001 
	#OBJ_sha
 
OBJ_Æg‹ôhm
,18L

	)

2003 
	#SN_sha1
 "SHA1"

	)

2004 
	#LN_sha1
 "sha1"

	)

2005 
	#NID_sha1
 64

	)

2006 
	#OBJ_sha1
 
OBJ_Æg‹ôhm
,26L

	)

2008 
	#SN_dßWôhSHA1_2
 "DSA-SHA1-ﬁd"

	)

2009 
	#LN_dßWôhSHA1_2
 "dßWôhSHA1-ﬁd"

	)

2010 
	#NID_dßWôhSHA1_2
 70

	)

2011 
	#OBJ_dßWôhSHA1_2
 
OBJ_Æg‹ôhm
,27L

	)

2013 
	#SN_sha1WôhRSA
 "RSA-SHA1-2"

	)

2014 
	#LN_sha1WôhRSA
 "sha1WôhRSA"

	)

2015 
	#NID_sha1WôhRSA
 115

	)

2016 
	#OBJ_sha1WôhRSA
 
OBJ_Æg‹ôhm
,29L

	)

2018 
	#SN_rùemd160
 "RIPEMD160"

	)

2019 
	#LN_rùemd160
 "rùemd160"

	)

2020 
	#NID_rùemd160
 117

	)

2021 
	#OBJ_rùemd160
 1L,3L,36L,3L,2L,1L

	)

2023 
	#SN_rùemd160WôhRSA
 "RSA-RIPEMD160"

	)

2024 
	#LN_rùemd160WôhRSA
 "rùemd160WôhRSA"

	)

2025 
	#NID_rùemd160WôhRSA
 119

	)

2026 
	#OBJ_rùemd160WôhRSA
 1L,3L,36L,3L,3L,1L,2L

	)

2028 
	#SN_sx√t
 "SXNëID"

	)

2029 
	#LN_sx√t
 "Så⁄g Exå™ë ID"

	)

2030 
	#NID_sx√t
 143

	)

2031 
	#OBJ_sx√t
 1L,3L,101L,1L,4L,1L

	)

2033 
	#SN_X500
 "X500"

	)

2034 
	#LN_X500
 "dúe˘‹y sîvi˚†(X.500)"

	)

2035 
	#NID_X500
 11

	)

2036 
	#OBJ_X500
 2L,5L

	)

2038 
	#SN_X509
 "X509"

	)

2039 
	#NID_X509
 12

	)

2040 
	#OBJ_X509
 
OBJ_X500
,4L

	)

2042 
	#SN_comm⁄Name
 "CN"

	)

2043 
	#LN_comm⁄Name
 "comm⁄Name"

	)

2044 
	#NID_comm⁄Name
 13

	)

2045 
	#OBJ_comm⁄Name
 
OBJ_X509
,3L

	)

2047 
	#SN_su∫ame
 "SN"

	)

2048 
	#LN_su∫ame
 "su∫ame"

	)

2049 
	#NID_su∫ame
 100

	)

2050 
	#OBJ_su∫ame
 
OBJ_X509
,4L

	)

2052 
	#LN_£rülNumbî
 "£rülNumbî"

	)

2053 
	#NID_£rülNumbî
 105

	)

2054 
	#OBJ_£rülNumbî
 
OBJ_X509
,5L

	)

2056 
	#SN_cou¡ryName
 "C"

	)

2057 
	#LN_cou¡ryName
 "cou¡ryName"

	)

2058 
	#NID_cou¡ryName
 14

	)

2059 
	#OBJ_cou¡ryName
 
OBJ_X509
,6L

	)

2061 
	#SN_loˇlôyName
 "L"

	)

2062 
	#LN_loˇlôyName
 "loˇlôyName"

	)

2063 
	#NID_loˇlôyName
 15

	)

2064 
	#OBJ_loˇlôyName
 
OBJ_X509
,7L

	)

2066 
	#SN_°©eOrProvö˚Name
 "ST"

	)

2067 
	#LN_°©eOrProvö˚Name
 "°©eOrProvö˚Name"

	)

2068 
	#NID_°©eOrProvö˚Name
 16

	)

2069 
	#OBJ_°©eOrProvö˚Name
 
OBJ_X509
,8L

	)

2071 
	#SN_°ªëAddªss
 "°ªë"

	)

2072 
	#LN_°ªëAddªss
 "°ªëAddªss"

	)

2073 
	#NID_°ªëAddªss
 660

	)

2074 
	#OBJ_°ªëAddªss
 
OBJ_X509
,9L

	)

2076 
	#SN_‹g™iz©i⁄Name
 "O"

	)

2077 
	#LN_‹g™iz©i⁄Name
 "‹g™iz©i⁄Name"

	)

2078 
	#NID_‹g™iz©i⁄Name
 17

	)

2079 
	#OBJ_‹g™iz©i⁄Name
 
OBJ_X509
,10L

	)

2081 
	#SN_‹g™iz©i⁄ÆUnôName
 "OU"

	)

2082 
	#LN_‹g™iz©i⁄ÆUnôName
 "‹g™iz©i⁄ÆUnôName"

	)

2083 
	#NID_‹g™iz©i⁄ÆUnôName
 18

	)

2084 
	#OBJ_‹g™iz©i⁄ÆUnôName
 
OBJ_X509
,11L

	)

2086 
	#SN_tôÀ
 "tôÀ"

	)

2087 
	#LN_tôÀ
 "tôÀ"

	)

2088 
	#NID_tôÀ
 106

	)

2089 
	#OBJ_tôÀ
 
OBJ_X509
,12L

	)

2091 
	#LN_des¸ùti⁄
 "des¸ùti⁄"

	)

2092 
	#NID_des¸ùti⁄
 107

	)

2093 
	#OBJ_des¸ùti⁄
 
OBJ_X509
,13L

	)

2095 
	#LN_£¨chGuide
 "£¨chGuide"

	)

2096 
	#NID_£¨chGuide
 859

	)

2097 
	#OBJ_£¨chGuide
 
OBJ_X509
,14L

	)

2099 
	#LN_busöessC©eg‹y
 "busöessC©eg‹y"

	)

2100 
	#NID_busöessC©eg‹y
 860

	)

2101 
	#OBJ_busöessC©eg‹y
 
OBJ_X509
,15L

	)

2103 
	#LN_po°ÆAddªss
 "po°ÆAddªss"

	)

2104 
	#NID_po°ÆAddªss
 861

	)

2105 
	#OBJ_po°ÆAddªss
 
OBJ_X509
,16L

	)

2107 
	#LN_po°ÆCode
 "po°ÆCode"

	)

2108 
	#NID_po°ÆCode
 661

	)

2109 
	#OBJ_po°ÆCode
 
OBJ_X509
,17L

	)

2111 
	#LN_po°Offi˚Box
 "po°Offi˚Box"

	)

2112 
	#NID_po°Offi˚Box
 862

	)

2113 
	#OBJ_po°Offi˚Box
 
OBJ_X509
,18L

	)

2115 
	#LN_physiˇlDñivîyOffi˚Name
 "physiˇlDñivîyOffi˚Name"

	)

2116 
	#NID_physiˇlDñivîyOffi˚Name
 863

	)

2117 
	#OBJ_physiˇlDñivîyOffi˚Name
 
OBJ_X509
,19L

	)

2119 
	#LN_ãÀph⁄eNumbî
 "ãÀph⁄eNumbî"

	)

2120 
	#NID_ãÀph⁄eNumbî
 864

	)

2121 
	#OBJ_ãÀph⁄eNumbî
 
OBJ_X509
,20L

	)

2123 
	#LN_ãÀxNumbî
 "ãÀxNumbî"

	)

2124 
	#NID_ãÀxNumbî
 865

	)

2125 
	#OBJ_ãÀxNumbî
 
OBJ_X509
,21L

	)

2127 
	#LN_ãÀãxTîmöÆIdítifõr
 "ãÀãxTîmöÆIdítifõr"

	)

2128 
	#NID_ãÀãxTîmöÆIdítifõr
 866

	)

2129 
	#OBJ_ãÀãxTîmöÆIdítifõr
 
OBJ_X509
,22L

	)

2131 
	#LN_ÁcsimûeTñïh⁄eNumbî
 "ÁcsimûeTñïh⁄eNumbî"

	)

2132 
	#NID_ÁcsimûeTñïh⁄eNumbî
 867

	)

2133 
	#OBJ_ÁcsimûeTñïh⁄eNumbî
 
OBJ_X509
,23L

	)

2135 
	#LN_x121Addªss
 "x121Addªss"

	)

2136 
	#NID_x121Addªss
 868

	)

2137 
	#OBJ_x121Addªss
 
OBJ_X509
,24L

	)

2139 
	#LN_öã∫©i⁄ÆiSDNNumbî
 "öã∫©i⁄ÆiSDNNumbî"

	)

2140 
	#NID_öã∫©i⁄ÆiSDNNumbî
 869

	)

2141 
	#OBJ_öã∫©i⁄ÆiSDNNumbî
 
OBJ_X509
,25L

	)

2143 
	#LN_ªgi°îedAddªss
 "ªgi°îedAddªss"

	)

2144 
	#NID_ªgi°îedAddªss
 870

	)

2145 
	#OBJ_ªgi°îedAddªss
 
OBJ_X509
,26L

	)

2147 
	#LN_de°ö©i⁄Indiˇt‹
 "de°ö©i⁄Indiˇt‹"

	)

2148 
	#NID_de°ö©i⁄Indiˇt‹
 871

	)

2149 
	#OBJ_de°ö©i⁄Indiˇt‹
 
OBJ_X509
,27L

	)

2151 
	#LN_¥e„ºedDñivîyMëhod
 "¥e„ºedDñivîyMëhod"

	)

2152 
	#NID_¥e„ºedDñivîyMëhod
 872

	)

2153 
	#OBJ_¥e„ºedDñivîyMëhod
 
OBJ_X509
,28L

	)

2155 
	#LN_¥e£¡©i⁄Addªss
 "¥e£¡©i⁄Addªss"

	)

2156 
	#NID_¥e£¡©i⁄Addªss
 873

	)

2157 
	#OBJ_¥e£¡©i⁄Addªss
 
OBJ_X509
,29L

	)

2159 
	#LN_suµ‹ãdAµliˇti⁄C⁄ãxt
 "suµ‹ãdAµliˇti⁄C⁄ãxt"

	)

2160 
	#NID_suµ‹ãdAµliˇti⁄C⁄ãxt
 874

	)

2161 
	#OBJ_suµ‹ãdAµliˇti⁄C⁄ãxt
 
OBJ_X509
,30L

	)

2163 
	#SN_membî
 "membî"

	)

2164 
	#NID_membî
 875

	)

2165 
	#OBJ_membî
 
OBJ_X509
,31L

	)

2167 
	#SN_ow√r
 "ow√r"

	)

2168 
	#NID_ow√r
 876

	)

2169 
	#OBJ_ow√r
 
OBJ_X509
,32L

	)

2171 
	#LN_rﬁeOccu∑¡
 "rﬁeOccu∑¡"

	)

2172 
	#NID_rﬁeOccu∑¡
 877

	)

2173 
	#OBJ_rﬁeOccu∑¡
 
OBJ_X509
,33L

	)

2175 
	#SN_£eAlso
 "£eAlso"

	)

2176 
	#NID_£eAlso
 878

	)

2177 
	#OBJ_£eAlso
 
OBJ_X509
,34L

	)

2179 
	#LN_u£rPassw‹d
 "u£rPassw‹d"

	)

2180 
	#NID_u£rPassw‹d
 879

	)

2181 
	#OBJ_u£rPassw‹d
 
OBJ_X509
,35L

	)

2183 
	#LN_u£rCîtifiˇã
 "u£rCîtifiˇã"

	)

2184 
	#NID_u£rCîtifiˇã
 880

	)

2185 
	#OBJ_u£rCîtifiˇã
 
OBJ_X509
,36L

	)

2187 
	#LN_cACîtifiˇã
 "cACîtifiˇã"

	)

2188 
	#NID_cACîtifiˇã
 881

	)

2189 
	#OBJ_cACîtifiˇã
 
OBJ_X509
,37L

	)

2191 
	#LN_auth‹ôyRevoˇti⁄Li°
 "auth‹ôyRevoˇti⁄Li°"

	)

2192 
	#NID_auth‹ôyRevoˇti⁄Li°
 882

	)

2193 
	#OBJ_auth‹ôyRevoˇti⁄Li°
 
OBJ_X509
,38L

	)

2195 
	#LN_˚πifiˇãRevoˇti⁄Li°
 "˚πifiˇãRevoˇti⁄Li°"

	)

2196 
	#NID_˚πifiˇãRevoˇti⁄Li°
 883

	)

2197 
	#OBJ_˚πifiˇãRevoˇti⁄Li°
 
OBJ_X509
,39L

	)

2199 
	#LN_¸ossCîtifiˇãPaú
 "¸ossCîtifiˇãPaú"

	)

2200 
	#NID_¸ossCîtifiˇãPaú
 884

	)

2201 
	#OBJ_¸ossCîtifiˇãPaú
 
OBJ_X509
,40L

	)

2203 
	#SN_«me
 "«me"

	)

2204 
	#LN_«me
 "«me"

	)

2205 
	#NID_«me
 173

	)

2206 
	#OBJ_«me
 
OBJ_X509
,41L

	)

2208 
	#SN_givíName
 "GN"

	)

2209 
	#LN_givíName
 "givíName"

	)

2210 
	#NID_givíName
 99

	)

2211 
	#OBJ_givíName
 
OBJ_X509
,42L

	)

2213 
	#SN_öôüls
 "öôüls"

	)

2214 
	#LN_öôüls
 "öôüls"

	)

2215 
	#NID_öôüls
 101

	)

2216 
	#OBJ_öôüls
 
OBJ_X509
,43L

	)

2218 
	#LN_gíî©i⁄QuÆifõr
 "gíî©i⁄QuÆifõr"

	)

2219 
	#NID_gíî©i⁄QuÆifõr
 509

	)

2220 
	#OBJ_gíî©i⁄QuÆifõr
 
OBJ_X509
,44L

	)

2222 
	#LN_x500UniqueIdítifõr
 "x500UniqueIdítifõr"

	)

2223 
	#NID_x500UniqueIdítifõr
 503

	)

2224 
	#OBJ_x500UniqueIdítifõr
 
OBJ_X509
,45L

	)

2226 
	#SN_dnQuÆifõr
 "dnQuÆifõr"

	)

2227 
	#LN_dnQuÆifõr
 "dnQuÆifõr"

	)

2228 
	#NID_dnQuÆifõr
 174

	)

2229 
	#OBJ_dnQuÆifõr
 
OBJ_X509
,46L

	)

2231 
	#LN_íh™˚dSórchGuide
 "íh™˚dSórchGuide"

	)

2232 
	#NID_íh™˚dSórchGuide
 885

	)

2233 
	#OBJ_íh™˚dSórchGuide
 
OBJ_X509
,47L

	)

2235 
	#LN_¥ŸocﬁInf‹m©i⁄
 "¥ŸocﬁInf‹m©i⁄"

	)

2236 
	#NID_¥ŸocﬁInf‹m©i⁄
 886

	)

2237 
	#OBJ_¥ŸocﬁInf‹m©i⁄
 
OBJ_X509
,48L

	)

2239 
	#LN_di°öguishedName
 "di°öguishedName"

	)

2240 
	#NID_di°öguishedName
 887

	)

2241 
	#OBJ_di°öguishedName
 
OBJ_X509
,49L

	)

2243 
	#LN_uniqueMembî
 "uniqueMembî"

	)

2244 
	#NID_uniqueMembî
 888

	)

2245 
	#OBJ_uniqueMembî
 
OBJ_X509
,50L

	)

2247 
	#LN_hou£Idítifõr
 "hou£Idítifõr"

	)

2248 
	#NID_hou£Idítifõr
 889

	)

2249 
	#OBJ_hou£Idítifõr
 
OBJ_X509
,51L

	)

2251 
	#LN_suµ‹ãdAlg‹ôhms
 "suµ‹ãdAlg‹ôhms"

	)

2252 
	#NID_suµ‹ãdAlg‹ôhms
 890

	)

2253 
	#OBJ_suµ‹ãdAlg‹ôhms
 
OBJ_X509
,52L

	)

2255 
	#LN_dñèRevoˇti⁄Li°
 "dñèRevoˇti⁄Li°"

	)

2256 
	#NID_dñèRevoˇti⁄Li°
 891

	)

2257 
	#OBJ_dñèRevoˇti⁄Li°
 
OBJ_X509
,53L

	)

2259 
	#SN_dmdName
 "dmdName"

	)

2260 
	#NID_dmdName
 892

	)

2261 
	#OBJ_dmdName
 
OBJ_X509
,54L

	)

2263 
	#LN_p£ud⁄ym
 "p£ud⁄ym"

	)

2264 
	#NID_p£ud⁄ym
 510

	)

2265 
	#OBJ_p£ud⁄ym
 
OBJ_X509
,65L

	)

2267 
	#SN_rﬁe
 "rﬁe"

	)

2268 
	#LN_rﬁe
 "rﬁe"

	)

2269 
	#NID_rﬁe
 400

	)

2270 
	#OBJ_rﬁe
 
OBJ_X509
,72L

	)

2272 
	#SN_X500Æg‹ôhms
 "X500Æg‹ôhms"

	)

2273 
	#LN_X500Æg‹ôhms
 "dúe˘‹y sîvi˚†-álg‹ôhms"

	)

2274 
	#NID_X500Æg‹ôhms
 378

	)

2275 
	#OBJ_X500Æg‹ôhms
 
OBJ_X500
,8L

	)

2277 
	#SN_rß
 "RSA"

	)

2278 
	#LN_rß
 "rß"

	)

2279 
	#NID_rß
 19

	)

2280 
	#OBJ_rß
 
OBJ_X500Æg‹ôhms
,1L,1L

	)

2282 
	#SN_mdc2WôhRSA
 "RSA-MDC2"

	)

2283 
	#LN_mdc2WôhRSA
 "mdc2WôhRSA"

	)

2284 
	#NID_mdc2WôhRSA
 96

	)

2285 
	#OBJ_mdc2WôhRSA
 
OBJ_X500Æg‹ôhms
,3L,100L

	)

2287 
	#SN_mdc2
 "MDC2"

	)

2288 
	#LN_mdc2
 "mdc2"

	)

2289 
	#NID_mdc2
 95

	)

2290 
	#OBJ_mdc2
 
OBJ_X500Æg‹ôhms
,3L,101L

	)

2292 
	#SN_id_˚
 "id-˚"

	)

2293 
	#NID_id_˚
 81

	)

2294 
	#OBJ_id_˚
 
OBJ_X500
,29L

	)

2296 
	#SN_subje˘_dúe˘‹y_©åibuãs
 "subje˘Dúe˘‹yAâribuãs"

	)

2297 
	#LN_subje˘_dúe˘‹y_©åibuãs
 "X509v3 Subje˘ Dúe˘‹y Aâribuãs"

	)

2298 
	#NID_subje˘_dúe˘‹y_©åibuãs
 769

	)

2299 
	#OBJ_subje˘_dúe˘‹y_©åibuãs
 
OBJ_id_˚
,9L

	)

2301 
	#SN_subje˘_key_idítifõr
 "subje˘KeyIdítifõr"

	)

2302 
	#LN_subje˘_key_idítifõr
 "X509v3 Subje˘ Key Idítifõr"

	)

2303 
	#NID_subje˘_key_idítifõr
 82

	)

2304 
	#OBJ_subje˘_key_idítifõr
 
OBJ_id_˚
,14L

	)

2306 
	#SN_key_ußge
 "keyUßge"

	)

2307 
	#LN_key_ußge
 "X509v3 Key Ußge"

	)

2308 
	#NID_key_ußge
 83

	)

2309 
	#OBJ_key_ußge
 
OBJ_id_˚
,15L

	)

2311 
	#SN_¥iv©e_key_ußge_≥riod
 "¥iv©eKeyUßgePîiod"

	)

2312 
	#LN_¥iv©e_key_ußge_≥riod
 "X509v3 Priv©êKey UßgêPîiod"

	)

2313 
	#NID_¥iv©e_key_ußge_≥riod
 84

	)

2314 
	#OBJ_¥iv©e_key_ußge_≥riod
 
OBJ_id_˚
,16L

	)

2316 
	#SN_subje˘_Æt_«me
 "subje˘A…Name"

	)

2317 
	#LN_subje˘_Æt_«me
 "X509v3 Subje˘ A…î«tivêName"

	)

2318 
	#NID_subje˘_Æt_«me
 85

	)

2319 
	#OBJ_subje˘_Æt_«me
 
OBJ_id_˚
,17L

	)

2321 
	#SN_issuî_Æt_«me
 "issuîA…Name"

	)

2322 
	#LN_issuî_Æt_«me
 "X509v3 Issuî A…î«tivêName"

	)

2323 
	#NID_issuî_Æt_«me
 86

	)

2324 
	#OBJ_issuî_Æt_«me
 
OBJ_id_˚
,18L

	)

2326 
	#SN_basic_c⁄°øöts
 "basicC⁄°øöts"

	)

2327 
	#LN_basic_c⁄°øöts
 "X509v3 Basi¯C⁄°øöts"

	)

2328 
	#NID_basic_c⁄°øöts
 87

	)

2329 
	#OBJ_basic_c⁄°øöts
 
OBJ_id_˚
,19L

	)

2331 
	#SN_¸l_numbî
 "¸lNumbî"

	)

2332 
	#LN_¸l_numbî
 "X509v3 CRL Numbî"

	)

2333 
	#NID_¸l_numbî
 88

	)

2334 
	#OBJ_¸l_numbî
 
OBJ_id_˚
,20L

	)

2336 
	#SN_¸l_ªas⁄
 "CRLRós⁄"

	)

2337 
	#LN_¸l_ªas⁄
 "X509v3 CRL Rós⁄ Code"

	)

2338 
	#NID_¸l_ªas⁄
 141

	)

2339 
	#OBJ_¸l_ªas⁄
 
OBJ_id_˚
,21L

	)

2341 
	#SN_övÆidôy_d©e
 "övÆidôyD©e"

	)

2342 
	#LN_övÆidôy_d©e
 "InvÆidôy D©e"

	)

2343 
	#NID_övÆidôy_d©e
 142

	)

2344 
	#OBJ_övÆidôy_d©e
 
OBJ_id_˚
,24L

	)

2346 
	#SN_dñè_¸l
 "dñèCRL"

	)

2347 
	#LN_dñè_¸l
 "X509v3 Dñè CRL Indiˇt‹"

	)

2348 
	#NID_dñè_¸l
 140

	)

2349 
	#OBJ_dñè_¸l
 
OBJ_id_˚
,27L

	)

2351 
	#SN_issuög_di°ributi⁄_poöt
 "issuögDi°ributi⁄Poöt"

	)

2352 
	#LN_issuög_di°ributi⁄_poöt
 "X509v3 Issuög Di°rubuti⁄ Poöt"

	)

2353 
	#NID_issuög_di°ributi⁄_poöt
 770

	)

2354 
	#OBJ_issuög_di°ributi⁄_poöt
 
OBJ_id_˚
,28L

	)

2356 
	#SN_˚πifiˇã_issuî
 "˚πifiˇãIssuî"

	)

2357 
	#LN_˚πifiˇã_issuî
 "X509v3 Cîtifiˇã Issuî"

	)

2358 
	#NID_˚πifiˇã_issuî
 771

	)

2359 
	#OBJ_˚πifiˇã_issuî
 
OBJ_id_˚
,29L

	)

2361 
	#SN_«me_c⁄°øöts
 "«meC⁄°øöts"

	)

2362 
	#LN_«me_c⁄°øöts
 "X509v3 NamêC⁄°øöts"

	)

2363 
	#NID_«me_c⁄°øöts
 666

	)

2364 
	#OBJ_«me_c⁄°øöts
 
OBJ_id_˚
,30L

	)

2366 
	#SN_¸l_di°ributi⁄_poöts
 "¸lDi°ributi⁄Poöts"

	)

2367 
	#LN_¸l_di°ributi⁄_poöts
 "X509v3 CRL Di°ributi⁄ Poöts"

	)

2368 
	#NID_¸l_di°ributi⁄_poöts
 103

	)

2369 
	#OBJ_¸l_di°ributi⁄_poöts
 
OBJ_id_˚
,31L

	)

2371 
	#SN_˚πifiˇã_pﬁicõs
 "˚πifiˇãPﬁicõs"

	)

2372 
	#LN_˚πifiˇã_pﬁicõs
 "X509v3 Cîtifiˇã Pﬁicõs"

	)

2373 
	#NID_˚πifiˇã_pﬁicõs
 89

	)

2374 
	#OBJ_˚πifiˇã_pﬁicõs
 
OBJ_id_˚
,32L

	)

2376 
	#SN_™y_pﬁicy
 "™yPﬁicy"

	)

2377 
	#LN_™y_pﬁicy
 "X509v3 Any Pﬁicy"

	)

2378 
	#NID_™y_pﬁicy
 746

	)

2379 
	#OBJ_™y_pﬁicy
 
OBJ_˚πifiˇã_pﬁicõs
,0L

	)

2381 
	#SN_pﬁicy_m≠pögs
 "pﬁicyM≠pögs"

	)

2382 
	#LN_pﬁicy_m≠pögs
 "X509v3 Pﬁicy M≠pögs"

	)

2383 
	#NID_pﬁicy_m≠pögs
 747

	)

2384 
	#OBJ_pﬁicy_m≠pögs
 
OBJ_id_˚
,33L

	)

2386 
	#SN_auth‹ôy_key_idítifõr
 "auth‹ôyKeyIdítifõr"

	)

2387 
	#LN_auth‹ôy_key_idítifõr
 "X509v3 Auth‹ôy Key Idítifõr"

	)

2388 
	#NID_auth‹ôy_key_idítifõr
 90

	)

2389 
	#OBJ_auth‹ôy_key_idítifõr
 
OBJ_id_˚
,35L

	)

2391 
	#SN_pﬁicy_c⁄°øöts
 "pﬁicyC⁄°øöts"

	)

2392 
	#LN_pﬁicy_c⁄°øöts
 "X509v3 Pﬁicy C⁄°øöts"

	)

2393 
	#NID_pﬁicy_c⁄°øöts
 401

	)

2394 
	#OBJ_pﬁicy_c⁄°øöts
 
OBJ_id_˚
,36L

	)

2396 
	#SN_ext_key_ußge
 "exãndedKeyUßge"

	)

2397 
	#LN_ext_key_ußge
 "X509v3 Exãnded Key Ußge"

	)

2398 
	#NID_ext_key_ußge
 126

	)

2399 
	#OBJ_ext_key_ußge
 
OBJ_id_˚
,37L

	)

2401 
	#SN_‰eshe°_¸l
 "‰eshe°CRL"

	)

2402 
	#LN_‰eshe°_¸l
 "X509v3 Fªshe° CRL"

	)

2403 
	#NID_‰eshe°_¸l
 857

	)

2404 
	#OBJ_‰eshe°_¸l
 
OBJ_id_˚
,46L

	)

2406 
	#SN_öhibô_™y_pﬁicy
 "öhibôAnyPﬁicy"

	)

2407 
	#LN_öhibô_™y_pﬁicy
 "X509v3 Inhibô Any Pﬁicy"

	)

2408 
	#NID_öhibô_™y_pﬁicy
 748

	)

2409 
	#OBJ_öhibô_™y_pﬁicy
 
OBJ_id_˚
,54L

	)

2411 
	#SN_èrgë_öf‹m©i⁄
 "èrgëInf‹m©i⁄"

	)

2412 
	#LN_èrgë_öf‹m©i⁄
 "X509v3 AC T¨gëög"

	)

2413 
	#NID_èrgë_öf‹m©i⁄
 402

	)

2414 
	#OBJ_èrgë_öf‹m©i⁄
 
OBJ_id_˚
,55L

	)

2416 
	#SN_no_ªv_avaû
 "noRevAvaû"

	)

2417 
	#LN_no_ªv_avaû
 "X509v3 NÿRevoˇti⁄ AvaûabÀ"

	)

2418 
	#NID_no_ªv_avaû
 403

	)

2419 
	#OBJ_no_ªv_avaû
 
OBJ_id_˚
,56L

	)

2421 
	#SN_™yExãndedKeyUßge
 "™yExãndedKeyUßge"

	)

2422 
	#LN_™yExãndedKeyUßge
 "Any Exãnded Key Ußge"

	)

2423 
	#NID_™yExãndedKeyUßge
 910

	)

2424 
	#OBJ_™yExãndedKeyUßge
 
OBJ_ext_key_ußge
,0L

	)

2426 
	#SN_√tsˇ≥
 "Nësˇ≥"

	)

2427 
	#LN_√tsˇ≥
 "Nësˇ≥ Communiˇti⁄†C‹p."

	)

2428 
	#NID_√tsˇ≥
 57

	)

2429 
	#OBJ_√tsˇ≥
 2L,16L,840L,1L,113730L

	)

2431 
	#SN_√tsˇ≥_˚π_exãnsi⁄
 "nsCîtExt"

	)

2432 
	#LN_√tsˇ≥_˚π_exãnsi⁄
 "Nësˇ≥ Cîtifiˇã Exãnsi⁄"

	)

2433 
	#NID_√tsˇ≥_˚π_exãnsi⁄
 58

	)

2434 
	#OBJ_√tsˇ≥_˚π_exãnsi⁄
 
OBJ_√tsˇ≥
,1L

	)

2436 
	#SN_√tsˇ≥_d©a_ty≥
 "nsD©aTy≥"

	)

2437 
	#LN_√tsˇ≥_d©a_ty≥
 "Nësˇ≥ D©®Ty≥"

	)

2438 
	#NID_√tsˇ≥_d©a_ty≥
 59

	)

2439 
	#OBJ_√tsˇ≥_d©a_ty≥
 
OBJ_√tsˇ≥
,2L

	)

2441 
	#SN_√tsˇ≥_˚π_ty≥
 "nsCîtTy≥"

	)

2442 
	#LN_√tsˇ≥_˚π_ty≥
 "Nësˇ≥ CîàTy≥"

	)

2443 
	#NID_√tsˇ≥_˚π_ty≥
 71

	)

2444 
	#OBJ_√tsˇ≥_˚π_ty≥
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,1L

	)

2446 
	#SN_√tsˇ≥_ba£_uæ
 "nsBa£Uæ"

	)

2447 
	#LN_√tsˇ≥_ba£_uæ
 "Nësˇ≥ Ba£ Uæ"

	)

2448 
	#NID_√tsˇ≥_ba£_uæ
 72

	)

2449 
	#OBJ_√tsˇ≥_ba£_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,2L

	)

2451 
	#SN_√tsˇ≥_ªvoˇti⁄_uæ
 "nsRevoˇti⁄Uæ"

	)

2452 
	#LN_√tsˇ≥_ªvoˇti⁄_uæ
 "Nësˇ≥ Revoˇti⁄ Uæ"

	)

2453 
	#NID_√tsˇ≥_ªvoˇti⁄_uæ
 73

	)

2454 
	#OBJ_√tsˇ≥_ªvoˇti⁄_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,3L

	)

2456 
	#SN_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 "nsCaRevoˇti⁄Uæ"

	)

2457 
	#LN_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 "Nësˇ≥ CA Revoˇti⁄ Uæ"

	)

2458 
	#NID_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 74

	)

2459 
	#OBJ_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,4L

	)

2461 
	#SN_√tsˇ≥_ª√wÆ_uæ
 "nsRíewÆUæ"

	)

2462 
	#LN_√tsˇ≥_ª√wÆ_uæ
 "Nësˇ≥ RíewÆ Uæ"

	)

2463 
	#NID_√tsˇ≥_ª√wÆ_uæ
 75

	)

2464 
	#OBJ_√tsˇ≥_ª√wÆ_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,7L

	)

2466 
	#SN_√tsˇ≥_ˇ_pﬁicy_uæ
 "nsCaPﬁicyUæ"

	)

2467 
	#LN_√tsˇ≥_ˇ_pﬁicy_uæ
 "Nësˇ≥ CA Pﬁicy Uæ"

	)

2468 
	#NID_√tsˇ≥_ˇ_pﬁicy_uæ
 76

	)

2469 
	#OBJ_√tsˇ≥_ˇ_pﬁicy_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,8L

	)

2471 
	#SN_√tsˇ≥_s¶_£rvî_«me
 "nsS¶SîvîName"

	)

2472 
	#LN_√tsˇ≥_s¶_£rvî_«me
 "Nësˇ≥ SSL Sîvî Name"

	)

2473 
	#NID_√tsˇ≥_s¶_£rvî_«me
 77

	)

2474 
	#OBJ_√tsˇ≥_s¶_£rvî_«me
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,12L

	)

2476 
	#SN_√tsˇ≥_commít
 "nsCommít"

	)

2477 
	#LN_√tsˇ≥_commít
 "Nësˇ≥ Commít"

	)

2478 
	#NID_√tsˇ≥_commít
 78

	)

2479 
	#OBJ_√tsˇ≥_commít
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,13L

	)

2481 
	#SN_√tsˇ≥_˚π_£quí˚
 "nsCîtSequí˚"

	)

2482 
	#LN_√tsˇ≥_˚π_£quí˚
 "Nësˇ≥ Cîtifiˇã Sequí˚"

	)

2483 
	#NID_√tsˇ≥_˚π_£quí˚
 79

	)

2484 
	#OBJ_√tsˇ≥_˚π_£quí˚
 
OBJ_√tsˇ≥_d©a_ty≥
,5L

	)

2486 
	#SN_ns_sgc
 "nsSGC"

	)

2487 
	#LN_ns_sgc
 "Nësˇ≥ Sîvî G©ed Cry±o"

	)

2488 
	#NID_ns_sgc
 139

	)

2489 
	#OBJ_ns_sgc
 
OBJ_√tsˇ≥
,4L,1L

	)

2491 
	#SN_‹g
 "ORG"

	)

2492 
	#LN_‹g
 "‹g"

	)

2493 
	#NID_‹g
 379

	)

2494 
	#OBJ_‹g
 
OBJ_iso
,3L

	)

2496 
	#SN_dod
 "DOD"

	)

2497 
	#LN_dod
 "dod"

	)

2498 
	#NID_dod
 380

	)

2499 
	#OBJ_dod
 
OBJ_‹g
,6L

	)

2501 
	#SN_ü«
 "IANA"

	)

2502 
	#LN_ü«
 "ü«"

	)

2503 
	#NID_ü«
 381

	)

2504 
	#OBJ_ü«
 
OBJ_dod
,1L

	)

2506 
	#OBJ_öã∫ë
 
OBJ_ü«


	)

2508 
	#SN_Dúe˘‹y
 "dúe˘‹y"

	)

2509 
	#LN_Dúe˘‹y
 "Dúe˘‹y"

	)

2510 
	#NID_Dúe˘‹y
 382

	)

2511 
	#OBJ_Dúe˘‹y
 
OBJ_öã∫ë
,1L

	)

2513 
	#SN_M™agemít
 "mgmt"

	)

2514 
	#LN_M™agemít
 "M™agemít"

	)

2515 
	#NID_M™agemít
 383

	)

2516 
	#OBJ_M™agemít
 
OBJ_öã∫ë
,2L

	)

2518 
	#SN_Ex≥rimíèl
 "ex≥rimíèl"

	)

2519 
	#LN_Ex≥rimíèl
 "Ex≥rimíèl"

	)

2520 
	#NID_Ex≥rimíèl
 384

	)

2521 
	#OBJ_Ex≥rimíèl
 
OBJ_öã∫ë
,3L

	)

2523 
	#SN_Priv©e
 "¥iv©e"

	)

2524 
	#LN_Priv©e
 "Priv©e"

	)

2525 
	#NID_Priv©e
 385

	)

2526 
	#OBJ_Priv©e
 
OBJ_öã∫ë
,4L

	)

2528 
	#SN_Securôy
 "£curôy"

	)

2529 
	#LN_Securôy
 "Securôy"

	)

2530 
	#NID_Securôy
 386

	)

2531 
	#OBJ_Securôy
 
OBJ_öã∫ë
,5L

	)

2533 
	#SN_SNMPv2
 "¢mpv2"

	)

2534 
	#LN_SNMPv2
 "SNMPv2"

	)

2535 
	#NID_SNMPv2
 387

	)

2536 
	#OBJ_SNMPv2
 
OBJ_öã∫ë
,6L

	)

2538 
	#LN_Maû
 "Maû"

	)

2539 
	#NID_Maû
 388

	)

2540 
	#OBJ_Maû
 
OBJ_öã∫ë
,7L

	)

2542 
	#SN_E¡î¥i£s
 "íãΩri£s"

	)

2543 
	#LN_E¡î¥i£s
 "E¡î¥i£s"

	)

2544 
	#NID_E¡î¥i£s
 389

	)

2545 
	#OBJ_E¡î¥i£s
 
OBJ_Priv©e
,1L

	)

2547 
	#SN_dcObje˘
 "dcobje˘"

	)

2548 
	#LN_dcObje˘
 "dcObje˘"

	)

2549 
	#NID_dcObje˘
 390

	)

2550 
	#OBJ_dcObje˘
 
OBJ_E¡î¥i£s
,1466L,344L

	)

2552 
	#SN_mime_mhs
 "mime-mhs"

	)

2553 
	#LN_mime_mhs
 "MIME MHS"

	)

2554 
	#NID_mime_mhs
 504

	)

2555 
	#OBJ_mime_mhs
 
OBJ_Maû
,1L

	)

2557 
	#SN_mime_mhs_hódögs
 "mime-mhs-hódögs"

	)

2558 
	#LN_mime_mhs_hódögs
 "mime-mhs-hódögs"

	)

2559 
	#NID_mime_mhs_hódögs
 505

	)

2560 
	#OBJ_mime_mhs_hódögs
 
OBJ_mime_mhs
,1L

	)

2562 
	#SN_mime_mhs_bodõs
 "mime-mhs-bodõs"

	)

2563 
	#LN_mime_mhs_bodõs
 "mime-mhs-bodõs"

	)

2564 
	#NID_mime_mhs_bodõs
 506

	)

2565 
	#OBJ_mime_mhs_bodõs
 
OBJ_mime_mhs
,2L

	)

2567 
	#SN_id_hex_∑πül_mesßge
 "id-hex-∑πül-mesßge"

	)

2568 
	#LN_id_hex_∑πül_mesßge
 "id-hex-∑πül-mesßge"

	)

2569 
	#NID_id_hex_∑πül_mesßge
 507

	)

2570 
	#OBJ_id_hex_∑πül_mesßge
 
OBJ_mime_mhs_hódögs
,1L

	)

2572 
	#SN_id_hex_mu…ù¨t_mesßge
 "id-hex-mu…ù¨t-mesßge"

	)

2573 
	#LN_id_hex_mu…ù¨t_mesßge
 "id-hex-mu…ù¨t-mesßge"

	)

2574 
	#NID_id_hex_mu…ù¨t_mesßge
 508

	)

2575 
	#OBJ_id_hex_mu…ù¨t_mesßge
 
OBJ_mime_mhs_hódögs
,2L

	)

2577 
	#SN_æe_com¥essi⁄
 "RLE"

	)

2578 
	#LN_æe_com¥essi⁄
 "ru¿Àngth com¥essi⁄"

	)

2579 
	#NID_æe_com¥essi⁄
 124

	)

2580 
	#OBJ_æe_com¥essi⁄
 1L,1L,1L,1L,666L,1L

	)

2582 
	#SN_zlib_com¥essi⁄
 "ZLIB"

	)

2583 
	#LN_zlib_com¥essi⁄
 "zlib com¥essi⁄"

	)

2584 
	#NID_zlib_com¥essi⁄
 125

	)

2585 
	#OBJ_zlib_com¥essi⁄
 
OBJ_id_smime_Æg
,8L

	)

2587 
	#OBJ_cs‹
 2L,16L,840L,1L,101L,3L

	)

2589 
	#OBJ_ni°Alg‹ôhms
 
OBJ_cs‹
,4L

	)

2591 
	#OBJ_´s
 
OBJ_ni°Alg‹ôhms
,1L

	)

2593 
	#SN_´s_128_ecb
 "AES-128-ECB"

	)

2594 
	#LN_´s_128_ecb
 "´s-128-ecb"

	)

2595 
	#NID_´s_128_ecb
 418

	)

2596 
	#OBJ_´s_128_ecb
 
OBJ_´s
,1L

	)

2598 
	#SN_´s_128_cbc
 "AES-128-CBC"

	)

2599 
	#LN_´s_128_cbc
 "´s-128-cbc"

	)

2600 
	#NID_´s_128_cbc
 419

	)

2601 
	#OBJ_´s_128_cbc
 
OBJ_´s
,2L

	)

2603 
	#SN_´s_128_ofb128
 "AES-128-OFB"

	)

2604 
	#LN_´s_128_ofb128
 "´s-128-ofb"

	)

2605 
	#NID_´s_128_ofb128
 420

	)

2606 
	#OBJ_´s_128_ofb128
 
OBJ_´s
,3L

	)

2608 
	#SN_´s_128_cfb128
 "AES-128-CFB"

	)

2609 
	#LN_´s_128_cfb128
 "´s-128-cfb"

	)

2610 
	#NID_´s_128_cfb128
 421

	)

2611 
	#OBJ_´s_128_cfb128
 
OBJ_´s
,4L

	)

2613 
	#SN_id_´s128_wøp
 "id-´s128-wøp"

	)

2614 
	#NID_id_´s128_wøp
 788

	)

2615 
	#OBJ_id_´s128_wøp
 
OBJ_´s
,5L

	)

2617 
	#SN_´s_128_gcm
 "id-´s128-GCM"

	)

2618 
	#LN_´s_128_gcm
 "´s-128-gcm"

	)

2619 
	#NID_´s_128_gcm
 895

	)

2620 
	#OBJ_´s_128_gcm
 
OBJ_´s
,6L

	)

2622 
	#SN_´s_128_ccm
 "id-´s128-CCM"

	)

2623 
	#LN_´s_128_ccm
 "´s-128-ccm"

	)

2624 
	#NID_´s_128_ccm
 896

	)

2625 
	#OBJ_´s_128_ccm
 
OBJ_´s
,7L

	)

2627 
	#SN_id_´s128_wøp_∑d
 "id-´s128-wøp-∑d"

	)

2628 
	#NID_id_´s128_wøp_∑d
 897

	)

2629 
	#OBJ_id_´s128_wøp_∑d
 
OBJ_´s
,8L

	)

2631 
	#SN_´s_192_ecb
 "AES-192-ECB"

	)

2632 
	#LN_´s_192_ecb
 "´s-192-ecb"

	)

2633 
	#NID_´s_192_ecb
 422

	)

2634 
	#OBJ_´s_192_ecb
 
OBJ_´s
,21L

	)

2636 
	#SN_´s_192_cbc
 "AES-192-CBC"

	)

2637 
	#LN_´s_192_cbc
 "´s-192-cbc"

	)

2638 
	#NID_´s_192_cbc
 423

	)

2639 
	#OBJ_´s_192_cbc
 
OBJ_´s
,22L

	)

2641 
	#SN_´s_192_ofb128
 "AES-192-OFB"

	)

2642 
	#LN_´s_192_ofb128
 "´s-192-ofb"

	)

2643 
	#NID_´s_192_ofb128
 424

	)

2644 
	#OBJ_´s_192_ofb128
 
OBJ_´s
,23L

	)

2646 
	#SN_´s_192_cfb128
 "AES-192-CFB"

	)

2647 
	#LN_´s_192_cfb128
 "´s-192-cfb"

	)

2648 
	#NID_´s_192_cfb128
 425

	)

2649 
	#OBJ_´s_192_cfb128
 
OBJ_´s
,24L

	)

2651 
	#SN_id_´s192_wøp
 "id-´s192-wøp"

	)

2652 
	#NID_id_´s192_wøp
 789

	)

2653 
	#OBJ_id_´s192_wøp
 
OBJ_´s
,25L

	)

2655 
	#SN_´s_192_gcm
 "id-´s192-GCM"

	)

2656 
	#LN_´s_192_gcm
 "´s-192-gcm"

	)

2657 
	#NID_´s_192_gcm
 898

	)

2658 
	#OBJ_´s_192_gcm
 
OBJ_´s
,26L

	)

2660 
	#SN_´s_192_ccm
 "id-´s192-CCM"

	)

2661 
	#LN_´s_192_ccm
 "´s-192-ccm"

	)

2662 
	#NID_´s_192_ccm
 899

	)

2663 
	#OBJ_´s_192_ccm
 
OBJ_´s
,27L

	)

2665 
	#SN_id_´s192_wøp_∑d
 "id-´s192-wøp-∑d"

	)

2666 
	#NID_id_´s192_wøp_∑d
 900

	)

2667 
	#OBJ_id_´s192_wøp_∑d
 
OBJ_´s
,28L

	)

2669 
	#SN_´s_256_ecb
 "AES-256-ECB"

	)

2670 
	#LN_´s_256_ecb
 "´s-256-ecb"

	)

2671 
	#NID_´s_256_ecb
 426

	)

2672 
	#OBJ_´s_256_ecb
 
OBJ_´s
,41L

	)

2674 
	#SN_´s_256_cbc
 "AES-256-CBC"

	)

2675 
	#LN_´s_256_cbc
 "´s-256-cbc"

	)

2676 
	#NID_´s_256_cbc
 427

	)

2677 
	#OBJ_´s_256_cbc
 
OBJ_´s
,42L

	)

2679 
	#SN_´s_256_ofb128
 "AES-256-OFB"

	)

2680 
	#LN_´s_256_ofb128
 "´s-256-ofb"

	)

2681 
	#NID_´s_256_ofb128
 428

	)

2682 
	#OBJ_´s_256_ofb128
 
OBJ_´s
,43L

	)

2684 
	#SN_´s_256_cfb128
 "AES-256-CFB"

	)

2685 
	#LN_´s_256_cfb128
 "´s-256-cfb"

	)

2686 
	#NID_´s_256_cfb128
 429

	)

2687 
	#OBJ_´s_256_cfb128
 
OBJ_´s
,44L

	)

2689 
	#SN_id_´s256_wøp
 "id-´s256-wøp"

	)

2690 
	#NID_id_´s256_wøp
 790

	)

2691 
	#OBJ_id_´s256_wøp
 
OBJ_´s
,45L

	)

2693 
	#SN_´s_256_gcm
 "id-´s256-GCM"

	)

2694 
	#LN_´s_256_gcm
 "´s-256-gcm"

	)

2695 
	#NID_´s_256_gcm
 901

	)

2696 
	#OBJ_´s_256_gcm
 
OBJ_´s
,46L

	)

2698 
	#SN_´s_256_ccm
 "id-´s256-CCM"

	)

2699 
	#LN_´s_256_ccm
 "´s-256-ccm"

	)

2700 
	#NID_´s_256_ccm
 902

	)

2701 
	#OBJ_´s_256_ccm
 
OBJ_´s
,47L

	)

2703 
	#SN_id_´s256_wøp_∑d
 "id-´s256-wøp-∑d"

	)

2704 
	#NID_id_´s256_wøp_∑d
 903

	)

2705 
	#OBJ_id_´s256_wøp_∑d
 
OBJ_´s
,48L

	)

2707 
	#SN_´s_128_cfb1
 "AES-128-CFB1"

	)

2708 
	#LN_´s_128_cfb1
 "´s-128-cfb1"

	)

2709 
	#NID_´s_128_cfb1
 650

	)

2711 
	#SN_´s_192_cfb1
 "AES-192-CFB1"

	)

2712 
	#LN_´s_192_cfb1
 "´s-192-cfb1"

	)

2713 
	#NID_´s_192_cfb1
 651

	)

2715 
	#SN_´s_256_cfb1
 "AES-256-CFB1"

	)

2716 
	#LN_´s_256_cfb1
 "´s-256-cfb1"

	)

2717 
	#NID_´s_256_cfb1
 652

	)

2719 
	#SN_´s_128_cfb8
 "AES-128-CFB8"

	)

2720 
	#LN_´s_128_cfb8
 "´s-128-cfb8"

	)

2721 
	#NID_´s_128_cfb8
 653

	)

2723 
	#SN_´s_192_cfb8
 "AES-192-CFB8"

	)

2724 
	#LN_´s_192_cfb8
 "´s-192-cfb8"

	)

2725 
	#NID_´s_192_cfb8
 654

	)

2727 
	#SN_´s_256_cfb8
 "AES-256-CFB8"

	)

2728 
	#LN_´s_256_cfb8
 "´s-256-cfb8"

	)

2729 
	#NID_´s_256_cfb8
 655

	)

2731 
	#SN_´s_128_˘r
 "AES-128-CTR"

	)

2732 
	#LN_´s_128_˘r
 "´s-128-˘r"

	)

2733 
	#NID_´s_128_˘r
 904

	)

2735 
	#SN_´s_192_˘r
 "AES-192-CTR"

	)

2736 
	#LN_´s_192_˘r
 "´s-192-˘r"

	)

2737 
	#NID_´s_192_˘r
 905

	)

2739 
	#SN_´s_256_˘r
 "AES-256-CTR"

	)

2740 
	#LN_´s_256_˘r
 "´s-256-˘r"

	)

2741 
	#NID_´s_256_˘r
 906

	)

2743 
	#SN_´s_128_xts
 "AES-128-XTS"

	)

2744 
	#LN_´s_128_xts
 "´s-128-xts"

	)

2745 
	#NID_´s_128_xts
 913

	)

2747 
	#SN_´s_256_xts
 "AES-256-XTS"

	)

2748 
	#LN_´s_256_xts
 "´s-256-xts"

	)

2749 
	#NID_´s_256_xts
 914

	)

2751 
	#SN_des_cfb1
 "DES-CFB1"

	)

2752 
	#LN_des_cfb1
 "des-cfb1"

	)

2753 
	#NID_des_cfb1
 656

	)

2755 
	#SN_des_cfb8
 "DES-CFB8"

	)

2756 
	#LN_des_cfb8
 "des-cfb8"

	)

2757 
	#NID_des_cfb8
 657

	)

2759 
	#SN_des_ede3_cfb1
 "DES-EDE3-CFB1"

	)

2760 
	#LN_des_ede3_cfb1
 "des-ede3-cfb1"

	)

2761 
	#NID_des_ede3_cfb1
 658

	)

2763 
	#SN_des_ede3_cfb8
 "DES-EDE3-CFB8"

	)

2764 
	#LN_des_ede3_cfb8
 "des-ede3-cfb8"

	)

2765 
	#NID_des_ede3_cfb8
 659

	)

2767 
	#OBJ_ni°_hashÆgs
 
OBJ_ni°Alg‹ôhms
,2L

	)

2769 
	#SN_sha256
 "SHA256"

	)

2770 
	#LN_sha256
 "sha256"

	)

2771 
	#NID_sha256
 672

	)

2772 
	#OBJ_sha256
 
OBJ_ni°_hashÆgs
,1L

	)

2774 
	#SN_sha384
 "SHA384"

	)

2775 
	#LN_sha384
 "sha384"

	)

2776 
	#NID_sha384
 673

	)

2777 
	#OBJ_sha384
 
OBJ_ni°_hashÆgs
,2L

	)

2779 
	#SN_sha512
 "SHA512"

	)

2780 
	#LN_sha512
 "sha512"

	)

2781 
	#NID_sha512
 674

	)

2782 
	#OBJ_sha512
 
OBJ_ni°_hashÆgs
,3L

	)

2784 
	#SN_sha224
 "SHA224"

	)

2785 
	#LN_sha224
 "sha224"

	)

2786 
	#NID_sha224
 675

	)

2787 
	#OBJ_sha224
 
OBJ_ni°_hashÆgs
,4L

	)

2789 
	#OBJ_dß_wôh_sha2
 
OBJ_ni°Alg‹ôhms
,3L

	)

2791 
	#SN_dß_wôh_SHA224
 "dß_wôh_SHA224"

	)

2792 
	#NID_dß_wôh_SHA224
 802

	)

2793 
	#OBJ_dß_wôh_SHA224
 
OBJ_dß_wôh_sha2
,1L

	)

2795 
	#SN_dß_wôh_SHA256
 "dß_wôh_SHA256"

	)

2796 
	#NID_dß_wôh_SHA256
 803

	)

2797 
	#OBJ_dß_wôh_SHA256
 
OBJ_dß_wôh_sha2
,2L

	)

2799 
	#SN_hﬁd_ö°ru˘i⁄_code
 "hﬁdIn°ru˘i⁄Code"

	)

2800 
	#LN_hﬁd_ö°ru˘i⁄_code
 "Hﬁd In°ru˘i⁄ Code"

	)

2801 
	#NID_hﬁd_ö°ru˘i⁄_code
 430

	)

2802 
	#OBJ_hﬁd_ö°ru˘i⁄_code
 
OBJ_id_˚
,23L

	)

2804 
	#OBJ_hﬁdIn°ru˘i⁄
 
OBJ_X9_57
,2L

	)

2806 
	#SN_hﬁd_ö°ru˘i⁄_n⁄e
 "hﬁdIn°ru˘i⁄N⁄e"

	)

2807 
	#LN_hﬁd_ö°ru˘i⁄_n⁄e
 "Hﬁd In°ru˘i⁄ N⁄e"

	)

2808 
	#NID_hﬁd_ö°ru˘i⁄_n⁄e
 431

	)

2809 
	#OBJ_hﬁd_ö°ru˘i⁄_n⁄e
 
OBJ_hﬁdIn°ru˘i⁄
,1L

	)

2811 
	#SN_hﬁd_ö°ru˘i⁄_ˇŒ_issuî
 "hﬁdIn°ru˘i⁄CÆlIssuî"

	)

2812 
	#LN_hﬁd_ö°ru˘i⁄_ˇŒ_issuî
 "Hﬁd In°ru˘i⁄ CÆ»Issuî"

	)

2813 
	#NID_hﬁd_ö°ru˘i⁄_ˇŒ_issuî
 432

	)

2814 
	#OBJ_hﬁd_ö°ru˘i⁄_ˇŒ_issuî
 
OBJ_hﬁdIn°ru˘i⁄
,2L

	)

2816 
	#SN_hﬁd_ö°ru˘i⁄_ªje˘
 "hﬁdIn°ru˘i⁄Reje˘"

	)

2817 
	#LN_hﬁd_ö°ru˘i⁄_ªje˘
 "Hﬁd In°ru˘i⁄ Reje˘"

	)

2818 
	#NID_hﬁd_ö°ru˘i⁄_ªje˘
 433

	)

2819 
	#OBJ_hﬁd_ö°ru˘i⁄_ªje˘
 
OBJ_hﬁdIn°ru˘i⁄
,3L

	)

2821 
	#SN_d©a
 "d©a"

	)

2822 
	#NID_d©a
 434

	)

2823 
	#OBJ_d©a
 
OBJ_ôu_t
,9L

	)

2825 
	#SN_pss
 "pss"

	)

2826 
	#NID_pss
 435

	)

2827 
	#OBJ_pss
 
OBJ_d©a
,2342L

	)

2829 
	#SN_u˛
 "u˛"

	)

2830 
	#NID_u˛
 436

	)

2831 
	#OBJ_u˛
 
OBJ_pss
,19200300L

	)

2833 
	#SN_pûŸ
 "pûŸ"

	)

2834 
	#NID_pûŸ
 437

	)

2835 
	#OBJ_pûŸ
 
OBJ_u˛
,100L

	)

2837 
	#LN_pûŸAâribuãTy≥
 "pûŸAâribuãTy≥"

	)

2838 
	#NID_pûŸAâribuãTy≥
 438

	)

2839 
	#OBJ_pûŸAâribuãTy≥
 
OBJ_pûŸ
,1L

	)

2841 
	#LN_pûŸAâribuãSy¡ax
 "pûŸAâribuãSy¡ax"

	)

2842 
	#NID_pûŸAâribuãSy¡ax
 439

	)

2843 
	#OBJ_pûŸAâribuãSy¡ax
 
OBJ_pûŸ
,3L

	)

2845 
	#LN_pûŸObje˘Cœss
 "pûŸObje˘Cœss"

	)

2846 
	#NID_pûŸObje˘Cœss
 440

	)

2847 
	#OBJ_pûŸObje˘Cœss
 
OBJ_pûŸ
,4L

	)

2849 
	#LN_pûŸGroups
 "pûŸGroups"

	)

2850 
	#NID_pûŸGroups
 441

	)

2851 
	#OBJ_pûŸGroups
 
OBJ_pûŸ
,10L

	)

2853 
	#LN_iA5SåögSy¡ax
 "iA5SåögSy¡ax"

	)

2854 
	#NID_iA5SåögSy¡ax
 442

	)

2855 
	#OBJ_iA5SåögSy¡ax
 
OBJ_pûŸAâribuãSy¡ax
,4L

	)

2857 
	#LN_ˇ£Ign‹eIA5SåögSy¡ax
 "ˇ£Ign‹eIA5SåögSy¡ax"

	)

2858 
	#NID_ˇ£Ign‹eIA5SåögSy¡ax
 443

	)

2859 
	#OBJ_ˇ£Ign‹eIA5SåögSy¡ax
 
OBJ_pûŸAâribuãSy¡ax
,5L

	)

2861 
	#LN_pûŸObje˘
 "pûŸObje˘"

	)

2862 
	#NID_pûŸObje˘
 444

	)

2863 
	#OBJ_pûŸObje˘
 
OBJ_pûŸObje˘Cœss
,3L

	)

2865 
	#LN_pûŸPîs⁄
 "pûŸPîs⁄"

	)

2866 
	#NID_pûŸPîs⁄
 445

	)

2867 
	#OBJ_pûŸPîs⁄
 
OBJ_pûŸObje˘Cœss
,4L

	)

2869 
	#SN_accou¡
 "accou¡"

	)

2870 
	#NID_accou¡
 446

	)

2871 
	#OBJ_accou¡
 
OBJ_pûŸObje˘Cœss
,5L

	)

2873 
	#SN_documít
 "documít"

	)

2874 
	#NID_documít
 447

	)

2875 
	#OBJ_documít
 
OBJ_pûŸObje˘Cœss
,6L

	)

2877 
	#SN_room
 "room"

	)

2878 
	#NID_room
 448

	)

2879 
	#OBJ_room
 
OBJ_pûŸObje˘Cœss
,7L

	)

2881 
	#LN_documítSîõs
 "documítSîõs"

	)

2882 
	#NID_documítSîõs
 449

	)

2883 
	#OBJ_documítSîõs
 
OBJ_pûŸObje˘Cœss
,9L

	)

2885 
	#SN_Domaö
 "domaö"

	)

2886 
	#LN_Domaö
 "Domaö"

	)

2887 
	#NID_Domaö
 392

	)

2888 
	#OBJ_Domaö
 
OBJ_pûŸObje˘Cœss
,13L

	)

2890 
	#LN_rFC822loˇlP¨t
 "rFC822loˇlP¨t"

	)

2891 
	#NID_rFC822loˇlP¨t
 450

	)

2892 
	#OBJ_rFC822loˇlP¨t
 
OBJ_pûŸObje˘Cœss
,14L

	)

2894 
	#LN_dNSDomaö
 "dNSDomaö"

	)

2895 
	#NID_dNSDomaö
 451

	)

2896 
	#OBJ_dNSDomaö
 
OBJ_pûŸObje˘Cœss
,15L

	)

2898 
	#LN_domaöRñ©edObje˘
 "domaöRñ©edObje˘"

	)

2899 
	#NID_domaöRñ©edObje˘
 452

	)

2900 
	#OBJ_domaöRñ©edObje˘
 
OBJ_pûŸObje˘Cœss
,17L

	)

2902 
	#LN_‰õndlyCou¡ry
 "‰õndlyCou¡ry"

	)

2903 
	#NID_‰õndlyCou¡ry
 453

	)

2904 
	#OBJ_‰õndlyCou¡ry
 
OBJ_pûŸObje˘Cœss
,18L

	)

2906 
	#LN_sim∂eSecurôyObje˘
 "sim∂eSecurôyObje˘"

	)

2907 
	#NID_sim∂eSecurôyObje˘
 454

	)

2908 
	#OBJ_sim∂eSecurôyObje˘
 
OBJ_pûŸObje˘Cœss
,19L

	)

2910 
	#LN_pûŸOrg™iz©i⁄
 "pûŸOrg™iz©i⁄"

	)

2911 
	#NID_pûŸOrg™iz©i⁄
 455

	)

2912 
	#OBJ_pûŸOrg™iz©i⁄
 
OBJ_pûŸObje˘Cœss
,20L

	)

2914 
	#LN_pûŸDSA
 "pûŸDSA"

	)

2915 
	#NID_pûŸDSA
 456

	)

2916 
	#OBJ_pûŸDSA
 
OBJ_pûŸObje˘Cœss
,21L

	)

2918 
	#LN_quÆôyLabñÀdD©a
 "quÆôyLabñÀdD©a"

	)

2919 
	#NID_quÆôyLabñÀdD©a
 457

	)

2920 
	#OBJ_quÆôyLabñÀdD©a
 
OBJ_pûŸObje˘Cœss
,22L

	)

2922 
	#SN_u£rId
 "UID"

	)

2923 
	#LN_u£rId
 "u£rId"

	)

2924 
	#NID_u£rId
 458

	)

2925 
	#OBJ_u£rId
 
OBJ_pûŸAâribuãTy≥
,1L

	)

2927 
	#LN_ãxtEncodedORAddªss
 "ãxtEncodedORAddªss"

	)

2928 
	#NID_ãxtEncodedORAddªss
 459

	)

2929 
	#OBJ_ãxtEncodedORAddªss
 
OBJ_pûŸAâribuãTy≥
,2L

	)

2931 
	#SN_rfc822Maûbox
 "maû"

	)

2932 
	#LN_rfc822Maûbox
 "rfc822Maûbox"

	)

2933 
	#NID_rfc822Maûbox
 460

	)

2934 
	#OBJ_rfc822Maûbox
 
OBJ_pûŸAâribuãTy≥
,3L

	)

2936 
	#SN_öfo
 "öfo"

	)

2937 
	#NID_öfo
 461

	)

2938 
	#OBJ_öfo
 
OBJ_pûŸAâribuãTy≥
,4L

	)

2940 
	#LN_ÁvourôeDrök
 "ÁvourôeDrök"

	)

2941 
	#NID_ÁvourôeDrök
 462

	)

2942 
	#OBJ_ÁvourôeDrök
 
OBJ_pûŸAâribuãTy≥
,5L

	)

2944 
	#LN_roomNumbî
 "roomNumbî"

	)

2945 
	#NID_roomNumbî
 463

	)

2946 
	#OBJ_roomNumbî
 
OBJ_pûŸAâribuãTy≥
,6L

	)

2948 
	#SN_phŸo
 "phŸo"

	)

2949 
	#NID_phŸo
 464

	)

2950 
	#OBJ_phŸo
 
OBJ_pûŸAâribuãTy≥
,7L

	)

2952 
	#LN_u£rCœss
 "u£rCœss"

	)

2953 
	#NID_u£rCœss
 465

	)

2954 
	#OBJ_u£rCœss
 
OBJ_pûŸAâribuãTy≥
,8L

	)

2956 
	#SN_ho°
 "ho°"

	)

2957 
	#NID_ho°
 466

	)

2958 
	#OBJ_ho°
 
OBJ_pûŸAâribuãTy≥
,9L

	)

2960 
	#SN_m™agî
 "m™agî"

	)

2961 
	#NID_m™agî
 467

	)

2962 
	#OBJ_m™agî
 
OBJ_pûŸAâribuãTy≥
,10L

	)

2964 
	#LN_documítIdítifõr
 "documítIdítifõr"

	)

2965 
	#NID_documítIdítifõr
 468

	)

2966 
	#OBJ_documítIdítifõr
 
OBJ_pûŸAâribuãTy≥
,11L

	)

2968 
	#LN_documítTôÀ
 "documítTôÀ"

	)

2969 
	#NID_documítTôÀ
 469

	)

2970 
	#OBJ_documítTôÀ
 
OBJ_pûŸAâribuãTy≥
,12L

	)

2972 
	#LN_documítVîsi⁄
 "documítVîsi⁄"

	)

2973 
	#NID_documítVîsi⁄
 470

	)

2974 
	#OBJ_documítVîsi⁄
 
OBJ_pûŸAâribuãTy≥
,13L

	)

2976 
	#LN_documítAuth‹
 "documítAuth‹"

	)

2977 
	#NID_documítAuth‹
 471

	)

2978 
	#OBJ_documítAuth‹
 
OBJ_pûŸAâribuãTy≥
,14L

	)

2980 
	#LN_documítLoˇti⁄
 "documítLoˇti⁄"

	)

2981 
	#NID_documítLoˇti⁄
 472

	)

2982 
	#OBJ_documítLoˇti⁄
 
OBJ_pûŸAâribuãTy≥
,15L

	)

2984 
	#LN_homeTñïh⁄eNumbî
 "homeTñïh⁄eNumbî"

	)

2985 
	#NID_homeTñïh⁄eNumbî
 473

	)

2986 
	#OBJ_homeTñïh⁄eNumbî
 
OBJ_pûŸAâribuãTy≥
,20L

	)

2988 
	#SN_£¸ë¨y
 "£¸ë¨y"

	)

2989 
	#NID_£¸ë¨y
 474

	)

2990 
	#OBJ_£¸ë¨y
 
OBJ_pûŸAâribuãTy≥
,21L

	)

2992 
	#LN_ŸhîMaûbox
 "ŸhîMaûbox"

	)

2993 
	#NID_ŸhîMaûbox
 475

	)

2994 
	#OBJ_ŸhîMaûbox
 
OBJ_pûŸAâribuãTy≥
,22L

	)

2996 
	#LN_œ°ModifõdTime
 "œ°ModifõdTime"

	)

2997 
	#NID_œ°ModifõdTime
 476

	)

2998 
	#OBJ_œ°ModifõdTime
 
OBJ_pûŸAâribuãTy≥
,23L

	)

3000 
	#LN_œ°ModifõdBy
 "œ°ModifõdBy"

	)

3001 
	#NID_œ°ModifõdBy
 477

	)

3002 
	#OBJ_œ°ModifõdBy
 
OBJ_pûŸAâribuãTy≥
,24L

	)

3004 
	#SN_domaöComp⁄ít
 "DC"

	)

3005 
	#LN_domaöComp⁄ít
 "domaöComp⁄ít"

	)

3006 
	#NID_domaöComp⁄ít
 391

	)

3007 
	#OBJ_domaöComp⁄ít
 
OBJ_pûŸAâribuãTy≥
,25L

	)

3009 
	#LN_aRec‹d
 "aRec‹d"

	)

3010 
	#NID_aRec‹d
 478

	)

3011 
	#OBJ_aRec‹d
 
OBJ_pûŸAâribuãTy≥
,26L

	)

3013 
	#LN_pûŸAâribuãTy≥27
 "pûŸAâribuãTy≥27"

	)

3014 
	#NID_pûŸAâribuãTy≥27
 479

	)

3015 
	#OBJ_pûŸAâribuãTy≥27
 
OBJ_pûŸAâribuãTy≥
,27L

	)

3017 
	#LN_mXRec‹d
 "mXRec‹d"

	)

3018 
	#NID_mXRec‹d
 480

	)

3019 
	#OBJ_mXRec‹d
 
OBJ_pûŸAâribuãTy≥
,28L

	)

3021 
	#LN_nSRec‹d
 "nSRec‹d"

	)

3022 
	#NID_nSRec‹d
 481

	)

3023 
	#OBJ_nSRec‹d
 
OBJ_pûŸAâribuãTy≥
,29L

	)

3025 
	#LN_sOARec‹d
 "sOARec‹d"

	)

3026 
	#NID_sOARec‹d
 482

	)

3027 
	#OBJ_sOARec‹d
 
OBJ_pûŸAâribuãTy≥
,30L

	)

3029 
	#LN_cNAMERec‹d
 "cNAMERec‹d"

	)

3030 
	#NID_cNAMERec‹d
 483

	)

3031 
	#OBJ_cNAMERec‹d
 
OBJ_pûŸAâribuãTy≥
,31L

	)

3033 
	#LN_assocüãdDomaö
 "assocüãdDomaö"

	)

3034 
	#NID_assocüãdDomaö
 484

	)

3035 
	#OBJ_assocüãdDomaö
 
OBJ_pûŸAâribuãTy≥
,37L

	)

3037 
	#LN_assocüãdName
 "assocüãdName"

	)

3038 
	#NID_assocüãdName
 485

	)

3039 
	#OBJ_assocüãdName
 
OBJ_pûŸAâribuãTy≥
,38L

	)

3041 
	#LN_homePo°ÆAddªss
 "homePo°ÆAddªss"

	)

3042 
	#NID_homePo°ÆAddªss
 486

	)

3043 
	#OBJ_homePo°ÆAddªss
 
OBJ_pûŸAâribuãTy≥
,39L

	)

3045 
	#LN_≥rs⁄ÆTôÀ
 "≥rs⁄ÆTôÀ"

	)

3046 
	#NID_≥rs⁄ÆTôÀ
 487

	)

3047 
	#OBJ_≥rs⁄ÆTôÀ
 
OBJ_pûŸAâribuãTy≥
,40L

	)

3049 
	#LN_mobûeTñïh⁄eNumbî
 "mobûeTñïh⁄eNumbî"

	)

3050 
	#NID_mobûeTñïh⁄eNumbî
 488

	)

3051 
	#OBJ_mobûeTñïh⁄eNumbî
 
OBJ_pûŸAâribuãTy≥
,41L

	)

3053 
	#LN_∑gîTñïh⁄eNumbî
 "∑gîTñïh⁄eNumbî"

	)

3054 
	#NID_∑gîTñïh⁄eNumbî
 489

	)

3055 
	#OBJ_∑gîTñïh⁄eNumbî
 
OBJ_pûŸAâribuãTy≥
,42L

	)

3057 
	#LN_‰õndlyCou¡ryName
 "‰õndlyCou¡ryName"

	)

3058 
	#NID_‰õndlyCou¡ryName
 490

	)

3059 
	#OBJ_‰õndlyCou¡ryName
 
OBJ_pûŸAâribuãTy≥
,43L

	)

3061 
	#LN_‹g™iz©i⁄ÆSètus
 "‹g™iz©i⁄ÆSètus"

	)

3062 
	#NID_‹g™iz©i⁄ÆSètus
 491

	)

3063 
	#OBJ_‹g™iz©i⁄ÆSètus
 
OBJ_pûŸAâribuãTy≥
,45L

	)

3065 
	#LN_j™ëMaûbox
 "j™ëMaûbox"

	)

3066 
	#NID_j™ëMaûbox
 492

	)

3067 
	#OBJ_j™ëMaûbox
 
OBJ_pûŸAâribuãTy≥
,46L

	)

3069 
	#LN_maûPª„ªn˚O±i⁄
 "maûPª„ªn˚O±i⁄"

	)

3070 
	#NID_maûPª„ªn˚O±i⁄
 493

	)

3071 
	#OBJ_maûPª„ªn˚O±i⁄
 
OBJ_pûŸAâribuãTy≥
,47L

	)

3073 
	#LN_buûdögName
 "buûdögName"

	)

3074 
	#NID_buûdögName
 494

	)

3075 
	#OBJ_buûdögName
 
OBJ_pûŸAâribuãTy≥
,48L

	)

3077 
	#LN_dSAQuÆôy
 "dSAQuÆôy"

	)

3078 
	#NID_dSAQuÆôy
 495

	)

3079 
	#OBJ_dSAQuÆôy
 
OBJ_pûŸAâribuãTy≥
,49L

	)

3081 
	#LN_sögÀLevñQuÆôy
 "sögÀLevñQuÆôy"

	)

3082 
	#NID_sögÀLevñQuÆôy
 496

	)

3083 
	#OBJ_sögÀLevñQuÆôy
 
OBJ_pûŸAâribuãTy≥
,50L

	)

3085 
	#LN_subåìMöimumQuÆôy
 "subåìMöimumQuÆôy"

	)

3086 
	#NID_subåìMöimumQuÆôy
 497

	)

3087 
	#OBJ_subåìMöimumQuÆôy
 
OBJ_pûŸAâribuãTy≥
,51L

	)

3089 
	#LN_subåìMaximumQuÆôy
 "subåìMaximumQuÆôy"

	)

3090 
	#NID_subåìMaximumQuÆôy
 498

	)

3091 
	#OBJ_subåìMaximumQuÆôy
 
OBJ_pûŸAâribuãTy≥
,52L

	)

3093 
	#LN_≥rs⁄ÆSig«tuª
 "≥rs⁄ÆSig«tuª"

	)

3094 
	#NID_≥rs⁄ÆSig«tuª
 499

	)

3095 
	#OBJ_≥rs⁄ÆSig«tuª
 
OBJ_pûŸAâribuãTy≥
,53L

	)

3097 
	#LN_dITRedúe˘
 "dITRedúe˘"

	)

3098 
	#NID_dITRedúe˘
 500

	)

3099 
	#OBJ_dITRedúe˘
 
OBJ_pûŸAâribuãTy≥
,54L

	)

3101 
	#SN_audio
 "audio"

	)

3102 
	#NID_audio
 501

	)

3103 
	#OBJ_audio
 
OBJ_pûŸAâribuãTy≥
,55L

	)

3105 
	#LN_documítPublishî
 "documítPublishî"

	)

3106 
	#NID_documítPublishî
 502

	)

3107 
	#OBJ_documítPublishî
 
OBJ_pûŸAâribuãTy≥
,56L

	)

3109 
	#SN_id_£t
 "id-£t"

	)

3110 
	#LN_id_£t
 "Secuª EÀ˘r⁄i¯Tønß˘i⁄s"

	)

3111 
	#NID_id_£t
 512

	)

3112 
	#OBJ_id_£t
 
OBJ_öã∫©i⁄Æ_‹g™iz©i⁄s
,42L

	)

3114 
	#SN_£t_˘y≥
 "£t-˘y≥"

	)

3115 
	#LN_£t_˘y≥
 "c⁄ã¡Åy≥s"

	)

3116 
	#NID_£t_˘y≥
 513

	)

3117 
	#OBJ_£t_˘y≥
 
OBJ_id_£t
,0L

	)

3119 
	#SN_£t_msgExt
 "£t-msgExt"

	)

3120 
	#LN_£t_msgExt
 "mesßgêexãnsi⁄s"

	)

3121 
	#NID_£t_msgExt
 514

	)

3122 
	#OBJ_£t_msgExt
 
OBJ_id_£t
,1L

	)

3124 
	#SN_£t_©å
 "£t-©å"

	)

3125 
	#NID_£t_©å
 515

	)

3126 
	#OBJ_£t_©å
 
OBJ_id_£t
,3L

	)

3128 
	#SN_£t_pﬁicy
 "£t-pﬁicy"

	)

3129 
	#NID_£t_pﬁicy
 516

	)

3130 
	#OBJ_£t_pﬁicy
 
OBJ_id_£t
,5L

	)

3132 
	#SN_£t_˚πExt
 "£t-˚πExt"

	)

3133 
	#LN_£t_˚πExt
 "˚πifiˇãÉxãnsi⁄s"

	)

3134 
	#NID_£t_˚πExt
 517

	)

3135 
	#OBJ_£t_˚πExt
 
OBJ_id_£t
,7L

	)

3137 
	#SN_£t_bønd
 "£t-bønd"

	)

3138 
	#NID_£t_bønd
 518

	)

3139 
	#OBJ_£t_bønd
 
OBJ_id_£t
,8L

	)

3141 
	#SN_£t˘_PAND©a
 "£t˘-PAND©a"

	)

3142 
	#NID_£t˘_PAND©a
 519

	)

3143 
	#OBJ_£t˘_PAND©a
 
OBJ_£t_˘y≥
,0L

	)

3145 
	#SN_£t˘_PANTokí
 "£t˘-PANTokí"

	)

3146 
	#NID_£t˘_PANTokí
 520

	)

3147 
	#OBJ_£t˘_PANTokí
 
OBJ_£t_˘y≥
,1L

	)

3149 
	#SN_£t˘_PANO∆y
 "£t˘-PANO∆y"

	)

3150 
	#NID_£t˘_PANO∆y
 521

	)

3151 
	#OBJ_£t˘_PANO∆y
 
OBJ_£t_˘y≥
,2L

	)

3153 
	#SN_£t˘_OID©a
 "£t˘-OID©a"

	)

3154 
	#NID_£t˘_OID©a
 522

	)

3155 
	#OBJ_£t˘_OID©a
 
OBJ_£t_˘y≥
,3L

	)

3157 
	#SN_£t˘_PI
 "£t˘-PI"

	)

3158 
	#NID_£t˘_PI
 523

	)

3159 
	#OBJ_£t˘_PI
 
OBJ_£t_˘y≥
,4L

	)

3161 
	#SN_£t˘_PID©a
 "£t˘-PID©a"

	)

3162 
	#NID_£t˘_PID©a
 524

	)

3163 
	#OBJ_£t˘_PID©a
 
OBJ_£t_˘y≥
,5L

	)

3165 
	#SN_£t˘_PID©aUnsig√d
 "£t˘-PID©aUnsig√d"

	)

3166 
	#NID_£t˘_PID©aUnsig√d
 525

	)

3167 
	#OBJ_£t˘_PID©aUnsig√d
 
OBJ_£t_˘y≥
,6L

	)

3169 
	#SN_£t˘_HODI≈ut
 "£t˘-HODI≈ut"

	)

3170 
	#NID_£t˘_HODI≈ut
 526

	)

3171 
	#OBJ_£t˘_HODI≈ut
 
OBJ_£t_˘y≥
,7L

	)

3173 
	#SN_£t˘_AuthResBaggage
 "£t˘-AuthResBaggage"

	)

3174 
	#NID_£t˘_AuthResBaggage
 527

	)

3175 
	#OBJ_£t˘_AuthResBaggage
 
OBJ_£t_˘y≥
,8L

	)

3177 
	#SN_£t˘_AuthRevReqBaggage
 "£t˘-AuthRevReqBaggage"

	)

3178 
	#NID_£t˘_AuthRevReqBaggage
 528

	)

3179 
	#OBJ_£t˘_AuthRevReqBaggage
 
OBJ_£t_˘y≥
,9L

	)

3181 
	#SN_£t˘_AuthRevResBaggage
 "£t˘-AuthRevResBaggage"

	)

3182 
	#NID_£t˘_AuthRevResBaggage
 529

	)

3183 
	#OBJ_£t˘_AuthRevResBaggage
 
OBJ_£t_˘y≥
,10L

	)

3185 
	#SN_£t˘_C≠TokíSeq
 "£t˘-C≠TokíSeq"

	)

3186 
	#NID_£t˘_C≠TokíSeq
 530

	)

3187 
	#OBJ_£t˘_C≠TokíSeq
 
OBJ_£t_˘y≥
,11L

	)

3189 
	#SN_£t˘_PInôResD©a
 "£t˘-PInôResD©a"

	)

3190 
	#NID_£t˘_PInôResD©a
 531

	)

3191 
	#OBJ_£t˘_PInôResD©a
 
OBJ_£t_˘y≥
,12L

	)

3193 
	#SN_£t˘_PI_TBS
 "£t˘-PI-TBS"

	)

3194 
	#NID_£t˘_PI_TBS
 532

	)

3195 
	#OBJ_£t˘_PI_TBS
 
OBJ_£t_˘y≥
,13L

	)

3197 
	#SN_£t˘_PResD©a
 "£t˘-PResD©a"

	)

3198 
	#NID_£t˘_PResD©a
 533

	)

3199 
	#OBJ_£t˘_PResD©a
 
OBJ_£t_˘y≥
,14L

	)

3201 
	#SN_£t˘_AuthReqTBS
 "£t˘-AuthReqTBS"

	)

3202 
	#NID_£t˘_AuthReqTBS
 534

	)

3203 
	#OBJ_£t˘_AuthReqTBS
 
OBJ_£t_˘y≥
,16L

	)

3205 
	#SN_£t˘_AuthResTBS
 "£t˘-AuthResTBS"

	)

3206 
	#NID_£t˘_AuthResTBS
 535

	)

3207 
	#OBJ_£t˘_AuthResTBS
 
OBJ_£t_˘y≥
,17L

	)

3209 
	#SN_£t˘_AuthResTBSX
 "£t˘-AuthResTBSX"

	)

3210 
	#NID_£t˘_AuthResTBSX
 536

	)

3211 
	#OBJ_£t˘_AuthResTBSX
 
OBJ_£t_˘y≥
,18L

	)

3213 
	#SN_£t˘_AuthTokíTBS
 "£t˘-AuthTokíTBS"

	)

3214 
	#NID_£t˘_AuthTokíTBS
 537

	)

3215 
	#OBJ_£t˘_AuthTokíTBS
 
OBJ_£t_˘y≥
,19L

	)

3217 
	#SN_£t˘_C≠TokíD©a
 "£t˘-C≠TokíD©a"

	)

3218 
	#NID_£t˘_C≠TokíD©a
 538

	)

3219 
	#OBJ_£t˘_C≠TokíD©a
 
OBJ_£t_˘y≥
,20L

	)

3221 
	#SN_£t˘_C≠TokíTBS
 "£t˘-C≠TokíTBS"

	)

3222 
	#NID_£t˘_C≠TokíTBS
 539

	)

3223 
	#OBJ_£t˘_C≠TokíTBS
 
OBJ_£t_˘y≥
,21L

	)

3225 
	#SN_£t˘_AcqC¨dCodeMsg
 "£t˘-AcqC¨dCodeMsg"

	)

3226 
	#NID_£t˘_AcqC¨dCodeMsg
 540

	)

3227 
	#OBJ_£t˘_AcqC¨dCodeMsg
 
OBJ_£t_˘y≥
,22L

	)

3229 
	#SN_£t˘_AuthRevReqTBS
 "£t˘-AuthRevReqTBS"

	)

3230 
	#NID_£t˘_AuthRevReqTBS
 541

	)

3231 
	#OBJ_£t˘_AuthRevReqTBS
 
OBJ_£t_˘y≥
,23L

	)

3233 
	#SN_£t˘_AuthRevResD©a
 "£t˘-AuthRevResD©a"

	)

3234 
	#NID_£t˘_AuthRevResD©a
 542

	)

3235 
	#OBJ_£t˘_AuthRevResD©a
 
OBJ_£t_˘y≥
,24L

	)

3237 
	#SN_£t˘_AuthRevResTBS
 "£t˘-AuthRevResTBS"

	)

3238 
	#NID_£t˘_AuthRevResTBS
 543

	)

3239 
	#OBJ_£t˘_AuthRevResTBS
 
OBJ_£t_˘y≥
,25L

	)

3241 
	#SN_£t˘_C≠ReqTBS
 "£t˘-C≠ReqTBS"

	)

3242 
	#NID_£t˘_C≠ReqTBS
 544

	)

3243 
	#OBJ_£t˘_C≠ReqTBS
 
OBJ_£t_˘y≥
,26L

	)

3245 
	#SN_£t˘_C≠ReqTBSX
 "£t˘-C≠ReqTBSX"

	)

3246 
	#NID_£t˘_C≠ReqTBSX
 545

	)

3247 
	#OBJ_£t˘_C≠ReqTBSX
 
OBJ_£t_˘y≥
,27L

	)

3249 
	#SN_£t˘_C≠ResD©a
 "£t˘-C≠ResD©a"

	)

3250 
	#NID_£t˘_C≠ResD©a
 546

	)

3251 
	#OBJ_£t˘_C≠ResD©a
 
OBJ_£t_˘y≥
,28L

	)

3253 
	#SN_£t˘_C≠RevReqTBS
 "£t˘-C≠RevReqTBS"

	)

3254 
	#NID_£t˘_C≠RevReqTBS
 547

	)

3255 
	#OBJ_£t˘_C≠RevReqTBS
 
OBJ_£t_˘y≥
,29L

	)

3257 
	#SN_£t˘_C≠RevReqTBSX
 "£t˘-C≠RevReqTBSX"

	)

3258 
	#NID_£t˘_C≠RevReqTBSX
 548

	)

3259 
	#OBJ_£t˘_C≠RevReqTBSX
 
OBJ_£t_˘y≥
,30L

	)

3261 
	#SN_£t˘_C≠RevResD©a
 "£t˘-C≠RevResD©a"

	)

3262 
	#NID_£t˘_C≠RevResD©a
 549

	)

3263 
	#OBJ_£t˘_C≠RevResD©a
 
OBJ_£t_˘y≥
,31L

	)

3265 
	#SN_£t˘_CªdReqTBS
 "£t˘-CªdReqTBS"

	)

3266 
	#NID_£t˘_CªdReqTBS
 550

	)

3267 
	#OBJ_£t˘_CªdReqTBS
 
OBJ_£t_˘y≥
,32L

	)

3269 
	#SN_£t˘_CªdReqTBSX
 "£t˘-CªdReqTBSX"

	)

3270 
	#NID_£t˘_CªdReqTBSX
 551

	)

3271 
	#OBJ_£t˘_CªdReqTBSX
 
OBJ_£t_˘y≥
,33L

	)

3273 
	#SN_£t˘_CªdResD©a
 "£t˘-CªdResD©a"

	)

3274 
	#NID_£t˘_CªdResD©a
 552

	)

3275 
	#OBJ_£t˘_CªdResD©a
 
OBJ_£t_˘y≥
,34L

	)

3277 
	#SN_£t˘_CªdRevReqTBS
 "£t˘-CªdRevReqTBS"

	)

3278 
	#NID_£t˘_CªdRevReqTBS
 553

	)

3279 
	#OBJ_£t˘_CªdRevReqTBS
 
OBJ_£t_˘y≥
,35L

	)

3281 
	#SN_£t˘_CªdRevReqTBSX
 "£t˘-CªdRevReqTBSX"

	)

3282 
	#NID_£t˘_CªdRevReqTBSX
 554

	)

3283 
	#OBJ_£t˘_CªdRevReqTBSX
 
OBJ_£t_˘y≥
,36L

	)

3285 
	#SN_£t˘_CªdRevResD©a
 "£t˘-CªdRevResD©a"

	)

3286 
	#NID_£t˘_CªdRevResD©a
 555

	)

3287 
	#OBJ_£t˘_CªdRevResD©a
 
OBJ_£t_˘y≥
,37L

	)

3289 
	#SN_£t˘_PCîtReqD©a
 "£t˘-PCîtReqD©a"

	)

3290 
	#NID_£t˘_PCîtReqD©a
 556

	)

3291 
	#OBJ_£t˘_PCîtReqD©a
 
OBJ_£t_˘y≥
,38L

	)

3293 
	#SN_£t˘_PCîtResTBS
 "£t˘-PCîtResTBS"

	)

3294 
	#NID_£t˘_PCîtResTBS
 557

	)

3295 
	#OBJ_£t˘_PCîtResTBS
 
OBJ_£t_˘y≥
,39L

	)

3297 
	#SN_£t˘_B©chAdmöReqD©a
 "£t˘-B©chAdmöReqD©a"

	)

3298 
	#NID_£t˘_B©chAdmöReqD©a
 558

	)

3299 
	#OBJ_£t˘_B©chAdmöReqD©a
 
OBJ_£t_˘y≥
,40L

	)

3301 
	#SN_£t˘_B©chAdmöResD©a
 "£t˘-B©chAdmöResD©a"

	)

3302 
	#NID_£t˘_B©chAdmöResD©a
 559

	)

3303 
	#OBJ_£t˘_B©chAdmöResD©a
 
OBJ_£t_˘y≥
,41L

	)

3305 
	#SN_£t˘_C¨dCInôResTBS
 "£t˘-C¨dCInôResTBS"

	)

3306 
	#NID_£t˘_C¨dCInôResTBS
 560

	)

3307 
	#OBJ_£t˘_C¨dCInôResTBS
 
OBJ_£t_˘y≥
,42L

	)

3309 
	#SN_£t˘_MeAqCInôResTBS
 "£t˘-MeAqCInôResTBS"

	)

3310 
	#NID_£t˘_MeAqCInôResTBS
 561

	)

3311 
	#OBJ_£t˘_MeAqCInôResTBS
 
OBJ_£t_˘y≥
,43L

	)

3313 
	#SN_£t˘_RegF‹mResTBS
 "£t˘-RegF‹mResTBS"

	)

3314 
	#NID_£t˘_RegF‹mResTBS
 562

	)

3315 
	#OBJ_£t˘_RegF‹mResTBS
 
OBJ_£t_˘y≥
,44L

	)

3317 
	#SN_£t˘_CîtReqD©a
 "£t˘-CîtReqD©a"

	)

3318 
	#NID_£t˘_CîtReqD©a
 563

	)

3319 
	#OBJ_£t˘_CîtReqD©a
 
OBJ_£t_˘y≥
,45L

	)

3321 
	#SN_£t˘_CîtReqTBS
 "£t˘-CîtReqTBS"

	)

3322 
	#NID_£t˘_CîtReqTBS
 564

	)

3323 
	#OBJ_£t˘_CîtReqTBS
 
OBJ_£t_˘y≥
,46L

	)

3325 
	#SN_£t˘_CîtResD©a
 "£t˘-CîtResD©a"

	)

3326 
	#NID_£t˘_CîtResD©a
 565

	)

3327 
	#OBJ_£t˘_CîtResD©a
 
OBJ_£t_˘y≥
,47L

	)

3329 
	#SN_£t˘_CîtInqReqTBS
 "£t˘-CîtInqReqTBS"

	)

3330 
	#NID_£t˘_CîtInqReqTBS
 566

	)

3331 
	#OBJ_£t˘_CîtInqReqTBS
 
OBJ_£t_˘y≥
,48L

	)

3333 
	#SN_£t˘_Eº‹TBS
 "£t˘-Eº‹TBS"

	)

3334 
	#NID_£t˘_Eº‹TBS
 567

	)

3335 
	#OBJ_£t˘_Eº‹TBS
 
OBJ_£t_˘y≥
,49L

	)

3337 
	#SN_£t˘_PIDuÆSig√dTBE
 "£t˘-PIDuÆSig√dTBE"

	)

3338 
	#NID_£t˘_PIDuÆSig√dTBE
 568

	)

3339 
	#OBJ_£t˘_PIDuÆSig√dTBE
 
OBJ_£t_˘y≥
,50L

	)

3341 
	#SN_£t˘_PIUnsig√dTBE
 "£t˘-PIUnsig√dTBE"

	)

3342 
	#NID_£t˘_PIUnsig√dTBE
 569

	)

3343 
	#OBJ_£t˘_PIUnsig√dTBE
 
OBJ_£t_˘y≥
,51L

	)

3345 
	#SN_£t˘_AuthReqTBE
 "£t˘-AuthReqTBE"

	)

3346 
	#NID_£t˘_AuthReqTBE
 570

	)

3347 
	#OBJ_£t˘_AuthReqTBE
 
OBJ_£t_˘y≥
,52L

	)

3349 
	#SN_£t˘_AuthResTBE
 "£t˘-AuthResTBE"

	)

3350 
	#NID_£t˘_AuthResTBE
 571

	)

3351 
	#OBJ_£t˘_AuthResTBE
 
OBJ_£t_˘y≥
,53L

	)

3353 
	#SN_£t˘_AuthResTBEX
 "£t˘-AuthResTBEX"

	)

3354 
	#NID_£t˘_AuthResTBEX
 572

	)

3355 
	#OBJ_£t˘_AuthResTBEX
 
OBJ_£t_˘y≥
,54L

	)

3357 
	#SN_£t˘_AuthTokíTBE
 "£t˘-AuthTokíTBE"

	)

3358 
	#NID_£t˘_AuthTokíTBE
 573

	)

3359 
	#OBJ_£t˘_AuthTokíTBE
 
OBJ_£t_˘y≥
,55L

	)

3361 
	#SN_£t˘_C≠TokíTBE
 "£t˘-C≠TokíTBE"

	)

3362 
	#NID_£t˘_C≠TokíTBE
 574

	)

3363 
	#OBJ_£t˘_C≠TokíTBE
 
OBJ_£t_˘y≥
,56L

	)

3365 
	#SN_£t˘_C≠TokíTBEX
 "£t˘-C≠TokíTBEX"

	)

3366 
	#NID_£t˘_C≠TokíTBEX
 575

	)

3367 
	#OBJ_£t˘_C≠TokíTBEX
 
OBJ_£t_˘y≥
,57L

	)

3369 
	#SN_£t˘_AcqC¨dCodeMsgTBE
 "£t˘-AcqC¨dCodeMsgTBE"

	)

3370 
	#NID_£t˘_AcqC¨dCodeMsgTBE
 576

	)

3371 
	#OBJ_£t˘_AcqC¨dCodeMsgTBE
 
OBJ_£t_˘y≥
,58L

	)

3373 
	#SN_£t˘_AuthRevReqTBE
 "£t˘-AuthRevReqTBE"

	)

3374 
	#NID_£t˘_AuthRevReqTBE
 577

	)

3375 
	#OBJ_£t˘_AuthRevReqTBE
 
OBJ_£t_˘y≥
,59L

	)

3377 
	#SN_£t˘_AuthRevResTBE
 "£t˘-AuthRevResTBE"

	)

3378 
	#NID_£t˘_AuthRevResTBE
 578

	)

3379 
	#OBJ_£t˘_AuthRevResTBE
 
OBJ_£t_˘y≥
,60L

	)

3381 
	#SN_£t˘_AuthRevResTBEB
 "£t˘-AuthRevResTBEB"

	)

3382 
	#NID_£t˘_AuthRevResTBEB
 579

	)

3383 
	#OBJ_£t˘_AuthRevResTBEB
 
OBJ_£t_˘y≥
,61L

	)

3385 
	#SN_£t˘_C≠ReqTBE
 "£t˘-C≠ReqTBE"

	)

3386 
	#NID_£t˘_C≠ReqTBE
 580

	)

3387 
	#OBJ_£t˘_C≠ReqTBE
 
OBJ_£t_˘y≥
,62L

	)

3389 
	#SN_£t˘_C≠ReqTBEX
 "£t˘-C≠ReqTBEX"

	)

3390 
	#NID_£t˘_C≠ReqTBEX
 581

	)

3391 
	#OBJ_£t˘_C≠ReqTBEX
 
OBJ_£t_˘y≥
,63L

	)

3393 
	#SN_£t˘_C≠ResTBE
 "£t˘-C≠ResTBE"

	)

3394 
	#NID_£t˘_C≠ResTBE
 582

	)

3395 
	#OBJ_£t˘_C≠ResTBE
 
OBJ_£t_˘y≥
,64L

	)

3397 
	#SN_£t˘_C≠RevReqTBE
 "£t˘-C≠RevReqTBE"

	)

3398 
	#NID_£t˘_C≠RevReqTBE
 583

	)

3399 
	#OBJ_£t˘_C≠RevReqTBE
 
OBJ_£t_˘y≥
,65L

	)

3401 
	#SN_£t˘_C≠RevReqTBEX
 "£t˘-C≠RevReqTBEX"

	)

3402 
	#NID_£t˘_C≠RevReqTBEX
 584

	)

3403 
	#OBJ_£t˘_C≠RevReqTBEX
 
OBJ_£t_˘y≥
,66L

	)

3405 
	#SN_£t˘_C≠RevResTBE
 "£t˘-C≠RevResTBE"

	)

3406 
	#NID_£t˘_C≠RevResTBE
 585

	)

3407 
	#OBJ_£t˘_C≠RevResTBE
 
OBJ_£t_˘y≥
,67L

	)

3409 
	#SN_£t˘_CªdReqTBE
 "£t˘-CªdReqTBE"

	)

3410 
	#NID_£t˘_CªdReqTBE
 586

	)

3411 
	#OBJ_£t˘_CªdReqTBE
 
OBJ_£t_˘y≥
,68L

	)

3413 
	#SN_£t˘_CªdReqTBEX
 "£t˘-CªdReqTBEX"

	)

3414 
	#NID_£t˘_CªdReqTBEX
 587

	)

3415 
	#OBJ_£t˘_CªdReqTBEX
 
OBJ_£t_˘y≥
,69L

	)

3417 
	#SN_£t˘_CªdResTBE
 "£t˘-CªdResTBE"

	)

3418 
	#NID_£t˘_CªdResTBE
 588

	)

3419 
	#OBJ_£t˘_CªdResTBE
 
OBJ_£t_˘y≥
,70L

	)

3421 
	#SN_£t˘_CªdRevReqTBE
 "£t˘-CªdRevReqTBE"

	)

3422 
	#NID_£t˘_CªdRevReqTBE
 589

	)

3423 
	#OBJ_£t˘_CªdRevReqTBE
 
OBJ_£t_˘y≥
,71L

	)

3425 
	#SN_£t˘_CªdRevReqTBEX
 "£t˘-CªdRevReqTBEX"

	)

3426 
	#NID_£t˘_CªdRevReqTBEX
 590

	)

3427 
	#OBJ_£t˘_CªdRevReqTBEX
 
OBJ_£t_˘y≥
,72L

	)

3429 
	#SN_£t˘_CªdRevResTBE
 "£t˘-CªdRevResTBE"

	)

3430 
	#NID_£t˘_CªdRevResTBE
 591

	)

3431 
	#OBJ_£t˘_CªdRevResTBE
 
OBJ_£t_˘y≥
,73L

	)

3433 
	#SN_£t˘_B©chAdmöReqTBE
 "£t˘-B©chAdmöReqTBE"

	)

3434 
	#NID_£t˘_B©chAdmöReqTBE
 592

	)

3435 
	#OBJ_£t˘_B©chAdmöReqTBE
 
OBJ_£t_˘y≥
,74L

	)

3437 
	#SN_£t˘_B©chAdmöResTBE
 "£t˘-B©chAdmöResTBE"

	)

3438 
	#NID_£t˘_B©chAdmöResTBE
 593

	)

3439 
	#OBJ_£t˘_B©chAdmöResTBE
 
OBJ_£t_˘y≥
,75L

	)

3441 
	#SN_£t˘_RegF‹mReqTBE
 "£t˘-RegF‹mReqTBE"

	)

3442 
	#NID_£t˘_RegF‹mReqTBE
 594

	)

3443 
	#OBJ_£t˘_RegF‹mReqTBE
 
OBJ_£t_˘y≥
,76L

	)

3445 
	#SN_£t˘_CîtReqTBE
 "£t˘-CîtReqTBE"

	)

3446 
	#NID_£t˘_CîtReqTBE
 595

	)

3447 
	#OBJ_£t˘_CîtReqTBE
 
OBJ_£t_˘y≥
,77L

	)

3449 
	#SN_£t˘_CîtReqTBEX
 "£t˘-CîtReqTBEX"

	)

3450 
	#NID_£t˘_CîtReqTBEX
 596

	)

3451 
	#OBJ_£t˘_CîtReqTBEX
 
OBJ_£t_˘y≥
,78L

	)

3453 
	#SN_£t˘_CîtResTBE
 "£t˘-CîtResTBE"

	)

3454 
	#NID_£t˘_CîtResTBE
 597

	)

3455 
	#OBJ_£t˘_CîtResTBE
 
OBJ_£t_˘y≥
,79L

	)

3457 
	#SN_£t˘_CRLNŸifiˇti⁄TBS
 "£t˘-CRLNŸifiˇti⁄TBS"

	)

3458 
	#NID_£t˘_CRLNŸifiˇti⁄TBS
 598

	)

3459 
	#OBJ_£t˘_CRLNŸifiˇti⁄TBS
 
OBJ_£t_˘y≥
,80L

	)

3461 
	#SN_£t˘_CRLNŸifiˇti⁄ResTBS
 "£t˘-CRLNŸifiˇti⁄ResTBS"

	)

3462 
	#NID_£t˘_CRLNŸifiˇti⁄ResTBS
 599

	)

3463 
	#OBJ_£t˘_CRLNŸifiˇti⁄ResTBS
 
OBJ_£t_˘y≥
,81L

	)

3465 
	#SN_£t˘_BCIDi°ributi⁄TBS
 "£t˘-BCIDi°ributi⁄TBS"

	)

3466 
	#NID_£t˘_BCIDi°ributi⁄TBS
 600

	)

3467 
	#OBJ_£t˘_BCIDi°ributi⁄TBS
 
OBJ_£t_˘y≥
,82L

	)

3469 
	#SN_£ãxt_gíCry±
 "£ãxt-gíCry±"

	)

3470 
	#LN_£ãxt_gíCry±
 "gíîi¯¸y±ogøm"

	)

3471 
	#NID_£ãxt_gíCry±
 601

	)

3472 
	#OBJ_£ãxt_gíCry±
 
OBJ_£t_msgExt
,1L

	)

3474 
	#SN_£ãxt_miAuth
 "£ãxt-miAuth"

	)

3475 
	#LN_£ãxt_miAuth
 "mîch™àöôüãdáuth"

	)

3476 
	#NID_£ãxt_miAuth
 602

	)

3477 
	#OBJ_£ãxt_miAuth
 
OBJ_£t_msgExt
,3L

	)

3479 
	#SN_£ãxt_pöSecuª
 "£ãxt-pöSecuª"

	)

3480 
	#NID_£ãxt_pöSecuª
 603

	)

3481 
	#OBJ_£ãxt_pöSecuª
 
OBJ_£t_msgExt
,4L

	)

3483 
	#SN_£ãxt_pöAny
 "£ãxt-pöAny"

	)

3484 
	#NID_£ãxt_pöAny
 604

	)

3485 
	#OBJ_£ãxt_pöAny
 
OBJ_£t_msgExt
,5L

	)

3487 
	#SN_£ãxt_åack2
 "£ãxt-åack2"

	)

3488 
	#NID_£ãxt_åack2
 605

	)

3489 
	#OBJ_£ãxt_åack2
 
OBJ_£t_msgExt
,7L

	)

3491 
	#SN_£ãxt_cv
 "£ãxt-cv"

	)

3492 
	#LN_£ãxt_cv
 "addôi⁄Æ vîifiˇti⁄"

	)

3493 
	#NID_£ãxt_cv
 606

	)

3494 
	#OBJ_£ãxt_cv
 
OBJ_£t_msgExt
,8L

	)

3496 
	#SN_£t_pﬁicy_roŸ
 "£t-pﬁicy-roŸ"

	)

3497 
	#NID_£t_pﬁicy_roŸ
 607

	)

3498 
	#OBJ_£t_pﬁicy_roŸ
 
OBJ_£t_pﬁicy
,0L

	)

3500 
	#SN_£tCext_hashedRoŸ
 "£tCext-hashedRoŸ"

	)

3501 
	#NID_£tCext_hashedRoŸ
 608

	)

3502 
	#OBJ_£tCext_hashedRoŸ
 
OBJ_£t_˚πExt
,0L

	)

3504 
	#SN_£tCext_˚πTy≥
 "£tCext-˚πTy≥"

	)

3505 
	#NID_£tCext_˚πTy≥
 609

	)

3506 
	#OBJ_£tCext_˚πTy≥
 
OBJ_£t_˚πExt
,1L

	)

3508 
	#SN_£tCext_mîchD©a
 "£tCext-mîchD©a"

	)

3509 
	#NID_£tCext_mîchD©a
 610

	)

3510 
	#OBJ_£tCext_mîchD©a
 
OBJ_£t_˚πExt
,2L

	)

3512 
	#SN_£tCext_cCîtRequúed
 "£tCext-cCîtRequúed"

	)

3513 
	#NID_£tCext_cCîtRequúed
 611

	)

3514 
	#OBJ_£tCext_cCîtRequúed
 
OBJ_£t_˚πExt
,3L

	)

3516 
	#SN_£tCext_tu¬ñög
 "£tCext-tu¬ñög"

	)

3517 
	#NID_£tCext_tu¬ñög
 612

	)

3518 
	#OBJ_£tCext_tu¬ñög
 
OBJ_£t_˚πExt
,4L

	)

3520 
	#SN_£tCext_£tExt
 "£tCext-£tExt"

	)

3521 
	#NID_£tCext_£tExt
 613

	)

3522 
	#OBJ_£tCext_£tExt
 
OBJ_£t_˚πExt
,5L

	)

3524 
	#SN_£tCext_£tQuÆf
 "£tCext-£tQuÆf"

	)

3525 
	#NID_£tCext_£tQuÆf
 614

	)

3526 
	#OBJ_£tCext_£tQuÆf
 
OBJ_£t_˚πExt
,6L

	)

3528 
	#SN_£tCext_PGWYˇ∑bûôõs
 "£tCext-PGWYˇ∑bûôõs"

	)

3529 
	#NID_£tCext_PGWYˇ∑bûôõs
 615

	)

3530 
	#OBJ_£tCext_PGWYˇ∑bûôõs
 
OBJ_£t_˚πExt
,7L

	)

3532 
	#SN_£tCext_TokíIdítifõr
 "£tCext-TokíIdítifõr"

	)

3533 
	#NID_£tCext_TokíIdítifõr
 616

	)

3534 
	#OBJ_£tCext_TokíIdítifõr
 
OBJ_£t_˚πExt
,8L

	)

3536 
	#SN_£tCext_Tøck2D©a
 "£tCext-Tøck2D©a"

	)

3537 
	#NID_£tCext_Tøck2D©a
 617

	)

3538 
	#OBJ_£tCext_Tøck2D©a
 
OBJ_£t_˚πExt
,9L

	)

3540 
	#SN_£tCext_TokíTy≥
 "£tCext-TokíTy≥"

	)

3541 
	#NID_£tCext_TokíTy≥
 618

	)

3542 
	#OBJ_£tCext_TokíTy≥
 
OBJ_£t_˚πExt
,10L

	)

3544 
	#SN_£tCext_IssuîC≠abûôõs
 "£tCext-IssuîC≠abûôõs"

	)

3545 
	#NID_£tCext_IssuîC≠abûôõs
 619

	)

3546 
	#OBJ_£tCext_IssuîC≠abûôõs
 
OBJ_£t_˚πExt
,11L

	)

3548 
	#SN_£tAâr_Cît
 "£tAâr-Cît"

	)

3549 
	#NID_£tAâr_Cît
 620

	)

3550 
	#OBJ_£tAâr_Cît
 
OBJ_£t_©å
,0L

	)

3552 
	#SN_£tAâr_PGWYˇp
 "£tAâr-PGWYˇp"

	)

3553 
	#LN_£tAâr_PGWYˇp
 "∑ymíàg©eway c≠abûôõs"

	)

3554 
	#NID_£tAâr_PGWYˇp
 621

	)

3555 
	#OBJ_£tAâr_PGWYˇp
 
OBJ_£t_©å
,1L

	)

3557 
	#SN_£tAâr_TokíTy≥
 "£tAâr-TokíTy≥"

	)

3558 
	#NID_£tAâr_TokíTy≥
 622

	)

3559 
	#OBJ_£tAâr_TokíTy≥
 
OBJ_£t_©å
,2L

	)

3561 
	#SN_£tAâr_IssC≠
 "£tAâr-IssC≠"

	)

3562 
	#LN_£tAâr_IssC≠
 "issuî c≠abûôõs"

	)

3563 
	#NID_£tAâr_IssC≠
 623

	)

3564 
	#OBJ_£tAâr_IssC≠
 
OBJ_£t_©å
,3L

	)

3566 
	#SN_£t_roŸKeyThumb
 "£t-roŸKeyThumb"

	)

3567 
	#NID_£t_roŸKeyThumb
 624

	)

3568 
	#OBJ_£t_roŸKeyThumb
 
OBJ_£tAâr_Cît
,0L

	)

3570 
	#SN_£t_addPﬁicy
 "£t-addPﬁicy"

	)

3571 
	#NID_£t_addPﬁicy
 625

	)

3572 
	#OBJ_£t_addPﬁicy
 
OBJ_£tAâr_Cît
,1L

	)

3574 
	#SN_£tAâr_Tokí_EMV
 "£tAâr-Tokí-EMV"

	)

3575 
	#NID_£tAâr_Tokí_EMV
 626

	)

3576 
	#OBJ_£tAâr_Tokí_EMV
 
OBJ_£tAâr_TokíTy≥
,1L

	)

3578 
	#SN_£tAâr_Tokí_B0Prime
 "£tAâr-Tokí-B0Prime"

	)

3579 
	#NID_£tAâr_Tokí_B0Prime
 627

	)

3580 
	#OBJ_£tAâr_Tokí_B0Prime
 
OBJ_£tAâr_TokíTy≥
,2L

	)

3582 
	#SN_£tAâr_IssC≠_CVM
 "£tAâr-IssC≠-CVM"

	)

3583 
	#NID_£tAâr_IssC≠_CVM
 628

	)

3584 
	#OBJ_£tAâr_IssC≠_CVM
 
OBJ_£tAâr_IssC≠
,3L

	)

3586 
	#SN_£tAâr_IssC≠_T2
 "£tAâr-IssC≠-T2"

	)

3587 
	#NID_£tAâr_IssC≠_T2
 629

	)

3588 
	#OBJ_£tAâr_IssC≠_T2
 
OBJ_£tAâr_IssC≠
,4L

	)

3590 
	#SN_£tAâr_IssC≠_Sig
 "£tAâr-IssC≠-Sig"

	)

3591 
	#NID_£tAâr_IssC≠_Sig
 630

	)

3592 
	#OBJ_£tAâr_IssC≠_Sig
 
OBJ_£tAâr_IssC≠
,5L

	)

3594 
	#SN_£tAâr_GíCry±grm
 "£tAâr-GíCry±grm"

	)

3595 
	#LN_£tAâr_GíCry±grm
 "gíî©ê¸y±ogøm"

	)

3596 
	#NID_£tAâr_GíCry±grm
 631

	)

3597 
	#OBJ_£tAâr_GíCry±grm
 
OBJ_£tAâr_IssC≠_CVM
,1L

	)

3599 
	#SN_£tAâr_T2Enc
 "£tAâr-T2Enc"

	)

3600 
	#LN_£tAâr_T2Enc
 "í¸y±edÅøck 2"

	)

3601 
	#NID_£tAâr_T2Enc
 632

	)

3602 
	#OBJ_£tAâr_T2Enc
 
OBJ_£tAâr_IssC≠_T2
,1L

	)

3604 
	#SN_£tAâr_T2˛óπxt
 "£tAâr-T2˛óπxt"

	)

3605 
	#LN_£tAâr_T2˛óπxt
 "˛óπexàåack 2"

	)

3606 
	#NID_£tAâr_T2˛óπxt
 633

	)

3607 
	#OBJ_£tAâr_T2˛óπxt
 
OBJ_£tAâr_IssC≠_T2
,2L

	)

3609 
	#SN_£tAâr_TokICCsig
 "£tAâr-TokICCsig"

	)

3610 
	#LN_£tAâr_TokICCsig
 "ICC o∏tokí sig«tuª"

	)

3611 
	#NID_£tAâr_TokICCsig
 634

	)

3612 
	#OBJ_£tAâr_TokICCsig
 
OBJ_£tAâr_IssC≠_Sig
,1L

	)

3614 
	#SN_£tAâr_SecDevSig
 "£tAâr-SecDevSig"

	)

3615 
	#LN_£tAâr_SecDevSig
 "£cuª devi˚ sig«tuª"

	)

3616 
	#NID_£tAâr_SecDevSig
 635

	)

3617 
	#OBJ_£tAâr_SecDevSig
 
OBJ_£tAâr_IssC≠_Sig
,2L

	)

3619 
	#SN_£t_bønd_IATA_ATA
 "£t-bønd-IATA-ATA"

	)

3620 
	#NID_£t_bønd_IATA_ATA
 636

	)

3621 
	#OBJ_£t_bønd_IATA_ATA
 
OBJ_£t_bønd
,1L

	)

3623 
	#SN_£t_bønd_Döîs
 "£t-bønd-Döîs"

	)

3624 
	#NID_£t_bønd_Döîs
 637

	)

3625 
	#OBJ_£t_bønd_Döîs
 
OBJ_£t_bønd
,30L

	)

3627 
	#SN_£t_bønd_AmîiˇnEx¥ess
 "£t-bønd-AmîiˇnEx¥ess"

	)

3628 
	#NID_£t_bønd_AmîiˇnEx¥ess
 638

	)

3629 
	#OBJ_£t_bønd_AmîiˇnEx¥ess
 
OBJ_£t_bønd
,34L

	)

3631 
	#SN_£t_bønd_JCB
 "£t-bønd-JCB"

	)

3632 
	#NID_£t_bønd_JCB
 639

	)

3633 
	#OBJ_£t_bønd_JCB
 
OBJ_£t_bønd
,35L

	)

3635 
	#SN_£t_bønd_Viß
 "£t-bønd-Viß"

	)

3636 
	#NID_£t_bønd_Viß
 640

	)

3637 
	#OBJ_£t_bønd_Viß
 
OBJ_£t_bønd
,4L

	)

3639 
	#SN_£t_bønd_Ma°îC¨d
 "£t-bønd-Ma°îC¨d"

	)

3640 
	#NID_£t_bønd_Ma°îC¨d
 641

	)

3641 
	#OBJ_£t_bønd_Ma°îC¨d
 
OBJ_£t_bønd
,5L

	)

3643 
	#SN_£t_bønd_Novus
 "£t-bønd-Novus"

	)

3644 
	#NID_£t_bønd_Novus
 642

	)

3645 
	#OBJ_£t_bønd_Novus
 
OBJ_£t_bønd
,6011L

	)

3647 
	#SN_des_cdmf
 "DES-CDMF"

	)

3648 
	#LN_des_cdmf
 "des-cdmf"

	)

3649 
	#NID_des_cdmf
 643

	)

3650 
	#OBJ_des_cdmf
 
OBJ_rßdsi
,3L,10L

	)

3652 
	#SN_rßOAEPEn¸y±i⁄SET
 "rßOAEPEn¸y±i⁄SET"

	)

3653 
	#NID_rßOAEPEn¸y±i⁄SET
 644

	)

3654 
	#OBJ_rßOAEPEn¸y±i⁄SET
 
OBJ_rßdsi
,1L,1L,6L

	)

3656 
	#SN_ù£c3
 "OakÀy-EC2N-3"

	)

3657 
	#LN_ù£c3
 "ù£c3"

	)

3658 
	#NID_ù£c3
 749

	)

3660 
	#SN_ù£c4
 "OakÀy-EC2N-4"

	)

3661 
	#LN_ù£c4
 "ù£c4"

	)

3662 
	#NID_ù£c4
 750

	)

3664 
	#SN_whúÕoﬁ
 "whúÕoﬁ"

	)

3665 
	#NID_whúÕoﬁ
 804

	)

3666 
	#OBJ_whúÕoﬁ
 
OBJ_iso
,0L,10118L,3L,0L,55L

	)

3668 
	#SN_¸y±›ro
 "¸y±›ro"

	)

3669 
	#NID_¸y±›ro
 805

	)

3670 
	#OBJ_¸y±›ro
 
OBJ_membî_body
,643L,2L,2L

	)

3672 
	#SN_¸y±ocom
 "¸y±ocom"

	)

3673 
	#NID_¸y±ocom
 806

	)

3674 
	#OBJ_¸y±ocom
 
OBJ_membî_body
,643L,2L,9L

	)

3676 
	#SN_id_Go°R3411_94_wôh_Go°R3410_2001
 "id-Go°R3411-94-wôh-Go°R3410-2001"

	)

3677 
	#LN_id_Go°R3411_94_wôh_Go°R3410_2001
 "GOST R 34.11-94 wôh GOST R 34.10-2001"

	)

3678 
	#NID_id_Go°R3411_94_wôh_Go°R3410_2001
 807

	)

3679 
	#OBJ_id_Go°R3411_94_wôh_Go°R3410_2001
 
OBJ_¸y±›ro
,3L

	)

3681 
	#SN_id_Go°R3411_94_wôh_Go°R3410_94
 "id-Go°R3411-94-wôh-Go°R3410-94"

	)

3682 
	#LN_id_Go°R3411_94_wôh_Go°R3410_94
 "GOST R 34.11-94 wôh GOST R 34.10-94"

	)

3683 
	#NID_id_Go°R3411_94_wôh_Go°R3410_94
 808

	)

3684 
	#OBJ_id_Go°R3411_94_wôh_Go°R3410_94
 
OBJ_¸y±›ro
,4L

	)

3686 
	#SN_id_Go°R3411_94
 "md_go°94"

	)

3687 
	#LN_id_Go°R3411_94
 "GOST R 34.11-94"

	)

3688 
	#NID_id_Go°R3411_94
 809

	)

3689 
	#OBJ_id_Go°R3411_94
 
OBJ_¸y±›ro
,9L

	)

3691 
	#SN_id_HMACGo°R3411_94
 "id-HMACGo°R3411-94"

	)

3692 
	#LN_id_HMACGo°R3411_94
 "HMAC GOST 34.11-94"

	)

3693 
	#NID_id_HMACGo°R3411_94
 810

	)

3694 
	#OBJ_id_HMACGo°R3411_94
 
OBJ_¸y±›ro
,10L

	)

3696 
	#SN_id_Go°R3410_2001
 "go°2001"

	)

3697 
	#LN_id_Go°R3410_2001
 "GOST R 34.10-2001"

	)

3698 
	#NID_id_Go°R3410_2001
 811

	)

3699 
	#OBJ_id_Go°R3410_2001
 
OBJ_¸y±›ro
,19L

	)

3701 
	#SN_id_Go°R3410_94
 "go°94"

	)

3702 
	#LN_id_Go°R3410_94
 "GOST R 34.10-94"

	)

3703 
	#NID_id_Go°R3410_94
 812

	)

3704 
	#OBJ_id_Go°R3410_94
 
OBJ_¸y±›ro
,20L

	)

3706 
	#SN_id_Go°28147_89
 "go°89"

	)

3707 
	#LN_id_Go°28147_89
 "GOST 28147-89"

	)

3708 
	#NID_id_Go°28147_89
 813

	)

3709 
	#OBJ_id_Go°28147_89
 
OBJ_¸y±›ro
,21L

	)

3711 
	#SN_go°89_˙t
 "go°89-˙t"

	)

3712 
	#NID_go°89_˙t
 814

	)

3714 
	#SN_id_Go°28147_89_MAC
 "go°-mac"

	)

3715 
	#LN_id_Go°28147_89_MAC
 "GOST 28147-89 MAC"

	)

3716 
	#NID_id_Go°28147_89_MAC
 815

	)

3717 
	#OBJ_id_Go°28147_89_MAC
 
OBJ_¸y±›ro
,22L

	)

3719 
	#SN_id_Go°R3411_94_¥f
 "¥f-go°r3411-94"

	)

3720 
	#LN_id_Go°R3411_94_¥f
 "GOST R 34.11-94 PRF"

	)

3721 
	#NID_id_Go°R3411_94_¥f
 816

	)

3722 
	#OBJ_id_Go°R3411_94_¥f
 
OBJ_¸y±›ro
,23L

	)

3724 
	#SN_id_Go°R3410_2001DH
 "id-Go°R3410-2001DH"

	)

3725 
	#LN_id_Go°R3410_2001DH
 "GOST R 34.10-2001 DH"

	)

3726 
	#NID_id_Go°R3410_2001DH
 817

	)

3727 
	#OBJ_id_Go°R3410_2001DH
 
OBJ_¸y±›ro
,98L

	)

3729 
	#SN_id_Go°R3410_94DH
 "id-Go°R3410-94DH"

	)

3730 
	#LN_id_Go°R3410_94DH
 "GOST R 34.10-94 DH"

	)

3731 
	#NID_id_Go°R3410_94DH
 818

	)

3732 
	#OBJ_id_Go°R3410_94DH
 
OBJ_¸y±›ro
,99L

	)

3734 
	#SN_id_Go°28147_89_Cry±oPro_KeyMeshög
 "id-Go°28147-89-Cry±oPro-KeyMeshög"

	)

3735 
	#NID_id_Go°28147_89_Cry±oPro_KeyMeshög
 819

	)

3736 
	#OBJ_id_Go°28147_89_Cry±oPro_KeyMeshög
 
OBJ_¸y±›ro
,14L,1L

	)

3738 
	#SN_id_Go°28147_89_N⁄e_KeyMeshög
 "id-Go°28147-89-N⁄e-KeyMeshög"

	)

3739 
	#NID_id_Go°28147_89_N⁄e_KeyMeshög
 820

	)

3740 
	#OBJ_id_Go°28147_89_N⁄e_KeyMeshög
 
OBJ_¸y±›ro
,14L,0L

	)

3742 
	#SN_id_Go°R3411_94_Te°P¨amSë
 "id-Go°R3411-94-Te°P¨amSë"

	)

3743 
	#NID_id_Go°R3411_94_Te°P¨amSë
 821

	)

3744 
	#OBJ_id_Go°R3411_94_Te°P¨amSë
 
OBJ_¸y±›ro
,30L,0L

	)

3746 
	#SN_id_Go°R3411_94_Cry±oProP¨amSë
 "id-Go°R3411-94-Cry±oProP¨amSë"

	)

3747 
	#NID_id_Go°R3411_94_Cry±oProP¨amSë
 822

	)

3748 
	#OBJ_id_Go°R3411_94_Cry±oProP¨amSë
 
OBJ_¸y±›ro
,30L,1L

	)

3750 
	#SN_id_Go°28147_89_Te°P¨amSë
 "id-Go°28147-89-Te°P¨amSë"

	)

3751 
	#NID_id_Go°28147_89_Te°P¨amSë
 823

	)

3752 
	#OBJ_id_Go°28147_89_Te°P¨amSë
 
OBJ_¸y±›ro
,31L,0L

	)

3754 
	#SN_id_Go°28147_89_Cry±oPro_A_P¨amSë
 "id-Go°28147-89-Cry±oPro-A-P¨amSë"

	)

3755 
	#NID_id_Go°28147_89_Cry±oPro_A_P¨amSë
 824

	)

3756 
	#OBJ_id_Go°28147_89_Cry±oPro_A_P¨amSë
 
OBJ_¸y±›ro
,31L,1L

	)

3758 
	#SN_id_Go°28147_89_Cry±oPro_B_P¨amSë
 "id-Go°28147-89-Cry±oPro-B-P¨amSë"

	)

3759 
	#NID_id_Go°28147_89_Cry±oPro_B_P¨amSë
 825

	)

3760 
	#OBJ_id_Go°28147_89_Cry±oPro_B_P¨amSë
 
OBJ_¸y±›ro
,31L,2L

	)

3762 
	#SN_id_Go°28147_89_Cry±oPro_C_P¨amSë
 "id-Go°28147-89-Cry±oPro-C-P¨amSë"

	)

3763 
	#NID_id_Go°28147_89_Cry±oPro_C_P¨amSë
 826

	)

3764 
	#OBJ_id_Go°28147_89_Cry±oPro_C_P¨amSë
 
OBJ_¸y±›ro
,31L,3L

	)

3766 
	#SN_id_Go°28147_89_Cry±oPro_D_P¨amSë
 "id-Go°28147-89-Cry±oPro-D-P¨amSë"

	)

3767 
	#NID_id_Go°28147_89_Cry±oPro_D_P¨amSë
 827

	)

3768 
	#OBJ_id_Go°28147_89_Cry±oPro_D_P¨amSë
 
OBJ_¸y±›ro
,31L,4L

	)

3770 
	#SN_id_Go°28147_89_Cry±oPro_Osˇr_1_1_P¨amSë
 "id-Go°28147-89-Cry±oPro-Osˇr-1-1-P¨amSë"

	)

3771 
	#NID_id_Go°28147_89_Cry±oPro_Osˇr_1_1_P¨amSë
 828

	)

3772 
	#OBJ_id_Go°28147_89_Cry±oPro_Osˇr_1_1_P¨amSë
 
OBJ_¸y±›ro
,31L,5L

	)

3774 
	#SN_id_Go°28147_89_Cry±oPro_Osˇr_1_0_P¨amSë
 "id-Go°28147-89-Cry±oPro-Osˇr-1-0-P¨amSë"

	)

3775 
	#NID_id_Go°28147_89_Cry±oPro_Osˇr_1_0_P¨amSë
 829

	)

3776 
	#OBJ_id_Go°28147_89_Cry±oPro_Osˇr_1_0_P¨amSë
 
OBJ_¸y±›ro
,31L,6L

	)

3778 
	#SN_id_Go°28147_89_Cry±oPro_RIC_1_P¨amSë
 "id-Go°28147-89-Cry±oPro-RIC-1-P¨amSë"

	)

3779 
	#NID_id_Go°28147_89_Cry±oPro_RIC_1_P¨amSë
 830

	)

3780 
	#OBJ_id_Go°28147_89_Cry±oPro_RIC_1_P¨amSë
 
OBJ_¸y±›ro
,31L,7L

	)

3782 
	#SN_id_Go°R3410_94_Te°P¨amSë
 "id-Go°R3410-94-Te°P¨amSë"

	)

3783 
	#NID_id_Go°R3410_94_Te°P¨amSë
 831

	)

3784 
	#OBJ_id_Go°R3410_94_Te°P¨amSë
 
OBJ_¸y±›ro
,32L,0L

	)

3786 
	#SN_id_Go°R3410_94_Cry±oPro_A_P¨amSë
 "id-Go°R3410-94-Cry±oPro-A-P¨amSë"

	)

3787 
	#NID_id_Go°R3410_94_Cry±oPro_A_P¨amSë
 832

	)

3788 
	#OBJ_id_Go°R3410_94_Cry±oPro_A_P¨amSë
 
OBJ_¸y±›ro
,32L,2L

	)

3790 
	#SN_id_Go°R3410_94_Cry±oPro_B_P¨amSë
 "id-Go°R3410-94-Cry±oPro-B-P¨amSë"

	)

3791 
	#NID_id_Go°R3410_94_Cry±oPro_B_P¨amSë
 833

	)

3792 
	#OBJ_id_Go°R3410_94_Cry±oPro_B_P¨amSë
 
OBJ_¸y±›ro
,32L,3L

	)

3794 
	#SN_id_Go°R3410_94_Cry±oPro_C_P¨amSë
 "id-Go°R3410-94-Cry±oPro-C-P¨amSë"

	)

3795 
	#NID_id_Go°R3410_94_Cry±oPro_C_P¨amSë
 834

	)

3796 
	#OBJ_id_Go°R3410_94_Cry±oPro_C_P¨amSë
 
OBJ_¸y±›ro
,32L,4L

	)

3798 
	#SN_id_Go°R3410_94_Cry±oPro_D_P¨amSë
 "id-Go°R3410-94-Cry±oPro-D-P¨amSë"

	)

3799 
	#NID_id_Go°R3410_94_Cry±oPro_D_P¨amSë
 835

	)

3800 
	#OBJ_id_Go°R3410_94_Cry±oPro_D_P¨amSë
 
OBJ_¸y±›ro
,32L,5L

	)

3802 
	#SN_id_Go°R3410_94_Cry±oPro_XchA_P¨amSë
 "id-Go°R3410-94-Cry±oPro-XchA-P¨amSë"

	)

3803 
	#NID_id_Go°R3410_94_Cry±oPro_XchA_P¨amSë
 836

	)

3804 
	#OBJ_id_Go°R3410_94_Cry±oPro_XchA_P¨amSë
 
OBJ_¸y±›ro
,33L,1L

	)

3806 
	#SN_id_Go°R3410_94_Cry±oPro_XchB_P¨amSë
 "id-Go°R3410-94-Cry±oPro-XchB-P¨amSë"

	)

3807 
	#NID_id_Go°R3410_94_Cry±oPro_XchB_P¨amSë
 837

	)

3808 
	#OBJ_id_Go°R3410_94_Cry±oPro_XchB_P¨amSë
 
OBJ_¸y±›ro
,33L,2L

	)

3810 
	#SN_id_Go°R3410_94_Cry±oPro_XchC_P¨amSë
 "id-Go°R3410-94-Cry±oPro-XchC-P¨amSë"

	)

3811 
	#NID_id_Go°R3410_94_Cry±oPro_XchC_P¨amSë
 838

	)

3812 
	#OBJ_id_Go°R3410_94_Cry±oPro_XchC_P¨amSë
 
OBJ_¸y±›ro
,33L,3L

	)

3814 
	#SN_id_Go°R3410_2001_Te°P¨amSë
 "id-Go°R3410-2001-Te°P¨amSë"

	)

3815 
	#NID_id_Go°R3410_2001_Te°P¨amSë
 839

	)

3816 
	#OBJ_id_Go°R3410_2001_Te°P¨amSë
 
OBJ_¸y±›ro
,35L,0L

	)

3818 
	#SN_id_Go°R3410_2001_Cry±oPro_A_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-A-P¨amSë"

	)

3819 
	#NID_id_Go°R3410_2001_Cry±oPro_A_P¨amSë
 840

	)

3820 
	#OBJ_id_Go°R3410_2001_Cry±oPro_A_P¨amSë
 
OBJ_¸y±›ro
,35L,1L

	)

3822 
	#SN_id_Go°R3410_2001_Cry±oPro_B_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-B-P¨amSë"

	)

3823 
	#NID_id_Go°R3410_2001_Cry±oPro_B_P¨amSë
 841

	)

3824 
	#OBJ_id_Go°R3410_2001_Cry±oPro_B_P¨amSë
 
OBJ_¸y±›ro
,35L,2L

	)

3826 
	#SN_id_Go°R3410_2001_Cry±oPro_C_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-C-P¨amSë"

	)

3827 
	#NID_id_Go°R3410_2001_Cry±oPro_C_P¨amSë
 842

	)

3828 
	#OBJ_id_Go°R3410_2001_Cry±oPro_C_P¨amSë
 
OBJ_¸y±›ro
,35L,3L

	)

3830 
	#SN_id_Go°R3410_2001_Cry±oPro_XchA_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-XchA-P¨amSë"

	)

3831 
	#NID_id_Go°R3410_2001_Cry±oPro_XchA_P¨amSë
 843

	)

3832 
	#OBJ_id_Go°R3410_2001_Cry±oPro_XchA_P¨amSë
 
OBJ_¸y±›ro
,36L,0L

	)

3834 
	#SN_id_Go°R3410_2001_Cry±oPro_XchB_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-XchB-P¨amSë"

	)

3835 
	#NID_id_Go°R3410_2001_Cry±oPro_XchB_P¨amSë
 844

	)

3836 
	#OBJ_id_Go°R3410_2001_Cry±oPro_XchB_P¨amSë
 
OBJ_¸y±›ro
,36L,1L

	)

3838 
	#SN_id_Go°R3410_94_a
 "id-Go°R3410-94-a"

	)

3839 
	#NID_id_Go°R3410_94_a
 845

	)

3840 
	#OBJ_id_Go°R3410_94_a
 
OBJ_id_Go°R3410_94
,1L

	)

3842 
	#SN_id_Go°R3410_94_aBis
 "id-Go°R3410-94-aBis"

	)

3843 
	#NID_id_Go°R3410_94_aBis
 846

	)

3844 
	#OBJ_id_Go°R3410_94_aBis
 
OBJ_id_Go°R3410_94
,2L

	)

3846 
	#SN_id_Go°R3410_94_b
 "id-Go°R3410-94-b"

	)

3847 
	#NID_id_Go°R3410_94_b
 847

	)

3848 
	#OBJ_id_Go°R3410_94_b
 
OBJ_id_Go°R3410_94
,3L

	)

3850 
	#SN_id_Go°R3410_94_bBis
 "id-Go°R3410-94-bBis"

	)

3851 
	#NID_id_Go°R3410_94_bBis
 848

	)

3852 
	#OBJ_id_Go°R3410_94_bBis
 
OBJ_id_Go°R3410_94
,4L

	)

3854 
	#SN_id_Go°28147_89_cc
 "id-Go°28147-89-cc"

	)

3855 
	#LN_id_Go°28147_89_cc
 "GOST 28147-89 Cry±ocom P¨amSë"

	)

3856 
	#NID_id_Go°28147_89_cc
 849

	)

3857 
	#OBJ_id_Go°28147_89_cc
 
OBJ_¸y±ocom
,1L,6L,1L

	)

3859 
	#SN_id_Go°R3410_94_cc
 "go°94cc"

	)

3860 
	#LN_id_Go°R3410_94_cc
 "GOST 34.10-94 Cry±ocom"

	)

3861 
	#NID_id_Go°R3410_94_cc
 850

	)

3862 
	#OBJ_id_Go°R3410_94_cc
 
OBJ_¸y±ocom
,1L,5L,3L

	)

3864 
	#SN_id_Go°R3410_2001_cc
 "go°2001cc"

	)

3865 
	#LN_id_Go°R3410_2001_cc
 "GOST 34.10-2001 Cry±ocom"

	)

3866 
	#NID_id_Go°R3410_2001_cc
 851

	)

3867 
	#OBJ_id_Go°R3410_2001_cc
 
OBJ_¸y±ocom
,1L,5L,4L

	)

3869 
	#SN_id_Go°R3411_94_wôh_Go°R3410_94_cc
 "id-Go°R3411-94-wôh-Go°R3410-94-cc"

	)

3870 
	#LN_id_Go°R3411_94_wôh_Go°R3410_94_cc
 "GOST R 34.11-94 wôh GOST R 34.10-94 Cry±ocom"

	)

3871 
	#NID_id_Go°R3411_94_wôh_Go°R3410_94_cc
 852

	)

3872 
	#OBJ_id_Go°R3411_94_wôh_Go°R3410_94_cc
 
OBJ_¸y±ocom
,1L,3L,3L

	)

3874 
	#SN_id_Go°R3411_94_wôh_Go°R3410_2001_cc
 "id-Go°R3411-94-wôh-Go°R3410-2001-cc"

	)

3875 
	#LN_id_Go°R3411_94_wôh_Go°R3410_2001_cc
 "GOST R 34.11-94 wôh GOST R 34.10-2001 Cry±ocom"

	)

3876 
	#NID_id_Go°R3411_94_wôh_Go°R3410_2001_cc
 853

	)

3877 
	#OBJ_id_Go°R3411_94_wôh_Go°R3410_2001_cc
 
OBJ_¸y±ocom
,1L,3L,4L

	)

3879 
	#SN_id_Go°R3410_2001_P¨amSë_cc
 "id-Go°R3410-2001-P¨amSë-cc"

	)

3880 
	#LN_id_Go°R3410_2001_P¨amSë_cc
 "GOST R 3410-2001 P¨amëî Së Cry±ocom"

	)

3881 
	#NID_id_Go°R3410_2001_P¨amSë_cc
 854

	)

3882 
	#OBJ_id_Go°R3410_2001_P¨amSë_cc
 
OBJ_¸y±ocom
,1L,8L,1L

	)

3884 
	#SN_ˇmñlü_128_cbc
 "CAMELLIA-128-CBC"

	)

3885 
	#LN_ˇmñlü_128_cbc
 "ˇmñlü-128-cbc"

	)

3886 
	#NID_ˇmñlü_128_cbc
 751

	)

3887 
	#OBJ_ˇmñlü_128_cbc
 1L,2L,392L,200011L,61L,1L,1L,1L,2L

	)

3889 
	#SN_ˇmñlü_192_cbc
 "CAMELLIA-192-CBC"

	)

3890 
	#LN_ˇmñlü_192_cbc
 "ˇmñlü-192-cbc"

	)

3891 
	#NID_ˇmñlü_192_cbc
 752

	)

3892 
	#OBJ_ˇmñlü_192_cbc
 1L,2L,392L,200011L,61L,1L,1L,1L,3L

	)

3894 
	#SN_ˇmñlü_256_cbc
 "CAMELLIA-256-CBC"

	)

3895 
	#LN_ˇmñlü_256_cbc
 "ˇmñlü-256-cbc"

	)

3896 
	#NID_ˇmñlü_256_cbc
 753

	)

3897 
	#OBJ_ˇmñlü_256_cbc
 1L,2L,392L,200011L,61L,1L,1L,1L,4L

	)

3899 
	#SN_id_ˇmñlü128_wøp
 "id-ˇmñlü128-wøp"

	)

3900 
	#NID_id_ˇmñlü128_wøp
 907

	)

3901 
	#OBJ_id_ˇmñlü128_wøp
 1L,2L,392L,200011L,61L,1L,1L,3L,2L

	)

3903 
	#SN_id_ˇmñlü192_wøp
 "id-ˇmñlü192-wøp"

	)

3904 
	#NID_id_ˇmñlü192_wøp
 908

	)

3905 
	#OBJ_id_ˇmñlü192_wøp
 1L,2L,392L,200011L,61L,1L,1L,3L,3L

	)

3907 
	#SN_id_ˇmñlü256_wøp
 "id-ˇmñlü256-wøp"

	)

3908 
	#NID_id_ˇmñlü256_wøp
 909

	)

3909 
	#OBJ_id_ˇmñlü256_wøp
 1L,2L,392L,200011L,61L,1L,1L,3L,4L

	)

3911 
	#OBJ_¡t_ds
 0L,3L,4401L,5L

	)

3913 
	#OBJ_ˇmñlü
 
OBJ_¡t_ds
,3L,1L,9L

	)

3915 
	#SN_ˇmñlü_128_ecb
 "CAMELLIA-128-ECB"

	)

3916 
	#LN_ˇmñlü_128_ecb
 "ˇmñlü-128-ecb"

	)

3917 
	#NID_ˇmñlü_128_ecb
 754

	)

3918 
	#OBJ_ˇmñlü_128_ecb
 
OBJ_ˇmñlü
,1L

	)

3920 
	#SN_ˇmñlü_128_ofb128
 "CAMELLIA-128-OFB"

	)

3921 
	#LN_ˇmñlü_128_ofb128
 "ˇmñlü-128-ofb"

	)

3922 
	#NID_ˇmñlü_128_ofb128
 766

	)

3923 
	#OBJ_ˇmñlü_128_ofb128
 
OBJ_ˇmñlü
,3L

	)

3925 
	#SN_ˇmñlü_128_cfb128
 "CAMELLIA-128-CFB"

	)

3926 
	#LN_ˇmñlü_128_cfb128
 "ˇmñlü-128-cfb"

	)

3927 
	#NID_ˇmñlü_128_cfb128
 757

	)

3928 
	#OBJ_ˇmñlü_128_cfb128
 
OBJ_ˇmñlü
,4L

	)

3930 
	#SN_ˇmñlü_192_ecb
 "CAMELLIA-192-ECB"

	)

3931 
	#LN_ˇmñlü_192_ecb
 "ˇmñlü-192-ecb"

	)

3932 
	#NID_ˇmñlü_192_ecb
 755

	)

3933 
	#OBJ_ˇmñlü_192_ecb
 
OBJ_ˇmñlü
,21L

	)

3935 
	#SN_ˇmñlü_192_ofb128
 "CAMELLIA-192-OFB"

	)

3936 
	#LN_ˇmñlü_192_ofb128
 "ˇmñlü-192-ofb"

	)

3937 
	#NID_ˇmñlü_192_ofb128
 767

	)

3938 
	#OBJ_ˇmñlü_192_ofb128
 
OBJ_ˇmñlü
,23L

	)

3940 
	#SN_ˇmñlü_192_cfb128
 "CAMELLIA-192-CFB"

	)

3941 
	#LN_ˇmñlü_192_cfb128
 "ˇmñlü-192-cfb"

	)

3942 
	#NID_ˇmñlü_192_cfb128
 758

	)

3943 
	#OBJ_ˇmñlü_192_cfb128
 
OBJ_ˇmñlü
,24L

	)

3945 
	#SN_ˇmñlü_256_ecb
 "CAMELLIA-256-ECB"

	)

3946 
	#LN_ˇmñlü_256_ecb
 "ˇmñlü-256-ecb"

	)

3947 
	#NID_ˇmñlü_256_ecb
 756

	)

3948 
	#OBJ_ˇmñlü_256_ecb
 
OBJ_ˇmñlü
,41L

	)

3950 
	#SN_ˇmñlü_256_ofb128
 "CAMELLIA-256-OFB"

	)

3951 
	#LN_ˇmñlü_256_ofb128
 "ˇmñlü-256-ofb"

	)

3952 
	#NID_ˇmñlü_256_ofb128
 768

	)

3953 
	#OBJ_ˇmñlü_256_ofb128
 
OBJ_ˇmñlü
,43L

	)

3955 
	#SN_ˇmñlü_256_cfb128
 "CAMELLIA-256-CFB"

	)

3956 
	#LN_ˇmñlü_256_cfb128
 "ˇmñlü-256-cfb"

	)

3957 
	#NID_ˇmñlü_256_cfb128
 759

	)

3958 
	#OBJ_ˇmñlü_256_cfb128
 
OBJ_ˇmñlü
,44L

	)

3960 
	#SN_ˇmñlü_128_cfb1
 "CAMELLIA-128-CFB1"

	)

3961 
	#LN_ˇmñlü_128_cfb1
 "ˇmñlü-128-cfb1"

	)

3962 
	#NID_ˇmñlü_128_cfb1
 760

	)

3964 
	#SN_ˇmñlü_192_cfb1
 "CAMELLIA-192-CFB1"

	)

3965 
	#LN_ˇmñlü_192_cfb1
 "ˇmñlü-192-cfb1"

	)

3966 
	#NID_ˇmñlü_192_cfb1
 761

	)

3968 
	#SN_ˇmñlü_256_cfb1
 "CAMELLIA-256-CFB1"

	)

3969 
	#LN_ˇmñlü_256_cfb1
 "ˇmñlü-256-cfb1"

	)

3970 
	#NID_ˇmñlü_256_cfb1
 762

	)

3972 
	#SN_ˇmñlü_128_cfb8
 "CAMELLIA-128-CFB8"

	)

3973 
	#LN_ˇmñlü_128_cfb8
 "ˇmñlü-128-cfb8"

	)

3974 
	#NID_ˇmñlü_128_cfb8
 763

	)

3976 
	#SN_ˇmñlü_192_cfb8
 "CAMELLIA-192-CFB8"

	)

3977 
	#LN_ˇmñlü_192_cfb8
 "ˇmñlü-192-cfb8"

	)

3978 
	#NID_ˇmñlü_192_cfb8
 764

	)

3980 
	#SN_ˇmñlü_256_cfb8
 "CAMELLIA-256-CFB8"

	)

3981 
	#LN_ˇmñlü_256_cfb8
 "ˇmñlü-256-cfb8"

	)

3982 
	#NID_ˇmñlü_256_cfb8
 765

	)

3984 
	#SN_kiß
 "KISA"

	)

3985 
	#LN_kiß
 "kiß"

	)

3986 
	#NID_kiß
 773

	)

3987 
	#OBJ_kiß
 
OBJ_membî_body
,410L,200004L

	)

3989 
	#SN_£ed_ecb
 "SEED-ECB"

	)

3990 
	#LN_£ed_ecb
 "£ed-ecb"

	)

3991 
	#NID_£ed_ecb
 776

	)

3992 
	#OBJ_£ed_ecb
 
OBJ_kiß
,1L,3L

	)

3994 
	#SN_£ed_cbc
 "SEED-CBC"

	)

3995 
	#LN_£ed_cbc
 "£ed-cbc"

	)

3996 
	#NID_£ed_cbc
 777

	)

3997 
	#OBJ_£ed_cbc
 
OBJ_kiß
,1L,4L

	)

3999 
	#SN_£ed_cfb128
 "SEED-CFB"

	)

4000 
	#LN_£ed_cfb128
 "£ed-cfb"

	)

4001 
	#NID_£ed_cfb128
 779

	)

4002 
	#OBJ_£ed_cfb128
 
OBJ_kiß
,1L,5L

	)

4004 
	#SN_£ed_ofb128
 "SEED-OFB"

	)

4005 
	#LN_£ed_ofb128
 "£ed-ofb"

	)

4006 
	#NID_£ed_ofb128
 778

	)

4007 
	#OBJ_£ed_ofb128
 
OBJ_kiß
,1L,6L

	)

4009 
	#SN_hmac
 "HMAC"

	)

4010 
	#LN_hmac
 "hmac"

	)

4011 
	#NID_hmac
 855

	)

4013 
	#SN_cmac
 "CMAC"

	)

4014 
	#LN_cmac
 "cmac"

	)

4015 
	#NID_cmac
 894

	)

4017 
	#SN_rc4_hmac_md5
 "RC4-HMAC-MD5"

	)

4018 
	#LN_rc4_hmac_md5
 "rc4-hmac-md5"

	)

4019 
	#NID_rc4_hmac_md5
 915

	)

4021 
	#SN_´s_128_cbc_hmac_sha1
 "AES-128-CBC-HMAC-SHA1"

	)

4022 
	#LN_´s_128_cbc_hmac_sha1
 "´s-128-cbc-hmac-sha1"

	)

4023 
	#NID_´s_128_cbc_hmac_sha1
 916

	)

4025 
	#SN_´s_192_cbc_hmac_sha1
 "AES-192-CBC-HMAC-SHA1"

	)

4026 
	#LN_´s_192_cbc_hmac_sha1
 "´s-192-cbc-hmac-sha1"

	)

4027 
	#NID_´s_192_cbc_hmac_sha1
 917

	)

4029 
	#SN_´s_256_cbc_hmac_sha1
 "AES-256-CBC-HMAC-SHA1"

	)

4030 
	#LN_´s_256_cbc_hmac_sha1
 "´s-256-cbc-hmac-sha1"

	)

4031 
	#NID_´s_256_cbc_hmac_sha1
 918

	)

	@/usr/include/wctype.h

23 #i‚de‡
_WCTYPE_H


25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 #i‚de‡
__√ed_iswxxx


29 
	#_WCTYPE_H
 1

	)

32 
	#__√ed_wöt_t


	)

33 
	~<wch¨.h
>

37 #i‚de‡
WEOF


38 
	#WEOF
 (0xffffffffu)

	)

41 #unde‡
__√ed_iswxxx


46 #i‚de‡
__iswxxx_deföed


47 
	#__iswxxx_deföed
 1

	)

49 
__BEGIN_NAMESPACE_C99


52 
	tw˘y≥_t
;

53 
	g__END_NAMESPACE_C99


55 #i‚de‡
_ISwbô


60 
	~<ídün.h
>

61 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


62 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

64 
	#_ISwbô
(
bô
) \

65 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

66 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

67 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

68 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

73 
	m__ISwuµî
 = 0,

74 
	m__ISwlowî
 = 1,

75 
	m__ISwÆpha
 = 2,

76 
	m__ISwdigô
 = 3,

77 
	m__ISwxdigô
 = 4,

78 
	m__ISw•a˚
 = 5,

79 
	m__ISw¥öt
 = 6,

80 
	m__ISwgøph
 = 7,

81 
	m__ISwbœnk
 = 8,

82 
	m__ISw˙ål
 = 9,

83 
	m__ISwpun˘
 = 10,

84 
	m__ISwÆnum
 = 11,

86 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

87 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

88 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

89 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

90 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

91 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

92 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

93 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

94 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

95 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

96 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

97 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

102 
__BEGIN_DECLS


104 
__BEGIN_NAMESPACE_C99


111 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

117 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

120 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

124 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

128 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

133 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

136 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

141 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

146 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

151 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

156 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

161 #ifde‡
__USE_ISOC99


162 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

171 
w˘y≥_t
 
	$w˘y≥
 (c⁄° *
__¥›îty
Ë
__THROW
;

175 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

176 
__END_NAMESPACE_C99


183 
__BEGIN_NAMESPACE_C99


186 c⁄° 
	t__öt32_t
 *
	tw˘øns_t
;

187 
__END_NAMESPACE_C99


188 #ifde‡
__USE_GNU


189 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

192 
__BEGIN_NAMESPACE_C99


194 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

197 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
__END_NAMESPACE_C99


200 
__END_DECLS


207 #ifde‡
_WCTYPE_H


213 
__BEGIN_DECLS


215 
__BEGIN_NAMESPACE_C99


218 
w˘øns_t
 
	$w˘øns
 (c⁄° *
__¥›îty
Ë
__THROW
;

221 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

222 
__END_NAMESPACE_C99


224 #ifde‡
__USE_XOPEN2K8


226 
	~<xloˇÀ.h
>

230 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

236 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

239 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

243 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

247 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

252 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

255 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

260 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

265 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

270 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

275 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

280 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

284 
w˘y≥_t
 
	$w˘y≥_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

285 
__THROW
;

289 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

290 
__THROW
;

298 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

301 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

305 
w˘øns_t
 
	$w˘øns_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

306 
__THROW
;

309 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

310 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

314 
__END_DECLS


	@/usr/include/asm-generic/errno-base.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


2 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

	@/usr/include/asm-generic/sockios.h

1 #i‚de‡
__ASM_GENERIC_SOCKIOS_H


2 
	#__ASM_GENERIC_SOCKIOS_H


	)

5 
	#FIOSETOWN
 0x8901

	)

6 
	#SIOCSPGRP
 0x8902

	)

7 
	#FIOGETOWN
 0x8903

	)

8 
	#SIOCGPGRP
 0x8904

	)

9 
	#SIOCATMARK
 0x8905

	)

10 
	#SIOCGSTAMP
 0x8906

	)

11 
	#SIOCGSTAMPNS
 0x8907

	)

	@/usr/include/asm/ioctl.h

1 
	~<asm-gíîic/io˘l.h
>

	@/usr/include/asm-generic/ioctl.h

1 #i‚de‡
_ASM_GENERIC_IOCTL_H


2 
	#_ASM_GENERIC_IOCTL_H


	)

22 
	#_IOC_NRBITS
 8

	)

23 
	#_IOC_TYPEBITS
 8

	)

30 #i‚de‡
_IOC_SIZEBITS


31 
	#_IOC_SIZEBITS
 14

	)

34 #i‚de‡
_IOC_DIRBITS


35 
	#_IOC_DIRBITS
 2

	)

38 
	#_IOC_NRMASK
 ((1 << 
_IOC_NRBITS
)-1)

	)

39 
	#_IOC_TYPEMASK
 ((1 << 
_IOC_TYPEBITS
)-1)

	)

40 
	#_IOC_SIZEMASK
 ((1 << 
_IOC_SIZEBITS
)-1)

	)

41 
	#_IOC_DIRMASK
 ((1 << 
_IOC_DIRBITS
)-1)

	)

43 
	#_IOC_NRSHIFT
 0

	)

44 
	#_IOC_TYPESHIFT
 (
_IOC_NRSHIFT
+
_IOC_NRBITS
)

	)

45 
	#_IOC_SIZESHIFT
 (
_IOC_TYPESHIFT
+
_IOC_TYPEBITS
)

	)

46 
	#_IOC_DIRSHIFT
 (
_IOC_SIZESHIFT
+
_IOC_SIZEBITS
)

	)

53 #i‚de‡
_IOC_NONE


54 
	#_IOC_NONE
 0U

	)

57 #i‚de‡
_IOC_WRITE


58 
	#_IOC_WRITE
 1U

	)

61 #i‚de‡
_IOC_READ


62 
	#_IOC_READ
 2U

	)

65 
	#_IOC
(
dú
,
ty≥
,
ƒ
,
size
) \

66 (((
dú
Ë<< 
_IOC_DIRSHIFT
) | \

67 ((
ty≥
Ë<< 
_IOC_TYPESHIFT
) | \

68 ((
ƒ
Ë<< 
_IOC_NRSHIFT
) | \

69 ((
size
Ë<< 
_IOC_SIZESHIFT
))

	)

71 
	#_IOC_TYPECHECK
(
t
Ë(—))

	)

74 
	#_IO
(
ty≥
,
ƒ
Ë
	`_IOC
(
_IOC_NONE
,—y≥),“r),0)

	)

75 
	#_IOR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

76 
	#_IOW
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

77 
	#_IOWR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

78 
	#_IOR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(size))

	)

79 
	#_IOW_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(size))

	)

80 
	#_IOWR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(size))

	)

83 
	#_IOC_DIR
(
ƒ
Ë((“rË>> 
_IOC_DIRSHIFT
Ë& 
_IOC_DIRMASK
)

	)

84 
	#_IOC_TYPE
(
ƒ
Ë((“rË>> 
_IOC_TYPESHIFT
Ë& 
_IOC_TYPEMASK
)

	)

85 
	#_IOC_NR
(
ƒ
Ë((“rË>> 
_IOC_NRSHIFT
Ë& 
_IOC_NRMASK
)

	)

86 
	#_IOC_SIZE
(
ƒ
Ë((“rË>> 
_IOC_SIZESHIFT
Ë& 
_IOC_SIZEMASK
)

	)

90 
	#IOC_IN
 (
_IOC_WRITE
 << 
_IOC_DIRSHIFT
)

	)

91 
	#IOC_OUT
 (
_IOC_READ
 << 
_IOC_DIRSHIFT
)

	)

92 
	#IOC_INOUT
 ((
_IOC_WRITE
|
_IOC_READ
Ë<< 
_IOC_DIRSHIFT
)

	)

93 
	#IOCSIZE_MASK
 (
_IOC_SIZEMASK
 << 
_IOC_SIZESHIFT
)

	)

94 
	#IOCSIZE_SHIFT
 (
_IOC_SIZESHIFT
)

	)

	@
1
.
1
/usr/include
265
6911
main.c
match.c
match.h
paho-c/src/Clients.c
paho-c/src/Clients.h
paho-c/src/Heap.c
paho-c/src/Heap.h
paho-c/src/LinkedList.c
paho-c/src/LinkedList.h
paho-c/src/Log.c
paho-c/src/Log.h
paho-c/src/MQTTAsync.c
paho-c/src/MQTTAsync.h
paho-c/src/MQTTClient.c
paho-c/src/MQTTClient.h
paho-c/src/MQTTClientPersistence.h
paho-c/src/MQTTPacket.c
paho-c/src/MQTTPacket.h
paho-c/src/MQTTPacketOut.c
paho-c/src/MQTTPacketOut.h
paho-c/src/MQTTPersistence.c
paho-c/src/MQTTPersistence.h
paho-c/src/MQTTPersistenceDefault.c
paho-c/src/MQTTPersistenceDefault.h
paho-c/src/MQTTProtocol.h
paho-c/src/MQTTProtocolClient.c
paho-c/src/MQTTProtocolClient.h
paho-c/src/MQTTProtocolOut.c
paho-c/src/MQTTProtocolOut.h
paho-c/src/MQTTVersion.c
paho-c/src/Messages.c
paho-c/src/Messages.h
paho-c/src/SSLSocket.c
paho-c/src/SSLSocket.h
paho-c/src/Socket.c
paho-c/src/Socket.h
paho-c/src/SocketBuffer.c
paho-c/src/SocketBuffer.h
paho-c/src/StackTrace.c
paho-c/src/StackTrace.h
paho-c/src/Thread.c
paho-c/src/Thread.h
paho-c/src/Tree.c
paho-c/src/Tree.h
paho-c/src/samples/MQTTAsync_publish.c
paho-c/src/samples/MQTTAsync_subscribe.c
paho-c/src/samples/pahopub.c
paho-c/src/samples/pubasync.c
paho-c/src/samples/pubsync.c
paho-c/src/samples/stdinpub.c
paho-c/src/samples/stdinpuba.c
paho-c/src/samples/stdoutsub.c
paho-c/src/samples/stdoutsuba.c
paho-c/src/samples/subasync.c
paho-c/src/utf-8.c
paho-c/src/utf-8.h
paho-c/test/MQTTTest_v2.c
paho-c/test/sync_client_test.c
paho-c/test/test1.c
paho-c/test/test3.c
paho-c/test/test4.c
paho-c/test/test5.c
paho-c/test/test6.c
paho-c/test/test8.c
paho-c/test/test_mqtt4async.c
paho-c/test/test_mqtt4sync.c
queue.c
queue.h
rs232.c
rs232.h
telnet.c
telnet.h
/usr/include/arpa/inet.h
/usr/include/ctype.h
/usr/include/dirent.h
/usr/include/dlfcn.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/limits.h
/usr/include/memory.h
/usr/include/netdb.h
/usr/include/netinet/in.h
/usr/include/netinet/tcp.h
/usr/include/openssl/crypto.h
/usr/include/openssl/err.h
/usr/include/openssl/ssl.h
/usr/include/poll.h
/usr/include/pthread.h
/usr/include/semaphore.h
/usr/include/signal.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/sys/ioctl.h
/usr/include/sys/mman.h
/usr/include/sys/param.h
/usr/include/sys/select.h
/usr/include/sys/socket.h
/usr/include/sys/stat.h
/usr/include/sys/time.h
/usr/include/sys/timeb.h
/usr/include/sys/types.h
/usr/include/sys/uio.h
/usr/include/syslog.h
/usr/include/termios.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/alloca.h
/usr/include/bits/byteswap.h
/usr/include/bits/confname.h
/usr/include/bits/dirent.h
/usr/include/bits/dlfcn.h
/usr/include/bits/environments.h
/usr/include/bits/errno.h
/usr/include/bits/fcntl.h
/usr/include/bits/fcntl2.h
/usr/include/bits/in.h
/usr/include/bits/ioctl-types.h
/usr/include/bits/ioctls.h
/usr/include/bits/mman.h
/usr/include/bits/netdb.h
/usr/include/bits/param.h
/usr/include/bits/posix1_lim.h
/usr/include/bits/posix2_lim.h
/usr/include/bits/posix_opt.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/select.h
/usr/include/bits/select2.h
/usr/include/bits/semaphore.h
/usr/include/bits/setjmp.h
/usr/include/bits/sigaction.h
/usr/include/bits/sigcontext.h
/usr/include/bits/siginfo.h
/usr/include/bits/signum.h
/usr/include/bits/sigset.h
/usr/include/bits/sigstack.h
/usr/include/bits/sigthread.h
/usr/include/bits/socket.h
/usr/include/bits/socket2.h
/usr/include/bits/stat.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-bsearch.h
/usr/include/bits/stdlib-float.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/termios.h
/usr/include/bits/time.h
/usr/include/bits/types.h
/usr/include/bits/uio.h
/usr/include/bits/unistd.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wordsize.h
/usr/include/bits/xopen_lim.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/openssl/bio.h
/usr/include/openssl/buffer.h
/usr/include/openssl/comp.h
/usr/include/openssl/dtls1.h
/usr/include/openssl/e_os2.h
/usr/include/openssl/ebcdic.h
/usr/include/openssl/hmac.h
/usr/include/openssl/kssl.h
/usr/include/openssl/lhash.h
/usr/include/openssl/opensslv.h
/usr/include/openssl/ossl_typ.h
/usr/include/openssl/pem.h
/usr/include/openssl/safestack.h
/usr/include/openssl/srtp.h
/usr/include/openssl/ssl2.h
/usr/include/openssl/ssl23.h
/usr/include/openssl/ssl3.h
/usr/include/openssl/stack.h
/usr/include/openssl/symhacks.h
/usr/include/openssl/tls1.h
/usr/include/openssl/x509.h
/usr/include/rpc/netdb.h
/usr/include/sched.h
/usr/include/stdint.h
/usr/include/sys/poll.h
/usr/include/sys/syslog.h
/usr/include/sys/sysmacros.h
/usr/include/sys/ttydefaults.h
/usr/include/sys/ucontext.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/asm/ioctls.h
/usr/include/asm/socket.h
/usr/include/bits/byteswap-16.h
/usr/include/bits/endian.h
/usr/include/bits/fcntl-linux.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/local_lim.h
/usr/include/bits/mman-linux.h
/usr/include/bits/poll.h
/usr/include/bits/poll2.h
/usr/include/bits/sched.h
/usr/include/bits/sockaddr.h
/usr/include/bits/socket_type.h
/usr/include/bits/stdio-lock.h
/usr/include/bits/syslog-ldbl.h
/usr/include/bits/syslog-path.h
/usr/include/bits/syslog.h
/usr/include/bits/timex.h
/usr/include/bits/typesizes.h
/usr/include/bits/wchar.h
/usr/include/gnu/stubs.h
/usr/include/inttypes.h
/usr/include/krb5.h
/usr/include/linux/errno.h
/usr/include/linux/limits.h
/usr/include/linux/param.h
/usr/include/openssl/asn1.h
/usr/include/openssl/dh.h
/usr/include/openssl/dsa.h
/usr/include/openssl/ec.h
/usr/include/openssl/ecdh.h
/usr/include/openssl/ecdsa.h
/usr/include/openssl/evp.h
/usr/include/openssl/pem2.h
/usr/include/openssl/pkcs7.h
/usr/include/openssl/pqueue.h
/usr/include/openssl/rsa.h
/usr/include/openssl/sha.h
/usr/include/openssl/x509_vfy.h
/usr/include/stdc-predef.h
/usr/include/sys/cdefs.h
/usr/include/sys/times.h
/usr/include/asm-generic/ioctls.h
/usr/include/asm-generic/socket.h
/usr/include/asm/errno.h
/usr/include/asm/param.h
/usr/include/bits/libc-lock.h
/usr/include/gconv.h
/usr/include/gnu/stubs-32.h
/usr/include/gnu/stubs-64.h
/usr/include/gnu/stubs-x32.h
/usr/include/krb5/krb5.h
/usr/include/openssl/bn.h
/usr/include/openssl/objects.h
/usr/include/wchar.h
/usr/include/asm-generic/errno.h
/usr/include/asm-generic/param.h
/usr/include/asm/sockios.h
/usr/include/assert.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar2.h
/usr/include/et/com_err.h
/usr/include/linux/ioctl.h
/usr/include/openssl/obj_mac.h
/usr/include/wctype.h
/usr/include/asm-generic/errno-base.h
/usr/include/asm-generic/sockios.h
/usr/include/asm/ioctl.h
/usr/include/asm-generic/ioctl.h
